Index: class/System.XML/System.Xml.Xsl/XsltException.cs
===================================================================
--- class/System.XML/System.Xml.Xsl/XsltException.cs	(revision 67841)
+++ class/System.XML/System.Xml.Xsl/XsltException.cs	(working copy)
@@ -64,6 +64,7 @@
 		int lineNumber;
 		int linePosition;
 		string sourceUri;
+		string xsltFrames;
 
 		#endregion
 
@@ -132,7 +133,10 @@
 
 		public override string Message {
 			get {
-				return base.Message;
+			    string msg = base.Message;
+			    if (xsltFrames != null)
+				    msg += xsltFrames;
+			    return msg;
 			}
 		}
 
@@ -157,6 +161,11 @@
 			info.AddValue ("sourceUri", sourceUri);
 		}
 
+		public void appendXsltFrame( string msg )
+		{
+		    xsltFrames += msg;
+		}
+
 		#endregion
 	}
 }
Index: class/System.XML/Mono.Xml.Xsl/XslStylesheet.cs
===================================================================
--- class/System.XML/Mono.Xml.Xsl/XslStylesheet.cs	(revision 67841)
+++ class/System.XML/Mono.Xml.Xsl/XslStylesheet.cs	(working copy)
@@ -66,6 +66,7 @@
 
 		// stylesheet attributes
 		string version;
+		string baseURI;
 		XmlQualifiedName [] extensionElementPrefixes;
 		XmlQualifiedName [] excludeResultPrefixes;
 		ArrayList stylesheetNamespaces = new ArrayList ();
@@ -111,6 +112,10 @@
 			get { return version; }
 		}
 
+		public string BaseURI {
+			get { return baseURI; }
+		}
+
 		public XslStylesheet ()
 		{
 		}
@@ -121,6 +126,8 @@
 			
 			templates = new XslTemplateTable (this);
 
+			baseURI = c.Input.BaseURI;
+
 			// move to root element
 			while (c.Input.NodeType != XPathNodeType.Element)
 				if (!c.Input.MoveToNext ())
Index: class/System.XML/Mono.Xml.Xsl/XslTemplate.cs
===================================================================
--- class/System.XML/Mono.Xml.Xsl/XslTemplate.cs	(revision 67841)
+++ class/System.XML/Mono.Xml.Xsl/XslTemplate.cs	(working copy)
@@ -350,11 +360,19 @@
 				c.Input.MoveToParent ();
 			}
 		}
-		
+
+		void accumulateFrames(XsltException ex)
+		{
+		    XslCompiledElementBase op = (XslCompiledElementBase) content;
+		    ex.appendXsltFrame(" from\nxsl:template " + Match  + " at " +
+				       style.BaseURI + "(" + op.LineNumber + "," + op.LinePosition + ")");
+		}
+
 		public virtual void Evaluate (XslTransformProcessor p, Hashtable withParams)
 		{
 			p.PushStack (stackSize);
 
+		try {
 			if (parameters != null) {
 				if (withParams == null) {
 					int len = parameters.Count;
@@ -374,10 +398,20 @@
 					}
 				}
 			}
-			
+
 			if (content != null)
 				content.Evaluate (p);
 
+		} catch (XsltException ex) {
+		    accumulateFrames (ex);
+		    throw ex;
+		} catch (Exception ex) {
+		    XsltException e = new XsltException ("Error during XSLT processing: ",
+						     null, p.CurrentNode);
+		    accumulateFrames (e);
+		    throw e;
+		}
+			
 			p.PopStack ();
 		}
 		public void Evaluate (XslTransformProcessor p)
