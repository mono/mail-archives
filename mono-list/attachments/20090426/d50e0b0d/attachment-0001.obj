#! /usr/bin/env escript

main(_Args) ->
    application:start(crypto),
    application:start(ssl),

    {ok, Listen} = gen_tcp:listen(8196, [binary, inet, {active, false}, {reuseaddr, true}]),
    
    loop(Listen).

loop(Listen) ->
    {ok, Sock} = gen_tcp:accept(Listen),
    case ssl:ssl_accept(Sock, [
            {cacertfile, "/etc/jsonevents/cert.pem"},
            {certfile, "/etc/jsonevents/cert.pem"},
            {keyfile, "/etc/jsonevents/key.pem"}]) 
    of
        {ok, SslSock} ->
            Fun = fun() ->
                    process_client(SslSock, Sock, 10)
            end,

            Pid = spawn(Fun),
            io:format("New connection from ~w in process ~w~n", [Sock, Pid]);
        Any ->
            io:format("~w: ~w~n", [Sock, Any])
    end,

    loop(Listen).



process_client(SslSock, Sock, 0) ->
    ssl:send(SslSock, "Ending session"),
    ssl:close(SslSock),
    gen_tcp:close(Sock);

process_client(SslSock, Sock, Count) ->
    ssl:send(SslSock, string:concat("Message Count: ", integer_to_list(Count))),
    timer:sleep(2000),
    process_client(SslSock, Sock, Count - 1).