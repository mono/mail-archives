using System;
using System.Collections;
using System.Net;
using System.Net.Security;
using System.Net.Sockets;
using System.Security.Authentication;
using System.Text;
using System.Security.Cryptography.X509Certificates;
using System.IO;

namespace JsonEvents.Ssl.Test
{
    public class JsonEventsClient
    {
        public static void Main(String[] args)
        {
            Console.WriteLine("Starting");
            RunClient("localhost", "ssl.rabbitmq.org");
            Console.WriteLine("Finished");
        }

        //private static Hashtable certificateErrors = new Hashtable();

        public static bool ValidateServerCertificate(
                object sender,
                X509Certificate certificate,
                X509Chain chain,
                SslPolicyErrors sslPolicyErrors)
        {
            if(sslPolicyErrors == SslPolicyErrors.None)
                return true;

            Console.WriteLine("Ceritificate error: {0}", sslPolicyErrors);

            return false;
        }

        public static void RunClient(string machineName, string serverName)
        {
            TcpClient client = new TcpClient(machineName, 8196);

            Console.WriteLine("Client connected.");

            SslStream sslStream = new SslStream(
                    client.GetStream(),
                    false,
                    new RemoteCertificateValidationCallback(ValidateServerCertificate),
                    null);

            try
            {
                sslStream.AuthenticateAsClient(
                        serverName, 
                        null,
                        SslProtocols.Ssl3,
                        false);
            }
            catch (AuthenticationException e)
            {
                Console.WriteLine("Exception: {0}", e.Message);
                if(e.InnerException != null)
                {
                    Console.WriteLine("Inner exception: {0}", e.InnerException.Message);
                }

                Console.WriteLine("Authentication failed - closing the connection.");
                client.Close();
                return;
            }

            Loop(sslStream);
            client.Close();
        }

        static void Loop(SslStream sslStream)
        {
            while (true)
            {
                Console.WriteLine("Waiting for server message");
                string serverMessage = ReadMessage(sslStream);
                Console.WriteLine(" > {0}", serverMessage);
            }
        }

        static string ReadMessage(SslStream sslStream)
        {
            byte[] buffer = new byte[2048];
            StringBuilder messageData = new StringBuilder();
            int bytes = -1;
            do
            {
                bytes = sslStream.Read(buffer, 0, buffer.Length);

                Decoder decoder = Encoding.UTF8.GetDecoder();
                char[] chars = new char[decoder.GetCharCount(buffer, 0, bytes)];
                decoder.GetChars(buffer, 0, bytes, chars, 0);
                messageData.Append(chars);
            } while(bytes != 0);

            return messageData.ToString();
        }
    }
}