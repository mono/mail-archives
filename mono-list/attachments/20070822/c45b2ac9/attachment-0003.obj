using System;
using System.IO;
using System.Net;
using System.Windows;
using System.Windows.Input;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using FlickrNet;

namespace NDSFlickr {
    public class Picture : Canvas {
        public delegate void PictureEvent(object o);
        public event PictureEvent DownloadedEvent;
        public event PictureEvent HiddenEvent;
        private Image image;

        private Storyboard show;
        private Storyboard hide;

        public static Picture Create() {
            string xaml;
            FileStream fs=File.OpenRead("picture.xaml");
            StreamReader sr=new StreamReader(fs);
            xaml=sr.ReadToEnd();
            Picture picture=XamlReader.Load(xaml) as Picture;

            picture.image=picture.FindName("p") as Image;

            return(picture);
            
        }

        public void LoadedEvent(object o,EventArgs e) {
            show=this.FindName("show") as Storyboard;
            show.Completed += delegate {
                ShowComplete();
            };
            hide=this.FindName("hide") as Storyboard;
            hide.Completed += delegate {
                 HideComplete();
             };
        }
        

        public double XPos {
            set {
                this.SetValue(Canvas.LeftProperty,value);
            }
            get {
                double pos=(double)this.GetValue(Canvas.LeftProperty);
                return(pos);
            }
        }

        public double YPos {
            set {
                this.SetValue(Canvas.TopProperty,value);
            }
            get {
                double pos=(double)this.GetValue(Canvas.TopProperty);
                return(pos);
            }
        }

        public void DownloadImageAsync(Uri uri) {
            Console.WriteLine("Downloading {0}",uri);
            Downloader downloader=new Downloader();
            downloader.Completed += delegate {
                DownloadComplete(downloader);
            };
            downloader.DownloadFailed += delegate {
                DownloadFailed(downloader);
            };
            downloader.Open("GET",uri,true);
            downloader.Send();
        }
        
        private void DownloadComplete(Downloader downloader) {
            Console.WriteLine("Download complete");
            image.SetSource(downloader,null);
            
            if(DownloadedEvent!=null) {
                DownloadedEvent(this);
            }
        }
        
        private void DownloadFailed(Downloader downloader) {
            Console.WriteLine("Download Failed");
        }

        public void Show() {
            this.XPos=0;
            this.YPos=0;
            this.Opacity=0;
            this.Visibility=Visibility.Visible;
            
            DoubleAnimation x=this.FindName("showX") as DoubleAnimation;
            x.To=100;
            DoubleAnimation y=this.FindName("showY") as DoubleAnimation;
            y.To=100;
            DoubleAnimation o=this.FindName("showOpacity") as DoubleAnimation;
            o.To=1;
            
            show.Begin();
        }

        private void ShowComplete() {
                Console.WriteLine("Complete show");
        }
        
        public void Hide() {
            Console.WriteLine("Hiding image");
            DoubleAnimation x=this.FindName("hideX") as DoubleAnimation;
            x.To=200;
            DoubleAnimation y=this.FindName("hideY") as DoubleAnimation;
            y.To=200;
            DoubleAnimation o=this.FindName("hideOpacity") as DoubleAnimation;
            o.To=0;
            
            hide.Begin();
        }

        private void HideComplete() {
            Console.WriteLine("Hide complete");
            this.Visibility=Visibility.Hidden;
            if(HiddenEvent!=null) {
                HiddenEvent(this);
            }
        }
    }

    
    public class Test : Canvas {
        private int index=1;
        private Flickr flickr;

        Picture currentImage=Picture.Create();
        Picture nextImage=Picture.Create();

        private void NextImageReady() {
            Console.WriteLine("Next image ready");
            currentImage.Hide();
            nextImage.Show();
        }

        private void CurrentImageHidden() {
            Picture x=currentImage;
            currentImage=nextImage;
            nextImage=x;
        }
                
        private void UpdateImage() {
            PhotoSearchOptions search=new PhotoSearchOptions();
            search.Tags="moonlight";
            search.PerPage=1;
            search.Page=index;
            index++;
            Photos photos=flickr.PhotosSearch(search);

            nextImage.DownloadImageAsync(new Uri(photos.PhotoCollection[0].MediumUrl));
        }

        
        public void LoadedEvent(object o,EventArgs e) {
            flickr=new Flickr("<flickr key>");

            nextImage.DownloadedEvent+= delegate {
                NextImageReady();
            };
            nextImage.HiddenEvent+= delegate {
                CurrentImageHidden();
            };
            currentImage.DownloadedEvent+=delegate {
                NextImageReady();
            };
            currentImage.HiddenEvent+=delegate {
                CurrentImageHidden();
            };

            this.Children.Add(currentImage);
            this.Children.Add(nextImage);

            UpdateImage();
            
            Storyboard sb = FindName ("timeout") as Storyboard;

            DoubleAnimation imageTimeout=FindName("imageTimeout") as DoubleAnimation;
			imageTimeout.Duration = new Duration (TimeSpan.FromSeconds (10));

            sb.Completed += delegate {
                UpdateImage();
                sb.Begin();
            };
            sb.Begin();
        }
    }
}
