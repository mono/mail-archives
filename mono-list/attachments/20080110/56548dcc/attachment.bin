Index: class/System.XML/System.Xml.Serialization/XmlSerializationReaderInterpreter.cs
===================================================================
--- class/System.XML/System.Xml.Serialization/XmlSerializationReaderInterpreter.cs	(revision 90185)
+++ class/System.XML/System.Xml.Serialization/XmlSerializationReaderInterpreter.cs	(working copy)
@@ -723,6 +723,9 @@
 			return list;
 		}
 
+
+		private MethodInfo addMethod;
+		private TypeData previousType;
 		void AddListValue (TypeData listType, ref object list, int index, object value, bool canCreateInstance)
 		{
 			Type type = listType.Type;
@@ -737,12 +740,18 @@
 					if (canCreateInstance) list = Activator.CreateInstance (type, true);
 					else throw CreateReadOnlyCollectionException (type.FullName);
 				}
+				
+				// If the current TypeData does not match the one that was sent previously, recreate the methodinfo
+				if (addMethod == null || previousType.Type != listType.Type || previousType.ListItemType != listType.ListItemType)
+				{
+					previousType = listType;
+					addMethod = type.GetMethod ("Add", new Type[] {listType.ListItemType} );
+				}
 
-				MethodInfo mi = type.GetMethod ("Add", new Type[] {listType.ListItemType} );
-				mi.Invoke (list, new object[] { value });
+				addMethod.Invoke(list, new object[] { value });
 			}
 		}
-
+		
 		object CreateInstance (Type type)
 		{
 			return Activator.CreateInstance (type, empty_array);