using System;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.ServiceProcess;
using System.IO;
using System.Configuration.Install;
using System.Threading;

namespace TestService
{
	public class MainClass
	{
		private const string LogFile = "TestService.log";

		// The main entry point for the process
		static void Main()
		{
			Write2Log(null, "Main starting");
			
			System.ServiceProcess.ServiceBase[] ServicesToRun;
	
			ServicesToRun = new System.ServiceProcess.ServiceBase[] { new TestService("TestService1"), new TestService("TestService2") };

			System.ServiceProcess.ServiceBase.Run(ServicesToRun);
			
			Write2Log(null, "Main ended");
		}
		
		public static void Write2Log(string category, string message)
		{
			using (StreamWriter w = new StreamWriter(LogFile, true, System.Text.Encoding.UTF8) )
			{
				if ( category != null )
					w.WriteLine(category + " - " + message);
				else
					w.WriteLine(message);
			}
		}
	}
	
	public class TestService : System.ServiceProcess.ServiceBase
	{
		private Thread mainThread = null;
		private bool stopThread = false;
		
		public TestService(string name)
		{
			this.ServiceName = name;
			this.CanPauseAndContinue = true;
		}
	
		protected override void Dispose( bool disposing )
		{
			MainClass.Write2Log(ServiceName, "Dispose");
			
			base.Dispose( disposing );
		}

		protected override void OnStart(string[] args)
		{
			MainClass.Write2Log(ServiceName, "Starting Service...");			
			
			mainThread = new Thread (new ThreadStart (_MainLoop));
			stopThread = false;
			mainThread.Start ();
		}
 
		protected override void OnStop()
		{
			MainClass.Write2Log(ServiceName, "Stopping Service...");
			
			if (mainThread != null) {
				stopThread = true;
				mainThread.Join ();
				mainThread = null;
			}
		}

		protected override void OnPause()
		{
			MainClass.Write2Log(ServiceName, "Pausing Service...");
		}

		protected override void OnContinue()
		{
			MainClass.Write2Log(ServiceName, "Continuing Service...");
		}

		private void _MainLoop ()
		{
			while (!stopThread)
				Thread.Sleep (500);
		}
	}

	/// <summary>
	/// This class allows easy installation of this service on Windows.
	/// </summary>
	[RunInstaller(true)]
	public class ProjectInstaller : System.Configuration.Install.Installer
	{
		private System.ServiceProcess.ServiceProcessInstaller serviceProcessInstaller1;
		private System.ServiceProcess.ServiceInstaller serviceInstaller1;
		private System.ServiceProcess.ServiceInstaller serviceInstaller2;
			
		private System.ComponentModel.Container components = null;

		public ProjectInstaller()
		{
			// This call is required by the Designer.
			InitializeComponent();
		}

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}


		#region Component Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.serviceProcessInstaller1 = new System.ServiceProcess.ServiceProcessInstaller();
			this.serviceInstaller1 = new System.ServiceProcess.ServiceInstaller();
			this.serviceInstaller2 = new System.ServiceProcess.ServiceInstaller();
			// 
			// serviceProcessInstaller1
			// 
			this.serviceProcessInstaller1.Password = null;
			this.serviceProcessInstaller1.Username = null;
			// 
			// serviceInstaller1
			// 
			this.serviceInstaller1.DisplayName = "Test Service 1";
			this.serviceInstaller1.ServiceName = "TestService1";
			// 
			// serviceInstaller2
			// 
			this.serviceInstaller2.DisplayName = "Test Service 2";
			this.serviceInstaller2.ServiceName = "TestService2";
			// 
			// ProjectInstaller
			// 
			this.Installers.AddRange(new System.Configuration.Install.Installer[] {
																					  this.serviceProcessInstaller1,
																					  this.serviceInstaller1,
																					  this.serviceInstaller2});

		}
		#endregion
	}

}
