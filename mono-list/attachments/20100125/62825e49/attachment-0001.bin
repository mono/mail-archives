/*
 *
 * gcc -Wall -o mymono mymono.c -Wl,--export-dynamic `pkg-config --libs mono`
 * gmcs test.cs
 * ./mymono test.exe
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

/* import from mono */
int mono_main (int argc, char** argv);

const int MAX_ARGV0 = 1024;
static char* original_argv0 = NULL;

void
set_process_command_line (char* line)
{
	if (!(line && original_argv0))
		return;

	strncpy (original_argv0, line, MAX_ARGV0 - 1);
}

char*
get_process_command_line ()
{
	return strdup (original_argv0);
}

static void
expand_command_line (char** argv)
{
	char new_arg0[MAX_ARGV0];
	char *file = argv [0];
	char proc_file[4096];
	int len;

	memset (new_arg0, 'a', MAX_ARGV0);
	new_arg0 [MAX_ARGV0 - 1] = 0;
	argv [0] = new_arg0;

	len = readlink ("/proc/self/exe", proc_file, sizeof (proc_file) - 1);
	if (len != -1) {
		proc_file [len] = 0;
		file = proc_file;
	}

	/* export argv[0] (which is now /proc/self/exe) to the new process */
	setenv ("MYMONO_ORIGINAL_ARGV0", file, 1);
	execv (file, argv);

	/* not reached */
	perror("exec");
	exit (1);
}

int
main (int argc, char** argv)
{
	if (strlen (argv [0]) < MAX_ARGV0 - 1)
		expand_command_line (argv);

	original_argv0 = argv [0];
	set_process_command_line (getenv ("MYMONO_ORIGINAL_ARGV0"));

	/* pass control to mono */
	return mono_main (argc, argv);
}
