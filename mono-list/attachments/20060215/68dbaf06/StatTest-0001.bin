using System;
using MUN = Mono.Unix.Native;

public class StatText {
    public static void Main(string[] argv)
    {
	if (argv.Length == 0) {
	    Console.WriteLine("You need to provide to filename to stat.");
	    System.Environment.Exit(1);
	}

	string filename = argv[0];
	MUN.Stat stat;

	Console.WriteLine("filename: {0}\n", filename);

	Console.WriteLine("stat");
	MUN.Syscall.stat(filename, out stat);
	dostat(stat);

	Console.WriteLine("lstat");
	MUN.Syscall.lstat(filename, out stat);
	dostat(stat);
    }
    
    static void dostat(MUN.Stat stat)
    {
	bool is_file = (stat.st_mode & MUN.FilePermissions.S_IFREG) == MUN.FilePermissions.S_IFREG;
	bool is_dir = (stat.st_mode & MUN.FilePermissions.S_IFDIR) == MUN.FilePermissions.S_IFDIR;
	bool is_fifo = (stat.st_mode & MUN.FilePermissions.S_IFIFO) == MUN.FilePermissions.S_IFIFO;
	bool is_sock = (stat.st_mode & MUN.FilePermissions.S_IFSOCK) == MUN.FilePermissions.S_IFSOCK;
	bool is_chardev = (stat.st_mode & MUN.FilePermissions.S_IFCHR) == MUN.FilePermissions.S_IFCHR;
	bool is_blockdev = (stat.st_mode & MUN.FilePermissions.S_IFBLK) == MUN.FilePermissions.S_IFBLK;

	Console.WriteLine("\tis_file: {0}", is_file ? "true" : "false");
	Console.WriteLine("\tis_dir: {0}", is_dir ? "true" : "false");
	Console.WriteLine("\tis_fifo: {0}", is_fifo ? "true" : "false");
	Console.WriteLine("\tis_sock: {0}", is_sock ? "true" : "false");
	Console.WriteLine("\tis_chardev: {0}", is_chardev ? "true" : "false");
	Console.WriteLine("\tis_blockdev: {0}\n", is_blockdev ? "true" : "false");
    }
}
