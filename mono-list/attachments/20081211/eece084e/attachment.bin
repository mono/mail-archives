
using System;
using System.Windows.Forms;
using System.Drawing;
using System.Drawing.Text;

namespace ThreadFormProblem
{
	
	public class Agent : Control
	{
		Image img = Image.FromFile("Libre.png");
		Point offset;
		ToolTip tip = new ToolTip();
		bool mouseDown = false;
		Point mouseOffset;
		
		public Agent(int x, int y)
		{	
			Size = img.Size;		
			offset = new Point(Size.Width/2-5, Size.Height/2-5);
			Position = new Point(x,y);
			SetStyle(ControlStyles.SupportsTransparentBackColor, true);
			BackColor = Color.Transparent;
		}
		
		//center of the object...
		public Point Position
		{
			get {return new Point(Location.X+offset.X, Location.Y + offset.Y);}
			set { Location = new Point(value.X-offset.X, value.Y-offset.Y); }
		}

		protected override void OnPaint(PaintEventArgs e)
		{
			e.Graphics.DrawImage(img, 0,0);
			e.Graphics.DrawString("Hello!",Font ,Brushes.Green,10,10,StringFormat.GenericTypographic);
			e.Graphics.DrawRectangle(Pens.Green, offset.X, offset.Y, 7,7);
		}

		protected override void OnMouseDown (MouseEventArgs e)
		{
			if (e.Button != MouseButtons.Left)
				return;
			
			this.SendToBack();
			tip.Show("Move it!",this, e.Location);
			mouseOffset.X = -e.X - SystemInformation.FrameBorderSize.Width;
			mouseOffset.Y = -e.Y -   SystemInformation.FrameBorderSize.Height - SystemInformation.FrameBorderSize.Height;
			mouseDown = true;
		}
		
		protected override void OnMouseUp (MouseEventArgs e)
		{
			mouseDown=false;
			tip.Hide(this);
		}

		protected override void OnMouseMove (MouseEventArgs e)
		{
			if (mouseDown)
			{
				Point pos = Control.MousePosition;
				pos.Offset(mouseOffset);
				Position = pos;
			}
		}

	}
}
