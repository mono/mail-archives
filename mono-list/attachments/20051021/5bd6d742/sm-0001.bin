// embedded structure marshaling

using System;
using System.Runtime.InteropServices;

struct Inner {
	public byte a;
	public byte b;
}

struct Outer {
	public int size;
	public IntPtr inner;
}

class Test {
	[DllImport ("sm")]
	private static extern int PrintOuter (ref Outer outer);

	public static void Main ()
	{
		Inner[] inner = new Inner [26];
		for (int i = 0; i < inner.Length; ++i) {
			inner [i].a = (byte) ((int) 'a' + i);
			inner [i].b = (byte) ((int) 'z' - i);
		}

		Outer o = new Outer ();
		o.size = inner.Length;

		int inner_size = Marshal.SizeOf (typeof(Inner));
		o.inner = Marshal.AllocHGlobal (inner_size*inner.Length);
		for (int i = 0; i < inner.Length; ++i) {
			IntPtr p = (IntPtr) ((long) o.inner + (long) i*inner_size);
			Marshal.StructureToPtr (inner [i], p, false);
		}

		PrintOuter (ref o);

		Marshal.FreeHGlobal (o.inner);
	}
}

