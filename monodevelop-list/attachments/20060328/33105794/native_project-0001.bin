Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects/NativeProjectConfiguration.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects/NativeProjectConfiguration.cs	(revision 0)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects/NativeProjectConfiguration.cs	(revision 0)
@@ -0,0 +1,82 @@
+//
+// NativeProjectConfiguration.cs
+//
+// Author:
+//   Levi Bard
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.IO;
+using MonoDevelop.Projects.Serialization;
+
+namespace MonoDevelop.Projects
+{
+	public class NativeProjectConfiguration: AbstractProjectConfiguration
+	{
+		[ItemProperty ("Output/assembly")]
+		string assembly = "a";
+		
+		[ItemProperty ("Build/target")]
+		CompileTarget compiletarget = CompileTarget.Exe;
+		
+		[ItemProperty ("CodeGeneration")]
+		ICloneable compilationParameters;
+		
+		string sourcePath;
+
+		public virtual string OutputAssembly {
+			get { return assembly; }
+			set { assembly = value; }
+		}
+		
+		public CompileTarget CompileTarget {
+			get { return compiletarget; }
+			set { compiletarget = value; }
+		}
+		
+		public ICloneable CompilationParameters {
+			get { return compilationParameters; }
+			set { compilationParameters = value; }
+		}
+		
+		public string CompiledOutputName {
+			get { return Path.Combine (OutputDirectory, OutputAssembly) + (CompileTarget == CompileTarget.Library ? ".so" : string.Empty); }
+		}
+		
+		public string SourceDirectory {
+			get { return sourcePath; }
+			set { sourcePath = value; }
+		}
+		
+		public override void CopyFrom (IConfiguration configuration)
+		{
+			Console.WriteLine("NativeProjectConfiguration.CopyFrom()");
+			base.CopyFrom (configuration);
+			NativeProjectConfiguration conf = (NativeProjectConfiguration) configuration;
+			
+			assembly = conf.assembly;
+			compiletarget = conf.compiletarget;
+			sourcePath = conf.sourcePath;
+			compilationParameters = conf.compilationParameters != null ? (ICloneable)conf.compilationParameters.Clone () : null;
+		}
+	}
+}

Property changes on: Core/src/MonoDevelop.Projects/MonoDevelop.Projects/NativeProjectConfiguration.cs
___________________________________________________________________
Name: svn:executable
   + *

Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects/NativeProjectBinding.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects/NativeProjectBinding.cs	(revision 0)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects/NativeProjectBinding.cs	(revision 0)
@@ -0,0 +1,76 @@
+//
+// NativeProjectBinding.cs
+//
+// Author:
+//   Levi Bard
+//
+//   Based on DotNetProjectBinding by Lluis Sanchez Gual
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.IO;
+using System.Xml;
+using MonoDevelop.Projects.Serialization;
+using MonoDevelop.Core;
+
+namespace MonoDevelop.Projects
+{
+	public class NativeProjectBinding : IProjectBinding
+	{
+		public virtual string Name {
+			get { return "Native"; }
+		}
+		
+		public Project CreateProject (ProjectCreateInformation info, XmlElement projectOptions)
+		{
+			string lang = projectOptions.GetAttribute ("language");
+			return CreateProject (lang, info, projectOptions);
+		}
+		
+		protected virtual NativeProject CreateProject (string languageName, ProjectCreateInformation info, XmlElement projectOptions)
+		{
+			return new NativeProject (languageName, info, projectOptions);
+		}
+		
+		public Project CreateSingleFileProject (string file)
+		{
+			Console.WriteLine("NativeProjectBinding.CreateSingleFileProject()");
+			INativeLanguageBinding binding = Services.Languages.GetBindingPerFileName (file) as INativeLanguageBinding;
+			if (binding != null) {
+				ProjectCreateInformation info = new ProjectCreateInformation ();
+				info.ProjectName = Path.GetFileNameWithoutExtension (file);
+				info.CombinePath = Path.GetDirectoryName (file);
+				Project project = CreateProject (binding.Language, info, null);
+				project.ProjectFiles.Add (new ProjectFile (file));
+				return project;
+			}
+			return null;
+		}
+		
+		public bool CanCreateSingleFileProject (string file)
+		{
+			INativeLanguageBinding binding = Services.Languages.GetBindingPerFileName (file) as INativeLanguageBinding;
+			return binding != null;
+		}
+		
+	}
+}

Property changes on: Core/src/MonoDevelop.Projects/MonoDevelop.Projects/NativeProjectBinding.cs
___________________________________________________________________
Name: svn:executable
   + *

Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects/NativeProject.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects/NativeProject.cs	(revision 0)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects/NativeProject.cs	(revision 0)
@@ -0,0 +1,255 @@
+//
+// NativeProject.cs
+//
+// Author:
+//   Levi Bard
+//
+//   Based on DotNetProject by Mike Kruger
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.IO;
+using System.Diagnostics;
+using System.Xml;
+using System.Threading;
+using MonoDevelop.Core;
+using MonoDevelop.Projects.Serialization;
+using MonoDevelop.Core.Execution;
+using MonoDevelop.Core.ProgressMonitoring;
+
+namespace MonoDevelop.Projects
+{
+	[DataInclude (typeof(NativeProjectConfiguration))]
+	public class NativeProject : Project
+	{
+		[ItemProperty]
+		string language;
+		
+		INativeLanguageBinding languageBinding;
+		
+		public override string ProjectType {
+			get { return "Native"; }
+		}
+		
+		public string LanguageName {
+			get { return language; }
+		}
+		
+		internal NativeProject ()
+		{
+		}
+		
+		internal NativeProject (string languageName)
+		{
+			language = languageName;
+			languageBinding = FindLanguage (language);
+		}
+		
+		public NativeProject (string languageName, ProjectCreateInformation info, XmlElement projectOptions)
+		{
+			Console.WriteLine("NativeProject constructor");
+			string binPath;
+			if (info != null) {
+				Name = info.ProjectName;
+				binPath = info.BinPath;
+			} else {
+				binPath = ".";
+			}
+			
+			language = languageName;
+			languageBinding = FindLanguage (language);
+			
+			NativeProjectConfiguration configuration = (NativeProjectConfiguration) CreateConfiguration ("Debug");
+			configuration.CompilationParameters = languageBinding.CreateCompilationParameters (projectOptions);
+			Configurations.Add (configuration);
+			
+			configuration = (NativeProjectConfiguration) CreateConfiguration ("Release");
+			configuration.DebugMode = false;
+			configuration.CompilationParameters = languageBinding.CreateCompilationParameters (projectOptions);
+			Configurations.Add (configuration);
+			
+			foreach (NativeProjectConfiguration parameter in Configurations) {
+				parameter.OutputDirectory = Path.Combine (binPath, parameter.Name);
+				parameter.OutputAssembly  = Name;
+				
+				if (projectOptions != null) {
+					if (projectOptions.Attributes["Target"] != null) {
+						parameter.CompileTarget = (CompileTarget)Enum.Parse(typeof(CompileTarget), projectOptions.Attributes["Target"].InnerText);
+					}
+					if (projectOptions.Attributes["PauseConsoleOutput"] != null) {
+						parameter.PauseConsoleOutput = Boolean.Parse(projectOptions.Attributes["PauseConsoleOutput"].InnerText);
+					}
+				}
+			}
+		}
+		
+		public override void Deserialize (ITypeSerializer handler, DataCollection data)
+		{
+			Console.WriteLine("NativeProject.Deserialize()");
+			DataValue val = data ["language"] as DataValue;
+			if (val != null && Services.Languages.GetBindingPerLanguageName (val.Value) == null)
+				throw new UserException (GettextCatalog.GetString ("Unknown language: {0}", val.Value), GettextCatalog.GetString ("You may need to install an additional add-in to support projects for the language '{0}'", val.Value));
+
+			base.Deserialize (handler, data);
+			languageBinding = FindLanguage (language);
+		}
+		
+		INativeLanguageBinding FindLanguage (string name)
+		{
+			INativeLanguageBinding binding = Services.Languages.GetBindingPerLanguageName (language) as INativeLanguageBinding;
+			if (binding == null)
+				throw new InvalidOperationException ("Language not supported: " + language);
+			return binding;
+		}
+
+		public override IConfiguration CreateConfiguration (string name)
+		{
+			Console.WriteLine("NativeProject.CreateConfiguration()");
+			NativeProjectConfiguration conf = new NativeProjectConfiguration ();
+			conf.Name = name;
+			conf.CompilationParameters = languageBinding.CreateCompilationParameters (null);
+			return conf;
+		}
+		
+		protected override ICompilerResult DoBuild (IProgressMonitor monitor)
+		{
+			NativeProjectConfiguration conf = (NativeProjectConfiguration) ActiveConfiguration;
+			conf.SourceDirectory = BaseDirectory;
+			
+			foreach (ProjectFile finfo in ProjectFiles) {
+				// Treat app.config in the project root directory as the application config
+				if (Path.GetFileName (finfo.Name).ToUpper () == "app.config".ToUpper() &&
+					Path.GetDirectoryName (finfo.Name) == BaseDirectory)
+				{
+					File.Copy (finfo.Name, conf.CompiledOutputName + ".config",true);
+				}
+			}
+
+			ICompilerResult res = languageBinding.Compile (ProjectFiles, ProjectReferences, conf, monitor);
+			CopyReferencesToOutputPath (false);
+			return res;
+		}
+		
+		public override string GetOutputFileName ()
+		{
+			NativeProjectConfiguration conf = (NativeProjectConfiguration) ActiveConfiguration;
+			return conf.CompiledOutputName;
+		}
+		
+		protected override void DoExecute (IProgressMonitor monitor, ExecutionContext context)
+		{
+			string platform = "Native";
+			NativeProjectConfiguration configuration = (NativeProjectConfiguration) ActiveConfiguration;
+			monitor.Log.WriteLine ("Running " + configuration.CompiledOutputName + " ...");
+			
+			IConsole console;
+			if (configuration.ExternalConsole)
+				console = context.ExternalConsoleFactory.CreateConsole (!configuration.PauseConsoleOutput);
+			else
+				console = context.ConsoleFactory.CreateConsole (!configuration.PauseConsoleOutput);
+			
+			AggregatedOperationMonitor operationMonitor = new AggregatedOperationMonitor (monitor);
+			
+			try {
+				IExecutionHandler handler = context.ExecutionHandlerFactory.CreateExecutionHandler (platform);
+				if (handler == null) {
+					monitor.ReportError ("Can not execute \"" + configuration.CompiledOutputName + "\". The selected execution mode is not supported in the " + platform + " platform.", null);
+					return;
+				}
+			
+				IProcessAsyncOperation op = handler.Execute (configuration.CompiledOutputName, configuration.CommandLineParameters, Path.GetDirectoryName (configuration.CompiledOutputName), console);
+				
+				operationMonitor.AddOperation (op);
+				op.WaitForCompleted ();
+				monitor.Log.WriteLine ("The application exited with code: {0}", op.ExitCode);
+			} catch (Exception ex) {
+				monitor.ReportError ("Can not execute " + "\"" + configuration.CompiledOutputName + "\"", ex);
+			} finally {
+				operationMonitor.Dispose ();
+				console.Dispose ();
+			}
+		/*******  
+		 * DotNetProject implementation
+		 *******
+			CopyReferencesToOutputPath (true);
+			
+			NativeProjectConfiguration configuration = (NativeProjectConfiguration) ActiveConfiguration;
+			monitor.Log.WriteLine ("Running " + configuration.CompiledOutputName + " ...");
+			
+			string platform = "Mono";
+			
+			switch (configuration.NetRuntime) {
+				case NetRuntime.Mono:
+					platform = "Mono";
+					break;
+				case NetRuntime.MonoInterpreter:
+					platform = "Mint";
+					break;
+			}
+
+			IConsole console;
+			if (configuration.ExternalConsole)
+				console = context.ExternalConsoleFactory.CreateConsole (!configuration.PauseConsoleOutput);
+			else
+				console = context.ConsoleFactory.CreateConsole (!configuration.PauseConsoleOutput);
+			
+			AggregatedOperationMonitor operationMonitor = new AggregatedOperationMonitor (monitor);
+			
+			try {
+				IExecutionHandler handler = context.ExecutionHandlerFactory.CreateExecutionHandler (platform);
+				if (handler == null) {
+					monitor.ReportError ("Can not execute \"" + configuration.CompiledOutputName + "\". The selected execution mode is not supported in the " + platform + " platform.", null);
+					return;
+				}
+			
+				IProcessAsyncOperation op = handler.Execute (configuration.CompiledOutputName, configuration.CommandLineParameters, Path.GetDirectoryName (configuration.CompiledOutputName), console);
+				
+				operationMonitor.AddOperation (op);
+				op.WaitForCompleted ();
+				monitor.Log.WriteLine ("The application exited with code: {0}", op.ExitCode);
+			} catch (Exception ex) {
+				monitor.ReportError ("Can not execute " + "\"" + configuration.CompiledOutputName + "\"", ex);
+			} finally {
+				operationMonitor.Dispose ();
+				console.Dispose ();
+			}
+		*********/
+		}
+		
+		public override void GenerateMakefiles (Combine parentCombine)
+		{
+			Runtime.LoggingService.DebugFormat ("Generating makefiles for {0}",
+				Name);
+			languageBinding.GenerateMakefile (this, parentCombine);
+		}
+		
+		public override bool IsCompileable(string fileName)
+		{
+			return languageBinding.IsSourceCodeFile (fileName);
+		}
+		
+		public virtual string GetDefaultNamespace (string fileName)
+		{
+			return Name;
+		}
+	}
+}

Property changes on: Core/src/MonoDevelop.Projects/MonoDevelop.Projects/NativeProject.cs
___________________________________________________________________
Name: svn:executable
   + *

Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects/INativeLanguageBinding.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects/INativeLanguageBinding.cs	(revision 0)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects/INativeLanguageBinding.cs	(revision 0)
@@ -0,0 +1,57 @@
+//
+// NativeProjectBinding.cs
+//
+// Author:
+//   Levi Bard
+//
+//   Based on DotNetProjectBinding by Lluis Sanchez Gual
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.CodeDom.Compiler;
+using System.Collections;
+using System.Xml;
+
+using MonoDevelop.Projects;
+using MonoDevelop.Core;
+using MonoDevelop.Projects.Parser;
+using MonoDevelop.Projects.CodeGeneration;
+
+namespace MonoDevelop.Projects
+{
+	/// <summary>
+	/// The <code>INativeLanguageBinding</code> interface is the base interface
+	/// of all native language bindings avaiable.
+	/// </summary>
+	public interface INativeLanguageBinding: ILanguageBinding
+	{
+		ICompilerResult Compile (ProjectFileCollection projectFiles, ProjectReferenceCollection references, NativeProjectConfiguration configuration, IProgressMonitor monitor);
+		
+		void GenerateMakefile (Project project, Combine parentCombine);
+		
+		ICloneable CreateCompilationParameters (XmlElement projectOptions);
+
+		// Optional. Return null if not supported.
+		CodeDomProvider GetCodeDomProvider ();
+	}
+	
+}

Property changes on: Core/src/MonoDevelop.Projects/MonoDevelop.Projects/INativeLanguageBinding.cs
___________________________________________________________________
Name: svn:executable
   + *

Index: Core/src/MonoDevelop.Projects/Makefile.am
===================================================================
--- Core/src/MonoDevelop.Projects/Makefile.am	(revision 58056)
+++ Core/src/MonoDevelop.Projects/Makefile.am	(working copy)
@@ -143,6 +143,9 @@
 MonoDevelop.Projects/DotNetProject.cs \
 MonoDevelop.Projects/DotNetProjectBinding.cs \
 MonoDevelop.Projects/DotNetProjectConfiguration.cs \
+MonoDevelop.Projects/NativeProject.cs \
+MonoDevelop.Projects/NativeProjectBinding.cs \
+MonoDevelop.Projects/NativeProjectConfiguration.cs \
 MonoDevelop.Projects/IConfiguration.cs \
 MonoDevelop.Projects/IBuildStep.cs \
 MonoDevelop.Projects/Project.cs \
@@ -202,6 +205,7 @@
 MonoDevelop.Projects/ICompilerResult.cs \
 MonoDevelop.Projects/ILanguageBinding.cs \
 MonoDevelop.Projects/IDotNetLanguageBinding.cs \
+MonoDevelop.Projects/INativeLanguageBinding.cs \
 MonoDevelop.Projects.Extensions/LanguageBindingCodon.cs \
 MonoDevelop.Projects/CombineEntryCollection.cs \
 MonoDevelop.Projects/ConfigurationCollection.cs \
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.addin.xml
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.addin.xml	(revision 58056)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.addin.xml	(working copy)
@@ -41,6 +41,8 @@
 	<Extension path = "/SharpDevelop/Workbench/ProjectBindings">
 		<ProjectBinding id = "DotNet"
 						class = "MonoDevelop.Projects.DotNetProjectBinding" />
+		<ProjectBinding id = "Native"
+						class = "MonoDevelop.Projects.NativeProjectBinding" />
 	</Extension>
 	  
 	<Extension path = "/SharpDevelop/Workbench/ProjectFileFormats">
@@ -54,6 +56,7 @@
 		<Class class = "MonoDevelop.Projects.Combine" />
 		<Class class = "MonoDevelop.Projects.Project" />
 		<Class class = "MonoDevelop.Projects.DotNetProject" />
+		<Class class = "MonoDevelop.Projects.NativeProject" />
 	</Extension>
 
 	<Extension path = "/SharpDevelop/Workbench/Serialization/ExtendedProperties">
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Templates/SingleFileDescriptionTemplate.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Templates/SingleFileDescriptionTemplate.cs	(revision 58056)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Templates/SingleFileDescriptionTemplate.cs	(working copy)
@@ -116,7 +116,7 @@
 			string defaultName = name;
 			
 			if (language != "") {
-				IDotNetLanguageBinding languageBinding = GetDotNetLanguageBinding (language);
+				ILanguageBinding languageBinding = GetLanguageBinding (language);
 				defaultName = languageBinding.GetFileName (Path.GetFileNameWithoutExtension (defaultName));
 			}
 			
@@ -143,10 +143,14 @@
 				throw new UserException (GettextCatalog.GetString ("The file '{0}' already exists in the project.", Path.GetFileName (fileName)));
 			
 			string content = CreateContent (language);
+			string cname = Path.GetFileNameWithoutExtension (fileName);
+			string ns = "";
 			
-			DotNetProject netProject = project as DotNetProject;
-			string ns = netProject != null ? netProject.GetDefaultNamespace (fileName) : "";
-			string cname = Path.GetFileNameWithoutExtension (fileName);
+			if(project.ProjectType == "DotNet"){
+				DotNetProject netProject = project as DotNetProject;
+				ns = netProject != null ? netProject.GetDefaultNamespace (fileName) : "";
+			}
+			
 			string[,] tags = { 
 				{"Name", cname}, 
 				{"Namespace", ns},
@@ -177,5 +181,13 @@
 				throw new InvalidOperationException ("Language '" + language + "' not found");
 			return binding;
 		}
+
+		protected ILanguageBinding GetLanguageBinding (string language)
+		{
+			ILanguageBinding binding = MonoDevelop.Projects.Services.Languages.GetBindingPerLanguageName (language) as ILanguageBinding;
+			if (binding == null)
+				throw new InvalidOperationException ("Language '" + language + "' not found");
+			return binding;
+		}
 	}
 }