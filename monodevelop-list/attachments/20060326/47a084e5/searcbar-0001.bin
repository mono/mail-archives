Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/SearchCommands.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/SearchCommands.cs	(revision 58538)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/SearchCommands.cs	(working copy)
@@ -27,7 +27,8 @@
 		FindNextSelection,
 		FindPreviousSelection,
 		FindBox,
-		ReplaceInFiles
+		ReplaceInFiles,
+		FindInCurrentDocument
 	}
 
 	internal class FindInFilesHandler : CommandHandler
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.addin.xml
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.addin.xml	(revision 58538)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.addin.xml	(working copy)
@@ -448,6 +448,11 @@
 				_label = "R_eplace In Files..." 
 				icon = "md-replace-in-files" 
 				description = "Replace in files" />
+		<Command id = "MonoDevelop.Ide.Commands.SearchCommands.FindInCurrentDocument"
+				_label = "_Find In Current Document" 
+				icon = "gtk-find" 
+				_description = "Find In Current Document" 
+				shortcut = "Control|Shift|F" />
 
 		<!-- RefactoryCommands -->
 		
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorWidget.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorWidget.cs	(revision 58538)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorWidget.cs	(working copy)
@@ -146,6 +146,13 @@
 				using (GotoLineNumberDialog gnd = new GotoLineNumberDialog ())
 					gnd.Run ();
 		}
+
+		[CommandHandler (SearchCommands.FindInCurrentDocument)]
+		public void FindInCurrentDocument()
+		{
+			DisplayBinding.ShowSearchBar();
+		}
+
 		
 		protected static string StrMiddleTruncate (string str, int truncLen)
 		{
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs	(revision 58538)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs	(working copy)
@@ -17,6 +17,8 @@
 using MonoDevelop.Ide.Codons;
 using MonoDevelop.SourceEditor.Document;
 using MonoDevelop.Projects.Text;
+using MonoDevelop.Ide.Commands;
+using MonoDevelop.Components.Commands;
 
 using Gtk;
 using GtkSourceView;
@@ -86,6 +88,8 @@
 		BreakpointEventHandler breakpointRemovedHandler;
 		EventHandler executionChangedHandler;
 		int currentExecutionLine = -1;
+
+		Widget searchBar;
 	
 		internal SourceEditor se;
 
@@ -170,6 +174,10 @@
 			fsw.Changed += (FileSystemEventHandler) Services.DispatchService.GuiDispatch (new FileSystemEventHandler (OnFileChanged));
 			UpdateFSW (null, null);
 			mainBox.PackStart (se, true, true, 0);
+
+			searchBar = new SearchBar();
+			searchBar.Hidden += new EventHandler(SearchBarHidden);
+			mainBox.PackStart (searchBar, false, false, 4);
 			
 			if (Services.DebuggingService != null) {
 				breakpointAddedHandler = (BreakpointEventHandler) Services.DispatchService.GuiDispatch (new BreakpointEventHandler (OnBreakpointAdded));
@@ -180,9 +188,74 @@
 				Services.DebuggingService.BreakpointRemoved += breakpointRemovedHandler;
 				Services.DebuggingService.ExecutionLocationChanged += executionChangedHandler;
 			}
+
 			mainBox.ShowAll ();
+			searchBar.Hide();
 		}
+
+		private void SearchBarHidden(object sender, EventArgs e)
+		{
+			se.View.GrabFocus();
+		}
+
+		public void ShowSearchBar()
+		{
+			searchBar.Show();
+		}
 		
+		class SearchBar : HBox
+		{	
+			private Entry entry;
+
+			public SearchBar()
+			{
+				Image image = new Image(Gtk.Stock.Close, IconSize.Menu);
+				image.Show();
+
+				Button closeButton = new Button();
+				closeButton.Relief = ReliefStyle.None;
+				closeButton.Add(image);
+				closeButton.Clicked += new EventHandler(CloseClicked);
+				PackStart(closeButton, false, false, 4);
+
+				PackStart(new Label("Find:"), false, false, 4);
+
+				entry = new Entry();
+				entry.Activated += new EventHandler(Search);
+				entry.KeyReleaseEvent += new KeyReleaseEventHandler(KeyReleased);
+				PackStart(entry, true, true, 4);				
+			}
+
+			private void CloseClicked(object sender, EventArgs e)
+			{
+				this.Hide();
+			}
+
+			private void KeyReleased(object sender, KeyReleaseEventArgs e)
+			{
+				if (e.Event.Key == Gdk.Key.Escape)
+				{
+					this.Hide();
+				}
+			}
+
+			private void Search(object sender, EventArgs e)
+			{			
+				SearchReplaceManager.SearchOptions.SearchPattern = entry.Text;			
+				SearchReplaceManager.SearchOptions.IgnoreCase = true;
+				SearchReplaceManager.SearchOptions.SearchWholeWordOnly = false;		
+				SearchReplaceManager.SearchOptions.SearchStrategyType = SearchStrategyType.Normal;
+				SearchReplaceManager.SearchOptions.DocumentIteratorType = DocumentIteratorType.CurrentDocument;
+				SearchReplaceManager.FindNext();
+			}
+
+			protected override void OnShown()
+			{
+				base.OnShown();
+				entry.GrabFocus();
+			}
+		}	
+
 		public void JumpTo (int line, int column)
 		{
 			// NOTE: 1 based!			
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.addin.xml
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.addin.xml	(revision 58538)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.addin.xml	(working copy)
@@ -139,6 +139,7 @@
 			<CommandItem id = "MonoDevelop.Ide.Commands.SearchCommands.FindNext" />
 			<CommandItem id = "MonoDevelop.Ide.Commands.SearchCommands.FindNextSelection" />
 			<CommandItem id = "MonoDevelop.Ide.Commands.SearchCommands.Replace" />
+			<CommandItem id = "MonoDevelop.Ide.Commands.SearchCommands.FindInCurrentDocument" />
 			
 			<SeparatorItem id = "SearchSeparator" />
 			<CommandItem id = "MonoDevelop.Ide.Commands.SearchCommands.FindInFiles" />
