Index: Core/src/MonoDevelop.Ide/ChangeLog
===================================================================
--- Core/src/MonoDevelop.Ide/ChangeLog	(revision 57932)
+++ Core/src/MonoDevelop.Ide/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2006-03-13 Levi Bard <taktaktaktaktaktaktaktaktaktak@gmail.com>
+	* MonoDevelop.Ide.Gui.Search/SearchReplaceInFilesManager.cs: Trim
+	search results.  Also strip ^M from source.
+
 2006-03-08 Lluis Sanchez Gual  <lluis@novell.com>
 
 	* MonoDevelop.Ide.Commands/RefactoryCommands.cs: Don't show
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/SearchReplaceInFilesManager.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/SearchReplaceInFilesManager.cs	(revision 57932)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/SearchReplaceInFilesManager.cs	(working copy)
@@ -1,221 +1,224 @@
-// <file>
-//     <copyright see="prj:///doc/copyright.txt"/>
-//     <license see="prj:///doc/license.txt"/>
-//     <owner name="Mike Krüger" email="mike@icsharpcode.net"/>
-//     <version value="$version"/>
-// </file>
-
-using System;
-using System.Collections;
-using System.Diagnostics;
-using System.Threading;
-
-using MonoDevelop.Core;
-using MonoDevelop.Core.Gui.Dialogs;
-using MonoDevelop.Ide.Gui.Pads;
+// <file>
+//     <copyright see="prj:///doc/copyright.txt"/>
+//     <license see="prj:///doc/license.txt"/>
+//     <owner name="Mike Krüger" email="mike@icsharpcode.net"/>
+//     <version value="$version"/>
+// </file>
+
+using System;
+using System.Collections;
+using System.Diagnostics;
+using System.Threading;
+
+using MonoDevelop.Core;
+using MonoDevelop.Core.Gui.Dialogs;
+using MonoDevelop.Ide.Gui.Pads;
 using MonoDevelop.Ide.Gui.Content;
 using MonoDevelop.Core.Gui;
 using MonoDevelop.Ide.Gui.Dialogs;
-
-using Gtk;
-
-namespace MonoDevelop.Ide.Gui.Search
-{
-	public class SearchReplaceInFilesManager
-	{
-		internal static ReplaceInFilesDialog ReplaceDialog;
-
-		static IFind find                  = new DefaultFind();
-		static SearchOptions searchOptions = new SearchOptions("SharpDevelop.SearchAndReplace.SearchAndReplaceInFilesProperties");
-		
-		static DateTime timer;
-		static bool searching;
-		static bool cancelled;
-		static string searchError;
-		static ISearchProgressMonitor searchMonitor;
-		
-		public static SearchOptions SearchOptions {
-			get {
-				return searchOptions;
-			}
-		}
-		
-		static SearchReplaceInFilesManager()
-		{
-			searchOptions.SearchStrategyTypeChanged   += new EventHandler(InitializeSearchStrategy);
-			searchOptions.DocumentIteratorTypeChanged += new EventHandler(InitializeDocumentIterator);
-			InitializeDocumentIterator(null, null);
-			InitializeSearchStrategy(null, null);
-		}
-		
-		static void InitializeSearchStrategy(object sender, EventArgs e)
-		{
-			find.SearchStrategy = SearchReplaceUtilities.CreateSearchStrategy(SearchOptions.SearchStrategyType);
-		}
-		
-		static void InitializeDocumentIterator(object sender, EventArgs e)
-		{
-			find.DocumentIterator = SearchReplaceUtilities.CreateDocumentIterator(SearchOptions.DocumentIteratorType);
-		}
-		
-		/// <remarks>
-		/// This method displays the search result in the search results pad
-		/// </remarks>
-		static void DisplaySearchResult(ISearchResult result)
-		{
-			if (result.Line != -1) {
-				string text = result.DocumentInformation.GetLineTextAtOffset (result.DocumentOffset);
-				searchMonitor.ReportResult (result.FileName, result.Line, result.Column, text);
-			} else {
-				string msg = string.Format (GettextCatalog.GetString ("Match at offset {0}"), result.DocumentOffset);
-				searchMonitor.ReportResult (result.FileName, 0, 0, msg);
-			}
-		}
-		
-		static bool InitializeSearchInFiles()
-		{
-			Debug.Assert(searchOptions != null);
-			cancelled = false;
-			
-			searchMonitor = IdeApp.Workbench.ProgressMonitors.GetSearchProgressMonitor (true);
-			searchMonitor.CancelRequested += (MonitorHandler) Services.DispatchService.GuiDispatch (new MonitorHandler (OnCancelRequested));
-			
-			InitializeDocumentIterator(null, null);
-			InitializeSearchStrategy(null, null);
-			find.Reset();
-			
+
+using Gtk;
+
+namespace MonoDevelop.Ide.Gui.Search
+{
+	public class SearchReplaceInFilesManager
+	{
+		internal static ReplaceInFilesDialog ReplaceDialog;
+
+		static IFind find                  = new DefaultFind();
+		static SearchOptions searchOptions = new SearchOptions("SharpDevelop.SearchAndReplace.SearchAndReplaceInFilesProperties");
+		
+		static DateTime timer;
+		static bool searching;
+		static bool cancelled;
+		static string searchError;
+		static ISearchProgressMonitor searchMonitor;
+		
+		public static SearchOptions SearchOptions {
+			get {
+				return searchOptions;
+			}
+		}
+		
+		static SearchReplaceInFilesManager()
+		{
+			searchOptions.SearchStrategyTypeChanged   += new EventHandler(InitializeSearchStrategy);
+			searchOptions.DocumentIteratorTypeChanged += new EventHandler(InitializeDocumentIterator);
+			InitializeDocumentIterator(null, null);
+			InitializeSearchStrategy(null, null);
+		}
+		
+		static void InitializeSearchStrategy(object sender, EventArgs e)
+		{
+			find.SearchStrategy = SearchReplaceUtilities.CreateSearchStrategy(SearchOptions.SearchStrategyType);
+		}
+		
+		static void InitializeDocumentIterator(object sender, EventArgs e)
+		{
+			find.DocumentIterator = SearchReplaceUtilities.CreateDocumentIterator(SearchOptions.DocumentIteratorType);
+		}
+		
+		/// <remarks>
+		/// This method displays the search result in the search results pad
+		/// </remarks>
+		static void DisplaySearchResult(ISearchResult result)
+		{
+			if (result.Line != -1) {
+				string text = result.DocumentInformation.GetLineTextAtOffset (result.DocumentOffset);
+				if(null != text) {
+					text = text.Trim();
+				}
+				searchMonitor.ReportResult (result.FileName, result.Line, result.Column, text);
+			} else {
+				string msg = string.Format (GettextCatalog.GetString ("Match at offset {0}"), result.DocumentOffset);
+				searchMonitor.ReportResult (result.FileName, 0, 0, msg);
+			}
+		}
+		
+		static bool InitializeSearchInFiles()
+		{
+			Debug.Assert(searchOptions != null);
+			cancelled = false;
+			
+			searchMonitor = IdeApp.Workbench.ProgressMonitors.GetSearchProgressMonitor (true);
+			searchMonitor.CancelRequested += (MonitorHandler) Services.DispatchService.GuiDispatch (new MonitorHandler (OnCancelRequested));
+			
+			InitializeDocumentIterator(null, null);
+			InitializeSearchStrategy(null, null);
+			find.Reset();
+			
 			try {
-				find.SearchStrategy.CompilePattern(searchOptions);
+				find.SearchStrategy.CompilePattern(searchOptions);
 			} catch {
 				Services.MessageService.ShowMessage (GettextCatalog.GetString ("Search pattern is invalid"), DialogPointer);
 				return false;
 			}
-			return true;
-		}
-		
-		static void OnCancelRequested (IProgressMonitor monitor)
-		{
-			CancelSearch ();
-		}
-		
-		static void FinishSearchInFiles ()
-		{
-			string msg;
-			if (searchError != null)
-				msg = string.Format (GettextCatalog.GetString ("The search could not be finished: {0}"), searchError);
-			else if (cancelled)
-				msg = GettextCatalog.GetString ("Search cancelled.");
-			else
-				msg = string.Format (GettextCatalog.GetString ("Search completed. {0} matches found in {1} files."), find.MatchCount, find.SearchedFileCount);
-				
-			searchMonitor.ReportResult (null, 0, 0, msg);
-			
-			searchMonitor.Log.WriteLine (msg);
-			searchMonitor.Log.WriteLine (GettextCatalog.GetString ("Search time: {0} seconds."), (DateTime.Now - timer).TotalSeconds);
-
-			searchMonitor.Dispose ();
-			searching = false;
-		}
-		
-		public static void ReplaceAll()
-		{
-			if (searching) {
-				if (!Services.MessageService.AskQuestion (GettextCatalog.GetString ("There is a search already in progress. Do you want to cancel it?")))
-					return;
-				CancelSearch ();
-			}
-			
-			if (!InitializeSearchInFiles()) {
-				return;
-			}
-			
-			string msg = string.Format (GettextCatalog.GetString ("Replacing '{0}' in {1}."), searchOptions.SearchPattern, searchOptions.SearchDirectory);
-			searchMonitor.ReportResult (null, 0, 0, msg);
-			
-			timer = DateTime.Now;
-			Services.DispatchService.BackgroundDispatch (new MessageHandler(ReplaceAllThread));
-		}
-		
-		static void ReplaceAllThread()
-		{
-			searching = true;
-			searchError = null;
-			
-			while (!cancelled) 
-			{
-				try
-				{
-					ISearchResult result = find.FindNext(searchOptions);
-					if (result == null) {
-						break;
-					}
-					
-					find.Replace(result, result.TransformReplacePattern(SearchOptions.ReplacePattern));
-					DisplaySearchResult (result);
-				}
-				catch (Exception ex) 
-				{
-					searchError = ex.Message;
-					break;
-				}
-			}
-			
-			FinishSearchInFiles ();
-		}
-		
-		public static void FindAll()
-		{
-			if (searching) {
-				if (!Services.MessageService.AskQuestion (GettextCatalog.GetString ("There is a search already in progress. Do you want to cancel it?")))
-					return;
-				CancelSearch ();
-			}
-			
-			if (!InitializeSearchInFiles()) {
-				return;
-			}
-			
-			string msg = string.Format (GettextCatalog.GetString ("Looking for '{0}' in {1}."), searchOptions.SearchPattern, searchOptions.SearchDirectory);
-			searchMonitor.ReportResult (null, 0, 0, msg);
-			
-			timer = DateTime.Now;
-			Services.DispatchService.BackgroundDispatch (new MessageHandler(FindAllThread));
-		}
-		
-		static void FindAllThread()
-		{
-			searching = true;
-			searchError = null;
-			
-			while (!cancelled) 
-			{
-				try
-				{
-					ISearchResult result = find.FindNext (searchOptions);
-					if (result == null) {
-						break;
-					}
-
-					DisplaySearchResult (result);
-				}
-				catch (Exception ex)
-				{
-					searchMonitor.Log.WriteLine (ex);
-					searchError = ex.Message;
-					break;
-				}
-			}
-			
-			FinishSearchInFiles ();
-		}
-		
-		public static void CancelSearch ()
-		{
-			if (!searching) return;
-			cancelled = true;
-			find.Cancel ();
+			return true;
 		}
+		
+		static void OnCancelRequested (IProgressMonitor monitor)
+		{
+			CancelSearch ();
+		}
+		
+		static void FinishSearchInFiles ()
+		{
+			string msg;
+			if (searchError != null)
+				msg = string.Format (GettextCatalog.GetString ("The search could not be finished: {0}"), searchError);
+			else if (cancelled)
+				msg = GettextCatalog.GetString ("Search cancelled.");
+			else
+				msg = string.Format (GettextCatalog.GetString ("Search completed. {0} matches found in {1} files."), find.MatchCount, find.SearchedFileCount);
+				
+			searchMonitor.ReportResult (null, 0, 0, msg);
+			
+			searchMonitor.Log.WriteLine (msg);
+			searchMonitor.Log.WriteLine (GettextCatalog.GetString ("Search time: {0} seconds."), (DateTime.Now - timer).TotalSeconds);
 
+			searchMonitor.Dispose ();
+			searching = false;
+		}
+		
+		public static void ReplaceAll()
+		{
+			if (searching) {
+				if (!Services.MessageService.AskQuestion (GettextCatalog.GetString ("There is a search already in progress. Do you want to cancel it?")))
+					return;
+				CancelSearch ();
+			}
+			
+			if (!InitializeSearchInFiles()) {
+				return;
+			}
+			
+			string msg = string.Format (GettextCatalog.GetString ("Replacing '{0}' in {1}."), searchOptions.SearchPattern, searchOptions.SearchDirectory);
+			searchMonitor.ReportResult (null, 0, 0, msg);
+			
+			timer = DateTime.Now;
+			Services.DispatchService.BackgroundDispatch (new MessageHandler(ReplaceAllThread));
+		}
+		
+		static void ReplaceAllThread()
+		{
+			searching = true;
+			searchError = null;
+			
+			while (!cancelled) 
+			{
+				try
+				{
+					ISearchResult result = find.FindNext(searchOptions);
+					if (result == null) {
+						break;
+					}
+					
+					find.Replace(result, result.TransformReplacePattern(SearchOptions.ReplacePattern));
+					DisplaySearchResult (result);
+				}
+				catch (Exception ex) 
+				{
+					searchError = ex.Message;
+					break;
+				}
+			}
+			
+			FinishSearchInFiles ();
+		}
+		
+		public static void FindAll()
+		{
+			if (searching) {
+				if (!Services.MessageService.AskQuestion (GettextCatalog.GetString ("There is a search already in progress. Do you want to cancel it?")))
+					return;
+				CancelSearch ();
+			}
+			
+			if (!InitializeSearchInFiles()) {
+				return;
+			}
+			
+			string msg = string.Format (GettextCatalog.GetString ("Looking for '{0}' in {1}."), searchOptions.SearchPattern, searchOptions.SearchDirectory);
+			searchMonitor.ReportResult (null, 0, 0, msg);
+			
+			timer = DateTime.Now;
+			Services.DispatchService.BackgroundDispatch (new MessageHandler(FindAllThread));
+		}
+		
+		static void FindAllThread()
+		{
+			searching = true;
+			searchError = null;
+			
+			while (!cancelled) 
+			{
+				try
+				{
+					ISearchResult result = find.FindNext (searchOptions);
+					if (result == null) {
+						break;
+					}
+
+					DisplaySearchResult (result);
+				}
+				catch (Exception ex)
+				{
+					searchMonitor.Log.WriteLine (ex);
+					searchError = ex.Message;
+					break;
+				}
+			}
+			
+			FinishSearchInFiles ();
+		}
+		
+		public static void CancelSearch ()
+		{
+			if (!searching) return;
+			cancelled = true;
+			find.Cancel ();
+		}
+
 		internal static Gtk.Dialog DialogPointer
 		{
 			get {
@@ -274,5 +277,5 @@
 				rd.ShowAll ();
 			}
 		}
-	}
-}
+	}
+}