Index: ChangeLog
===================================================================
--- ChangeLog	(revision 153331)
+++ ChangeLog	(working copy)
@@ -1,3 +1,19 @@
+2010-03-09  Lars Magnusson <lavima@gmail.com>
+	* MonoDevelop.Projects.Formats.MSBuild/MSBuildProjectService.cs: 
+	  Add method LoadProjectTypeGuids for reading typeGuid from 
+	  project file and add fallbacks for LoadItem and 
+	  FindHandlerForFile
+	* MonoDevelop.Projects.Formats.MSBuild/MSBuildFileFormat.cs:
+	  Add logic for checking the dotnet subtype extensions in 
+	  GetValidFormatName.
+	* MonoDevelop.Projects.Extensions/DotNetProjectNode.cs: Add
+	  CanHandleFile override that checks the for dotnet support
+	  if base call fails.
+	* MonoDevelop.Projects.Extensions/DotNetProjectSubtypeNode.cs:
+	  Add field and property for forced extension.
+	  Add CanHandleFile that checks for matching typeGuid and 
+	  extension
+
 2010-03-09  Mike Kr√ºger  <mkrueger@novell.com>
 
 	* MonoDevelop.Projects.Dom.Parser/ProjectDom.cs: Fixed 'Bug
Index: MonoDevelop.Projects.Formats.MSBuild/MSBuildProjectService.cs
===================================================================
--- MonoDevelop.Projects.Formats.MSBuild/MSBuildProjectService.cs	(revision 153331)
+++ MonoDevelop.Projects.Formats.MSBuild/MSBuildProjectService.cs	(working copy)
@@ -82,6 +82,15 @@
 				if (node.CanHandleFile (fileName, typeGuid))
 					return node.LoadSolutionItem (monitor, fileName, itemGuid);
 			}
+			if (string.IsNullOrEmpty (typeGuid))
+			{
+				typeGuid = LoadProjectTypeGuids (fileName);
+				foreach (ItemTypeNode node in GetItemTypeNodes ()) {
+					if (node.CanHandleFile (fileName, typeGuid))
+						return node.LoadSolutionItem (monitor, fileName, itemGuid);
+				}
+			}
+
 			return null;
 		}
 		
@@ -180,6 +189,12 @@
 					return node;
 				}
 			}
+			string typeGuids = LoadProjectTypeGuids (file);
+			foreach (ItemTypeNode node in GetItemTypeNodes ()) {
+				if (node.CanHandleFile (file, typeGuids)) {
+					return node;
+				}
+			}
 			return null;
 		}
 		
@@ -479,6 +494,18 @@
 				return cultureNamesTable;
 			}
 		}
+
+		static string LoadProjectTypeGuids (string fileName)
+		{
+			MSBuildProject project = new MSBuildProject ();
+			project.LoadXml (File.ReadAllText (fileName));
+			
+			MSBuildPropertyGroup globalGroup = project.GetGlobalPropertyGroup ();
+			if (globalGroup == null)
+				return null;
+
+			return globalGroup.GetPropertyValue ("ProjectTypeGuids");
+		}
 	}
 	
 	class MSBuildDataContext: DataContext
Index: MonoDevelop.Projects.Formats.MSBuild/MSBuildFileFormat.cs
===================================================================
--- MonoDevelop.Projects.Formats.MSBuild/MSBuildFileFormat.cs	(revision 153331)
+++ MonoDevelop.Projects.Formats.MSBuild/MSBuildFileFormat.cs	(working copy)
@@ -79,7 +79,14 @@
 			if (slnFileFormat.CanWriteFile (obj, this))
 				return slnFileFormat.GetValidFormatName (obj, fileName, this);
 			else {
-				ItemTypeNode node = MSBuildProjectService.FindHandlerForItem ((SolutionEntityItem)obj);
+				SolutionEntityItem item = (SolutionEntityItem)obj;
+				foreach (string subtypeGuid in ((MSBuildProjectHandler)MSBuildProjectService.GetItemHandler(item)).SubtypeGuids)
+				{
+					DotNetProjectSubtypeNode subtypeNode =  MSBuildProjectService.GetDotNetProjectSubtype (subtypeGuid);
+					if (!string.IsNullOrEmpty (subtypeNode.Extension))
+						return fileName.ChangeExtension ("." + subtypeNode.Extension);
+				}
+				ItemTypeNode node = MSBuildProjectService.FindHandlerForItem (item);
 				if (!string.IsNullOrEmpty (node.Extension))
 					return fileName.ChangeExtension ("." + node.Extension);
 				else
Index: MonoDevelop.Projects.Extensions/DotNetProjectNode.cs
===================================================================
--- MonoDevelop.Projects.Extensions/DotNetProjectNode.cs	(revision 153331)
+++ MonoDevelop.Projects.Extensions/DotNetProjectNode.cs	(working copy)
@@ -45,6 +45,19 @@
 		{
 			return (item is DotNetProject) && ((DotNetProject)item).LanguageName == language;
 		}
+
+		public override bool CanHandleFile (string fileName, string typeGuid)
+		{
+			if (base.CanHandleFile (fileName, typeGuid))
+				return true;
+			else if (!string.IsNullOrEmpty (typeGuid) && typeGuid.Contains (Guid))
+			{
+				DotNetProjectSubtypeNode node = MSBuildProjectService.GetDotNetProjectSubtype (typeGuid);
+				if (node != null && node.CanHandleFile (fileName, typeGuid))
+					return true;
+			}
+			return false;
+		}
 		
 		public override SolutionEntityItem LoadSolutionItem (IProgressMonitor monitor, string fileName, string itemGuid)
 		{
Index: MonoDevelop.Projects.Extensions/DotNetProjectSubtypeNode.cs
===================================================================
--- MonoDevelop.Projects.Extensions/DotNetProjectSubtypeNode.cs	(revision 153331)
+++ MonoDevelop.Projects.Extensions/DotNetProjectSubtypeNode.cs	(working copy)
@@ -42,6 +42,9 @@
 		[NodeAttribute]
 		string import;
 		
+		[NodeAttribute]
+		string extension;
+
 		Type itemType;
 
 		public string Import {
@@ -60,6 +63,12 @@
 				return itemType;
 			}
 		}
+
+		public string Extension {
+			get { 
+				return extension; 
+			}
+		}
 		
 		public bool SupportsType (string guid)
 		{
@@ -76,6 +85,15 @@
 			return Type.IsAssignableFrom (item.GetType ());
 		}
 		
+		public virtual bool CanHandleFile (string fileName, string typeGuid)
+		{
+			if (typeGuid != null && typeGuid.ToLower().Contains(guid.ToLower()))
+				return true;
+			if (!string.IsNullOrEmpty (extension) && System.IO.Path.GetExtension (fileName) == "." + extension)
+				return true;
+			return false;
+		}
+		
 		public virtual void InitializeHandler (SolutionEntityItem item)
 		{
 			MSBuildProjectHandler h = (MSBuildProjectHandler) ProjectExtensionUtil.GetItemHandler (item);