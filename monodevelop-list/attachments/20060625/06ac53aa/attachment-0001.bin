Index: ChangeLog
===================================================================
--- ChangeLog	(revision 62041)
+++ ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2006-06-25  Rafael Teixeira <rafaelteixeirabr@hotmail.com> 
+	* configure.in: added new plugin Extras/Translator
+	* Extras/Makefile.am: added new subdir Translator
+	* Extras/Translator/*: just the skeleton for translation support plugin,
+		that will include a po file editor
+	
 2006-06-24  John Luke <john.luke@gmail.com>
 
 	* Unused/AssemblyAnalyzer:
Index: configure.in
===================================================================
--- configure.in	(revision 62003)
+++ configure.in	(working copy)
@@ -291,6 +291,7 @@
 Extras/ChangeLogAddIn/Makefile
 Extras/MonoDevelop.GtkCore/Makefile
 Extras/MonoDevelop.Autotools/Makefile
+Extras/Translator/Makefile
 Makefile
 monodevelop
 mdtool
Index: Extras/Makefile.am
===================================================================
--- Extras/Makefile.am	(revision 62003)
+++ Extras/Makefile.am	(working copy)
@@ -1,2 +1,2 @@
 
-SUBDIRS = MonoDevelop.SourceEditor MonoDevelop.Autotools CSharpBinding DebuggerAddIn ILAsmBinding MonoQuery JavaBinding BooBinding NemerleBinding NUnit MonoDeveloperExtensions VersionControl prj2make-sharp-lib VBNetBinding WelcomePage ChangeLogAddIn MonoDevelop.GtkCore 
+SUBDIRS = MonoDevelop.SourceEditor MonoDevelop.Autotools CSharpBinding DebuggerAddIn ILAsmBinding MonoQuery JavaBinding BooBinding NemerleBinding NUnit MonoDeveloperExtensions VersionControl prj2make-sharp-lib VBNetBinding WelcomePage ChangeLogAddIn MonoDevelop.GtkCore Translator

Property changes on: Extras/Translator
___________________________________________________________________
Name: svn:ignore
   + Makefile
Makefile.in
*~


Index: Extras/Translator/Translator.addin.xml
===================================================================
--- Extras/Translator/Translator.addin.xml	(revision 0)
+++ Extras/Translator/Translator.addin.xml	(revision 0)
@@ -0,0 +1,114 @@
+<AddIn id = "Translator"
+       name	= "Translation Templates, Editor and Helpers"
+       author	 = "Rafael 'Monoman' Teixeira"
+       copyright = "X11"
+       url       = ""
+       description = "Provides support for adding/editing PO files."
+	   category    = "IDE extensions"
+       version   = "0.1.0">
+
+	<Runtime>
+		<Import assembly="Translator.dll"/>
+	</Runtime>
+
+	<Dependencies>
+	    <AddIn id="MonoDevelop.Core" version="0.10.0"/>
+	    <AddIn id="MonoDevelop.Core.Gui" version="0.10.0"/>
+	    <AddIn id="MonoDevelop.Projects" version="0.11.0"/>
+	    <AddIn id="MonoDevelop.Projects.Gui" version="0.10.0"/>
+		<AddIn id="MonoDevelop.Ide" version="0.11.0"/>
+	</Dependencies>
+	
+	<!--
+	<Extension path = "/SharpDevelop/Workbench/Pads">
+		<Pad id = "MonoDevelop.GtkCore.GuiBuilder.GuiBuilderPalettePad" class = "MonoDevelop.GtkCore.GuiBuilder.GuiBuilderPalettePad" _label="Widgets Palette" />
+		<Pad id = "MonoDevelop.GtkCore.GuiBuilder.GuiBuilderPropertiesPad" class = "MonoDevelop.GtkCore.GuiBuilder.GuiBuilderPropertiesPad" _label="Widget Properties"/>
+		<Pad id = "MonoDevelop.GtkCore.GuiBuilder.GuiBuilderProjectPad" class = "MonoDevelop.GtkCore.GuiBuilder.GuiBuilderProjectPad" _label="Widget Tree"/>
+	</Extension>
+
+	<Extension path = "/SharpDevelop/Workbench/Contexts/Edit">
+		<ContextPad id = "MonoDevelop.GtkCore.GuiBuilder.GuiBuilderPalettePad" />
+		<ContextPad id = "MonoDevelop.GtkCore.GuiBuilder.GuiBuilderPropertiesPad" />
+		<ContextPad id = "MonoDevelop.GtkCore.GuiBuilder.GuiBuilderProjectPad" />
+	</Extension>
+	
+	<Extension path = "/SharpDevelop/Workbench/Pads/MonoDevelop.Ide.Gui.Pads.ProjectPad">
+		<NodeBuilder class = "MonoDevelop.GtkCore.NodeBuilders.ProjectFolderNodeBuilderExtension"/>
+		<NodeBuilder class = "MonoDevelop.GtkCore.NodeBuilders.ProjectNodeBuilder"/>
+		<NodeBuilder class = "MonoDevelop.GtkCore.NodeBuilders.WidgetNodeBuilder"/>
+		<NodeBuilder class = "MonoDevelop.GtkCore.NodeBuilders.WindowsFolderNodeBuilder"/>
+		<NodeBuilder class = "MonoDevelop.GtkCore.NodeBuilders.ActionGroupNodeBuilder"/>
+	</Extension>
+
+	<Extension path = "/MonoDevelop/FileTemplates">
+		<FileTemplate id = "TranslationFileTemplate" resource = "Translation.xft.xml"/>
+	</Extension>
+	
+	<Extension path = "/SharpDevelop/Views/GladeFileNodeBuilder/ContextMenu">
+	</Extension>
+	
+	<Extension path = "/SharpDevelop/Views/GladeWindowNodeBuilder/ContextMenu">
+	</Extension>
+	
+	<Extension path = "/SharpDevelop/Workbench/DisplayBindings">
+		<DisplayBinding insertbefore = "NewText"
+		       supportedformats = "Translation Files"
+		       class = "Translator.TranslationDisplayBinding" />
+	</Extension>
+	
+	<Extension path = "/SharpDevelop/Commands">
+		<Command id = "Translator.Commands.AddNewTranslation"
+				icon = "md-translator-new"
+				_label = "New Translation..." />
+	</Extension>
+	
+	<Extension path = "/SharpDevelop/Views/ProjectBrowser/ContextMenu/ProjectBrowserNode/Add">
+		<SeparatorItem insertafter = "MonoDevelop.Ide.Commands.ProjectCommands.AddFiles" />
+		<CommandItem id = "Translator.Commands.AddNewTranslation" />
+	</Extension>
+	
+	<Extension path = "/SharpDevelop/Views/ProjectBrowser/ContextMenu/DefaultDirectoryNode/Add">
+		<SeparatorItem insertafter = "MonoDevelop.Ide.Commands.ProjectCommands.AddFiles" />
+		<CommandItem id = "Translator.Commands.AddNewTranslation" />
+	</Extension>
+	-->
+	
+	
+	<Extension path = "/SharpDevelop/Views/ProjectBrowser/ContextMenu/TranslationNode">
+		<CommandItem id = "MonoDevelop.Ide.Commands.ViewCommands.Open" />
+		<CommandItem id = "MonoDevelop.Ide.Commands.EditCommands.Delete" />
+	</Extension>
+
+	<!--	
+	<Extension path = "/SharpDevelop/Workbench/BuildPipeline">
+		<Class insertbefore = "MainBuildStep" class = "MonoDevelop.GtkCore.GeneratorBuildStep" />
+	</Extension>
+	
+	<Extension path = "/SharpDevelop/Workbench/Serialization/ExtendedProperties">
+		<ItemProperty class = "MonoDevelop.Projects.Project"
+		              name = "GtkDesignInfo"
+		              type = "MonoDevelop.GtkCore.GtkDesignInfo" />
+	</Extension>
+	-->
+		
+	<Extension path = "/MonoDevelop/IDE/StartupHandlers">
+		<Class class="TranslatorCoreStartupCommand" />
+	</Extension>
+
+	<!--	
+	<Extension path = "/SharpDevelop/Workbench/ProjectOptions/GeneralOptions/Common">
+		<DialogPanel id = "SteticOptionsPanel"
+		             _label = "Widget Export"
+		             class = "MonoDevelop.GtkCore.Dialogs.WidgetBuilderOptionPanel"/>
+	</Extension>
+		
+	<Extension path = "/MonoDevelop/FileTemplateTypes">
+		<FileTemplateType name = "Translation" class = "Translator.TranslationFileDescriptionTemplate"/>
+	</Extension>
+	
+	<Extension path = "/SharpDevelop/Workbench/StockIcons">
+		<StockIcon stockid = "md-translator-new" resource = "window.png" />
+	</Extension>
+	-->
+</AddIn>
+
Index: Extras/Translator/ChangeLog
===================================================================
--- Extras/Translator/ChangeLog	(revision 0)
+++ Extras/Translator/ChangeLog	(revision 0)
@@ -0,0 +1,3 @@
+2006-06-24  Rafael Teixeira <rafaelteixeirabr@hotmail.com> 
+	* Translator plug-in kick off: ChangeLog, Makefile.am, addin.xml and core service sources
+	
Index: Extras/Translator/Makefile.am
===================================================================
--- Extras/Translator/Makefile.am	(revision 0)
+++ Extras/Translator/Makefile.am	(revision 0)
@@ -0,0 +1,55 @@
+ADDIN = Translator.addin.xml
+ADDIN_BUILD = $(top_builddir)/build/AddIns/Translator
+ASSEMBLY = $(ADDIN_BUILD)/Translator.dll
+
+REFS =	\
+	-r:System \
+	-r:System.Xml \
+    -r:Mono.Posix \
+	$(GTK_SHARP_LIBS) \
+	$(GLADE_SHARP_LIBS) \
+	$(GCONF_SHARP_LIBS) \
+	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
+	-r:$(top_builddir)/build/bin/Mono.Cecil.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Components.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.Gui.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Ide.dll
+
+FILES = \
+	Translator/TranslationFileDescriptionTemplate.cs \
+	Translator/TranslatorCoreService.cs  \
+	Translator/TranslatorInfo.cs \
+	Translator/TranslationProject.cs
+	
+RES = 
+#gui.glade \
+#icons/dialog.png \
+#icons/widget.png \
+#icons/window.png \
+#icons/actiongroup.png \
+#templates/ActionGroup.xft.xml \
+#templates/Window.xft.xml \
+#templates/Widget.xft.xml \
+#templates/Dialog.xft.xml
+
+EXTRA_DIST = $(FILES) $(ADDIN) $(RES)
+
+all: $(ASSEMBLY) $(ADDIN_BUILD)/$(ADDIN)
+
+$(ADDIN_BUILD)/$(ADDIN): $(srcdir)/$(ADDIN)
+	mkdir -p $(ADDIN_BUILD)
+	cp $(srcdir)/$(ADDIN) $@
+
+$(ASSEMBLY): $(build_sources) $(RES)
+	mkdir -p $(ADDIN_BUILD)
+	$(CSC) $(CSC_FLAGS) -debug -out:$@ -target:library \
+	$(RES:%=/resource:%) $(build_sources) $(REFS)
+
+assemblydir = $(MD_ADDIN_DIR)/Translator
+assembly_DATA = $(ASSEMBLY) $(ASSEMBLY).mdb $(ADDIN)
+
+CLEANFILES = $(ASSEMBLY) $(ASSEMBLY).mdb $(ADDIN_BUILD)/$(ADDIN)
+
+include $(top_srcdir)/Makefile.include
Index: Extras/Translator/Translator/TranslationFileDescriptionTemplate.cs
===================================================================
--- Extras/Translator/Translator/TranslationFileDescriptionTemplate.cs	(revision 0)
+++ Extras/Translator/Translator/TranslationFileDescriptionTemplate.cs	(revision 0)
@@ -0,0 +1,92 @@
+//
+// TranslationFileDescriptionTemplate.cs
+//
+// Author:
+//   Rafael 'Monoman' Teixeira
+//
+// Copyright (C) 2006 Rafael 'Monoman' Teixeira
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+
+using System;
+using System.Xml;
+using System.IO;
+
+using MonoDevelop.Core;
+using MonoDevelop.Projects;
+using MonoDevelop.Projects.Parser;
+using MonoDevelop.Ide.Gui;
+using MonoDevelop.Ide.Templates;
+
+namespace Translator
+{
+	public class TranslationFileDescriptionTemplate: FileDescriptionTemplate
+	{
+		SingleFileDescriptionTemplate fileTemplate;
+		XmlElement translationTemplate;
+		
+		public override string Name {
+			get { return "Translation"; }
+		}
+		
+		public override void Load (XmlElement filenode)
+		{
+			foreach (XmlNode node in filenode.ChildNodes) {
+				XmlElement elem = node as XmlElement;
+				if (elem == null) continue;
+				
+				if (elem.Name == "TranslationTemplate") {
+					if (translationTemplate != null)
+						throw new InvalidOperationException ("Translation templates can't contain more than one TranslationTemplate element");
+					translationTemplate = elem;
+				} else if (fileTemplate == null) {
+					fileTemplate = FileDescriptionTemplate.CreateTemplate (elem) as SingleFileDescriptionTemplate;
+					if (fileTemplate == null)
+						throw new InvalidOperationException ("Translation templates can only contain single-file and translator templates.");
+				}
+			}
+			if (fileTemplate == null)
+				throw new InvalidOperationException ("File template not found in widget template.");
+			if (translationTemplate == null)
+				throw new InvalidOperationException ("Translator template not found in translation template.");
+		}
+		
+		public override void AddToProject (Project project, string language, string directory, string name)
+		{
+			TranslatorInfo info = TranslatorCoreService.GetTranslatorInfo (project);
+			if (info == null)
+				info = TranslatorCoreService.EnableTranslatorSupport (project);
+				
+//			TranslationProject gproject = info.TranslationProject;
+			
+			string fileName = fileTemplate.GetFileName (project, language, directory, name);
+			fileTemplate.AddToProject (project, language, directory, name);
+
+			IdeApp.ProjectOperations.ParserDatabase.UpdateFile (project, fileName, null);			
+		}
+		
+		public override void Show ()
+		{
+			fileTemplate.Show ();
+		}
+	}
+}
Index: Extras/Translator/Translator/TranslatorCoreService.cs
===================================================================
--- Extras/Translator/Translator/TranslatorCoreService.cs	(revision 0)
+++ Extras/Translator/Translator/TranslatorCoreService.cs	(revision 0)
@@ -0,0 +1,370 @@
+//
+// TranslatorCoreService.cs
+//
+// Author:
+//   Rafael 'Monoman' Teixeira
+//
+// Copyright (C) 2006 Rafael 'Monoman' Teixeira
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.IO;
+using System.Xml;
+using System.Collections;
+using System.CodeDom;
+
+using MonoDevelop.Core;
+using MonoDevelop.Core.Gui;
+using MonoDevelop.Projects;
+using MonoDevelop.Projects.Serialization;
+using MonoDevelop.Projects.Parser;
+using MonoDevelop.Ide.Gui;
+using MonoDevelop.Components.Commands;
+
+namespace Translator
+{
+	public class TranslatorCoreService
+	{
+		internal static void Initialize ()
+		{
+			IdeApp.Services.FileService.FileChanged += new FileEventHandler (OnFileChanged);
+		}
+		
+		public static TranslatorInfo GetTranslatorInfo (Project project)
+		{
+			if (!(project is DotNetProject))
+				return null;
+			DotNetProject _project = (DotNetProject)project;
+
+			TranslatorInfo info = TranslatorInfo.GetFrom(_project);
+			if (info == null)
+				return null;
+
+			info.Bind (_project);
+			return info;
+		}
+		
+		internal static TranslatorInfo EnableTranslatorSupport (Project project)
+		{
+			TranslatorInfo info = GetTranslatorInfo (project);
+			if (info != null)
+				return info;
+
+			info = new TranslatorInfo ((DotNetProject) project);
+			info.UpdateTranslatorFolder ();
+			return info;
+		}
+		
+		static void OnFileChanged (object s, FileEventArgs args)
+		{
+			if (IdeApp.ProjectOperations.CurrentOpenCombine == null)
+				return;
+
+			foreach (Project project in IdeApp.ProjectOperations.CurrentOpenCombine.GetAllProjects ()) {
+				if (!project.IsFileInProject (args.FileName))
+					continue;
+					
+				TranslatorInfo info = TranslatorCoreService.GetTranslatorInfo (project);
+				if (info == null)
+					continue;
+
+				info.UpdateTranslatorFolder ();
+			
+				IdeApp.ProjectOperations.ParserDatabase.UpdateFile (project, args.FileName, null);
+//				foreach (IClass cls in info.GetExportedClasses ()) {
+//					if (cls.Region.FileName == args.FileName)
+//						UpdateObjectsFile (project, cls, null);
+//				}
+			}
+		}
+	
+/*	
+		internal static void UpdateObjectsFile (Project project)
+		{
+			TranslatorInfo info = TranslatorCoreService.GetTranslatorInfo (project);
+			if (info == null) return;
+			info.UpdateTranslatorFolder ();
+
+			XmlDocument doc = new XmlDocument ();
+			if (File.Exists (info.ObjectsFile))
+				doc.Load (info.ObjectsFile);
+			
+			// Add or update the selected classes
+
+			ArrayList exported = new ArrayList ();
+			foreach (IClass cls in info.GetExportedClasses ()) {
+				UpdateClass (project, doc, cls, null);
+				exported.Add (cls.FullyQualifiedName);
+			}
+				
+			// Remove from the file the unselected classes
+			
+			ArrayList toDelete = new ArrayList ();
+			
+			foreach (XmlElement elem in doc.SelectNodes ("objects/object")) {
+				string name = elem.GetAttribute ("type");
+				if (!exported.Contains (name))
+					toDelete.Add (elem);
+			}
+			
+			foreach (XmlElement elem in toDelete)
+				elem.ParentNode.RemoveChild (elem);
+			
+			doc.Save (info.ObjectsFile);
+		}
+		
+		static void UpdateObjectsFile (Project project, IClass widgetClass, IClass wrapperClass)
+		{
+			TranslatorInfo info = TranslatorCoreService.GetTranslatorInfo (project);
+			info.UpdateTranslatorFolder ();
+			
+			XmlDocument doc = new XmlDocument ();
+			if (File.Exists (info.ObjectsFile))
+				doc.Load (info.ObjectsFile);
+			UpdateClass (project, doc, widgetClass, wrapperClass);
+			
+			doc.Save (info.ObjectsFile);
+		}
+		
+		static void UpdateClass (Project project, XmlDocument doc, IClass widgetClass, IClass wrapperClass)
+		{
+			string typeName = widgetClass.FullyQualifiedName;
+			XmlElement objectElem = (XmlElement) doc.SelectSingleNode ("objects/object[@type='" + typeName + "']");
+			
+			if (objectElem == null) {
+			
+				// The widget class is not yet in the XML file. Create an element for it.
+				objectElem = doc.CreateElement ("object");
+				objectElem.SetAttribute ("type", typeName);
+				objectElem.SetAttribute ("palette-category", "widget");
+				objectElem.SetAttribute ("allow-children", "false");
+				if (wrapperClass != null)
+					objectElem.SetAttribute ("wrapper", wrapperClass.FullyQualifiedName);
+				
+				// By default add a reference to Translator.Widget properties and events
+				XmlElement itemGroups = objectElem.OwnerDocument.CreateElement ("itemgroups");
+				objectElem.AppendChild (itemGroups);
+				XmlElement widgetItemGroup = objectElem.OwnerDocument.CreateElement ("itemgroup");
+				widgetItemGroup.SetAttribute ("ref", "Translator.Widget");
+				itemGroups.AppendChild (widgetItemGroup);
+				
+				itemGroups = objectElem.OwnerDocument.CreateElement ("signals");
+				objectElem.AppendChild (itemGroups);
+				widgetItemGroup = objectElem.OwnerDocument.CreateElement ("itemgroup");
+				widgetItemGroup.SetAttribute ("ref", "Translator.Widget");
+				itemGroups.AppendChild (widgetItemGroup);
+				
+				doc.DocumentElement.AppendChild (objectElem);
+			}
+			
+			MergeObject (objectElem, widgetClass, wrapperClass);
+		}
+		
+		static void MergeObject (XmlElement objectElem, IClass widgetClass, IClass wrapperClass)
+		{
+			foreach (IProperty prop in widgetClass.Properties)
+				if (IsBrowsable (prop))
+					MergeProperty (objectElem, prop);
+				
+			foreach (IEvent ev in widgetClass.Events)
+				if (IsBrowsable (ev))
+					MergeEvent (objectElem, ev);
+				
+			if (wrapperClass != null) {
+				foreach (IProperty prop in wrapperClass.Properties)
+					if (IsBrowsable (prop))
+						MergeProperty (objectElem, prop);
+					
+				foreach (IEvent ev in wrapperClass.Events)
+					if (IsBrowsable (ev))
+						MergeEvent (objectElem, ev);
+			}
+			
+			// Remove old properties
+			
+			ArrayList toDelete = new ArrayList ();
+			foreach (XmlElement xprop in objectElem.SelectNodes ("itemgroups/itemgroup/property")) {
+				string cat = ((XmlElement)xprop.ParentNode).GetAttribute ("name");
+				IProperty prop = widgetClass.Properties [xprop.GetAttribute ("name")];
+				if (prop != null && cat == GetCategory (prop) && IsBrowsable (prop))
+					continue;
+				if (wrapperClass != null) {
+					prop = wrapperClass.Properties [xprop.GetAttribute ("name")];
+					if (prop != null && cat == GetCategory (prop) && IsBrowsable (prop))
+						continue;
+				}
+				toDelete.Add (xprop);
+			}
+			
+			// Remove old signals
+			
+			foreach (XmlElement xevent in objectElem.SelectNodes ("signals/itemgroup/signal")) {
+				string cat = ((XmlElement)xevent.ParentNode).GetAttribute ("name");
+				IEvent evnt = widgetClass.Events [xevent.GetAttribute ("name")];
+				if (evnt != null && cat == GetCategory (evnt) && IsBrowsable (evnt))
+					continue;
+				if (wrapperClass != null) {
+					evnt = wrapperClass.Events [xevent.GetAttribute ("name")];
+					if (evnt != null && cat == GetCategory (evnt) && IsBrowsable (evnt))
+						continue;
+				}
+				toDelete.Add (xevent);
+			}
+			
+			foreach (XmlElement el in toDelete) {
+				XmlElement pe = (XmlElement) el.ParentNode;
+				pe.RemoveChild (el);
+				if (pe.ChildNodes.Count == 0)
+					pe.ParentNode.RemoveChild (pe);
+			}
+		}
+		
+		static void MergeProperty (XmlElement objectElem, IProperty prop)
+		{
+			XmlElement itemGroups = objectElem ["itemgroups"];
+			if (itemGroups == null) {
+				itemGroups = objectElem.OwnerDocument.CreateElement ("itemgroups");
+				objectElem.AppendChild (itemGroups);
+			}
+			
+			string cat = GetCategory (prop);
+			XmlElement itemGroup = GetItemGroup (prop.DeclaringType, itemGroups, cat, "Properties");
+			
+			XmlElement propElem = (XmlElement) itemGroup.SelectSingleNode ("property[@name='" + prop.Name + "']");
+			if (propElem == null) {
+				propElem = itemGroup.OwnerDocument.CreateElement ("property");
+				propElem.SetAttribute ("name", prop.Name);
+				itemGroup.AppendChild (propElem);
+			}
+		}
+		
+		static void MergeEvent (XmlElement objectElem, IEvent evnt)
+		{
+			XmlElement itemGroups = objectElem ["signals"];
+			if (itemGroups == null) {
+				itemGroups = objectElem.OwnerDocument.CreateElement ("signals");
+				objectElem.AppendChild (itemGroups);
+			}
+			
+			string cat = GetCategory (evnt);
+			XmlElement itemGroup = GetItemGroup (evnt.DeclaringType, itemGroups, cat, "Signals");
+			
+			XmlElement signalElem = (XmlElement) itemGroup.SelectSingleNode ("signal[@name='" + evnt.Name + "']");
+			if (signalElem == null) {
+				signalElem = itemGroup.OwnerDocument.CreateElement ("signal");
+				signalElem.SetAttribute ("name", evnt.Name);
+				itemGroup.AppendChild (signalElem);
+			}
+		}
+		
+		static XmlElement GetItemGroup (IClass cls, XmlElement itemGroups, string cat, string groupName)
+		{
+			XmlElement itemGroup;
+			
+			if (cat != "")
+				itemGroup = (XmlElement) itemGroups.SelectSingleNode ("itemgroup[@name='" + cat + "']");
+			else
+				itemGroup = (XmlElement) itemGroups.SelectSingleNode ("itemgroup[(not(@name) or @name='') and not(@ref)]");
+			
+			if (itemGroup == null) {
+				itemGroup = itemGroups.OwnerDocument.CreateElement ("itemgroup");
+				if (cat != null && cat != "") {
+					itemGroup.SetAttribute ("name", cat);
+					itemGroup.SetAttribute ("label", cat);
+				} else
+					itemGroup.SetAttribute ("label", cls.Name + " " + groupName);
+				itemGroups.AppendChild (itemGroup);
+			}
+			return itemGroup;
+		}
+		
+		static string GetCategory (IMember member)
+		{
+			foreach (IAttributeSection section in member.Attributes) {
+				foreach (IAttribute at in section.Attributes) {
+					if (at.Name == "Category" || at.Name == "CategoryAttribute" || at.Name == "System.ComponentModel.CategoryAttribute"|| at.Name == "System.ComponentModel.Category") {
+						if (at.PositionalArguments != null && at.PositionalArguments.Length > 0) {
+							CodePrimitiveExpression exp = at.PositionalArguments [0] as CodePrimitiveExpression;
+							if (exp != null && exp.Value != null)
+								return exp.Value.ToString ();
+						}
+					}
+				}
+			}
+			return "";
+		}
+		
+		static bool IsBrowsable (IMember member)
+		{
+			IProperty prop = member as IProperty;
+			if (prop != null && (!prop.CanGet || !prop.CanSet))
+				return false;
+
+			foreach (IAttributeSection section in member.Attributes) {
+				foreach (IAttribute at in section.Attributes) {
+					if (at.Name == "Browsable" || at.Name == "BrowsableAttribute" || at.Name == "System.ComponentModel.BrowsableAttribute"|| at.Name == "System.ComponentModel.Browsable") {
+						if (at.PositionalArguments != null && at.PositionalArguments.Length > 0) {
+							CodePrimitiveExpression exp = at.PositionalArguments [0] as CodePrimitiveExpression;
+							if (exp != null && exp.Value != null && exp.Value is bool) {
+								return (bool) exp.Value;
+							}
+						}
+					}
+				}
+			}
+			return true;
+		}
+		
+		static public IClass[] GetExportableClasses (Project project)
+		{
+			IParserContext pctx = IdeApp.ProjectOperations.ParserDatabase.GetProjectParserContext (project);
+			ArrayList list = new ArrayList ();
+			foreach (IClass cls in pctx.GetProjectContents ())
+				if (IsWidget (cls, pctx)) list.Add (cls);
+
+			return (IClass[]) list.ToArray (typeof(IClass));
+		}
+		
+		static bool IsWidget (IClass cls, IParserContext pctx)
+		{
+			foreach (string bt in cls.BaseTypes)
+				if (bt == "Translator.Widget")
+					return true;
+
+			foreach (string bt in cls.BaseTypes) {
+				IClass bcls = pctx.GetClass (bt, true, true);
+				if (bcls != null)
+					return IsWidget (bcls, pctx);
+			}
+			return false;
+		}
+*/
+	}
+	
+	class TranslatorCoreStartupCommand: CommandHandler
+	{
+		protected override void Run()
+		{
+			TranslatorCoreService.Initialize ();
+		}
+	}
+}
Index: Extras/Translator/Translator/TranslationProject.cs
===================================================================
--- Extras/Translator/Translator/TranslationProject.cs	(revision 0)
+++ Extras/Translator/Translator/TranslationProject.cs	(revision 0)
@@ -0,0 +1,61 @@
+//
+// TranslationProject.cs
+//
+// Author:
+//   Rafael 'Monoman' Teixeira
+//
+// Copyright (C) 2006 Rafael 'Monoman' Teixeira
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Xml;
+using System.CodeDom;
+using System.CodeDom.Compiler;
+using System.IO;
+using System.Collections;
+using System.Collections.Specialized;
+
+using MonoDevelop.Core;
+using MonoDevelop.Ide.Gui;
+using MonoDevelop.Projects;
+using MonoDevelop.Projects.Parser;
+using MonoDevelop.Projects.Serialization;
+
+namespace Translator
+{
+	public class TranslationProject : IDisposable
+	{
+		private DotNetProject project;
+		private string potfiles;
+		
+		public TranslationProject(DotNetProject project, string potfiles)
+		{
+			this.project = project;
+			this.potfiles = potfiles;	
+		}
+	
+		public void Dispose ()
+		{
+
+		}
+	}
+}
Index: Extras/Translator/Translator/TranslatorInfo.cs
===================================================================
--- Extras/Translator/Translator/TranslatorInfo.cs	(revision 0)
+++ Extras/Translator/Translator/TranslatorInfo.cs	(revision 0)
@@ -0,0 +1,157 @@
+//
+// TranslatorInfo.cs
+//
+// Author:
+//   Rafael 'Monoman' Teixeira
+//
+// Copyright (C) 2006 Rafael 'Monoman' Teixeira
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Xml;
+using System.CodeDom;
+using System.CodeDom.Compiler;
+using System.IO;
+using System.Collections;
+using System.Collections.Specialized;
+
+using MonoDevelop.Core;
+using MonoDevelop.Ide.Gui;
+using MonoDevelop.Projects;
+using MonoDevelop.Projects.Parser;
+using MonoDevelop.Projects.Serialization;
+
+namespace Translator
+{
+	public class TranslatorInfo: IDisposable
+	{
+		DotNetProject project;
+		TranslationProject builderProject;
+		IDotNetLanguageBinding binding;
+		string basename;
+		
+		public TranslatorInfo ()
+		{
+		}
+		
+		public TranslatorInfo (DotNetProject project)
+		{
+			IExtendedDataItem item = (IExtendedDataItem) project;
+			item.ExtendedProperties ["TranslatorInfo"] = this;
+			Bind (project);
+		}
+		
+		public static TranslatorInfo GetFrom(DotNetProject project)
+		{
+			IExtendedDataItem item = (IExtendedDataItem) project;
+			return (TranslatorInfo) item.ExtendedProperties ["TranslatorInfo"];
+		}
+		
+		public void Bind (DotNetProject project)
+		{
+			this.project = project;
+			basename = project.Name.Trim().ToLower().Replace(' ', '_');
+			binding = Services.Languages.GetBindingPerLanguageName (project.LanguageName) as IDotNetLanguageBinding;
+		}
+		
+		public void Dispose ()
+		{
+			if (builderProject != null)
+				builderProject.Dispose ();
+		}
+		
+		public TranslationProject TranslationProject {
+			get {
+				if (builderProject == null) {
+					UpdateTranslatorFolder ();
+					builderProject = new TranslationProject (project, PotFiles);
+				}
+				return builderProject;
+			}
+		}
+		
+		public string GeneratedPotFile {
+			get { return Path.Combine (TranslatorFolder, basename + ".pot" ); }
+		}
+		
+		public string PotFiles {
+			get { return Path.Combine (TranslatorFolder, "POTFILES" ); }
+		}
+				
+		public string TranslatorFolder {
+			get { return Path.Combine (project.BaseDirectory, "Translation"); }
+		}
+				
+		
+		public void UpdateTranslatorFolder ()
+		{
+			if (project == null)	// This happens when deserializing
+				return;
+
+			// This method synchronizes the current project configuration info
+			// with the needed support files in the translator folder.
+
+			Directory.CreateDirectory (TranslatorFolder);
+				
+			// Create the translator file if not found
+			if (!File.Exists (PotFiles)) {
+				StreamWriter sw = new StreamWriter (PotFiles);
+				sw.WriteLine ("[encoding: UTF-8]");
+				sw.Close ();
+			}
+			
+			// The the translator file to the project
+			if (!project.IsFileInProject (PotFiles))
+				project.AddFile (PotFiles, BuildAction.Nothing);
+			
+			if (!File.Exists (GeneratedPotFile)) {
+				// TODO Generate an empty .pot file
+				StreamWriter swg = new StreamWriter (GeneratedPotFile);
+				swg.WriteLine ("");
+				swg.Close ();
+			}
+
+			// Add the generated file to the project, if not already there
+			if (!project.IsFileInProject (GeneratedPotFile))
+				project.AddFile (GeneratedPotFile, BuildAction.Nothing);
+
+			// Add catalog references, if not already added.
+			bool catalog=false;
+			foreach (ProjectReference r in project.ProjectReferences) {
+				if (r.Reference.StartsWith ("Mono.Posix") && r.ReferenceType == ReferenceType.Gac)
+					catalog = true;
+			}
+			if (!catalog)
+				project.ProjectReferences.Add (new ProjectReference (ReferenceType.Gac, 
+					typeof(Mono.Unix.Catalog).Assembly.FullName));
+		}
+		
+		CodeDomProvider GetCodeDomProvider ()
+		{
+			IDotNetLanguageBinding binding = Services.Languages.GetBindingPerLanguageName (project.LanguageName) as IDotNetLanguageBinding;
+			CodeDomProvider provider = binding.GetCodeDomProvider ();
+			if (provider == null)
+				throw new UserException ("Code generation not supported in language: " + project.LanguageName);
+			return provider;
+		}
+	}	
+}
Index: Extras/Translator/icons/window.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: Extras/Translator/icons/window.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream
