Index: MonoDevelop.Projects.Utility/DiffUtility.cs
===================================================================
--- MonoDevelop.Projects.Utility/DiffUtility.cs	(revision 61752)
+++ MonoDevelop.Projects.Utility/DiffUtility.cs	(working copy)
@@ -60,7 +60,10 @@
 		static public int Compare(IList a, IList b, IComparer comparer)
 		{
 			if (a == null || b == null) {
-				return 1;
+				if (a == b)
+					return 0;
+				else
+					return (a == null) ? -1 : 1;
 			}
 			int limit = (a.Count < b.Count) ? a.Count : b.Count;
 			for(int i=0; i < limit; i++) {
@@ -82,7 +85,10 @@
 		static public int Compare(SortedList a, SortedList b, IComparer comparer)
 		{
 			if (a == null || b == null) {
-				return 1;
+				if (a == b)
+					return 0;
+				else
+					return (a == null) ? -1 : 1;
 			}
 			int cmp;
 			int limit = (a.Count < b.Count) ? a.Count : b.Count;
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 61752)
+++ ChangeLog	(working copy)
@@ -1,3 +1,26 @@
+2006-06-15 Matej Urbas <matej.urbas@gmail.com>
+
+	* MonoDevelop.Projects.Utility/DiffUtility.cs: Changed the comparison
+	  methods to allow comparison between null and non-null arguments.
+
+	* MonoDevelop.Projects.Parser/IClass.cs:
+	* MonoDevelop.Projects.Parser/IMethod.cs:
+	* MonoDevelop.Projects.Parser/IReturnType.cs:
+	* MonoDevelop.Projects.Parser/AbstractClass.cs:
+	* MonoDevelop.Projects.Parser/AbstractReturnType.cs:
+	* MonoDevelop.Projects.Parser/ClassProxy.cs:
+	* MonoDevelop.Projects.Parser/AbstractMethod.cs:
+	  Extended all above interfaces and classes to provide generics support.
+
+	* MonoDevelop.Projects.Parser/GenericParameter.cs:
+	* MonoDevelop.Projects.Parser/GenericParameterList.cs:
+	* MonoDevelop.Projects.Parser/ReturnTypeList.cs:
+	  Added above files to the project.
+
+	* MonoDevelop.Projects.mdp: Added new file to the build process.
+
+	* Makefile.am: Added new files to the build process.
+
 2006-06-15 Lluis Sanchez Gual  <lluis@novell.com>
 
 	* MonoDevelop.Projects/LanguageBindingService.cs:
Index: Makefile.am
===================================================================
--- Makefile.am	(revision 61752)
+++ Makefile.am	(working copy)
@@ -212,7 +212,10 @@
 MonoDevelop.Projects/ExecutionContext.cs \
 MonoDevelop.Projects/BuildTool.cs \
 MonoDevelop.Projects/ProjectsServices.cs \
-MonoDevelop.Projects.Documentation/IDocumentationService.cs
+MonoDevelop.Projects.Documentation/IDocumentationService.cs \
+MonoDevelop.Projects.Parser/GenericParameter.cs \
+MonoDevelop.Projects.Parser/ReturnTypeList.cs \
+MonoDevelop.Projects.Parser/GenericParameterList.cs
 
 GENERATED_FILES = \
 AssemblyInfo.cs
Index: MonoDevelop.Projects.Parser/IClass.cs
===================================================================
--- MonoDevelop.Projects.Parser/IClass.cs	(revision 61752)
+++ MonoDevelop.Projects.Parser/IClass.cs	(working copy)
@@ -9,6 +9,7 @@
 using System.Collections;
 using System.Collections.Specialized;
 using System.Reflection;
+using MonoDevelop.Projects.Parser;
 
 namespace MonoDevelop.Projects.Parser
 {
@@ -38,6 +39,19 @@
 			get;
 		}
 		
+		/* Reasoning behind the 'null' isGeneric indication: since most classes
+		   are not generic, it is best not to create string collections to hold
+		   type parameters and use the 'null' value to indicate that a type is
+		   not generic */
+		/// <summary>
+		/// Contains a set of formal parameters to a generic type. 
+		/// <p>If this property returns null or an empty collection, the type is
+		/// not generic.</p>
+		/// </summary>
+		GenericParameterList GenericParameters {
+			get;
+		}
+		
 		StringCollection BaseTypes {
 			get;
 		}
Index: MonoDevelop.Projects.Parser/IMethod.cs
===================================================================
--- MonoDevelop.Projects.Parser/IMethod.cs	(revision 61752)
+++ MonoDevelop.Projects.Parser/IMethod.cs	(working copy)
@@ -22,5 +22,14 @@
 		bool IsConstructor {
 			get;
 		}
+		
+		/// <summary>
+		/// Contains a list of formal parameters to a generic method. 
+		/// <p>If this property returns null or an empty collection, the method
+		/// is not generic.</p>
+		/// </summary>
+		GenericParameterList GenericParameters {
+			get;
+		}
 	}
 }
Index: MonoDevelop.Projects.Parser/AbstractClass.cs
===================================================================
--- MonoDevelop.Projects.Parser/AbstractClass.cs	(revision 61752)
+++ MonoDevelop.Projects.Parser/AbstractClass.cs	(working copy)
@@ -20,9 +20,10 @@
 		protected IRegion          region;
 		protected IRegion          bodyRegion;
 		protected object           declaredIn;
+		
+		protected GenericParameterList genericParamters;
+		protected StringCollection     baseTypes  = new StringCollection();
 
-		protected StringCollection baseTypes       = new StringCollection();
-
 		protected ClassCollection    innerClasses = new ClassCollection();
 		protected FieldCollection    fields       = new FieldCollection();
 		protected PropertyCollection properties   = new PropertyCollection();
@@ -57,6 +58,20 @@
 				return declaredIn;
 			}
 		}
+		
+		/// <summary>
+		/// Contains a list of formal parameters to a generic type. 
+		/// <p>If this property returns null or an empty collection, the type is
+		/// not generic.</p>
+		/// </summary>
+		public virtual GenericParameterList GenericParameters {
+			get {
+				return genericParamters;
+			}
+			set {
+				genericParamters = value;
+			}
+		}
 
 		public virtual StringCollection BaseTypes {
 			get {
@@ -154,7 +169,15 @@
 			if(cmp != 0)
 				return cmp;
 			
-			return DiffUtility.Compare(Events, value.Events);
+			cmp = DiffUtility.Compare(Events, value.Events);
+			if (cmp != 0)
+				return cmp;
+			
+			if (value.GenericParameters == GenericParameters)
+				return 0;	// They are the same classes or are both null - 
+							// which counts as 'being same'
+			else
+				return DiffUtility.Compare(GenericParameters, value.GenericParameters);
 		}
 		
 		public override bool Equals (object ob)
Index: MonoDevelop.Projects.Parser/AbstractReturnType.cs
===================================================================
--- MonoDevelop.Projects.Parser/AbstractReturnType.cs	(revision 61752)
+++ MonoDevelop.Projects.Parser/AbstractReturnType.cs	(working copy)
@@ -15,6 +15,7 @@
 		protected int    pointerNestingLevel;
 		protected int[]  arrayDimensions;
 		protected object declaredin = null;
+		protected ReturnTypeList genericArguments;
 		string fname;
 		
 		public virtual string FullyQualifiedName {
@@ -74,6 +75,19 @@
 				return arrayDimensions;
 			}
 		}
+		 		
+		/// <summary>
+		/// Contains values (types) of actual parameters (arguments) to a
+		/// generic type.
+		/// </summary>
+		public virtual ReturnTypeList GenericArguments {
+			get {
+				return genericArguments;
+			}
+			set {
+				genericArguments = value;
+			}
+		}
 
 		public virtual int CompareTo (object ob) 
 		{
@@ -95,7 +109,14 @@
 				return cmp;
 			}
 			
-			return DiffUtility.Compare(ArrayDimensions, value.ArrayDimensions);
+			cmp = DiffUtility.Compare(ArrayDimensions, value.ArrayDimensions);
+			if (cmp != 0)
+				return cmp;
+			
+			if (GenericArguments == value.GenericArguments)
+				return 0;
+			else
+				return DiffUtility.Compare(GenericArguments, value.GenericArguments);
 		}
 		
 		int IComparable.CompareTo(object value)
Index: MonoDevelop.Projects.Parser/IReturnType.cs
===================================================================
--- MonoDevelop.Projects.Parser/IReturnType.cs	(revision 61752)
+++ MonoDevelop.Projects.Parser/IReturnType.cs	(working copy)
@@ -35,6 +35,13 @@
 		object DeclaredIn {
 			get;
 		}
-		
+		 		
+		/// <summary>
+		/// Contains values (types) of actual parameters (arguments) to a
+		/// generic type.
+		/// </summary>
+		ReturnTypeList GenericArguments {
+			get;
+		}
 	}
 }
Index: MonoDevelop.Projects.Parser/ClassProxy.cs
===================================================================
--- MonoDevelop.Projects.Parser/ClassProxy.cs	(revision 61752)
+++ MonoDevelop.Projects.Parser/ClassProxy.cs	(working copy)
@@ -94,6 +94,17 @@
 			}
 		}
 		
+		/// <summary>
+		/// Contains a list of formal parameters to a generic type. 
+		/// <p>If this property returns null or an empty collection, the type is
+		/// not generic.</p>
+		/// </summary>
+		public GenericParameterList GenericParameters {
+			get {
+				return null;
+			}
+		}
+		
 		public StringCollection BaseTypes {
 			get {
 				return new StringCollection();
Index: MonoDevelop.Projects.Parser/AbstractMethod.cs
===================================================================
--- MonoDevelop.Projects.Parser/AbstractMethod.cs	(revision 61752)
+++ MonoDevelop.Projects.Parser/AbstractMethod.cs	(working copy)
@@ -15,6 +15,7 @@
 	{
 		protected IRegion bodyRegion;
 		
+		protected GenericParameterList genericParameters;
 		protected ParameterCollection parameters = new ParameterCollection();
 
 		public virtual IRegion BodyRegion {
@@ -31,6 +32,20 @@
 				parameters = value;
 			}
 		}
+		
+		/// <summary>
+		/// Contains a list of formal parameters to a generic method. 
+		/// <p>If this property returns null or an empty collection, the method
+		/// is not generic.</p>
+		/// </summary>
+		public virtual GenericParameterList GenericParameters {
+			get {
+				return genericParameters;
+			}
+			set {
+				genericParameters = value;
+			}
+		}
 
 		public virtual bool IsConstructor {
 			get {
@@ -53,7 +68,14 @@
 			if (cmp != 0)
 				return cmp;
 			
-			return DiffUtility.Compare(Parameters, ((IMethod)value).Parameters);
+			cmp = DiffUtility.Compare(Parameters, ((IMethod)value).Parameters);
+			if (cmp != 0)
+				return cmp;
+				
+			if (GenericParameters == ((IMethod)value).GenericParameters)
+				return 0;
+			else
+				return DiffUtility.Compare(GenericParameters, ((IMethod)value).GenericParameters);
 		}
 		
 		public override bool Equals (object ob)
Index: MonoDevelop.Projects.mdp
===================================================================
--- MonoDevelop.Projects.mdp	(revision 61752)
+++ MonoDevelop.Projects.mdp	(working copy)
@@ -218,6 +218,9 @@
     <File name="./MonoDevelop.Projects/ExecutionContext.cs" subtype="Code" buildaction="Compile" />
     <File name="./MonoDevelop.Projects/BuildTool.cs" subtype="Code" buildaction="Compile" />
     <File name="./MonoDevelop.Projects/ProjectsServices.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Projects.Parser/GenericParameter.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Projects.Parser/ReturnTypeList.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Projects.Parser/GenericParameterList.cs" subtype="Code" buildaction="Compile" />
     <File name="./MonoDevelop.Projects.Extensions/DataTypeCodon.cs" subtype="Code" buildaction="Compile" />
   </Contents>
   <References>

