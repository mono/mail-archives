// <file>
//     <owner name="Lluis Sanchez" email="lluis@novell.com"/>
//     <version value="$version"/>
// </file>

using System;
using System.Collections;
using System.IO;
using System.Xml;
using MonoDevelop.Internal.Serialization;
using MonoDevelop.Services;

namespace MonoDevelop.Internal.Project
{
	public class NantFileFormat: IFileFormat
	{
		public string Name {
			get { return "NAnt"; }
		}
		
		public string GetValidFormatName (string fileName)
		{
			return Path.ChangeExtension (fileName, ".build");
		}
		
		public bool CanReadFile (string file)
		{
			return string.Compare (Path.GetExtension (file), ".build", true);
		}
		
		public bool CanWriteFile (object obj)
		{
			return obj is Project;
		}
		
		public void WriteFile (string file, object node)
		{
			Project project = node as Project;
			if (project == null)
				throw new InvalidOperationException ("The provided object is not a Project");
				
			StreamWriter sw = new StreamWriter (file);
			try {
				DataSerializer serializer = new DataSerializer (Runtime.ProjectService.DataContext, file);
				XmlTextWriter tw = new XmlTextWriter (sw);
				tw.Formatting = Formatting.Indented;
				NantProjectWriter projectWriter = new NantProjectWriter (serializer);
				projectWriter.WriteProject (tw, project);
			} finally {
				sw.Close ();
			}
		}
		
		public object ReadFile (string fileName)
		{
			XmlTextReader reader = new XmlTextReader (new StreamReader (fileName));
			reader.MoveToContent ();

			string version = reader.GetAttribute ("version");
			if (version == null) version = reader.GetAttribute ("fileversion");
			
			DataSerializer serializer = new DataSerializer (Runtime.ProjectService.DataContext, fileName);
			NantProjectReader projectReader = new NantProjectReader (serializer);
			
			try {
				if (projectReader != null)
					return projectReader.ReadProject (reader);
				else
					throw new UnknownProjectVersionException (fileName, version);
			} finally {
				reader.Close ();
			}
		}
	}
	
	class NantProjectReader
	{
		Project project;
		string file;
		DataSerializer serializer;
		
		public NantProjectReader (DataSerializer serializer)
		{
			this.serializer = serializer;
			this.file = serializer.SerializationContext.BaseFile;
		}

		public Project ReadProject (XmlReader reader)
		{
			return null;
		}
	}
		
	class NantProjectWriter
	{
		DataSerializer serializer;
		
		public NantProjectWriter (DataSerializer serializer)
		{
			this.serializer = serializer;
		}

		public void WriteProject (XmlWriter writer, Project project)
		{
			writer.WriteStartElement ("project");
			writer.WriteAttributeString ("name", project.Name);
			
			DataItem item = serializer.Serialize (project, typeof(Project)) as DataItem;
			item.ItemData.Extract ("Configurations");
			item.ItemData.Extract ("name");
			item.ItemData.Extract ("fileversion");
			
			if (project.ActiveConfiguration != null)
				writer.WriteAttributeString ("default", project.ActiveConfiguration.Name);
			
			WriteProperties (writer, "", item.ItemData);
			
			// Files
			
			writer.WriteStartElement ("fileset");
			writer.WriteAttributeString ("id", "files");
			foreach (ProjectFile file in project.ProjectFiles) {
				writer.WriteStartElement ("include");
				writer.WriteAttributeString ("name", file.RelativePath);
				writer.WriteEndElement ();
			}
			writer.WriteEndElement ();
			
			
			// Targets
			
			foreach (IConfiguration conf in project.Configurations) {
				writer.WriteStartElement ("target");
				writer.WriteAttributeString ("name", conf.Name);
				DataItem confItem = serializer.Serialize (conf, typeof(IConfiguration)) as DataItem;
				confItem.ItemData.Extract ("name");
				WriteProperties (writer, "", confItem.ItemData);
				writer.WriteEndElement ();
			}
			
			writer.WriteEndElement ();
		}
		
		void WriteProperties (XmlWriter writer, string baseName, DataCollection col)
		{
			Hashtable names = new Hashtable ();
			foreach (DataNode data in col)
			{
				string name = baseName + data.Name;
				object num = names [data.Name];
				if (num != null) {
					int n = ((int)num) + 1;
					name += "[" + n.ToString () + "]";
					names [data.Name] = n;
				} else {
					names [data.Name] = 0;
				}
				
				if (data is DataValue) {
					writer.WriteStartElement ("property");
					writer.WriteAttributeString ("name", name);
					writer.WriteAttributeString ("value", ((DataValue)data).Value);
					writer.WriteEndElement ();
				} else if (data is DataItem) {
					WriteProperties (writer, name + ".", ((DataItem)data).ItemData);
				}
			}
		}
	}	
}
