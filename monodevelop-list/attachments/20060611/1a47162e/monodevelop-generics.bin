Index: Core/src/MonoDevelop.Projects/ChangeLog
===================================================================
--- Core/src/MonoDevelop.Projects/ChangeLog	(revisión: 61619)
+++ Core/src/MonoDevelop.Projects/ChangeLog	(copia de trabajo)
@@ -1,3 +1,13 @@
+2006-06-11 Matej Urbas  <matej.urbas@gmail.com>
+	* MonoDevelop.Projects.Parser/AbstractClass.cs:
+	* MonoDevelop.Projects.Parser/AbstractMethod.cs:
+	* MonoDevelop.Projects.Parser/AbstractReturnType.cs:
+	* MonoDevelop.Projects.Parser/ClassProxy.cs:
+	* MonoDevelop.Projects.Parser/IClass.cs:
+	* MonoDevelop.Projects.Parser/IMethod.cs:
+	* MonoDevelop.Projects.Parser/IReturnType.cs:
+	  Added generic type support to above classes.
+
 2006-06-08 Lluis Sanchez Gual  <lluis@novell.com>
 
 	* MonoDevelop.Projects/DotNetProject.cs: GetDefaultNamespace now
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IClass.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IClass.cs	(revisión: 61619)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IClass.cs	(copia de trabajo)
@@ -38,6 +38,20 @@
 			get;
 		}
 		
+		
+		/* Reasoning behind the 'null' isGeneric indication: since most classes
+		   are not generic, it is best not to create string collections to hold
+		   type parameters and use the 'null' value to indicate that a type is
+		   not generic */
+		/// <summary>
+		/// Contains the names of formal parameters to a generic type. 
+		/// <p>If this property returns null or an empty collection, the type is
+		/// not generic.</p>
+		/// </summary>
+		StringCollection GenericParameters {
+			get;
+		}
+		
 		StringCollection BaseTypes {
 			get;
 		}
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IMethod.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IMethod.cs	(revisión: 61619)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IMethod.cs	(copia de trabajo)
@@ -6,6 +6,7 @@
 // </file>
 using System;
 using System.Reflection;
+using System.Collections.Specialized;
 
 namespace MonoDevelop.Projects.Parser
 {
@@ -22,5 +23,14 @@
 		bool IsConstructor {
 			get;
 		}
+		
+		/// <summary>
+		/// Contains the names of formal parameters to a generic method. 
+		/// <p>If this property returns null or an empty collection, the method
+		/// is not generic.</p>
+		/// </summary>
+		StringCollection GenericParameters {
+			get;
+		}
 	}
 }
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AbstractClass.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AbstractClass.cs	(revisión: 61619)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AbstractClass.cs	(copia de trabajo)
@@ -21,7 +21,8 @@
 		protected IRegion          bodyRegion;
 		protected object           declaredIn;
 
-		protected StringCollection baseTypes       = new StringCollection();
+		protected StringCollection baseTypes      = new StringCollection();
+		protected StringCollection genericParameters = null;
 
 		protected ClassCollection    innerClasses = new ClassCollection();
 		protected FieldCollection    fields       = new FieldCollection();
@@ -57,6 +58,12 @@
 				return declaredIn;
 			}
 		}
+		
+		public virtual StringCollection GenericParameters {
+			get {
+				return genericParameters;
+			}
+		}
 
 		public virtual StringCollection BaseTypes {
 			get {
@@ -154,7 +161,15 @@
 			if(cmp != 0)
 				return cmp;
 			
-			return DiffUtility.Compare(Events, value.Events);
+			cmp = DiffUtility.Compare(Events, value.Events);
+			if (cmp != 0)
+				return cmp;
+			
+			if (value.GenericParameters == GenericParameters)
+				return 0;	// They are the same classes or are both null - 
+							// which counts as 'being same'
+			else
+				return DiffUtility.Compare(GenericParameters, value.GenericParameters);
 		}
 		
 		public override bool Equals (object ob)
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AbstractReturnType.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AbstractReturnType.cs	(revisión: 61619)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AbstractReturnType.cs	(copia de trabajo)
@@ -5,6 +5,7 @@
 //     <version value="$version"/>
 // </file>
 using System;
+using System.Collections.Specialized;
 using MonoDevelop.Projects.Utility;
 
 namespace MonoDevelop.Projects.Parser
@@ -15,6 +16,7 @@
 		protected int    pointerNestingLevel;
 		protected int[]  arrayDimensions;
 		protected object declaredin = null;
+		protected StringCollection genericArguments = null;
 		string fname;
 		
 		public virtual string FullyQualifiedName {
@@ -95,7 +97,14 @@
 				return cmp;
 			}
 			
-			return DiffUtility.Compare(ArrayDimensions, value.ArrayDimensions);
+			cmp = DiffUtility.Compare(ArrayDimensions, value.ArrayDimensions);
+			if (cmp != 0)
+				return cmp;
+			
+			if (GenericArguments == value.GenericArguments)
+				return 0;
+			else
+				return DiffUtility.Compare(GenericArguments, value.GenericArguments);
 		}
 		
 		int IComparable.CompareTo(object value)
@@ -126,6 +135,17 @@
 				return declaredin;
 			}
 		}
+		
+		/// <summary>
+		/// Contains values (types) of actual parameters (arguments) to a
+		/// generic type.
+		/// <p>This collection contains fully qualified names.</p>
+		/// </summary>
+		public virtual StringCollection GenericArguments {
+			get {
+				return genericArguments;
+			}
+		}
 	}
 	
 }
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IReturnType.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IReturnType.cs	(revisión: 61619)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IReturnType.cs	(copia de trabajo)
@@ -6,6 +6,8 @@
 // </file>
 
 using System;
+using System.Collections.Specialized;
+
 namespace MonoDevelop.Projects.Parser
 {
 	public interface IReturnType: IComparable
@@ -36,5 +38,13 @@
 			get;
 		}
 		
+		/// <summary>
+		/// Contains values (types) of actual parameters (arguments) to a
+		/// generic type.
+		/// <p>This collection contains fully qualified names.</p>
+		/// </summary>
+		StringCollection GenericArguments {
+			get;
+		}
 	}
 }
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/ClassProxy.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/ClassProxy.cs	(revisión: 61619)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/ClassProxy.cs	(copia de trabajo)
@@ -94,6 +94,12 @@
 			}
 		}
 		
+		public StringCollection GenericParameters {
+			get {
+				return new StringCollection();
+			}
+		}
+		
 		public StringCollection BaseTypes {
 			get {
 				return new StringCollection();
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AbstractMethod.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AbstractMethod.cs	(revisión: 61619)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AbstractMethod.cs	(copia de trabajo)
@@ -6,6 +6,7 @@
 // </file>
 using System;
 using System.Reflection;
+using System.Collections.Specialized;
 using MonoDevelop.Projects.Utility;
 
 namespace MonoDevelop.Projects.Parser
@@ -16,6 +17,7 @@
 		protected IRegion bodyRegion;
 		
 		protected ParameterCollection parameters = new ParameterCollection();
+		protected StringCollection genericParameters = null;
 
 		public virtual IRegion BodyRegion {
 			get {
@@ -31,6 +33,15 @@
 				parameters = value;
 			}
 		}
+		
+		public virtual StringCollection GenericParameters {
+			get {
+				return genericParameters;
+			}
+			set {
+				genericParameters = value;
+			}
+		}
 
 		public virtual bool IsConstructor {
 			get {
@@ -52,8 +63,14 @@
 			int cmp = base.CompareTo (value);
 			if (cmp != 0)
 				return cmp;
-			
-			return DiffUtility.Compare(Parameters, ((IMethod)value).Parameters);
+			cmp = DiffUtility.Compare(Parameters, ((IMethod)value).Parameters);
+			if (cmp != 0)
+				return cmp;
+				
+			if (GenericParameters == ((IMethod)value).GenericParameters)
+				return 0;
+			else
+				return DiffUtility.Compare(GenericParameters, ((IMethod)value).GenericParameters);
 		}
 		
 		public override bool Equals (object ob)
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads.ClassPad/MethodNodeBuilder.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads.ClassPad/MethodNodeBuilder.cs	(revisión: 61619)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads.ClassPad/MethodNodeBuilder.cs	(copia de trabajo)
@@ -45,8 +45,22 @@
 		public override void BuildNode (ITreeBuilder treeBuilder, object dataObject, ref string label, ref Gdk.Pixbuf icon, ref Gdk.Pixbuf closedIcon)
 		{
 			IMethod data = dataObject as IMethod;
-			label = data.Name;
+			label = GetMethodNameWithGenerics(data);
 			icon = Context.GetIcon (Services.Icons.GetIcon (data));
 		}
+		
+		private string GetMethodNameWithGenerics (IMethod method)
+		{
+			if (method.GenericParameters == null || method.GenericParameters.Count == 0)
+				return method.Name;
+			else
+			{
+				string parameters = "";
+				foreach (string parameter in method.GenericParameters)
+					parameters += parameter + ", ";
+				parameters = parameters.Trim (' ', ',');
+				return method.Name + "&lt;" + parameters + "&gt;";
+			}
+		}
 	}
 }
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads.ClassPad/ClassNodeBuilder.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads.ClassPad/ClassNodeBuilder.cs	(revisión: 61619)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads.ClassPad/ClassNodeBuilder.cs	(copia de trabajo)
@@ -49,13 +49,13 @@
 
 		public override string GetNodeName (ITreeNavigator thisNode, object dataObject)
 		{
-			return ((ClassData)dataObject).Class.Name;
+			return GetClassNameWithGenerics(((ClassData)dataObject).Class);
 		}
 		
 		public override void BuildNode (ITreeBuilder treeBuilder, object dataObject, ref string label, ref Gdk.Pixbuf icon, ref Gdk.Pixbuf closedIcon)
 		{
 			ClassData classData = dataObject as ClassData;
-			label = classData.Class.Name;
+			label = GetClassNameWithGenerics(classData.Class);
 			icon = Context.GetIcon (Services.Icons.GetIcon (classData.Class));
 		}
 
@@ -106,6 +106,21 @@
 			else
 				return 1;
 		}
+		
+		private string GetClassNameWithGenerics (IClass cls)
+		{
+			if (cls.GenericParameters == null || cls.GenericParameters.Count == 0)
+				return cls.Name;
+			else
+			{
+				System.Console.WriteLine ("here");
+				string parameters = "";
+				foreach (string parameter in cls.GenericParameters)
+					parameters += parameter + ", ";
+				parameters = parameters.Trim (' ', ',');
+				return cls.Name + "&lt;" + parameters + "&gt;";
+			}
+		}
 	}
 	
 	public class ClassNodeCommandHandler: NodeCommandHandler
Index: Extras/NemerleBinding/NemerleAmbience.cs
===================================================================
--- Extras/NemerleBinding/NemerleAmbience.cs	(revisión: 61619)
+++ Extras/NemerleBinding/NemerleAmbience.cs	(copia de trabajo)
@@ -16,7 +16,7 @@
 
 namespace NemerleBinding
 {
-	public class NemerleAmbience :  AbstractAmbience
+	public class NemerleAmbience : AbstractAmbience
 	{
 		static string[,] typeConversionList = new string[,] {
 			{"System.Void",    "void"},
Index: Extras/NemerleBinding/Parser/Parser.cs
===================================================================
--- Extras/NemerleBinding/Parser/Parser.cs	(revisión: 61619)
+++ Extras/NemerleBinding/Parser/Parser.cs	(copia de trabajo)
@@ -395,15 +395,15 @@
             }
             else if (objectType is NCC.MType.Fun)
             {
-                return GetTheRealType ((NCC.MType)((NCC.MType.Fun)objectType).to, cu);
+                return GetTheRealType (((NCC.MType.Fun)objectType).to.Fix (), cu);
             }
             else if (objectType is NCC.MType.Ref)
             {
-                return GetTheRealType ((NCC.MType)((NCC.MType.Ref)objectType).t, cu);
+                return GetTheRealType (((NCC.MType.Ref)objectType).t.Fix (), cu);
             }
             else if (objectType is NCC.MType.Out)
             {
-                return GetTheRealType ((NCC.MType)((NCC.MType.Out)objectType).t, cu);
+                return GetTheRealType (((NCC.MType.Out)objectType).t.Fix (), cu);
             }
             else
             {
Index: Extras/NemerleBinding/Parser/SharpDevelopTree/Method.cs
===================================================================
--- Extras/NemerleBinding/Parser/SharpDevelopTree/Method.cs	(revisión: 61619)
+++ Extras/NemerleBinding/Parser/SharpDevelopTree/Method.cs	(copia de trabajo)
@@ -5,6 +5,7 @@
 using SR = System.Reflection;
 using NCC = Nemerle.Compiler;
 using Nemerle.Compiler.Typedtree;
+using System.Collections.Specialized;
 
 using System.Xml;
 
@@ -301,6 +302,13 @@
                 this.bodyRegion = Class.GetRegion (tinfo.Location);
             this._member = tinfo;
             
+            if (tinfo.GetHeader().typarms.Length > 0)
+            {
+                this.genericParameters = new StringCollection ();
+                foreach (NCC.StaticTyVar typarm in tinfo.GetHeader().typarms)
+                    genericParameters.Add (typarm.Name);
+            }
+            
             LoadXml (declaringType, tinfo);
                 
             // Add parameters
Index: Extras/NemerleBinding/Parser/SharpDevelopTree/Parameter.cs
===================================================================
--- Extras/NemerleBinding/Parser/SharpDevelopTree/Parameter.cs	(revisión: 61619)
+++ Extras/NemerleBinding/Parser/SharpDevelopTree/Parameter.cs	(copia de trabajo)
@@ -29,13 +29,13 @@
 			if (realType is NCC.MType.Ref)
 			{
 			    NCC.MType.Ref rt = (NCC.MType.Ref)realType;
-			    returnType = new ReturnType ((NCC.MType)rt.t);
+			    returnType = new ReturnType ((NCC.MType)rt.t.Fix ());
 			    modifier |= ParameterModifier.Ref;
 			}
 			else if (realType is NCC.MType.Out)
 			{
 			    NCC.MType.Out rt = (NCC.MType.Out)realType;
-			    returnType = new ReturnType ((NCC.MType)rt.t);
+			    returnType = new ReturnType ((NCC.MType)rt.t.Fix ());
 			    modifier |= ParameterModifier.Out;
 			}
 			else
Index: Extras/NemerleBinding/Parser/SharpDevelopTree/Class.cs
===================================================================
--- Extras/NemerleBinding/Parser/SharpDevelopTree/Class.cs	(revisión: 61619)
+++ Extras/NemerleBinding/Parser/SharpDevelopTree/Class.cs	(copia de trabajo)
@@ -5,6 +5,7 @@
 using System.Collections;
 using SR = System.Reflection;
 using System.Collections.Generic;
+using System.Collections.Specialized;
 
 using MonoDevelop.Projects;
 using System.Xml;
@@ -156,6 +157,14 @@
             this.region = GetRegion (tinfo.Location);
             this.bodyRegion = GetRegion (tinfo.Location);
             
+
+            if (tinfo.Typarms.Length > 0)
+            {
+                this.genericParameters = new StringCollection ();
+                foreach (NCC.StaticTyVar typarm in tinfo.Typarms)
+                    genericParameters.Add (typarm.Name);
+            }
+            
             ModifierEnum mod = (ModifierEnum)0;
             if ((tinfo.Attributes & NCC.NemerleAttributes.Private) != 0)
                 mod |= ModifierEnum.Private;
@@ -172,7 +181,7 @@
                 
             modifiers = mod;
             
-            if (addMembers)
+            if (addMembers || tinfo.IsDelegate)
             {
                 foreach (NCC.IMember member in tinfo.GetMembers ())
                 {
Index: Extras/CSharpBinding/CSharpAmbience.cs
===================================================================
--- Extras/CSharpBinding/CSharpAmbience.cs	(revisión: 61619)
+++ Extras/CSharpBinding/CSharpAmbience.cs	(copia de trabajo)
@@ -155,7 +155,18 @@
 			else
 				AppendPangoHtmlTag (builder, c.Name, "b");
 			
+			if (c.GenericParameters != null && c.GenericParameters.Count > 0)
+			{
+				builder.Append("&lt;");
+				for (int i = 0; i < c.GenericParameters.Count; ++i)
+				{
+					builder.Append (c.GenericParameters [i]);
+					if (i + 1 < c.GenericParameters.Count) builder.Append(", ");
+				}
+				builder.Append ("&gt;");
+			}
 			
+			
 			if (c.ClassType == ClassType.Delegate) {
 				builder.Append(" (");
 				if (IncludeHTMLMarkup) builder.Append("<br>");
@@ -368,6 +379,17 @@
 					AppendPangoHtmlTag (builder, m.Name, "b");
 			}
 			
+			if (m.GenericParameters != null && m.GenericParameters.Count > 0)
+			{
+				builder.Append("&lt;");
+				for (int i = 0; i < m.GenericParameters.Count; ++i)
+				{
+					builder.Append (m.GenericParameters [i]);
+					if (i + 1 < m.GenericParameters.Count) builder.Append(", ");
+				}
+				builder.Append ("&gt;");
+			}
+			
 			builder.Append(" (");
 			if (IncludeHTMLMarkup) builder.Append("<br>");
 			
@@ -431,6 +453,17 @@
 				}
 			}
 			
+			if (returnType.GenericArguments != null && returnType.GenericArguments.Count > 0)
+			{
+				builder.Append("&lt;");
+				for (int i = 0; i < returnType.GenericArguments.Count; ++i)
+				{
+					builder.Append (returnType.GenericArguments [i]);
+					if (i + 1 < returnType.GenericArguments.Count) builder.Append(", ");
+				}
+				builder.Append("&gt;");
+			}
+			
 			if (linkSet) {
 				builder.Append("</a>");
 			}
