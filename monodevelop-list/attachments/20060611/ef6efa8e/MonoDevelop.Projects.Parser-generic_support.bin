Index: ChangeLog
===================================================================
--- ChangeLog	(revision 61617)
+++ ChangeLog	(working copy)
@@ -1,3 +1,15 @@
+2006-06-11 Matej Urbas  <matej.urbas@gmail.com>
+	* MonoDevelop.Projects.Parser/AbstractClass.cs:
+	* MonoDevelop.Projects.Parser/AbstractMethod.cs:
+	* MonoDevelop.Projects.Parser/AbstractParameter.cs:
+	* MonoDevelop.Projects.Parser/AbstractReturnType.cs:
+	* MonoDevelop.Projects.Parser/ClassProxy.cs:
+	* MonoDevelop.Projects.Parser/IClass.cs:
+	* MonoDevelop.Projects.Parser/IMethod.cs:
+	* MonoDevelop.Projects.Parser/IParameter.cs:
+	* MonoDevelop.Projects.Parser/IReturnType.cs:
+	  Added generic type support to above classes.
+
 2006-06-08 Lluis Sanchez Gual  <lluis@novell.com>
 
 	* MonoDevelop.Projects/DotNetProject.cs: GetDefaultNamespace now
Index: MonoDevelop.Projects.Parser/IClass.cs
===================================================================
--- MonoDevelop.Projects.Parser/IClass.cs	(revision 61617)
+++ MonoDevelop.Projects.Parser/IClass.cs	(working copy)
@@ -38,6 +38,20 @@
 			get;
 		}
 		
+		
+		/* Reasoning behind the 'null' isGeneric indication: since most classes
+		   are not generic, it is best not to create string collections to hold
+		   type parameters and use the 'null' value to indicate that a type is
+		   not generic */
+		/// <summary>
+		/// Contains the names of formal parameters to a generic type. 
+		/// <p>If this property returns null or an empty collection, the type is
+		/// not generic.</p>
+		/// </summary>
+		StringCollection GenericParameters {
+			get;
+		}
+		
 		StringCollection BaseTypes {
 			get;
 		}
Index: MonoDevelop.Projects.Parser/IMethod.cs
===================================================================
--- MonoDevelop.Projects.Parser/IMethod.cs	(revision 61617)
+++ MonoDevelop.Projects.Parser/IMethod.cs	(working copy)
@@ -6,6 +6,7 @@
 // </file>
 using System;
 using System.Reflection;
+using System.Collections.Specialized;
 
 namespace MonoDevelop.Projects.Parser
 {
@@ -22,5 +23,14 @@
 		bool IsConstructor {
 			get;
 		}
+		
+		/// <summary>
+		/// Contains the names of formal parameters to a generic method. 
+		/// <p>If this property returns null or an empty collection, the method
+		/// is not generic.</p>
+		/// </summary>
+		StringCollection GenericParameters {
+			get;
+		}
 	}
 }
Index: MonoDevelop.Projects.Parser/AbstractClass.cs
===================================================================
--- MonoDevelop.Projects.Parser/AbstractClass.cs	(revision 61617)
+++ MonoDevelop.Projects.Parser/AbstractClass.cs	(working copy)
@@ -21,7 +21,8 @@
 		protected IRegion          bodyRegion;
 		protected object           declaredIn;
 
-		protected StringCollection baseTypes       = new StringCollection();
+		protected StringCollection baseTypes      = new StringCollection();
+		protected StringCollection genericParameters = null;
 
 		protected ClassCollection    innerClasses = new ClassCollection();
 		protected FieldCollection    fields       = new FieldCollection();
@@ -57,6 +58,12 @@
 				return declaredIn;
 			}
 		}
+		
+		public virtual StringCollection GenericParameters {
+			get {
+				return genericParameters;
+			}
+		}
 
 		public virtual StringCollection BaseTypes {
 			get {
@@ -154,7 +161,15 @@
 			if(cmp != 0)
 				return cmp;
 			
-			return DiffUtility.Compare(Events, value.Events);
+			cmp = DiffUtility.Compare(Events, value.Events);
+			if (cmp != 0)
+				return cmp;
+			
+			if (value.GenericParameters == GenericParameters)
+				return 0;	// They are the same classes or are both null - 
+							// which counts as 'being same'
+			else
+				return DiffUtility.Compare(GenericParameters, value.GenericParameters);
 		}
 		
 		public override bool Equals (object ob)
Index: MonoDevelop.Projects.Parser/AbstractReturnType.cs
===================================================================
--- MonoDevelop.Projects.Parser/AbstractReturnType.cs	(revision 61617)
+++ MonoDevelop.Projects.Parser/AbstractReturnType.cs	(working copy)
@@ -5,6 +5,7 @@
 //     <version value="$version"/>
 // </file>
 using System;
+using System.Collections.Specialized;
 using MonoDevelop.Projects.Utility;
 
 namespace MonoDevelop.Projects.Parser
@@ -15,6 +16,7 @@
 		protected int    pointerNestingLevel;
 		protected int[]  arrayDimensions;
 		protected object declaredin = null;
+		protected StringCollection genericArguments = null;
 		string fname;
 		
 		public virtual string FullyQualifiedName {
@@ -95,7 +97,14 @@
 				return cmp;
 			}
 			
-			return DiffUtility.Compare(ArrayDimensions, value.ArrayDimensions);
+			cmp = DiffUtility.Compare(ArrayDimensions, value.ArrayDimensions);
+			if (cmp != 0)
+				return cmp;
+			
+			if (GenericArguments == value.GenericArguments)
+				return 0;
+			else
+				return DiffUtility.Compare(GenericArguments, value.GenericArguments);
 		}
 		
 		int IComparable.CompareTo(object value)
@@ -126,6 +135,17 @@
 				return declaredin;
 			}
 		}
+		
+		/// <summary>
+		/// Contains values (types) of actual parameters (arguments) to a
+		/// generic type.
+		/// <p>This collection contains fully qualified names.</p>
+		/// </summary>
+		public virtual StringCollection GenericArguments {
+			get {
+				return genericArguments;
+			}
+		}
 	}
 	
 }
Index: MonoDevelop.Projects.Parser/IParameter.cs
===================================================================
--- MonoDevelop.Projects.Parser/IParameter.cs	(revision 61617)
+++ MonoDevelop.Projects.Parser/IParameter.cs	(working copy)
@@ -6,6 +6,7 @@
 // </file>
 using System;
 using System.Reflection;
+using System.Collections.Specialized;
 
 namespace MonoDevelop.Projects.Parser
 {
@@ -39,5 +40,14 @@
 		IMember DeclaringMember {
 			get;
 		}
+		
+		/// <summary>
+		/// Contains values (types) of actual parameters (arguments) to a
+		/// generic type.
+		/// <p>This collection contains fully qualified names.</p>
+		/// </summary>
+		StringCollection GenericArguments {
+			get;
+		}
 	}
 }
Index: MonoDevelop.Projects.Parser/IReturnType.cs
===================================================================
--- MonoDevelop.Projects.Parser/IReturnType.cs	(revision 61617)
+++ MonoDevelop.Projects.Parser/IReturnType.cs	(working copy)
@@ -6,6 +6,8 @@
 // </file>
 
 using System;
+using System.Collections.Specialized;
+
 namespace MonoDevelop.Projects.Parser
 {
 	public interface IReturnType: IComparable
@@ -36,5 +38,13 @@
 			get;
 		}
 		
+		/// <summary>
+		/// Contains values (types) of actual parameters (arguments) to a
+		/// generic type.
+		/// <p>This collection contains fully qualified names.</p>
+		/// </summary>
+		StringCollection GenericArguments {
+			get;
+		}
 	}
 }
Index: MonoDevelop.Projects.Parser/AbstractParameter.cs
===================================================================
--- MonoDevelop.Projects.Parser/AbstractParameter.cs	(revision 61617)
+++ MonoDevelop.Projects.Parser/AbstractParameter.cs	(working copy)
@@ -6,6 +6,7 @@
 // </file>
 using System;
 using System.Reflection;
+using System.Collections.Specialized;
 using MonoDevelop.Projects.Utility;
 
 namespace MonoDevelop.Projects.Parser
@@ -20,6 +21,7 @@
 		protected IReturnType         returnType;
 		protected ParameterModifier   modifier;
 		protected AttributeCollection attributeCollection = new AttributeCollection();
+		protected StringCollection    genericArguments = null;
 		protected IMember             declaringMember;
 
 		public bool IsOut {
@@ -107,7 +109,14 @@
 			if(0 != (cmp = (int)(Modifier - value.Modifier)))
 				return cmp;
 			
-			return DiffUtility.Compare(AttributeCollection, value.AttributeCollection);
+			cmp = DiffUtility.Compare(AttributeCollection, value.AttributeCollection);
+			if (cmp != 0)
+				return cmp;
+			
+			if (GenericArguments == value.GenericArguments)
+				return 0;
+			else
+				return DiffUtility.Compare(GenericArguments, value.GenericArguments);
 		}
 		
 		public override bool Equals (object ob)
@@ -124,5 +133,16 @@
 			if (ReturnType != null) c += ReturnType.GetHashCode ();
 			return c;
 		}
+		
+		/// <summary>
+		/// Contains values (types) of actual parameters (arguments) to a
+		/// generic type.
+		/// <p>This collection contains fully qualified names.</p>
+		/// </summary>
+		public virtual StringCollection GenericArguments {
+			get {
+				return genericArguments;
+			}
+		}
 	}
 }
Index: MonoDevelop.Projects.Parser/ClassProxy.cs
===================================================================
--- MonoDevelop.Projects.Parser/ClassProxy.cs	(revision 61617)
+++ MonoDevelop.Projects.Parser/ClassProxy.cs	(working copy)
@@ -94,6 +94,12 @@
 			}
 		}
 		
+		public StringCollection GenericParameters {
+			get {
+				return new StringCollection();
+			}
+		}
+		
 		public StringCollection BaseTypes {
 			get {
 				return new StringCollection();
Index: MonoDevelop.Projects.Parser/AbstractMethod.cs
===================================================================
--- MonoDevelop.Projects.Parser/AbstractMethod.cs	(revision 61617)
+++ MonoDevelop.Projects.Parser/AbstractMethod.cs	(working copy)
@@ -6,6 +6,7 @@
 // </file>
 using System;
 using System.Reflection;
+using System.Collections.Specialized;
 using MonoDevelop.Projects.Utility;
 
 namespace MonoDevelop.Projects.Parser
@@ -16,6 +17,7 @@
 		protected IRegion bodyRegion;
 		
 		protected ParameterCollection parameters = new ParameterCollection();
+		protected StringCollection genericParameters = null;
 
 		public virtual IRegion BodyRegion {
 			get {
@@ -31,6 +33,15 @@
 				parameters = value;
 			}
 		}
+		
+		public virtual StringCollection GenericParameters {
+			get {
+				return genericParameters;
+			}
+			set {
+				genericParameters = value;
+			}
+		}
 
 		public virtual bool IsConstructor {
 			get {
@@ -52,8 +63,14 @@
 			int cmp = base.CompareTo (value);
 			if (cmp != 0)
 				return cmp;
-			
-			return DiffUtility.Compare(Parameters, ((IMethod)value).Parameters);
+			cmp = DiffUtility.Compare(Parameters, ((IMethod)value).Parameters);
+			if (cmp != 0)
+				return cmp;
+				
+			if (GenericParameters == ((IMethod)value).GenericParameters)
+				return 0;
+			else
+				return DiffUtility.Compare(GenericParameters, ((IMethod)value).GenericParameters);
 		}
 		
 		public override bool Equals (object ob)
