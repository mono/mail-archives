Index: EditorBindings.glade
===================================================================
--- EditorBindings.glade	(révision 86058)
+++ EditorBindings.glade	(copie de travail)
@@ -113,6 +113,25 @@
 		  </child>
 
 		  <child>
+		    <widget class="GtkCheckButton" id="enableAutoCorrectionCheckBox">
+		      <property name="visible">True</property>
+		      <property name="can_focus">True</property>
+		      <property name="label" translatable="yes">Enable AutoCorrection</property>
+		      <property name="use_underline">True</property>
+		      <property name="relief">GTK_RELIEF_NORMAL</property>
+		      <property name="focus_on_click">True</property>
+		      <property name="active">False</property>
+		      <property name="inconsistent">False</property>
+		      <property name="draw_indicator">True</property>
+		    </widget>
+		    <packing>
+		      <property name="padding">0</property>
+		      <property name="expand">False</property>
+		      <property name="fill">False</property>
+		    </packing>
+		  </child>
+
+		  <child>
 		    <widget class="GtkCheckButton" id="enableFoldingCheckBox">
 		      <property name="visible">True</property>
 		      <property name="sensitive">False</property>
Index: MonoDevelop.SourceEditor.Gui/SourceEditorView.cs
===================================================================
--- MonoDevelop.SourceEditor.Gui/SourceEditorView.cs	(révision 86058)
+++ MonoDevelop.SourceEditor.Gui/SourceEditorView.cs	(copie de travail)
@@ -55,7 +55,141 @@
 		bool showTipScheduled;
 		int langTipX, langTipY;
 		uint tipTimeoutId;
+		
 
+		IParserDatabase db = IdeApp.ProjectOperations.ParserDatabase;
+		TextTag synErrorTag = new TextTag("synError");
+		bool resetTimerStarted = false;
+		uint resetTimerId;
+		ICompilationUnitBase lastCu = null;
+		int tiItem = -1;
+		
+		Dictionary<int, ErrorInfo> errors = new Dictionary<int,ErrorInfo>();
+		
+		void InitAutoCorrectionValues()
+		{
+			synErrorTag.Underline = Pango.Underline.Error;
+			buf.TagTable.Add(synErrorTag);
+			synErrorTag.Priority = buf.TagTable.Size - 1;
+			
+			db.ParseInformationChanged += OnParseInformationChanged;
+			
+			TextEditorProperties.Properties.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
+				if (e.Key != "EnableAutoCorrection")
+					return;
+				if (!(e.NewValue is bool) || !(e.OldValue is bool))
+					return;
+				
+				bool newValue = (bool)e.NewValue;
+				bool oldValue = (bool)e.OldValue;
+				
+				if (newValue && !oldValue) {
+					db.ParseInformationChanged += OnParseInformationChanged;
+				} else if (!newValue && oldValue) {
+					db.ParseInformationChanged -= OnParseInformationChanged;
+				}
+			};
+		}
+		
+		void CleanAutoCorrectionValues()
+		{
+			db.ParseInformationChanged -= OnParseInformationChanged;
+		}
+		
+		void OnParseInformationChanged(object sender, ParseInformationEventArgs e)
+		{
+			// To prevent some NullReferenceException (possibly when the user switch between editors)
+			if (this.ParentEditor == null || this.ParentEditor.DisplayBinding == null || e == null)
+				return;
+			if (this.ParentEditor.DisplayBinding.ContentName != e.FileName)
+				return;
+			
+			lastCu = e.ParseInformation.MostRecentCompilationUnit;
+			UpdateAutocorTimer();
+			ResetUnderlineChangement();
+		}
+		
+		void ParseCompilationUnit(ICompilationUnitBase cu)
+		{
+			// No new errors
+			if (!cu.ErrorsDuringCompile)
+				return;
+			
+			// We replace the error tags at the highest priority
+			synErrorTag.Priority = buf.TagTable.Size - 1;
+			// Else we underline the error
+			foreach (ErrorInfo info in cu.ErrorInformation)
+				UnderLineError(info);
+		}
+		
+		void UnderLineError(ErrorInfo info)
+		{
+			// Adjust the line to Gtk line representation
+			info.Line -= 1;
+			
+			// If the line is already underlined
+			if (errors.ContainsKey(info.Line))
+				return;
+			
+			TextIter startIter = buf.GetIterAtLine(info.Line);
+			while (startIter.Char == "\t" || startIter.Char == " ")
+				startIter.ForwardChar();
+			
+			TextIter endIter = buf.GetIterAtLine(info.Line);
+			endIter.ForwardToLineEnd();
+			
+			errors[info.Line] = info;
+			
+			UnderlineErrorAt(ref startIter, ref endIter);
+		}
+		
+		void UnderlineErrorAt(ref TextIter start, ref TextIter end)
+		{
+			buf.ApplyTag("synError", start, end);
+			Runtime.LoggingService.Info("UnderlineErrorAt applied at line : " + start.Line.ToString());
+		}
+		
+		void ResetUnderlineChangement()
+		{
+			if (errors.Count > 0) {
+				buf.RemoveTag("synError", buf.StartIter, buf.EndIter);
+				errors.Clear();
+			}
+		}
+		
+		string GetErrorInformationAt(TextIter iter)
+		{
+			ErrorInfo info;
+			if (errors.TryGetValue(iter.Line, out info))
+				return "<b> Parser Error : </b>" + info.Message;
+			else
+				return null;
+		}
+		
+		bool AutocorrResetMeth()
+		{
+			ResetUnderlineChangement();
+			ParseCompilationUnit(lastCu);
+			resetTimerStarted = false;
+			return false;
+		}
+
+		void UpdateAutocorTimer()
+		{
+			uint timeout = 900;
+			
+			if (resetTimerStarted) {
+				// Reset the timer
+				GLib.Source.Remove(resetTimerId);
+				resetTimerId = GLib.Timeout.Add(timeout, AutocorrResetMeth);
+			} else {
+				// Start the timer for the first time
+				resetTimerStarted = true;
+				resetTimerId = GLib.Timeout.Add(timeout, AutocorrResetMeth);
+			}
+		}
+		
+
 		public bool EnableCodeCompletion {
 			get { return codeCompleteEnabled; }
 			set { codeCompleteEnabled = value; }
@@ -106,6 +240,8 @@
 			buf.Changed += new EventHandler (BufferChanged);
 			LoadEditActions ();
 			this.Events = this.Events | EventMask.PointerMotionMask | EventMask.LeaveNotifyMask | EventMask.ExposureMask;
+			
+			InitAutoCorrectionValues();
 		}
 		
 		public new void Dispose ()
@@ -114,6 +250,8 @@
 			HideLanguageItemWindow ();
 			buf.MarkSet -= new MarkSetHandler (BufferMarkSet);
 			buf.Changed -= new EventHandler (BufferChanged);
+			CleanAutoCorrectionValues();
+			
 			base.Dispose ();
 		}
 		
@@ -160,6 +298,7 @@
 		{
 			ModifierType mask; // ignored
 			int xloc, yloc;
+			string errorInfo;
 
 			showTipScheduled = false;
 				
@@ -183,19 +322,35 @@
 				if (pctx == null)
 					return false;
 
-				languageItemWindow = new LanguageItemWindow (tipItem, pctx, GetAmbience ());
+				DoShowTooltip(new LanguageItemWindow (tipItem, pctx, GetAmbience (), 
+				                                        GetErrorInformationAt(ti)), langTipX, langTipY);
 				
-				int ox, oy;
-				this.GetWindow (TextWindowType.Text).GetOrigin (out ox, out oy);
-				int w = languageItemWindow.Child.SizeRequest().Width;
-				languageItemWindow.Move (langTipX + ox - (w/2), langTipY + oy + 20);
-				languageItemWindow.ShowAll ();
+				
+			} else if (!string.IsNullOrEmpty((errorInfo = GetErrorInformationAt(ti)))) {
+				// Error tooltip already shown
+				if (languageItemWindow != null && tiItem == ti.Line)
+					return false;
+				tiItem = ti.Line;
+				
+				HideLanguageItemWindow();
+				DoShowTooltip(new LanguageItemWindow(null, null, null, errorInfo), xloc, yloc);
 			} else
 				HideLanguageItemWindow ();
 			
 			return false;
 		}
 		
+		void DoShowTooltip(LanguageItemWindow liw, int xloc, int yloc)
+		{
+			languageItemWindow = liw;
+			
+			int ox, oy;
+			this.GetWindow (TextWindowType.Text).GetOrigin (out ox, out oy);
+			int w = languageItemWindow.Child.SizeRequest().Width;
+			languageItemWindow.Move (xloc + ox - (w/2), yloc + oy + 20);
+			languageItemWindow.ShowAll ();
+		}
+		
 
 		protected override bool OnLeaveNotifyEvent (Gdk.EventCrossing evnt)		
 		{
Index: MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs
===================================================================
--- MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs	(révision 86058)
+++ MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs	(copie de travail)
@@ -18,39 +18,69 @@
 	{
 		static ConversionFlags WindowConversionFlags = ConversionFlags.StandardConversionFlags | ConversionFlags.IncludePangoMarkup;
 		
-		public LanguageItemWindow (ILanguageItem item, IParserContext ctx, Ambience ambience) : base (WindowType.Popup)
+		static string paramStr = GettextCatalog.GetString ("Parameter");
+		static string localStr = GettextCatalog.GetString ("Local variable");
+		static string fieldStr = GettextCatalog.GetString ("Field");
+		static string propertyStr = GettextCatalog.GetString ("Property");
+		
+		public LanguageItemWindow (ILanguageItem item, IParserContext ctx, Ambience ambience,
+		                           string errorInformations) : base (WindowType.Popup)
 		{
 			Name = "gtk-tooltips";
 			
-			string s;
+			// Approximate value for usual case
+			StringBuilder s = new StringBuilder(150);
 			
-			if (item is IParameter) {
-				s = "<small><i>" + GettextCatalog.GetString ("Parameter") + "</i></small>\n";
-				s += ambience.Convert((IParameter)item, WindowConversionFlags);
+			if (item != null) {
+				if (item is IParameter) {
+					s.Append("<small><i>");
+					s.Append(paramStr);
+					s.Append("</i></small>\n");
+					s.Append(ambience.Convert((IParameter)item, WindowConversionFlags));
+				}
+				else if (item is LocalVariable) {
+					s.Append("<small><i>");
+					s.Append(localStr);
+					s.Append("</i></small>\n");
+					s.Append(ambience.Convert((LocalVariable)item, WindowConversionFlags));
+				}
+				else if (item is IField) {				
+					s.Append("<small><i>");
+					s.Append(fieldStr);
+					s.Append("</i></small>\n");
+					s.Append(ambience.Convert((IField)item, WindowConversionFlags));
+				}
+				else if (item is IProperty) {				
+					s.Append("<small><i>");
+					s.Append(propertyStr);
+					s.Append("</i></small>\n");
+					s.Append(ambience.Convert((IProperty)item, WindowConversionFlags));
+				}
+				else if (item is Namespace) {
+					s.Append("namespace <b>");
+					s.Append(item.Name);
+					s.Append("</b>");
+				} else
+					s.Append(ambience.Convert(item, WindowConversionFlags));
+				
+				string doc = GetDocumentation (item.Documentation).Trim ('\n');
+				if (!string.IsNullOrEmpty(doc)) {
+					s.Append("\n<small>");
+					s.Append(doc);
+					s.Append("</small>");
+				}
+			}			
+			
+			if (!string.IsNullOrEmpty(errorInformations)) {
+				if (s.Length != 0)
+					s.Append("\n\n");
+				s.Append("<small>");
+				s.Append(errorInformations);
+				s.Append("</small>");
 			}
-			else if (item is LocalVariable) {
-				s = "<small><i>" + GettextCatalog.GetString ("Local variable") + "</i></small>\n";
-				s += ambience.Convert((LocalVariable)item, WindowConversionFlags);
-			}
-			else if (item is IField) {				
-				s = "<small><i>" + GettextCatalog.GetString ("Field") + "</i></small>\n";
-				s += ambience.Convert((IField)item, WindowConversionFlags);
-			}
-			else if (item is IProperty) {				
-				s = "<small><i>" + GettextCatalog.GetString ("Property") + "</i></small>\n";
-				s += ambience.Convert((IProperty)item, WindowConversionFlags);
-			}
-			else if (item is Namespace)
-				s = "namespace " + "<b>" + item.Name + "</b>";
-			else
-				s = ambience.Convert(item, WindowConversionFlags);
-
-			string doc = GetDocumentation (item.Documentation).Trim ('\n');
-			if (doc.Length > 0)
-				s += "\n<small>" + doc + "</small>";
 			
 			Label lab = new Label ();
-			lab.Markup = s;
+			lab.Markup = s.ToString();
 			lab.Xalign = 0;
 			lab.Xpad = 3;
 			lab.Ypad = 3;
@@ -69,7 +99,7 @@
 		{
 			System.IO.StringReader reader = new System.IO.StringReader("<docroot>" + doc + "</docroot>");
 			XmlTextReader xml   = new XmlTextReader(reader);
-			StringBuilder ret   = new StringBuilder();
+			StringBuilder ret   = new StringBuilder(70);
 			
 			try {
 				xml.Read();
Index: MonoDevelop.SourceEditor.Gui.OptionPanels/GeneralTextEditorPanel.cs
===================================================================
--- MonoDevelop.SourceEditor.Gui.OptionPanels/GeneralTextEditorPanel.cs	(révision 86058)
+++ MonoDevelop.SourceEditor.Gui.OptionPanels/GeneralTextEditorPanel.cs	(copie de travail)
@@ -43,6 +43,7 @@
 		class GeneralTextEditorPanelWidget : GladeWidgetExtract 
 		{	
 			[Glade.Widget] CheckButton enableCodeCompletionCheckBox;
+			[Glade.Widget] CheckButton enableAutoCorrectionCheckBox;
 			[Glade.Widget] CheckButton enableFoldingCheckBox;
 			[Glade.Widget] CheckButton showClassMethodCheckBox;
 			[Glade.Widget] FontButton fontNameDisplayTextBox;
@@ -55,7 +56,7 @@
 			{
 				encodingBox.Destroy(); // this is a really dirty way of hiding encodingBox, but Hide() doesn't work
 				enableCodeCompletionCheckBox.Active = TextEditorProperties.EnableCodeCompletion;
-				
+				enableAutoCorrectionCheckBox.Active = TextEditorProperties.EnableAutoCorrection;
  				enableFoldingCheckBox.Active = TextEditorProperties.EnableFolding;
  				
  				showClassMethodCheckBox.Active = TextEditorProperties.ShowClassBrowser;
@@ -108,6 +109,7 @@
 			public void Store ()
 			{
 				TextEditorProperties.EnableCodeCompletion = enableCodeCompletionCheckBox.Active;
+				TextEditorProperties.EnableAutoCorrection = enableAutoCorrectionCheckBox.Active;
 				TextEditorProperties.EnableFolding = enableFoldingCheckBox.Active;
 				TextEditorProperties.ShowClassBrowser = showClassMethodCheckBox.Active;
 				