Index: Mono.TextEditor.Vi/ViMode.cs
===================================================================
--- Mono.TextEditor.Vi/ViMode.cs	(revision 138186)
+++ Mono.TextEditor.Vi/ViMode.cs	(working copy)
@@ -38,6 +38,7 @@
 	public class ViEditMode : EditMode
 	{
 		bool searchBackward;
+		bool isAtomicInProgress = false;
 		static string lastPattern;
 		static string lastReplacement;
 		State state;
@@ -45,6 +46,26 @@
 		StringBuilder commandBuffer = new StringBuilder ();
 		
 		public virtual string Status { get; protected set; }
+		/// <summary> Set by the first command to start an insert. </summary>
+		public virtual bool IsAtomicInProgress {
+			get
+			{
+				return isAtomicInProgress;
+			}
+			protected set
+			{
+				if (isAtomicInProgress == false && value == true)
+				{
+					isAtomicInProgress = true;
+					Document.BeginAtomicUndo();
+				}
+				if (isAtomicInProgress == true && value == false)
+				{
+					Document.EndAtomicUndo();
+					isAtomicInProgress = false;
+				}
+			}
+		}
 		
 		protected virtual string RunExCommand (string command)
 		{
@@ -142,6 +163,7 @@
 			data.ClearSelection ();
 			if (CaretMode.Block != data.Caret.Mode)
 				data.Caret.Mode = CaretMode.Block;
+			IsAtomicInProgress = false;
 		}
 		
 		void Reset (string status)
@@ -183,17 +205,21 @@
 						return;
 					
 					case 'A':
+						IsAtomicInProgress = true;
 						RunAction (CaretMoveActions.LineEnd);
 						goto case 'i';
 						
 					case 'I':
+						IsAtomicInProgress = true;
 						RunAction (CaretMoveActions.LineFirstNonWhitespace);
 						goto case 'i';
 					
 					case 'a':
+						IsAtomicInProgress = true;
 						RunAction (ViActions.Right);
 						goto case 'i';
 					case 'i':
+						IsAtomicInProgress = true;
 						Caret.Mode = CaretMode.Insert;
 						Status = "-- INSERT --";
 						state = State.Insert;
@@ -235,10 +261,12 @@
 						return;
 						
 					case 'O':
+						IsAtomicInProgress = true;
 						RunAction (ViActions.NewLineAbove);
 						goto case 'i';
 						
 					case 'o':
+						IsAtomicInProgress = true;
 						RunAction (ViActions.NewLineBelow);
 						goto case 'i';
 						
@@ -275,6 +303,7 @@
 						return;
 						
 					case 'C':
+						IsAtomicInProgress = true;
 						RunActions (SelectionActions.FromMoveAction (CaretMoveActions.LineEnd), ClipboardActions.Cut);
 						goto case 'i';
 						
@@ -302,16 +331,19 @@
 						PasteBefore (false);
 						return;
 					case 's':
+						IsAtomicInProgress = true;
 						if (!Data.IsSomethingSelected)
 							RunAction (SelectionActions.FromMoveAction (CaretMoveActions.Right));
 						RunAction (ClipboardActions.Cut);
 						goto case 'i';
 					case 'S':
+						IsAtomicInProgress = true;
 						if (!Data.IsSomethingSelected)
 							RunAction (SelectionActions.LineActionFromMoveAction (CaretMoveActions.LineEnd));
-						else Data.SetSelectLines (Data.MainSelection.Anchor.Line, Data.Caret.Line);
+						else
+							Data.SetSelectLines (Data.MainSelection.Anchor.Line, Data.Caret.Line);
 						RunAction (ClipboardActions.Cut);
-						goto case 'i';
+						goto case 'O';
 						
 					case 'g':
 						Status = "g";
@@ -416,6 +448,7 @@
 				return;
 				
 			case State.Change:
+				IsAtomicInProgress = true;
 				//copied from delete action
 				if (((modifier & (Gdk.ModifierType.ShiftMask | Gdk.ModifierType.ControlMask)) == 0 
 				     && key == Gdk.Key.c))
@@ -442,6 +475,7 @@
 				
 			case State.Insert:
 			case State.Replace:
+				IsAtomicInProgress = true;
 				action = GetInsertAction (key, modifier);
 				
 				
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 138186)
+++ ChangeLog	(working copy)
@@ -1,3 +1,11 @@
+2009-07-19  Adam Petaccia  <adam@tpetaccia.com>
+
+	* Mono.TextEditor.Vi/ViMode.cs: Make insert actions atomic.
+	  This makes undo behave as in Vim, and avoids taking the user through the
+	  individual steps we went through to produce a single action.
+	  
+	  Also, fix 'S' chaining to the wrong command.
+
 2009-07-17  Mike Kr√ºger  <mkrueger@novell.com>
 
 	* Mono.TextEditor/ISearchEngine.cs: Fixed search & replace bug
