Index: Mono.TextEditor.Vi/ViMode.cs
===================================================================
--- Mono.TextEditor.Vi/ViMode.cs	(revision 138186)
+++ Mono.TextEditor.Vi/ViMode.cs	(working copy)
@@ -46,6 +46,28 @@
 		
 		public virtual string Status { get; protected set; }
 		
+		protected virtual bool TryRunGoto (string command, out string status)
+		{
+			int line;
+			if (int.TryParse (command, out line)) {
+				if (line < 0 || line > Data.Document.LineCount) {
+					status = "Invalid line number.";
+					return false;
+				} else if (line == 0) {
+					RunAction (CaretMoveActions.ToDocumentStart);
+					status = "Jumped to beginning of document.";
+					return true;
+				}
+				
+				Data.Caret.Line = line - 1;
+				Editor.ScrollToCaret ();
+				status = string.Format ("Jumped to line {0}.", line);
+				return true;
+			}
+			status = null;
+			return false;
+		}
+		
 		protected virtual string RunExCommand (string command)
 		{
 			switch (command[0]) {
@@ -53,20 +75,10 @@
 				if (2 > command.Length)
 					break;
 					
-				int line;
-				if (int.TryParse (command.Substring (1), out line)) {
-					if (line < 0 || line > Data.Document.LineCount) {
-						return "Invalid line number.";
-					} else if (line == 0) {
-						RunAction (CaretMoveActions.ToDocumentStart);
-						return "Jumped to beginning of document.";
-					}
+				string status;
+				if (TryRunGoto(command.Substring(1), out status))
+					return status;
 					
-					Data.Caret.Line = line - 1;
-					Editor.ScrollToCaret ();
-					return string.Format ("Jumped to line {0}.", line);
-				}
-	
 				switch (command[1]) {
 				case 's':
 					if (2 == command.Length) {
@@ -345,6 +357,20 @@
 						Status = "z";
 						state = State.Fold;
 						return;
+					case '0':
+					case '1':
+					case '2':
+					case '3':
+					case '4':
+					case '5':
+					case '6':
+					case '7':
+					case '8':
+					case '9':
+						state = State.Number;
+						commandBuffer.Append((char)unicodeKey);
+						Status = commandBuffer.ToString();
+						return;
 					}
 					
 					
@@ -444,7 +470,6 @@
 			case State.Replace:
 				action = GetInsertAction (key, modifier);
 				
-				
 				if (action != null)
 					RunAction (action);
 				else if (unicodeKey != 0)
@@ -590,6 +615,32 @@
 				}
 				Reset ("Unknown command");
 				return;
+			case State.Number:
+				string newStatus;
+				if (((modifier & (Gdk.ModifierType.ControlMask)) == 0)) {
+					switch ((char)unicodeKey) {
+					case 'g':
+						if (TryRunGoto(commandBuffer.ToString(), out newStatus))
+						Reset ("");
+						Status = newStatus;
+						return;
+					case '0':
+					case '1':
+					case '2':
+					case '3':
+					case '4':
+					case '5':
+					case '6':
+					case '7':
+					case '8':
+					case '9':
+						commandBuffer.Append((char)unicodeKey);
+						Status = commandBuffer.ToString();
+						return;
+					}
+				}
+				Reset ("Unknown command");
+				return;
 			case State.Fold:
 				if (((modifier & (Gdk.ModifierType.ControlMask)) == 0)) {
 					switch ((char)unicodeKey) {
@@ -858,7 +909,8 @@
 			Indent,
 			Unindent,
 			G,
-			Fold
+			Fold,
+			Number
 		}
 	}
 }
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 138186)
+++ ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2009-07-17  Adam Petaccia <adam@tpetaccia.com>
+
+	* Mono.TextEditor.Vi/ViMode.cs: Add the ability to goto
+    by typing a number then 'g', as in Vim.
+
 2009-07-17  Mike Kr√ºger  <mkrueger@novell.com>
 
 	* Mono.TextEditor/ISearchEngine.cs: Fixed search & replace bug
