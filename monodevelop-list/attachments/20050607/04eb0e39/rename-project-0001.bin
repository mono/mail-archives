Index: Core/src/MonoDevelop.Base/Internal/Project/Project/Project.cs
===================================================================
--- Core/src/MonoDevelop.Base/Internal/Project/Project/Project.cs	(revision 2588)
+++ Core/src/MonoDevelop.Base/Internal/Project/Project/Project.cs	(working copy)
@@ -243,6 +243,26 @@
 			}
 		}
 
+		internal void RenameReferences(string oldName, string newName)
+		{
+			ArrayList toBeRemoved = new ArrayList();
+
+			foreach (ProjectReference refInfo in this.ProjectReferences) {
+				if (refInfo.ReferenceType == ReferenceType.Project) {
+					if (refInfo.Reference == oldName) {
+						toBeRemoved.Add(refInfo);
+					}
+				}
+			}
+			
+			foreach (ProjectReference pr in toBeRemoved) {
+				this.ProjectReferences.Remove(pr);
+				ProjectReference prNew = (ProjectReference)pr.Clone();
+				prNew.Reference = newName;
+				this.ProjectReferences.Add(prNew);
+			}			
+		}
+
 		public void CopyReferencesToOutputPath (bool force)
 		{
 			AbstractProjectConfiguration config = ActiveConfiguration as AbstractProjectConfiguration;
Index: Core/src/MonoDevelop.Base/Internal/Project/Combine/CombineEntry.cs
===================================================================
--- Core/src/MonoDevelop.Base/Internal/Project/Combine/CombineEntry.cs	(revision 2588)
+++ Core/src/MonoDevelop.Base/Internal/Project/Combine/CombineEntry.cs	(working copy)
@@ -186,6 +186,22 @@
 		
 		protected virtual void OnNameChanged (CombineEntryRenamedEventArgs e)
 		{
+			Combine topMostParentCombine = this.parentCombine;
+
+			if (topMostParentCombine != null) {
+				while (topMostParentCombine.ParentCombine != null) {
+					topMostParentCombine = topMostParentCombine.ParentCombine;
+				}
+				
+				foreach (Project project in topMostParentCombine.GetAllProjects()) {
+					if (project == this) {
+						continue;
+					}
+					
+					project.RenameReferences(e.OldName, e.NewName);
+				}
+			}
+			
 			if (NameChanged != null) {
 				NameChanged (this, e);
 			}