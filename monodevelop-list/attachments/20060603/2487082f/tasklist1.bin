Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/DefaultParserService.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/DefaultParserService.cs	(revision 61434)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/DefaultParserService.cs	(working copy)
@@ -1430,7 +1430,7 @@
 				return null;
 			}
 			
-			parser.LexerTags = new string[] { "HACK", "TODO", "UNDONE", "FIXME" };
+			parser.LexerTags = ((string)Runtime.Properties.GetProperty ("Monodevelop.TaskListTokens", "FIXME;TODO;HACK;UNDONE")).Split (';');
 			
 			ICompilationUnitBase parserOutput = null;
 			
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.OptionPanels/TasksOptionsPanel.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.OptionPanels/TasksOptionsPanel.cs	(revision 0)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.OptionPanels/TasksOptionsPanel.cs	(revision 0)
@@ -0,0 +1,209 @@
+//
+// TaskOptionsPanel.cs
+//
+// Author:
+//   David Makovský <yakeen@sannyas-on.net>
+//
+// Copyright (C) 2006 David Makovský
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.IO;
+using System.Text;
+using MonoDevelop.Core;
+using MonoDevelop.Core.Gui.Components;
+using MonoDevelop.Core.Gui.Dialogs;
+using MonoDevelop.Components;
+using Gtk;
+
+namespace MonoDevelop.Ide.Gui.OptionPanels
+{
+	
+	internal class TasksOptionsPanel : AbstractOptionPanel
+	{
+		TasksPanelWidget widget;
+		
+		class TasksPanelWidget :  GladeWidgetExtract
+		{	
+			string tokens;
+			ListStore tokensStore;
+
+			[Glade.Widget] TreeView tokensTreeView;
+			[Glade.Widget] Button buttonAdd;
+			[Glade.Widget] Button buttonRemove;
+			[Glade.Widget] Button buttonChange;
+			[Glade.Widget] Entry entryToken;
+			
+			public TasksPanelWidget ()
+				: base ("Base.glade", "TasksOptionsPanel")
+			{
+				tokensStore = new ListStore (typeof (string));
+				tokensTreeView.AppendColumn (String.Empty, new CellRendererText (), "text", 0);
+				tokensTreeView.Selection.Changed += new EventHandler (OnTokenSelectionChanged);
+				tokensTreeView.Model = tokensStore;
+				OnTokenSelectionChanged (null, null);
+				
+				buttonAdd.Clicked += new EventHandler (AddToken);
+				buttonChange.Clicked += new EventHandler (ChangeToken);
+				buttonRemove.Clicked += new EventHandler (RemoveToken);
+				entryToken.Changed += new EventHandler (Validate);
+			}
+			
+			void Validate (object sender, EventArgs args)
+			{
+				// validate input, if found not allowed chars replace them with '_'
+				string modified = String.Empty;
+				foreach (char ch in entryToken.Text)
+				{
+					if (!Char.IsLetterOrDigit (ch))
+					{
+						modified += '_';
+						continue;
+					}
+					modified += ch;
+				}
+				if (entryToken.Text != modified) entryToken.Text = modified;
+				
+				// look if we allready have this token 
+				bool found = false;
+				foreach (object[] row in tokensStore)
+				{
+					if (entryToken.Text == (string)row[0])
+					{
+						found = true;
+						break;
+					}
+				}
+				
+				buttonAdd.Sensitive = (entryToken.Text.Length < 1) || found ? false : true;
+				
+				string selectedToken = String.Empty;
+				TreeIter iter;
+				TreeModel model = (TreeModel)tokensStore;
+				if (tokensTreeView.Selection.GetSelected (out model, out iter)) {
+				   	GLib.Value value = new GLib.Value ();
+	    			tokensStore.GetValue (iter, 0, ref value);
+					selectedToken = (string)value;
+				}
+				
+				if (selectedToken != String.Empty)
+				{
+					buttonRemove.Sensitive = true;
+					buttonChange.Sensitive = (entryToken.Text.Length > 1) && (entryToken.Text != selectedToken) && !found ? true : false;
+				} else
+				{
+					buttonRemove.Sensitive = buttonChange.Sensitive = false;
+				}
+			}
+			
+			void OnTokenSelectionChanged (object sender, EventArgs args)
+			{
+				TreeSelection selection = sender as TreeSelection;
+				if (sender != null)
+				{
+					TreeIter iter;
+					TreeModel model = (TreeModel)tokensStore;
+					if (selection.GetSelected (out model, out iter)) {
+				    	GLib.Value value = new GLib.Value ();
+	    				tokensStore.GetValue (iter, 0, ref value);
+						entryToken.Text = (string)value;
+					} else
+					{
+						entryToken.Text = String.Empty;
+					}
+				} else
+				{
+					//initialization on begining
+					entryToken.Text = String.Empty;
+					buttonRemove.Sensitive = false;
+					buttonChange.Sensitive = false;
+					buttonAdd.Sensitive = false;
+				}
+			}
+			
+			void AddToken (object sender, EventArgs args)
+			{
+				TreeIter iter = tokensStore.AppendValues (entryToken.Text);
+				tokensTreeView.Selection.SelectIter (iter);
+				Validate (null, null);
+			}
+			
+			void ChangeToken (object sender, EventArgs args)
+			{
+				TreeIter iter;
+				TreeModel model = (TreeModel)tokensStore;
+				if (tokensTreeView.Selection.GetSelected (out model, out iter)) {
+				   	GLib.Value value = new GLib.Value (entryToken.Text);
+	    			tokensStore.SetValue (iter, 0, value);
+				}
+				Validate (null, null);
+			}
+			
+			void RemoveToken (object sender, EventArgs args)
+			{
+				TreeIter iter;
+				TreeModel model = (TreeModel)tokensStore;
+				if (tokensTreeView.Selection.GetSelected (out model, out iter)) {
+				   	tokensStore.Remove (ref iter);
+				}
+				Validate (null, null);
+			}
+			
+			public void Load ()
+			{
+				tokens = (string)Runtime.Properties.GetProperty ("Monodevelop.TaskListTokens", "FIXME;TODO;HACK;UNDONE");
+				foreach (string token in tokens.Split (';'))
+				{
+					tokensStore.AppendValues (token);
+				}
+			}
+			
+			public bool Store ()
+			{
+				StringBuilder sb = new StringBuilder ();
+				foreach (object[] row in tokensStore)
+				{
+					if (sb.Length > 0) sb.Append (';');
+					sb.Append ((string)row[0]);
+				}
+				string newTokens = sb.ToString ();
+				Runtime.Properties.SetProperty ("Monodevelop.TaskListTokens", newTokens);
+				return true;
+			}
+		}
+		
+		public override void LoadPanelContents ()
+		{
+			widget = new TasksPanelWidget ();
+			widget.Load ();
+			Add (widget);
+		}
+
+		public override bool StorePanelContents ()
+		{
+			bool result = true;
+			result = widget.Store ();
+			return result;
+		}
+	}
+	
+}
Index: Core/src/MonoDevelop.Ide/Base.glade
===================================================================
--- Core/src/MonoDevelop.Ide/Base.glade	(revision 61434)
+++ Core/src/MonoDevelop.Ide/Base.glade	(working copy)
@@ -18,6 +18,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_DIALOG</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
   <property name="has_separator">True</property>
 
   <child internal-child="vbox">
@@ -569,6 +570,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_DIALOG</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
   <property name="has_separator">True</property>
 
   <child internal-child="vbox">
@@ -842,6 +844,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
 
   <child>
     <widget class="GtkVBox" id="vbox8">
@@ -1158,6 +1161,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
 
   <child>
     <widget class="GtkVBox" id="vbox13">
@@ -1224,6 +1228,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
 
   <child>
     <widget class="GtkVBox" id="vbox17">
@@ -1565,6 +1570,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
 
   <child>
     <widget class="GtkVBox" id="vbox2">
@@ -1826,6 +1832,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
 
   <child>
     <widget class="GtkVBox" id="vbox66">
@@ -2023,6 +2030,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
 
   <child>
     <widget class="GtkVBox" id="vbox32">
@@ -2546,6 +2554,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_DIALOG</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
   <property name="has_separator">True</property>
 
   <child internal-child="vbox">
@@ -2864,6 +2873,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_DIALOG</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
   <property name="has_separator">False</property>
 
   <child internal-child="vbox">
@@ -2987,6 +2997,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_DIALOG</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
   <property name="has_separator">True</property>
 
   <child internal-child="vbox">
@@ -3496,6 +3507,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_DIALOG</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
   <property name="has_separator">True</property>
 
   <child internal-child="vbox">
@@ -3944,6 +3956,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_DIALOG</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
   <property name="has_separator">True</property>
 
   <child internal-child="vbox">
@@ -4540,6 +4553,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_DIALOG</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
   <property name="has_separator">True</property>
 
   <child internal-child="vbox">
@@ -4902,6 +4916,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_DIALOG</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
   <property name="has_separator">True</property>
 
   <child internal-child="vbox">
@@ -5151,6 +5166,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
 
   <child>
     <widget class="GtkVBox" id="vbox72">
@@ -5324,4 +5340,203 @@
   </child>
 </widget>
 
+<widget class="GtkWindow" id="TasksOptionsPanel">
+  <property name="visible">True</property>
+  <property name="title">TasksOptionsPanel</property>
+  <property name="type">GTK_WINDOW_TOPLEVEL</property>
+  <property name="window_position">GTK_WIN_POS_NONE</property>
+  <property name="modal">False</property>
+  <property name="resizable">True</property>
+  <property name="destroy_with_parent">False</property>
+  <property name="decorated">True</property>
+  <property name="skip_taskbar_hint">False</property>
+  <property name="skip_pager_hint">False</property>
+  <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
+  <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
+  <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
+
+  <child>
+    <widget class="GtkHBox" id="hbox48">
+      <property name="visible">True</property>
+      <property name="homogeneous">False</property>
+      <property name="spacing">4</property>
+
+      <child>
+	<widget class="GtkVBox" id="vbox73">
+	  <property name="visible">True</property>
+	  <property name="homogeneous">False</property>
+	  <property name="spacing">0</property>
+
+	  <child>
+	    <widget class="GtkLabel" id="labelTokens">
+	      <property name="visible">True</property>
+	      <property name="label" translatable="yes">_Tokens:</property>
+	      <property name="use_underline">True</property>
+	      <property name="use_markup">False</property>
+	      <property name="justify">GTK_JUSTIFY_LEFT</property>
+	      <property name="wrap">False</property>
+	      <property name="selectable">False</property>
+	      <property name="xalign">0</property>
+	      <property name="yalign">0.5</property>
+	      <property name="xpad">0</property>
+	      <property name="ypad">0</property>
+	      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+	      <property name="width_chars">-1</property>
+	      <property name="single_line_mode">False</property>
+	      <property name="angle">0</property>
+	    </widget>
+	    <packing>
+	      <property name="padding">0</property>
+	      <property name="expand">False</property>
+	      <property name="fill">False</property>
+	    </packing>
+	  </child>
+
+	  <child>
+	    <widget class="GtkScrolledWindow" id="scrolledwindow10">
+	      <property name="visible">True</property>
+	      <property name="can_focus">True</property>
+	      <property name="hscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+	      <property name="vscrollbar_policy">GTK_POLICY_AUTOMATIC</property>
+	      <property name="shadow_type">GTK_SHADOW_IN</property>
+	      <property name="window_placement">GTK_CORNER_TOP_LEFT</property>
+
+	      <child>
+		<widget class="GtkTreeView" id="tokensTreeView">
+		  <property name="visible">True</property>
+		  <property name="can_focus">True</property>
+		  <property name="headers_visible">False</property>
+		  <property name="rules_hint">False</property>
+		  <property name="reorderable">False</property>
+		  <property name="enable_search">True</property>
+		  <property name="fixed_height_mode">False</property>
+		  <property name="hover_selection">False</property>
+		  <property name="hover_expand">False</property>
+		</widget>
+	      </child>
+	    </widget>
+	    <packing>
+	      <property name="padding">0</property>
+	      <property name="expand">True</property>
+	      <property name="fill">True</property>
+	    </packing>
+	  </child>
+	</widget>
+	<packing>
+	  <property name="padding">0</property>
+	  <property name="expand">True</property>
+	  <property name="fill">True</property>
+	</packing>
+      </child>
+
+      <child>
+	<widget class="GtkVBox" id="vbox74">
+	  <property name="visible">True</property>
+	  <property name="homogeneous">False</property>
+	  <property name="spacing">4</property>
+
+	  <child>
+	    <widget class="GtkEntry" id="entryToken">
+	      <property name="visible">True</property>
+	      <property name="can_focus">True</property>
+	      <property name="editable">True</property>
+	      <property name="visibility">True</property>
+	      <property name="max_length">50</property>
+	      <property name="text" translatable="yes"></property>
+	      <property name="has_frame">True</property>
+	      <property name="invisible_char">*</property>
+	      <property name="activates_default">False</property>
+	    </widget>
+	    <packing>
+	      <property name="padding">0</property>
+	      <property name="expand">False</property>
+	      <property name="fill">False</property>
+	    </packing>
+	  </child>
+
+	  <child>
+	    <widget class="GtkHButtonBox" id="hbuttonbox2">
+	      <property name="visible">True</property>
+	      <property name="layout_style">GTK_BUTTONBOX_END</property>
+	      <property name="spacing">6</property>
+
+	      <child>
+		<widget class="GtkButton" id="buttonChange">
+		  <property name="visible">True</property>
+		  <property name="can_default">True</property>
+		  <property name="can_focus">True</property>
+		  <property name="label">gtk-edit</property>
+		  <property name="use_stock">True</property>
+		  <property name="relief">GTK_RELIEF_NORMAL</property>
+		  <property name="focus_on_click">True</property>
+		</widget>
+	      </child>
+
+	      <child>
+		<widget class="GtkButton" id="buttonRemove">
+		  <property name="visible">True</property>
+		  <property name="can_default">True</property>
+		  <property name="can_focus">True</property>
+		  <property name="label">gtk-remove</property>
+		  <property name="use_stock">True</property>
+		  <property name="relief">GTK_RELIEF_NORMAL</property>
+		  <property name="focus_on_click">True</property>
+		</widget>
+	      </child>
+
+	      <child>
+		<widget class="GtkButton" id="buttonAdd">
+		  <property name="visible">True</property>
+		  <property name="can_default">True</property>
+		  <property name="can_focus">True</property>
+		  <property name="label">gtk-add</property>
+		  <property name="use_stock">True</property>
+		  <property name="relief">GTK_RELIEF_NORMAL</property>
+		  <property name="focus_on_click">True</property>
+		</widget>
+	      </child>
+	    </widget>
+	    <packing>
+	      <property name="padding">0</property>
+	      <property name="expand">False</property>
+	      <property name="fill">True</property>
+	    </packing>
+	  </child>
+
+	  <child>
+	    <widget class="GtkLabel" id="label107">
+	      <property name="visible">True</property>
+	      <property name="label" translatable="yes">&lt;i&gt;&lt;b&gt;Note:&lt;/b&gt; Only Letters and Digits are allowed.&lt;/i&gt;</property>
+	      <property name="use_underline">False</property>
+	      <property name="use_markup">True</property>
+	      <property name="justify">GTK_JUSTIFY_CENTER</property>
+	      <property name="wrap">True</property>
+	      <property name="selectable">False</property>
+	      <property name="xalign">0.5</property>
+	      <property name="yalign">0.5</property>
+	      <property name="xpad">0</property>
+	      <property name="ypad">12</property>
+	      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+	      <property name="width_chars">-1</property>
+	      <property name="single_line_mode">False</property>
+	      <property name="angle">0</property>
+	    </widget>
+	    <packing>
+	      <property name="padding">0</property>
+	      <property name="expand">False</property>
+	      <property name="fill">False</property>
+	    </packing>
+	  </child>
+	</widget>
+	<packing>
+	  <property name="padding">0</property>
+	  <property name="expand">True</property>
+	  <property name="fill">True</property>
+	</packing>
+      </child>
+    </widget>
+  </child>
+</widget>
+
 </glade-interface>
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/OpenTaskView.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/OpenTaskView.cs	(revision 61434)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/OpenTaskView.cs	(working copy)
@@ -9,6 +9,7 @@
 using System.Drawing;
 using System.CodeDom.Compiler;
 using System.Collections;
+using System.Collections.Generic;
 using System.IO;
 using System.Diagnostics;
 
@@ -31,7 +32,6 @@
 		TreeModelFilter filter;
 		ToggleToolButton errorBtn, warnBtn, msgBtn;
 		Gtk.Tooltips tips = new Gtk.Tooltips ();
-		int errors = 0, warns = 0, msgs = 0;
 		Clipboard clipboard;
 		Hashtable tasks = new Hashtable ();
 		IPadWindow window;
@@ -40,8 +40,8 @@
 		void IPadContent.Initialize (IPadWindow window)
 		{
 			this.window = window;
-			window.Title = GettextCatalog.GetString ("Task List");
-			window.Icon = MonoDevelop.Core.Gui.Stock.TaskListIcon;
+			window.Title = GettextCatalog.GetString ("Error List");
+			window.Icon = MonoDevelop.Core.Gui.Stock.Error;
 		}
 		
 		public Gtk.Widget Control {
@@ -65,7 +65,7 @@
 
 		const int COL_TYPE = 0, COL_LINE = 1, COL_DESC = 2, COL_FILE = 3, COL_PATH = 4, COL_TASK = 5, COL_READ = 6, COL_MARKED = 7, COL_READ_WEIGHT = 8;
 		
-		public OpenTaskView()
+		public OpenTaskView ()
 		{
 			control = new VBox ();
 
@@ -120,7 +120,7 @@
 			store.DefaultSortFunc = sortFunc;
 			store.SetSortColumnId (COL_TASK, SortType.Ascending);
 			
-			TreeModelFilterVisibleFunc filterFunct = new TreeModelFilterVisibleFunc (FilterTaskTypes); 
+			TreeModelFilterVisibleFunc filterFunct = new TreeModelFilterVisibleFunc (FilterTaskTypes);
 			filter = new TreeModelFilter (store, null);
             filter.VisibleFunc = filterFunct;
 			
@@ -135,11 +135,10 @@
 			sw.ShadowType = ShadowType.In;
 			sw.Add (view);
 			
-			Services.TaskService.TasksChanged     += (EventHandler) Services.DispatchService.GuiDispatch (new EventHandler (ShowResults));
+			Services.TaskService.TasksCleared     += (EventHandler) Services.DispatchService.GuiDispatch (new EventHandler (ShowResults));
 			Services.TaskService.TaskAdded        += (TaskEventHandler) Services.DispatchService.GuiDispatch (new TaskEventHandler (TaskAdded));
 			IdeApp.ProjectOperations.EndBuild      += (ProjectCompileEventHandler) Services.DispatchService.GuiDispatch (new ProjectCompileEventHandler (SelectTaskView));
-			IdeApp.ProjectOperations.CombineOpened += (CombineEventHandler) Services.DispatchService.GuiDispatch (new CombineEventHandler (OnCombineOpen));
-			IdeApp.ProjectOperations.CombineClosed += (CombineEventHandler) Services.DispatchService.GuiDispatch (new CombineEventHandler (OnCombineClosed));
+			
 			view.RowActivated            += new RowActivatedHandler (OnRowActivated);
 						
 			control.Add (sw);
@@ -234,7 +233,7 @@
 		
 		void SelectTaskView (bool success)
 		{
-			if (Services.TaskService.Tasks.Count > 0) {
+			if (Services.TaskService.SomethingWentWrong) {
 				try {
 					if (window.Visible)
 						window.Activate ();
@@ -300,7 +299,6 @@
 		{
 			store.Clear ();
 			tasks.Clear ();
-			errors = warns = msgs = 0;
 			UpdateErrorsNum ();
 			UpdateWarningsNum ();
 			UpdateMessagesNum ();
@@ -308,25 +306,22 @@
 		
 		void TaskAdded (object sender, TaskEventArgs e)
 		{
-			AddTask (e.Task);
+			if (e.Task.TaskType != TaskType.Comment) 
+				AddTask (e.Task);
 		}
 		
 		public void AddTask (Task t)
 		{
 			if (tasks.Contains (t)) return;
 			
-			
 			switch (t.TaskType) {
 				case TaskType.Error:
-					errors++;
 					UpdateErrorsNum ();
 					break; 
 				case TaskType.Warning:
-					warns++;
 					UpdateWarningsNum ();	
 					break;
 				default:
-					msgs++;
 					UpdateMessagesNum ();
 					break;
 			}
@@ -380,17 +375,17 @@
 		
 		void UpdateErrorsNum () 
 		{
-			errorBtn.Label = string.Format(GettextCatalog.GetPluralString("{0} Error", "{0} Errors", errors), errors);
+			errorBtn.Label = string.Format(GettextCatalog.GetPluralString("{0} Error", "{0} Errors", IdeApp.Services.TaskService.ErrorsCount), IdeApp.Services.TaskService.ErrorsCount);
 		}
 		
 		void UpdateWarningsNum ()
 		{
-			warnBtn.Label = string.Format(GettextCatalog.GetPluralString("{0} Warning", "{0} Warnings", warns), warns); 
+			warnBtn.Label = string.Format(GettextCatalog.GetPluralString("{0} Warning", "{0} Warnings", IdeApp.Services.TaskService.WarningsCount), IdeApp.Services.TaskService.WarningsCount); 
 		}	
 		
 		void UpdateMessagesNum ()
 		{
-			msgBtn.Label = string.Format(GettextCatalog.GetPluralString("{0} Message", "{0} Messages", msgs), msgs);
+			msgBtn.Label = string.Format(GettextCatalog.GetPluralString("{0} Message", "{0} Messages", IdeApp.Services.TaskService.MessagesCount), IdeApp.Services.TaskService.MessagesCount);
 		}
 		
 		private void ItemToggled (object o, ToggledArgs args)
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/TaskListPad.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/TaskListPad.cs	(revision 0)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/TaskListPad.cs	(revision 0)
@@ -0,0 +1,333 @@
+//
+// TaskOptionsPanel.cs
+//
+// Author:
+//   David Makovský <yakeen@sannyas-on.net>
+//
+// Copyright (C) 2006 David Makovský
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Collections;
+using System.Collections.Generic;
+using System.IO;
+
+using MonoDevelop.Core;
+using MonoDevelop.Ide.Gui;
+using MonoDevelop.Ide.Tasks;
+
+using Gtk;
+
+namespace MonoDevelop.Ide.Gui.Pads
+{
+	
+	public class TaskListPad : IPadContent
+	{
+		IPadWindow window;
+		
+		Widget control;
+		ScrolledWindow sw;
+		
+		//Generated Tasks vars
+		Gtk.TreeView genTasksView;
+		ListStore genTasksStore;
+		Hashtable genTasks = new Hashtable ();
+		
+		//User Tasks vars
+		//...
+		
+		Clipboard clipboard;
+		
+		void IPadContent.Initialize (IPadWindow window)
+		{
+			this.window = window;
+			window.Title = GettextCatalog.GetString ("Task List");
+			window.Icon = MonoDevelop.Core.Gui.Stock.TaskListIcon;
+		}
+		
+		public Gtk.Widget Control {
+			get {
+				return control;
+			}
+		}
+
+		public string Id {
+			get { return "MonoDevelop.Ide.Gui.Pads.TaskListPad"; }
+		}
+		
+		public string DefaultPlacement {
+			get { return "Bottom"; }
+		}
+		
+		public void RedrawContent()
+		{
+			control.QueueDraw ();
+		}
+		
+		public void Dispose ()
+		{
+		}
+		
+		public TaskListPad ()
+		{
+//preparation to include UserTasks...
+//			VBox vbox = new VBox ();
+//			Toolbar toolbar = new Toolbar ();
+//			toolbar.IconSize = IconSize.SmallToolbar;
+//			control.PackStart (toolbar, false, false, 0);
+					
+			InitializeGeneratedView ();
+			
+			sw = new Gtk.ScrolledWindow ();
+			sw.ShadowType = ShadowType.In;
+			sw.Add (genTasksView);
+			
+			Services.TaskService.TasksCleared += (EventHandler) Services.DispatchService.GuiDispatch (new EventHandler (GeneratedTasksCleared));
+			Services.TaskService.TaskAdded += (TaskEventHandler) Services.DispatchService.GuiDispatch (new TaskEventHandler (GeneratedTaskAdded));
+			Services.TaskService.TaskRemoved += (TaskEventHandler) Services.DispatchService.GuiDispatch (new TaskEventHandler (GeneratedTaskRemoved));
+			
+			control = sw;
+//			control.Add (sw);
+//			toolbar.ToolbarStyle = ToolbarStyle.BothHoriz;
+			control.ShowAll ();
+		}
+
+#region Generated Tasks
+
+		enum GeneratedColumns
+		{
+			Line,
+			Description,
+			File,
+			Path,
+			Task,
+			Count
+		}
+		
+		void InitializeGeneratedView ()
+		{
+			genTasksStore = new Gtk.ListStore (
+				typeof (int),        // line
+				typeof (string),     // desc
+				typeof (string),     // file
+				typeof (string),     // path
+				typeof (Task));      // task
+
+			
+			genTasksView = new Gtk.TreeView (genTasksStore);
+			genTasksView.RulesHint = true;
+			genTasksView.PopupMenu += new PopupMenuHandler (OnGenPopupMenu);
+			genTasksView.ButtonPressEvent += new ButtonPressEventHandler (OnGenButtonPressed);
+			genTasksView.RowActivated += new RowActivatedHandler (OnRowActivated);
+			
+			TreeViewColumn col;
+			col = genTasksView.AppendColumn (GettextCatalog.GetString ("Line"), new CellRendererText (), "text", GeneratedColumns.Line);
+			col.Clickable = false;
+
+			col = genTasksView.AppendColumn (GettextCatalog.GetString ("Description"), new CellRendererText (), "text", GeneratedColumns.Description);
+			col.Clickable = true;
+			col.Resizable = true;
+			col.Clicked += new EventHandler (GeneratedDescsriptionResort);
+			
+			col = genTasksView.AppendColumn (GettextCatalog.GetString ("File"), new CellRendererText (), "text", GeneratedColumns.File);
+			col.Clickable = true;
+			col.Resizable = true;
+			col.Clicked += new EventHandler (GeneratedFileResort);
+			
+			col = genTasksView.AppendColumn (GettextCatalog.GetString ("Path"), new CellRendererText (), "text", GeneratedColumns.Path);
+			col.Clickable = true;
+			col.Resizable = true;
+			col.Clicked += new EventHandler (GeneratedPathResort);
+								
+		}
+		
+		void OnRowActivated (object o, RowActivatedArgs args)
+		{
+			Gtk.TreeIter iter;
+			if (genTasksStore.GetIter (out iter, args.Path)) {
+				((Task) genTasksStore.GetValue (iter, (int)GeneratedColumns.Task)).JumpToPosition ();
+			}
+		}
+
+		void GeneratedTasksCleared (object sender, EventArgs e)
+		{
+			genTasksStore.Clear ();
+			genTasks.Clear ();
+		}
+
+		void GeneratedTaskAdded (object sender, TaskEventArgs e)
+		{
+			if (e.Task.TaskType == TaskType.Comment)
+				AddGeneratedTask (e.Task);
+		}
+		
+		void AddGeneratedTask (Task t)
+		{
+			if (genTasks.Contains (t)) return;
+			
+			genTasks [t] = t;
+			
+			string tmpPath = t.FileName;
+			if (t.Project != null)
+				tmpPath = Runtime.FileUtilityService.AbsoluteToRelativePath (t.Project.BaseDirectory, t.FileName);
+			
+			string fileName = tmpPath;
+			string path     = tmpPath;
+			
+			try {
+				fileName = Path.GetFileName (tmpPath);
+			} catch (Exception) {}
+			
+			try {
+				path = Path.GetDirectoryName (tmpPath);
+			} catch (Exception) {}
+			
+			genTasksStore.AppendValues (t.Line, t.Description, fileName, path, t);
+		}
+		
+		void GeneratedTaskRemoved (object sender, TaskEventArgs e)
+		{
+			if (e.Task.TaskType == TaskType.Comment)
+				RemoveGeneratedTask (e.Task);
+		}
+		
+		void RemoveGeneratedTask (Task t)
+		{
+			if (!genTasks.Contains (t)) return;
+			
+			genTasks[t] = null;
+			
+			TreeIter iter = FindGeneratedTask (genTasksStore, t);
+			if (!iter.Equals (TreeIter.Zero))
+				genTasksStore.Remove (ref iter);
+		}
+		
+		static TreeIter FindGeneratedTask (ListStore store, Task task)
+		{
+			TreeIter iter;
+			store.GetIterFirst (out iter);
+			Task t = store.GetValue (iter, (int)GeneratedColumns.Task) as Task;
+			if (t != null && t == task) {
+				return iter;
+			}	
+			while (store.IterNext (ref iter)) {
+				t = store.GetValue (iter, (int)GeneratedColumns.Task) as Task;
+				if (t != null && t == task) {
+					return iter;
+				}
+			}
+			return TreeIter.Zero;
+		}
+		
+		[GLib.ConnectBefore]
+		void OnGenButtonPressed (object o, ButtonPressEventArgs args)
+		{
+			if (args.Event.Button == 3)
+				ShowGenPopup ();
+		}
+
+		void OnGenPopupMenu (object o, PopupMenuArgs args)
+		{
+			ShowGenPopup ();
+		}
+
+		void ShowGenPopup ()
+		{
+			Menu menu = new Menu ();
+			menu.AccelGroup = new AccelGroup ();
+			ImageMenuItem copy = new ImageMenuItem (Gtk.Stock.Copy, menu.AccelGroup);
+			copy.Activated += new EventHandler (OnGenTaskCopied);
+			menu.Append (copy);
+			menu.Popup (null, null, null, 3, Global.CurrentEventTime);
+			menu.ShowAll ();
+		}
+
+		void OnGenTaskCopied (object o, EventArgs args)
+		{
+			Task task;
+			TreeModel model;
+			TreeIter iter;
+
+			if (genTasksView.Selection.GetSelected (out model, out iter))
+			{
+				task = (Task) model.GetValue (iter, (int)GeneratedColumns.Task);
+			}
+			else return; //no one selected
+
+			clipboard = Clipboard.Get (Gdk.Atom.Intern ("CLIPBOARD", false));
+			clipboard.Text = task.ToString ();
+			clipboard = Clipboard.Get (Gdk.Atom.Intern ("PRIMARY", false));
+			clipboard.Text = task.ToString ();
+		}
+		
+		void GeneratedDescsriptionResort (object sender, EventArgs args)
+		{
+			TreeViewColumn col = genTasksView.Columns[(int)GeneratedColumns.Description];
+			foreach (TreeViewColumn c in genTasksView.Columns)
+			{
+				if (c != col) c.SortIndicator = false;
+			}
+			col.SortOrder = ReverseSortOrder (col);
+			col.SortIndicator = true;
+			genTasksStore.SetSortColumnId ((int)GeneratedColumns.Description, col.SortOrder);
+		}
+		
+		void GeneratedFileResort (object sender, EventArgs args)
+		{
+			TreeViewColumn col = genTasksView.Columns[(int)GeneratedColumns.File];
+			foreach (TreeViewColumn c in genTasksView.Columns)
+			{
+				if (c != col) c.SortIndicator = false;
+			}
+			col.SortOrder = ReverseSortOrder (col);
+			col.SortIndicator = true;
+			genTasksStore.SetSortColumnId ((int)GeneratedColumns.File, col.SortOrder);
+		}
+		
+		void GeneratedPathResort (object sender, EventArgs args)
+		{
+			TreeViewColumn col = genTasksView.Columns[(int)GeneratedColumns.Path];
+			foreach (TreeViewColumn c in genTasksView.Columns)
+			{
+				if (c != col) c.SortIndicator = false;
+			}
+			col.SortOrder = ReverseSortOrder (col);
+			col.SortIndicator = true;
+			genTasksStore.SetSortColumnId ((int)GeneratedColumns.Path, col.SortOrder);
+		}
+		
+#endregion
+
+		static SortType ReverseSortOrder (TreeViewColumn col)
+		{
+			if (col.SortIndicator) {
+				if (col.SortOrder == SortType.Ascending)
+					return SortType.Descending;
+				else
+					return SortType.Ascending;
+			} else
+			{
+				return SortType.Ascending;
+			}
+		}
+	}
+}
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.addin.xml
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.addin.xml	(revision 61434)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.addin.xml	(working copy)
@@ -603,6 +603,7 @@
 	<Extension path = "/SharpDevelop/Workbench/Pads" extension-nodes="Pad, SolutionPad" description="Pads shown in the workbench.">
 		<Pad id = "MonoDevelop.Ide.Gui.Pads.FileScout" class = "MonoDevelop.Ide.Gui.Pads.FileScout"/>
 		<Pad id = "MonoDevelop.Ide.Gui.Pads.OpenTaskView" class = "MonoDevelop.Ide.Gui.Pads.OpenTaskView"/>
+		<Pad id = "MonoDevelop.Ide.Gui.Pads.TaskListPad" class = "MonoDevelop.Ide.Gui.Pads.TaskListPad"/>
 		<Pad id = "MonoDevelop.Ide.Gui.Pads.HelpTree" class = "MonoDevelop.Ide.Gui.Pads.HelpTree"/>
 
 		<SolutionPad id = "MonoDevelop.Ide.Gui.Pads.ProjectPad" defaultPlacement = "Left" _label = "Solution" icon = "md-combine-icon" class = "MonoDevelop.Ide.Gui.Pads.ProjectPad.ProjectSolutionPad">
@@ -648,6 +649,7 @@
 			<ContextPad id = "MonoDevelop.Ide.Gui.Pads.FileScout" />
 			<ContextPad id = "MonoDevelop.Ide.Gui.Pads.HelpTree" />
 			<ContextPad id = "MonoDevelop.Ide.Gui.Pads.OpenTaskView"/>
+			<ContextPad id = "MonoDevelop.Ide.Gui.Pads.TaskListPad"/>
 		</WorkbenchContext>
 		<WorkbenchContext id = "Debug">
 			<ContextPad id = "MonoDevelop.Ide.Gui.Pads.ProjectPad"/>
@@ -655,6 +657,7 @@
 			<ContextPad id = "MonoDevelop.Ide.Gui.Pads.FileScout" defaultVisible = "False"/>
 			<ContextPad id = "MonoDevelop.Ide.Gui.Pads.HelpTree" defaultVisible = "False"/>
 			<ContextPad id = "MonoDevelop.Ide.Gui.Pads.OpenTaskView"/>
+			<ContextPad id = "MonoDevelop.Ide.Gui.Pads.TaskListPad" defaultVisible = "False"/>
 		</WorkbenchContext>
 	</Extension>
 	
@@ -677,6 +680,9 @@
 			<DialogPanel id = "AddIns"
 			             _label = "Add-ins"
 			             class = "MonoDevelop.Ide.Gui.OptionPanels.AddInsOptionsPanel"/>
+			<DialogPanel id = "TaskList"
+			             _label = "Task List"
+			             class = "MonoDevelop.Ide.Gui.OptionPanels.TasksOptionsPanel"/>
 		</DialogPanel>
 		<DialogPanel id    = "CodingOptions"
 		             _label = "Coding">
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.mdp
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.mdp	(revision 61434)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.mdp	(working copy)
@@ -241,7 +241,9 @@
     <File name="./MonoDevelop.Ide.Gui.Search/ISearchProgressMonitor.cs" subtype="Code" buildaction="Compile" />
     <File name="./MonoDevelop.Ide.Gui.Search/SearchProgressMonitor.cs" subtype="Code" buildaction="Compile" />
     <File name="./MonoDevelop.Ide.Gui.Pads/SearchResultPad.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Ide.Gui.OptionPanels/TasksOptionsPanel.cs" subtype="Code" buildaction="Compile" />
     <File name="./MonoDevelop.Ide.Gui/FileViewer.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Ide.Gui.Pads/TaskListPad.cs" subtype="Code" buildaction="Compile" />
   </Contents>
   <References>
     <ProjectReference type="Gac" localcopy="True" refto="System, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
Index: Core/src/MonoDevelop.Ide/Makefile.am
===================================================================
--- Core/src/MonoDevelop.Ide/Makefile.am	(revision 61434)
+++ Core/src/MonoDevelop.Ide/Makefile.am	(working copy)
@@ -118,6 +118,7 @@
 MonoDevelop.Ide.Gui.OptionPanels/LoadSavePanel.cs \
 MonoDevelop.Ide.Gui.OptionPanels/SelectStylePanel.cs \
 MonoDevelop.Ide.Gui.OptionPanels/AddInsOptionsPanel.cs \
+MonoDevelop.Ide.Gui.OptionPanels/TasksOptionsPanel.cs \
 MonoDevelop.Ide.Gui.Dialogs/AddWebReferenceDialog.cs \
 MonoDevelop.Ide.Gui.Dialogs/AssemblyReferencePanel.cs \
 MonoDevelop.Ide.Gui.Dialogs/GacReferencePanel.cs \
@@ -125,6 +126,7 @@
 MonoDevelop.Ide.Gui.Dialogs/SelectReferenceDialog.cs \
 MonoDevelop.Ide.Gui.Pads/DefaultMonitorPad.cs \
 MonoDevelop.Ide.Gui.Pads/OpenTaskView.cs \
+MonoDevelop.Ide.Gui.Pads/TaskListPad.cs \
 MonoDevelop.Ide.Gui.Pads.ClassPad/ClassData.cs \
 MonoDevelop.Ide.Gui.Pads.ClassPad/ClassNodeBuilder.cs \
 MonoDevelop.Ide.Gui.Pads.ClassPad/CombineNodeBuilder.cs \
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/ProjectOperations.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/ProjectOperations.cs	(revision 61434)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/ProjectOperations.cs	(working copy)
@@ -849,7 +849,7 @@
 
 		void BeginBuild ()
 		{
-			Services.TaskService.ClearTasks();
+			Services.TaskService.ClearExceptCommentTasks ();
 			OnStartBuild ();
 		}
 		
@@ -860,7 +860,7 @@
 			monitor.Log.WriteLine (String.Format (GettextCatalog.GetString ("---------------------- Done ----------------------")));
 			
 			foreach (CompilerError err in result.CompilerResults.Errors) {
-				Services.TaskService.AddTask (new Task(null, err));
+				Services.TaskService.Add (new Task (null, err));
 			}
 			
 			string errorString = GettextCatalog.GetPluralString("{0} error", "{0} errors", result.ErrorCount, result.ErrorCount);
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Tasks/Task.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Tasks/Task.cs	(revision 61434)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Tasks/Task.cs	(working copy)
@@ -17,8 +17,9 @@
 	public enum TaskType {
 		Error,
 		Warning,
-		Comment,
-		SearchResult
+		Message,
+		SearchResult,
+		Comment
 	}
 	
 	public class Task 
@@ -31,9 +32,9 @@
 		int      column;
 		
 
-		public override string ToString()
+		public override string ToString ()
 		{
-			return String.Format("[Task:File={0}, Line={1}, Column={2}, Type={3}, Description={4}",
+			return String.Format ("[Task:File={0}, Line={1}, Column={2}, Type={3}, Description={4}]",
 			                     fileName,
 			                     line,
 			                     column,
@@ -80,22 +81,37 @@
 			}
 		}
 		
-		public Task(string fileName, string description, int column, int line)
-		{
-			if (fileName != null)
-				type = TaskType.SearchResult;
-			else
-				type = TaskType.Comment;
-			this.fileName    = fileName;
-			this.description = description.Trim();
-			this.column      = column;
-			this.line        = line;
+//		public Task (string fileName, string description, int column, int line)
+//		{
+//			if (fileName != null)
+//				type = TaskType.SearchResult;
+//			else
+//				type = TaskType.Comment;
+//			this.fileName    = fileName;
+//			this.description = description.Trim();
+//			this.column      = column;
+//			this.line        = line;
+//		}
+		
+		public Task (string fileName, string description, int column, int line, TaskType type, Project project)
+			: this (fileName, description, column, line, type)
+		{
+			this.project = project;
 		}
 		
-		public Task(Project project, CompilerError error)
+		public Task (string fileName, string description, int column, int line, TaskType type)
+		{
+			this.type        = type;
+			this.fileName    = fileName;
+			this.description = description.Trim();
+			this.column      = column;
+			this.line        = line;
+		}
+		
+		public Task (Project project, CompilerError error)
 		{
 			this.project = project;
-			type        = error.IsWarning ? error.ErrorNumber == "COMMENT" ? TaskType.Comment : TaskType.Warning : TaskType.Error;
+			type        = error.IsWarning ? error.ErrorNumber == "COMMENT" ? TaskType.Message : TaskType.Warning : TaskType.Error;
 			column      = error.Column;
 			line        = error.Line;
 			description = error.ErrorText;
@@ -107,24 +123,8 @@
 		public void JumpToPosition()
 		{
 			if (fileName != null && fileName.Length > 0) {
-				IdeApp.Workbench.OpenDocument (fileName, Math.Max(1, line), Math.Max(1, column), true);
+				IdeApp.Workbench.OpenDocument (fileName, Math.Max (1, line), Math.Max (1, column), true);
 			}
-			
-//			CompilerResultListItem li = (CompilerResultListItem)OpenTaskView.FocusedItem;
-//			
-//			string filename   = li.FileName;
-//			
-//			if (filename == null || filename.Equals(""))
-//				return;
-//			
-//			if (File.Exists(filename)) {
-//				string directory  = Path.GetDirectoryName(filename);
-//				if (directory[directory.Length - 1] != Path.DirectorySeparatorChar) {
-//					directory += Path.DirectorySeparatorChar;
-//				}
-//				
-//				ContentWindow window = OpenWindow(filename);
-//			}
 		}
 	}
 }
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Tasks/TaskService.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Tasks/TaskService.cs	(revision 61434)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Tasks/TaskService.cs	(working copy)
@@ -6,92 +6,287 @@
 // </file>
 
 using System;
-using System.Collections;
+using System.IO;
+using System.Collections.Generic;
 
 using MonoDevelop.Core;
 using MonoDevelop.Core.Gui;
 using MonoDevelop.Ide.Gui.Pads;
 using MonoDevelop.Projects;
 using MonoDevelop.Ide.Gui;
+using MonoDevelop.Projects.Parser;
 
 namespace MonoDevelop.Ide.Tasks
 {
 	public class TaskService : GuiSyncAbstractService
 	{
-		ArrayList tasks  = new ArrayList();
-		string    compilerOutput = String.Empty;
 		
-		[FreeDispatch]
-		public ICollection Tasks {
-			get {
-				return tasks;
-			}
+		List<Task> tasks  = new List<Task> ();
+		Dictionary<TaskType, int> taskCount = new Dictionary<TaskType, int> ();
+		string compilerOutput = String.Empty;
+		Combine combine;
+		
+		public TaskService ()
+			: base ()
+		{
 		}
 		
-		int warnings = 0;
-		int errors   = 0;
-		int comments = 0;
-		
-		public int Warnings {
-			get {
-				return warnings;
+		public override void InitializeService ()
+		{
+			base.InitializeService ();
+			IdeApp.ProjectOperations.CombineOpened += new CombineEventHandler (ProjectServiceSolutionOpened);
+			IdeApp.ProjectOperations.CombineClosed += new CombineEventHandler (ProjectServiceSolutionClosed);
+		}
+
+		void ProjectServiceSolutionOpened (object sender, CombineEventArgs e)
+		{
+			IdeApp.ProjectOperations.ParserDatabase.ParseInformationChanged += new ParseInformationEventHandler (OnParseInformationChanged);
+			e.Combine.FileAddedToProject += new ProjectFileEventHandler (ProjectFileAdded); 
+			e.Combine.FileRenamedInProject += new ProjectFileRenamedEventHandler (ProjectFileRenamed);
+			e.Combine.FileRemovedFromProject += new ProjectFileEventHandler (ProjectFileRemoved);
+			
+			//load all tags
+			foreach (Project p in IdeApp.ProjectOperations.CurrentOpenCombine.GetAllProjects ()) {
+				IParserContext ctx = IdeApp.ProjectOperations.ParserDatabase.GetProjectParserContext (p);
+				foreach (ProjectFile file in p.ProjectFiles)
+				{
+					IParseInformation pInfo = ctx.GetParseInformation (file.Name);
+					if (pInfo != null && pInfo.ValidCompilationUnit is ICompilationUnit)
+					{
+						ICompilationUnit unit = (pInfo.ValidCompilationUnit as ICompilationUnit);
+						UpdateCommentTags (file.Name, unit.TagComments);
+					}
+				}
 			}
 		}
+				
+		void ProjectServiceSolutionClosed (object sender, CombineEventArgs e)
+		{
+			e.Combine.FileAddedToProject -= new ProjectFileEventHandler (ProjectFileAdded); 
+			e.Combine.FileRenamedInProject -= new ProjectFileRenamedEventHandler (ProjectFileRenamed);
+			e.Combine.FileRemovedFromProject -= new ProjectFileEventHandler (ProjectFileRemoved);
+
+			IdeApp.ProjectOperations.ParserDatabase.ParseInformationChanged -= new ParseInformationEventHandler (OnParseInformationChanged);
+			Clear ();
+		}
 		
-		public int Errors {
-			get {
-				return errors;
+		void ProjectFileRemoved (object sender, ProjectFileEventArgs e)
+		{
+			for (int i = 0; i < tasks.Count; ++i) {
+				Task curTask = tasks[i];
+				if (Path.GetFullPath (curTask.FileName) == Path.GetFullPath (e.ProjectFile.Name)) {
+					Remove (curTask);
+					--i;
+				}
 			}
 		}
 		
-		public int Comments {
-			get {
-				return comments;
+		void ProjectFileRenamed (object sender, ProjectFileRenamedEventArgs e)
+		{
+			for (int i = 0; i < tasks.Count; ++i) {
+				Task curTask = tasks[i];
+				if (Path.GetFullPath (curTask.FileName) == Path.GetFullPath (e.OldName)) {
+					Remove (curTask);
+					curTask.FileName = Path.GetFullPath (e.NewName);
+					Add (curTask);
+					--i;
+				}
 			}
 		}
 		
-		public bool SomethingWentWrong {
-			get {
-				return errors + warnings > 0;
+		void ProjectFileAdded (object sender, ProjectFileEventArgs e)
+		{
+			IParserContext ctx = IdeApp.ProjectOperations.ParserDatabase.GetProjectParserContext (e.Project);
+			IParseInformation pInfo = ctx.GetParseInformation (e.ProjectFile.Name);
+			if (pInfo != null && pInfo.ValidCompilationUnit is ICompilationUnit)
+			{
+				ICompilationUnit unit = (pInfo.ValidCompilationUnit as ICompilationUnit);
+				UpdateCommentTags (e.ProjectFile.Name, unit.TagComments);
 			}
 		}
+		
+		void OnParseInformationChanged (object sender, ParseInformationEventArgs e)
+		{
+			if (e.ParseInformation != null && e.ParseInformation.ValidCompilationUnit is ICompilationUnit)
+			{
+				ICompilationUnit unit = (e.ParseInformation.ValidCompilationUnit as ICompilationUnit);
+				UpdateCommentTags (e.FileName, unit.TagComments);
+			}
+		}
 		
+		public int TaskCount {
+			get {
+				return tasks.Count - GetCount (TaskType.Comment);
+			}
+		}
+		
+		public Task[] Tasks {
+			get {
+				List<Task> retTasks = new List<Task> ();
+				foreach (Task task in tasks) {
+					if (task.TaskType != TaskType.Comment) {
+						retTasks.Add (task);
+					}
+				}
+				return retTasks.ToArray ();
+			}
+		}
+		
+		public Task[] CommentTasks {
+			get {
+				List<Task> retTasks = new List<Task> ();
+				foreach (Task task in tasks) {
+					if (task.TaskType == TaskType.Comment) {
+						retTasks.Add (task);
+					}
+				}
+				return retTasks.ToArray ();
+			}
+		}	
+		
+		int GetCount (TaskType type)
+		{
+			if (!taskCount.ContainsKey (type)) {
+				return 0;
+			}
+			return taskCount[type];
+		}
+		
+		public int ErrorsCount {
+			get {
+				return GetCount (TaskType.Error);
+			}
+		}
+		
+		public int WarningsCount {
+			get {
+				return GetCount (TaskType.Warning);
+			}
+		}
+		
+		public int MessagesCount {
+			get {
+				return GetCount (TaskType.Message);
+			}
+		}
+		
+		public bool SomethingWentWrong {
+			get {
+				return GetCount (TaskType.Error) + GetCount (TaskType.Warning) > 0;
+			}
+		}
+		
+		public bool HasCriticalErrors (bool treatWarningsAsErrors)
+		{
+			if (treatWarningsAsErrors) {
+				return SomethingWentWrong;
+			} else {
+				return GetCount (TaskType.Error) > 0;
+			}
+		}
+		
 		public string CompilerOutput {
 			get {
 				return compilerOutput;
 			}
 			set {
 				compilerOutput = value;
-				OnCompilerOutputChanged(null);
+				OnCompilerOutputChanged (null);
 			}
 		}
 		
-		public void AddTask (Task task)
-		{
-			tasks.Add (task);
-			
-			switch (task.TaskType) {
-				case TaskType.Warning:
-					++warnings;
-					break;
-				case TaskType.Error:
-					++errors;
-					break;
-				default:
-					++comments;
-					break;
-			}
-			
-			OnTaskAdded (new TaskEventArgs (task));
+		public void Add (Task task)
+		{
+			tasks.Add (task);
+			if (!taskCount.ContainsKey (task.TaskType)) {
+				taskCount[task.TaskType] = 1;
+			} else {
+				taskCount[task.TaskType]++;
+			}
+			OnTaskAdded (new TaskEventArgs (task));
+		}
+		
+		public void AddRange (IEnumerable<Task> tasks)
+		{
+			foreach (Task task in tasks) {
+				Add (task);
+			}
 		}
 		
-		public void ClearTasks ()
-		{
-			tasks.Clear ();
-			warnings = errors = comments = 0;
-			OnTasksChanged (null);
+		public void Remove (Task task)
+		{
+			if (tasks.Contains (task)) {
+				tasks.Remove (task);
+				taskCount[task.TaskType]--;
+				OnTaskRemoved (new TaskEventArgs (task));
+			}
 		}
 		
+		public void Clear ()
+		{
+			taskCount.Clear ();
+			tasks.Clear ();
+			OnTasksCleared (EventArgs.Empty);
+		}
+		
+		public void ClearExceptCommentTasks ()
+		{
+			List<Task> commentTasks = new List<Task> (CommentTasks);
+			Clear ();
+			foreach (Task t in commentTasks) {
+				Add (t);
+			}
+		}
+
+		public void UpdateCommentTags (string fileName, TagCollection tagComments)
+		{
+			if (fileName == null || tagComments == null) {
+				return;
+			}
+			
+			List<Task> newTasks = new List<Task> ();
+			foreach (Tag tag in tagComments) {
+				newTasks.Add (new Task (fileName,
+				                      tag.Key + tag.CommentString,
+				                      tag.Region.BeginColumn - 1,
+				                      tag.Region.BeginLine,
+				                      TaskType.Comment));
+			}
+			List<Task> oldTasks = new List<Task>();
+			
+			foreach (Task task in CommentTasks) {
+				if (Path.GetFullPath (task.FileName) == Path.GetFullPath (fileName)) {
+					oldTasks.Add (task);
+				}
+			}
+			
+			for (int i = 0; i < newTasks.Count; ++i) {
+				for (int j = 0; j < oldTasks.Count; ++j) {
+					if (oldTasks[j] != null &&
+					    newTasks[i].Line        == oldTasks[j].Line &&
+					    newTasks[i].Column      == oldTasks[j].Column &&
+					    newTasks[i].Description == oldTasks[j].Description)
+					{
+						newTasks[i] = null;
+						oldTasks[j] = null;
+						break;
+					}
+				}
+			}
+			
+			foreach (Task task in newTasks) {
+				if (task != null) {
+					Add (task);
+				}
+			}
+			
+			foreach (Task task in oldTasks) {
+				if (task != null) {
+					Remove (task);
+				}
+			}
+		}
+
 		public void ShowTasks ()
 		{
 			Services.DispatchService.GuiDispatch (new MessageHandler (ShowTasksCallback));
@@ -102,21 +297,14 @@
 			Pad pad = IdeApp.Workbench.Pads [typeof(OpenTaskView)];
 			if (pad != null) pad.BringToFront ();
 		}
-		
-		protected virtual void OnCompilerOutputChanged(EventArgs e)
+	
+		protected virtual void OnCompilerOutputChanged (EventArgs e) 
 		{
 			if (CompilerOutputChanged != null) {
-				CompilerOutputChanged(this, e);
+				CompilerOutputChanged (this, e);
 			}
 		}
 		
-		protected virtual void OnTasksChanged(EventArgs e)
-		{
-			if (TasksChanged != null) {
-				TasksChanged(this, e);
-			}
-		}
-		
 		protected virtual void OnTaskAdded (TaskEventArgs e)
 		{
 			if (TaskAdded != null) {
@@ -124,52 +312,23 @@
 			}
 		}
 		
-		public override void InitializeService()
+		protected virtual void OnTaskRemoved (TaskEventArgs e)
 		{
-			base.InitializeService();
-			Services.FileService.FileRenamed += new FileEventHandler(CheckFileRename);
-			Services.FileService.FileRemoved += new FileEventHandler(CheckFileRemove);
-		}
-		
-		void CheckFileRemove(object sender, FileEventArgs e)
-		{
-			bool somethingChanged = false;
-			for (int i = 0; i < tasks.Count; ++i) {
-				Task curTask = (Task)tasks[i];
-				if (curTask.FileName == e.FileName) {
-					tasks.RemoveAt(i);
-					--i;
-					somethingChanged = true;
-				}
+			if (TaskRemoved != null) {
+				TaskRemoved (this, e);
 			}
-			
-			if (somethingChanged) {
-				NotifyTaskChange();
-			}
 		}
 		
-		void CheckFileRename(object sender, FileEventArgs e)
+		protected virtual void OnTasksCleared (EventArgs e)
 		{
-			bool somethingChanged = false;
-			foreach (Task curTask in tasks) {
-				if (curTask.FileName == e.SourceFile) {
-					curTask.FileName = e.TargetFile;
-					somethingChanged = true;
-				}
+			if (TasksCleared != null) {
+				TasksCleared (this, e);
 			}
-			
-			if (somethingChanged) {
-				NotifyTaskChange();
-			}
 		}
 		
-		public void NotifyTaskChange()
-		{
-			OnTasksChanged(null);
-		}
-		
 		public event TaskEventHandler TaskAdded;
-		public event EventHandler TasksChanged;
+		public event TaskEventHandler TaskRemoved;
+		public event EventHandler TasksCleared;
 		public event EventHandler CompilerOutputChanged;
 	}
 
Index: Core/src/Core.mds
===================================================================
--- Core/src/Core.mds	(revision 61434)
+++ Core/src/Core.mds	(working copy)
@@ -14,6 +14,7 @@
       <Entry build="True" name="ICSharpCode.SharpRefactory" configuration="Debug" />
       <Entry build="True" name="MonoDevelop" configuration="Debug" />
       <Entry build="True" name="MonoDevelop.Startup" configuration="Debug" />
+      <Entry build="True" name="NRefactory" configuration="" />
     </Configuration>
     <Configuration name="Release" ctype="CombineConfiguration">
       <Entry build="True" name="MonoDevelop.Core" configuration="Debug" />
@@ -29,6 +30,7 @@
       <Entry build="True" name="ICSharpCode.SharpRefactory" configuration="Debug" />
       <Entry build="True" name="MonoDevelop" configuration="Debug" />
       <Entry build="True" name="MonoDevelop.Startup" configuration="Debug" />
+      <Entry build="True" name="NRefactory" configuration="" />
     </Configuration>
   </Configurations>
   <StartMode startupentry="MonoDevelop.Core" single="True">
@@ -44,6 +46,7 @@
     <Execute type="None" entry="ICSharpCode.SharpRefactory" />
     <Execute type="None" entry="MonoDevelop" />
     <Execute type="None" entry="MonoDevelop.Startup" />
+    <Execute type="None" entry="NRefactory" />
   </StartMode>
   <Entries>
     <Entry filename="./MonoDevelop.Core/MonoDevelop.Core.mdp" />
@@ -57,5 +60,6 @@
     <Entry filename="./Tools/Tools.mds" />
     <Entry filename="./ICSharpCode.SharpRefactory/ICSharpCode.SharpRefactory.mdp" />
     <Entry filename="./MonoDevelop.Startup/MonoDevelop.Startup.mdp" />
+    <Entry filename="./NRefactory/NRefactory.mds" />
   </Entries>
 </Combine>
\ No newline at end of file
Index: Extras/CSharpBinding/Parser/Parser.cs
===================================================================
--- Extras/CSharpBinding/Parser/Parser.cs	(revision 61434)
+++ Extras/CSharpBinding/Parser/Parser.cs	(working copy)
@@ -71,24 +71,25 @@
 		
 		public ICompilationUnitBase Parse(string fileName)
 		{
-			ICSharpCode.NRefactory.Parser.IParser p = ICSharpCode.NRefactory.Parser.ParserFactory.CreateParser (SupportedLanguage.CSharp, new StreamReader(fileName));
-			p.Parse ();
-			
-			CSharpVisitor visitor = new CSharpVisitor();
-			visitor.Visit(p.CompilationUnit, null);
-			visitor.Cu.ErrorsDuringCompile = p.Errors.count > 0;
-			RetrieveRegions(visitor.Cu, p.Lexer.SpecialTracker);
-			foreach (IClass c in visitor.Cu.Classes)
-				c.Region.FileName = fileName;
-			return visitor.Cu;
+			using (ICSharpCode.NRefactory.Parser.IParser p = ICSharpCode.NRefactory.Parser.ParserFactory.CreateParser (SupportedLanguage.CSharp, new StreamReader(fileName))) {
+            	return Parse (p, fileName);
+            }
 		}
 		
 		public ICompilationUnitBase Parse(string fileName, string fileContent)
 		{
-			ICSharpCode.NRefactory.Parser.IParser p = ICSharpCode.NRefactory.Parser.ParserFactory.CreateParser (SupportedLanguage.CSharp, new StringReader(fileContent));
-			p.Parse ();
-			
-			CSharpVisitor visitor = new CSharpVisitor();
+			using (ICSharpCode.NRefactory.Parser.IParser p = ICSharpCode.NRefactory.Parser.ParserFactory.CreateParser (SupportedLanguage.CSharp, new StringReader(fileContent))) {
+            	return Parse (p, fileName);
+            }
+		}
+		
+		ICompilationUnit Parse (ICSharpCode.NRefactory.Parser.IParser p, string fileName)
+		{
+        	p.Lexer.SpecialCommentTags = lexerTags;
+            p.ParseMethodBodies = false;
+            p.Parse ();
+            
+            CSharpVisitor visitor = new CSharpVisitor();
 			visitor.Visit(p.CompilationUnit, null);
 			visitor.Cu.ErrorsDuringCompile = p.Errors.count > 0;
 			visitor.Cu.Tag = p.CompilationUnit;
@@ -97,8 +98,20 @@
 			RetrieveRegions (visitor.Cu, p.Lexer.SpecialTracker);
 			foreach (IClass c in visitor.Cu.Classes)
 				c.Region.FileName = fileName;
-			return visitor.Cu;
-		}
+			AddCommentTags (visitor.Cu, p.Lexer.TagComments);
+            return visitor.Cu;
+      	}
+
+      	void AddCommentTags(ICompilationUnit cu, System.Collections.Generic.List<ICSharpCode.NRefactory.Parser.TagComment> tagComments)
+      	{
+	    	foreach (ICSharpCode.NRefactory.Parser.TagComment tagComment in tagComments) {	  		
+    	  		DefaultRegion tagRegion = new DefaultRegion (tagComment.StartPosition.Y, tagComment.StartPosition.X, tagComment.EndPosition.Y, tagComment.EndPosition.X);
+                Tag tag = new Tag (tagComment.Tag, tagRegion);
+                tag.CommentString = tagComment.CommentText;
+                cu.TagComments.Add (tag);
+            }
+      	}
+
 		
 		public LanguageItemCollection CtrlSpace(IParserContext parserContext, int caretLine, int caretColumn, string fileName)
 		{
Index: Extras/CSharpBinding/Parser/SharpDevelopTree/CompilationUnit.cs
===================================================================
--- Extras/CSharpBinding/Parser/SharpDevelopTree/CompilationUnit.cs	(revision 61434)
+++ Extras/CSharpBinding/Parser/SharpDevelopTree/CompilationUnit.cs	(working copy)
@@ -7,6 +7,8 @@
 	public class CompilationUnit : AbstractCompilationUnit
 	{
 		
+		TagCollection tagComments = new TagCollection ();
+		
 		public override CommentCollection MiscComments {
 			get {
 				return null;
@@ -19,7 +21,7 @@
 		}
 		public override TagCollection TagComments {
 			get {
-				return null;
+				return tagComments;
 			}
 		}
 	}
