Index: main/src/addins/MonoDevelop.DesignerSupport/MonoDevelop.DesignerSupport.Projects/ProjectReferenceDescriptor.cs
===================================================================
--- main/src/addins/MonoDevelop.DesignerSupport/MonoDevelop.DesignerSupport.Projects/ProjectReferenceDescriptor.cs	(revision 106226)
+++ main/src/addins/MonoDevelop.DesignerSupport/MonoDevelop.DesignerSupport.Projects/ProjectReferenceDescriptor.cs	(working copy)
@@ -110,14 +110,22 @@
 		[Description ("Path to the assembly.")]
 		public string Path {
 			get {
-				string[] files = pref.GetReferencedFileNames (IdeApp.Workspace.ActiveConfiguration);
+				ReferencedFile[] files = pref.GetReferencedFiles (IdeApp.Workspace.ActiveConfiguration);
 				if (files.Length > 0)
-					return files [0];
+					return files [0].Path;
 				else
 					return string.Empty;
 			}
 		}
 		
+		[Category ("Reference")]
+		[DisplayName ("Use Absolute Path")]
+		[Description ("When refering to the assembly, use it's absolute path.")]
+		public bool UseAbsolutePath {
+			get { return pref.UseAbsolutePath; }
+			set { pref.UseAbsolutePath = value; }
+		}
+		
 		[Category ("Build")]
 		[DisplayName ("Local Copy")]
 		[Description ("Copy the referenced assembly to the output directory.")]
Index: main/src/addins/MonoDevelop.GtkCore/MonoDevelop.GtkCore.GuiBuilder/ToolboxProvider.cs
===================================================================
--- main/src/addins/MonoDevelop.GtkCore/MonoDevelop.GtkCore.GuiBuilder/ToolboxProvider.cs	(revision 106226)
+++ main/src/addins/MonoDevelop.GtkCore/MonoDevelop.GtkCore.GuiBuilder/ToolboxProvider.cs	(working copy)
@@ -35,8 +35,8 @@
 			string of = FileService.GetFullPath (view.Project.GetOutputFileName (IdeApp.Workspace.ActiveConfiguration));
 			refs [of] = of;
 			foreach (ProjectReference pr in ((DotNetProject)view.Project).References)
-				foreach (string f in pr.GetReferencedFileNames (IdeApp.Workspace.ActiveConfiguration)) {
-					refs[FileService.GetFullPath (f)] = f;
+				foreach (ReferencedFile f in pr.GetReferencedFiles (IdeApp.Workspace.ActiveConfiguration)) {
+					refs[FileService.GetFullPath (f.Path)] = f.Path;
 				}
 			
 			List<ItemToolboxNode> list = new List<ItemToolboxNode> ();
Index: main/src/addins/AspNetAddIn/MonoDevelop.AspNet/AspNetAppProject.cs
===================================================================
--- main/src/addins/AspNetAddIn/MonoDevelop.AspNet/AspNetAppProject.cs	(revision 106226)
+++ main/src/addins/AspNetAddIn/MonoDevelop.AspNet/AspNetAppProject.cs	(working copy)
@@ -160,8 +160,8 @@
 					files.Add (new DeployFile (this, pf.FilePath, pf.RelativePath, WebTargetDirectory.SiteRoot));
 			
 			//add referenced libraries
-			foreach (string refFile in GetReferenceDeployFiles (false, configuration))
-				files.Add (new DeployFile (this, refFile, Path.GetFileName (refFile), WebTargetDirectory.AspNetBin));
+			foreach (ReferencedFile refFile in GetReferenceDeployFiles (false, configuration))
+				files.Add (new DeployFile (this, refFile.Path, refFile.UseAbsolutePath, Path.GetFileName (refFile.Path), WebTargetDirectory.AspNetBin));
 			
 			//add the compiled output file
 			string outputFile = this.GetOutputFileName (configuration);
Index: main/src/addins/VBNetBinding/VBBindingCompilerServices.cs
===================================================================
--- main/src/addins/VBNetBinding/VBBindingCompilerServices.cs	(revision 106226)
+++ main/src/addins/VBNetBinding/VBBindingCompilerServices.cs	(working copy)
@@ -159,8 +159,8 @@
 			writer.WriteLine(GenerateOptions (configuration, compilerparameters, exe));
 			
 			foreach (ProjectReference lib in references) {
-				foreach (string fileName in lib.GetReferencedFileNames(configuration.Id))
-					writer.WriteLine(String.Concat("-r:", fileName));
+				foreach (ReferencedFile file in lib.GetReferencedFiles(configuration.Id))
+					writer.WriteLine(String.Concat("-r:", file.Path));
 			}
 			
 			// write source files and embedded resources
Index: main/src/addins/CSharpBinding/CSharpBindingCompilerManager.cs
===================================================================
--- main/src/addins/CSharpBinding/CSharpBindingCompilerManager.cs	(revision 106226)
+++ main/src/addins/CSharpBinding/CSharpBindingCompilerManager.cs	(working copy)
@@ -65,7 +65,7 @@
 					if ((lib.ReferenceType == ReferenceType.Project) &&
 					    (!(lib.OwnerProject.ParentSolution.FindProjectByName (lib.Reference) is DotNetProject)))
 						continue;
-					foreach (string fileName in lib.GetReferencedFileNames (configuration.Id)) {
+					foreach (ReferencedFile rf in lib.GetReferencedFiles (configuration.Id)) {
 						switch (lib.ReferenceType) {
 						case ReferenceType.Gac:
 							SystemPackage pkg = Runtime.SystemAssemblyService.GetPackageFromFullName (lib.Reference);
@@ -75,9 +75,9 @@
 								continue;
 							}
 							if (pkg.IsCorePackage) {
-								writer.WriteLine ("\"/r:" + Path.GetFileName (fileName) + "\"");
+								writer.WriteLine ("\"/r:" + Path.GetFileName (rf.Path) + "\"");
 							} else if (pkg.IsInternalPackage) {
-								writer.WriteLine ("\"/r:" + fileName + "\"");
+								writer.WriteLine ("\"/r:" + rf.Path + "\"");
 							} else if (!pkg_references.Contains (pkg.Name)) {
 								pkg_references.Add (pkg.Name);
 								writer.WriteLine ("\"-pkg:" + pkg.Name + "\"");
@@ -86,7 +86,7 @@
 								gacRoots.Add (pkg.GacRoot);
 							break;
 						default:
-							writer.WriteLine ("\"/r:" + fileName + "\"");
+							writer.WriteLine ("\"/r:" + rf.Path + "\"");
 							break;
 						}
 					}
Index: main/src/addins/MonoDevelop.Autotools/SimpleProjectMakefileHandler.cs
===================================================================
--- main/src/addins/MonoDevelop.Autotools/SimpleProjectMakefileHandler.cs	(revision 106226)
+++ main/src/addins/MonoDevelop.Autotools/SimpleProjectMakefileHandler.cs	(working copy)
@@ -145,7 +145,9 @@
 				foreach (ProjectFile projectFile in project.Files) 
 				{
 					pfpath = (PlatformID.Unix == Environment.OSVersion.Platform) ? projectFile.RelativePath : projectFile.RelativePath.Replace("\\","/");
-					pfpath = FileService.NormalizeRelativePath (pfpath);
+					pfpath = FileService.NormalizeRelativePath (pfpath).Trim();
+					if (pfpath == "") continue;
+
 					switch ( projectFile.BuildAction )
 					{
 						case BuildAction.Compile:
@@ -155,7 +157,6 @@
 							break;
 
 						case BuildAction.Nothing:
-							
 							extras.AppendFormat ( "\\\n\t{0} ", EscapeSpace (pfpath));
 							break;
 
@@ -370,10 +371,14 @@
 						if (configSection.DeployFileVars.ContainsKey (targetDeployVar)) {
 							//use the dfile from the config section
 							DeployFile dfile = configSection.DeployFileVars [targetDeployVar];
-							string fname = EscapeSpace (
-									FileService.AbsoluteToRelativePath (
-										Path.GetFullPath (project.BaseDirectory),
-										Path.GetFullPath (dfile.SourcePath)));
+							string fname;
+							if (!dfile.UseAbsolutePath)
+								fname = EscapeSpace (
+										FileService.AbsoluteToRelativePath (
+											Path.GetFullPath (project.BaseDirectory),
+											Path.GetFullPath (dfile.SourcePath)));
+							else
+								fname = EscapeSpace (dfile.SourcePath);
 
 							conf_vars.AppendFormat ("{0}_SOURCE={1}\n", targetDeployVar, fname);
 
@@ -507,11 +512,18 @@
 					dllRefWriter.WriteLine (" \\");
 					dllRefWriter.Write ("\t");
 
-					ctx.AddGlobalReferencedFile (EscapeSpace (FileService.AbsoluteToRelativePath (
-						Path.GetFullPath (ctx.BaseDirectory), assemblyPath)));
-					dllRefWriter.Write (EscapeSpace (FileService.AbsoluteToRelativePath (
-						project.BaseDirectory, assemblyPath)));
-
+					if (!reference.UseAbsolutePath)
+					{
+						ctx.AddGlobalReferencedFile (EscapeSpace (FileService.AbsoluteToRelativePath (
+							Path.GetFullPath (ctx.BaseDirectory), assemblyPath)));
+						dllRefWriter.Write (EscapeSpace (FileService.AbsoluteToRelativePath (
+							project.BaseDirectory, assemblyPath)));
+					}
+					else
+					{
+						ctx.AddGlobalReferencedFile (EscapeSpace (assemblyPath));
+						dllRefWriter.Write (EscapeSpace (assemblyPath));
+					}
 				} 
 				else if (reference.ReferenceType == ReferenceType.Project)
 					continue; // handled per-config
@@ -601,7 +613,7 @@
 				// The emit-deploy-target macro copies the deployable file to the output directory.
 				// This is not needed if the file is already there (e.g. for an .mdb file)
 				if (Path.GetFullPath (dfile.SourcePath) != Path.GetFullPath (Path.Combine (data.Configuration.OutputDirectory, dfile.RelativeTargetPath)))
-				    deployFileCopyTargets.AppendFormat ("$(eval $(call emit-deploy-target,{0}))\n", targetDeployVar);
+					deployFileCopyTargets.AppendFormat ("$(eval $(call emit-deploy-target,{0}))\n", targetDeployVar);
 			}
 
 			switch (dfile.TargetDirectoryID) {
Index: main/src/addins/MonoDevelop.Autotools/SolutionDeployer.cs
===================================================================
--- main/src/addins/MonoDevelop.Autotools/SolutionDeployer.cs	(revision 106226)
+++ main/src/addins/MonoDevelop.Autotools/SolutionDeployer.cs	(working copy)
@@ -224,7 +224,8 @@
 				sb.Append ("expansions.m4");
 
 			foreach ( string file in context.GetGlobalReferencedFiles() )
-				sb.Append (' ').Append (file);
+				if ( !Path.IsPathRooted (file))
+					sb.Append (' ').Append (file);
 			
 			string vals = sb.ToString ();
 
@@ -313,7 +314,11 @@
 			// build list of *.in files
 			StringBuilder configFiles = new StringBuilder();
 			string tmpmf = null;
-			foreach (string makefile in context.GetAutoConfFiles () ) 
+			List<string> makefiles = new List<string>();
+			foreach (string makefile in context.GetAutoConfFiles () )
+				makefiles.Add (makefile);
+			makefiles.Sort();
+			foreach (string makefile in makefiles ) 
 			{
 				tmpmf = FileService.AbsoluteToRelativePath ( solution_dir, makefile );
 				if (PlatformID.Unix != Environment.OSVersion.Platform)
@@ -327,18 +332,20 @@
 			// build list of pkgconfig checks we must make
 			StringWriter packageChecks = new StringWriter();
 			packageChecks.WriteLine ("dnl package checks, common for all configs");
-			Set<SystemPackage> commonPackages = context.GetCommonRequiredPackages ();
+			List<SystemPackage> commonPackages = new List<SystemPackage>(context.GetCommonRequiredPackages ());
+			commonPackages.Sort(delegate (SystemPackage a, SystemPackage b) { return a.Name.CompareTo(b.Name); });
 			foreach (SystemPackage pkg in commonPackages)
 				packageChecks.WriteLine("PKG_CHECK_MODULES([{0}], [{1}])", AutotoolsContext.GetPkgConfigVariable (pkg.Name), pkg.Name);
 
 			packageChecks.WriteLine ("\ndnl package checks, per config");
 			foreach (SolutionConfiguration config in solution.Configurations) {
-				Set<SystemPackage> pkgs = context.GetRequiredPackages (config.Id, true);
+				List<SystemPackage> pkgs = new List<SystemPackage>(context.GetRequiredPackages (config.Id, true));
 				if (pkgs == null || pkgs.Count == 0)
 					continue;
+				pkgs.Sort(delegate (SystemPackage a, SystemPackage b) { return a.Name.CompareTo(b.Name); });
 
 				packageChecks.WriteLine (@"if test ""x$enable_{0}"" = ""xyes""; then",
-				                         context.EscapeAndUpperConfigName (config.Id).ToLower());
+										 context.EscapeAndUpperConfigName (config.Id).ToLower());
 
 				foreach (SystemPackage pkg in pkgs)
 					packageChecks.WriteLine("\tPKG_CHECK_MODULES([{0}], [{1}])", AutotoolsContext.GetPkgConfigVariable (pkg.Name), pkg.Name);
Index: main/src/addins/MonoDevelop.Autotools/templates/configure.ac.template
===================================================================
--- main/src/addins/MonoDevelop.Autotools/templates/configure.ac.template	(revision 106226)
+++ main/src/addins/MonoDevelop.Autotools/templates/configure.ac.template	(working copy)
@@ -2,7 +2,7 @@
 dnl Process this file with autoconf to produce a configure script.
 AC_PREREQ([2.54])
 AC_INIT([%%SOLUTION_NAME%%], [%%VERSION%%])
-AM_INIT_AUTOMAKE([foreign])
+AM_INIT_AUTOMAKE([foreign tar-ustar])
 
 dnl pkg-config
 AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
Index: main/src/addins/MonoDevelop.Autotools/MakefileData.cs
===================================================================
--- main/src/addins/MonoDevelop.Autotools/MakefileData.cs	(revision 106226)
+++ main/src/addins/MonoDevelop.Autotools/MakefileData.cs	(working copy)
@@ -710,8 +710,8 @@
 					List<ProjectReference> toRemove = new List<ProjectReference> ();
 					foreach (ProjectReference pref in dotnetProject.References) {
 						if (pref.ReferenceType == ReferenceType.Gac) {
-							string [] files = pref.GetReferencedFileNames (ProjectService.DefaultConfiguration);
-							if (files == null)
+							ReferencedFile [] files = pref.GetReferencedFiles (ProjectService.DefaultConfiguration);
+							if (files == null || files.Length == 0)
 								continue;
 
 							if (pref.ReferenceType == ReferenceType.Gac) {
@@ -722,7 +722,7 @@
 									requiredPackageVersions [pkg.Name] = pkg.Version;
 							}
 							// this should help normalize paths like /foo//bar/../
-							string fullpath = Path.GetFullPath (files [0]);
+							string fullpath = Path.GetFullPath (files [0].Path);
 							if (existingGacRefs.ContainsKey (fullpath))
 								toRemove.Add (pref);
 							else
@@ -1186,9 +1186,9 @@
 							pr.ReferenceType != ReferenceType.Project)
 							continue;
 						
-						string [] files = pr.GetReferencedFileNames (defConfig);
+						ReferencedFile [] files = pr.GetReferencedFiles (defConfig);
 						if (files.Length > 0)
-							asmProjectRefs [files [0]] = pr;
+							asmProjectRefs [files [0].Path] = pr;
 					}
 
 					List<string> toRemove = new List<string> ();
@@ -1509,7 +1509,7 @@
 			}
 
 			if (pkg == null)
-				return AsmRefToString (pr.GetReferencedFileNames (ProjectService.DefaultConfiguration) [0], refVar, false);
+				return AsmRefToString (pr.GetReferencedFiles (ProjectService.DefaultConfiguration) [0].Path, refVar, false);
 
 			// Reference is from a package
 
@@ -1571,12 +1571,12 @@
 
 		string ProjectRefToString (ProjectReference pr, MakefileVar refVar)
 		{
-			string [] tmp = pr.GetReferencedFileNames (ProjectService.DefaultConfiguration);
+			ReferencedFile [] tmp = pr.GetReferencedFiles (ProjectService.DefaultConfiguration);
 			if (tmp == null || tmp.Length == 0)
 				//Reference not found, ignoring
 				return null;
 
-			return AsmRefToString (tmp [0], refVar, true);
+			return AsmRefToString (tmp [0].Path, refVar, true);
 		}
 
 		static string EscapeString (string str)
Index: main/src/addins/Deployment/MonoDevelop.Deployment/MonoDevelop.Deployment/DefaultDeployServiceExtension.cs
===================================================================
--- main/src/addins/Deployment/MonoDevelop.Deployment/MonoDevelop.Deployment/DefaultDeployServiceExtension.cs	(revision 106226)
+++ main/src/addins/Deployment/MonoDevelop.Deployment/MonoDevelop.Deployment/DefaultDeployServiceExtension.cs	(working copy)
@@ -49,8 +49,8 @@
 					deployFiles.Add (new DeployFile (project, mdbFile, Path.GetFileName (mdbFile), TargetDirectory.ProgramFiles));
 				}
 				// Collect referenced assemblies
-				foreach (string refFile in netProject.GetReferenceDeployFiles (false, solutionConfiguration)) {
-					deployFiles.Add (new DeployFile (project, refFile, Path.GetFileName (refFile), TargetDirectory.ProgramFiles));
+				foreach (ReferencedFile refFile in netProject.GetReferenceDeployFiles (false, solutionConfiguration)) {
+					deployFiles.Add (new DeployFile (project, refFile.Path, refFile.UseAbsolutePath, Path.GetFileName (refFile.Path), TargetDirectory.ProgramFiles));
 				}
 			}
 			
Index: main/src/addins/Deployment/MonoDevelop.Deployment/MonoDevelop.Deployment/DeployFile.cs
===================================================================
--- main/src/addins/Deployment/MonoDevelop.Deployment/MonoDevelop.Deployment/DeployFile.cs	(revision 106226)
+++ main/src/addins/Deployment/MonoDevelop.Deployment/MonoDevelop.Deployment/DeployFile.cs	(working copy)
@@ -40,6 +40,7 @@
 	public class DeployFile
 	{
 		string sourcePath;
+		bool useAbsolutePath;
 		string relativeTargetPath;
 		string targetDirectoryID;
 		DeployContext deployContext;
@@ -53,6 +54,7 @@
 			DeployProperties props = DeployService.GetDeployProperties (pfile);
 			this.targetDirectoryID = props.TargetDirectory;
 			this.sourcePath = pfile.FilePath;
+			this.useAbsolutePath = false;
 			this.relativeTargetPath = props.RelativeDeployPath;
 			this.attributes = props.FileAttributes;
 			if (props.HasPathReferences)
@@ -66,9 +68,18 @@
 		}
 		
 		public DeployFile (SolutionItem sourceSolutionItem, string sourcePath, string relativeTargetPath, string targetDirectoryID)
+		 : this (sourceSolutionItem, sourcePath, false, relativeTargetPath, targetDirectoryID)
 		{
+		}
+		
+		public DeployFile (SolutionItem sourceSolutionItem, string sourcePath, bool useAbsolutePath, string relativeTargetPath, string targetDirectoryID)
+		{
+            if (!Path.IsPathRooted(sourcePath))
+                throw new ArgumentException("sourcePath must be absolute.");
+
 			this.targetDirectoryID = targetDirectoryID;
 			this.sourcePath = sourcePath;
+			this.useAbsolutePath = useAbsolutePath;
 			this.relativeTargetPath = relativeTargetPath;
 			this.sourceSolutionItem = sourceSolutionItem;
 		}
@@ -97,6 +108,11 @@
 			get { return sourcePath; }
 			set { sourcePath = value; }
 		}
+
+		public bool UseAbsolutePath {
+			get { return useAbsolutePath; }
+			set { useAbsolutePath = value; }
+			}
 		
 		public string RelativeTargetPath {
 			get { return relativeTargetPath; }
Index: main/src/core/MonoDevelop.Projects/MonoDevelop.Projects/ProjectReference.cs
===================================================================
--- main/src/core/MonoDevelop.Projects/MonoDevelop.Projects/ProjectReference.cs	(revision 106226)
+++ main/src/core/MonoDevelop.Projects/MonoDevelop.Projects/ProjectReference.cs	(working copy)
@@ -62,6 +62,7 @@
 		string loadedReference;
 		
 		bool localCopy = true;
+        bool useAbsolutePath = false;
 		
 		public ProjectReference ()
 		{
@@ -106,7 +107,9 @@
 		
 		public string Reference {
 			get {
-				return reference;
+				if (reference != null && referenceType == ReferenceType.Assembly && !Path.IsPathRooted (reference))
+					throw new InvalidOperationException("Reference must be absolute.");
+ 				return reference;
 			}
 			internal set {
 				reference = value;
@@ -132,6 +135,24 @@
 			}
 		}
 
+		public bool UseAbsolutePath {
+			get {
+				switch (ReferenceType) {
+					case ReferenceType.Assembly:
+						return useAbsolutePath;
+					case ReferenceType.Gac:
+						return true;
+					case ReferenceType.Project:
+						return false;
+					default:
+						throw new NotImplementedException("unknown reference type : " + ReferenceType);
+				}
+			}
+			set {
+				useAbsolutePath = value;
+			}
+		}
+
 		internal string LoadedReference {
 			get {
 				return loadedReference;
@@ -142,23 +163,23 @@
 		}
 		
 		/// <summary>
-		/// Returns the file name to an assembly, regardless of what 
+		/// Returns the reference path to an assembly, regardless of what 
 		/// type the assembly is.
 		/// </summary>
-		string GetReferencedFileName (string configuration)
+		ReferencedFile GetReferencedFile (string configuration)
 		{
 			switch (ReferenceType) {
 				case ReferenceType.Assembly:
-					return reference;
+					return new ReferencedFile (Reference, UseAbsolutePath);
 				
 				case ReferenceType.Gac:
 					string file = Runtime.SystemAssemblyService.GetAssemblyLocation (Reference);
-					return file == null ? reference : file;
+					return new ReferencedFile (file ?? Reference, true);
 				case ReferenceType.Project:
 					if (ownerProject != null) {
 						if (ownerProject.ParentSolution != null) {
-							Project p = ownerProject.ParentSolution.FindProjectByName (reference);
-							if (p != null) return p.GetOutputFileName (configuration);
+							Project p = ownerProject.ParentSolution.FindProjectByName (Reference);
+							if (p != null) return new ReferencedFile (p.GetOutputFileName (configuration), false);
 						}
 					}
 					return null;
@@ -168,29 +189,29 @@
 			}
 		}
 		
-		public virtual string[] GetReferencedFileNames (string configuration)
+		public virtual ReferencedFile[] GetReferencedFiles (string configuration)
 		{
-			string s = GetReferencedFileName (configuration);
-			if (s != null)
-				return new string[] { s };
+			ReferencedFile r = GetReferencedFile (configuration);
+			if (r != null)
+				return new ReferencedFile[] { r };
 			else
-				return new string [0];
+				return new ReferencedFile[0];
 		}
 		
 		void UpdateGacReference ()
 		{
 			if (referenceType == ReferenceType.Gac) {
-				string cref = Runtime.SystemAssemblyService.FindInstalledAssembly (reference);
+				string cref = Runtime.SystemAssemblyService.FindInstalledAssembly (Reference);
 				if (ownerProject != null) {
 					if (cref == null)
-						cref = reference;
+						cref = Reference;
 					cref = Runtime.SystemAssemblyService.GetAssemblyNameForVersion (cref, ownerProject.ClrVersion);
 				}
-				if (cref != null && cref != reference) {
+				if (cref != null && cref != Reference) {
 					if (loadedReference == null) {
-						loadedReference = reference;
+						loadedReference = Reference;
 					}
-					reference = cref;
+					Reference = cref;
 				}
 			}
 		}
@@ -205,7 +226,7 @@
 			ProjectReference oref = other as ProjectReference;
 			if (oref == null) return false;
 			
-			return reference == oref.reference && referenceType == oref.referenceType;
+			return Reference == oref.Reference && referenceType == oref.referenceType;
 		}
 		
 		public override int GetHashCode ()
Index: main/src/core/MonoDevelop.Projects/MonoDevelop.Projects/DotNetProject.cs
===================================================================
--- main/src/core/MonoDevelop.Projects/MonoDevelop.Projects/DotNetProject.cs	(revision 106226)
+++ main/src/core/MonoDevelop.Projects/MonoDevelop.Projects/DotNetProject.cs	(working copy)
@@ -277,34 +277,34 @@
 		
 		void CopyReferencesToOutputPath (string destPath, bool force, string configuration)
 		{
-			string[] deployFiles = GetReferenceDeployFiles (force, configuration);
+			ReferencedFile[] deployFiles = GetReferenceDeployFiles (force, configuration);
 			
-			foreach (string sourcePath in deployFiles) {
-				string destinationFileName = Path.Combine (destPath, Path.GetFileName (sourcePath));
+			foreach (ReferencedFile rf in deployFiles) {
+				string destinationFileName = Path.Combine (destPath, Path.GetFileName (rf.Path));
 				try {
-					if (destinationFileName != sourcePath) {
+					if (destinationFileName != rf.Path) {
 						// Make sure the target directory exists
 						if (!Directory.Exists (Path.GetDirectoryName (destinationFileName)))
 							Directory.CreateDirectory (Path.GetDirectoryName (destinationFileName));
 						// Copy the file
-						FileService.CopyFile (sourcePath, destinationFileName);
+						FileService.CopyFile (rf.Path, destinationFileName);
 					}
 				} catch (Exception e) {
-					LoggingService.LogError ("Can't copy reference file from {0} to {1}: {2}", sourcePath, destinationFileName, e);
+					LoggingService.LogError ("Can't copy reference file from {0} to {1}: {2}", rf.Path, destinationFileName, e);
 				}
 			}
 		}
 		
-		public string[] GetReferenceDeployFiles (bool force, string configuration)
+		public ReferencedFile[] GetReferenceDeployFiles (bool force, string configuration)
 		{
-			ArrayList deployFiles = new ArrayList ();
+			List<ReferencedFile> deployFiles = new List<ReferencedFile> ();
 
 			foreach (ProjectReference projectReference in References) {
 				if ((projectReference.LocalCopy || force) && projectReference.ReferenceType != ReferenceType.Gac) {
-					foreach (string referenceFileName in projectReference.GetReferencedFileNames (configuration)) {
-						deployFiles.Add (referenceFileName);
-						if (File.Exists (referenceFileName + ".config"))
-							deployFiles.Add (referenceFileName + ".config");
+					foreach (ReferencedFile rf in projectReference.GetReferencedFiles (configuration)) {
+						deployFiles.Add (rf);
+						if (File.Exists (rf.Path + ".config"))
+							deployFiles.Add (new ReferencedFile (rf.Path + ".config", rf.UseAbsolutePath));
 					}
 				}
 				if (projectReference.ReferenceType == ReferenceType.Project && projectReference.LocalCopy && ParentSolution != null) {
@@ -312,29 +312,31 @@
 					if (p != null) {
 						ProjectConfiguration config = p.GetActiveConfiguration (configuration) as ProjectConfiguration;
 						if (config != null && config.DebugMode)
-							deployFiles.Add (p.GetOutputFileName (configuration) + ".mdb");
+							deployFiles.Add (new ReferencedFile (p.GetOutputFileName (configuration) + ".mdb", false));
 
 						deployFiles.AddRange (p.GetReferenceDeployFiles (force, configuration));
 					}
 				}
 			}
-			return (string[]) deployFiles.ToArray (typeof(string));
+			return deployFiles.ToArray();
 		}
 		
 		void CleanReferencesInOutputPath (string destPath, string configuration)
 		{
-			string[] deployFiles = GetReferenceDeployFiles (true, configuration);
+			ReferencedFile[] deployFiles = GetReferenceDeployFiles (true, configuration);
 			
-			foreach (string sourcePath in deployFiles) {
-				string destinationFileName = Path.Combine (destPath, Path.GetFileName (sourcePath));
-				try {
-					if (destinationFileName != sourcePath) {
-						if (File.Exists (destinationFileName))
-							FileService.DeleteFile (destinationFileName);
-					}
-				} catch (Exception e) {
-					LoggingService.LogError ("Can't delete reference file {0}: {2}", destinationFileName, e);
-				}
+			foreach (ReferencedFile rf in deployFiles) {
+                if (!rf.UseAbsolutePath) {
+				    string destinationFileName = Path.Combine (destPath, Path.GetFileName (rf.Path));
+				    try {
+					    if (destinationFileName != rf.Path) {
+						    if (File.Exists (destinationFileName))
+							    FileService.DeleteFile (destinationFileName);
+					    }
+				    } catch (Exception e) {
+					    LoggingService.LogError ("Can't delete reference file {0}: {2}", destinationFileName, e);
+				    }
+                }
 			}
 		}
 		
Index: main/src/core/MonoDevelop.Projects/MonoDevelop.Projects.Dom/ProjectCodeCompletionDatabase.cs
===================================================================
--- main/src/core/MonoDevelop.Projects/MonoDevelop.Projects.Dom/ProjectCodeCompletionDatabase.cs	(revision 106226)
+++ main/src/core/MonoDevelop.Projects/MonoDevelop.Projects.Dom/ProjectCodeCompletionDatabase.cs	(working copy)
@@ -232,8 +232,8 @@
 					return new string[] { "Assembly:" + refId };
 				default:
 					ArrayList list = new ArrayList ();
-					foreach (string s in pr.GetReferencedFileNames (ProjectService.DefaultConfiguration))
-						list.Add ("Assembly:" + s);
+					foreach (ReferencedFile r in pr.GetReferencedFiles (ProjectService.DefaultConfiguration))
+						list.Add ("Assembly:" + r.Path);
 					return (string[]) list.ToArray (typeof(string));
 			}
 		}
Index: main/src/core/MonoDevelop.Projects/MonoDevelop.Projects.Formats.MD1/MD1DotNetProjectHandler.cs
===================================================================
--- main/src/core/MonoDevelop.Projects/MonoDevelop.Projects.Formats.MD1/MD1DotNetProjectHandler.cs	(revision 106226)
+++ main/src/core/MonoDevelop.Projects/MonoDevelop.Projects.Formats.MD1/MD1DotNetProjectHandler.cs	(working copy)
@@ -119,7 +119,7 @@
 					if (p != null && !(p is DotNetProject))
 						continue;
 
-					if (p == null || pr.GetReferencedFileNames (configuration).Length == 0) {
+					if (p == null || pr.GetReferencedFiles (configuration).Length == 0) {
 						if (refres == null)
 							refres = new BuildResult ();
 						string msg = GettextCatalog.GetString ("Referenced project '{0}' not found in the solution.", pr.Reference);
@@ -240,11 +240,11 @@
 			foreach (ProjectReference pref in prj.References) {
 				if (pref.ReferenceType == ReferenceType.Gac)
 					continue;
-				foreach (string referenceFileName in pref.GetReferencedFileNames (configuration)) {
-					string asmName = Path.GetFileName (referenceFileName);
+				foreach (ReferencedFile referencedFile in pref.GetReferencedFiles (configuration)) {
+					string asmName = Path.GetFileName (referencedFile.Path);
 					asmName = Path.Combine (targetDir, asmName);
 					if (!File.Exists (asmName)) {
-						File.Copy (referenceFileName, asmName);
+						File.Copy (referencedFile.Path, asmName);
 						files.Add (asmName);
 					}
 				}
Index: main/src/core/MonoDevelop.Projects/MonoDevelop.Projects.Formats.MD1/MD1CustomDataItem.cs
===================================================================
--- main/src/core/MonoDevelop.Projects/MonoDevelop.Projects.Formats.MD1/MD1CustomDataItem.cs	(revision 106226)
+++ main/src/core/MonoDevelop.Projects/MonoDevelop.Projects.Formats.MD1/MD1CustomDataItem.cs	(working copy)
@@ -59,8 +59,11 @@
 				DataCollection data = handler.Serialize (obj);
 				string refto = pref.Reference;
 				if (pref.ReferenceType == ReferenceType.Assembly) {
-					string basePath = Path.GetDirectoryName (handler.SerializationContext.BaseFile);
-					refto = FileService.AbsoluteToRelativePath (basePath, refto);
+                    if (!pref.UseAbsolutePath)
+                    {
+					    string basePath = Path.GetDirectoryName (handler.SerializationContext.BaseFile);
+					    refto = FileService.AbsoluteToRelativePath (basePath, refto);
+                    }
 				} else if (pref.ReferenceType == ReferenceType.Gac && pref.LoadedReference != null)
 					refto = pref.LoadedReference;
 	
@@ -95,11 +98,13 @@
 				DataValue refto = data.Extract ("refto") as DataValue;
 				handler.Deserialize (obj, data);
 				if (refto != null) {
-					pref.Reference = refto.Value;
+				    string basePath = Path.GetDirectoryName (handler.SerializationContext.BaseFile);
 					if (pref.ReferenceType == ReferenceType.Assembly) {
-						string basePath = Path.GetDirectoryName (handler.SerializationContext.BaseFile);
-						pref.Reference = FileService.RelativeToAbsolutePath (basePath, pref.Reference);
+    				    pref.Reference = Path.IsPathRooted(refto.Value) ? refto.Value : FileService.RelativeToAbsolutePath (basePath, refto.Value);
+                        pref.UseAbsolutePath = Path.IsPathRooted(refto.Value);
 					}
+                    else
+                        pref.Reference = refto.Value;
 				}
 			} else
 				handler.Deserialize (obj, data);
Index: main/src/core/MonoDevelop.Projects/Makefile.am
===================================================================
--- main/src/core/MonoDevelop.Projects/Makefile.am	(revision 106226)
+++ main/src/core/MonoDevelop.Projects/Makefile.am	(working copy)
@@ -316,6 +316,7 @@
 	MonoDevelop.Projects/ProjectServiceExtension.cs \
 	MonoDevelop.Projects/ProjectsServices.cs \
 	MonoDevelop.Projects/PropertyBag.cs \
+    MonoDevelop.Projects/ReferencedFile.cs \
 	MonoDevelop.Projects/Solution.cs \
 	MonoDevelop.Projects/SolutionConfiguration.cs \
 	MonoDevelop.Projects/SolutionConfigurationCollection.cs \
Index: main/src/core/MonoDevelop.Projects/MonoDevelop.Projects.Parser/ProjectCodeCompletionDatabase.cs
===================================================================
--- main/src/core/MonoDevelop.Projects/MonoDevelop.Projects.Parser/ProjectCodeCompletionDatabase.cs	(revision 106226)
+++ main/src/core/MonoDevelop.Projects/MonoDevelop.Projects.Parser/ProjectCodeCompletionDatabase.cs	(working copy)
@@ -231,8 +231,8 @@
 					return new string[] { "Assembly:" + refId };
 				default:
 					ArrayList list = new ArrayList ();
-					foreach (string s in pr.GetReferencedFileNames (ProjectService.DefaultConfiguration))
-						list.Add ("Assembly:" + s);
+					foreach (ReferencedFile r in pr.GetReferencedFiles (ProjectService.DefaultConfiguration))
+						list.Add ("Assembly:" + r.Path);
 					return (string[]) list.ToArray (typeof(string));
 			}
 		}
Index: main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Commands/ProjectCommands.cs
===================================================================
--- main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Commands/ProjectCommands.cs	(revision 106226)
+++ main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Commands/ProjectCommands.cs	(working copy)
@@ -68,6 +68,7 @@
 		Clean,
 		CleanSolution,
 		LocalCopyReference,
+        UseAbsolutePathReference,
 		DeployTargetList,
 		ConfigureDeployTargets,
 		CustomCommandList,
Index: main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads.ProjectPad/ProjectReferenceNodeBuilder.cs
===================================================================
--- main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads.ProjectPad/ProjectReferenceNodeBuilder.cs	(revision 106226)
+++ main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads.ProjectPad/ProjectReferenceNodeBuilder.cs	(working copy)
@@ -89,8 +89,8 @@
 			ProjectReference pref = CurrentNode.DataItem as ProjectReference;
 			if (pref == null)
 				return;
-			foreach (string fileName in pref.GetReferencedFileNames (IdeApp.Workspace.ActiveConfiguration)) {
-				IdeApp.Workbench.OpenDocument (fileName);
+			foreach (ReferencedFile r in pref.GetReferencedFiles (IdeApp.Workspace.ActiveConfiguration)) {
+				IdeApp.Workbench.OpenDocument (r.Path);
 			}
 		}
 				
@@ -122,7 +122,28 @@
 				info.Enabled = false;
 			}
 		}
+
+		[CommandHandler (ProjectCommands.UseAbsolutePathReference)]
+        public void ChangeUseAbsolutePath ()
+        {
+            ProjectReference pref = (ProjectReference) CurrentNode.DataItem;
+            pref.UseAbsolutePath = !pref.UseAbsolutePath;
+			Project project = CurrentNode.GetParentDataItem (typeof(Project), false) as Project;
+			IdeApp.ProjectOperations.Save (project);
+        }
 		
+		[CommandUpdateHandler (ProjectCommands.UseAbsolutePathReference)]
+		public void UpdateUseAbsolutePath (CommandInfo info)
+		{
+			ProjectReference pref = (ProjectReference) CurrentNode.DataItem;
+			if (pref.ReferenceType == ReferenceType.Assembly)
+				info.Checked = pref.UseAbsolutePath;
+			else {
+				info.Checked = false;
+				info.Enabled = false;
+			}
+		}
+		
 		public override DragOperation CanDragNode ()
 		{
 			return DragOperation.Copy;
Index: extras/MonoDevelop.AddinAuthoring/MonoDevelop.AddinAuthoring/AddinProjectReference.cs
===================================================================
--- extras/MonoDevelop.AddinAuthoring/MonoDevelop.AddinAuthoring/AddinProjectReference.cs	(revision 106226)
+++ extras/MonoDevelop.AddinAuthoring/MonoDevelop.AddinAuthoring/AddinProjectReference.cs	(working copy)
@@ -43,23 +43,23 @@
 		{
 		}
 		
-		public override string[] GetReferencedFileNames (string configuration)
+		public override ReferencedFile[] GetReferencedFiles (string configuration)
 		{
 			if (OwnerProject != null) {
 				AddinData data = AddinData.GetAddinData ((DotNetProject)OwnerProject);
 				if (data != null) {
 					Addin addin = data.AddinRegistry.GetAddin (Reference);
 					if (addin != null) {
-						List<string> list = new List<string> ();
+						List<ReferencedFile> list = new List<ReferencedFile> ();
 						foreach (string asm in addin.Description.MainModule.Assemblies) {
 							string afile = Path.Combine (Path.GetDirectoryName (addin.Description.AddinFile), asm);
-							list.Add (afile);
+							list.Add (new ReferencedFile (afile, false));
 						}
 						return list.ToArray ();
 					}
 				}
 			}
-			return new string [0];
+			return new ReferencedFile [0];
 		}
 	}
 }
Index: extras/BooBinding/BooBindingCompilerServices.boo
===================================================================
--- extras/BooBinding/BooBindingCompilerServices.boo	(revision 106226)
+++ extras/BooBinding/BooBindingCompilerServices.boo	(working copy)
@@ -55,8 +55,8 @@
 
 		if references is not null:
 			for lib as ProjectReference in references:
-				for fileName as string in lib.GetReferencedFileNames (configuration.Id):
-					compiler.Parameters.References.Add(Assembly.LoadFile(fileName))
+				for rf as ReferencedFile in lib.GetReferencedFiles (configuration.Id):
+					compiler.Parameters.References.Add(Assembly.LoadFile(rf.Path))
 
 		for finfo as ProjectFile in projectFiles:
 			if finfo.Subtype != Subtype.Directory:
Index: extras/BooBinding/Parser/BooParser.boo
===================================================================
--- extras/BooBinding/Parser/BooParser.boo	(revision 106226)
+++ extras/BooBinding/Parser/BooParser.boo	(working copy)
@@ -87,8 +87,8 @@
 		
 		if project is not null and cast(DotNetProject,project).References is not null:
 			for projectRef as ProjectReference in cast(DotNetProject,project).References:
-				for asmName as string in projectRef.GetReferencedFileNames (ProjectService.DefaultConfiguration):
-					compiler.Parameters.References.Add(System.Reflection.Assembly.LoadFile(asmName))
+				for rf as ReferencedFile in projectRef.GetReferencedFiles (ProjectService.DefaultConfiguration):
+					compiler.Parameters.References.Add(System.Reflection.Assembly.LoadFile(rf.Path))
 		
 		return Parse(fileName, lineLength, compiler)
 	
Index: extras/JavaBinding/IKVMCompilerManager.cs
===================================================================
--- extras/JavaBinding/IKVMCompilerManager.cs	(revision 106226)
+++ extras/JavaBinding/IKVMCompilerManager.cs	(working copy)
@@ -128,12 +128,12 @@
 		static string GenerateReferenceStub (IProgressMonitor monitor,DotNetProjectConfiguration configuration, ProjectReference reference)
 		{
 			StringBuilder result = new StringBuilder ();
-			foreach (string fileName in reference.GetReferencedFileNames (configuration.Id)) {
-				string name = Path.GetFileNameWithoutExtension (Path.GetFileName (fileName));
+			foreach (ReferencedFile rf in reference.GetReferencedFiles (configuration.Id)) {
+				string name = Path.GetFileNameWithoutExtension (Path.GetFileName (rf.Path));
 				string outputName = Path.Combine (configuration.OutputDirectory, name + ".jar");
 				if (!System.IO.File.Exists (outputName)) {
 					monitor.Log.WriteLine (String.Format (GettextCatalog.GetString ("Generating {0} reference stub ..."), name));
-					ProcessWrapper p = Runtime.ProcessService.StartProcess ("ikvmstub", "\"" + fileName + "\"", configuration.OutputDirectory, monitor.Log, monitor.Log, null);
+					ProcessWrapper p = Runtime.ProcessService.StartProcess ("ikvmstub", "\"" + rf.Path + "\"", configuration.OutputDirectory, monitor.Log, monitor.Log, null);
 					p.WaitForExit ();
 					if (p.ExitCode != 0) {
 						monitor.ReportError ("Stub generation failed.", null);
@@ -187,14 +187,14 @@
 			
 			if (references != null) {
 				foreach (ProjectReference lib in references) {
-					foreach (string fileName in lib.GetReferencedFileNames (configuration.Id)) {
-						args.Append (" -r:"); args.Append (fileName);
+					foreach (ReferencedFile r in lib.GetReferencedFiles (configuration.Id)) {
+						args.Append (" -r:"); args.Append (r.Path);
 					}
 				}
 			}
 			
-			foreach (string fileName in new ProjectReference(ReferenceType.Gac, "mscorlib").GetReferencedFileNames (configuration.Id)) {
-				args.Append (" -r:"); args.Append (fileName);
+			foreach (ReferencedFile rf in new ProjectReference(ReferenceType.Gac, "mscorlib").GetReferencedFiles (configuration.Id)) {
+				args.Append (" -r:"); args.Append (rf.Path);
 			}
 			
 			Process process = Runtime.ProcessService.StartProcess ("ikvmc", args.ToString (), configuration.OutputDirectory, chainedOutput, chainedError, null);
@@ -281,4 +281,4 @@
 		
 	}
 }
-		
\ No newline at end of file
+		
