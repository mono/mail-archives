Index: ViMode.cs
===================================================================
--- ViMode.cs	(revision 151732)
+++ ViMode.cs	(working copy)
@@ -33,7 +33,32 @@
 
 namespace Mono.TextEditor.Vi
 {
+	public class ViMark
+	{
 	
+		public char MarkCharacter {get; set;}
+		public int LineNumber {get; set;}
+		
+		/// <summary>
+		/// Only way to construct a ViMark.
+		/// </summary>
+		/// <param name="markCharacter">
+		/// The <see cref="System.Char"/> with which the ViMark object needs to be
+		/// associated.
+		/// </param>
+		public ViMark (char markCharacter) {
+			MarkCharacter = MarkCharacter;
+		}
+		
+		public void SaveMark (TextEditorData data) {
+			LineNumber = data.IsSomethingSelected ? data.MainSelection.MinLine : data.Caret.Line;
+		}
+		
+		public void LoadMark (TextEditorData data) {
+			data.Caret.Line = LineNumber;
+		}
+		
+	}
 	
 	public class ViEditMode : EditMode
 	{
@@ -43,6 +68,7 @@
 		State state;
 		const string substMatch = @"^:s(?<sep>.)(?<pattern>.+?)\k<sep>(?<replacement>.*?)(\k<sep>(?<trailer>i?))?$";
 		StringBuilder commandBuffer = new StringBuilder ();
+		Dictionary<char,ViMark> marks = new Dictionary<char, ViMark>();
 		
 		public virtual string Status { get; protected set; }
 		
@@ -91,7 +117,7 @@
 					break;	
 				}
 				break;
-
+				
 			case '?':
 			case '/':
 				searchBackward = ('?' == command[0]);
@@ -102,7 +128,7 @@
 				}
 				return Search ();
 			}
-
+			
 			return "Command not recognised";
 		}
 		
@@ -349,6 +375,17 @@
 						Status = "z";
 						state = State.Fold;
 						return;
+						
+					case 'm':
+						Status = "m";
+						state = State.Mark;
+						return;
+						
+					case '`':
+						Status = "`";
+						state = State.GoToMark;
+						return;
+						
 					}
 					
 					
@@ -598,6 +635,32 @@
 				}
 				Reset ("Unknown command");
 				return;
+				
+			case State.Mark: {
+				char k = (char)unicodeKey;
+				ViMark mark = null;
+				if (marks.ContainsKey(k)) {
+					mark = marks [k];
+				} else {
+					mark = new ViMark(k);
+					marks [k] = mark;
+				}
+				RunAction(mark.SaveMark);
+				Reset("");
+				return;
+			}
+			
+			case State.GoToMark: {
+				char k = (char)unicodeKey;
+				if (marks.ContainsKey(k)) {
+					RunAction(marks [k].LoadMark);
+					Reset ("");
+				} else {
+					Reset ("Unknown Mark");
+				}
+				return;
+			}
+				
 			case State.Fold:
 				if (((modifier & (Gdk.ModifierType.ControlMask)) == 0)) {
 					switch ((char)unicodeKey) {
@@ -863,7 +926,9 @@
 			Indent,
 			Unindent,
 			G,
-			Fold
+			Fold,
+			Mark,
+			GoToMark
 		}
 	}
 }
