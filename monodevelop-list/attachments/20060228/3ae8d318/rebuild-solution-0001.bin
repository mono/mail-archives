Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/ProjectOperations.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/ProjectOperations.cs	(revision 57412)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/ProjectOperations.cs	(working copy)
@@ -66,9 +66,7 @@
 		Project currentProject = null;
 		Combine  currentCombine = null;
 		Combine  openCombine    = null;
-		IParserDatabase parserDatabase;
-
-		ICompilerResult lastResult = new DefaultCompilerResult ();
+		IParserDatabase parserDatabase;	
 		
 		internal ProjectOperations ()
 		{
@@ -82,11 +80,7 @@
 		
 		public IParserDatabase ParserDatabase {
 			get { return parserDatabase; }
-		}
-
-		public ICompilerResult LastCompilerResult {
-			get { return lastResult; }
-		}
+		}		
 		
 		bool IsDirtyFileInCombine {
 			get {
@@ -792,12 +786,31 @@
 		{
 			object[] data = (object[]) ob;
 			CombineEntry entry = (CombineEntry) data [0];
-			IProgressMonitor monitor = (IProgressMonitor) data [1];
-			ICompilerResult result = null;
+			IProgressMonitor monitor = (IProgressMonitor) data [1];			
 			try {
-				BeginBuild ();
-				result = entry.Build (monitor);
-				BuildDone (monitor, result);
+			
+				int errors = 0;
+				int warnings = 0;
+				Services.TaskService.ClearTasks();				
+			
+				if (entry is Combine)
+				{
+					foreach (CombineEntry combineEntry in ((Combine)entry).Entries)
+					{
+						ICompilerResult result = BuildCombineEntry(combineEntry, monitor);
+						errors += result.ErrorCount;
+						warnings += result.WarningCount;
+					}
+				}
+				else
+				{			
+					ICompilerResult result = BuildCombineEntry(entry, monitor);						
+					errors += result.ErrorCount;
+					warnings += result.WarningCount;
+				}
+				
+				AllBuildsDone(monitor, errors, warnings);
+				
 			} catch (Exception ex) {
 				monitor.ReportError (GettextCatalog.GetString ("Build failed."), ex);
 			} finally {
@@ -805,6 +818,15 @@
 			}
 		}
 
+		ICompilerResult BuildCombineEntry(CombineEntry combineEntry, IProgressMonitor monitor)
+		{
+			OnStartBuild();
+			ICompilerResult result = combineEntry.Build(monitor);
+			BuildDone (monitor, result);
+
+			return result;
+		}
+
 		void DoBeforeCompileAction ()
 		{
 			BeforeCompileAction action = (BeforeCompileAction)Runtime.Properties.GetProperty("SharpDevelop.Services.DefaultParserService.BeforeCompileAction", BeforeCompileAction.SaveAllFiles);
@@ -831,38 +853,34 @@
 					System.Diagnostics.Debug.Assert(false);
 					break;
 			}
-		}
-
-		void BeginBuild ()
-		{
-			Services.TaskService.ClearTasks();
-			OnStartBuild ();
-		}
+		}		
 		
 		void BuildDone (IProgressMonitor monitor, ICompilerResult result)
-		{
-			lastResult = result;
+		{			
 			monitor.Log.WriteLine ();
 			monitor.Log.WriteLine (String.Format (GettextCatalog.GetString ("---------------------- Done ----------------------")));
 			
 			foreach (CompilerError err in result.CompilerResults.Errors) {
-				Services.TaskService.AddTask (new Task(null, err));
-			}
-			
-			string errorString = GettextCatalog.GetPluralString("{0} error", "{0} errors", result.ErrorCount, result.ErrorCount);
-			string warningString = GettextCatalog.GetPluralString("{0} warning", "{0} warnings", result.WarningCount, result.WarningCount);
+				Services.TaskService.AddTask (new Task(null, err));				
+			}						
+		}
+		
+		void AllBuildsDone(IProgressMonitor monitor, int errorCount, int warningCount)
+		{
+			string errorString = GettextCatalog.GetPluralString("{0} error", "{0} errors", errorCount, errorCount);
+			string warningString = GettextCatalog.GetPluralString("{0} warning", "{0} warnings", warningCount, warningCount);
 
-			if (result.ErrorCount == 0 && result.WarningCount == 0 && lastResult.FailedBuildCount == 0) {
+			if (errorCount == 0 && warningCount == 0) {
 				monitor.ReportSuccess (GettextCatalog.GetString ("Build successful."));
-			} else if (result.ErrorCount == 0 && result.WarningCount > 0) {
+			} else if (errorCount == 0 && warningCount > 0) {
 				monitor.ReportWarning(GettextCatalog.GetString("Build: ") + errorString + ", " + warningString);
-			} else if (result.ErrorCount > 0) {
+			} else if (errorCount > 0) {
 				monitor.ReportError(GettextCatalog.GetString("Build: ") + errorString + ", " + warningString, null);
 			} else {
 				monitor.ReportError(GettextCatalog.GetString("Build failed."), null);
 			}
 			
-			OnEndBuild (lastResult.FailedBuildCount == 0);
+			OnEndBuild (errorCount == 0);
 		}
 		
 
