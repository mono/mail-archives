Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/ServiceManager.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/ServiceManager.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/ServiceManager.cs	(Arbeitskopie)
@@ -58,6 +58,8 @@
 	/// </summary>
 	public class ServiceManager
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ArrayList serviceList       = new ArrayList();
 		Hashtable servicesHashtable = new Hashtable();
 		Hashtable initializedServices = new Hashtable ();
@@ -204,7 +206,7 @@
 				if (IsInstanceOfType(serviceType, service)) {
 					servicesHashtable[serviceType] = service;
 					if (!initializedServices.Contains (service)) {
-						Runtime.LoggingService.Info (GettextCatalog.GetString ("Initializing service: ") + serviceType);
+						log.Info (GettextCatalog.GetString ("Initializing service: ") + serviceType);
 						service.InitializeService();
 						initializedServices [service] = service;
 					}
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns/AddInService.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns/AddInService.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns/AddInService.cs	(Arbeitskopie)
@@ -35,6 +35,8 @@
 {
 	public class AddInService
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ArrayList addInLoadErrors = new ArrayList ();
 		
 		internal void Initialize ()
@@ -167,10 +169,10 @@
 						AddinError err = AddInTreeSingleton.InsertAddIn (iad.ConfigFile);
 						if (err != null) {
 							ReportLoadError (err);
-							Runtime.LoggingService.Error ("Add-in failed to load: " + iad.Addin.Id);
-							Runtime.LoggingService.Error (err.Exception);
+							log.Error ("Add-in failed to load: " + iad.Addin.Id);
+							log.Error (err.Exception);
 						} else {
-							Runtime.LoggingService.Info ("Loaded add-in: " + iad.Addin.Id);
+							log.Info ("Loaded add-in: " + iad.Addin.Id);
 							AddIn ad = AddInTreeSingleton.AddInTree.AddIns [iad.Addin.Id];
 							ServiceManager.InitializeServices ("/Workspace/Services", ad);
 						}
Index: Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui/DispatchService.cs
===================================================================
--- Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui/DispatchService.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui/DispatchService.cs	(Arbeitskopie)
@@ -8,6 +8,8 @@
 {
 	public class DispatchService : AbstractService
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ArrayList arrBackgroundQueue;
 		ArrayList arrGuiQueue;
 		Thread thrBackground;
@@ -190,14 +192,14 @@
 		
 		private void HandlerError (GenericMessageContainer msg)
 		{
-			Runtime.LoggingService.Error (errormsg);
-			Runtime.LoggingService.Error (msg.Exception);
+			log.Error (errormsg);
+			log.Error (msg.Exception);
 			if (msg.CallerStack != null) {
-				Runtime.LoggingService.Error ("\nCaller stack:");
-				Runtime.LoggingService.Error (msg.CallerStack);
+				log.Error ("\nCaller stack:");
+				log.Error (msg.CallerStack);
 			}
 			else
-				Runtime.LoggingService.Error ("\n\nCaller stack not available. Define the environment variable MONODEVELOP_DISPATCH_DEBUG to enable caller stack capture.");
+				log.Error ("\n\nCaller stack not available. Define the environment variable MONODEVELOP_DISPATCH_DEBUG to enable caller stack capture.");
 		}
 	}
 
Index: Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.ProgressMonitoring/BaseProgressMonitor.cs
===================================================================
--- Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.ProgressMonitoring/BaseProgressMonitor.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.ProgressMonitoring/BaseProgressMonitor.cs	(Arbeitskopie)
@@ -38,6 +38,8 @@
 {
 	public class BaseProgressMonitor: GuiSyncObject, IProgressMonitor, IAsyncOperation
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		class MbrWrapper {
 			public ManualResetEvent waitEvent;
 
@@ -137,7 +139,7 @@
 			
 			errorsMessages.Add (message);
 			if (ex != null) {
-				Runtime.LoggingService.Error (ex);
+				log.Error (ex);
 				errorException = ex;
 			}
 		}
Index: Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.ProgressMonitoring/MessageDialogProgressMonitor.cs
===================================================================
--- Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.ProgressMonitoring/MessageDialogProgressMonitor.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.ProgressMonitoring/MessageDialogProgressMonitor.cs	(Arbeitskopie)
@@ -40,6 +40,8 @@
 	
 	public class MessageDialogProgressMonitor: BaseProgressMonitor
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		StringCollection errorsMessages = new StringCollection ();
 		StringCollection warningMessages = new StringCollection ();
 		Exception errorException;
@@ -139,7 +141,7 @@
 			
 			errorsMessages.Add (message);
 			if (ex != null) {
-				Runtime.LoggingService.Error (ex);
+				log.Error (ex);
 				errorException = ex;
 			}
 			
Index: Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/WizardDialog.cs
===================================================================
--- Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/WizardDialog.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/WizardDialog.cs	(Arbeitskopie)
@@ -24,6 +24,8 @@
 	/// </summary>
 	public class WizardDialog : Dialog
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		StatusPanel       statusPanel  = null;
 		
 		Gtk.Frame             dialogPanel  = new Gtk.Frame();
@@ -183,7 +185,7 @@
 				dialogPanel.Remove (dialogPanel.Child);
 			}
 			if (CurrentWizardPane.ToString () == "MonoDevelop.Core.Gui.OptionPanels.CompletionDatabaseWizard.CreationFinishedPanel") {
-				Runtime.LoggingService.Fatal ("This is an ugly hack for an even uglier bug, Restart MD now");
+				log.Fatal ("This is an ugly hack for an even uglier bug, Restart MD now");
 				System.Environment.Exit (0);
 			}
 			dialogPanel.Add(CurrentWizardPane.Control);
Index: Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/ResourceService.cs
===================================================================
--- Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/ResourceService.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/ResourceService.cs	(Arbeitskopie)
@@ -43,6 +43,8 @@
 {
 	public class ResourceService : AbstractService
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		Gtk.IconFactory iconFactory = null;
 		Hashtable stockMappings = null;
 		
@@ -255,8 +257,7 @@
 			catch (GLib.GException ex) {
 				// just discard the exception, the icon simply can't be
 				// loaded
-				Runtime.LoggingService.Info(typeof(ResourceService).ToString(), "Warning: can't load " + filename +
-				                   " icon file");
+				log.Info("Warning: can't load " + filename + " icon file");
 			}
 		}
 		
Index: Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/AbstractWizardPanel.cs
===================================================================
--- Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/AbstractWizardPanel.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/AbstractWizardPanel.cs	(Arbeitskopie)
@@ -12,6 +12,8 @@
 {
 	public abstract class AbstractWizardPanel : AbstractOptionPanel, IWizardPanel
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		string nextWizardPanelID = String.Empty;
 		bool   enablePrevious    = true;
 		bool   enableNext        = true;
@@ -136,7 +138,7 @@
 
 		public override bool ReceiveDialogMessage (DialogMessage a)
 		{
-			//Runtime.LoggingService.Info ("In middle receive dialog message");
+			//log.Info ("In middle receive dialog message");
 			return true;
 		}
 	}
Index: Core/src/MonoDevelop.Components/MonoDevelop.Components.HtmlControl/MozillaControl.cs
===================================================================
--- Core/src/MonoDevelop.Components/MonoDevelop.Components.HtmlControl/MozillaControl.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Components/MonoDevelop.Components.HtmlControl/MozillaControl.cs	(Arbeitskopie)
@@ -13,6 +13,8 @@
 {
 	public class MozillaControl : WebControl, IWebBrowser
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		internal static GLib.GType gtype;
 		private string html;
 		private string css;
@@ -83,7 +85,7 @@
 
 		public void InitializeWithBase (string base_uri)
 		{
-			//Runtime.LoggingService.Info (base_uri);
+			//log.Info (base_uri);
 			if (html.Length > 0)
 			{
 				this.RenderData (html, base_uri, "text/html");
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects/Combine.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects/Combine.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects/Combine.cs	(Arbeitskopie)
@@ -30,6 +30,8 @@
 	[DataInclude (typeof(CombineConfiguration))]
 	public class Combine : CombineEntry
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		[ItemProperty ("description", DefaultValue = "")]
 		string description = null;
 		
@@ -693,7 +695,7 @@
 					projects.Add ((Project)entry);
 				}
 				else
-					Runtime.LoggingService.ErrorFormat ("Dont know how to generate makefiles for {0}", entry);
+					log.ErrorFormat ("Dont know how to generate makefiles for {0}", entry);
 			}
 			
 			string rel_outputdir = Runtime.FileUtilityService.AbsoluteToRelativePath (BaseDirectory, outputdir);
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects/Project.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects/Project.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects/Project.cs	(Arbeitskopie)
@@ -36,6 +36,8 @@
 	[DataInclude (typeof(ProjectFile))]
 	public abstract class Project : CombineEntry
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		[ItemProperty ("Description", DefaultValue="")]
 		protected string description     = "";
 
@@ -210,7 +212,7 @@
 								File.Copy (referenceFileName + ".mdb", destinationFileName + ".mdb", true);
 						}
 					} catch (Exception e) {
-						Runtime.LoggingService.ErrorFormat ("Can't copy reference file from {0} to {1} reason {2}", referenceFileName, destinationFileName, e);
+						log.ErrorFormat ("Can't copy reference file from {0} to {1} reason {2}", referenceFileName, destinationFileName, e);
 					}
 				}
 				if (projectReference.ReferenceType == ReferenceType.Project && RootCombine != null) {
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects/DotNetProject.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects/DotNetProject.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects/DotNetProject.cs	(Arbeitskopie)
@@ -20,6 +20,8 @@
 	[DataInclude (typeof(DotNetProjectConfiguration))]
 	public class DotNetProject : Project
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		[ItemProperty]
 		string language;
 		
@@ -179,7 +181,7 @@
 		
 		public override void GenerateMakefiles (Combine parentCombine)
 		{
-			Runtime.LoggingService.DebugFormat ("Generating makefiles for {0}",
+			log.DebugFormat ("Generating makefiles for {0}",
 				Name);
 			languageBinding.GenerateMakefile (this, parentCombine);
 		}
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyAttribute.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyAttribute.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyAttribute.cs	(Arbeitskopie)
@@ -24,6 +24,8 @@
 	[Serializable]
 	internal class SharpAssemblyAttribute : AbstractAttribute
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		SharpAssemblyClass attributeType;
 		
 		public SharpAssemblyClass AttributeType {
@@ -44,7 +46,7 @@
 				
 				int table = assembly.Reader.GetCodedIndexTable(CodedIndex.MemberRefParent, ref trIndex);
 				if (table != 1) {
-					Runtime.LoggingService.Debug ("SharpAssemblyAttribute: unsupported MemberRefParent coded index");
+					log.Debug ("SharpAssemblyAttribute: unsupported MemberRefParent coded index");
 					return; // unsupported
 				}
 				
@@ -94,7 +96,7 @@
 				
 				ushort prolog = binaryReader.ReadUInt16();
 				if (prolog != 1) {
-					Runtime.LoggingService.Debug ("SharpAssemblyAttribute: Wrong prolog in argument list");
+					log.Debug ("SharpAssemblyAttribute: Wrong prolog in argument list");
 					return;
 				}
 				
@@ -114,11 +116,11 @@
 							}
 						}
 						
-						Runtime.LoggingService.Debug ("Enum: return type = " + rettypename);
+						log.Debug ("Enum: return type = " + rettypename);
 						
 						object argValue = GetFixedArg(argBlob, binaryReader, rettypename);
 						
-						Runtime.LoggingService.Debug ("Enum: arg value = " + argValue.ToString());
+						log.Debug ("Enum: arg value = " + argValue.ToString());
 						
 							foreach (IField field in underlyingClass.Fields) {
 								if (field is SharpAssemblyField) {
@@ -133,7 +135,7 @@
 												// if the value cannot be found
 						positionalArguments.Add(argValue.ToString());
 						
-						Runtime.LoggingService.Debug ("Enum: no name found");
+						log.Debug ("Enum: no name found");
 						
 					namefound: ;
 						
@@ -163,8 +165,8 @@
 				
 				binaryReader.Close();
 			} catch (Exception) {
-				Runtime.LoggingService.Debug ("SharpAssemblyAttribute: Error loading arguments.");
-				//Runtime.LoggingService.Info(e.ToString());
+				log.Debug ("SharpAssemblyAttribute: Error loading arguments.");
+				//log.Info(e.ToString());
 			}
 		}
 		
@@ -232,7 +234,7 @@
 				try {
 					ret += (string)de.Key + " = " + (string)de.Value + ", ";
 				} catch {
-					Runtime.LoggingService.Error ("error in namedArguments");
+					log.Error ("error in namedArguments");
 				}
 			}
 			
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyReturnType.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyReturnType.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyReturnType.cs	(Arbeitskopie)
@@ -22,6 +22,8 @@
 	[Serializable]
 	public class SharpAssemblyReturnType : AbstractReturnType
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ArrayList      arrayRanks = null;
 		
 		SharpAssemblyClass underlyingClass;
@@ -98,7 +100,7 @@
 						} else {
 							fullyQualifiedName = assembly.GetStringFromHeap(typeRefTable[index].Nspace) + "." + 
 						                                                assembly.GetStringFromHeap(typeRefTable[index].Name);
-						    Runtime.LoggingService.Info("GetDataType: TypeRef not resolved!");
+						    log.Info("GetDataType: TypeRef not resolved!");
 						}
 						declaredin = asm.GetRefAssemblyFor(index);
 					} else {
@@ -138,7 +140,7 @@
 					break;
 				
 				default:
-					Runtime.LoggingService.Debug ("NOT supported: " + dt.ToString());
+					log.Debug ("NOT supported: " + dt.ToString());
 					fullyQualifiedName += " NOT_SUPPORTED [" + dt.ToString() + "]";
 					break;
 			}
@@ -174,7 +176,7 @@
 			} else {
 				FullyQualifiedName = assembly.Reader.GetStringFromHeap(typeRefTable[index].Nspace) + "." + 
 			                                                assembly.Reader.GetStringFromHeap(typeRefTable[index].Name);
-			    Runtime.LoggingService.Debug ("SharpAssemblyReturnType from TypeRef: TypeRef not resolved!");
+			    log.Debug ("SharpAssemblyReturnType from TypeRef: TypeRef not resolved!");
 			}
 			declaredin = assembly.GetRefAssemblyFor(index);
 		}
@@ -185,7 +187,7 @@
 			try {
 				GetDataType(assembly, ref blobSignatureIndex);
 			} catch (Exception e) {
-				Runtime.LoggingService.Error ("Got exception in ReturnType creation: " + e.ToString());
+				log.Error ("Got exception in ReturnType creation: " + e.ToString());
 				FullyQualifiedName = "GOT_EXCEPTION";
 			}
 			
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyClass.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyClass.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyClass.cs	(Arbeitskopie)
@@ -22,6 +22,8 @@
 	[Serializable]
 	public class SharpAssemblyClass : AbstractClass
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ClassCollection baseTypeCollection = new ClassCollection();
 		
 		public ClassCollection BaseTypeCollection {
@@ -47,7 +49,7 @@
 				case 3: // TypeRef -- nested type
 					return GetNestedName(asm, typeRefTable, val) + "+" + asm.Reader.GetStringFromHeap(typeRefTable[index].Name);
 				default: // other token - not supported
-					Runtime.LoggingService.Debug ("GetNestedName: Unsupported resolution scope!");
+					log.Debug ("GetNestedName: Unsupported resolution scope!");
 					goto case 3;
 			}
 		}
@@ -80,7 +82,7 @@
 			SharpAssembly_ declaringAssembly = referencingAssembly.GetRefAssemblyFor(index);
 			if (declaringAssembly == null) {
 				Console.Write("FromTypeRef failed for: " + name + " declared in assembly " + referencingAssembly.Name);
-				Runtime.LoggingService.Debug (": Declaring assembly not found.");
+				log.Debug (": Declaring assembly not found.");
 				return null;
 			}
 			
@@ -105,7 +107,7 @@
 			}
 			
 			Console.Write("FromTypeRef failed for: " + name + " declared in assembly " + referencingAssembly.Name);
-			Runtime.LoggingService.Debug (": Matching type not found for nested name: " + nestedName);
+			log.Debug (": Matching type not found for nested name: " + nestedName);
 			return null;
 		}
 		
@@ -296,7 +298,7 @@
 				case 1:  // TypeRef
 					return FromTypeRef(assembly, nIndex);
 				default:
-					Runtime.LoggingService.Debug ("GetTypeRefOrDefClass: Wrong TypeDefOrRef coded index!");
+					log.Debug ("GetTypeRefOrDefClass: Wrong TypeDefOrRef coded index!");
 					return null;
 			}
 		}
@@ -432,7 +434,7 @@
 					IClass newclass = new SharpAssemblyClass(assembly, typeDefTable, i);
 					classes.Add(newclass);
 				} catch {
-					Runtime.LoggingService.Debug ("GetAssemblyTypes: Error loading class " + i);
+					log.Debug ("GetAssemblyTypes: Error loading class " + i);
 				}
 			}
 			
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/DefaultParserService.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/DefaultParserService.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/DefaultParserService.cs	(Arbeitskopie)
@@ -230,7 +230,7 @@
 			// being thrown and corrupting the textarea control
 			try {
 				IParser parser = parserService.GetParser (fileName);
-				//Runtime.LoggingService.DebugFormat ("Parse info : {0}", GetParseInformation(fileName).MostRecentCompilationUnit.Tag);
+				//log.DebugFormat ("Parse info : {0}", GetParseInformation(fileName).MostRecentCompilationUnit.Tag);
 				if (parser != null) {
 					return parser.Resolve (this, expression, caretLineNumber, caretColumn, fileName, fileContent);
 				}
@@ -316,6 +316,8 @@
 	
 	internal class ParserDatabase : IParserDatabase
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		DefaultParserService parserService;
 		CodeCompletionDatabase coreDatabase;
 		bool threadRunning;
@@ -504,7 +506,7 @@
 						return;
 				}
 				catch (Exception ex) {
-					Runtime.LoggingService.Error (ex);
+					log.Error (ex);
 				}
 			}
 
@@ -1021,7 +1023,7 @@
 				} else
 					return this.GetCachedParseInformation (fileName);
 			} catch (Exception e) {
-				Runtime.LoggingService.Error (e.ToString ());
+				log.Error (e.ToString ());
 				return null;
 			}
 		}
@@ -1210,7 +1212,7 @@
 		
 		public string SearchNamespace (CodeCompletionDatabase db, IUsing usin, string partitialNamespaceName, bool caseSensitive)
 		{
-//			Runtime.LoggingService.DebugFormat ("SearchNamespace : >{0}<", partitialNamespaceName);
+//			log.DebugFormat ("SearchNamespace : >{0}<", partitialNamespaceName);
 			if (NamespaceExists (db, partitialNamespaceName, caseSensitive)) {
 				return partitialNamespaceName;
 			}
@@ -1299,7 +1301,7 @@
 		
 		public IClass SearchType (CodeCompletionDatabase db, IUsing iusing, string partitialTypeName, bool caseSensitive)
 		{
-			Runtime.LoggingService.Debug ("Search type : >{0}<", partitialTypeName);
+			log.DebugFormat ("Search type : >{0}<", partitialTypeName);
 			IClass c = GetClass (db, partitialTypeName, caseSensitive);
 			if (c != null) {
 				return c;
@@ -1307,10 +1309,10 @@
 			
 			foreach (string str in iusing.Usings) {
 				string possibleType = String.Concat(str, ".", partitialTypeName);
-				Runtime.LoggingService.Debug ("looking for {0}", possibleType);
+				log.DebugFormat ("looking for {0}", possibleType);
 				c = GetClass (db, possibleType, caseSensitive);
 				if (c != null) {
-					Runtime.LoggingService.Debug ("Found!");
+					log.Debug ("Found!");
 					return c;
 				}
 			}
@@ -1320,10 +1322,10 @@
 			if (declaringNamespace != null) {
 				while (declaringNamespace.Length > 0) {
 					string className = String.Concat(declaringNamespace, ".", partitialTypeName);
-					Runtime.LoggingService.DebugFormat ("looking for {0}", className);
+					log.DebugFormat ("looking for {0}", className);
 					c = GetClass (db, className, caseSensitive);
 					if (c != null) {
-						Runtime.LoggingService.Debug ("Found!");
+						log.Debug ("Found!");
 						return c;
 					}
 					int index = declaringNamespace.IndexOf('.');
@@ -1341,10 +1343,10 @@
 					string className = null;
 					if (aliasString.Length > 0) {
 						className = String.Concat(entry.Value.ToString(), partitialTypeName.Remove(0, aliasString.Length));
-						Runtime.LoggingService.DebugFormat ("looking for {0}", className);
+						log.DebugFormat ("looking for {0}", className);
 						c = GetClass (db, className, caseSensitive);
 						if (c != null) {
-							Runtime.LoggingService.Debug ("Found!");
+							log.Debug ("Found!");
 							return c;
 						}
 					}
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyField.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyField.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyField.cs	(Arbeitskopie)
@@ -22,6 +22,8 @@
 	[Serializable]
 	internal class SharpAssemblyField : AbstractField
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		public SharpAssemblyField(SharpAssembly_ assembly, Field[] fieldTable, SharpAssemblyClass declaringtype, uint index)
 		{
 			if (assembly == null) {
@@ -133,7 +135,7 @@
 					}
 					binReader.Close();
 				} catch {
-					Runtime.LoggingService.Error ("SharpAssemblyField: Error reading constant value");
+					log.Error ("SharpAssemblyField: Error reading constant value");
 				}
 			}
 		}
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AssemblyInformation.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AssemblyInformation.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AssemblyInformation.cs	(Arbeitskopie)
@@ -29,6 +29,8 @@
 	[Serializable]
 	internal class AssemblyInformation : MarshalByRefObject
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ClassCollection classes = new ClassCollection();
 		string fileName;
 		
@@ -52,7 +54,7 @@
 		
 /*		byte[] GetBytes (string fileName)
 		{
-			Runtime.LoggingService.Info (fileName);
+			log.Info (fileName);
 			FileStream fs = System.IO.File.OpenRead(fileName);
 			long size = fs.Length;
 			byte[] outArray = new byte[size];
@@ -70,7 +72,7 @@
 //			TypeDef[] typeDefTable = (TypeDef[])assembly.MetadataTable.Tables[TypeDef.TABLE_ID];
 //			
 //			for (int i = 0; i < typeDefTable.Length; ++i) {
-//				Runtime.LoggingService.Info("ADD " + i);
+//				log.Info("ADD " + i);
 //				classes.Add(new SharpAssemblyClass(assembly, typeDefTable, i));
 //			}
 			
@@ -114,7 +116,7 @@
 			} catch {
 			}
 			if(asm == null) {
-				Runtime.LoggingService.ErrorFormat ("Unable to load {0}", fileName);
+				log.ErrorFormat ("Unable to load {0}", fileName);
 				return;
 			}
 			foreach (Type type in asm.GetTypes()) {
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AssemblyCodeCompletionDatabase.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AssemblyCodeCompletionDatabase.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AssemblyCodeCompletionDatabase.cs	(Arbeitskopie)
@@ -41,6 +41,8 @@
 {	
 	internal class AssemblyCodeCompletionDatabase: CodeCompletionDatabase
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		bool useExternalProcess = true;
 		string baseDir;
 		string assemblyName;
@@ -150,7 +152,7 @@
 			if (!File.Exists (checkFile) || version != FORMAT_VERSION) {
 				string dataFile = Path.Combine (baseDir, name + ".pidb");
 				File.Delete (dataFile);
-				Runtime.LoggingService.Info ("Deleted " + dataFile);
+				log.Info ("Deleted " + dataFile);
 			}
 		}
 		
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyEvent.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyEvent.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyEvent.cs	(Arbeitskopie)
@@ -23,6 +23,8 @@
 	[Serializable]
 	internal class SharpAssemblyEvent : AbstractEvent
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		public SharpAssemblyEvent(SharpAssembly_ asm, Event[] eventTable, SharpAssemblyClass declaringtype, uint index)
 		{
 			if (asm == null) {
@@ -123,7 +125,7 @@
 
 			} else {                  // TypeSpec
 				returnType = new SharpAssemblyReturnType("NOT_SUPPORTED");
-				Runtime.LoggingService.Debug ("SharpAssemblyEvent: TypeSpec -- not supported");
+				log.Debug ("SharpAssemblyEvent: TypeSpec -- not supported");
 			}
 			
 		}
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/CodeCompletionDatabase.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/CodeCompletionDatabase.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/CodeCompletionDatabase.cs	(Arbeitskopie)
@@ -45,6 +45,8 @@
 {
 	internal class CodeCompletionDatabase: IDisposable
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		static readonly int MAX_ACTIVE_COUNT = 100;
 		static readonly int MIN_ACTIVE_COUNT = 50;
 		static protected readonly int FORMAT_VERSION = 6;
@@ -120,7 +122,7 @@
 					currentGetTime = 0;
 					CloseReader ();
 					
-					Runtime.LoggingService.Debug ("Reading " + dataFile);
+					log.Debug ("Reading " + dataFile);
 					ifile = new FileStream (dataFile, FileMode.Open, FileAccess.Read, FileShare.Read);
 					BinaryFormatter bf = new BinaryFormatter ();
 					
@@ -148,7 +150,7 @@
 				catch (Exception ex)
 				{
 					if (ifile != null) ifile.Close ();
-					Runtime.LoggingService.Error ("PIDB file '" + dataFile + "' couldn not be loaded: '" + ex.Message + "'. The file will be recreated");
+					log.Error ("PIDB file '" + dataFile + "' couldn not be loaded: '" + ex.Message + "'. The file will be recreated");
 					rootNamespace = new NamespaceEntry ();
 					files = new Hashtable ();
 					references = new ArrayList ();
@@ -175,7 +177,7 @@
 				modified = false;
 				headers["Version"] = FORMAT_VERSION;
 							
-				Runtime.LoggingService.Debug ("Writing " + dataFile);
+				log.Debug ("Writing " + dataFile);
 				
 				string tmpDataFile = dataFile + ".tmp";
 				FileStream dfile = new FileStream (tmpDataFile, FileMode.Create, FileAccess.Write, FileShare.Write);
@@ -334,7 +336,7 @@
 		{
 			lock (rwlock)
 			{
-//				Runtime.LoggingService.Debug ("GET CLASS " + typeName + " in " + dataFile);
+				// log.Debug ("GET CLASS " + typeName + " in " + dataFile);
 				string[] path = typeName.Split ('.');
 				int len = path.Length - 1;
 				
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/WordCountDialog.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/WordCountDialog.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/WordCountDialog.cs	(Arbeitskopie)
@@ -21,6 +21,8 @@
 {
 	internal class WordCountDialog : Dialog
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ScrolledWindow scrolledwindow;
 		TreeView resultListView;
 		TreeStore store;
@@ -219,7 +221,7 @@
 		
 		private SortType ReverseSort (SortType st)
 		{
-			//Runtime.LoggingService.Info (st);
+			//log.Info (st);
 			if (st == SortType.Ascending)
 				return SortType.Descending;
 			else
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/AssemblyReferencePanel.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/AssemblyReferencePanel.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/AssemblyReferencePanel.cs	(Arbeitskopie)
@@ -19,6 +19,8 @@
 {
 	internal class AssemblyReferencePanel : HBox, IReferencePanel
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		SelectReferenceDialog selectDialog;
 		FileChooserWidget chooser;
 		
@@ -79,7 +81,7 @@
 		
 		public void AddReference(object sender, EventArgs e)
 		{
-			//System.Runtime.LoggingService.Info("This panel will contain a file browser, but so long use the browse button :)");
+			//log.Info("This panel will contain a file browser, but so long use the browse button :)");
 		}
 	}
 }
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/IncludeFilesDialog.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/IncludeFilesDialog.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/IncludeFilesDialog.cs	(Arbeitskopie)
@@ -22,6 +22,8 @@
 {
 	public class IncludeFilesDialog
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		// gtk widgets
 		[Glade.Widget] Button okbutton;
 		[Glade.Widget] Button cancelbutton;
@@ -42,7 +44,7 @@
 		
 		public IncludeFilesDialog(Project project, StringCollection newFiles)
 		{
-			Runtime.LoggingService.Debug ("*** Include files dialog ***");
+			log.Debug ("*** Include files dialog ***");
 			// we must do it from *here* otherwise, we get this assembly, not the caller
 			Glade.XML glade = new Glade.XML (typeof (IncludeFilesDialog).Assembly, "Base.glade", "IncludeFilesDialogWidget", null);
 			glade.Autoconnect (this);
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/NewFileDialog.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/NewFileDialog.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/NewFileDialog.cs	(Arbeitskopie)
@@ -30,6 +30,8 @@
 	/// </summary>
 	internal class NewFileDialog : Dialog
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ArrayList alltemplates = new ArrayList ();
 		ArrayList categories   = new ArrayList ();
 		Hashtable icons        = new Hashtable ();
@@ -89,7 +91,7 @@
 					imglist.Add(bitmap);
 					tmp[entry.Key] = ++i;
 				} else {
-					Runtime.LoggingService.ErrorFormat(GettextCatalog.GetString ("Can't load bitmap {0} using default"), entry.Key.ToString ());
+					log.ErrorFormat(GettextCatalog.GetString ("Can't load bitmap {0} using default"), entry.Key.ToString ());
 				}
 			}
 			
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.CodeTemplates/CodeTemplateLoader.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.CodeTemplates/CodeTemplateLoader.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.CodeTemplates/CodeTemplateLoader.cs	(Arbeitskopie)
@@ -24,6 +24,8 @@
 	/// </summary>
 	public class CodeTemplateLoader
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		static string TemplateFileName = "MonoDevelop-templates.xml";
 		static string TemplateVersion  = "2.0";
 		
@@ -96,7 +98,7 @@
 		static CodeTemplateLoader()
 		{
 			if (!LoadTemplatesFromStream(Path.Combine(Runtime.Properties.ConfigDirectory, TemplateFileName))) {
-				Runtime.LoggingService.Info("Templates: can't load user defaults, reading system defaults");
+				log.Info("Templates: can't load user defaults, reading system defaults");
 				if (!LoadTemplatesFromStream(Runtime.Properties.DataDirectory + 
 				                             Path.DirectorySeparatorChar   + "options" +
 				                             Path.DirectorySeparatorChar   + TemplateFileName)) {
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/Ide.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/Ide.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/Ide.cs	(Arbeitskopie)
@@ -54,6 +54,8 @@
 {
 	public abstract class IdeApp
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		static Workbench workbench = new Workbench ();
 		static ProjectOperations projectOperations = new ProjectOperations ();
 		static HelpOperations helpOperations = new HelpOperations ();
@@ -120,7 +122,7 @@
 						IdeApp.Workbench.OpenDocument (file);
 					
 					} catch (Exception e) {
-						Runtime.LoggingService.InfoFormat("unable to open file {0} exception was :\n{1}", file, e.ToString());
+						log.InfoFormat("unable to open file {0} exception was :\n{1}", file, e.ToString());
 					}
 				}
 			}
@@ -138,7 +140,7 @@
 				try {
 					typeof(CommandHandler).GetMethod ("Run", System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, null, Type.EmptyTypes, null).Invoke (handler, null);
 				} catch (Exception ex) {
-					Runtime.LoggingService.Error (ex);
+					log.Error (ex);
 				}
 			}
 			monitor.EndTask ();
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/DefaultWorkbench.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/DefaultWorkbench.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/DefaultWorkbench.cs	(Arbeitskopie)
@@ -36,6 +36,8 @@
 	/// </summary>
 	internal class DefaultWorkbench : Gtk.Window, IWorkbench
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		readonly static string mainMenuPath    = "/SharpDevelop/Workbench/MainMenu";
 		readonly static string viewContentPath = "/SharpDevelop/Workbench/Pads";
 		readonly static string toolbarsPath = "/SharpDevelop/Workbench/ToolBar";
@@ -126,7 +128,7 @@
 		public DefaultWorkbench() : base (Gtk.WindowType.Toplevel)
 		{
 			Title = "MonoDevelop";
-			Runtime.LoggingService.Info ("Creating DefaultWorkbench");
+			log.Info ("Creating DefaultWorkbench");
 		
 			windowChangeEventHandler = new EventHandler(OnActiveWindowChanged);
 
@@ -159,7 +161,7 @@
 						else
 							IdeApp.Workbench.OpenDocument (file);
 					} catch (Exception e) {
-						Runtime.LoggingService.ErrorFormat ("unable to open file {0} exception was :\n{1}", file, e.ToString());
+						log.ErrorFormat ("unable to open file {0} exception was :\n{1}", file, e.ToString());
 					}
 				}
 			}
@@ -218,7 +220,7 @@
 						((IMementoCapable)content).SetMemento(memento);
 					}
 				} catch (Exception e) {
-					Runtime.LoggingService.Error ("Can't get/set memento : " + e.ToString());
+					log.Error ("Can't get/set memento : " + e.ToString());
 				}
 			}
 			
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/SdiWorkspaceLayout.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/SdiWorkspaceLayout.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/SdiWorkspaceLayout.cs	(Arbeitskopie)
@@ -33,6 +33,8 @@
 	/// </summary>
 	internal class SdiWorkbenchLayout : IWorkbenchLayout
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		static string configFile = Runtime.Properties.ConfigDirectory + "DefaultEditingLayout.xml";
 
 		// contains the fully qualified name of the current layout (ie. Edit.Default)
@@ -307,7 +309,7 @@
 				}
 			}
 			
-			Runtime.LoggingService.Debug ("Default Layout created.");
+			log.Debug ("Default Layout created.");
 			dockLayout = new DockLayout (dock);
 			if (System.IO.File.Exists (configFile)) {
 				dockLayout.LoadFromFile (configFile);
@@ -320,7 +322,7 @@
 		{
 			workbench.ContextChanged -= contextChangedHandler;
 
-			Runtime.LoggingService.Debug ("Call to SdiWorkSpaceLayout.Detach");
+			log.Debug ("Call to SdiWorkSpaceLayout.Detach");
 			dockLayout.SaveLayout (currentLayout);
 			dockLayout.SaveToFile (configFile);
 			rootWidget.Remove(((DefaultWorkbench)workbench).TopMenu);
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/HelpViewer.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/HelpViewer.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/HelpViewer.cs	(Arbeitskopie)
@@ -12,6 +12,8 @@
 
 	public class HelpViewer : AbstractViewContent
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		HTML html_viewer = new HTML ();
 
 		ScrolledWindow scroller = new ScrolledWindow ();
@@ -47,7 +49,7 @@
 
 		void UrlRequested (object sender, UrlRequestedArgs args)
 		{
-			Runtime.LoggingService.DebugFormat ("Image requested: {0}", args.Url);
+			log.DebugFormat ("Image requested: {0}", args.Url);
 			Stream s = Services.DocumentationService.HelpTree.GetImage (args.Url);
 			
 			if (s != null) {
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/ToolsCommands.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/ToolsCommands.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/ToolsCommands.cs	(Arbeitskopie)
@@ -39,6 +39,8 @@
 	
 	internal class ToolListHandler: CommandHandler
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		protected override void Update (CommandArrayInfo info)
 		{
 			for (int i = 0; i < ToolLoader.Tool.Count; ++i) {
@@ -73,8 +75,8 @@
 			}
 			
 			// debug command and args
-			Runtime.LoggingService.Debug("command : " + command);
-			Runtime.LoggingService.Debug("args    : " + args);
+			log.Debug("command : " + command);
+			log.Debug("args    : " + args);
 			
 			// create the process
 			IProgressMonitor monitor = IdeApp.Workbench.ProgressMonitors.GetRunProgressMonitor ();
@@ -90,7 +92,7 @@
 					p = Runtime.ProcessService.StartProcess (command, args, workingDirectory, null);
 
 				p.WaitForOutput ();
-				Runtime.LoggingService.Debug ("DONE");
+				log.Debug ("DONE");
 				
 				monitor.Log.WriteLine ();
 				if (p.ExitCode == 0) {
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.ExternalTools/ToolLoader.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.ExternalTools/ToolLoader.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.ExternalTools/ToolLoader.cs	(Arbeitskopie)
@@ -22,6 +22,8 @@
 	/// </summary>
 	internal class ToolLoader
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		static string TOOLFILE        = "MonoDevelop-tools.xml";
 		static string TOOLFILEVERSION = "1";
 		
@@ -76,7 +78,7 @@
 		static ToolLoader()
 		{
 			if (!LoadToolsFromStream (Runtime.Properties.ConfigDirectory + TOOLFILE)) {
-				//Runtime.LoggingService.Info("Tools: can't load user defaults, reading system defaults");
+				//log.Info("Tools: can't load user defaults, reading system defaults");
 				if (!LoadToolsFromStream (Runtime.Properties.DataDirectory +
 				                         Path.DirectorySeparatorChar + "options" + 
 				                         Path.DirectorySeparatorChar + TOOLFILE)) {
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/FileList.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/FileList.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/FileList.cs	(Arbeitskopie)
@@ -19,6 +19,8 @@
 {
 	internal class FileList : Gtk.TreeView
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		private FileSystemWatcher watcher;
 		private ArrayList Items;
 		private Gtk.ListStore store;
@@ -87,7 +89,7 @@
 		}
 		
 		void ItemRemoved (FileListItem item) {
-			Runtime.LoggingService.Debug ("remove called");
+			log.Debug ("remove called");
 			store.Remove (ref selectedIter);
 		}
 		
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/MonodocTreePad.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/MonodocTreePad.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/MonodocTreePad.cs	(Arbeitskopie)
@@ -19,6 +19,8 @@
 {
 	internal class HelpTree : AbstractPadContent
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		TreeStore store;
 		TreeView  tree_view;
 
@@ -106,7 +108,7 @@
 					IdeApp.HelpOperations.ShowDocs (s, match, url);
 					return;
 				}
-				Runtime.LoggingService.Error ("Couldnt find match");
+				log.Error ("Couldnt find match");
 			}
 		}
 
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.BrowserDisplayBinding/HtmlViewPane.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.BrowserDisplayBinding/HtmlViewPane.cs	(Revision 58404)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.BrowserDisplayBinding/HtmlViewPane.cs	(Arbeitskopie)
@@ -21,6 +21,8 @@
 {
 	public class BrowserPane : AbstractViewContent, ISecondaryViewContent
 	{	
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		protected HtmlViewPane htmlViewPane;
 		protected IViewContent parent;
 
@@ -55,7 +57,7 @@
 					GLib.Timeout.Add (50, new GLib.TimeoutHandler (checkFocus));
 					
 				} catch {
-					Runtime.LoggingService.Error ("Gecko# tossed an exception");
+					log.Error ("Gecko# tossed an exception");
 				}
 			}
 		}
Index: Extras/prj2make-sharp-lib/pkgconfiginvoker.cs
===================================================================
--- Extras/prj2make-sharp-lib/pkgconfiginvoker.cs	(Revision 58404)
+++ Extras/prj2make-sharp-lib/pkgconfiginvoker.cs	(Arbeitskopie)
@@ -7,6 +7,7 @@
 {
 	public sealed class PkgConfigInvoker
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
 		
 		public static string GetPkgConfigVersion()
 		{
@@ -73,14 +74,14 @@
 
 			if (p.StandardOutput == null)
 			{
-				Runtime.LoggingService.Debug ("Specified package did not return any information");
+				log.Debug ("Specified package did not return any information");
 			}
 			
 			pkgout = p.StandardOutput.ReadToEnd ();		
 			p.WaitForExit ();
 			if (p.ExitCode != 0) 
 			{
-				Runtime.LoggingService.Debug ("pkg-config command failed: pkg-config " + strArgLine);
+				log.Debug ("pkg-config command failed: pkg-config " + strArgLine);
 				return null;
 			}
 
Index: Extras/MonoDevelop.GtkCore/MonoDevelop.GtkCore.WidgetLibrary/AssemblyReferenceWidgetLibrary.cs
===================================================================
--- Extras/MonoDevelop.GtkCore/MonoDevelop.GtkCore.WidgetLibrary/AssemblyReferenceWidgetLibrary.cs	(Revision 58404)
+++ Extras/MonoDevelop.GtkCore/MonoDevelop.GtkCore.WidgetLibrary/AssemblyReferenceWidgetLibrary.cs	(Arbeitskopie)
@@ -43,6 +43,8 @@
 {
 	public class AssemblyReferenceWidgetLibrary: BaseWidgetLibrary
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		string assemblyReference;
 		string assemblyName;
 		string fileName;
@@ -58,7 +60,7 @@
 				try {
 					fileName = Runtime.SystemAssemblyService.GetAssemblyLocation (assemblyReference);
 				} catch (Exception ex) {
-					Runtime.LoggingService.Error (ex);
+					log.Error (ex);
 				}
 			} else
 				fileName = assemblyReference;
Index: Extras/MonoQuery/MonoQuery/MonoQueryService.cs
===================================================================
--- Extras/MonoQuery/MonoQuery/MonoQueryService.cs	(Revision 58404)
+++ Extras/MonoQuery/MonoQuery/MonoQueryService.cs	(Arbeitskopie)
@@ -42,6 +42,8 @@
 {
 	public class MonoQueryService : AbstractService
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		DbProviderCollection providers = null;
 		SqlDefinitionPad definitionPad = null;
 		
@@ -95,7 +97,7 @@
 							= (DbProviderCollection) serializer.Deserialize (fs);
 					}
 				} catch (Exception e) {
-					Runtime.LoggingService.Error ("Invalid monoquery file.");
+					log.Error ("Invalid monoquery file.");
 					File.Delete (serializedFile);
 				}
 			}
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor/SourceViewService.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor/SourceViewService.cs	(Revision 58404)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor/SourceViewService.cs	(Arbeitskopie)
@@ -12,6 +12,8 @@
 {
 	public class SourceViewService : AbstractService
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		SourceLanguagesManager slm;
 		static readonly string file = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Personal), ".config/MonoDevelop/SyntaxHighlighting.xml");
 
@@ -64,7 +66,7 @@
 								ParseColor (reader.GetAttribute ("foreground"), ref sts.Foreground);
 								ParseColor (reader.GetAttribute ("background"), ref sts.Background);
 								lang.SetTagStyle (name, sts);
-								Runtime.LoggingService.DebugFormat ("Overrode style {0} {1}", lang.Name, name);
+								log.DebugFormat ("Overrode style {0} {1}", lang.Name, name);
 								break;
 							case "SourceLanguage":
 								lang = FindLanguage (reader.GetAttribute ("name"));
@@ -77,7 +79,7 @@
 				}
 			}
 			catch (XmlException e) {
-				Runtime.LoggingService.Error (e.ToString ());
+				log.Error (e.ToString ());
 			}
 			reader.Close ();
 		}
@@ -158,7 +160,7 @@
 					writer.WriteEndAttribute ();
 
 					writer.WriteEndElement ();
-					Runtime.LoggingService.DebugFormat ("Preserved style {0} {1}", sl.Name, tag.Id);
+					log.DebugFormat ("Preserved style {0} {1}", sl.Name, tag.Id);
 				}
 
 				writer.WriteEndElement ();
