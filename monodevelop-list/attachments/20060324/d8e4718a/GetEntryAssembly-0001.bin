Index: Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns/AddInTreeSingleton.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns/AddInTreeSingleton.cs	(revision 58378)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns/AddInTreeSingleton.cs	(working copy)
@@ -20,11 +20,9 @@
 	/// </summary>
 	public class AddInTreeSingleton
 	{
-		static DefaultAddInTree addInTree = null;
-		readonly static string defaultCoreDirectory = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location) + // DON'T REPLACE
-		Path.DirectorySeparatorChar + ".." +
-		Path.DirectorySeparatorChar + "AddIns";
-		
+		static DefaultAddInTree addInTree = null;		
+		readonly static string defaultCoreDirectory = 
+			PropertyService.EntryAssemblyDirectory + Path.DirectorySeparatorChar + ".." + Path.DirectorySeparatorChar + "AddIns";			
 		static bool ignoreDefaultCoreDirectory = false;
 		static string[] addInDirectories       = null;
 		
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns.Setup/SetupService.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns.Setup/SetupService.cs	(revision 58378)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns.Setup/SetupService.cs	(working copy)
@@ -71,8 +71,12 @@
 			get { return addInDirs; }
 		}
 		
-		string BinPath {
-			get { return Path.GetDirectoryName (Assembly.GetEntryAssembly().Location); } 
+		string BinPath
+		{
+			get
+			{
+				return PropertyService.EntryAssemblyDirectory;
+			} 
 		}
 		
 		string UserConfigPath {
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/DefaultLoggingService.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/DefaultLoggingService.cs	(revision 58378)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/DefaultLoggingService.cs	(working copy)
@@ -16,7 +16,7 @@
 
 		public DefaultLoggingService()
 		{
-			if (File.Exists (Assembly.GetEntryAssembly().Location + ".config"))
+			if (Assembly.GetEntryAssembly() != null && File.Exists(Assembly.GetEntryAssembly().Location + ".config"))
 				XmlConfigurator.Configure ();
 			else
 				BasicConfigurator.Configure ();
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/FileUtilityService.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/FileUtilityService.cs	(revision 58378)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/FileUtilityService.cs	(working copy)
@@ -33,7 +33,7 @@
 		
 		public FileUtilityService()
 		{
-			sharpDevelopRootPath = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location) + Path.DirectorySeparatorChar + "..";
+			sharpDevelopRootPath = PropertyService.EntryAssemblyDirectory + Path.DirectorySeparatorChar + "..";
 		}
 		
 		public override void UnloadService()
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/PropertyService.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/PropertyService.cs	(revision 58378)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/PropertyService.cs	(working copy)
@@ -36,10 +36,8 @@
 			
 			if (confDataDirectory != null) {
 				dataDirectory = confDataDirectory;
-			} else {
-				dataDirectory = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location) + 
-				                                       Path.DirectorySeparatorChar + ".." +
-				                                       Path.DirectorySeparatorChar + "data";
+			} else {				
+				dataDirectory = EntryAssemblyDirectory + Path.DirectorySeparatorChar + ".." + Path.DirectorySeparatorChar + "data";
 			}
 
 			configDirectory = Environment.GetEnvironmentVariable ("XDG_CONFIG_HOME");
@@ -66,6 +64,17 @@
 			}
 		}
 		
+		public static string EntryAssemblyDirectory
+		{
+			get
+			{
+				if (Assembly.GetEntryAssembly() != null)
+					return Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
+
+				return AppDomain.CurrentDomain.BaseDirectory;
+			}
+		}
+
 		public PropertyService()
 		{
 			try {