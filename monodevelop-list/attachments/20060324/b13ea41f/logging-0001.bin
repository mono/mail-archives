Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/Runtime.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/Runtime.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/Runtime.cs	(Arbeitskopie)
@@ -43,7 +43,6 @@
 		static StringParserService stringParserService;
 		static SystemAssemblyService systemAssemblyService;
 		static FileUtilityService fileUtilityService;
-		static ILoggingService loggingService;
 		static AddInService addInService;
 		static SetupService setupService;
 		static bool initialized;
@@ -100,15 +99,6 @@
 			}
 		}
 	
-		public static ILoggingService LoggingService {
-			get {
-				if (loggingService == null)
-					loggingService = new DefaultLoggingService();
-				
-				return loggingService;
-			}
-		}
-	
 		public static AddInService AddInService {
 			get {
 				if (addInService == null)
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/ServiceManager.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/ServiceManager.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/ServiceManager.cs	(Arbeitskopie)
@@ -58,6 +58,8 @@
 	/// </summary>
 	public class ServiceManager
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ArrayList serviceList       = new ArrayList();
 		Hashtable servicesHashtable = new Hashtable();
 		Hashtable initializedServices = new Hashtable ();
@@ -204,7 +206,7 @@
 				if (IsInstanceOfType(serviceType, service)) {
 					servicesHashtable[serviceType] = service;
 					if (!initializedServices.Contains (service)) {
-						Runtime.LoggingService.Info (GettextCatalog.GetString ("Initializing service: ") + serviceType);
+						log.Info (GettextCatalog.GetString ("Initializing service: ") + serviceType);
 						service.InitializeService();
 						initializedServices [service] = service;
 					}
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns/AddInService.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns/AddInService.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns/AddInService.cs	(Arbeitskopie)
@@ -35,6 +35,8 @@
 {
 	public class AddInService
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ArrayList addInLoadErrors = new ArrayList ();
 		
 		internal void Initialize ()
@@ -167,10 +169,10 @@
 						AddinError err = AddInTreeSingleton.InsertAddIn (iad.ConfigFile);
 						if (err != null) {
 							ReportLoadError (err);
-							Runtime.LoggingService.Error ("Add-in failed to load: " + iad.Addin.Id);
-							Runtime.LoggingService.Error (err.Exception);
+							log.Error ("Add-in failed to load: " + iad.Addin.Id);
+							log.Error (err.Exception);
 						} else {
-							Runtime.LoggingService.Info ("Loaded add-in: " + iad.Addin.Id);
+							log.Info ("Loaded add-in: " + iad.Addin.Id);
 							AddIn ad = AddInTreeSingleton.AddInTree.AddIns [iad.Addin.Id];
 							ServiceManager.InitializeServices ("/Workspace/Services", ad);
 						}
Index: Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui/DispatchService.cs
===================================================================
--- Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui/DispatchService.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui/DispatchService.cs	(Arbeitskopie)
@@ -8,6 +8,8 @@
 {
 	public class DispatchService : AbstractService
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ArrayList arrBackgroundQueue;
 		ArrayList arrGuiQueue;
 		Thread thrBackground;
@@ -190,14 +192,14 @@
 		
 		private void HandlerError (GenericMessageContainer msg)
 		{
-			Runtime.LoggingService.Error (errormsg);
-			Runtime.LoggingService.Error (msg.Exception);
+			log.Error (errormsg);
+			log.Error (msg.Exception);
 			if (msg.CallerStack != null) {
-				Runtime.LoggingService.Error ("\nCaller stack:");
-				Runtime.LoggingService.Error (msg.CallerStack);
+				log.Error ("\nCaller stack:");
+				log.Error (msg.CallerStack);
 			}
 			else
-				Runtime.LoggingService.Error ("\n\nCaller stack not available. Define the environment variable MONODEVELOP_DISPATCH_DEBUG to enable caller stack capture.");
+				log.Error ("\n\nCaller stack not available. Define the environment variable MONODEVELOP_DISPATCH_DEBUG to enable caller stack capture.");
 		}
 	}
 
Index: Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.ProgressMonitoring/BaseProgressMonitor.cs
===================================================================
--- Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.ProgressMonitoring/BaseProgressMonitor.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.ProgressMonitoring/BaseProgressMonitor.cs	(Arbeitskopie)
@@ -38,6 +38,8 @@
 {
 	public class BaseProgressMonitor: GuiSyncObject, IProgressMonitor, IAsyncOperation
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		class MbrWrapper {
 			public ManualResetEvent waitEvent;
 
@@ -137,7 +139,7 @@
 			
 			errorsMessages.Add (message);
 			if (ex != null) {
-				Runtime.LoggingService.Error (ex);
+				log.Error (ex);
 				errorException = ex;
 			}
 		}
Index: Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.ProgressMonitoring/MessageDialogProgressMonitor.cs
===================================================================
--- Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.ProgressMonitoring/MessageDialogProgressMonitor.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.ProgressMonitoring/MessageDialogProgressMonitor.cs	(Arbeitskopie)
@@ -40,6 +40,8 @@
 	
 	public class MessageDialogProgressMonitor: BaseProgressMonitor
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		StringCollection errorsMessages = new StringCollection ();
 		StringCollection warningMessages = new StringCollection ();
 		Exception errorException;
@@ -139,7 +141,7 @@
 			
 			errorsMessages.Add (message);
 			if (ex != null) {
-				Runtime.LoggingService.Error (ex);
+				log.Error (ex);
 				errorException = ex;
 			}
 			
Index: Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/WizardDialog.cs
===================================================================
--- Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/WizardDialog.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/WizardDialog.cs	(Arbeitskopie)
@@ -24,6 +24,8 @@
 	/// </summary>
 	public class WizardDialog : Dialog
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		StatusPanel       statusPanel  = null;
 		
 		Gtk.Frame             dialogPanel  = new Gtk.Frame();
@@ -183,7 +185,7 @@
 				dialogPanel.Remove (dialogPanel.Child);
 			}
 			if (CurrentWizardPane.ToString () == "MonoDevelop.Core.Gui.OptionPanels.CompletionDatabaseWizard.CreationFinishedPanel") {
-				Runtime.LoggingService.Fatal ("This is an ugly hack for an even uglier bug, Restart MD now");
+				log.Fatal ("This is an ugly hack for an even uglier bug, Restart MD now");
 				System.Environment.Exit (0);
 			}
 			dialogPanel.Add(CurrentWizardPane.Control);
Index: Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/ResourceService.cs
===================================================================
--- Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/ResourceService.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/ResourceService.cs	(Arbeitskopie)
@@ -43,6 +43,8 @@
 {
 	public class ResourceService : AbstractService
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		Gtk.IconFactory iconFactory = null;
 		Hashtable stockMappings = null;
 		
@@ -255,8 +257,7 @@
 			catch (GLib.GException ex) {
 				// just discard the exception, the icon simply can't be
 				// loaded
-				Runtime.LoggingService.Info(typeof(ResourceService).ToString(), "Warning: can't load " + filename +
-				                   " icon file");
+				log.Info("Warning: can't load " + filename + " icon file");
 			}
 		}
 		
Index: Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/AbstractWizardPanel.cs
===================================================================
--- Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/AbstractWizardPanel.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Core.Gui/MonoDevelop.Core.Gui.Dialogs/AbstractWizardPanel.cs	(Arbeitskopie)
@@ -12,6 +12,8 @@
 {
 	public abstract class AbstractWizardPanel : AbstractOptionPanel, IWizardPanel
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		string nextWizardPanelID = String.Empty;
 		bool   enablePrevious    = true;
 		bool   enableNext        = true;
@@ -136,7 +138,7 @@
 
 		public override bool ReceiveDialogMessage (DialogMessage a)
 		{
-			//Runtime.LoggingService.Info ("In middle receive dialog message");
+			//log.Info ("In middle receive dialog message");
 			return true;
 		}
 	}
Index: Core/src/MonoDevelop.Components/MonoDevelop.Components.HtmlControl/MozillaControl.cs
===================================================================
--- Core/src/MonoDevelop.Components/MonoDevelop.Components.HtmlControl/MozillaControl.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Components/MonoDevelop.Components.HtmlControl/MozillaControl.cs	(Arbeitskopie)
@@ -13,6 +13,8 @@
 {
 	public class MozillaControl : WebControl, IWebBrowser
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		internal static GLib.GType gtype;
 		private string html;
 		private string css;
@@ -83,7 +85,7 @@
 
 		public void InitializeWithBase (string base_uri)
 		{
-			//Runtime.LoggingService.Info (base_uri);
+			//log.Info (base_uri);
 			if (html.Length > 0)
 			{
 				this.RenderData (html, base_uri, "text/html");
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects/Combine.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects/Combine.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects/Combine.cs	(Arbeitskopie)
@@ -30,6 +30,8 @@
 	[DataInclude (typeof(CombineConfiguration))]
 	public class Combine : CombineEntry
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		[ItemProperty ("description", DefaultValue = "")]
 		string description = null;
 		
@@ -693,7 +695,7 @@
 					projects.Add ((Project)entry);
 				}
 				else
-					Runtime.LoggingService.ErrorFormat ("Dont know how to generate makefiles for {0}", entry);
+					log.ErrorFormat ("Dont know how to generate makefiles for {0}", entry);
 			}
 			
 			string rel_outputdir = Runtime.FileUtilityService.AbsoluteToRelativePath (BaseDirectory, outputdir);
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects/Project.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects/Project.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects/Project.cs	(Arbeitskopie)
@@ -36,6 +36,8 @@
 	[DataInclude (typeof(ProjectFile))]
 	public abstract class Project : CombineEntry
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		[ItemProperty ("Description", DefaultValue="")]
 		protected string description     = "";
 
@@ -210,7 +212,7 @@
 								File.Copy (referenceFileName + ".mdb", destinationFileName + ".mdb", true);
 						}
 					} catch (Exception e) {
-						Runtime.LoggingService.ErrorFormat ("Can't copy reference file from {0} to {1} reason {2}", referenceFileName, destinationFileName, e);
+						log.ErrorFormat ("Can't copy reference file from {0} to {1} reason {2}", referenceFileName, destinationFileName, e);
 					}
 				}
 				if (projectReference.ReferenceType == ReferenceType.Project && RootCombine != null) {
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects/DotNetProject.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects/DotNetProject.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects/DotNetProject.cs	(Arbeitskopie)
@@ -20,6 +20,8 @@
 	[DataInclude (typeof(DotNetProjectConfiguration))]
 	public class DotNetProject : Project
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		[ItemProperty]
 		string language;
 		
@@ -179,7 +181,7 @@
 		
 		public override void GenerateMakefiles (Combine parentCombine)
 		{
-			Runtime.LoggingService.DebugFormat ("Generating makefiles for {0}",
+			log.DebugFormat ("Generating makefiles for {0}",
 				Name);
 			languageBinding.GenerateMakefile (this, parentCombine);
 		}
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyAttribute.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyAttribute.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyAttribute.cs	(Arbeitskopie)
@@ -24,6 +24,8 @@
 	[Serializable]
 	internal class SharpAssemblyAttribute : AbstractAttribute
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		SharpAssemblyClass attributeType;
 		
 		public SharpAssemblyClass AttributeType {
@@ -44,7 +46,7 @@
 				
 				int table = assembly.Reader.GetCodedIndexTable(CodedIndex.MemberRefParent, ref trIndex);
 				if (table != 1) {
-					Runtime.LoggingService.Debug ("SharpAssemblyAttribute: unsupported MemberRefParent coded index");
+					log.Debug ("SharpAssemblyAttribute: unsupported MemberRefParent coded index");
 					return; // unsupported
 				}
 				
@@ -94,7 +96,7 @@
 				
 				ushort prolog = binaryReader.ReadUInt16();
 				if (prolog != 1) {
-					Runtime.LoggingService.Debug ("SharpAssemblyAttribute: Wrong prolog in argument list");
+					log.Debug ("SharpAssemblyAttribute: Wrong prolog in argument list");
 					return;
 				}
 				
@@ -114,11 +116,11 @@
 							}
 						}
 						
-						Runtime.LoggingService.Debug ("Enum: return type = " + rettypename);
+						log.Debug ("Enum: return type = " + rettypename);
 						
 						object argValue = GetFixedArg(argBlob, binaryReader, rettypename);
 						
-						Runtime.LoggingService.Debug ("Enum: arg value = " + argValue.ToString());
+						log.Debug ("Enum: arg value = " + argValue.ToString());
 						
 							foreach (IField field in underlyingClass.Fields) {
 								if (field is SharpAssemblyField) {
@@ -133,7 +135,7 @@
 												// if the value cannot be found
 						positionalArguments.Add(argValue.ToString());
 						
-						Runtime.LoggingService.Debug ("Enum: no name found");
+						log.Debug ("Enum: no name found");
 						
 					namefound: ;
 						
@@ -163,8 +165,8 @@
 				
 				binaryReader.Close();
 			} catch (Exception) {
-				Runtime.LoggingService.Debug ("SharpAssemblyAttribute: Error loading arguments.");
-				//Runtime.LoggingService.Info(e.ToString());
+				log.Debug ("SharpAssemblyAttribute: Error loading arguments.");
+				//log.Info(e.ToString());
 			}
 		}
 		
@@ -232,7 +234,7 @@
 				try {
 					ret += (string)de.Key + " = " + (string)de.Value + ", ";
 				} catch {
-					Runtime.LoggingService.Error ("error in namedArguments");
+					log.Error ("error in namedArguments");
 				}
 			}
 			
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyReturnType.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyReturnType.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyReturnType.cs	(Arbeitskopie)
@@ -22,6 +22,8 @@
 	[Serializable]
 	public class SharpAssemblyReturnType : AbstractReturnType
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ArrayList      arrayRanks = null;
 		
 		SharpAssemblyClass underlyingClass;
@@ -98,7 +100,7 @@
 						} else {
 							fullyQualifiedName = assembly.GetStringFromHeap(typeRefTable[index].Nspace) + "." + 
 						                                                assembly.GetStringFromHeap(typeRefTable[index].Name);
-						    Runtime.LoggingService.Info("GetDataType: TypeRef not resolved!");
+						    log.Info("GetDataType: TypeRef not resolved!");
 						}
 						declaredin = asm.GetRefAssemblyFor(index);
 					} else {
@@ -138,7 +140,7 @@
 					break;
 				
 				default:
-					Runtime.LoggingService.Debug ("NOT supported: " + dt.ToString());
+					log.Debug ("NOT supported: " + dt.ToString());
 					fullyQualifiedName += " NOT_SUPPORTED [" + dt.ToString() + "]";
 					break;
 			}
@@ -174,7 +176,7 @@
 			} else {
 				FullyQualifiedName = assembly.Reader.GetStringFromHeap(typeRefTable[index].Nspace) + "." + 
 			                                                assembly.Reader.GetStringFromHeap(typeRefTable[index].Name);
-			    Runtime.LoggingService.Debug ("SharpAssemblyReturnType from TypeRef: TypeRef not resolved!");
+			    log.Debug ("SharpAssemblyReturnType from TypeRef: TypeRef not resolved!");
 			}
 			declaredin = assembly.GetRefAssemblyFor(index);
 		}
@@ -185,7 +187,7 @@
 			try {
 				GetDataType(assembly, ref blobSignatureIndex);
 			} catch (Exception e) {
-				Runtime.LoggingService.Error ("Got exception in ReturnType creation: " + e.ToString());
+				log.Error ("Got exception in ReturnType creation: " + e.ToString());
 				FullyQualifiedName = "GOT_EXCEPTION";
 			}
 			
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyClass.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyClass.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyClass.cs	(Arbeitskopie)
@@ -22,6 +22,8 @@
 	[Serializable]
 	public class SharpAssemblyClass : AbstractClass
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ClassCollection baseTypeCollection = new ClassCollection();
 		
 		public ClassCollection BaseTypeCollection {
@@ -47,7 +49,7 @@
 				case 3: // TypeRef -- nested type
 					return GetNestedName(asm, typeRefTable, val) + "+" + asm.Reader.GetStringFromHeap(typeRefTable[index].Name);
 				default: // other token - not supported
-					Runtime.LoggingService.Debug ("GetNestedName: Unsupported resolution scope!");
+					log.Debug ("GetNestedName: Unsupported resolution scope!");
 					goto case 3;
 			}
 		}
@@ -80,7 +82,7 @@
 			SharpAssembly_ declaringAssembly = referencingAssembly.GetRefAssemblyFor(index);
 			if (declaringAssembly == null) {
 				Console.Write("FromTypeRef failed for: " + name + " declared in assembly " + referencingAssembly.Name);
-				Runtime.LoggingService.Debug (": Declaring assembly not found.");
+				log.Debug (": Declaring assembly not found.");
 				return null;
 			}
 			
@@ -105,7 +107,7 @@
 			}
 			
 			Console.Write("FromTypeRef failed for: " + name + " declared in assembly " + referencingAssembly.Name);
-			Runtime.LoggingService.Debug (": Matching type not found for nested name: " + nestedName);
+			log.Debug (": Matching type not found for nested name: " + nestedName);
 			return null;
 		}
 		
@@ -296,7 +298,7 @@
 				case 1:  // TypeRef
 					return FromTypeRef(assembly, nIndex);
 				default:
-					Runtime.LoggingService.Debug ("GetTypeRefOrDefClass: Wrong TypeDefOrRef coded index!");
+					log.Debug ("GetTypeRefOrDefClass: Wrong TypeDefOrRef coded index!");
 					return null;
 			}
 		}
@@ -432,7 +434,7 @@
 					IClass newclass = new SharpAssemblyClass(assembly, typeDefTable, i);
 					classes.Add(newclass);
 				} catch {
-					Runtime.LoggingService.Debug ("GetAssemblyTypes: Error loading class " + i);
+					log.Debug ("GetAssemblyTypes: Error loading class " + i);
 				}
 			}
 			
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/DefaultParserService.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/DefaultParserService.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/DefaultParserService.cs	(Arbeitskopie)
@@ -230,7 +230,7 @@
 			// being thrown and corrupting the textarea control
 			try {
 				IParser parser = parserService.GetParser (fileName);
-				//Runtime.LoggingService.DebugFormat ("Parse info : {0}", GetParseInformation(fileName).MostRecentCompilationUnit.Tag);
+				//log.DebugFormat ("Parse info : {0}", GetParseInformation(fileName).MostRecentCompilationUnit.Tag);
 				if (parser != null) {
 					return parser.Resolve (this, expression, caretLineNumber, caretColumn, fileName, fileContent);
 				}
@@ -316,6 +316,8 @@
 	
 	internal class ParserDatabase : IParserDatabase
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		DefaultParserService parserService;
 		CodeCompletionDatabase coreDatabase;
 		bool threadRunning;
@@ -504,7 +506,7 @@
 						return;
 				}
 				catch (Exception ex) {
-					Runtime.LoggingService.Error (ex);
+					log.Error (ex);
 				}
 			}
 
@@ -1021,7 +1023,7 @@
 				} else
 					return this.GetCachedParseInformation (fileName);
 			} catch (Exception e) {
-				Runtime.LoggingService.Error (e.ToString ());
+				log.Error (e.ToString ());
 				return null;
 			}
 		}
@@ -1210,7 +1212,7 @@
 		
 		public string SearchNamespace (CodeCompletionDatabase db, IUsing usin, string partitialNamespaceName, bool caseSensitive)
 		{
-//			Runtime.LoggingService.DebugFormat ("SearchNamespace : >{0}<", partitialNamespaceName);
+//			log.DebugFormat ("SearchNamespace : >{0}<", partitialNamespaceName);
 			if (NamespaceExists (db, partitialNamespaceName, caseSensitive)) {
 				return partitialNamespaceName;
 			}
@@ -1299,7 +1301,7 @@
 		
 		public IClass SearchType (CodeCompletionDatabase db, IUsing iusing, string partitialTypeName, bool caseSensitive)
 		{
-			Runtime.LoggingService.Debug ("Search type : >{0}<", partitialTypeName);
+			log.DebugFormat ("Search type : >{0}<", partitialTypeName);
 			IClass c = GetClass (db, partitialTypeName, caseSensitive);
 			if (c != null) {
 				return c;
@@ -1307,10 +1309,10 @@
 			
 			foreach (string str in iusing.Usings) {
 				string possibleType = String.Concat(str, ".", partitialTypeName);
-				Runtime.LoggingService.Debug ("looking for {0}", possibleType);
+				log.DebugFormat ("looking for {0}", possibleType);
 				c = GetClass (db, possibleType, caseSensitive);
 				if (c != null) {
-					Runtime.LoggingService.Debug ("Found!");
+					log.Debug ("Found!");
 					return c;
 				}
 			}
@@ -1320,10 +1322,10 @@
 			if (declaringNamespace != null) {
 				while (declaringNamespace.Length > 0) {
 					string className = String.Concat(declaringNamespace, ".", partitialTypeName);
-					Runtime.LoggingService.DebugFormat ("looking for {0}", className);
+					log.DebugFormat ("looking for {0}", className);
 					c = GetClass (db, className, caseSensitive);
 					if (c != null) {
-						Runtime.LoggingService.Debug ("Found!");
+						log.Debug ("Found!");
 						return c;
 					}
 					int index = declaringNamespace.IndexOf('.');
@@ -1341,10 +1343,10 @@
 					string className = null;
 					if (aliasString.Length > 0) {
 						className = String.Concat(entry.Value.ToString(), partitialTypeName.Remove(0, aliasString.Length));
-						Runtime.LoggingService.DebugFormat ("looking for {0}", className);
+						log.DebugFormat ("looking for {0}", className);
 						c = GetClass (db, className, caseSensitive);
 						if (c != null) {
-							Runtime.LoggingService.Debug ("Found!");
+							log.Debug ("Found!");
 							return c;
 						}
 					}
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyField.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyField.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyField.cs	(Arbeitskopie)
@@ -22,6 +22,8 @@
 	[Serializable]
 	internal class SharpAssemblyField : AbstractField
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		public SharpAssemblyField(SharpAssembly_ assembly, Field[] fieldTable, SharpAssemblyClass declaringtype, uint index)
 		{
 			if (assembly == null) {
@@ -133,7 +135,7 @@
 					}
 					binReader.Close();
 				} catch {
-					Runtime.LoggingService.Error ("SharpAssemblyField: Error reading constant value");
+					log.Error ("SharpAssemblyField: Error reading constant value");
 				}
 			}
 		}
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AssemblyInformation.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AssemblyInformation.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AssemblyInformation.cs	(Arbeitskopie)
@@ -29,6 +29,8 @@
 	[Serializable]
 	internal class AssemblyInformation : MarshalByRefObject
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ClassCollection classes = new ClassCollection();
 		string fileName;
 		
@@ -52,7 +54,7 @@
 		
 /*		byte[] GetBytes (string fileName)
 		{
-			Runtime.LoggingService.Info (fileName);
+			log.Info (fileName);
 			FileStream fs = System.IO.File.OpenRead(fileName);
 			long size = fs.Length;
 			byte[] outArray = new byte[size];
@@ -70,7 +72,7 @@
 //			TypeDef[] typeDefTable = (TypeDef[])assembly.MetadataTable.Tables[TypeDef.TABLE_ID];
 //			
 //			for (int i = 0; i < typeDefTable.Length; ++i) {
-//				Runtime.LoggingService.Info("ADD " + i);
+//				log.Info("ADD " + i);
 //				classes.Add(new SharpAssemblyClass(assembly, typeDefTable, i));
 //			}
 			
@@ -114,7 +116,7 @@
 			} catch {
 			}
 			if(asm == null) {
-				Runtime.LoggingService.ErrorFormat ("Unable to load {0}", fileName);
+				log.ErrorFormat ("Unable to load {0}", fileName);
 				return;
 			}
 			foreach (Type type in asm.GetTypes()) {
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AssemblyCodeCompletionDatabase.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AssemblyCodeCompletionDatabase.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/AssemblyCodeCompletionDatabase.cs	(Arbeitskopie)
@@ -41,6 +41,8 @@
 {	
 	internal class AssemblyCodeCompletionDatabase: CodeCompletionDatabase
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		bool useExternalProcess = true;
 		string baseDir;
 		string assemblyName;
@@ -150,7 +152,7 @@
 			if (!File.Exists (checkFile) || version != FORMAT_VERSION) {
 				string dataFile = Path.Combine (baseDir, name + ".pidb");
 				File.Delete (dataFile);
-				Runtime.LoggingService.Info ("Deleted " + dataFile);
+				log.Info ("Deleted " + dataFile);
 			}
 		}
 		
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyEvent.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyEvent.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/SharpAssemblyEvent.cs	(Arbeitskopie)
@@ -23,6 +23,8 @@
 	[Serializable]
 	internal class SharpAssemblyEvent : AbstractEvent
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		public SharpAssemblyEvent(SharpAssembly_ asm, Event[] eventTable, SharpAssemblyClass declaringtype, uint index)
 		{
 			if (asm == null) {
@@ -123,7 +125,7 @@
 
 			} else {                  // TypeSpec
 				returnType = new SharpAssemblyReturnType("NOT_SUPPORTED");
-				Runtime.LoggingService.Debug ("SharpAssemblyEvent: TypeSpec -- not supported");
+				log.Debug ("SharpAssemblyEvent: TypeSpec -- not supported");
 			}
 			
 		}
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/CodeCompletionDatabase.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/CodeCompletionDatabase.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/CodeCompletionDatabase.cs	(Arbeitskopie)
@@ -45,6 +45,8 @@
 {
 	internal class CodeCompletionDatabase: IDisposable
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		static readonly int MAX_ACTIVE_COUNT = 100;
 		static readonly int MIN_ACTIVE_COUNT = 50;
 		static protected readonly int FORMAT_VERSION = 6;
@@ -120,7 +122,7 @@
 					currentGetTime = 0;
 					CloseReader ();
 					
-					Runtime.LoggingService.Debug ("Reading " + dataFile);
+					log.Debug ("Reading " + dataFile);
 					ifile = new FileStream (dataFile, FileMode.Open, FileAccess.Read, FileShare.Read);
 					BinaryFormatter bf = new BinaryFormatter ();
 					
@@ -148,7 +150,7 @@
 				catch (Exception ex)
 				{
 					if (ifile != null) ifile.Close ();
-					Runtime.LoggingService.Error ("PIDB file '" + dataFile + "' couldn not be loaded: '" + ex.Message + "'. The file will be recreated");
+					log.Error ("PIDB file '" + dataFile + "' couldn not be loaded: '" + ex.Message + "'. The file will be recreated");
 					rootNamespace = new NamespaceEntry ();
 					files = new Hashtable ();
 					references = new ArrayList ();
@@ -175,7 +177,7 @@
 				modified = false;
 				headers["Version"] = FORMAT_VERSION;
 							
-				Runtime.LoggingService.Debug ("Writing " + dataFile);
+				log.Debug ("Writing " + dataFile);
 				
 				string tmpDataFile = dataFile + ".tmp";
 				FileStream dfile = new FileStream (tmpDataFile, FileMode.Create, FileAccess.Write, FileShare.Write);
@@ -334,7 +336,7 @@
 		{
 			lock (rwlock)
 			{
-//				Runtime.LoggingService.Debug ("GET CLASS " + typeName + " in " + dataFile);
+				// log.Debug ("GET CLASS " + typeName + " in " + dataFile);
 				string[] path = typeName.Split ('.');
 				int len = path.Length - 1;
 				
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/WordCountDialog.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/WordCountDialog.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/WordCountDialog.cs	(Arbeitskopie)
@@ -21,6 +21,8 @@
 {
 	internal class WordCountDialog : Dialog
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ScrolledWindow scrolledwindow;
 		TreeView resultListView;
 		TreeStore store;
@@ -219,7 +221,7 @@
 		
 		private SortType ReverseSort (SortType st)
 		{
-			//Runtime.LoggingService.Info (st);
+			//log.Info (st);
 			if (st == SortType.Ascending)
 				return SortType.Descending;
 			else
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/AssemblyReferencePanel.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/AssemblyReferencePanel.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/AssemblyReferencePanel.cs	(Arbeitskopie)
@@ -19,6 +19,8 @@
 {
 	internal class AssemblyReferencePanel : HBox, IReferencePanel
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		SelectReferenceDialog selectDialog;
 		FileChooserWidget chooser;
 		
@@ -79,7 +81,7 @@
 		
 		public void AddReference(object sender, EventArgs e)
 		{
-			//System.Runtime.LoggingService.Info("This panel will contain a file browser, but so long use the browse button :)");
+			//log.Info("This panel will contain a file browser, but so long use the browse button :)");
 		}
 	}
 }
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/IncludeFilesDialog.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/IncludeFilesDialog.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/IncludeFilesDialog.cs	(Arbeitskopie)
@@ -22,6 +22,8 @@
 {
 	public class IncludeFilesDialog
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		// gtk widgets
 		[Glade.Widget] Button okbutton;
 		[Glade.Widget] Button cancelbutton;
@@ -42,7 +44,7 @@
 		
 		public IncludeFilesDialog(Project project, StringCollection newFiles)
 		{
-			Runtime.LoggingService.Debug ("*** Include files dialog ***");
+			log.Debug ("*** Include files dialog ***");
 			// we must do it from *here* otherwise, we get this assembly, not the caller
 			Glade.XML glade = new Glade.XML (typeof (IncludeFilesDialog).Assembly, "Base.glade", "IncludeFilesDialogWidget", null);
 			glade.Autoconnect (this);
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/NewFileDialog.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/NewFileDialog.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/NewFileDialog.cs	(Arbeitskopie)
@@ -30,6 +30,8 @@
 	/// </summary>
 	internal class NewFileDialog : Dialog
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ArrayList alltemplates = new ArrayList ();
 		ArrayList categories   = new ArrayList ();
 		Hashtable icons        = new Hashtable ();
@@ -89,7 +91,7 @@
 					imglist.Add(bitmap);
 					tmp[entry.Key] = ++i;
 				} else {
-					Runtime.LoggingService.ErrorFormat(GettextCatalog.GetString ("Can't load bitmap {0} using default"), entry.Key.ToString ());
+					log.ErrorFormat(GettextCatalog.GetString ("Can't load bitmap {0} using default"), entry.Key.ToString ());
 				}
 			}
 			
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.CodeTemplates/CodeTemplateLoader.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.CodeTemplates/CodeTemplateLoader.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.CodeTemplates/CodeTemplateLoader.cs	(Arbeitskopie)
@@ -24,6 +24,8 @@
 	/// </summary>
 	public class CodeTemplateLoader
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		static string TemplateFileName = "MonoDevelop-templates.xml";
 		static string TemplateVersion  = "2.0";
 		
@@ -96,7 +98,7 @@
 		static CodeTemplateLoader()
 		{
 			if (!LoadTemplatesFromStream(Path.Combine(Runtime.Properties.ConfigDirectory, TemplateFileName))) {
-				Runtime.LoggingService.Info("Templates: can't load user defaults, reading system defaults");
+				log.Info("Templates: can't load user defaults, reading system defaults");
 				if (!LoadTemplatesFromStream(Runtime.Properties.DataDirectory + 
 				                             Path.DirectorySeparatorChar   + "options" +
 				                             Path.DirectorySeparatorChar   + TemplateFileName)) {
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/Ide.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/Ide.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/Ide.cs	(Arbeitskopie)
@@ -54,6 +54,8 @@
 {
 	public abstract class IdeApp
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		static Workbench workbench = new Workbench ();
 		static ProjectOperations projectOperations = new ProjectOperations ();
 		static HelpOperations helpOperations = new HelpOperations ();
@@ -120,7 +122,7 @@
 						IdeApp.Workbench.OpenDocument (file);
 					
 					} catch (Exception e) {
-						Runtime.LoggingService.InfoFormat("unable to open file {0} exception was :\n{1}", file, e.ToString());
+						log.InfoFormat("unable to open file {0} exception was :\n{1}", file, e.ToString());
 					}
 				}
 			}
@@ -138,7 +140,7 @@
 				try {
 					typeof(CommandHandler).GetMethod ("Run", System.Reflection.BindingFlags.NonPublic|System.Reflection.BindingFlags.Instance, null, Type.EmptyTypes, null).Invoke (handler, null);
 				} catch (Exception ex) {
-					Runtime.LoggingService.Error (ex);
+					log.Error (ex);
 				}
 			}
 			monitor.EndTask ();
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/DefaultWorkbench.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/DefaultWorkbench.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/DefaultWorkbench.cs	(Arbeitskopie)
@@ -36,6 +36,8 @@
 	/// </summary>
 	internal class DefaultWorkbench : Gtk.Window, IWorkbench
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		readonly static string mainMenuPath    = "/SharpDevelop/Workbench/MainMenu";
 		readonly static string viewContentPath = "/SharpDevelop/Workbench/Pads";
 		readonly static string toolbarsPath = "/SharpDevelop/Workbench/ToolBar";
@@ -126,7 +128,7 @@
 		public DefaultWorkbench() : base (Gtk.WindowType.Toplevel)
 		{
 			Title = "MonoDevelop";
-			Runtime.LoggingService.Info ("Creating DefaultWorkbench");
+			log.Info ("Creating DefaultWorkbench");
 		
 			windowChangeEventHandler = new EventHandler(OnActiveWindowChanged);
 
@@ -159,7 +161,7 @@
 						else
 							IdeApp.Workbench.OpenDocument (file);
 					} catch (Exception e) {
-						Runtime.LoggingService.ErrorFormat ("unable to open file {0} exception was :\n{1}", file, e.ToString());
+						log.ErrorFormat ("unable to open file {0} exception was :\n{1}", file, e.ToString());
 					}
 				}
 			}
@@ -218,7 +220,7 @@
 						((IMementoCapable)content).SetMemento(memento);
 					}
 				} catch (Exception e) {
-					Runtime.LoggingService.Error ("Can't get/set memento : " + e.ToString());
+					log.Error ("Can't get/set memento : " + e.ToString());
 				}
 			}
 			
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/SdiWorkspaceLayout.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/SdiWorkspaceLayout.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/SdiWorkspaceLayout.cs	(Arbeitskopie)
@@ -33,6 +33,8 @@
 	/// </summary>
 	internal class SdiWorkbenchLayout : IWorkbenchLayout
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		static string configFile = Runtime.Properties.ConfigDirectory + "DefaultEditingLayout.xml";
 
 		// contains the fully qualified name of the current layout (ie. Edit.Default)
@@ -307,7 +309,7 @@
 				}
 			}
 			
-			Runtime.LoggingService.Debug ("Default Layout created.");
+			log.Debug ("Default Layout created.");
 			dockLayout = new DockLayout (dock);
 			if (System.IO.File.Exists (configFile)) {
 				dockLayout.LoadFromFile (configFile);
@@ -320,7 +322,7 @@
 		{
 			workbench.ContextChanged -= contextChangedHandler;
 
-			Runtime.LoggingService.Debug ("Call to SdiWorkSpaceLayout.Detach");
+			log.Debug ("Call to SdiWorkSpaceLayout.Detach");
 			dockLayout.SaveLayout (currentLayout);
 			dockLayout.SaveToFile (configFile);
 			rootWidget.Remove(((DefaultWorkbench)workbench).TopMenu);
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/HelpViewer.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/HelpViewer.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/HelpViewer.cs	(Arbeitskopie)
@@ -12,6 +12,8 @@
 
 	public class HelpViewer : AbstractViewContent
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		HTML html_viewer = new HTML ();
 
 		ScrolledWindow scroller = new ScrolledWindow ();
@@ -47,7 +49,7 @@
 
 		void UrlRequested (object sender, UrlRequestedArgs args)
 		{
-			Runtime.LoggingService.DebugFormat ("Image requested: {0}", args.Url);
+			log.DebugFormat ("Image requested: {0}", args.Url);
 			Stream s = Services.DocumentationService.HelpTree.GetImage (args.Url);
 			
 			if (s != null) {
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/ToolsCommands.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/ToolsCommands.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/ToolsCommands.cs	(Arbeitskopie)
@@ -39,6 +39,8 @@
 	
 	internal class ToolListHandler: CommandHandler
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		protected override void Update (CommandArrayInfo info)
 		{
 			for (int i = 0; i < ToolLoader.Tool.Count; ++i) {
@@ -73,8 +75,8 @@
 			}
 			
 			// debug command and args
-			Runtime.LoggingService.Debug("command : " + command);
-			Runtime.LoggingService.Debug("args    : " + args);
+			log.Debug("command : " + command);
+			log.Debug("args    : " + args);
 			
 			// create the process
 			IProgressMonitor monitor = IdeApp.Workbench.ProgressMonitors.GetRunProgressMonitor ();
@@ -90,7 +92,7 @@
 					p = Runtime.ProcessService.StartProcess (command, args, workingDirectory, null);
 
 				p.WaitForOutput ();
-				Runtime.LoggingService.Debug ("DONE");
+				log.Debug ("DONE");
 				
 				monitor.Log.WriteLine ();
 				if (p.ExitCode == 0) {
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.ExternalTools/ToolLoader.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.ExternalTools/ToolLoader.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.ExternalTools/ToolLoader.cs	(Arbeitskopie)
@@ -22,6 +22,8 @@
 	/// </summary>
 	internal class ToolLoader
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		static string TOOLFILE        = "MonoDevelop-tools.xml";
 		static string TOOLFILEVERSION = "1";
 		
@@ -76,7 +78,7 @@
 		static ToolLoader()
 		{
 			if (!LoadToolsFromStream (Runtime.Properties.ConfigDirectory + TOOLFILE)) {
-				//Runtime.LoggingService.Info("Tools: can't load user defaults, reading system defaults");
+				//log.Info("Tools: can't load user defaults, reading system defaults");
 				if (!LoadToolsFromStream (Runtime.Properties.DataDirectory +
 				                         Path.DirectorySeparatorChar + "options" + 
 				                         Path.DirectorySeparatorChar + TOOLFILE)) {
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/FileList.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/FileList.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/FileList.cs	(Arbeitskopie)
@@ -19,6 +19,8 @@
 {
 	internal class FileList : Gtk.TreeView
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		private FileSystemWatcher watcher;
 		private ArrayList Items;
 		private Gtk.ListStore store;
@@ -87,7 +89,7 @@
 		}
 		
 		void ItemRemoved (FileListItem item) {
-			Runtime.LoggingService.Debug ("remove called");
+			log.Debug ("remove called");
 			store.Remove (ref selectedIter);
 		}
 		
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/MonodocTreePad.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/MonodocTreePad.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/MonodocTreePad.cs	(Arbeitskopie)
@@ -19,6 +19,8 @@
 {
 	internal class HelpTree : AbstractPadContent
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		TreeStore store;
 		TreeView  tree_view;
 
@@ -106,7 +108,7 @@
 					IdeApp.HelpOperations.ShowDocs (s, match, url);
 					return;
 				}
-				Runtime.LoggingService.Error ("Couldnt find match");
+				log.Error ("Couldnt find match");
 			}
 		}
 
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.BrowserDisplayBinding/HtmlViewPane.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.BrowserDisplayBinding/HtmlViewPane.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.BrowserDisplayBinding/HtmlViewPane.cs	(Arbeitskopie)
@@ -21,6 +21,8 @@
 {
 	public class BrowserPane : AbstractViewContent, ISecondaryViewContent
 	{	
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		protected HtmlViewPane htmlViewPane;
 		protected IViewContent parent;
 
@@ -55,7 +57,7 @@
 					GLib.Timeout.Add (50, new GLib.TimeoutHandler (checkFocus));
 					
 				} catch {
-					Runtime.LoggingService.Error ("Gecko# tossed an exception");
+					log.Error ("Gecko# tossed an exception");
 				}
 			}
 		}
Index: Extras/prj2make-sharp-lib/pkgconfiginvoker.cs
===================================================================
--- Extras/prj2make-sharp-lib/pkgconfiginvoker.cs	(Revision 58501)
+++ Extras/prj2make-sharp-lib/pkgconfiginvoker.cs	(Arbeitskopie)
@@ -7,6 +7,7 @@
 {
 	public sealed class PkgConfigInvoker
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
 		
 		public static string GetPkgConfigVersion()
 		{
@@ -73,14 +74,14 @@
 
 			if (p.StandardOutput == null)
 			{
-				Runtime.LoggingService.Debug ("Specified package did not return any information");
+				log.Debug ("Specified package did not return any information");
 			}
 			
 			pkgout = p.StandardOutput.ReadToEnd ();		
 			p.WaitForExit ();
 			if (p.ExitCode != 0) 
 			{
-				Runtime.LoggingService.Debug ("pkg-config command failed: pkg-config " + strArgLine);
+				log.Debug ("pkg-config command failed: pkg-config " + strArgLine);
 				return null;
 			}
 
Index: Extras/MonoDevelop.GtkCore/MonoDevelop.GtkCore.WidgetLibrary/AssemblyReferenceWidgetLibrary.cs
===================================================================
--- Extras/MonoDevelop.GtkCore/MonoDevelop.GtkCore.WidgetLibrary/AssemblyReferenceWidgetLibrary.cs	(Revision 58501)
+++ Extras/MonoDevelop.GtkCore/MonoDevelop.GtkCore.WidgetLibrary/AssemblyReferenceWidgetLibrary.cs	(Arbeitskopie)
@@ -43,6 +43,8 @@
 {
 	public class AssemblyReferenceWidgetLibrary: BaseWidgetLibrary
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		string assemblyReference;
 		string assemblyName;
 		string fileName;
@@ -58,7 +60,7 @@
 				try {
 					fileName = Runtime.SystemAssemblyService.GetAssemblyLocation (assemblyReference);
 				} catch (Exception ex) {
-					Runtime.LoggingService.Error (ex);
+					log.Error (ex);
 				}
 			} else
 				fileName = assemblyReference;
Index: Extras/MonoQuery/MonoQuery/MonoQueryService.cs
===================================================================
--- Extras/MonoQuery/MonoQuery/MonoQueryService.cs	(Revision 58501)
+++ Extras/MonoQuery/MonoQuery/MonoQueryService.cs	(Arbeitskopie)
@@ -42,6 +42,8 @@
 {
 	public class MonoQueryService : AbstractService
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		DbProviderCollection providers = null;
 		SqlDefinitionPad definitionPad = null;
 		
@@ -95,7 +97,7 @@
 							= (DbProviderCollection) serializer.Deserialize (fs);
 					}
 				} catch (Exception e) {
-					Runtime.LoggingService.Error ("Invalid monoquery file.");
+					log.Error ("Invalid monoquery file.");
 					File.Delete (serializedFile);
 				}
 			}
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor/SourceViewService.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor/SourceViewService.cs	(Revision 58501)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor/SourceViewService.cs	(Arbeitskopie)
@@ -12,6 +12,8 @@
 {
 	public class SourceViewService : AbstractService
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		SourceLanguagesManager slm;
 		static readonly string file = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Personal), ".config/MonoDevelop/SyntaxHighlighting.xml");
 
@@ -64,7 +66,7 @@
 								ParseColor (reader.GetAttribute ("foreground"), ref sts.Foreground);
 								ParseColor (reader.GetAttribute ("background"), ref sts.Background);
 								lang.SetTagStyle (name, sts);
-								Runtime.LoggingService.DebugFormat ("Overrode style {0} {1}", lang.Name, name);
+								log.DebugFormat ("Overrode style {0} {1}", lang.Name, name);
 								break;
 							case "SourceLanguage":
 								lang = FindLanguage (reader.GetAttribute ("name"));
@@ -77,7 +79,7 @@
 				}
 			}
 			catch (XmlException e) {
-				Runtime.LoggingService.Error (e.ToString ());
+				log.Error (e.ToString ());
 			}
 			reader.Close ();
 		}
@@ -158,7 +160,7 @@
 					writer.WriteEndAttribute ();
 
 					writer.WriteEndElement ();
-					Runtime.LoggingService.DebugFormat ("Preserved style {0} {1}", sl.Name, tag.Id);
+					log.DebugFormat ("Preserved style {0} {1}", sl.Name, tag.Id);
 				}
 
 				writer.WriteEndElement ();
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/DefaultLoggingService.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/DefaultLoggingService.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/DefaultLoggingService.cs	(Arbeitskopie)
@@ -1,321 +0,0 @@
-
-using System;
-using System.IO;
-using System.Reflection;
-
-using MonoDevelop.Core;
-
-using log4net;
-using log4net.Config;
-
-namespace MonoDevelop.Core
-{
-	internal class DefaultLoggingService : AbstractService, ILoggingService
-	{
-		public event LogAppendedHandler LogAppended;
-
-		public DefaultLoggingService()
-		{
-			if (Assembly.GetEntryAssembly() != null && File.Exists(Assembly.GetEntryAssembly().Location + ".config"))
-				XmlConfigurator.Configure ();
-			else
-				BasicConfigurator.Configure ();
-		}
-		
-		public override void InitializeService()
-		{
-			base.InitializeService();
-		}
-
-		ILog GetLogger ()
-		{
-			return LogManager.GetLogger(typeof(ILoggingService));
-		}
-		
-		ILog GetLogger (string name)
-		{
-			return LogManager.GetLogger(name);
-		}
-
-		public bool IsDebugEnabled {
-			get {
-				return GetLogger().IsDebugEnabled;
-			}
-		}
-
-		public bool IsInfoEnabled {
-			get {
-				return GetLogger().IsInfoEnabled;
-			}
-		}
-
-		public bool IsWarnEnabled {
-			get {
-				return GetLogger().IsWarnEnabled;
-			}
-		}
-
-		public bool IsErrorEnabled {
-			get {
-				return GetLogger().IsErrorEnabled;
-			}
-		}
-
-		public bool IsFatalEnabled {
-			get {
-				return GetLogger().IsFatalEnabled;
-			}
-		}
-
-		public void Debug (string logger, object message)
-		{
-			GetLogger(logger).Debug (message);
-			OnLogAppended ("Debug", message.ToString());
-		}
-
-		public void Info (string logger, object message)
-		{
-			GetLogger(logger).Info (message);
-			OnLogAppended ("Info", message.ToString());
-		}
-
-		public void Warn (string logger, object message)
-		{
-			GetLogger(logger).Warn (message);
-			OnLogAppended ("Warn", message.ToString());
-		}
-
-		public void Error (string logger, object message)
-		{
-			GetLogger(logger).Error (message);
-			OnLogAppended ("Error", message.ToString());
-		}
-
-		public void Fatal (string logger, object message)
-		{
-			GetLogger(logger).Fatal (message);
-			OnLogAppended ("Fatal", message.ToString());
-		}
-
-		public void Debug (object message)
-		{
-			GetLogger().Debug (message);
-			OnLogAppended ("Debug", message.ToString());
-		}
-
-		public void Info (object message)
-		{
-			GetLogger().Info (message);
-			OnLogAppended ("Info", message.ToString());
-		}
-
-		public void Warn (object message)
-		{
-			GetLogger().Warn (message);
-			OnLogAppended ("Warn", message.ToString());
-		}
-
-		public void Error (object message)
-		{
-			GetLogger().Error (message);
-			OnLogAppended ("Error", message.ToString());
-		}
-
-		public void Fatal (object message)
-		{
-			GetLogger().Fatal (message);
-			OnLogAppended ("Fatal", message.ToString());
-		}
-
-		public void Debug (object message, Exception t)
-		{
-			GetLogger().Debug (message, t);
-			OnLogAppended ("Debug", message + t.ToString());
-		}
-
-		public void Debug (string logger, object message, Exception t)
-		{
-			GetLogger(logger).Debug (message, t);
-			OnLogAppended ("Debug", message + t.ToString());
-		}
-		
-		public void Info (object message, Exception t)
-		{
-			GetLogger().Info (message, t);
-			OnLogAppended ("Info", message + t.ToString());
-		}
-		
-		public void Info (string logger, object message, Exception t)
-		{
-			GetLogger(logger).Info (message, t);
-			OnLogAppended ("Info", message + t.ToString());
-		}
-		
-		public void Warn (object message, Exception t)
-		{
-			GetLogger().Warn (message, t);
-			OnLogAppended ("Warn", message + t.ToString());
-		}
-
-		public void Warn (string logger, object message, Exception t)
-		{
-			GetLogger(logger).Warn (message, t);
-			OnLogAppended ("Warn", message + t.ToString());
-		}
-
-		public void Error (object message, Exception t)
-		{
-			GetLogger().Error (message, t);
-			OnLogAppended ("Error", message + t.ToString());
-		}
-
-		public void Error (string logger, object message, Exception t)
-		{
-			GetLogger(logger).Error (message, t);
-			OnLogAppended ("Error", message + t.ToString());
-		}
-		
-		public void Fatal (object message, Exception t)
-		{
-			GetLogger().Fatal (message, t);
-			OnLogAppended ("Fatal", message + t.ToString());
-		}
-
-		public void Fatal (string logger, object message, Exception t)
-		{
-			GetLogger(logger).Fatal (message, t);
-			OnLogAppended ("Fatal", message + t.ToString());
-		}
-
-		public void DebugFormat (string format, params object[] args)
-		{
-			GetLogger().DebugFormat (format, args);
-			OnLogAppended ("Debug", String.Format(format, args));
-		}
-		
-		public void InfoFormat (string format, params object[] args)
-		{
-			GetLogger().InfoFormat (format, args);
-			OnLogAppended ("Info", String.Format(format, args));
-		}
-		
-		public void WarnFormat (string format, params object[] args)
-		{
-			GetLogger().WarnFormat (format, args);
-			OnLogAppended ("Warn", String.Format(format, args));
-		}
-		
-		public void ErrorFormat (string format, params object[] args)
-		{
-			GetLogger().ErrorFormat (format, args);
-			OnLogAppended ("Error", String.Format(format, args));
-		}
-		
-		public void FatalFormat (string format, params object[] args)
-		{
-			GetLogger().FatalFormat (format, args);
-			OnLogAppended ("Fatal", String.Format(format, args));
-		}
-
-		public void DebugFormat (string logger, string format, params object[] args)
-		{
-			GetLogger(logger).DebugFormat (format, args);
-			OnLogAppended ("Debug", String.Format(format, args));
-		}
-		
-		public void InfoFormat (string logger, string format, params object[] args)
-		{
-			GetLogger(logger).InfoFormat (format, args);
-			OnLogAppended ("Info", String.Format(format, args));
-		}
-		
-		public void WarnFormat (string logger, string format, params object[] args)
-		{
-			GetLogger(logger).WarnFormat (format, args);
-			OnLogAppended ("Warn", String.Format(format, args));
-		}
-		
-		public void ErrorFormat (string logger, string format, params object[] args)
-		{
-			GetLogger(logger).ErrorFormat (format, args);
-			OnLogAppended ("Error", String.Format(format, args));
-		}
-		
-		public void FatalFormat (string logger, string format, params object[] args)
-		{
-			GetLogger(logger).FatalFormat (format, args);
-			OnLogAppended ("Fatal", String.Format(format, args));
-		}
-
-		public void DebugFormat(IFormatProvider provider, string format, params object[] args)
-		{
-			GetLogger().DebugFormat (provider, format, args);
-			OnLogAppended ("Debug", String.Format(provider, format, args));
-		}
-		
-		public void DebugFormat(string logger, IFormatProvider provider, string format, params object[] args)
-		{
-			GetLogger(logger).DebugFormat (provider, format, args);
-			OnLogAppended ("Debug", String.Format(provider, format, args));
-		}
-		
-		public void InfoFormat(IFormatProvider provider, string format, params object[] args)
-		{
-			GetLogger().InfoFormat (provider, format, args);
-			OnLogAppended ("Info", String.Format(provider, format, args));
-		}
-
-		public void InfoFormat(string logger, IFormatProvider provider, string format, params object[] args)
-		{
-			GetLogger(logger).InfoFormat (provider, format, args);
-			OnLogAppended ("Info", String.Format(provider, format, args));
-		}
-
-		public void WarnFormat(IFormatProvider provider, string format, params object[] args)
-		{
-			GetLogger().WarnFormat (provider, format, args);
-			OnLogAppended ("Warn", String.Format(provider, format, args));
-		}
-		
-		public void WarnFormat(string logger, IFormatProvider provider, string format, params object[] args)
-		{
-			GetLogger(logger).WarnFormat (provider, format, args);
-			OnLogAppended ("Warn", String.Format(provider, format, args));
-		}
-
-		public void ErrorFormat(IFormatProvider provider, string format, params object[] args)
-		{
-			GetLogger().ErrorFormat (provider, format, args);
-			OnLogAppended ("Error", String.Format(provider, format, args));
-		}
-
-		public void ErrorFormat(string logger, IFormatProvider provider, string format, params object[] args)
-		{
-			GetLogger(logger).ErrorFormat (provider, format, args);
-			OnLogAppended ("Error", String.Format(provider, format, args));
-		}
-
-		public void FatalFormat(IFormatProvider provider, string format, params object[] args)
-		{
-			GetLogger().FatalFormat (provider, format, args);
-			OnLogAppended ("Fatal", String.Format(provider, format, args));
-		}
-
-		public void FatalFormat(string logger, IFormatProvider provider, string format, params object[] args)
-		{
-			GetLogger(logger).FatalFormat (provider, format, args);
-			OnLogAppended ("Fatal", String.Format(provider, format, args));
-		}
-
-		public void OnLogAppended(string level, string message)
-		{
-			if (LogAppended != null) {
-				LogAppendedArgs args = new LogAppendedArgs();
-				args.Level = level;
-				args.Message = message;
-				args.Timestamp = DateTime.Now;
-				LogAppended(this, args);
-			}
-		}
-	}
-}
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/ILoggingService.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/ILoggingService.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/ILoggingService.cs	(Arbeitskopie)
@@ -1,77 +0,0 @@
-
-using System;
-
-namespace MonoDevelop.Core
-{
-	public delegate void LogAppendedHandler(object sender, LogAppendedArgs args);
-
-	public interface ILoggingService
-	{
-		/* Test if a level is enabled for logging */
-		bool IsDebugEnabled { get; }
-		bool IsInfoEnabled { get; }
-		bool IsWarnEnabled { get; }
-		bool IsErrorEnabled { get; }
-		bool IsFatalEnabled { get; }
-
-		/* Log a message object */
-		void Debug(object message);
-		void Info(object message);
-		void Warn(object message);
-		void Error(object message);
-		void Fatal(object message);
-		
-		void Debug(string logger, object message);
-		void Info(string logger, object message);
-		void Warn(string logger, object message);
-		void Error(string logger, object message);
-		void Fatal(string logger, object message);
-
-		/* Log a message object and exception */
-		void Debug(object message, Exception t);
-		void Info(object message, Exception t);
-		void Warn(object message, Exception t);
-		void Error(object message, Exception t);
-		void Fatal(object message, Exception t);
-
-		void Debug(string logger, object message, Exception t);
-		void Info(string logger, object message, Exception t);
-		void Warn(string logger, object message, Exception t);
-		void Error(string logger, object message, Exception t);
-		void Fatal(string logger, object message, Exception t);
-
-		/* Log a message string using the System.String.Format syntax */
-		void DebugFormat(string format, params object[] args);
-		void InfoFormat(string format, params object[] args);
-		void WarnFormat(string format, params object[] args);
-		void ErrorFormat(string format, params object[] args);
-		void FatalFormat(string format, params object[] args);
-
-		void DebugFormat(string logger, string format, params object[] args);
-		void InfoFormat(string logger, string format, params object[] args);
-		void WarnFormat(string logger, string format, params object[] args);
-		void ErrorFormat(string logger, string format, params object[] args);
-		void FatalFormat(string logger, string format, params object[] args);
-
-		/* Log a message string using the System.String.Format syntax */
-		void DebugFormat(IFormatProvider provider, string format, params object[] args);
-		void InfoFormat(IFormatProvider provider, string format, params object[] args);
-		void WarnFormat(IFormatProvider provider, string format, params object[] args);
-		void ErrorFormat(IFormatProvider provider, string format, params object[] args);
-		void FatalFormat(IFormatProvider provider, string format, params object[] args);
-
-		void DebugFormat(string logger, IFormatProvider provider, string format, params object[] args);
-		void InfoFormat(string logger, IFormatProvider provider, string format, params object[] args);
-		void WarnFormat(string logger, IFormatProvider provider, string format, params object[] args);
-		void ErrorFormat(string logger, IFormatProvider provider, string format, params object[] args);
-		void FatalFormat(string logger, IFormatProvider provider, string format, params object[] args);
-
-		event LogAppendedHandler LogAppended;
-	}
-
-	public class LogAppendedArgs
-	{
-		public string Message, Level;
-		public DateTime Timestamp;
-	}
-}
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/Runtime.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/Runtime.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/Runtime.cs	(Arbeitskopie)
@@ -43,7 +43,6 @@
 		static StringParserService stringParserService;
 		static SystemAssemblyService systemAssemblyService;
 		static FileUtilityService fileUtilityService;
-		static ILoggingService loggingService;
 		static AddInService addInService;
 		static SetupService setupService;
 		static bool initialized;
@@ -100,15 +99,6 @@
 			}
 		}
 	
-		public static ILoggingService LoggingService {
-			get {
-				if (loggingService == null)
-					loggingService = new DefaultLoggingService();
-				
-				return loggingService;
-			}
-		}
-	
 		public static AddInService AddInService {
 			get {
 				if (addInService == null)
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/ServiceManager.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/ServiceManager.cs	(Revision 58501)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/ServiceManager.cs	(Arbeitskopie)
@@ -58,6 +58,8 @@
 	/// </summary>
 	public class ServiceManager
 	{
+		private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
+		
 		ArrayList serviceList       = new ArrayList();
 		Hashtable servicesHashtable = new Hashtable();
 		Hashtable initializedServices = new Hashtable ();
@@ -204,7 +206,7 @@
 				if (IsInstanceOfType(serviceType, service)) {
 					servicesHashtable[serviceType] = service;
 					if (!initializedServices.Contains (service)) {
-						Runtime.LoggingService.Info (GettextCatalog.GetString ("Initializing service: ") + serviceType);
+						log.Info (GettextCatalog.GetString ("Initializing service: ") + serviceType);
 						service.InitializeService();
 						initializedServices [service] = service;
 					}
Index: Core/src/MonoDevelop.Core/Makefile.am
===================================================================
--- Core/src/MonoDevelop.Core/Makefile.am	(Revision 58501)
+++ Core/src/MonoDevelop.Core/Makefile.am	(Arbeitskopie)
@@ -89,8 +89,6 @@
 MonoDevelop.Core.Utils.DirectoryArchive/GzSupport.cs \
 MonoDevelop.Core.Utils.DirectoryArchive/TarDecompressor.cs \
 MonoDevelop.Core.Utils.DirectoryArchive/ZipDecompressor.cs \
-MonoDevelop.Core/DefaultLoggingService.cs \
-MonoDevelop.Core/ILoggingService.cs \
 MonoDevelop.Core/Runtime.cs \
 MonoDevelop.Core/SystemAssemblyService.cs \
 MonoDevelop.Core.Execution/AddinDependencyAttribute.cs \
Index: Core/src/MonoDevelop.Core.Gui/Makefile.am
===================================================================
--- Core/src/MonoDevelop.Core.Gui/Makefile.am	(Revision 58501)
+++ Core/src/MonoDevelop.Core.Gui/Makefile.am	(Arbeitskopie)
@@ -4,6 +4,7 @@
 REFS = \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Components.dll \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:System \
 	-r:System.Xml \
 	-r:System.Drawing \
Index: Core/src/MonoDevelop.Components/Makefile.am
===================================================================
--- Core/src/MonoDevelop.Components/Makefile.am	(Revision 58501)
+++ Core/src/MonoDevelop.Components/Makefile.am	(Arbeitskopie)
@@ -1,10 +1,11 @@
 
 ASSEMBLY = $(top_builddir)/build/AddIns/MonoDevelop.Components.dll
 
-REFS = -r:System \
-       -r:System.Drawing \
-       -r:System.Xml \
+REFS =	-r:System \
+	-r:System.Drawing \
+	-r:System.Xml \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	$(GTK_SHARP_LIBS) \
 	$(GECKO_SHARP_LIBS) \
 	$(GLADE_SHARP_LIBS) \
Index: Core/src/MonoDevelop.Projects/Makefile.am
===================================================================
--- Core/src/MonoDevelop.Projects/Makefile.am	(Revision 58501)
+++ Core/src/MonoDevelop.Projects/Makefile.am	(Arbeitskopie)
@@ -8,6 +8,7 @@
  	-r:Mono.Posix \
  	-r:$(top_builddir)/build/AddIns/ICSharpCode.SharpRefactory.dll \
  	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
+	-r:$(top_builddir)/build/bin/log4net.dll \
  	$(MONODOC_LIBS)
 
 FILES= \
Index: Core/src/MonoDevelop.Projects.Gui/Makefile.am
===================================================================
--- Core/src/MonoDevelop.Projects.Gui/Makefile.am	(Revision 58501)
+++ Core/src/MonoDevelop.Projects.Gui/Makefile.am	(Arbeitskopie)
@@ -6,6 +6,7 @@
 	$(GTK_SHARP_LIBS) \
 	$(GLADE_SHARP_LIBS) \
 	$(GNOME_SHARP_LIBS) \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Components.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
Index: Extras/JavaBinding/Makefile.am
===================================================================
--- Extras/JavaBinding/Makefile.am	(Revision 58501)
+++ Extras/JavaBinding/Makefile.am	(Arbeitskopie)
@@ -5,6 +5,7 @@
 REFS = -r:System \
 	-r:System.Xml \
 	-r:System.Drawing \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.dll \
Index: Extras/VersionControl/AddIn/Makefile.am
===================================================================
--- Extras/VersionControl/AddIn/Makefile.am	(Revision 58501)
+++ Extras/VersionControl/AddIn/Makefile.am	(Arbeitskopie)
@@ -1,30 +1,33 @@
 build_sources = Addin.cs Diffs.cs Logs.cs Statuses.cs Task.cs Update.cs
 
-REFS = /r:$(ADDIN_BUILD)/Diff.dll \
-	   /r:$(ADDIN_BUILD)/DiffWidget.dll \
-	   /r:$(ADDIN_BUILD)/VersionControl.dll \
-	   /r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
-	   /r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
-	   /r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.dll \
-	   /r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.Gui.dll \
-	   /r:$(top_builddir)/build/AddIns/MonoDevelop.Components.dll \
-	   /r:$(top_builddir)/build/AddIns/MonoDevelop.Ide.dll \
-       /r:$(top_builddir)/build/AddIns/MonoDevelop.SourceEditor.dll \
-       /r:System.Data.dll \
-       $(GTK_SHARP_LIBS) \
-       $(GLADE_SHARP_LIBS) \
-       $(GCONF_SHARP_LIBS) \
-       $(GTKSOURCEVIEW_SHARP_LIBS)
+REFS = \
+	-r:$(ADDIN_BUILD)/Diff.dll \
+	-r:$(ADDIN_BUILD)/DiffWidget.dll \
+	-r:$(ADDIN_BUILD)/VersionControl.dll \
+	-r:$(top_builddir)/build/bin/log4net.dll \
+	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.Gui.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Components.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Ide.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.SourceEditor.dll \
+	-r:System.Data.dll \
+	$(GTK_SHARP_LIBS) \
+	$(GLADE_SHARP_LIBS) \
+	$(GCONF_SHARP_LIBS) \
+	$(GTKSOURCEVIEW_SHARP_LIBS)
 
-RES = -resource:$(srcdir)/overlay_added.png,overlay_added.png \
-	  -resource:$(srcdir)/overlay_modified.png,overlay_modified.png \
-	  -resource:$(srcdir)/overlay_conflicted.png,overlay_conflicted.png \
-	  -resource:$(srcdir)/overlay_normal.png,overlay_normal.png \
-	  -resource:$(srcdir)/overlay_locked.png,overlay_locked.png \
-	  -resource:$(srcdir)/menu_log.png,menu_log.png \
-	  -resource:$(srcdir)/menu_diff.png,menu_diff.png \
-	  -resource:$(srcdir)/menu_update.png,menu_update.png \
-	  -resource:$(srcdir)/menu_status.png,menu_status.png
+RES = \
+overlay_added.png \
+overlay_modified.png \
+overlay_conflicted.png \
+overlay_normal.png \
+overlay_locked.png \
+menu_log.png \
+menu_diff.png \
+menu_update.png \
+menu_status.png
 
 ADDIN = VersionControl.addin.xml
 
@@ -49,7 +52,7 @@
 
 $(DLL): $(build_sources)
 	mkdir -p $(ADDIN_BUILD)
-	$(CSC) $(CSC_FLAGS) -target:library -out:$@ $(build_sources) $(REFS) $(RES)
+	$(CSC) $(CSC_FLAGS) -target:library -out:$@ $(build_sources) $(REFS) $(RES:%=/resource:%)
 
 CLEANFILES = $(DLL) $(DLL).mdb $(ADDIN_BUILD)/$(ADDIN)
 
Index: Extras/NUnit/Makefile.am
===================================================================
--- Extras/NUnit/Makefile.am	(Revision 58501)
+++ Extras/NUnit/Makefile.am	(Arbeitskopie)
@@ -2,10 +2,12 @@
 ADDIN_BUILD = $(top_builddir)/build/AddIns/NUnit
 ASSEMBLY = $(ADDIN_BUILD)/MonoDevelop.NUnit.dll
 
-REFS = -r:System \
-       -r:System.Xml \
-       -r:nunit.framework \
+REFS = \
+	-r:System \
+	-r:System.Xml \
+	-r:nunit.framework \
 	-r:nunit.core \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.dll \
Index: Extras/prj2make-sharp-lib/Makefile.am
===================================================================
--- Extras/prj2make-sharp-lib/Makefile.am	(Revision 58501)
+++ Extras/prj2make-sharp-lib/Makefile.am	(Arbeitskopie)
@@ -6,6 +6,7 @@
 REFS =	-r:System \
 	-r:System.Xml \
 	$(GTK_SHARP_LIBS) \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Ide.dll \
Index: Extras/NemerleBinding/Makefile.am
===================================================================
--- Extras/NemerleBinding/Makefile.am	(Revision 58501)
+++ Extras/NemerleBinding/Makefile.am	(Arbeitskopie)
@@ -2,9 +2,11 @@
 ADDIN_BUILD = $(top_builddir)/build/AddIns/BackendBindings
 ASSEMBLY = $(ADDIN_BUILD)/NemerleBinding.dll
 
-REFS = -r:System \
-       -r:System.Xml \
+REFS = \
+	-r:System \
+	-r:System.Xml \
 	-r:System.Drawing \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.dll \
Index: Extras/MonoDevelop.GtkCore/Makefile.am
===================================================================
--- Extras/MonoDevelop.GtkCore/Makefile.am	(Revision 58501)
+++ Extras/MonoDevelop.GtkCore/Makefile.am	(Arbeitskopie)
@@ -10,6 +10,7 @@
 	$(GCONF_SHARP_LIBS) \
 	-r:$(srcdir)/lib/libstetic.dll \
 	-r:$(srcdir)/lib/libsteticui.dll \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/bin/Mono.Cecil.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Components.dll \
Index: Extras/BooBinding/Makefile.am
===================================================================
--- Extras/BooBinding/Makefile.am	(Revision 58501)
+++ Extras/BooBinding/Makefile.am	(Arbeitskopie)
@@ -6,6 +6,7 @@
 REFS =	-r:System.Drawing \
 	-r:System.Xml \
 	-r:System.Runtime.Remoting \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.dll \
@@ -74,7 +75,7 @@
 
 $(ASSEMBLY): $(FILES) $(RES)
 	mkdir -p $(ADDIN_BUILD)
-	$(BOOC) $(REFS) $(RES:%=-embedres:%) $(build_sources) -o:$@ -t:library
+	$(BOOC) $(REFS) $(RES:%=-embedres:%) $(build_sources) -out:$@ -target:library
 
 if ENABLE_BOO
 assemblydir = $(MD_ADDIN_DIR)/BackendBindings
Index: Extras/MonoDeveloperExtensions/Makefile.am
===================================================================
--- Extras/MonoDeveloperExtensions/Makefile.am	(Revision 58501)
+++ Extras/MonoDeveloperExtensions/Makefile.am	(Arbeitskopie)
@@ -8,8 +8,10 @@
 MonoProjectConfiguration.cs \
 MonoTestProvider.cs
 
-REFS = -r:System \
-       -r:System.Data \
+REFS = \
+	-r:System \
+	-r:System.Data \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.dll \
Index: Extras/GladeAddIn/Makefile.am
===================================================================
--- Extras/GladeAddIn/Makefile.am	(Revision 58501)
+++ Extras/GladeAddIn/Makefile.am	(Arbeitskopie)
@@ -7,6 +7,7 @@
 	$(GTK_SHARP_LIBS) \
 	$(GLADEUI_LIBS) \
 	$(GCONF_SHARP_LIBS) \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Components.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
Index: Extras/WelcomePage/Makefile.am
===================================================================
--- Extras/WelcomePage/Makefile.am	(Revision 58501)
+++ Extras/WelcomePage/Makefile.am	(Arbeitskopie)
@@ -5,6 +5,7 @@
 REFS = -r:System.Xml \
 	-r:nunit.framework \
 	-r:nunit.core \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.dll \
Index: Extras/CSharpBinding/Makefile.am
===================================================================
--- Extras/CSharpBinding/Makefile.am	(Revision 58501)
+++ Extras/CSharpBinding/Makefile.am	(Arbeitskopie)
@@ -3,9 +3,11 @@
 
 PARSE = parse.exe
 
-REFS = -r:System \
-       -r:System.Xml \
+REFS = \
+	-r:System \
+	-r:System.Xml \
 	-r:System.Drawing \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.SourceEditor.dll \
Index: Extras/ChangeLogAddIn/Makefile.am
===================================================================
--- Extras/ChangeLogAddIn/Makefile.am	(Revision 58501)
+++ Extras/ChangeLogAddIn/Makefile.am	(Arbeitskopie)
@@ -3,6 +3,7 @@
 
 REFS =	-r:nunit.framework \
 	-r:nunit.core \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Components.dll \
Index: Extras/MonoQuery/MonoQuery/Makefile.am
===================================================================
--- Extras/MonoQuery/MonoQuery/Makefile.am	(Revision 58501)
+++ Extras/MonoQuery/MonoQuery/Makefile.am	(Arbeitskopie)
@@ -69,6 +69,7 @@
 REFS =	-r:System \
 	-r:System.Xml \
 	-r:System.Data \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Ide.dll \
Index: Extras/MonoDevelop.SourceEditor/Makefile.am
===================================================================
--- Extras/MonoDevelop.SourceEditor/Makefile.am	(Revision 58501)
+++ Extras/MonoDevelop.SourceEditor/Makefile.am	(Arbeitskopie)
@@ -38,9 +38,11 @@
 GENERATED_FILES = \
 AssemblyInfo.cs
 
-REFS = -r:System \
-       -r:System.Drawing \
-       -r:System.Xml \
+REFS = \
+	-r:System \
+	-r:System.Drawing \
+	-r:System.Xml \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Ide.dll \
Index: Extras/ILAsmBinding/Makefile.am
===================================================================
--- Extras/ILAsmBinding/Makefile.am	(Revision 58501)
+++ Extras/ILAsmBinding/Makefile.am	(Arbeitskopie)
@@ -2,8 +2,10 @@
 ADDIN_BUILD = $(top_builddir)/build/AddIns/BackendBindings
 ASSEMBLY = $(ADDIN_BUILD)/ILAsmBinding.dll
 
-REFS = -r:System \
+REFS = \
+	-r:System \
 	-r:System.Xml \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.dll \
Index: Extras/VBNetBinding/Makefile.am
===================================================================
--- Extras/VBNetBinding/Makefile.am	(Revision 58501)
+++ Extras/VBNetBinding/Makefile.am	(Arbeitskopie)
@@ -7,6 +7,7 @@
 REFS =	-r:System \
 	-r:System.Xml \
 	-r:System.Drawing \
+	-r:$(top_builddir)/build/bin/log4net.dll \
 	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
 	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.dll \
Index: Extras/BooBinding/Parser/VariableLookupVisitor.boo
===================================================================
--- Extras/BooBinding/Parser/VariableLookupVisitor.boo	(Revision 58501)
+++ Extras/BooBinding/Parser/VariableLookupVisitor.boo	(Arbeitskopie)
@@ -31,6 +31,7 @@
 import Boo.Lang.Compiler.Ast
 
 class VariableLookupVisitor(DepthFirstVisitor):
+	private static log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType)
 	[Property(Resolver)]
 	_resolver as Resolver
 	
@@ -62,7 +63,7 @@
 		Finish(node.Initializer)
 	
 	override def OnBinaryExpression(node as BinaryExpression):
-		BooParser.Log (self.GetType (), "Binary expression: '${node}'")
+		log.Debug ("Binary expression: '${node}'")
 		if node.Operator == BinaryOperatorType.Assign and node.Left isa ReferenceExpression:
 			reference as ReferenceExpression = node.Left
 			if reference.Name == _lookFor:
Index: Extras/BooBinding/Parser/Visitor.boo
===================================================================
--- Extras/BooBinding/Parser/Visitor.boo	(Revision 58501)
+++ Extras/BooBinding/Parser/Visitor.boo	(Arbeitskopie)
@@ -38,6 +38,8 @@
 	pass
 
 class Visitor(AbstractVisitorCompilerStep):
+	private static log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType)
+    
 	[Getter(Cu)]
 	_cu as CompilationUnit = CompilationUnit()
 	
@@ -61,7 +63,7 @@
 		try:
 			Visit(CompileUnit)
 		except e:
-			Error (e.ToString ())
+			log.Error (e.ToString ())
 	
 	private def GetModifier(m as AST.TypeMember) as ModifierEnum:
 		r = ModifierEnum.None
@@ -120,7 +122,7 @@
 		_cu.Usings.Add(u)
 	
 	override def OnCallableDefinition(node as AST.CallableDefinition):
-		Log ("OnCallableDefinition: ${node.FullName}")
+		log.Debug ("OnCallableDefinition: ${node.FullName}")
 		region = GetRegion(node)
 		modifier = GetModifier(node)
 		c = Class(_cu, ClassType.Delegate, modifier, region)
@@ -155,7 +157,7 @@
 	
 	private def EnterTypeDefinition(node as AST.TypeDefinition, classType as ClassType):
 		try:
-			Log ("Enter ${node.GetType().Name} (${node.FullName})")
+			log.Debug ("Enter ${node.GetType().Name} (${node.FullName})")
 			region = GetClientRegion(node)
 			modifier = GetModifier(node)
 			c = Class(_cu, classType, modifier, region)
@@ -170,7 +172,7 @@
 					c.BaseTypes.Add(r.Name)
 			_currentClass.Push(c)
 		except ex:
-			Error (ex.ToString ())
+			log.Error (ex.ToString ())
 			raise
 	
 	override def LeaveClassDefinition(node as AST.ClassDefinition):
@@ -193,7 +195,7 @@
 	
 	private def LeaveTypeDefinition(node as AST.TypeDefinition):
 		c as Class = _currentClass.Pop()
-		Log ("Leave ${node.GetType().Name} ${node.FullName} (Class = ${c.FullyQualifiedName})")
+		log.Debug ("Leave ${node.GetType().Name} ${node.FullName} (Class = ${c.FullyQualifiedName})")
 		c.UpdateModifier()
 	
 	override def OnMethod(node as AST.Method):
@@ -204,7 +206,7 @@
 			method = GetMethod(node)
 			cast(Class, _currentClass.Peek()).Methods.Add(method)
 		except ex:
-			Error (ex.ToString ())
+			log.Error (ex.ToString ())
 			raise
 	
 	private def GetMethod(node as AST.Method):
@@ -237,12 +239,12 @@
 			field.SetModifiers(ModifierEnum.Const | ModifierEnum.SpecialName)
 			c.Fields.Add(field)
 		except x:
-			Error (x.ToString ())
+			log.Error (x.ToString ())
 			raise
 	
 	override def OnField(node as AST.Field):
 		try:
-			Log ("Field ${node.Name}")
+			log.Debug ("Field ${node.Name}")
 			if node.Name.StartsWith("___"):
 				return
 
@@ -251,7 +253,7 @@
 			field.Documentation = node.Documentation
 			c.Fields.Add(field)
 		except ex:
-			Error (ex.ToString ())
+			log.Error (ex.ToString ())
 			raise
 	
 	override def OnProperty(node as AST.Property):
@@ -274,7 +276,7 @@
 			property.Node = node
 			cast(Class, _currentClass.Peek()).Properties.Add(property)
 		except ex:
-			Error (ex.ToString ())
+			log.Error (ex.ToString ())
 			raise
 	
 	override def OnEvent (node as AST.Event):
@@ -283,15 +285,9 @@
 			ev.Documentation = node.Documentation
 			cast(Class, _currentClass.Peek()).Events.Add(ev)
 		except ex:
-			Error (ex.ToString ())
+			log.Error (ex.ToString ())
 			raise
 	
-	private def Log (message):
-		BooParser.Log (self.GetType(), message)
-	
-	private def Error (message):
-		BooParser.Error (self.GetType(), message)
-	
 	/*
 	// TODO: Detect indexer method and add it as Indexer
 	override def Visit(indexerDeclaration as AST.IndexerDeclaration, data as object) as object:
Index: Extras/BooBinding/Parser/ExpressionTypeVisitor.boo
===================================================================
--- Extras/BooBinding/Parser/ExpressionTypeVisitor.boo	(Revision 58501)
+++ Extras/BooBinding/Parser/ExpressionTypeVisitor.boo	(Arbeitskopie)
@@ -31,16 +31,12 @@
 import Boo.Lang.Compiler.Ast
 
 class ExpressionTypeVisitor(DepthFirstVisitor):
+	private static log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType)
+	
 	protected override def OnError(node as Node, error as Exception):
-		Error (error.ToString ())
+		log.Error (error.ToString ())
 		super(node, error)
 	
-	private def Log (message):
-		BooParser.Log (self.GetType (), message)
-	
-	private def Error (message):
-		BooParser.Error (self.GetType (), message)
-
 	[Property(ReturnType)]
 	_returnType as IReturnType
 	
@@ -77,9 +73,9 @@
 	
 	private def Debug(node):
 		if node == null:
-			Log ("-- null --")
+			log.Debug ("-- null --")
 		else:
-			Log ("${node.ToString()} - ${node.GetType().FullName}")
+			log.Debug ("${node.ToString()} - ${node.GetType().FullName}")
 	
 	override def OnCallableBlockExpression(node as CallableBlockExpression):
 		Debug(node)
@@ -112,7 +108,7 @@
 	private def ProcessMethod(node as MethodInvocationExpression, name as string, c as IClass) as bool:
 		return false if c == null
 		possibleOverloads = FindMethods(c, name, node.Arguments.Count)
-		Log ("found ${possibleOverloads.Count} overloads (multiple overloads not supported yet)")
+		log.Debug ("found ${possibleOverloads.Count} overloads (multiple overloads not supported yet)")
 		if possibleOverloads.Count >= 1:
 			SetReturnType(cast(IMethod, possibleOverloads[0]).ReturnType)
 			return true
Index: Extras/BooBinding/Parser/BooParser.boo
===================================================================
--- Extras/BooBinding/Parser/BooParser.boo	(Revision 58501)
+++ Extras/BooBinding/Parser/BooParser.boo	(Arbeitskopie)
@@ -39,6 +39,7 @@
 import Boo.Lang.Compiler.Steps
 
 class BooParser(IParser):
+	private static log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType)
 	private _lexerTags as (string)
 
 	private cuCache = Hashtable()
@@ -59,7 +60,7 @@
 		return Parse(fileName, content)
 	
 	def Parse(fileName as string, fileContent as string) as ICompilationUnitBase:
-		Log ("Parse ${fileName} with content")
+		log.Debug ("Parse ${fileName} with content")
 		
 		cr = char('\r')
 		ln = char('\n')
@@ -122,7 +123,7 @@
 			// somehow the SD parser thread goes into an endless loop if this flag is not set
 			visitor.Cu.ErrorsDuringCompile = true //context.Errors.Count > 0
 		except e:
-			Error (e.ToString ())
+			log.Error (e.ToString ())
 
 		for c as IClass in visitor.Cu.Classes:
 			if c.Region is not null:
@@ -141,7 +142,7 @@
 		return visitor.Cu
 	
 	def CtrlSpace(parserContext as IParserContext, caretLine as int, caretColumn as int, fileName as string) as LanguageItemCollection:
-		Log ("Ctrl-Space (${caretLine}/${caretColumn})")
+		log.Debug ("Ctrl-Space (${caretLine}/${caretColumn})")
 		try:
 			return Resolver(parserContext).CtrlSpace(caretLine, caretColumn, fileName)
 		except e:
@@ -152,15 +153,15 @@
 		return Resolver (parserContext).IsAsResolve (expression, caretLineNumber, caretColumn, fileName, fileContent)
 
 	def Resolve(parserContext as IParserContext, expression as string, caretLineNumber as int, caretColumn as int, fileName as string, fileContent as string) as ResolveResult:
-		Log ("Resolve ${expression} (${caretLineNumber}/${caretColumn})")
+		log.Debug ("Resolve ${expression} (${caretLineNumber}/${caretColumn})")
 		try:
 			return Resolver(parserContext).Resolve(expression, caretLineNumber, caretColumn, fileName, fileContent)
 		except e:
-			Error (e.ToString ())
+			log.Error (e.ToString ())
 			return null
 
 	def MonodocResolver(parserContext as IParserContext, expression as string, caretLineNumber as int, caretColumn as int, fileName as string, fileContent as string) as string:
-		Log ("MonodocResolver ${expression} (${caretLineNumber}/${caretColumn})")
+		log.Debug ("MonodocResolver ${expression} (${caretLineNumber}/${caretColumn})")
 		try:
 			return Resolver(parserContext).MonodocResolver(expression, caretLineNumber, caretColumn, fileName, fileContent)
 		except e:
@@ -170,14 +171,3 @@
 	def ResolveIdentifier (parserContext as IParserContext, id as string , caretLineNumber as int , caretColumn as int , fileName as string , fileContent as string ) as ILanguageItem:
 		return null
 		
-	private def Log (message):
-		Log (self.GetType(), message)
-
-	private def Error (message):
-		Error (self.GetType(), message)
-
-	static def Log (type, message):
-		MonoDevelop.Core.Runtime.LoggingService.Debug (type.ToString (), message)
-	
-	static def Error (type, message):
-		MonoDevelop.Core.Runtime.LoggingService.Error (type.ToString (), message)
Index: Extras/BooBinding/Parser/ExpressionFinder.boo
===================================================================
--- Extras/BooBinding/Parser/ExpressionFinder.boo	(Revision 58501)
+++ Extras/BooBinding/Parser/ExpressionFinder.boo	(Arbeitskopie)
@@ -30,6 +30,7 @@
 import MonoDevelop.Projects.Parser
 
 class ExpressionFinder(IExpressionFinder):
+	private static log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType)
 	// The expression finder can find an expression in a text
 	// inText is the full source code, offset the cursor position
 	
@@ -49,7 +50,7 @@
 	
 	def FindExpression(inText as string, offset as int) as ExpressionResult:
 		return ExpressionResult (null) if inText == null
-		Log ("Trying quickfind for ${offset}")
+		log.Debug ("Trying quickfind for ${offset}")
 		// OK, first try a kind of "quick find"
 		i = offset + 1
 		forbidden = '"\'/#)]}'
@@ -62,7 +63,7 @@
 				start = i + 1
 				break
 			if forbidden.IndexOf(c) >= 0:
-				Log ("Quickfind failed: got ${c}")
+				log.Debug ("Quickfind failed: got ${c}")
 				break
 			if Char.IsWhiteSpace(c):
 				if i > 6 and inText.Substring(i - 6, 6) == "import":
@@ -75,7 +76,7 @@
 		
 		inText = SimplifyCode(inText, offset)
 		if inText == null:
-			Log ('SimplifyCode returned null (cursor is in comment/string???)')
+			log.Debug ('SimplifyCode returned null (cursor is in comment/string???)')
 			return ExpressionResult (null)
 		// inText now has no comments or string literals, but the same meaning in
 		// terms of the type system
@@ -130,7 +131,7 @@
 				wasSpace = false
 				b.Append(c)
 			i += 1
-		Log ("Expression is '${b}'")
+		log.Debug ("Expression is '${b}'")
 		return b.ToString().Trim()
 	
 	// this method makes boo source code "simpler" by removing all comments
@@ -218,6 +219,3 @@
 			return inStringResult.ToString()
 		else:
 			return null
-	
-	private def Log (message):
-		BooParser.Log (self.GetType(), message)
Index: Extras/BooBinding/Parser/Resolver.boo
===================================================================
--- Extras/BooBinding/Parser/Resolver.boo	(Revision 58501)
+++ Extras/BooBinding/Parser/Resolver.boo	(Arbeitskopie)
@@ -40,6 +40,7 @@
 import Boo.Lang.Compiler.Steps
 
 class Resolver:
+	private static log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType)
 	[Getter(ParserContext)]
 	_parserContext as IParserContext
 
@@ -78,7 +79,7 @@
 
 	#region Helper methods
 	private def ResolveCurrentMember() as IMember:
-		Log ("Getting current method... caretLine = ${_caretLine}, caretColumn = ${_caretColumn}")
+		log.Debug ("Getting current method... caretLine = ${_caretLine}, caretColumn = ${_caretColumn}")
 		return null if _callingClass == null
 		best as IMember = null
 		line = 0
@@ -117,9 +118,9 @@
 				return para.ReturnType if para.Name == name
 			if method.Node != null and method.Node.Body != null:
 				varLookup = VariableLookupVisitor(Resolver: self, LookFor: name)
-				Log ("Visiting method body of '${method.Name}'")
+				log.Debug ("Visiting method body of '${method.Name}'")
 				varLookup.Visit(method.Node.Body)
-				Log ("Finished visiting method body!")
+				log.Debug ("Finished visiting method body!")
 				return varLookup.ReturnType
 		elif member isa Property:
 			property as Property = member
@@ -130,16 +131,16 @@
 			if property.Node != null:
 				varLookup = VariableLookupVisitor(Resolver: self, LookFor: name)
 				// TODO: visit only the correct body
-				Log ("Visiting property body...")
+				log.Debug ("Visiting property body...")
 				varLookup.Visit(property.Node.Getter) unless property.Node.Getter == null
 				varLookup.Visit(property.Node.Setter) unless property.Node.Setter == null
-				Log ("Finished visiting property body!")
+				log.Debug ("Finished visiting property body!")
 				/*
 				if varLookup.ReturnType is null:
-					Log ("null return type!")
+					log.Debug ("null return type!")
 					return ReturnType("System.Object")
 					*/
-				Log ("ReturnType: ${varLookup.ReturnType}")
+				log.Debug ("ReturnType: ${varLookup.ReturnType}")
 				return varLookup.ReturnType
 		return null
 	
@@ -148,7 +149,7 @@
 	
 	def SearchType (name as string, deep_search as bool) as IClass:
 		expandedName = BooAmbience.ReverseTypeConversionTable[name]
-		Log ("Expanded name |${expandedName}|") if expandedName != null
+		log.Debug ("Expanded name |${expandedName}|") if expandedName != null
 		return _parserContext.GetClass(expandedName) if expandedName != null
 		//return _parserContext.SearchType(name, _callingClass, _caretLine, _caretColumn)
 		klass as IClass = _parserContext.SearchType(name, _callingClass, _compilationUnit)
@@ -259,7 +260,7 @@
 		cu = parseInfo.MostRecentCompilationUnit as CompilationUnit
 		_compilationUnit = cu
 		if _compilationUnit == null:
-			Log ("BooResolver: No parse information!")
+			log.Debug ("BooResolver: No parse information!")
 			return false
 		_callingClass = GetInnermostClass(cu)
 		if _callingClass == null:
@@ -276,7 +277,7 @@
 		return true
 	
 	def Resolve(expression as string, caretLine as int, caretColumn as int, fileName as string, fileContent as string) as ResolveResult:
-		Log ("Resolving |${expression}|")
+		log.Debug ("Resolving |${expression}|")
 		if expression == null or expression == '':
 			return null
 		
@@ -312,11 +313,11 @@
 			
 			expr = Boo.Lang.Parser.BooParser.ParseExpression("expression", expression)
 			return null if expr isa AST.IntegerLiteralExpression
-			Log ("Using an expression type visitor!")
+			log.Debug ("Using an expression type visitor!")
 			visitor = ExpressionTypeVisitor(Resolver : self)
 			visitor.Visit(expr)
 			retType = visitor.ReturnType
-			Log ("result: ${retType}")
+			log.Debug ("result: ${retType}")
 			if visitor.ReturnClass != null:
 				returnClass = visitor.ReturnClass
 			elif retType != null:
@@ -335,16 +336,16 @@
 		   (_showStatic and not ((member.Modifiers & ModifierEnum.Static) == ModifierEnum.Static))):
 			return false
 		
-		Log ("Testing Accessibility")
+		log.Debug ("Testing Accessibility")
 		return IsAccessible(c, member)
 	
 	def IsAccessible(c as IClass, member as IDecoration) as bool:
-		Log ("member.Modifiers = " + member.Modifiers)
+		log.Debug ("member.Modifiers = " + member.Modifiers)
 		if ((member.Modifiers & ModifierEnum.Internal) == ModifierEnum.Internal):
 			return true
 
 		if ((member.Modifiers & ModifierEnum.Public) == ModifierEnum.Public):
-			Log ("IsAccessible")
+			log.Debug ("IsAccessible")
 			return true
 
 		if (member.Modifiers & ModifierEnum.Protected) == ModifierEnum.Protected:
@@ -385,47 +386,47 @@
 	
 	def ListMembers(members as LanguageItemCollection, curType as IClass, showStatic as bool) as LanguageItemCollection:
 		_showStatic = showStatic
-		Log ("LIST MEMBERS!!!")
-		Log ("_showStatic = " + _showStatic)
-		Log (curType.InnerClasses.Count + " classes")
-		Log (curType.Properties.Count + " properties")
-		Log (curType.Methods.Count + " methods")
-		Log (curType.Events.Count + " events")
-		Log (curType.Fields.Count + " fields")
+		log.Debug ("LIST MEMBERS!!!")
+		log.Debug ("_showStatic = " + _showStatic)
+		log.Debug (curType.InnerClasses.Count + " classes")
+		log.Debug (curType.Properties.Count + " properties")
+		log.Debug (curType.Methods.Count + " methods")
+		log.Debug (curType.Events.Count + " events")
+		log.Debug (curType.Fields.Count + " fields")
 		if _showStatic:
 			for c as IClass in curType.InnerClasses:
 				if IsAccessible(curType, c):
 					members.Add(c)
-					Log ("Member added")
+					log.Debug ("Member added")
 
 		for p as IProperty in curType.Properties:
 			if (MustBeShowen(curType, p)):
 				members.Add(p)
-				Log ("Member added")
+				log.Debug ("Member added")
 
-		Log ("ADDING METHODS!!!")
+		log.Debug ("ADDING METHODS!!!")
 		for m as IMethod in curType.Methods:
-			Log ("Method : " + m)
+			log.Debug ("Method : " + m)
 			if (MustBeShowen(curType, m)):
 				members.Add(m)
-				Log ("Member added")
+				log.Debug ("Member added")
 
 		for e as IEvent in curType.Events:
 			if (MustBeShowen(curType, e)):
 				members.Add(e)
-				Log ("Member added")
+				log.Debug ("Member added")
 
 		for f as IField in curType.Fields:
 			if (MustBeShowen(curType, f)):
 				members.Add(f)
-				Log ("Member added")
+				log.Debug ("Member added")
 			else:
 				//// enum fields must be shown here if present
 				if (curType.ClassType == ClassType.Enum):
 					members.Add(f) if (IsAccessible(curType,f))
-					Log ("Member ${f.FullyQualifiedName} added")
+					log.Debug ("Member ${f.FullyQualifiedName} added")
 
-		Log ("ClassType = " + curType.ClassType)
+		log.Debug ("ClassType = " + curType.ClassType)
 		if (curType.ClassType == ClassType.Interface and not _showStatic):
 			for s as string in curType.BaseTypes:
 				baseClass = _parserContext.GetClass (s, true, true)
@@ -434,10 +435,10 @@
 		else:
 			baseClass = BaseClass(curType)
 			if (baseClass != null):
-				Log ("Base Class = " + baseClass.FullyQualifiedName)
+				log.Debug ("Base Class = " + baseClass.FullyQualifiedName)
 				ListMembers(members, baseClass, _showStatic)
 
-		Log ("listing finished")
+		log.Debug ("listing finished")
 		return members
 
 	def GetResolvedClass (cls as IClass) as IClass:
@@ -464,9 +465,3 @@
 
 		return GetResolvedClass (curClass)
 
-	private def Log (message):
-		BooParser.Log (self.GetType(), message)
-	
-	private def Error (message):
-		BooParser.Error (self.GetType(), message)
-	
Index: Extras/BooBinding/Parser/ReturnType.boo
===================================================================
--- Extras/BooBinding/Parser/ReturnType.boo	(Revision 58501)
+++ Extras/BooBinding/Parser/ReturnType.boo	(Arbeitskopie)
@@ -37,6 +37,8 @@
 ///          Return Type          ///
 /////////////////////////////////////
 class ReturnType(AbstractReturnType):
+	private static log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType)
+	
 	def constructor(fullyQualifiedName as string):
 		self(fullyQualifiedName, array(int, 0), 0)
 	
@@ -66,12 +68,12 @@
 			if ar.ElementType isa AST.SimpleTypeReference:
 				super.FullyQualifiedName = cast(AST.SimpleTypeReference, ar.ElementType).Name
 			else:
-				Error ("Got unknown TypeReference in Array: ${t}")
+				log.Error ("Got unknown TypeReference in Array: ${t}")
 				super.FullyQualifiedName = "<Error>"
 		else:
 			super.arrayDimensions = array(int, 0)
 			super.FullyQualifiedName = "<Error>"
-			Error ("Got unknown TypeReference ${t}")
+			log.Error ("Got unknown TypeReference ${t}")
 	
 	static def CreateReturnType(node as AST.Node) as IReturnType:
 		if node isa AST.Field:
@@ -121,9 +123,6 @@
 	override def ToString():
 		return "[${GetType().Name} Name=${FullyQualifiedName}]"
 	
-	private def Error (message):
-		BooParser.Error (self.GetType (), message)
-
 /////////////////////////////////////
 ///     Namespace Return Type     ///
 /////////////////////////////////////
