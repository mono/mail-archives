Index: configure.in
===================================================================
--- configure.in	(revision 63631)
+++ configure.in	(working copy)
@@ -314,6 +314,7 @@
 Extras/AspNetAddIn/Makefile
 Extras/MonoDevelop.Autotools/Makefile
 Extras/MonoDevelop.DesignerSupport/Makefile
+Extras/MonoDevelop.WebReferences/Makefile
 Makefile
 monodevelop
 mdtool
@@ -345,4 +346,5 @@
 echo "   * Mono class library development extensions: $enable_monoextensions"
 echo "   * Version control support: $enable_versioncontrol"
 echo "   * ASP.NET project support: $enable_aspnet"
+echo "   * Web References support: yes"
 echo ""
Index: Extras/MonoDevelop.WebReferences/AssemblyInfo.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/AssemblyInfo.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/AssemblyInfo.cs	(revision 0)
@@ -0,0 +1,32 @@
+using System.Reflection;
+using System.Runtime.CompilerServices;
+
+// Information about this assembly is defined by the following
+// attributes.
+//
+// change them to the information which is associated with the assembly
+// you compile.
+
+[assembly: AssemblyTitle("MonoDevelop Project Web References")]
+[assembly: AssemblyDescription("Provides support for adding and maintianing Web References for CSharp and VB projects.")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("Gideon de Swardt")]
+[assembly: AssemblyProduct("MonoDevelop")]
+[assembly: AssemblyCopyright("LGPL")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// The assembly version has following format :
+//
+// Major.Minor.Build.Revision
+//
+// You can specify all values by your own or you can build default build and revision
+// numbers with the '*' character (the default):
+
+[assembly: AssemblyVersion("0.1.*")]
+
+// The following attributes specify the key for the sign of your assembly. See the
+// .NET Framework documentation for more information about signing.
+// This is not required, if you don't want signing let these attributes like they're.
+[assembly: AssemblyDelaySign(false)]
+[assembly: AssemblyKeyFile("")]
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.addin.xml
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.addin.xml	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.addin.xml	(revision 0)
@@ -0,0 +1,67 @@
+<AddIn
+	id = "MonoDevelop.WebReferences"
+	name = "Project Web References"
+	author = "Gideon de Swardt"
+	copyright = "LGPL"
+	url = "http://www.monodevelop.com"
+	description = "Provides support for adding and maintianing Web References for CSharp and VB projects."
+	category = "IDE extensions"
+	version = "0.1.0" >
+    
+    <Runtime>
+    	<Import assembly = "MonoDevelop.WebReferences.dll"/>
+    </Runtime>
+    
+	<Dependencies>
+		<AddIn id="MonoDevelop.Core" version="0.12.0"/>
+		<AddIn id="MonoDevelop.Core.Gui" version="0.12.0"/>
+		<AddIn id="MonoDevelop.Ide" version="0.12.0"/>
+		<AddIn id="MonoDevelop.Projects" version="0.12.0"/>
+		<AddIn id="MonoDevelop.Projects.Gui" version="0.12.0"/>
+	</Dependencies>
+	
+	<Extension path = "/SharpDevelop/Workbench/Pads/MonoDevelop.Ide.Gui.Pads.ProjectPad">
+		<NodeBuilder class = "MonoDevelop.WebReferences.NodeBuilders.ProjectFolderNodeBuilderExtension"/>
+		<NodeBuilder class = "MonoDevelop.WebReferences.NodeBuilders.ProjectNodeBuilder"/>
+		<NodeBuilder class = "MonoDevelop.WebReferences.NodeBuilders.WebReferenceFolderNodeBuilder"/>
+		<NodeBuilder class = "MonoDevelop.WebReferences.NodeBuilders.WebReferenceNodeBuilder"/>
+	</Extension>
+	
+	<Extension path = "/SharpDevelop/Commands">
+		<Command id = "MonoDevelop.WebReferences.WebReferenceCommands.Add"
+			_label = "Add Web Reference" 
+			icon = "md-webreference-item" />
+		<Command id = "MonoDevelop.WebReferences.WebReferenceCommands.UpdateAll"
+			_label = "Update Web References"
+			icon = "gtk-reload" />
+		<Command id = "MonoDevelop.WebReferences.WebReferenceCommands.Update"
+			_label = "Update Web Reference"
+			icon = "gtk-reload" />
+		<Command id = "MonoDevelop.WebReferences.WebReferenceCommands.DeleteAll"
+			_label = "Delete All"
+			icon = "gtk-delete" />
+		<Command id = "MonoDevelop.WebReferences.WebReferenceCommands.Delete"
+			_label = "Delete"
+			icon = "gtk-delete" />
+	</Extension>
+	
+	<Extension path = "/SharpDevelop/Views/ProjectBrowser/ContextMenu/ProjectBrowserNode/Add">
+		<SeparatorItem insertafter = "MonoDevelop.Ide.Commands.ProjectCommands.AddFiles" />
+		<CommandItem id = "MonoDevelop.WebReferences.WebReferenceCommands.Add"/>
+	</Extension>
+	
+	<Extension path = "/SharpDevelop/Views/ProjectBrowser/ContextMenu/WebReferenceFolder">
+		<CommandItem id = "MonoDevelop.WebReferences.WebReferenceCommands.Add" />
+		<CommandItem id = "MonoDevelop.WebReferences.WebReferenceCommands.UpdateAll" />
+		<CommandItem id = "MonoDevelop.WebReferences.WebReferenceCommands.DeleteAll" />
+	</Extension>
+	
+	<Extension path = "/SharpDevelop/Views/ProjectBrowser/ContextMenu/WebReferenceFolder/WebReferenceItem">
+		<CommandItem id = "MonoDevelop.WebReferences.WebReferenceCommands.Update" />
+		<CommandItem id = "MonoDevelop.WebReferences.WebReferenceCommands.Delete" />
+	</Extension>
+	
+	<Extension path = "/SharpDevelop/Workbench/StockIcons">
+		<StockIcon stockid = "md-webreference-item" resource = "WebReferenceItem.png" />
+	</Extension>
+</AddIn>
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/ProjectFolderNodeBuilderExtension.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/ProjectFolderNodeBuilderExtension.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/ProjectFolderNodeBuilderExtension.cs	(revision 0)
@@ -0,0 +1,32 @@
+using System;
+using MonoDevelop.Ide.Gui;
+using MonoDevelop.Ide.Gui.Pads;
+using MonoDevelop.Ide.Gui.Pads.ProjectPad;
+using MonoDevelop.Projects;
+
+
+namespace MonoDevelop.WebReferences.NodeBuilders
+{
+	/// <summary>Defines the properties and methods for the ProjectFolderNodeBuilderExtension class.</summary>
+	public class ProjectFolderNodeBuilderExtension : NodeBuilderExtension
+	{
+		/// <summary>Checks if the node can be build for the current data type.</summary>
+		/// <param name="Type">A Type containing the data type of the current node.</param>
+		/// <returns>True if the node can be build, otherwise false.</returns>
+		public override bool CanBuildNode (Type dataType)
+		{
+			return typeof(ProjectFolder).IsAssignableFrom (dataType);
+		}
+		
+		/// <summary>Get the attributes for the current node.</summary>
+		/// <param name="treeNavigator">ITreeNavigator containing the tree navigator.</param>
+		/// <param name="dataObject">An object containing the value of the current node.</param>
+		/// <param name="attributes">A NodeAttributes reference containing all the attribute for the current node.</param>
+		public override void GetNodeAttributes (ITreeNavigator treeNavigator, object dataObject, ref NodeAttributes attributes)
+		{
+			ProjectFolder folder = dataObject as ProjectFolder;
+			if (folder != null && folder.Project != null && Library.GetWebReferencePath(folder.Project) == folder.Path)
+				attributes |= NodeAttributes.Hidden;
+		}
+	}
+}
\ No newline at end of file
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/ProjectNodeBuilderExtension.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/ProjectNodeBuilderExtension.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/ProjectNodeBuilderExtension.cs	(revision 0)
@@ -0,0 +1,15 @@
+
+using System;
+
+namespace MonoDevelop.WebReferences
+{
+	
+	public class ProjectNodeBuilderExtension
+	{
+		
+		public ProjectNodeBuilderExtension()
+		{
+		}
+	}
+	
+}
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/ProjectNodeBuilder.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/ProjectNodeBuilder.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/ProjectNodeBuilder.cs	(revision 0)
@@ -0,0 +1,39 @@
+using System;
+using System.Collections;
+using MonoDevelop.Projects;
+using MonoDevelop.Core;
+using MonoDevelop.Ide.Gui.Pads;
+using MonoDevelop.Ide.Gui;
+using MonoDevelop.WebReferences.Commands;
+
+namespace MonoDevelop.WebReferences.NodeBuilders
+{
+	/// <summary>Defines the properties and methods for the ProjectFolderNodeBuilderExtension class.</summary>
+	public class ProjectNodeBuilder: NodeBuilderExtension
+	{
+		#region Properties
+		/// <summary>Gets the type of the CommandHandler with the ProjectFolderNodeBuilderExtension.</summary>
+		/// <value>A Type containing the reference for the CommandHandlerType for the ProjectFolderNodeBuilderExtension.</value>
+		public override Type CommandHandlerType 
+		{
+			get { return typeof(WebReferenceCommandHandler); }
+		}
+		#endregion
+		
+		/// <summary>Checks if the node can be build for the current data type.</summary>
+		/// <param name="Type">A Type containing the data type of the current node.</param>
+		/// <returns>True if the node can be build, otherwise false.</returns>
+		public override bool CanBuildNode (Type dataType)
+		{
+			return typeof(DotNetProject).IsAssignableFrom (dataType);
+		}
+		
+		/// <summary>Adds the WebReferencesFolder to the tree builder for all the DotNet projects.</summary>
+		/// <param name="builder">An ITreeBuilder containing all the data for the current DotNet project.</param>
+		/// <param name="dataObject">An object containing the data for the current node in the tree.</param>
+		public override void BuildChildNodes (ITreeBuilder builder, object dataObject)
+		{
+			builder.AddChild (new WebReferenceFolder((Project) dataObject));
+		}
+	}
+}
\ No newline at end of file
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/WebReferenceFolderNodeBuilder.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/WebReferenceFolderNodeBuilder.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/WebReferenceFolderNodeBuilder.cs	(revision 0)
@@ -0,0 +1,95 @@
+using System;
+using System.IO;
+using System.Collections;
+using MonoDevelop.Projects;
+using MonoDevelop.Core;
+using MonoDevelop.Ide.Commands;
+using MonoDevelop.Components;
+using MonoDevelop.Ide.Gui;
+using MonoDevelop.Core.Gui;
+using MonoDevelop.Components.Commands;
+using MonoDevelop.Ide.Gui.Pads;
+using MonoDevelop.Ide.Gui.Pads.ProjectPad;
+using MonoDevelop.WebReferences.Commands;
+
+namespace MonoDevelop.WebReferences.NodeBuilders
+{
+	/// <summary>Defines the properties and methods for the WebReferenceFolderNodeBuilder class.</summary>
+	public class WebReferenceFolderNodeBuilder : TypeNodeBuilder
+	{
+		#region Properties
+		/// <summary>Gets the data type for the WebReferenceFolderNodeBuilder.</summary>
+		/// <value>A Type containing the data type for WebReferenceFolderNodeBuilder.</value>
+		public override Type NodeDataType 
+		{
+			get { return typeof(WebReferenceFolder); }
+		}
+		
+		/// <summary>Gets the type of the CommandHandler with the WebReferenceFolderNodeBuilder.</summary>
+		/// <value>A Type containing the reference for the CommandHandlerType for the WebReferenceFolderNodeBuilder.</value>
+		public override Type CommandHandlerType 
+		{
+			get { return typeof(WebReferenceCommandHandler); }
+		}
+		
+		/// <summary>Gets the Addin path for the context menu for the WebReferenceFolderNodeBuilder.</summary>
+		/// <value>A string containing the AddIn path for the context menu for the WebReferenceFolderNodeBuilder.</summary>
+		public override string ContextMenuAddinPath 
+		{
+			get { return "/SharpDevelop/Views/ProjectBrowser/ContextMenu/WebReferenceFolder"; }
+		}
+		#endregion
+		
+		private WebReferenceItemCollection items;
+		
+		/// <summary>Gets the node name for the current node.</summary>
+		/// <param name="thisNode">An ITreeNavigator containing the current node settings.</param>
+		/// <param name="dataObject">An object containing the data for the current object.</param>
+		public override string GetNodeName (ITreeNavigator thisNode, object dataObject)
+		{
+			return "WebReferences";
+		}
+		
+		/// <summary>Build the node in the project tree.</summary>
+		/// <param name="treeBuilder">An ITreeBuilder containing the project tree builder.</param>
+		/// <param name="dataObject">An object containing the current builder child.</param>
+		/// <param name="label">A string containing the label of the node.</param>
+		/// <param name="icon">A Pixbif containing the icon for the node.</param>
+		/// <param name="closedIcon">A Pixbif containing the closed icon for the node.</param>
+		public override void BuildNode (ITreeBuilder treeBuilder, object dataObject, ref string label, ref Gdk.Pixbuf icon, ref Gdk.Pixbuf closedIcon)
+		{
+			label = GettextCatalog.GetString ("Web References");
+			icon = Context.GetIcon (Stock.OpenReferenceFolder);
+			closedIcon = Context.GetIcon (Stock.ClosedReferenceFolder);
+			
+		}
+		
+		/// <summary>Checks if the node builder has contains any child nodes.</summary>
+		/// <param name="builder">An ITreeBuilder containing all the node builder information.</param>
+		/// <param name="dataObject>An object containing the current activated node.</param> 
+		public override bool HasChildNodes (ITreeBuilder builder, object dataObject)
+		{
+			items = new WebReferenceItemCollection(((WebReferenceFolder)dataObject).Project);
+			return (items.Count > 0);
+		}
+		
+		/// <summary>Add entries for all the web references in the project to the tree builder.</summary>
+		/// <param name="builder">An ITreeBuilder containing all the data for the current DotNet project.</param>
+		/// <param name="dataObject">An object containing the data for the current node in the tree.</param>
+		public override void BuildChildNodes (ITreeBuilder builder, object dataObject)
+		{
+			for (int index=0; index < items.AllKeys.Length; index++)
+			{
+				WebReferenceItem item = items[items.AllKeys[index]];
+				builder.AddChild(item);
+			}
+		}
+		
+		/// <summary>Compare two object with one another and returns a number based on their sort order.</summary>
+		/// <returns>An integer containing the sort order for the objects.</returns>
+		public override int CompareObjects (ITreeNavigator thisNode, ITreeNavigator otherNode)
+		{
+			return (otherNode.DataItem is ProjectReferenceCollection) ? 1 : -1;
+		}
+	}
+}
\ No newline at end of file
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/WebReferenceNodeBuilder.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/WebReferenceNodeBuilder.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.NodeBuilders/WebReferenceNodeBuilder.cs	(revision 0)
@@ -0,0 +1,83 @@
+using System;
+using System.IO;
+using System.Collections;
+using MonoDevelop.Projects;
+using MonoDevelop.Core;
+using MonoDevelop.Ide.Commands;
+using MonoDevelop.Components;
+using MonoDevelop.Ide.Gui;
+using MonoDevelop.Core.Gui;
+using MonoDevelop.Components.Commands;
+using MonoDevelop.Ide.Gui.Pads;
+using MonoDevelop.WebReferences.Commands;
+
+namespace MonoDevelop.WebReferences.NodeBuilders
+{
+	/// <summary>Defines the properties and methods for the WebReferenceFolderNodeBuilder class.</summary>
+	public class WebReferenceNodeBuilder : TypeNodeBuilder
+	{
+		#region Properties
+		/// <summary>Gets the data type for the WebReferenceFolderNodeBuilder.</summary>
+		/// <value>A Type containing the data type for WebReferenceFolderNodeBuilder.</value>
+		public override Type NodeDataType 
+		{
+			get { return typeof(WebReferenceItem); }
+		}
+		
+		/// <summary>Gets the type of the CommandHandler with the WebReferenceFolderNodeBuilder.</summary>
+		/// <value>A Type containing the reference for the CommandHandlerType for the WebReferenceFolderNodeBuilder.</value>
+		public override Type CommandHandlerType 
+		{
+			get { return typeof(WebReferenceCommandHandler); }
+		}
+		
+		/// <summary>Gets the Addin path for the context menu for the WebReferenceFolderNodeBuilder.</summary>
+		/// <value>A string containing the AddIn path for the context menu for the WebReferenceFolderNodeBuilder.</summary>
+		public override string ContextMenuAddinPath 
+		{
+			get { return "/SharpDevelop/Views/ProjectBrowser/ContextMenu/WebReferenceFolder/WebReferenceItem"; }
+		}
+		#endregion
+		
+		/// <summary>Gets the node name for the current node.</summary>
+		/// <param name="thisNode">An ITreeNavigator containing the current node settings.</param>
+		/// <param name="dataObject">An object containing the data for the current object.</param>
+		public override string GetNodeName (ITreeNavigator thisNode, object dataObject)
+		{
+			return "WebReferenceItem";
+		}
+		
+		/// <summary>Build the node in the project tree.</summary>
+		/// <param name="treeBuilder">An ITreeBuilder containing the project tree builder.</param>
+		/// <param name="dataObject">An object containing the current builder child.</param>
+		/// <param name="label">A string containing the label of the node.</param>
+		/// <param name="icon">A Pixbif containing the icon for the node.</param>
+		/// <param name="closedIcon">A Pixbif containing the closed icon for the node.</param>
+		public override void BuildNode (ITreeBuilder treeBuilder, object dataObject, ref string label, ref Gdk.Pixbuf icon, ref Gdk.Pixbuf closedIcon)
+		{
+			label = ((WebReferenceItem) dataObject).Name;
+			icon = Context.GetIcon ("md-webreference-item");
+			closedIcon = Context.GetIcon ("md-webreference-item");
+		}
+		
+		/// <summary>Checks if the node builder has contains any child nodes.</summary>
+		/// <param name="builder">An ITreeBuilder containing all the node builder information.</param>
+		/// <param name="dataObject>An object containing the current activated node.</param> 
+		public override bool HasChildNodes (ITreeBuilder builder, object dataObject)
+		{
+			return false;
+		}
+		
+		/// <summary>Add entries for all the web references in the project to the tree builder.</summary>
+		/// <param name="builder">An ITreeBuilder containing all the data for the current DotNet project.</param>
+		/// <param name="dataObject">An object containing the data for the current node in the tree.</param>
+		public override void BuildChildNodes (ITreeBuilder builder, object dataObject)
+		{
+			/*
+			WebReferenceItem item = (WebReferenceItem) dataObject;
+			builder.AddChild(item.ProxyFile);
+			builder.AddChild(item.MapFile);
+			*/
+		}
+	}
+}
\ No newline at end of file
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.mdp
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.mdp	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.mdp	(revision 0)
@@ -0,0 +1,64 @@
+<Project defaultDeployTarget="Make" name="MonoDevelop.WebReferences" fileversion="2.0" language="C#" clr-version="Net_2_0" ctype="DotNetProject">
+  <Configurations active="Debug">
+    <Configuration name="Debug" ctype="DotNetProjectConfiguration">
+      <Output directory="./bin/Debug" assembly="MonoDevelop.WebReferences" />
+      <Build debugmode="True" target="Library" />
+      <Execution runwithwarnings="True" consolepause="False" runtime="MsNet" clr-version="Net_2_0" />
+      <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" mainclass="" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
+    </Configuration>
+    <Configuration name="Release" ctype="DotNetProjectConfiguration">
+      <Output directory="./bin/Release" assembly="MonoDevelop.WebReferences" />
+      <Build debugmode="False" target="Library" />
+      <Execution runwithwarnings="True" consolepause="False" runtime="MsNet" clr-version="Net_2_0" />
+      <CodeGeneration compiler="Csc" warninglevel="4" optimize="True" unsafecodeallowed="False" generateoverflowchecks="True" mainclass="" generatexmldocumentation="False" ctype="CSharpCompilerParameters" />
+    </Configuration>
+  </Configurations>
+  <DeployTargets>
+    <DeployTarget Handler="MonoDevelop.DirectoryDeploy" Name="Make" Path="/home/gdeswardt/Sandbox/MonoDevelop.AddIns/MonoDevelop.WebReferences/MonoDevelop.WebReferences" ctype="DirectoryDeployTarget" />
+  </DeployTargets>
+  <Contents>
+    <File name="./AssemblyInfo.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences" subtype="Directory" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences.Dialogs" subtype="Directory" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences.Commands" subtype="Directory" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences/WebReferenceFolder.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences.addin.xml" subtype="Code" buildaction="Nothing" />
+    <File name="./MonoDevelop.WebReferences.Dialogs/WebReferenceDialog.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences/DiscoveryNetworkCredential.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences/Library.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences.Commands/WebReferenceCommands.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences.NodeBuilders" subtype="Directory" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences.NodeBuilders/WebReferenceFolderNodeBuilder.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences/CodeGenerator.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences.Resources/disco.html" subtype="Code" buildaction="EmbedAsResource" />
+    <File name="./MonoDevelop.WebReferences.Resources/wsdl.html" subtype="Code" buildaction="EmbedAsResource" />
+    <File name="./MonoDevelop.WebReferences.Resources/WebReferenceItem.png" subtype="Code" buildaction="EmbedAsResource" />
+    <File name="./MonoDevelop.WebReferences.NodeBuilders/ProjectNodeBuilder.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences.Commands/WebReferenceCommandHandler.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences.NodeBuilders/ProjectFolderNodeBuilderExtension.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences/WebReferenceItem.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences/WebReferenceItemCollection.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences.NodeBuilders/WebReferenceNodeBuilder.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.WebReferences.Resources/WebReference.File.Disco.png" subtype="Code" buildaction="EmbedAsResource" />
+    <File name="./MonoDevelop.WebReferences.Resources/WebReference.File.Wsdl.png" subtype="Code" buildaction="EmbedAsResource" />
+    <File name="./MonoDevelop.WebReferences.Resources/WebReference.Service.png" subtype="Code" buildaction="EmbedAsResource" />
+    <File name="./MonoDevelop.WebReferences/DiscoveryProtocol.cs" subtype="Code" buildaction="Compile" />
+  </Contents>
+  <References>
+    <ProjectReference type="Gac" localcopy="True" refto="System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
+    <ProjectReference type="Gac" localcopy="True" refto="gdk-sharp, Version=2.8.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f" />
+    <ProjectReference type="Gac" localcopy="True" refto="gtk-sharp, Version=2.8.0.0, Culture=neutral, PublicKeyToken=35e10195dab3c99f" />
+    <ProjectReference type="Gac" localcopy="True" refto="System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+    <ProjectReference type="Gac" localcopy="True" refto="System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+    <ProjectReference type="Gac" localcopy="True" refto="System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
+    <ProjectReference type="Assembly" localcopy="True" refto="../../build/bin/MonoDevelop.Core.dll" />
+    <ProjectReference type="Assembly" localcopy="True" refto="../../build/AddIns/MonoDevelop.Components.dll" />
+    <ProjectReference type="Assembly" localcopy="True" refto="../../build/AddIns/MonoDevelop.Core.Gui.dll" />
+    <ProjectReference type="Assembly" localcopy="True" refto="../../build/AddIns/MonoDevelop.Ide.dll" />
+    <ProjectReference type="Assembly" localcopy="True" refto="../../build/AddIns/MonoDevelop.Projects.dll" />
+    <ProjectReference type="Assembly" localcopy="True" refto="../../build/AddIns/MonoDevelop.Projects.Gui.dll" />
+  </References>
+  <DeploymentInformation strategy="File">
+    <excludeFiles />
+  </DeploymentInformation>
+</Project>
\ No newline at end of file
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/WebReferenceItem.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/WebReferenceItem.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/WebReferenceItem.cs	(revision 0)
@@ -0,0 +1,89 @@
+using System;
+using System.Collections;
+using System.IO;
+using System.Web.Services.Protocols;
+using System.Web.Services.Description;
+using System.Web.Services.Discovery;
+using System.Xml;
+using System.Xml.Schema;
+using System.Xml.Serialization;
+using System.Net;
+using System.Text.RegularExpressions;
+
+using MonoDevelop.Projects;
+using MonoDevelop.Ide.Gui;
+using MonoDevelop.Ide.Gui.Pads;
+
+
+namespace MonoDevelop.WebReferences
+{
+	/// <summary>Defines the properties and methods for the WebReferenceItem class.</summary>
+	public class WebReferenceItem
+	{
+		#region Properties
+		/// <summary>Gets or sets the name for the web reference item.</summary>
+		/// <value>A string containing the name for the web reference.</value>
+		public string Name
+		{
+			get { return name; }
+			set { name = value; }
+		}
+		
+		/// <summary>Gets the Map ProjectFile for the web reference.</summary>
+		/// <value>A ProjectFile containing the map file for the web reference.</value>
+		public ProjectFile MapFile
+		{
+			get { return mapFile; }
+		}
+		
+		/// <summary>Gets the Proxy ProjectFile for the web reference.</summary>
+		/// <value>A ProjectFile containing the proxy file for the web reference.</value>
+		public ProjectFile ProxyFile
+		{
+			get { return proxyFile; }
+		}
+		#endregion
+		
+		#region Member Variables
+		private string name;
+		private ProjectFile proxyFile;
+		private ProjectFile mapFile;
+		#endregion
+		
+		/// <summary>Initializes a new instance of the WebReferenceItem class.</summary>
+		/// <param name="name">A string containing the name for the web reference.</param>
+		/// <param name="proxyFile">A ProjectFile containing the proxy file.</param>
+		/// <param name="mapFile">A ProjectFile containing the map file.</param>
+		public WebReferenceItem(string name, ProjectFile proxyFile, ProjectFile mapFile)
+		{
+			this.name = name;
+			this.proxyFile = proxyFile;
+			this.mapFile = mapFile;
+		}
+		
+		/// <summary>Update the web reference item by using the map file.</summary>
+		public void Update()
+		{
+			// Read the map file into the discovery client protocol and setup the code generator
+			DiscoveryProtocol protocol = new DiscoveryProtocol();
+			protocol.ReadAllUseBasePath(MapFile.FilePath);
+			protocol.ResolveAll();
+			
+			// Re-generate the proxy and map files
+			string basePath = new FileInfo(MapFile.FilePath).Directory.FullName;
+			CodeGenerator codeGen = new CodeGenerator(ProxyFile.Project, (DiscoveryClientProtocol)protocol);
+			codeGen.CreateProxyFile(basePath, MapFile.Project.Name + "." + Name, "Reference");
+			codeGen.CreateMapFile(basePath, "Reference.map");
+			protocol.Dispose();
+		}
+		
+		/// <summary>Delete the web reference from the project.</summary>
+		public void Delete()
+		{
+			Project project = proxyFile.Project;
+			project.ProjectFiles.Remove(proxyFile);
+			project.ProjectFiles.Remove(mapFile);
+			Directory.Delete(Path.Combine(Library.GetWebReferencePath(project), Name), true);
+		}
+	}	
+}
\ No newline at end of file
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/DiscoveryNetworkCredential.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/DiscoveryNetworkCredential.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/DiscoveryNetworkCredential.cs	(revision 0)
@@ -0,0 +1,41 @@
+using System;
+using System.Net;
+
+namespace MonoDevelop.WebReferences
+{
+	
+	/// <summary>Adds an authentication type to the standard NetworkCredential class.</summary>
+	public class DiscoveryNetworkCredential : NetworkCredential
+	{
+		#region Properties
+		public string AuthenticationType 
+		{
+			get { return authenticationType; }
+		}
+		
+		public bool IsDefaultAuthenticationType 
+		{
+			get { return String.Compare(authenticationType, DefaultAuthenticationType, true) == 0; }
+		}
+		#endregion
+		
+		#region Constants
+		public const string DefaultAuthenticationType = "Default";
+		#endregion
+		
+		#region Member Variables
+		string authenticationType = String.Empty;
+		#endregion
+		
+		public DiscoveryNetworkCredential(string userName, string password, string domain, string authenticationType) : base(userName, password, domain)
+		{
+			this.authenticationType = authenticationType;
+		}
+		
+		public DiscoveryNetworkCredential(NetworkCredential credential, string authenticationType) : this(credential.UserName, credential.Password, credential.Domain, authenticationType)
+		{
+		}
+		
+		
+	}
+}
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/CodeGenerator.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/CodeGenerator.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/CodeGenerator.cs	(revision 0)
@@ -0,0 +1,172 @@
+using System;
+using System.CodeDom;
+using System.CodeDom.Compiler;
+using System.IO;
+using System.Web.Services.Discovery;
+using System.Web.Services.Description;
+using MonoDevelop.Projects;
+
+namespace MonoDevelop.WebReferences
+{
+	/// <summary>Defines the properties and methods for the CodeGenerator class.</summary>
+	public class CodeGenerator
+	{
+		#region Properties
+		/// <summary>Gets or sets the project assocated with the Code Generator.</summary>
+		/// <value>A Project containing all the project information.</summary>
+		public Project Project
+		{
+			get { return project; }
+			set { project = value; }
+		}
+		
+		/// <summary>Gets or sets the discovery client protocol assocated with the code generator.</summary>
+		/// <value>A DiscoveryClientProtocol containing all the web service information.</value>
+		public DiscoveryClientProtocol Protocol
+		{
+			get { return protocol; }
+			set { protocol = value; }
+		}
+		
+		// <summary>Gets the default file language for the project.</summary>
+		/// <value>A string containing the default language.</value>
+		public string DefaultLanguage
+		{
+			get
+			{
+				if (defaultLanguage == null)
+				{
+					for (int index=0; index<project.SupportedLanguages.Length; index++)
+					{
+						string language = project.SupportedLanguages[index];
+						if (language == "C#" || language == "VBNET")
+						{
+							defaultLanguage = language;
+							break;
+						}
+					}
+					if (defaultLanguage == null)
+						throw new Exception("No supported default language set for the current project");
+				}
+				return (defaultLanguage);
+			}
+		}
+		
+		/// <summary>Gets the default file extension based on the default language for the project.</summary>
+		/// <value>A string containing the default file extension.</value>
+		public string DefaultExtension
+		{
+			get
+			{
+				string ext = "";
+				switch (this.DefaultLanguage)
+				{
+					case "C#":
+						ext = ".cs";
+						break;
+					case "VBNET":
+						ext = ".vb";
+						break;
+				}
+				return ext;
+			}
+		}
+		
+		/// <summary>Check if the default language is supported by the code generator.</summary>
+		/// <value>True if the language is supported, otherwise false.</value>
+		public bool IsLanguageSupported
+		{
+			get 
+			{
+				try 
+				{
+					return (DefaultLanguage == "C#" || DefaultLanguage == "VBNET");
+				}
+				catch
+				{
+					return false;
+				}
+			}
+		}
+		
+		/// <summary>Gets the CodeDomProvider for the default lanuage.</summary>
+		/// <value>A CodeDomProvider containing the code generation provider for the default language.</value>
+		public CodeDomProvider Provider
+		{
+			get
+			{
+				if (provider == null && IsLanguageSupported)					
+					switch (DefaultLanguage)
+					{
+					    case "C#":
+						    provider = new Microsoft.CSharp.CSharpCodeProvider();
+						    break;
+						case "VBNET":
+							provider = new Microsoft.VisualBasic.VBCodeProvider();
+							break;
+						default:
+							throw new Exception("Language not supported");
+					}
+					
+				// Throw an exception if no provider has been set
+				if (provider == null)
+					throw new Exception("Language not supported");
+					
+				return provider;
+			}	
+		}
+		#endregion
+		
+		#region Member Variables
+		private Project project;
+		private DiscoveryClientProtocol protocol;
+		private string defaultLanguage;
+		private CodeDomProvider provider;
+		#endregion
+		
+		/// <summary>Initializes a new instance of the CodeGenerator class by specifying the parent project and discovery client protocol.</summary>
+		/// <param name="project">A Project containing the parent project for the Code Generator.</param>
+		/// <param name="protocol">A DiscoveryClientProtocol containing the protocol for the Code Generator.</param>
+		public CodeGenerator(Project project, DiscoveryClientProtocol protocol)
+		{
+			this.project = project;
+			this.protocol = protocol;
+		}
+		
+		/// <summary>Generate the proxy file for the web service.</summary>
+		/// <param name="basePath">A string containing the base path for the proxy file.</param>
+		/// <param name="proxyNamespace">A string containing the namespace for the proxy class.</param>
+		/// <param name="referenceName">A string containing the file name for the proxy file.</param>
+		public string CreateProxyFile(string basePath, string proxyNamespace, string referenceName)
+		{
+			// Setup the proxy namespacec and compile unit
+			ICodeGenerator codeGen = Provider.CreateGenerator();
+			CodeNamespace codeNamespace = new CodeNamespace(proxyNamespace);
+			CodeCompileUnit codeUnit = new CodeCompileUnit();
+			codeUnit.Namespaces.Add(codeNamespace);
+			
+			// Setup the importer and import the service description into the code unit
+			ServiceDescriptionImporter importer = Library.ReadServiceDescriptionImporter(protocol);
+			ServiceDescriptionImportWarnings warnings = importer.Import(codeNamespace, codeUnit);
+			
+			// Generate the code and save the file
+			string fileSpec = Path.Combine(basePath, referenceName + DefaultExtension);
+			StreamWriter writer = new StreamWriter(fileSpec);
+			codeGen.GenerateCodeFromCompileUnit(codeUnit, writer, new CodeGeneratorOptions());
+			writer.Close();
+			
+			return fileSpec;
+		}
+		
+		/// <summary>Generate the map file for the web service.</summary>
+		/// <param name="basePath">A string containing the base path for the map file.</param>
+		/// <param name="referenceName">A string containing the file name for the map file.</param>
+		public string CreateMapFile (string basePath, string filename)
+		{
+			protocol.ResolveAll ();
+			protocol.WriteAll (basePath, filename);
+			return Path.Combine(basePath, filename);
+		}
+	}
+	
+}
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/Library.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/Library.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/Library.cs	(revision 0)
@@ -0,0 +1,175 @@
+using System;
+using System.CodeDom;
+using System.IO;
+using System.Net;
+using System.Web.Services.Description;
+using System.Web.Services.Discovery;
+using System.Xml;
+using System.Xml.Schema;
+using MonoDevelop.Projects;
+
+
+namespace MonoDevelop.WebReferences
+{
+	/// <summary>A Library class containig generic static methods for Web Services.</summary>
+	public class Library
+	{
+		/// <summary>Read the service description for a specified uri.</summary>
+		/// <param name="uri">A string containing the unique reference identifier for the service.</param>
+		/// <returns>A ServiceDescription for the specified uri.</returns>
+		public static ServiceDescription ReadServiceDescription(string uri) 
+		{
+			ServiceDescription desc = new ServiceDescription();
+			try 
+			{
+				HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);
+				WebResponse response  = request.GetResponse();
+			
+				desc = ServiceDescription.Read(response.GetResponseStream());
+				response.Close();
+				desc.RetrievalUrl = uri;
+			} 
+			catch (Exception) {} 
+			
+			return desc;
+		}
+		
+		/// <summary>Read the specified protocol into an ServiceDescriptionImporter.</summary>
+		/// <param name="protocol">A DiscoveryClientProtocol containing the service protocol detail.</param>
+		/// <returns>A ServiceDescriptionImporter for the specified protocol.</returns>
+		public static ServiceDescriptionImporter ReadServiceDescriptionImporter(DiscoveryClientProtocol protocol)
+		{
+   			// Service Description Importer
+			ServiceDescriptionImporter importer = new ServiceDescriptionImporter();
+			importer.ProtocolName = "Soap";
+			// Add all the schemas and service descriptions to the importer
+			protocol.ResolveAll ();
+			foreach (object doc in protocol.Documents.Values)
+			{
+				if (doc is ServiceDescription)
+					importer.AddServiceDescription((ServiceDescription)doc, null, null);
+				else if (doc is XmlSchema)
+					importer.Schemas.Add((XmlSchema)doc);
+			}			
+			return importer;
+		}
+		
+		/// <summary>Generate a XmlDocument for the a DiscoverDocument.</summary>
+		/// <param name="discovery">A DiscoveryDocument containing the details for the disco services.</param>
+		/// <returns>An XmlDocument containing the generated xml for the specified discovery document.</returns>
+		public static XmlDocument GenerateDiscoXml (DiscoveryDocument discovery)
+		{
+			XmlDocument xdoc = new XmlDocument ();
+			XmlElement docelem = xdoc.CreateElement ("services");
+			xdoc.AppendChild (docelem);
+			foreach (DiscoveryReference dref in discovery.References)
+			{
+				if (dref is ContractReference)
+				{
+					XmlElement service = xdoc.CreateElement ("service");
+					docelem.AppendChild (service);
+					service.SetAttribute ("name", Path.GetFileNameWithoutExtension (dref.DefaultFilename));
+					service.SetAttribute ("url", dref.Url);
+				}
+				if (dref is DiscoveryDocumentReference)
+				{
+					XmlElement service = xdoc.CreateElement ("disco");
+					docelem.AppendChild (service);
+					service.SetAttribute ("url", dref.Url);
+				}
+			}
+			return xdoc;
+		}
+		
+		/// <summary>Generate an XmlDocument for the specified DiscoveryClientProtocol.</summary>
+		/// <param name="protocol">A DiscoveryClientProtocol containing the information for the service.</param>
+		/// <returns>An XmlDocument containing the generated xml for the specified discovery protocol.</returns>
+		public static XmlDocument GenerateWsdlXml (DiscoveryClientProtocol protocol)
+		{
+			// Code Namespace & Compile Unit
+			CodeNamespace codeNamespace = new CodeNamespace();
+			CodeCompileUnit codeUnit = new CodeCompileUnit();
+			codeUnit.Namespaces.Add(codeNamespace);
+			
+			// Import and set the warning
+			ServiceDescriptionImporter importer = ReadServiceDescriptionImporter(protocol);
+			importer.Import(codeNamespace, codeUnit);
+			
+			// Create Xml Document
+			XmlDocument xdoc = new XmlDocument ();
+			XmlElement docelem = xdoc.CreateElement ("services");
+			xdoc.AppendChild (docelem);
+			
+			foreach (CodeTypeDeclaration type in codeNamespace.Types)
+			{
+				XmlElement service = xdoc.CreateElement ("service");
+				service.SetAttribute ("name", type.Name);
+				foreach (CodeTypeMember mem in type.Members)
+				{
+					CodeMemberMethod met = mem as CodeMemberMethod;
+					if (met != null && !(mem is CodeConstructor))
+					{
+						// Method
+						XmlElement xmet = xdoc.CreateElement ("method");
+						xmet.SetAttribute ("name", met.Name);
+						// Asynch Begin & End Results
+						string returnType = met.ReturnType.BaseType;
+						if (met.Name.StartsWith ("Begin") && returnType == "System.IAsyncResult") 
+							continue;	// BeginXXX method
+						if (met.Parameters.Count > 0)
+						{
+							CodeParameterDeclarationExpression par = met.Parameters [met.Parameters.Count-1];
+							if (met.Name.StartsWith ("End") && par.Type.BaseType == "System.IAsyncResult")
+								continue;	// EndXXX method
+						}
+						xmet.SetAttribute ("return", returnType);
+						// Parameters
+						foreach (CodeParameterDeclarationExpression par in met.Parameters)
+						{
+							XmlElement xpar = xdoc.CreateElement ("parameter");
+							xmet.AppendChild (xpar);
+							xpar.SetAttribute ("name", par.Name);
+							xpar.SetAttribute ("type", par.Type.BaseType);
+						}
+						// Comments
+						AddCommentElements (xdoc, xmet, met);
+						service.AppendChild (xmet);
+					}
+				}
+				if (service.ChildNodes.Count > 0) 
+				{
+					AddCommentElements (xdoc, service, type);
+					docelem.AppendChild (service);
+				}
+			}
+			return xdoc;
+		}
+		
+		/// <summary>Add CodeTypeMember comment elements to the specified XmlDocument.</summary>
+		/// <param name="xdoc">An XmlDocument that will be used to add the comment to.</param>
+		/// <param name="xmet">An XmlElement that the comment elements will be appended to.</param>
+		/// <param name="member">A CodeTypeMember containg all the comments that will be added to the xmet element.</param>
+		public static void AddCommentElements (XmlDocument xdoc, XmlElement xmet, CodeTypeMember member)
+		{
+			foreach (CodeCommentStatement comment in member.Comments)
+			{
+				XmlElement xcom = xdoc.CreateElement ("comment");
+				xmet.AppendChild (xcom);
+				string com = comment.Comment.Text;
+				com = com.Replace ("<remarks>","");
+				com = com.Replace ("</remarks>","");
+				com = com.Replace ("<remarks/>","");
+				xcom.SetAttribute ("text", com);
+			}
+		}
+		
+		/// <summary>Gets the path where all web references will be stored for the specified project.</summary>
+		/// <param name="project">A Project containing the root project information.</project>
+		/// <returns>A string containing the base path for web references.</returns>
+		public static string GetWebReferencePath (Project project)
+		{
+			return Path.Combine(project.BaseDirectory, "WebReferences");
+		}
+	}
+	
+}
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/WebReferenceItemCollection.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/WebReferenceItemCollection.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/WebReferenceItemCollection.cs	(revision 0)
@@ -0,0 +1,116 @@
+using System;
+using System.Collections.Specialized; 
+using System.IO;
+using MonoDevelop.Projects;
+
+namespace MonoDevelop.WebReferences
+{
+	/// <summary>Defines the properties and methods for the WebReferenceItemCollection class.</summary>
+	public class WebReferenceItemCollection : NameObjectCollectionBase
+	{
+		#region Properties
+		/// <summary>Get the Dictionary Entry for the specified index</summary>
+		public WebReferenceItem this [int index]
+		{
+			get {return((WebReferenceItem) this.BaseGet(index));}
+		}
+
+		/// <summary>Get and set the TaskFieldObject for the specified key</summary>
+		public WebReferenceItem this [string key]
+		{
+			get {return((WebReferenceItem) this.BaseGet(key));}
+			set {this.BaseSet(key, value);}
+		}
+
+		/// <summary>Gets a String array that contains all the keys in the collection</summary>
+		public string[] AllKeys  
+		{
+			get  {return(this.BaseGetAllKeys());}
+		}
+
+		/// <summary>Gets a value indicating if the collection contains keys that are not null.</summary>
+		public bool HasKeys  
+		{
+			get {return(this.BaseHasKeys());}
+		}
+		#endregion
+
+		/// <summary>Initializes a new instance of the WebReferenceItemCollection class</summary>
+		public WebReferenceItemCollection() {}
+
+		/// <summary>Initializes a new instance of the WebReferenceItemCollection class by specifying the project</summary>
+		public WebReferenceItemCollection(Project project)
+		{
+			foreach (ProjectFile file in project.ProjectFiles)
+			{
+				if (file.Name.EndsWith("Reference.cs"))
+				{
+					ProjectFile mapFile = this.GetMapProjectFile(file);
+					if (mapFile != null)
+					{
+						FileInfo fileInfo = new FileInfo(file.FilePath);
+						WebReferenceItem item = new WebReferenceItem(fileInfo.Directory.Name, file, mapFile);
+						this.Add(item);
+					}
+				}
+			}
+		}
+		
+		/// <summary>Gets the Map ProjectFile assocaited with the Proxyfile.</summary>
+		/// <param name="proxyFile">A ProjectFile containing the settings for the proxy file.</summary>
+		/// <returns>A ProjectFile containing the Map Project File.</returns>
+		private ProjectFile GetMapProjectFile(ProjectFile proxyFile)
+		{
+			foreach (ProjectFile file in proxyFile.Project.ProjectFiles)
+				if (file.Name == proxyFile.Name.Replace(".cs", ".map"))
+					return file;
+			return null;			
+		}
+		
+		/// <summary>Checks if the specified key already exists in the collection.</summary>
+		/// <param name="proxyFile
+		public bool Contains(string key)
+		{
+			for (int index = 0; index < this.AllKeys.Length; index ++)
+				if (this.AllKeys[index] == key)
+					return true;
+			return false;
+		}
+
+		/// <summary>Adds an entry to the collection.</summary>
+		/// <param name="key">A string containing the name of the key</param>
+		/// <param name="value">A WebReferenceItem containing the value to be added to the collection</param>
+		public void Add(string key, WebReferenceItem value)  
+		{
+			this.BaseAdd(key, value);
+		}
+		
+		/// <summary>Adds an entry to the collection.</summary>
+		/// <param name="value">A WebReferenceItem containing the value to be added to the collection</param>
+		public void Add(WebReferenceItem value)
+		{
+			this.Add(value.Name, value);
+		}
+
+		/// <summary>Removes an entry with the specified key from the collection</summary>
+		/// <param name="key">A string containing the name of the key</param>
+		public void Remove(string key )  
+		{
+			this.BaseRemove(key);
+		}
+
+		/// <summary>Removes an entry with the specified key from the collection</summary>
+		/// <param name="index">An int containing the index of the key</param>
+		public void Remove(int index)  
+		{
+			this.BaseRemoveAt(index);
+		}
+
+		/// <summary>Clears all the elements in the collection</summary>
+		public void Clear()  
+		{
+			this.BaseClear();
+		}
+	}
+	
+}
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/WebReferenceFolder.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/WebReferenceFolder.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/WebReferenceFolder.cs	(revision 0)
@@ -0,0 +1,47 @@
+using System;
+using MonoDevelop.Projects;
+
+namespace MonoDevelop.WebReferences
+{
+	/// <summary>Defines the properties and methods for the WebReferenceFolder class.</summary>
+	public class WebReferenceFolder
+	{
+		#region Properties
+		/// <summary>Gets the parent Project for the Web Reference Folder.</summary>
+		/// <value>A Project containing the parent project for the current Web Reference Folder.</value>
+		public Project Project
+		{
+			get { return project; }
+		}
+		#endregion
+		
+		#region Member Variables
+		private Project project;
+		#endregion
+		
+		/// <summary>Initializes a new instance of the WebReferenceFolder class by specifying the parent project.</summary>
+		/// <param name="project">A Project containing the parent project for the WebReferenceFolder.</param>
+		public WebReferenceFolder(Project project)
+		{
+			this.project = project;
+		}
+		
+		/// <summary>Checks if the specified other object is equal to the current object.</summary>
+		/// <param name="other">An object containing the object that needs to be compared to the current object.</param>
+		/// <returns>True of the other object is equal to the current object, otherwise false.</returns>
+		public override bool Equals (object other)
+		{
+			
+			WebReferenceFolder folder = other as WebReferenceFolder;
+			return folder != null && project == folder.project;
+		}
+		
+		/// <summary>Get ths Has Code for the current WebReferenceFolder.</summary>
+		/// <returns>An int containing the HasCode for the current WebReferenceFolder.</summary>
+		public override int GetHashCode ()
+		{
+			return project.GetHashCode () + 2;
+		}
+	}
+	
+}
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/DiscoveryProtocol.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/DiscoveryProtocol.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences/DiscoveryProtocol.cs	(revision 0)
@@ -0,0 +1,53 @@
+using System;
+using System.IO;
+using System.Xml.Serialization;
+using System.Web.Services.Discovery;
+
+namespace MonoDevelop.WebReferences
+{
+	/// <summary>Provides support for programmatically invoking XML Web services discovery.</summary>
+	public class DiscoveryProtocol : System.Web.Services.Discovery.DiscoveryClientProtocol
+	{
+		/// <summary>
+		/// Reads in a file containing a map of saved discovery documents populating the Documents and References properties, 
+		/// with discovery documents, XML Schema Definition (XSD) schemas, and service descriptions referenced in the file.
+		/// </summary>
+		/// <param name="topLevelFilename">Name of file to read in, containing the map of saved discovery documents.</param>
+		/// <returns>
+		/// A DiscoveryClientResultCollection containing the results found in the file with the map of saved discovery documents. 
+		/// The file format is a DiscoveryClientProtocol.DiscoveryClientResultsFile class serialized into XML; however, one would 
+		/// typically create the file using only the WriteAll method or Disco.exe.
+		/// </returns>
+		public DiscoveryClientResultCollection ReadAllUseBasePath(string topLevelFilename)
+		{
+			string basePath = (new FileInfo(topLevelFilename)).Directory.FullName;
+			StreamReader sr = new StreamReader (topLevelFilename);
+			XmlSerializer ser = new XmlSerializer (typeof (DiscoveryClientResultsFile));
+			DiscoveryClientResultsFile resfile = (DiscoveryClientResultsFile) ser.Deserialize (sr);
+			sr.Close ();
+			
+			foreach (DiscoveryClientResult dcr in resfile.Results)
+			{
+				// Done this cause Type.GetType(dcr.ReferenceTypeName) returned null
+				Type type = null;
+				switch (dcr.ReferenceTypeName)
+				{
+					case "System.Web.Services.Discovery.ContractReference":
+						type = typeof(System.Web.Services.Discovery.ContractReference);
+						break;
+					case "System.Web.Services.Discovery.DiscoveryDocumentReference":
+						type = typeof(System.Web.Services.Discovery.DiscoveryDocumentReference);
+						break;
+				}
+				
+				DiscoveryReference dr = (DiscoveryReference) Activator.CreateInstance(type);
+				dr.Url = dcr.Url;
+				FileStream fs = new FileStream (Path.Combine(basePath, dcr.Filename), FileMode.Open, FileAccess.Read);
+				Documents.Add (dr.Url, dr.ReadDocument (fs));
+				fs.Close ();
+				References.Add (dr.Url, dr);
+			}
+			return resfile.Results;	
+		}
+	}	
+}
\ No newline at end of file
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Commands/WebReferenceCommands.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Commands/WebReferenceCommands.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Commands/WebReferenceCommands.cs	(revision 0)
@@ -0,0 +1,14 @@
+using System;
+
+namespace MonoDevelop.WebReferences
+{
+	/// <summary>Defines an enumeration of all the available commands for maintaining Web References.</summary>
+	public enum WebReferenceCommands
+	{
+		Add,
+		Update,
+		UpdateAll,
+		Delete,
+		DeleteAll
+	}
+}
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Commands/WebReferenceCommandHandler.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Commands/WebReferenceCommandHandler.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Commands/WebReferenceCommandHandler.cs	(revision 0)
@@ -0,0 +1,112 @@
+using System;
+using System.Collections;
+using System.IO;
+using System.Web.Services.Discovery;
+using MonoDevelop.Components.Commands;
+using MonoDevelop.Core;
+using MonoDevelop.Ide.Gui;
+using MonoDevelop.Ide.Gui.Pads;
+using MonoDevelop.Ide.Gui.Pads.ProjectPad;
+using MonoDevelop.Projects;
+using MonoDevelop.WebReferences.Dialogs;
+
+namespace MonoDevelop.WebReferences.Commands
+{
+	/// <summary>Defines the properties and methods for the WebReferenceCommandHandler class.</summary>
+	public class WebReferenceCommandHandler : NodeCommandHandler
+	{
+		/// <summary>Execute the command for adding a new web reference to a project.</summary>
+		[CommandHandler (MonoDevelop.WebReferences.WebReferenceCommands.Add)]
+		public void NewWebReference()
+		{
+			// Get the project and project folder
+			Project project = CurrentNode.GetParentDataItem (typeof(Project), true) as Project;
+			WebReferenceDialog dialog = new WebReferenceDialog(Library.GetWebReferencePath(project));
+			dialog.NamespacePrefix = project.Name;
+			
+			int response = dialog.Run();
+			dialog.Destroy();
+			if (response == (int)Gtk.ResponseType.Ok)
+			{
+				try
+				{
+					CodeGenerator gen = new CodeGenerator(project, dialog.SelectedService);
+					
+					// Create the base directory if it does not exists
+					string basePath = dialog.ReferencePath;
+					if (!Directory.Exists(basePath))
+						Directory.CreateDirectory(basePath);
+					
+					// Generate the wsdl, disco and map files
+					string mapSpec = gen.CreateMapFile(basePath, "Reference.map");
+					ProjectFile mapFile = new ProjectFile(mapSpec);
+					mapFile.BuildAction = BuildAction.Nothing;
+					mapFile.Subtype = Subtype.Code;
+					project.ProjectFiles.Add(mapFile);
+			
+					// Generate the proxy class
+					string proxySpec = gen.CreateProxyFile(basePath, dialog.Namespace + "." + dialog.ReferenceName, "Reference");
+					ProjectFile proxyFile = new ProjectFile(proxySpec);
+					proxyFile.BuildAction = BuildAction.Compile;
+					proxyFile.Subtype = Subtype.Code;
+					project.ProjectFiles.Add(proxyFile);
+					
+					IdeApp.ProjectOperations.SaveProject(project);
+				}
+				catch(Exception exception)
+				{
+					IdeApp.Services.MessageService.ShowError(exception);
+				}
+			}
+		}
+		
+		/// <summary>Execute the command for updating a web reference in a project.</summary>
+		[CommandHandler (MonoDevelop.WebReferences.WebReferenceCommands.Update)]
+		public void Update()
+		{
+			WebReferenceItem item = (WebReferenceItem) CurrentNode.DataItem;
+			item.Update();
+			IdeApp.Services.StatusBar.SetMessage("Updated Web Reference " + item.Name);
+		}
+		
+		/// <summary>Execute the command for updating all web reference in a project.</summary>
+		[CommandHandler (MonoDevelop.WebReferences.WebReferenceCommands.UpdateAll)]
+		public void UpdateAll()
+		{
+			Project project = ((WebReferenceFolder) CurrentNode.DataItem).Project;
+			WebReferenceItemCollection items = new WebReferenceItemCollection (project);
+			for (int index = 0; index < items.AllKeys.Length; index ++)
+			{
+				items[items.AllKeys[index]].Update();
+				IdeApp.Services.StatusBar.SetMessage("Updated Web Reference " + items.AllKeys[index]);
+			}
+			IdeApp.Services.StatusBar.SetMessage("Updated all Web References");
+		}
+		
+		/// <summary>Execute the command for removing a web reference from a project.</summary>
+		[CommandHandler (MonoDevelop.WebReferences.WebReferenceCommands.Delete)]
+		public void Delete()
+		{
+			WebReferenceItem item = (WebReferenceItem) CurrentNode.DataItem;
+			Project project = item.ProxyFile.Project;
+			item.Delete();
+			IdeApp.ProjectOperations.SaveProject(project);
+			IdeApp.Services.StatusBar.SetMessage("Deleted Web Reference " + item.Name);
+		}
+		
+		/// <summary>Execute the command for removing all web references from a project.</summary>
+		[CommandHandler (MonoDevelop.WebReferences.WebReferenceCommands.DeleteAll)]
+		public void DeleteAll()
+		{
+			Project project = ((WebReferenceFolder) CurrentNode.DataItem).Project;
+			WebReferenceItemCollection items = new WebReferenceItemCollection (project);
+			for (int index = 0; index < items.AllKeys.Length; index ++)
+			{
+				items[items.AllKeys[index]].Delete();
+				IdeApp.Services.StatusBar.SetMessage("Deleted Web Reference " + items.AllKeys[index]);
+			}
+			IdeApp.ProjectOperations.SaveProject(project);
+			IdeApp.Services.StatusBar.SetMessage("Deleted all Web References");
+		}
+	}	
+}
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Dialogs/WebReferenceDialog.cs
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Dialogs/WebReferenceDialog.cs	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Dialogs/WebReferenceDialog.cs	(revision 0)
@@ -0,0 +1,620 @@
+using System;
+using System.Collections;
+using System.IO;
+using System.Net;using System.Runtime.Remoting.Messaging;
+using System.Threading;
+using System.Web.Services.Description;
+using System.Web.Services.Discovery;
+using System.Xml;
+using System.Xml.Xsl;
+using System.Xml.XPath;
+using MonoDevelop.Core;
+using MonoDevelop.Components.HtmlControl;
+using MonoDevelop.Ide.Gui;
+using MonoDevelop.WebReferences;
+using Gtk;
+
+namespace MonoDevelop.WebReferences.Dialogs
+{
+	/// <summary>Defines the properties and methods for the AddWebReferenceDialog dialog.</summary>
+	public class WebReferenceDialog : Gtk.Dialog
+	{
+		#region Child Widgets
+		protected Gtk.Toolbar tlbNavigate = new Gtk.Toolbar();
+		protected Gtk.ToolButton btnBack;
+		protected Gtk.ToolButton btnNext;
+		protected Gtk.ToolButton btnRefresh;
+		protected Gtk.ToolButton btnStop;
+		protected Gtk.ToolButton btnHome;
+		protected Gtk.Label lblReferenceURL = new Gtk.Label();
+		protected Gtk.Entry tbxReferenceURL = new Gtk.Entry();
+		protected Gtk.Label lblReference = new Gtk.Label();
+		protected Gtk.Entry tbxReferenceName = new Gtk.Entry();
+		protected Gtk.Label lblNamespace = new Gtk.Label();
+		protected Gtk.Entry tbxNamespace = new Gtk.Entry();
+		protected Gtk.Button btnOK = new Gtk.Button();
+		protected MozillaControl cstBrowser = new MozillaControl();
+		#endregion
+		
+		#region Properties
+		/// <summary>Gets or Sets whether the current location of the browser is a valid web service or not.</summary>
+		/// <value>True if the current location of the browser is a Web Service, otherwise false.</value>
+		public bool IsWebService
+		{
+			get { return btnOK.Sensitive; }
+			set 
+			{
+				// Clear out the Reference and Namespace Entry
+				if (btnOK.Sensitive && !value)
+				{
+					this.tbxReferenceName.Text = "";
+				}
+				btnOK.Sensitive = value;
+				tbxReferenceName.Sensitive = value;
+			}
+		}
+		
+		/// <summary>Gets or Sets the current url for web service</summary>
+		/// <value>A string containing the url of the web service</value>
+		public string ServiceUrl
+		{
+			get { return serviceUrl; }
+			set { serviceUrl = value; }
+		}
+		
+		/// <summary>Gets or Sets the namespace prefix for the web service</summary>
+		/// <value>A string containing namespace prefix value for the web service</value>
+		public string NamespacePrefix
+		{
+			get { return namespacePrefix; }
+			set { namespacePrefix = value; }
+		}
+		
+		/// <summary>Gets the default namespace for the web service based of the service url and namespace prefix</summary>
+		/// <value>A string containing default namespace for the web service</value>
+		public string DefaultNamespace
+		{
+			get { return namespacePrefix; }
+		}
+		
+		/// <summary>Gets the default reference name for the web service based of the service url</summary>
+		/// <value>A string containing default reference name for the web service</value>
+		public string DefaultReferenceName
+		{
+			get
+			{
+				Uri discoveryUri = new Uri(this.ServiceUrl);
+				if (discoveryUri != null)
+					return discoveryUri.Host;
+				else
+					return String.Empty;
+			}
+		}
+		
+		/// <summary>Gets the name for the web reference.</summary>
+		/// <value>A string containing the name for the web reference.</value>
+		public string ReferenceName
+		{
+			get { return this.tbxReferenceName.Text; }
+		}
+		
+		/// <summary>Gets the namespace for the web reference.</summary>
+		/// <value>A string containing the namespace for the web refrence.</value>
+		public string Namespace
+		{
+			get { return this.tbxNamespace.Text; }
+		}
+		
+		/// <summary>Gets the selected service discovery client protocol.</summary>
+		/// <value>A DiscoveryClientProtocol containing the web reference information.</value>
+		public DiscoveryClientProtocol SelectedService
+		{
+			get { return selectedService; }
+		}
+		
+		/// <summary>Gets or Sets the the base path of the where the web reference.</summary>
+		/// <value>A string containing the base path where all the web references are stored in.</summary>
+		public string BasePath
+		{
+			get { return basePath; }
+			set { basePath = value; }
+		}
+		
+		/// <summary>Gets the the base path for the current reference.</summary>
+		/// <value>A string containing the base path for the current reference.</summary>
+		public string ReferencePath
+		{
+			get { return System.IO.Path.Combine(BasePath, ReferenceName); }
+		}
+		#endregion
+		
+		#region Member Variables
+		private string homeUrl = "http://www.w3schools.com/WebServices/TempConvert.asmx";
+		private string serviceUrl = "";
+		private string namespacePrefix = "";
+		private DiscoveryClientProtocol selectedService;
+		private string basePath = "";
+		#endregion
+		
+		/// <summary>Initializes a new instance of the AddWebReferenceDialog widget.</summary>
+		public WebReferenceDialog(string basePath)
+		{
+			this.basePath = basePath;
+			// Set the Dialog default Settings
+           this.Title = "Add Web Reference";
+           this.WindowPosition = ((Gtk.WindowPosition)(4));
+           this.HasSeparator = false;
+           this.Events = ((Gdk.EventMask)(256));
+           this.Name = "MonoDevelop.WebReferences.Gui.WebReferenceDialog";
+           this.DefaultWidth = 543;
+           this.DefaultHeight = 347;
+           this.IsWebService = false;
+           
+           // dlgWindow
+           Gtk.VBox dlgWindow = this.VBox;
+           dlgWindow.BorderWidth = ((uint)(2));
+           dlgWindow.Events = ((Gdk.EventMask)(256));
+           dlgWindow.Name = "dlgWindow";
+           
+           // vbxContainer
+           Gtk.VBox vbxContainer = new Gtk.VBox();
+           vbxContainer.Events = ((Gdk.EventMask)(0));
+           vbxContainer.Name = "vbxContainer";
+           
+           // tlbNavigate
+           tlbNavigate.ToolbarStyle = Gtk.ToolbarStyle.Icons;
+           // btnBack
+           Gtk.Image imgBack = new Gtk.Image();
+           imgBack.Pixbuf = Gtk.IconTheme.Default.LoadIcon("stock_left", 10, 0);
+           btnBack = new Gtk.ToolButton(imgBack, null);
+           btnBack.Sensitive = false;
+           btnBack.Clicked += new EventHandler(Browser_BackButtonClicked);
+           Gtk.Tooltips tipBack = new Gtk.Tooltips();
+           btnBack.SetTooltip(tipBack, "Go back one page", "Go back one page");
+           tipBack.Enable();
+           btnBack.ShowAll();
+           tlbNavigate.Add(btnBack);
+           // btnNext
+           Gtk.Image imgNext = new Gtk.Image();
+           imgNext.Pixbuf = Gtk.IconTheme.Default.LoadIcon("stock_right", 10, 0);
+           btnNext = new Gtk.ToolButton(imgNext, null);
+           btnNext.Sensitive = false;
+           btnNext.Clicked += new EventHandler(Browser_NextButtonClicked);
+           Gtk.Tooltips tipNext = new Gtk.Tooltips();
+           btnBack.SetTooltip(tipNext, "Go forward one page", "Go forward one page");
+           tipNext.Enable();
+           btnNext.ShowAll();
+           tlbNavigate.Add(btnNext);
+           // btnRefresh
+           Gtk.Image imgRefresh = new Gtk.Image();
+           imgRefresh.Pixbuf = Gtk.IconTheme.Default.LoadIcon("gtk-refresh", 10, 0);
+           btnRefresh = new Gtk.ToolButton(imgRefresh, null);
+           btnRefresh.Clicked += new EventHandler(Browser_RefreshButtonClicked);
+           Gtk.Tooltips tipRefresh = new Gtk.Tooltips();
+           btnRefresh.SetTooltip(tipRefresh, "Reload current page", "Reload current page");
+           tipRefresh.Enable();
+           btnRefresh.ShowAll();
+           tlbNavigate.Add(btnRefresh);
+           // btnStop
+           Gtk.Image imgStop = new Gtk.Image();
+           imgStop.Pixbuf = Gtk.IconTheme.Default.LoadIcon("gtk-stop", 10, 0);
+           btnStop = new Gtk.ToolButton(imgStop, null);
+           //btnStop.Sensitive = false;
+           btnStop.Clicked += new EventHandler(Browser_StopButtonClicked);
+           Gtk.Tooltips tipStop = new Gtk.Tooltips();
+           btnStop.SetTooltip(tipStop, "Stop loading this page", "Stop loading this page");
+           tipStop.Enable();
+           btnStop.ShowAll();
+           tlbNavigate.Add(btnStop);
+           // btnHome
+           Gtk.Image imgHome = new Gtk.Image();
+           imgHome.Pixbuf = Gtk.IconTheme.Default.LoadIcon("gtk-home", 10, 0);
+           btnHome = new Gtk.ToolButton(imgHome, null);
+           btnHome.Clicked += new EventHandler(Browser_HomeButtonClicked);
+           Gtk.Tooltips tipHome = new Gtk.Tooltips();
+           btnHome.SetTooltip(tipRefresh, "Go back to the home page", "Go back to the home page");
+           tipHome.Enable();
+           btnHome.ShowAll();
+           tlbNavigate.Add(btnHome);
+           // tlbNavigateBoxChild
+           vbxContainer.Add(tlbNavigate);
+           Gtk.Box.BoxChild tlbNavigateBoxChild = ((Gtk.Box.BoxChild)(vbxContainer[tlbNavigate]));
+           tlbNavigateBoxChild.Position = 0;
+           tlbNavigateBoxChild.Expand = false;
+           tlbNavigateBoxChild.Fill = false;
+           
+           // tblWebServiceUrl
+           Gtk.Table tblWebServiceUrl = new Gtk.Table(((uint)(2)), ((uint)(3)), false);
+           tblWebServiceUrl.Events = ((Gdk.EventMask)(0));
+           tblWebServiceUrl.Name = "tblWebServiceUrl";
+           
+           // lblReferenceURL
+           lblReferenceURL.LabelProp = "Web Service Url: ";
+           lblReferenceURL.Events = ((Gdk.EventMask)(0));
+           lblReferenceURL.Name = "lblReferenceURL";
+           tblWebServiceUrl.Add(lblReferenceURL);
+           // lblReferenceURLTableChild
+           Gtk.Table.TableChild lblReferenceURLTableChild = ((Gtk.Table.TableChild)(tblWebServiceUrl[lblReferenceURL]));
+           lblReferenceURLTableChild.XPadding = ((uint)(3));
+           lblReferenceURLTableChild.XOptions = ((Gtk.AttachOptions)(4));
+           lblReferenceURLTableChild.YOptions = ((Gtk.AttachOptions)(4));
+           
+           // tbxReferenceURL
+           tbxReferenceURL.Events = ((Gdk.EventMask)(0));
+           tbxReferenceURL.Name = "tbxReferenceURL";
+           tblWebServiceUrl.Add(tbxReferenceURL);
+           tbxReferenceURL.KeyReleaseEvent += new Gtk.KeyReleaseEventHandler(Browser_URLKeyReleased);
+           // tbxReferenceURLTableChild
+           Gtk.Table.TableChild tbxReferenceURLTableChild = ((Gtk.Table.TableChild)(tblWebServiceUrl[tbxReferenceURL]));
+           tbxReferenceURLTableChild.LeftAttach = ((uint)(1));
+           tbxReferenceURLTableChild.RightAttach = ((uint)(2));
+           tbxReferenceURLTableChild.YOptions = ((Gtk.AttachOptions)(4));
+           
+           // btnGO
+           Gtk.Button btnGO = new Gtk.Button();
+           btnGO.CanFocus = true;
+           btnGO.Events = ((Gdk.EventMask)(0));
+           btnGO.Name = "btnGO";
+           btnGO.Clicked += new EventHandler(Browser_GoButtonClicked);
+           // btnGOAlignment
+           Gtk.Alignment btnGOAlignment = new Gtk.Alignment(0.5F, 0.5F, 0F, 0F);
+           btnGOAlignment.Events = ((Gdk.EventMask)(0));
+           btnGOAlignment.Name = "btnGOAlignment";
+           // btnGOHBox
+           Gtk.HBox btnGOHBox = new Gtk.HBox();
+           btnGOHBox.Spacing = 2;
+           btnGOHBox.Events = ((Gdk.EventMask)(0));
+           btnGOHBox.Name = "btnGOHBox";
+           // btnGOImage
+           Gtk.Image btnGOImage = new Gtk.Image();
+           btnGOImage.Pixbuf = Gtk.IconTheme.Default.LoadIcon("gtk-ok", 16, 0);
+           btnGOImage.Events = ((Gdk.EventMask)(0));
+           btnGOImage.Name = "btnGOImage";
+           btnGOHBox.Add(btnGOImage);
+           // btnGOLabel
+           Gtk.Label btnGOLabel = new Gtk.Label();
+           btnGOLabel.LabelProp = "";
+           btnGOLabel.Events = ((Gdk.EventMask)(0));
+           btnGOLabel.Name = "btnGOLabel";
+           btnGOHBox.Add(btnGOLabel);
+           btnGOAlignment.Add(btnGOHBox);
+           btnGO.Add(btnGOAlignment);
+           tblWebServiceUrl.Add(btnGO);
+           // btnGOTableChild
+           Gtk.Table.TableChild btnGOTableChild = ((Gtk.Table.TableChild)(tblWebServiceUrl[btnGO]));
+           btnGOTableChild.LeftAttach = ((uint)(2));
+           btnGOTableChild.RightAttach = ((uint)(3));
+           btnGOTableChild.XPadding = ((uint)(3));
+           btnGOTableChild.XOptions = ((Gtk.AttachOptions)(4));
+           btnGOTableChild.YOptions = ((Gtk.AttachOptions)(4));
+           
+           // tblWebServiceUrlBoxChild
+           vbxContainer.Add(tblWebServiceUrl);
+           Gtk.Box.BoxChild tblWebServiceUrlBoxChild = ((Gtk.Box.BoxChild)(vbxContainer[tblWebServiceUrl]));
+           tblWebServiceUrlBoxChild.Position = 1;
+           tblWebServiceUrlBoxChild.Expand = false;
+           tblWebServiceUrlBoxChild.Fill = false;
+           
+           // cstBrowser
+           Gtk.Frame frmBrowser = new Gtk.Frame();
+           vbxContainer.Add(frmBrowser);
+           frmBrowser.Show();
+           Gtk.Box.BoxChild frmBrowserBoxChild = ((Gtk.Box.BoxChild)(vbxContainer[frmBrowser]));
+           frmBrowserBoxChild.Position = 2;
+           cstBrowser = new MozillaControl();
+           cstBrowser.LocChange += new EventHandler(Browser_LocationChanged);
+           cstBrowser.NetStart += new EventHandler(Browser_StartLoading);
+           cstBrowser.NetStop += new EventHandler(Browser_StopLoading);
+           frmBrowser.Add(cstBrowser);
+           cstBrowser.LoadUrl(this.homeUrl);
+           cstBrowser.Show();
+           
+           // tblReferenceName
+           Gtk.Table tblReferenceName = new Gtk.Table(((uint)(2)), ((uint)(2)), false);
+           tblReferenceName.RowSpacing = ((uint)(3));
+           tblReferenceName.ColumnSpacing = ((uint)(3));
+           tblReferenceName.BorderWidth = ((uint)(1));
+           tblReferenceName.Events = ((Gdk.EventMask)(0));
+           tblReferenceName.Name = "tblReferenceName";
+           
+           // lblReference
+           lblReference.LabelProp = "Reference: ";
+           lblReference.Justify = ((Gtk.Justification)(1));
+           lblReference.Events = ((Gdk.EventMask)(0));
+           lblReference.Name = "lblReference";
+           tblReferenceName.Add(lblReference);
+           // lblReferenceTableChild
+           Gtk.Table.TableChild lblReferenceTableChild = ((Gtk.Table.TableChild)(tblReferenceName[lblReference]));
+           lblReferenceTableChild.XPadding = ((uint)(3));
+           lblReferenceTableChild.YPadding = ((uint)(3));
+           lblReferenceTableChild.XOptions = ((Gtk.AttachOptions)(4));
+           lblReferenceTableChild.YOptions = ((Gtk.AttachOptions)(4));
+           
+           // lblNamespace
+           lblNamespace.LabelProp = "Namespace: ";
+           lblNamespace.Events = ((Gdk.EventMask)(0));
+           lblNamespace.Name = "lblNamespace";
+           tblReferenceName.Add(lblNamespace);
+           // lblNamespaceTableChild
+           Gtk.Table.TableChild lblNamespaceTableChild = ((Gtk.Table.TableChild)(tblReferenceName[lblNamespace]));
+           lblNamespaceTableChild.TopAttach = ((uint)(1));
+           lblNamespaceTableChild.BottomAttach = ((uint)(2));
+           lblNamespaceTableChild.XPadding = ((uint)(3));
+           lblNamespaceTableChild.YPadding = ((uint)(3));
+           lblNamespaceTableChild.XOptions = ((Gtk.AttachOptions)(4));
+           lblNamespaceTableChild.YOptions = ((Gtk.AttachOptions)(4));
+           
+           // tbxReferenceName
+           tbxReferenceName.Editable = true;
+           tbxReferenceName.InvisibleChar = '●';
+           tbxReferenceName.CanFocus = true;
+           tbxReferenceName.Events = ((Gdk.EventMask)(0));
+           tbxReferenceName.Name = "tbxReferenceName";
+           tblReferenceName.Add(tbxReferenceName);
+           // tbxReferenceNameTableChild
+           Gtk.Table.TableChild tbxReferenceNameTableChild = ((Gtk.Table.TableChild)(tblReferenceName[tbxReferenceName]));
+           tbxReferenceNameTableChild.LeftAttach = ((uint)(1));
+           tbxReferenceNameTableChild.RightAttach = ((uint)(2));
+           tbxReferenceNameTableChild.YOptions = ((Gtk.AttachOptions)(4));
+           
+           // tbxNamespace
+           tbxNamespace.Editable = false;
+           tbxNamespace.InvisibleChar = '●';
+           tbxNamespace.CanFocus = false;
+           tbxNamespace.Events = ((Gdk.EventMask)(0));
+           tbxNamespace.Name = "tbxNamespace";
+           tbxNamespace.Sensitive = false;
+           // tbxNamespaceTableChild
+           tblReferenceName.Add(tbxNamespace);
+           Gtk.Table.TableChild tbxNamespaceTableChild = ((Gtk.Table.TableChild)(tblReferenceName[tbxNamespace]));
+           tbxNamespaceTableChild.TopAttach = ((uint)(1));
+           tbxNamespaceTableChild.BottomAttach = ((uint)(2));
+           tbxNamespaceTableChild.LeftAttach = ((uint)(1));
+           tbxNamespaceTableChild.RightAttach = ((uint)(2));
+           tbxNamespaceTableChild.YOptions = ((Gtk.AttachOptions)(4));
+           
+           // tblReferenceNameBoxChild
+           vbxContainer.Add(tblReferenceName);
+           Gtk.Box.BoxChild tblReferenceNameBoxChild = ((Gtk.Box.BoxChild)(vbxContainer[tblReferenceName]));
+           tblReferenceNameBoxChild.Position = 3;
+           tblReferenceNameBoxChild.Expand = false;
+           tblReferenceNameBoxChild.Fill = false;
+           
+           // vbxContainerBoxChild
+           dlgWindow.Add(vbxContainer);
+           Gtk.Box.BoxChild vbxContainerBoxChild = ((Gtk.Box.BoxChild)(dlgWindow[vbxContainer]));
+           vbxContainerBoxChild.Position = 0;
+           
+           // palActionArea
+           Gtk.HButtonBox palActionArea = this.ActionArea;
+           palActionArea.LayoutStyle = ((Gtk.ButtonBoxStyle)(4));
+           palActionArea.Spacing = 10;
+           palActionArea.BorderWidth = ((uint)(5));
+           palActionArea.Events = ((Gdk.EventMask)(256));
+           palActionArea.Name = "palActionArea";
+           
+           // btnCancel
+           Gtk.Button btnCancel = new Gtk.Button();
+           btnCancel.UseStock = true;
+           btnCancel.UseUnderline = true;
+           btnCancel.CanDefault = true;
+           btnCancel.CanFocus = true;
+           btnCancel.Events = ((Gdk.EventMask)(0));
+           btnCancel.Name = "btnCancel";
+           btnCancel.Label = "gtk-cancel";
+           btnCancel.Clicked += new EventHandler(Dialog_ButtonClicked);
+           palActionArea.Add(btnCancel);
+           // btnCancelBoxChild
+           Gtk.ButtonBox.ButtonBoxChild btnCancelBoxChild = ((Gtk.ButtonBox.ButtonBoxChild)(palActionArea[btnCancel]));
+           btnCancelBoxChild.Expand = false;
+           btnCancelBoxChild.Fill = false;
+           
+           // btnOK
+           btnOK.UseStock = true;
+           btnOK.UseUnderline = true;
+           btnOK.CanDefault = true;
+           btnOK.CanFocus = false;
+           btnOK.Events = ((Gdk.EventMask)(0));
+           btnOK.Name = "btnOK";
+           btnOK.Label = "gtk-ok";
+           btnOK.Clicked += new EventHandler(Dialog_ButtonClicked);
+           palActionArea.Add(btnOK);
+           // btnOKBoxChild
+           Gtk.ButtonBox.ButtonBoxChild btnOKBoxChild = ((Gtk.ButtonBox.ButtonBoxChild)(palActionArea[btnOK]));
+           btnOKBoxChild.Position = 1;
+           btnOKBoxChild.Expand = false;
+           btnOKBoxChild.Fill = false;
+           
+           lblReferenceURL.Show();
+           tbxReferenceURL.Show();
+           btnGOImage.Show();
+           btnGOLabel.Show();
+           btnGOHBox.Show();
+           btnGOAlignment.Show();
+           btnGO.Show();
+           tblWebServiceUrl.Show();
+           tlbNavigate.Show();
+           lblReference.Show();
+           lblNamespace.Show();
+           tbxReferenceName.Show();
+           tbxNamespace.Show();
+           tblReferenceName.Show();
+           vbxContainer.Show();
+           dlgWindow.Show();
+           btnCancel.Show();
+           btnOK.Show();
+           palActionArea.Show();
+           frmBrowser.Show();
+           cstBrowser.Show();
+		}
+		
+		/// <summary>Execute the event when any of the buttons on the action panel has been clicked</summary>
+		/// <param name="sender">An object that contains the sender data.</param>
+		/// <param name="e">An EventArgs object that contains the event data.</param>
+		private void Dialog_ButtonClicked (object sender, EventArgs e)
+		{
+			if (sender.Equals(btnOK) && Directory.Exists(this.ReferencePath))
+			{
+				string message = String.Format("The referene name '{0}' already exists.", this.ReferenceName);
+				IdeApp.Services.MessageService.ShowWarning(message);
+				return;	
+			}
+			else
+			{
+				Respond((sender.Equals(btnOK)) ? Gtk.ResponseType.Ok : Gtk.ResponseType.Cancel);
+				Destroy();
+			}
+		}
+		
+		/// <summary>Execute the event when the Browser Go button has been clicked</summary>
+		/// <param name="sender">An object that contains the sender data.</param>
+		/// <param name="e">An EventArgs object that contains the event data.</param>
+		private void Browser_GoButtonClicked (object sender, EventArgs e)
+		{
+			cstBrowser.LoadUrl(tbxReferenceURL.Text);
+		}
+		
+		/// <summary>Execute the event when the Enter key has been pressed on the Url Entry</summary>
+		/// <param name="sender">An object that contains the sender data.</param>
+		/// <param name="e">An EventArgs object that contains the event data.</param>
+		private void Browser_URLKeyReleased (object sender, Gtk.KeyReleaseEventArgs e)
+		{
+			if (e.Event.Key == Gdk.Key.Return)
+			{
+				cstBrowser.LoadUrl(tbxReferenceURL.Text);
+			}
+		}
+		
+		/// <summary>Execute the event when the Location of the Browser has changed</summary>
+		/// <param name="sender">An object that contains the sender data.</param>
+		/// <param name="e">An EventArgs object that contains the event data.</param>
+		private void Browser_LocationChanged (object sender, EventArgs e)
+		{
+			this.tbxReferenceURL.Text = this.cstBrowser.Location;
+			this.btnBack.Sensitive = cstBrowser.CanGoBack();
+			this.btnNext.Sensitive = cstBrowser.CanGoForward();
+			// Query the current url for services
+			ThreadPool.QueueUserWorkItem(new WaitCallback(QueryService), this.tbxReferenceURL.Text);
+		}
+		
+		/// <summary>Execute when the browser starts loading a document</summary>
+		/// <param name="sender">An object that contains the sender data.</param>
+		/// <param name="e">An EventArgs object that contains the event data.</param>
+		private void Browser_StartLoading (object sender, EventArgs e)
+		{
+			this.btnStop.Sensitive = true;
+		}
+		
+		/// <summary>Execute the browser stop loading a document</summary>
+		/// <param name="sender">An object that contains the sender data.</param>
+		/// <param name="e">An EventArgs object that contains the event data.</param>
+		private void Browser_StopLoading (object sender, EventArgs e)
+		{
+			this.btnStop.Sensitive = false;
+		}
+		
+		/// <summary>Execute when the Back button has been clicked</summary>
+		/// <param name="sender">An object that contains the sender data.</param>
+		/// <param name="e">An EventArgs object that contains the event data.</param>
+		private void Browser_BackButtonClicked (object sender, EventArgs e)
+		{
+			this.cstBrowser.GoBack();
+		}
+		
+		/// <summary>Execute when the Next button has been clicked</summary>
+		/// <param name="sender">An object that contains the sender data.</param>
+		/// <param name="e">An EventArgs object that contains the event data.</param>
+		private void Browser_NextButtonClicked (object sender, EventArgs e)
+		{
+			this.cstBrowser.GoForward();
+		}
+		
+		/// <summary>Execute when the Refresh button has been clicked</summary>
+		/// <param name="sender">An object that contains the sender data.</param>
+		/// <param name="e">An EventArgs object that contains the event data.</param>
+		private void Browser_RefreshButtonClicked (object sender, EventArgs e)
+		{
+			this.cstBrowser.Reload(0);
+		}
+		
+		/// <summary>Execute when the Stop button has been clicked</summary>
+		/// <param name="sender">An object that contains the sender data.</param>
+		/// <param name="e">An EventArgs object that contains the event data.</param>
+		private void Browser_StopButtonClicked (object sender, EventArgs e)
+		{
+			this.cstBrowser.StopLoad();
+		}
+		
+		/// <summary>Execute when the Home button has been clicked</summary>
+		/// <param name="sender">An object that contains the sender data.</param>
+		/// <param name="e">An EventArgs object that contains the event data.</param>
+		private void Browser_HomeButtonClicked (object sender, EventArgs e)
+		{
+			this.cstBrowser.LoadUrl(this.homeUrl);
+		}
+		
+		/// <summary>Queries the web service to validate that the current url contains services</summary>
+		/// <param name="param">An object that contains the parameter being passed from the ThreadPool.</param>
+		private void QueryService (object param)
+		{
+			string url = param as string;
+			// Set the service url
+			lock (this)
+			{
+				if (serviceUrl == url) 
+					return;
+				serviceUrl = url; 
+			}
+			
+			// Checks the availablity of any services
+			DiscoveryClientProtocol protocol = new DiscoveryClientProtocol ();
+			try
+			{
+				protocol.DiscoverAny (url);
+				// Set the Default Namespace and Reference
+				this.tbxNamespace.Text = this.DefaultNamespace;
+				this.tbxReferenceName.Text = this.DefaultReferenceName;
+				this.IsWebService = true;
+				this.selectedService = protocol;
+				
+//				object doc = protocol.Documents [url];
+//				if (doc  is ServiceDescription)
+//					this.RenderBrowserData(new object[2] { Library.GenerateWsdlXml(protocol), "wsdl.html" });
+//				else if (doc is DiscoveryDocument)
+//					this.RenderBrowserData(new object[2] { Library.GenerateDiscoXml((DiscoveryDocument)doc), "disco.html" });
+				return;
+			}
+			catch (Exception)
+			{
+				this.IsWebService = false;
+				this.selectedService = null;
+				return;
+			}
+		}
+		
+//		private void RenderBrowserData (object param)
+//		{
+//			object[] parameters = param as object[];
+//			try
+//			{
+//				// Load the specified resource as an XslTransform class
+//				Stream stream = GetType().Assembly.GetManifestResourceStream ((string)parameters[1]);
+//				XmlTextReader reader = new XmlTextReader (stream);
+//				XslTransform xslt = new XslTransform ();
+//				xslt.Load (reader, null, null);
+//				
+//				// Transform Html
+//				StringWriter htmlWriter = new StringWriter ();
+//				xslt.Transform ((XmlDocument)parameters[0], null, htmlWriter, null);
+//				this.cstBrowser.RenderData(htmlWriter.ToString(), this.ServiceUrl, "text/html");
+//				htmlWriter.Close();
+//				htmlWriter.Dispose();
+//			}
+//			catch (Exception exception)
+//			{
+//				Console.WriteLine(exception.Message);
+//			}
+//		}
+	}
+	
+}
Index: Extras/MonoDevelop.WebReferences/ChangeLog
===================================================================
--- Extras/MonoDevelop.WebReferences/ChangeLog	(revision 0)
+++ Extras/MonoDevelop.WebReferences/ChangeLog	(revision 0)
@@ -0,0 +1,3 @@
+2006-08-11 Gideon de Swardt  <gdeswardt@gmail.com> 
+
+	* Initial setup of the AddIn
Index: Extras/MonoDevelop.WebReferences/Makefile.am
===================================================================
--- Extras/MonoDevelop.WebReferences/Makefile.am	(revision 0)
+++ Extras/MonoDevelop.WebReferences/Makefile.am	(revision 0)
@@ -0,0 +1,65 @@
+
+ADDIN = MonoDevelop.WebReferences.addin.xml
+ADDIN_BUILD = $(top_builddir)/build/AddIns/MonoDevelop.WebReferences
+ASSEMBLY = $(ADDIN_BUILD)/MonoDevelop.WebReferences.dll
+
+REFS =  \
+	-r:System \
+	-r:System.Web \
+	-r:System.Web.Services \
+	-r:System.Xml \
+	$(GTK_SHARP_LIBS) \
+	-r:$(top_builddir)/build/bin/MonoDevelop.Core.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Components.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Core.Gui.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Ide.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.dll \
+	-r:$(top_builddir)/build/AddIns/MonoDevelop.Projects.Gui.dll
+
+FILES = \
+AssemblyInfo.cs \
+MonoDevelop.WebReferences/CodeGenerator.cs \
+MonoDevelop.WebReferences/DiscoveryNetworkCredential.cs \
+MonoDevelop.WebReferences/DiscoveryProtocol.cs \
+MonoDevelop.WebReferences/Library.cs \
+MonoDevelop.WebReferences/WebReferenceFolder.cs \
+MonoDevelop.WebReferences/WebReferenceItem.cs \
+MonoDevelop.WebReferences/WebReferenceItemCollection.cs \
+MonoDevelop.WebReferences.Commands/WebReferenceCommands.cs \
+MonoDevelop.WebReferences.Commands/WebReferenceCommandHandler.cs \
+MonoDevelop.WebReferences.Dialogs/WebReferenceDialog.cs \
+MonoDevelop.WebReferences.NodeBuilders/ProjectFolderNodeBuilderExtension.cs \
+MonoDevelop.WebReferences.NodeBuilders/ProjectNodeBuilder.cs \
+MonoDevelop.WebReferences.NodeBuilders/WebReferenceFolderNodeBuilder.cs \
+MonoDevelop.WebReferences.NodeBuilders/WebReferenceNodeBuilder.cs
+
+RES = \
+MonoDevelop.WebReferences.Resources/disco.html \
+MonoDevelop.WebReferences.Resources/wsdl.html \
+MonoDevelop.WebReferences.Resources/WebReferenceItem.png \
+MonoDevelop.WebReferences.Resources/WebReference.File.Disco.png \
+MonoDevelop.WebReferences.Resources/WebReference.File.Wsdl.png \
+MonoDevelop.WebReferences.Resources/WebReference.Service.png
+
+all: $(ASSEMBLY) $(ADDIN_BUILD)/$(ADDIN)
+
+$(ADDIN_BUILD)/$(ADDIN): $(srcdir)/$(ADDIN)
+	mkdir -p $(ADDIN_BUILD)
+	cp $(srcdir)/$(ADDIN) $@
+
+$(ADDIN_BUILD)/%: $(srcdir)/lib/%
+	mkdir -p $(ADDIN_BUILD)
+	cp $< $@
+
+$(ASSEMBLY): $(build_sources) $(RES)
+	mkdir -p $(ADDIN_BUILD)
+	$(CSC) $(CSC_FLAGS) -debug -out:$@ -target:library \
+	$(RES:%=/resource:%) $(build_sources) $(REFS)
+
+assemblydir = $(MD_ADDIN_DIR)/MonoDevelop.WebReferences
+assembly_DATA = $(ASSEMBLY) $(ASSEMBLY).mdb $(ADDIN)
+
+CLEANFILES = $(ASSEMBLY) $(ASSEMBLY).mdb $(ADDIN_BUILD)/$(ADDIN)
+EXTRA_DIST = $(FILES) $(ADDIN) $(RES)
+
+include $(top_srcdir)/Makefile.include
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReference.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReference.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReferenceFolder.Closed.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReferenceFolder.Closed.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/disco.html
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/disco.html	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/disco.html	(revision 0)
@@ -0,0 +1,27 @@
+<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
+<xsl:output method="html" indent="yes" version="4.0" encoding="us-ascii" media-type="text/html" doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN" /> 
+<xsl:template match="/">
+<Html>
+	<Head>
+		<Title></Title>
+        <style type="text/css">
+        	BODY { font-family: Arial; margin-left: 20px; margin-top: 20px; font-size: x-small}
+        	LI { margin-botton:15px; }
+        </style>
+	</Head>
+	<Body>
+	Discovery document
+	<ul>
+	<xsl:for-each select="services/service">
+		<li>
+		<xsl:element name="a">
+			<xsl:attribute name="href"><xsl:value-of select="@url"/></xsl:attribute>
+			<xsl:value-of select="@name" />
+		</xsl:element>
+		</li>
+	</xsl:for-each>
+	</ul>
+	</Body>
+</Html>
+</xsl:template>
+</xsl:stylesheet>
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReference.File.Wsdl.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReference.File.Wsdl.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReferenceItem.VS.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReferenceItem.VS.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReferenceFolder.Open.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReferenceFolder.Open.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/wsdl.html
===================================================================
--- Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/wsdl.html	(revision 0)
+++ Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/wsdl.html	(revision 0)
@@ -0,0 +1,40 @@
+<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
+<xsl:output method="html" indent="yes" version="4.0" encoding="us-ascii" media-type="text/html" doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN" /> 
+<xsl:template match="/">
+<Html>
+<Head>
+	<Title></Title>
+    <style type="text/css">
+    	BODY { font-family: Arial; margin-left: 20px; margin-top: 20px; font-size: x-small}
+    	LI { margin-bottom: 15px }
+    </style>
+</Head>
+<Body>
+	<xsl:for-each select="services/service">
+		<b><xsl:value-of select="@name" /></b>
+		<br/>
+		<br/>
+		<xsl:for-each select="comment">
+			<xsl:value-of select="@text" />
+		</xsl:for-each>
+		<ul>
+		<xsl:for-each select="method">
+		<li>
+    		<xsl:value-of select="@return" /> <b><xsl:value-of select="@name" /> </b> 
+			( 
+			<xsl:for-each select="parameter">
+				<xsl:value-of select="@type" /> : <xsl:value-of select="@name" />,
+			</xsl:for-each>
+			)
+			<br/>
+			<xsl:for-each select="comment">
+				<xsl:value-of select="@text" />
+			</xsl:for-each>
+		</li>
+		</xsl:for-each>
+    	</ul>
+   	</xsl:for-each>
+	</Body>
+</Html>
+</xsl:template>
+</xsl:stylesheet>
Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReference.File.Disco.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReference.File.Disco.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReference.Service.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReference.Service.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReferenceItem.png
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: Extras/MonoDevelop.WebReferences/MonoDevelop.WebReferences.Resources/WebReferenceItem.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: Extras/Makefile.am
===================================================================
--- Extras/Makefile.am	(revision 63631)
+++ Extras/Makefile.am	(working copy)
@@ -1,2 +1,2 @@
 
-SUBDIRS = MonoDevelop.SourceEditor MonoDevelop.Autotools CSharpBinding DebuggerAddIn ILAsmBinding MonoQuery JavaBinding BooBinding NemerleBinding NUnit MonoDeveloperExtensions VersionControl prj2make-sharp-lib VBNetBinding WelcomePage ChangeLogAddIn MonoDevelop.GtkCore MonoDevelop.DesignerSupport AspNetAddIn
+SUBDIRS = MonoDevelop.SourceEditor MonoDevelop.Autotools CSharpBinding DebuggerAddIn ILAsmBinding MonoQuery JavaBinding BooBinding NemerleBinding NUnit MonoDeveloperExtensions VersionControl prj2make-sharp-lib VBNetBinding WelcomePage ChangeLogAddIn MonoDevelop.GtkCore MonoDevelop.DesignerSupport AspNetAddIn MonoDevelop.WebReferences
Index: Makefile.am
===================================================================
--- Makefile.am	(revision 63631)
+++ Makefile.am	(working copy)
@@ -49,7 +49,8 @@
 	build/AddIns/WelcomePage/WelcomePage.addin.xml \
 	build/AddIns/MonoDevelop.Autotools/MonoDevelop.Autotools.addin.xml \
 	build/AddIns/MonoDevelop.DesignerSupport/MonoDevelop.DesignerSupport.addin.xml \
-	build/AddIns/AspNetAddIn/AspNetAddIn.addin.xml
+	build/AddIns/AspNetAddIn/AspNetAddIn.addin.xml \
+	build/AddIns/MonoDevelop.WebReferences/MonoDevelop.WebReferences.addin.xml
 
 DOCFILES = \
 	build/bin/MonoDevelop.Core.dll \
