Index: MonoDevelop.WebReferences/WebReferenceItem.cs
===================================================================
--- MonoDevelop.WebReferences/WebReferenceItem.cs	(revisión: 119864)
+++ MonoDevelop.WebReferences/WebReferenceItem.cs	(copia de trabajo)
@@ -44,12 +44,19 @@
 			get { return proxyFile; }
 			set { proxyFile = value; }
 		}
+
+		public string ConfigKey
+		{
+			get { return configKey; }
+			set { configKey = value; }
+		}
 		#endregion
 		
 		#region Member Variables
 		private string name;
 		private ProjectFile proxyFile;
 		private ProjectFile mapFile;
+		private string configKey = String.Empty;
 		#endregion
 		
 		/// <summary>Initializes a new instance of the WebReferenceItem class.</summary>
@@ -63,7 +70,7 @@
 		/// <param name="name">A string containing the name for the web reference.</param>
 		/// <param name="proxyFile">A ProjectFile containing the proxy file.</param>
 		/// <param name="mapFile">A ProjectFile containing the map file.</param>
-		public WebReferenceItem(string name, ProjectFile proxyFile, ProjectFile mapFile)
+		public WebReferenceItem(string name, ProjectFile proxyFile, ProjectFile mapFile, string configKey)
 		{
 			this.name = name;
 			this.proxyFile = proxyFile;
@@ -98,7 +105,7 @@
 			// Re-generate the proxy and map files
 			string basePath = new FileInfo(MapFile.FilePath).Directory.FullName;
 			CodeGenerator codeGen = new CodeGenerator(ProxyFile.Project, (DiscoveryClientProtocol)protocol);
-			codeGen.CreateProxyFile(basePath, MapFile.Project.Name + "." + Name, "Reference");
+			codeGen.CreateProxyFile(basePath, MapFile.Project.Name + "." + Name, "Reference", this.configKey);
 			protocol.WriteAll(basePath, "Reference.map");
 			protocol.Dispose();
 		}
Index: MonoDevelop.WebReferences/CodeGenerator.cs
===================================================================
--- MonoDevelop.WebReferences/CodeGenerator.cs	(revisión: 119864)
+++ MonoDevelop.WebReferences/CodeGenerator.cs	(copia de trabajo)
@@ -2,9 +2,12 @@
 using System.CodeDom;
 using System.CodeDom.Compiler;
 using System.IO;
+using System.Xml;
 using System.Web.Services.Discovery;
 using System.Web.Services.Description;
 using MonoDevelop.Projects;
+using MonoDevelop.Projects.Text;
+using MonoDevelop.Ide.Gui;
 
 namespace MonoDevelop.WebReferences
 {
@@ -103,12 +106,102 @@
 			this.project = project;
 			this.protocol = protocol;
 		}
+
+		public void AddUrlToConfiguration (Project configProject, string configKeyName, string url)
+		{
+			XmlDocument doc = new XmlDocument();
+
+			string file = Path.Combine (configProject.BaseDirectory, "app.config");
+
+			ProjectFile appConfigFile;
+			FileStream configStream;
+
+			// Already exist app.config file
+			if (configProject.IsFileInProject (file)) {
+				TextFile configfile = new TextFile (file);
+				doc.LoadXml (configfile.Text);
+
+				XmlNode configurationNode = null;
+				XmlNode appSettingsNode = null;
+				XmlNode configKeyNode = null;
+				
+				// Search if Configuration Key Exists.
+				configKeyNode = doc.SelectSingleNode (string.Format ("/configuration/appSettings/add[@key='{0}']", configKeyName));
+				if (configKeyNode == null) {
+					appSettingsNode = doc.SelectSingleNode ("/configuration/appSettings");
+					configurationNode = doc.SelectSingleNode ("/configuration");
+				}
+				
+				// If configKeyNode is set, key already exists, then overwrite it with the Url
+				if (configKeyNode != null) {
+					configKeyNode.Attributes ["value"].Value = url;
+				} else {
+					// If configuration key doesn't exists create it
+					if (configurationNode == null) {
+						configurationNode = doc.CreateNode (XmlNodeType.Element, "configuration", string.Empty);
+						doc.AppendChild (configurationNode);
+					}
+					// If appSettings key doesn't exists create it
+					if (appSettingsNode == null) {
+						appSettingsNode = doc.CreateNode (XmlNodeType.Element, "appSettings", string.Empty);
+						configurationNode.AppendChild (appSettingsNode);
+					}
+
+					// Create the config key (add) with 2 attributes: Key, Value
+					configKeyNode = doc.CreateNode (XmlNodeType.Element, "add", string.Empty);
+
+					XmlAttribute keyAttr = doc.CreateAttribute ("key");
+					keyAttr.Value = configKeyName;
+					configKeyNode.Attributes.Append (keyAttr);
+					
+					XmlAttribute valAttr = doc.CreateAttribute ("value");
+					valAttr.Value = url;
+					configKeyNode.Attributes.Append (valAttr);
+					appSettingsNode.AppendChild (configKeyNode);
+				}
+				using (StringWriter writer = new StringWriter ()) {
+					doc.Save (writer);
+					configfile.Text = writer.ToString ();
+				}
+				configfile.Save ();
+			} else {
+				configStream = File.Create (file);
+
+				// Default xml for app.config
+				doc.LoadXml ("<?xml version=\"1.0\" encoding=\"utf-8\" ?><configuration><appSettings></appSettings></configuration>");
+
+				// Node for the service setting
+				XmlNode node = doc.CreateNode (XmlNodeType.Element, "add", String.Empty);
+
+				// key Attribute (name of the services)
+				XmlAttribute keyAttr = doc.CreateAttribute ("key");
+				keyAttr.Value = configKeyName;
+				node.Attributes.Append (keyAttr);
+				
+				// Value Attribute (url)
+				XmlAttribute valAttr = doc.CreateAttribute ("value");
+				valAttr.Value = url;
+				node.Attributes.Append (valAttr);
+				doc.ChildNodes [1].ChildNodes[0].AppendChild (node);
+				doc.Save (configStream);
+				configStream.Close ();
+				configStream.Dispose ();
+
+				appConfigFile = new ProjectFile (file);
+				appConfigFile.CopyToOutputDirectory = FileCopyMode.Always;
+				appConfigFile.BuildAction = BuildAction.None;
+				appConfigFile.Subtype = Subtype.Code;
+				
+				configProject.Files.Add(appConfigFile);
+				IdeApp.ProjectOperations.Save (configProject);
+			}
+		}
 		
 		/// <summary>Generate the proxy file for the web service.</summary>
 		/// <param name="basePath">A string containing the base path for the proxy file.</param>
 		/// <param name="proxyNamespace">A string containing the namespace for the proxy class.</param>
 		/// <param name="referenceName">A string containing the file name for the proxy file.</param>
-		public string CreateProxyFile(string basePath, string proxyNamespace, string referenceName)
+		public string CreateProxyFile(string basePath, string proxyNamespace, string referenceName, string configKey)
 		{
 			// Setup the proxy namespacec and compile unit
 			ICodeGenerator codeGen = Provider.CreateGenerator();
@@ -120,7 +213,7 @@
 			// Setup the importer and import the service description into the code unit
 			ServiceDescriptionImporter importer = Library.ReadServiceDescriptionImporter(protocol);
 			ServiceDescriptionImportWarnings warnings = importer.Import(codeNamespace, codeUnit);
-
+			
 			// Add the new Constructor with Url as a paremeter
 			// Search for the class which inherit SoapHttpClientProtocol (Which is the Service Class)
 			foreach (CodeTypeDeclaration declarationType in codeUnit.Namespaces[0].Types) 
@@ -136,6 +229,31 @@
 						                                                                                             "Url"),
 						                                                        new CodeVariableReferenceExpression ("url")));
 							declarationType.Members.Add (urlConstructor);
+							// Add constructor to use Configuration Key
+							if (configKey.Length > 0) {
+								CodeConstructor urlConfigConstructor = new CodeConstructor ();
+								urlConfigConstructor.Attributes = MemberAttributes.Public;
+								urlConfigConstructor.Parameters.Add (new CodeParameterDeclarationExpression ("System.Boolean", "useConfig"));
+								
+								CodeConditionStatement initCondition = new CodeConditionStatement ();
+								initCondition.Condition = new CodeBinaryOperatorExpression (
+							                                                            new CodeVariableReferenceExpression ("useConfig"),
+							                                                            CodeBinaryOperatorType.IdentityEquality,
+							                                                            new CodePrimitiveExpression (true));
+							                                                            
+								initCondition.TrueStatements.Add (
+							                                  
+							                                  new CodeAssignStatement (
+							                                                        new CodePropertyReferenceExpression (new CodeThisReferenceExpression(), 
+							                                                                                             "Url"),
+							                                                        new CodeIndexerExpression (new CodePropertyReferenceExpression (new CodeVariableReferenceExpression ("System.Configuration.ConfigurationManager"), "AppSettings"), 
+							                                                                                   new CodePrimitiveExpression (configKey))));
+							
+								declarationType.Comments.Add (new CodeCommentStatement (string.Concat("ConfigurationKey=", configKey)));
+								urlConfigConstructor.Statements.Add (initCondition);
+								declarationType.Members.Add (urlConfigConstructor);
+							
+							}
 						}
 			
 			// Generate the code and save the file
Index: MonoDevelop.WebReferences/WebReferenceItemCollection.cs
===================================================================
--- MonoDevelop.WebReferences/WebReferenceItemCollection.cs	(revisión: 119864)
+++ MonoDevelop.WebReferences/WebReferenceItemCollection.cs	(copia de trabajo)
@@ -2,6 +2,7 @@
 using System.Collections.Specialized; 
 using System.IO;
 using MonoDevelop.Projects;
+using System.CodeDom;
 
 namespace MonoDevelop.WebReferences
 {
@@ -49,7 +50,7 @@
 					WebReferenceItem item;
 					FileInfo fileInfo = new FileInfo(file.FilePath); 
 					string refName = fileInfo.Directory.Name;
-					
+					string configKey = "";
 					// Add the item if it does not exist, otherwise get the current item
 					if (Contains(refName))
 						item = this[refName];
@@ -59,11 +60,53 @@
 						this.Add(item);
 					}
 					
+					MonoDevelop.Projects.Text.TextFile configFile = MonoDevelop.Projects.Text.TextFile.ReadFile (file.FilePath);
+					// Check if it have a ConfigurationKey (This text is in a comment, i check it to not parse all the file with the CodeDom
+					if (configFile.Text.IndexOf ("ConfigurationKey=") > -1)
+					{
+						// Provider
+						System.CodeDom.Compiler.CodeDomProvider provider = ((DotNetProject)project).LanguageBinding.GetCodeDomProvider ();
+						
+						// Read it with a TextReader beacause Parse need one.
+						using (TextReader reader = System.IO.File.OpenText (file.FilePath)) {
+							// Parse the file
+							CodeCompileUnit codeUnit = provider.Parse (reader);
+							// Search in all the namespaces/objects
+							foreach (CodeNamespace ns in codeUnit.Namespaces)
+							{
+								foreach(CodeTypeDeclaration td in ns.Types)
+								{
+									// Find a WebService Proxy.
+									if (td.BaseTypes [0].BaseType.IndexOf ("SoapHttpClientProtocol") > -1) {
+										foreach (CodeTypeMember ctm in td.Members)
+											// Search in the Class Contructor if it has a parameter named useConfig
+											if (ctm.Name.IndexOf (".ctor") > -1) {
+												CodeConstructor constructor = (CodeConstructor)ctm;
+												if (constructor.Parameters.Count > 0) {
+													if (constructor.Parameters [0].Name == "useConfig") {
+														CodeStatementCollection st = ((CodeConditionStatement)constructor.Statements [0]).TrueStatements;
+														CodeIndexerExpression cidx = (CodeIndexerExpression)((CodeAssignStatement)st[0]).Right;
+														// Set the configKey var with the actual value.
+														configKey = ((CodePrimitiveExpression)cidx.Indices[0]).Value.ToString ();
+														
+												}
+											}
+										}
+										break;
+									}
+								}
+							}
+							reader.Close();
+						}
+						item.ConfigKey = configKey;
+					}
+					
 					// Add the current project file to the web reference item
 					if (fileInfo.Extension == ".map")
 						item.MapFile = file;
 					else
 						item.ProxyFile = file;
+					
 				}
 			}
 		}
Index: MonoDevelop.WebReferences.Commands/WebReferenceCommandHandler.cs
===================================================================
--- MonoDevelop.WebReferences.Commands/WebReferenceCommandHandler.cs	(revisión: 119864)
+++ MonoDevelop.WebReferences.Commands/WebReferenceCommandHandler.cs	(copia de trabajo)
@@ -37,14 +37,13 @@
 				else
 					return;
 			}
-			
+
 			WebReferenceDialog dialog = new WebReferenceDialog(Library.GetWebReferencePath(project));
 			dialog.NamespacePrefix = project.Name;
-			
-			int response = dialog.Run();
+			int response;
+			response = dialog.Run ();
 			dialog.Destroy();
-			if (response == (int)Gtk.ResponseType.Ok)
-			{
+			if (response == (int)Gtk.ResponseType.Ok) {
 				try
 				{
 					CodeGenerator gen = new CodeGenerator(project, dialog.SelectedService);
@@ -57,24 +56,32 @@
 					// Generate the wsdl, disco and map files
 					string mapSpec = gen.CreateMapFile(basePath, "Reference.map");
 					
-					// Generate the proxy class
-					string proxySpec = gen.CreateProxyFile(basePath, dialog.Namespace + "." + dialog.ReferenceName, "Reference");
-					
 					ProjectFile mapFile = new ProjectFile(mapSpec);
 					mapFile.BuildAction = BuildAction.None;
 					mapFile.Subtype = Subtype.Code;
 					project.Files.Add(mapFile);
-			
+
+					// Generate Configuration File
+					if (dialog.UseConfiguration) {
+						Project configProject = dialog.ConfigurationProject;
+						string configKey = dialog.ConfigurationKey;
+						gen.AddUrlToConfiguration (configProject, configKey, dialog.ServiceUrl);
+					}
+
+					// Generate the proxy class
+					string proxySpec = gen.CreateProxyFile(basePath, dialog.Namespace + "." + dialog.ReferenceName, "Reference", dialog.ConfigurationKey);
+
 					ProjectFile proxyFile = new ProjectFile(proxySpec);
 					proxyFile.BuildAction = BuildAction.Compile;
 					proxyFile.Subtype = Subtype.Code;
 					project.Files.Add(proxyFile);
-					
+				
 					// Add references to the project if they do not exist
 					string[] references = { 
 						"System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
 						"System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-						"System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
+						"System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
+						"System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
 					};
 					ProjectReference gacRef;
 					
@@ -91,6 +98,7 @@
 					MessageService.ShowException (exception);
 				}
 			}
+			
 		}
 		
 		/// <summary>Execute the command for updating a web reference in a project.</summary>
@@ -99,7 +107,7 @@
 		{
 			WebReferenceItem item = (WebReferenceItem) CurrentNode.DataItem;
 			item.Update();
-			IdeApp.Workbench.StatusBar.ShowMessage("Updated Web Reference " + item.Name);
+			IdeApp.Workbench.StatusBar.ShowMessage(GettextCatalog.GetString ("Updated Web Reference ") + item.Name);
 		}
 		
 		/// <summary>Execute the command for updating all web reference in a project.</summary>
@@ -120,26 +128,32 @@
 		[CommandHandler (MonoDevelop.WebReferences.WebReferenceCommands.Delete)]
 		public void Delete()
 		{
-			WebReferenceItem item = (WebReferenceItem) CurrentNode.DataItem;
-			Project project = item.ProxyFile.Project;
-			item.Delete();
-			IdeApp.ProjectOperations.Save(project);
-			IdeApp.Workbench.StatusBar.ShowMessage("Deleted Web Reference " + item.Name);
+			if (MessageService.Confirm(GettextCatalog.GetString ("Are you sure you want to delete Web Reference?"), MonoDevelop.Core.Gui.AlertButton.Ok))
+			{
+				WebReferenceItem item = (WebReferenceItem) CurrentNode.DataItem;
+				Project project = item.ProxyFile.Project;
+				item.Delete();
+				IdeApp.ProjectOperations.Save(project);
+				IdeApp.Workbench.StatusBar.ShowMessage(GettextCatalog.GetString ("Deleted Web Reference") + item.Name);
+			}
 		}
 		
 		/// <summary>Execute the command for removing all web references from a project.</summary>
 		[CommandHandler (MonoDevelop.WebReferences.WebReferenceCommands.DeleteAll)]
 		public void DeleteAll()
 		{
-			Project project = ((WebReferenceFolder) CurrentNode.DataItem).Project;
-			WebReferenceItemCollection items = new WebReferenceItemCollection (project);
-			for (int index = 0; index < items.AllKeys.Length; index ++)
+			if (MessageService.Confirm(GettextCatalog.GetString ("Are you sure you want to delete ALL of the Web References?"), MonoDevelop.Core.Gui.AlertButton.Ok))
 			{
-				items[items.AllKeys[index]].Delete();
-				IdeApp.Workbench.StatusBar.ShowMessage("Deleted Web Reference " + items.AllKeys[index]);
+				Project project = ((WebReferenceFolder) CurrentNode.DataItem).Project;
+				WebReferenceItemCollection items = new WebReferenceItemCollection (project);
+				for (int index = 0; index < items.AllKeys.Length; index ++)
+				{
+					items[items.AllKeys[index]].Delete();
+					IdeApp.Workbench.StatusBar.ShowMessage(GettextCatalog.GetString ("Deleted Web Reference ") + items.AllKeys[index]);
+				}
+				IdeApp.ProjectOperations.Save(project);
+				IdeApp.Workbench.StatusBar.ShowMessage(GettextCatalog.GetString ("Deleted all Web References"));
 			}
-			IdeApp.ProjectOperations.Save(project);
-			IdeApp.Workbench.StatusBar.ShowMessage("Deleted all Web References");
 		}
 	}	
 }
Index: MonoDevelop.WebReferences.Dialogs/WebReferenceDialog.cs
===================================================================
--- MonoDevelop.WebReferences.Dialogs/WebReferenceDialog.cs	(revisión: 119864)
+++ MonoDevelop.WebReferences.Dialogs/WebReferenceDialog.cs	(copia de trabajo)
@@ -15,6 +15,8 @@
 using MonoDevelop.Core.Gui.WebBrowser;
 using MonoDevelop.Ide.Gui;
 using MonoDevelop.WebReferences;
+using MonoDevelop.Projects;
+using MonoDevelop.Projects.Text;
 using Gtk;
 
 namespace MonoDevelop.WebReferences.Dialogs
@@ -28,7 +30,6 @@
 		#endregion
 		
 		Label docLabel;
-		
 		#region Properties
 		/// <summary>Gets or Sets whether the current location of the browser is a valid web service or not.</summary>
 		/// <value>True if the current location of the browser is a Web Service, otherwise false.</value>
@@ -42,6 +43,7 @@
 				{
 					this.tbxReferenceName.Text = "";
 				}
+				
 				btnOK.Sensitive = value;
 				tbxReferenceName.Sensitive = value;
 			}
@@ -119,6 +121,37 @@
 		{
 			get { return System.IO.Path.Combine(BasePath, ReferenceName); }
 		}
+
+		/// <summary>Gets when to save URL in configuration File.</summary>
+		/// <value>A bool value containing when to save in configuration File.</value>
+		public bool UseConfiguration
+		{
+			get { return useConfigCheck.Active; }
+		}
+
+		public Project ConfigurationProject
+		{
+			get {
+				if (useConfig)
+					return selectedProject;
+				else
+					return null;
+			}
+		}
+
+		public string ConfigurationKey
+		{
+			get {
+				if (useConfig) {
+					return configKey;
+				}
+				else {
+					return string.Empty;
+				}
+			}
+		}
+
+		
 		#endregion
 		
 		#region Member Variables
@@ -127,16 +160,34 @@
 		private string namespacePrefix = "";
 		private DiscoveryClientProtocol selectedService;
 		private string basePath = "";
+		bool useConfig = false;
+		string configKey;
+		Project selectedProject;
+		ListStore projectStore = new ListStore (typeof (String), typeof (Project));
+		ListStore keyStore = new ListStore (typeof(string));
 		protected Gtk.Alignment frmBrowserAlign;
+		bool isServiceLoaded = false;
 		#endregion
-		
+
 		/// <summary>Initializes a new instance of the AddWebReferenceDialog widget.</summary>
 		public WebReferenceDialog(string basePath)
 		{
 			Build();
+
+			// Fill the projects Combo
+			System.Collections.ObjectModel.ReadOnlyCollection<Solution> solutions = IdeApp.ProjectOperations.CurrentSelectedSolution.GetAllSolutions ();
+			foreach (Solution s in solutions) {
+				System.Collections.ObjectModel.ReadOnlyCollection<Project> projects = s.GetAllProjects ();;
+				foreach (Project p in projects) {
+					projectStore.AppendValues (p.Name, p);
+				}
+				
+			}
+			appProjectComboBox.Model = projectStore;
+			appKeyComboBoxEntry.Model = keyStore;
 			this.basePath = basePath;
 			this.IsWebService = false;
-			
+
 			// Add the mozilla control to the frame
 			if (WebBrowserService.CanGetWebBrowser) {
 				browser = WebBrowserService.GetWebBrowser ();
@@ -172,7 +223,7 @@
 			frmBrowser.Show();
 			this.ShowAll();
 		}
-		
+
 		/// <summary>Execute the event when any of the buttons on the action panel has been clicked</summary>
 		/// <param name="sender">An object that contains the sender data.</param>
 		/// <param name="e">An EventArgs object that contains the event data.</param>
@@ -285,7 +336,7 @@
 			if (browser != null)
 				this.browser.StopLoad();
 		}
-		
+
 		/// <summary>Execute when the Home button has been clicked</summary>
 		/// <param name="sender">An object that contains the sender data.</param>
 		/// <param name="e">An EventArgs object that contains the event data.</param>
@@ -333,6 +384,7 @@
 				this.selectedService = null;
 			}
 			else {
+				isServiceLoaded = true;
 				// Set the Default Namespace and Reference
 				this.tbxNamespace.Text = this.DefaultNamespace;
 				this.tbxReferenceName.Text = this.DefaultReferenceName;
@@ -360,6 +412,63 @@
 			}
 			return;
 		}
+
+		protected virtual void OnUseConfigCheckClicked (object sender, System.EventArgs e)
+		{
+			if (useConfigCheck.Active) {
+				useConfig = true;
+				if (appKeyComboBoxEntry.Entry.Text.Trim ().Length > 0 && isServiceLoaded)
+					this.btnOK.Sensitive = true;
+				else
+					this.btnOK.Sensitive = false;
+				appKeyComboBoxEntry.Sensitive = true;
+				appProjectComboBox.Sensitive = true;
+			} else {
+				useConfig = false;
+				if (isServiceLoaded)
+					this.btnOK.Sensitive = true;
+				else
+					this.btnOK.Sensitive = false;
+				appKeyComboBoxEntry.Sensitive = false;
+				appProjectComboBox.Sensitive = false;
+			}
+		}
+
+		protected virtual void OnAppProjectComboBoxChanged (object sender, System.EventArgs e)
+		{
+			// Search App Config Values;
+			TreeIter iter;
+			if (appProjectComboBox.GetActiveIter (out iter)) {
+				selectedProject = (Project)projectStore.GetValue (iter, 1);
+				// Navigate through project files
+				foreach (ProjectFile f in selectedProject.Files)
+					if (f.Name.IndexOf (".config") > 0) {
+						TextFile configFile = TextFile.ReadFile (f.FilePath);
+						XmlDocument doc = new XmlDocument ();
+						doc.LoadXml (configFile.Text);
+						
+						XmlNode appSettingsNode = doc.SelectSingleNode ("/configuration/appSettings");
+						foreach (XmlNode nodeInsideAppConfig in appSettingsNode.ChildNodes) {
+							if (nodeInsideAppConfig.Name == "add")
+								keyStore.AppendValues (nodeInsideAppConfig.Attributes ["key"].Value);
+						}
+				}
+			}
+		}
+
+		protected virtual void OnAppKeyComboBoxEntryChanged (object sender, System.EventArgs e)
+		{
+			if (appKeyComboBoxEntry.Entry.Text.Trim ().Length > 0) {
+				configKey = appKeyComboBoxEntry.Entry.Text.Trim ();
+				if(isServiceLoaded)
+					this.btnOK.Sensitive = true;
+				else
+					this.btnOK.Sensitive = false;
+			} else {
+				this.btnOK.Sensitive = false;
+				configKey = "";
+			}
+		}
 	}
 	
 }
Index: gtk-gui/generated.cs
===================================================================
--- gtk-gui/generated.cs	(revisión: 119864)
+++ gtk-gui/generated.cs	(copia de trabajo)
@@ -1,7 +1,7 @@
 // ------------------------------------------------------------------------------
 //  <autogenerated>
 //      This code was generated by a tool.
-//      Mono Runtime Version: 2.0.50727.1433
+//      Mono Runtime Version: 2.0.50727.42
 // 
 //      Changes to this file may cause incorrect behavior and will be lost if 
 //      the code is regenerated.
Index: gtk-gui/MonoDevelop.WebReferences.Dialogs.WebReferenceDialog.cs
===================================================================
--- gtk-gui/MonoDevelop.WebReferences.Dialogs.WebReferenceDialog.cs	(revisión: 119864)
+++ gtk-gui/MonoDevelop.WebReferences.Dialogs.WebReferenceDialog.cs	(copia de trabajo)
@@ -1,7 +1,7 @@
 // ------------------------------------------------------------------------------
 //  <autogenerated>
 //      This code was generated by a tool.
-//      Mono Runtime Version: 2.0.50727.1433
+//      Mono Runtime Version: 2.0.50727.42
 // 
 //      Changes to this file may cause incorrect behavior and will be lost if 
 //      the code is regenerated.
@@ -49,6 +49,22 @@
         
         private Gtk.Entry tbxReferenceName;
         
+        private Gtk.Expander advancedExpander;
+        
+        private Gtk.Table advancedTable;
+        
+        private Gtk.ComboBoxEntry appKeyComboBoxEntry;
+        
+        private Gtk.Label appKeyLabel;
+        
+        private Gtk.ComboBox appProjectComboBox;
+        
+        private Gtk.Label appProjectLabel1;
+        
+        private Gtk.CheckButton useConfigCheck;
+        
+        private Gtk.Label GtkLabel4;
+        
         private Gtk.Button btnCancel;
         
         private Gtk.Button btnOK;
@@ -207,16 +223,90 @@
             w13.Position = 3;
             w13.Expand = false;
             w13.Fill = false;
+            // Container child vbxContainer.Gtk.Box+BoxChild
+            this.advancedExpander = new Gtk.Expander(null);
+            this.advancedExpander.CanFocus = true;
+            this.advancedExpander.Name = "advancedExpander";
+            // Container child advancedExpander.Gtk.Container+ContainerChild
+            this.advancedTable = new Gtk.Table(((uint)(3)), ((uint)(2)), false);
+            this.advancedTable.Name = "advancedTable";
+            this.advancedTable.RowSpacing = ((uint)(6));
+            this.advancedTable.ColumnSpacing = ((uint)(6));
+            // Container child advancedTable.Gtk.Table+TableChild
+            this.appKeyComboBoxEntry = Gtk.ComboBoxEntry.NewText();
+            this.appKeyComboBoxEntry.Sensitive = false;
+            this.appKeyComboBoxEntry.Name = "appKeyComboBoxEntry";
+            this.advancedTable.Add(this.appKeyComboBoxEntry);
+            Gtk.Table.TableChild w14 = ((Gtk.Table.TableChild)(this.advancedTable[this.appKeyComboBoxEntry]));
+            w14.TopAttach = ((uint)(2));
+            w14.BottomAttach = ((uint)(3));
+            w14.LeftAttach = ((uint)(1));
+            w14.RightAttach = ((uint)(2));
+            w14.XOptions = ((Gtk.AttachOptions)(4));
+            w14.YOptions = ((Gtk.AttachOptions)(4));
+            // Container child advancedTable.Gtk.Table+TableChild
+            this.appKeyLabel = new Gtk.Label();
+            this.appKeyLabel.Name = "appKeyLabel";
+            this.appKeyLabel.LabelProp = Mono.Unix.Catalog.GetString("Key");
+            this.advancedTable.Add(this.appKeyLabel);
+            Gtk.Table.TableChild w15 = ((Gtk.Table.TableChild)(this.advancedTable[this.appKeyLabel]));
+            w15.TopAttach = ((uint)(2));
+            w15.BottomAttach = ((uint)(3));
+            w15.XOptions = ((Gtk.AttachOptions)(4));
+            w15.YOptions = ((Gtk.AttachOptions)(4));
+            // Container child advancedTable.Gtk.Table+TableChild
+            this.appProjectComboBox = Gtk.ComboBox.NewText();
+            this.appProjectComboBox.Sensitive = false;
+            this.appProjectComboBox.Name = "appProjectComboBox";
+            this.advancedTable.Add(this.appProjectComboBox);
+            Gtk.Table.TableChild w16 = ((Gtk.Table.TableChild)(this.advancedTable[this.appProjectComboBox]));
+            w16.TopAttach = ((uint)(1));
+            w16.BottomAttach = ((uint)(2));
+            w16.LeftAttach = ((uint)(1));
+            w16.RightAttach = ((uint)(2));
+            w16.YOptions = ((Gtk.AttachOptions)(4));
+            // Container child advancedTable.Gtk.Table+TableChild
+            this.appProjectLabel1 = new Gtk.Label();
+            this.appProjectLabel1.Name = "appProjectLabel1";
+            this.appProjectLabel1.LabelProp = Mono.Unix.Catalog.GetString("Project");
+            this.advancedTable.Add(this.appProjectLabel1);
+            Gtk.Table.TableChild w17 = ((Gtk.Table.TableChild)(this.advancedTable[this.appProjectLabel1]));
+            w17.TopAttach = ((uint)(1));
+            w17.BottomAttach = ((uint)(2));
+            w17.XOptions = ((Gtk.AttachOptions)(4));
+            w17.YOptions = ((Gtk.AttachOptions)(4));
+            // Container child advancedTable.Gtk.Table+TableChild
+            this.useConfigCheck = new Gtk.CheckButton();
+            this.useConfigCheck.CanFocus = true;
+            this.useConfigCheck.Name = "useConfigCheck";
+            this.useConfigCheck.Label = Mono.Unix.Catalog.GetString("Use app.config to store Web Services Url");
+            this.useConfigCheck.DrawIndicator = true;
+            this.useConfigCheck.UseUnderline = true;
+            this.advancedTable.Add(this.useConfigCheck);
+            Gtk.Table.TableChild w18 = ((Gtk.Table.TableChild)(this.advancedTable[this.useConfigCheck]));
+            w18.RightAttach = ((uint)(2));
+            w18.YOptions = ((Gtk.AttachOptions)(4));
+            this.advancedExpander.Add(this.advancedTable);
+            this.GtkLabel4 = new Gtk.Label();
+            this.GtkLabel4.Name = "GtkLabel4";
+            this.GtkLabel4.LabelProp = Mono.Unix.Catalog.GetString("Advanced");
+            this.GtkLabel4.UseUnderline = true;
+            this.advancedExpander.LabelWidget = this.GtkLabel4;
+            this.vbxContainer.Add(this.advancedExpander);
+            Gtk.Box.BoxChild w20 = ((Gtk.Box.BoxChild)(this.vbxContainer[this.advancedExpander]));
+            w20.Position = 4;
+            w20.Expand = false;
+            w20.Fill = false;
             w2.Add(this.vbxContainer);
-            Gtk.Box.BoxChild w14 = ((Gtk.Box.BoxChild)(w2[this.vbxContainer]));
-            w14.Position = 0;
+            Gtk.Box.BoxChild w21 = ((Gtk.Box.BoxChild)(w2[this.vbxContainer]));
+            w21.Position = 0;
             // Internal child MonoDevelop.WebReferences.Dialogs.WebReferenceDialog.ActionArea
-            Gtk.HButtonBox w15 = this.ActionArea;
-            w15.Events = ((Gdk.EventMask)(256));
-            w15.Name = "pnlActionArea";
-            w15.Spacing = 6;
-            w15.BorderWidth = ((uint)(5));
-            w15.LayoutStyle = ((Gtk.ButtonBoxStyle)(4));
+            Gtk.HButtonBox w22 = this.ActionArea;
+            w22.Events = ((Gdk.EventMask)(256));
+            w22.Name = "pnlActionArea";
+            w22.Spacing = 6;
+            w22.BorderWidth = ((uint)(5));
+            w22.LayoutStyle = ((Gtk.ButtonBoxStyle)(4));
             // Container child pnlActionArea.Gtk.ButtonBox+ButtonBoxChild
             this.btnCancel = new Gtk.Button();
             this.btnCancel.CanDefault = true;
@@ -226,9 +316,9 @@
             this.btnCancel.UseUnderline = true;
             this.btnCancel.Label = "gtk-cancel";
             this.AddActionWidget(this.btnCancel, -6);
-            Gtk.ButtonBox.ButtonBoxChild w16 = ((Gtk.ButtonBox.ButtonBoxChild)(w15[this.btnCancel]));
-            w16.Expand = false;
-            w16.Fill = false;
+            Gtk.ButtonBox.ButtonBoxChild w23 = ((Gtk.ButtonBox.ButtonBoxChild)(w22[this.btnCancel]));
+            w23.Expand = false;
+            w23.Fill = false;
             // Container child pnlActionArea.Gtk.ButtonBox+ButtonBoxChild
             this.btnOK = new Gtk.Button();
             this.btnOK.CanDefault = true;
@@ -238,10 +328,10 @@
             this.btnOK.UseUnderline = true;
             this.btnOK.Label = "gtk-ok";
             this.AddActionWidget(this.btnOK, -5);
-            Gtk.ButtonBox.ButtonBoxChild w17 = ((Gtk.ButtonBox.ButtonBoxChild)(w15[this.btnOK]));
-            w17.Position = 1;
-            w17.Expand = false;
-            w17.Fill = false;
+            Gtk.ButtonBox.ButtonBoxChild w24 = ((Gtk.ButtonBox.ButtonBoxChild)(w22[this.btnOK]));
+            w24.Position = 1;
+            w24.Expand = false;
+            w24.Fill = false;
             if ((this.Child != null)) {
                 this.Child.ShowAll();
             }
@@ -255,6 +345,9 @@
             this.btnHome.Activated += new System.EventHandler(this.Browser_HomeButtonClicked);
             this.tbxReferenceURL.KeyReleaseEvent += new Gtk.KeyReleaseEventHandler(this.Browser_URLKeyReleased);
             this.btnGO.Clicked += new System.EventHandler(this.Browser_GoButtonClicked);
+            this.useConfigCheck.Clicked += new System.EventHandler(this.OnUseConfigCheckClicked);
+            this.appProjectComboBox.Changed += new System.EventHandler(this.OnAppProjectComboBoxChanged);
+            this.appKeyComboBoxEntry.Changed += new System.EventHandler(this.OnAppKeyComboBoxEntryChanged);
         }
     }
 }
Index: gtk-gui/gui.stetic
===================================================================
--- gtk-gui/gui.stetic	(revisión: 119864)
+++ gtk-gui/gui.stetic	(copia de trabajo)
@@ -72,7 +72,7 @@
                 <property name="ShowArrow">False</property>
                 <property name="ButtonStyle">Icons</property>
                 <property name="IconSize">SmallToolbar</property>
-                <node name="tlbNavigate" type="Menubar">
+                <node name="tlbNavigate" type="Toolbar">
                   <node type="Toolitem" action="btnBack" />
                   <node type="Toolitem" action="btnNext" />
                   <node type="Toolitem" action="btnRefresh" />
@@ -280,6 +280,144 @@
                 <property name="Fill">False</property>
               </packing>
             </child>
+            <child>
+              <widget class="Gtk.Expander" id="advancedExpander">
+                <property name="MemberName" />
+                <property name="CanFocus">True</property>
+                <child>
+                  <widget class="Gtk.Table" id="advancedTable">
+                    <property name="MemberName" />
+                    <property name="NRows">3</property>
+                    <property name="NColumns">2</property>
+                    <property name="RowSpacing">6</property>
+                    <property name="ColumnSpacing">6</property>
+                    <child>
+                      <widget class="Gtk.ComboBoxEntry" id="appKeyComboBoxEntry">
+                        <property name="MemberName" />
+                        <property name="Sensitive">False</property>
+                        <property name="IsTextCombo">True</property>
+                        <property name="Items" translatable="yes" />
+                        <signal name="Changed" handler="OnAppKeyComboBoxEntryChanged" />
+                      </widget>
+                      <packing>
+                        <property name="TopAttach">2</property>
+                        <property name="BottomAttach">3</property>
+                        <property name="LeftAttach">1</property>
+                        <property name="RightAttach">2</property>
+                        <property name="AutoSize">True</property>
+                        <property name="XOptions">Fill</property>
+                        <property name="YOptions">Fill</property>
+                        <property name="XExpand">False</property>
+                        <property name="XFill">True</property>
+                        <property name="XShrink">False</property>
+                        <property name="YExpand">False</property>
+                        <property name="YFill">True</property>
+                        <property name="YShrink">False</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <widget class="Gtk.Label" id="appKeyLabel">
+                        <property name="MemberName" />
+                        <property name="LabelProp" translatable="yes">Key</property>
+                      </widget>
+                      <packing>
+                        <property name="TopAttach">2</property>
+                        <property name="BottomAttach">3</property>
+                        <property name="AutoSize">True</property>
+                        <property name="XOptions">Fill</property>
+                        <property name="YOptions">Fill</property>
+                        <property name="XExpand">False</property>
+                        <property name="XFill">True</property>
+                        <property name="XShrink">False</property>
+                        <property name="YExpand">False</property>
+                        <property name="YFill">True</property>
+                        <property name="YShrink">False</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <widget class="Gtk.ComboBox" id="appProjectComboBox">
+                        <property name="MemberName" />
+                        <property name="Sensitive">False</property>
+                        <property name="IsTextCombo">True</property>
+                        <property name="Items" translatable="yes" />
+                        <signal name="Changed" handler="OnAppProjectComboBoxChanged" />
+                      </widget>
+                      <packing>
+                        <property name="TopAttach">1</property>
+                        <property name="BottomAttach">2</property>
+                        <property name="LeftAttach">1</property>
+                        <property name="RightAttach">2</property>
+                        <property name="AutoSize">False</property>
+                        <property name="YOptions">Fill</property>
+                        <property name="XExpand">True</property>
+                        <property name="XFill">True</property>
+                        <property name="XShrink">False</property>
+                        <property name="YExpand">False</property>
+                        <property name="YFill">True</property>
+                        <property name="YShrink">False</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <widget class="Gtk.Label" id="appProjectLabel1">
+                        <property name="MemberName" />
+                        <property name="LabelProp" translatable="yes">Project</property>
+                      </widget>
+                      <packing>
+                        <property name="TopAttach">1</property>
+                        <property name="BottomAttach">2</property>
+                        <property name="AutoSize">False</property>
+                        <property name="XOptions">Fill</property>
+                        <property name="YOptions">Fill</property>
+                        <property name="XExpand">False</property>
+                        <property name="XFill">True</property>
+                        <property name="XShrink">False</property>
+                        <property name="YExpand">False</property>
+                        <property name="YFill">True</property>
+                        <property name="YShrink">False</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <widget class="Gtk.CheckButton" id="useConfigCheck">
+                        <property name="MemberName" />
+                        <property name="CanFocus">True</property>
+                        <property name="Label" translatable="yes">Use app.config to store Web Services Url</property>
+                        <property name="DrawIndicator">True</property>
+                        <property name="HasLabel">True</property>
+                        <property name="UseUnderline">True</property>
+                        <signal name="Clicked" handler="OnUseConfigCheckClicked" />
+                      </widget>
+                      <packing>
+                        <property name="RightAttach">2</property>
+                        <property name="AutoSize">False</property>
+                        <property name="YOptions">Fill</property>
+                        <property name="XExpand">True</property>
+                        <property name="XFill">True</property>
+                        <property name="XShrink">False</property>
+                        <property name="YExpand">False</property>
+                        <property name="YFill">True</property>
+                        <property name="YShrink">False</property>
+                      </packing>
+                    </child>
+                  </widget>
+                </child>
+                <child>
+                  <widget class="Gtk.Label" id="GtkLabel4">
+                    <property name="MemberName" />
+                    <property name="LabelProp" translatable="yes">Advanced</property>
+                    <property name="UseUnderline">True</property>
+                  </widget>
+                  <packing>
+                    <property name="type">label_item</property>
+                  </packing>
+                </child>
+              </widget>
+              <packing>
+                <property name="Position">4</property>
+                <property name="AutoSize">True</property>
+                <property name="Expand">False</property>
+                <property name="Fill">False</property>
+              </packing>
+            </child>
           </widget>
           <packing>
             <property name="Position">0</property>
Index: ChangeLog
===================================================================
--- ChangeLog	(revisión: 119864)
+++ ChangeLog	(copia de trabajo)
@@ -1,3 +1,7 @@
+2008-11-25 Luciano N. Callero <lnc19@hotmail.com>
+	* Add the possibility to set a app.config key to store the Url and a new constructor to use this config key.
+	* Use Gettextcatalog for confirmation dialogs.
+
 2008-11-19  Lluis Sanchez Gual  <lluis@novell.com>
 
 	* MonoDevelop.WebReferences.NodeBuilders/WebReferenceNodeBuilder.cs:
