Index: Core/src/MonoDevelop.Ide/ChangeLog
===================================================================
--- Core/src/MonoDevelop.Ide/ChangeLog	(revision 53881)
+++ Core/src/MonoDevelop.Ide/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2005-12-03  Jacob Ilsoe Christensen  <jacobilsoe@gmail.com>
+
+	* MonoDevelop.Ide.Gui.Dialogs/ReplaceInFilesDialog.cs:
+	Handle empty directories and search patterns appropriately.
+	Removed redundant fileMask check.
+
 2005-12-02  Jacob Ilsoe Christensen  <jacobilsoe@gmail.com>
 
 	* MonoDevelop.Ide.Gui.Search/SearchReplaceManager.cs:
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/ReplaceInFilesDialog.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/ReplaceInFilesDialog.cs	(revision 53881)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/ReplaceInFilesDialog.cs	(working copy)
@@ -241,8 +241,7 @@
 
 		void StopEvent (object sender, EventArgs e)
 		{
-			if (SetupSearchReplaceInFilesManager ())
-				SearchReplaceInFilesManager.CancelSearch();
+			SearchReplaceInFilesManager.CancelSearch();
 		}
 
 		void OnSpecialSearchStrategyChanged (object o, EventArgs e)
@@ -316,12 +315,24 @@
 			
 			string directoryName = directoryTextBox.Text;
 			string fileMask      = fileMaskTextBox.Text;
+			string searchPattern = searchPatternEntry.Text;
+
 			if (fileMask == null || fileMask.Length == 0) {
 				fileMask = "*";
 			}
+
+			if (searchPattern == string.Empty) {
+				messageService.ShowError(GettextCatalog.GetString ("Empty search pattern"));
+				return false;
+			}
 			
 			if (SearchReplaceInFilesManager.SearchOptions.DocumentIteratorType == DocumentIteratorType.Directory) {
 				
+				if (directoryName == string.Empty) {
+					messageService.ShowError(GettextCatalog.GetString ("Empty directory name"));
+					return false;
+				}
+
 				if (!fileUtilityService.IsValidFileName(directoryName)) {
 					messageService.ShowErrorFormatted(GettextCatalog.GetString ("Invalid directory name: {0}"), directoryName);
 					return false;
@@ -337,15 +348,12 @@
 					return false;
 				}
 			}
-			if (fileMask == null || fileMask.Length == 0) {
-				SearchReplaceInFilesManager.SearchOptions.FileMask = "*";
-			} else {
-				SearchReplaceInFilesManager.SearchOptions.FileMask        = fileMask;
-			}
+
+			SearchReplaceInFilesManager.SearchOptions.FileMask        = fileMask;
 			SearchReplaceInFilesManager.SearchOptions.SearchDirectory = directoryName;
 			SearchReplaceInFilesManager.SearchOptions.SearchSubdirectories = includeSubdirectoriesCheckBox.Active;
 			
-			SearchReplaceInFilesManager.SearchOptions.SearchPattern  = searchPatternEntry.Text;
+			SearchReplaceInFilesManager.SearchOptions.SearchPattern  = searchPattern;
 			if (replaceMode)
 				SearchReplaceInFilesManager.SearchOptions.ReplacePattern = replacePatternEntry.Text;
 			
