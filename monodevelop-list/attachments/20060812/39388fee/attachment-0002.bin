Index: AUTHORS
===================================================================
--- AUTHORS	(revision 63568)
+++ AUTHORS	(working copy)
@@ -27,6 +27,7 @@
 Jacob Ilsø Christensen
 Scott Ellington
 Michael Hutchinson
+James Fitzsimons
 
 and Mike Krueger and the SharpDevelop team
 
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 63568)
+++ ChangeLog	(working copy)
@@ -1,7 +1,7 @@
-2006-08-08  Jacob Ilsø Christensen  <jacobilsoe@gmail.com>
+2006-08-07 James Fitzsimons <james.fitzsimons@gmail.com>
+	
+	* AUTHORS: Added my name.
 
-	* configure.in: Added support for enabling/disabling MonoQuery.
-
 2006-08-04 Lluis Sanchez Gual  <lluis@novell.com> 
 
 	* configure.in: Added MonoDevelop.Projects.dll.config to the
Index: Extras/MonoDevelop.SourceEditor/EditorBindings.glade
===================================================================
--- Extras/MonoDevelop.SourceEditor/EditorBindings.glade	(revision 63568)
+++ Extras/MonoDevelop.SourceEditor/EditorBindings.glade	(working copy)
@@ -18,6 +18,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
 
   <child>
     <widget class="GtkVBox" id="vbox13">
@@ -308,6 +309,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
 
   <child>
     <widget class="GtkVBox" id="vbox37">
@@ -803,6 +805,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
 
   <child>
     <widget class="GtkVBox" id="vbox45">
@@ -1142,6 +1145,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
 
   <child>
     <widget class="GtkVBox" id="vbox54">
@@ -1622,6 +1626,101 @@
 	      <property name="fill">True</property>
 	    </packing>
 	  </child>
+
+	  <child>
+	    <widget class="GtkLabel" id="label61">
+	      <property name="visible">True</property>
+	      <property name="label" translatable="yes">&lt;b&gt;Class Bar&lt;/b&gt;</property>
+	      <property name="use_underline">False</property>
+	      <property name="use_markup">True</property>
+	      <property name="justify">GTK_JUSTIFY_LEFT</property>
+	      <property name="wrap">False</property>
+	      <property name="selectable">False</property>
+	      <property name="xalign">0</property>
+	      <property name="yalign">0.5</property>
+	      <property name="xpad">0</property>
+	      <property name="ypad">0</property>
+	      <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+	      <property name="width_chars">-1</property>
+	      <property name="single_line_mode">False</property>
+	      <property name="angle">0</property>
+	    </widget>
+	    <packing>
+	      <property name="padding">0</property>
+	      <property name="expand">False</property>
+	      <property name="fill">False</property>
+	    </packing>
+	  </child>
+
+	  <child>
+	    <widget class="GtkHBox" id="hbox33">
+	      <property name="visible">True</property>
+	      <property name="homogeneous">False</property>
+	      <property name="spacing">0</property>
+
+	      <child>
+		<widget class="GtkLabel" id="label62">
+		  <property name="visible">True</property>
+		  <property name="label" translatable="yes">    </property>
+		  <property name="use_underline">False</property>
+		  <property name="use_markup">False</property>
+		  <property name="justify">GTK_JUSTIFY_LEFT</property>
+		  <property name="wrap">False</property>
+		  <property name="selectable">False</property>
+		  <property name="xalign">0.5</property>
+		  <property name="yalign">0.5</property>
+		  <property name="xpad">0</property>
+		  <property name="ypad">0</property>
+		  <property name="ellipsize">PANGO_ELLIPSIZE_NONE</property>
+		  <property name="width_chars">-1</property>
+		  <property name="single_line_mode">False</property>
+		  <property name="angle">0</property>
+		</widget>
+		<packing>
+		  <property name="padding">0</property>
+		  <property name="expand">False</property>
+		  <property name="fill">False</property>
+		</packing>
+	      </child>
+
+	      <child>
+		<widget class="GtkVBox" id="vbox65">
+		  <property name="visible">True</property>
+		  <property name="homogeneous">False</property>
+		  <property name="spacing">0</property>
+
+		  <child>
+		    <widget class="GtkCheckButton" id="showClassMethodCheckBox">
+		      <property name="visible">True</property>
+		      <property name="can_focus">True</property>
+		      <property name="label" translatable="yes">_Show Class &amp; Method combos</property>
+		      <property name="use_underline">True</property>
+		      <property name="relief">GTK_RELIEF_NORMAL</property>
+		      <property name="focus_on_click">True</property>
+		      <property name="active">True</property>
+		      <property name="inconsistent">False</property>
+		      <property name="draw_indicator">True</property>
+		    </widget>
+		    <packing>
+		      <property name="padding">0</property>
+		      <property name="expand">False</property>
+		      <property name="fill">False</property>
+		    </packing>
+		  </child>
+		</widget>
+		<packing>
+		  <property name="padding">0</property>
+		  <property name="expand">True</property>
+		  <property name="fill">True</property>
+		</packing>
+	      </child>
+	    </widget>
+	    <packing>
+	      <property name="padding">0</property>
+	      <property name="expand">True</property>
+	      <property name="fill">True</property>
+	    </packing>
+	  </child>
 	</widget>
 	<packing>
 	  <property name="padding">0</property>
@@ -1647,6 +1746,7 @@
   <property name="type_hint">GDK_WINDOW_TYPE_HINT_NORMAL</property>
   <property name="gravity">GDK_GRAVITY_NORTH_WEST</property>
   <property name="focus_on_map">True</property>
+  <property name="urgency_hint">False</property>
 
   <child>
     <widget class="GtkVBox" id="vbox61">
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs	(revision 63568)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs	(working copy)
@@ -1,6 +1,9 @@
 using System;
+using System.Collections;
+using System.Collections.Specialized;
 using System.IO;
 using System.Runtime.InteropServices;
+using System.Text;
 
 using MonoDevelop.Core.Execution;
 using MonoDevelop.Core.Gui;
@@ -17,6 +20,7 @@
 using MonoDevelop.Ide.Codons;
 using MonoDevelop.SourceEditor.Document;
 using MonoDevelop.Projects.Text;
+using MonoDevelop.Projects.Parser;
 
 using Gtk;
 using GtkSourceView;
@@ -53,6 +57,8 @@
 				return true;
 			if (mimetype == "application/x-aspx")
 				return true;
+			if (mimetype == "application/x-ascx")
+				return true;
 
 			// If gedit can open the file, this editor also can do it
 			foreach (DesktopApplication app in DesktopApplication.GetApplications (mimetype))
@@ -85,10 +91,18 @@
 		IDocumentInformation, IEncodedTextContent
 	{
 		VBox mainBox;
-		HBox editorBar;
+		VBox editorBar;
 		HBox reloadBar;
+		HBox classBrowser;
+		Gtk.ComboBox classCombo;
+		Gtk.ComboBox membersCombo;
+		ListStore classStore;
+		ListStore memberStore;
+		bool classBrowserVisible = true;
 		internal FileSystemWatcher fsw;
 		IProperties properties;
+		IParseInformation memberParseInfo;
+		bool handlingParseEvent = false;
 		
 		BreakpointEventHandler breakpointAddedHandler;
 		BreakpointEventHandler breakpointRemovedHandler;
@@ -155,11 +169,57 @@
 			}
 		}
 		
+		public bool ClassBrowserVisible {
+			get {
+				return classBrowserVisible;
+			}
+			set {
+				if (value && !classBrowserVisible)
+					editorBar.PackStart(classBrowser, true, true, 3);
+				if (!value && classBrowserVisible)
+					editorBar.Remove(classBrowser);
+				classBrowserVisible = value;
+			}
+		}
+		
 		public SourceEditorDisplayBindingWrapper ()
-		{
+		{			
 			mainBox = new VBox ();
-			editorBar = new HBox ();
-			mainBox.PackStart (editorBar, false, false, 0);
+			editorBar = new VBox ();
+			mainBox.PackStart (editorBar, false, true, 0);
+			
+			classBrowser = new HBox(true, 2);
+			classCombo = new Gtk.ComboBox(); 
+			membersCombo = new Gtk.ComboBox();	
+			
+			// Setup the columns and column renders for the comboboxes
+			CellRendererPixbuf pixr = new CellRendererPixbuf();
+			classCombo.PackStart(pixr, false);
+			classCombo.AddAttribute(pixr, "pixbuf", 0);
+			CellRenderer colr = new CellRendererText();
+			classCombo.PackStart(colr, true);
+			classCombo.AddAttribute(colr, "text", 1);
+			
+			pixr = new CellRendererPixbuf();
+			membersCombo.PackStart(pixr, false);
+			membersCombo.AddAttribute(pixr, "pixbuf", 0);
+			colr = new CellRendererText();
+			membersCombo.PackStart(colr, true);
+			membersCombo.AddAttribute(colr, "text", 1);
+			
+			// Pack the controls into the editorbar just below the file name tabs.
+			classBrowser.PackStart(classCombo, true, true, 0);
+			classBrowser.PackStart(membersCombo, true, true, 0);
+			editorBar.PackStart(classBrowser, false, true, 1);
+			
+			// Set up the data stores for the comboboxes
+			classStore = new ListStore(typeof(Gdk.Pixbuf), typeof(string), typeof(IClass));
+			classCombo.Model = classStore;	
+			memberStore = new ListStore(typeof(Gdk.Pixbuf), typeof(string), typeof(IMember));
+			membersCombo.Model = memberStore;
+ 
+			IdeApp.ProjectOperations.ParserDatabase.ParseInformationChanged += new ParseInformationEventHandler(UpdateClassBrowser);
+			
 			se = new SourceEditor (this);
 			se.Buffer.ModifiedChanged += new EventHandler (OnModifiedChanged);
 			se.Buffer.MarkSet += new MarkSetHandler (OnMarkSet);
@@ -234,6 +294,7 @@
 			se.Buffer.Changed -= new EventHandler (OnChanged);
 			se.View.ToggleOverwrite -= new EventHandler (CaretModeChanged);
 			ContentNameChanged -= new EventHandler (UpdateFSW);
+			IdeApp.ProjectOperations.ParserDatabase.ParseInformationChanged -= new ParseInformationEventHandler(UpdateClassBrowser);
 			se.Dispose ();
 			fsw.Dispose ();
 			se = null;
@@ -313,8 +374,167 @@
 					
 				UpdateExecutionLocation ();
 			}
+			
+			IFileParserContext context = IdeApp.ProjectOperations.ParserDatabase.GetFileParserContext(fileName);
+			memberParseInfo = context.ParseFile(fileName);
+			BindClassCombo();
 		}
 		
+		private void UpdateClassBrowser(object sender, ParseInformationEventArgs args)
+		{
+			// This event handler can get called when files other than the current content are updated. eg.
+			// when loading a new document. If we didn't do this check the member combo for this tab would have
+			// methods for a different class in it!
+			if (ContentName == args.FileName && !handlingParseEvent) {
+				handlingParseEvent = true;
+				memberParseInfo = args.ParseInformation;
+				GLib.Timeout.Add (1000, new GLib.TimeoutHandler (BindClassCombo));
+			}
+		}
+		
+		private bool BindClassCombo()
+		{	
+			classCombo.Changed -= new EventHandler (ClassChanged);
+			// Clear down all our local stores.
+			classStore.Clear();				
+			
+			// check the IParseInformation member variable to see if we could get ParseInformation for the 
+			// current docuement. If not we can't display class and member info so hide the browser bar.
+			if (memberParseInfo == null) {
+				ClassBrowserVisible = false;
+				return false;
+			}
+			
+			if (!ClassBrowserVisible)
+				ClassBrowserVisible = true;
+				
+			ClassCollection cls = ((ICompilationUnit)memberParseInfo.BestCompilationUnit).Classes;
+			foreach (IClass c in cls) {
+				// Get the appropriate icon from the Icon service for the current IClass.
+				Gdk.Pixbuf pix = IdeApp.Services.Resources.GetIcon (IdeApp.Services.Icons.GetIcon (c));
+				classStore.AppendValues (pix, c.Name, c);
+			}
+			classCombo.Active = 0;
+			classCombo.Changed += new EventHandler (ClassChanged);
+			
+			if (cls.Count > 0)
+				BindMemberCombo(cls [0]);
+			
+			handlingParseEvent = false;
+
+			// return false to stop the GLib.Timeout
+			return false;
+		}
+		
+		
+		private void BindMemberCombo(IClass c)
+		{
+			membersCombo.Changed -= new EventHandler (MemberChanged);
+			// Clear down all our local stores.
+			memberStore.Clear();
+				
+			HybridDictionary methodMap = new HybridDictionary();
+			
+			Gdk.Pixbuf pix;
+			// Add items to the member drop down 
+			MethodCollection sortedMethods = c.Methods;
+			ArrayList.Adapter (sortedMethods).Sort (new CaseInsensitiveComparer ());
+			
+			foreach (IMethod method in sortedMethods) {
+				pix = IdeApp.Services.Resources.GetIcon(IdeApp.Services.Icons.GetIcon(method)); 
+				// For methods we append their parameter types too. This is a nice feature,
+				// and it is also necessay to avoid problems with overloaded methods having
+				// the same name
+				StringBuilder methodName = new StringBuilder();
+				methodName.Append(method.Name + "(");
+				for (int i = 0; i < method.Parameters.Count; i++) {
+					methodName.Append(method.Parameters [i].ReturnType.Name);
+					if (i < method.Parameters.Count - 1) methodName.Append (", ");
+				}
+				methodName.Append(")"); 
+				
+				memberStore.AppendValues(pix, methodName.ToString (), method);
+			}
+			foreach (IProperty property in c.Properties) {
+				pix = IdeApp.Services.Resources.GetIcon (IdeApp.Services.Icons.GetIcon (property));
+				if (methodMap [property.Name] != null) {
+					// The unlikely case that two properties have the same name has occured.
+					// We use the fully qualified name for each subsequent property to avoid
+					// problems.
+					memberStore.AppendValues (pix, property.FullyQualifiedName, property);
+				}
+				else {
+					memberStore.AppendValues (pix, property.Name, property);
+				}
+			}
+			foreach(IField member in c.Fields) {
+				pix = IdeApp.Services.Resources.GetIcon (IdeApp.Services.Icons.GetIcon (member));
+				memberStore.AppendValues (pix, member.Name, member);			
+			}
+			// don't need method map anymore
+			methodMap.Clear ();
+			
+			// set active the method the cursor is in
+			int position = 0;
+			Gtk.TreeIter iter;
+		    if (memberStore.GetIterFirst (out iter)) {
+		    	do {
+		    		IMember member = (IMember) memberStore.GetValue (iter, 2);
+		    		if (member.Region.BeginLine > this.CursorPosition && this.CursorPosition  > member.Region.EndLine) { 
+						membersCombo.Active = position;
+						break;
+					}
+					++position;
+		    	} while (memberStore.IterNext (ref iter));
+			}	
+			membersCombo.Changed += new EventHandler (MemberChanged);
+		}
+		
+		
+		private void MemberChanged(object sender, EventArgs e)
+		{
+			Gtk.TreeIter iter;
+		    if (membersCombo.GetActiveIter (out iter)) {	    
+		    	// Find the IMember object in our list store by name from the member combo
+		    	IMember member = (IMember) memberStore.GetValue (iter, 2);
+				int line = member.Region.BeginLine;
+				
+				// Get a handle to the current document
+				if (IdeApp.Workbench.ActiveDocument == null) {
+					return;
+				}
+			
+				// If we can we navigate to the line location of the IMember.
+				IViewContent content = (IViewContent) IdeApp.Workbench.ActiveDocument.Content;
+				if (content is IPositionable) {
+					((IPositionable)content).JumpTo (Math.Max (1, line), 1);
+				}
+		    }
+		}
+
+		
+		private void ClassChanged(object sender, EventArgs e)
+		{
+			Gtk.TreeIter iter;
+			if (classCombo.GetActiveIter(out iter)) 	{
+				IClass selectedClass = (IClass)classStore.GetValue(iter, 2);
+				int line = selectedClass.Region.BeginLine;
+				
+				// Get a handle to the current document
+				if (IdeApp.Workbench.ActiveDocument == null) {
+					return;
+				}
+				
+				// If we can we navigate to the line location of the IMember.
+				IViewContent content = (IViewContent)IdeApp.Workbench.ActiveDocument.Content;
+				if (content is IPositionable) {
+					((IPositionable)content).JumpTo (Math.Max (1, line), 1);
+				}
+				
+				BindMemberCombo(selectedClass);
+			}
+		}
+		
 		void OnBreakpointAdded (object sender, BreakpointEventArgs args)
 		{
 			if (args.Breakpoint.FileName == ContentName)
@@ -373,7 +593,7 @@
 				reloadBar.ShowAll ();
 			}
 			warnOverwrite = true;
-			editorBar.PackStart (reloadBar);
+			editorBar.PackStart (reloadBar, false, true, 1);
 			reloadBar.ShowAll ();
 			WorkbenchWindow.ShowNotification = true;
 		}
@@ -733,6 +953,7 @@
 			se.View.AutoInsertTemplates = TextEditorProperties.AutoInsertTemplates;
 			se.Buffer.UnderlineErrors = TextEditorProperties.UnderlineErrors;
 			se.Buffer.Highlight = TextEditorProperties.SyntaxHighlight;
+			se.DisplayBinding.ClassBrowserVisible = TextEditorProperties.ShowClassBrowser;
 
 			if (TextEditorProperties.VerticalRulerRow > -1)
 				se.View.Margin = (uint) TextEditorProperties.VerticalRulerRow;
@@ -793,6 +1014,9 @@
 				case "EnableFolding":
 					// TODO
 					break;
+				case "ShowClassBrowser":
+					se.DisplayBinding.ClassBrowserVisible = TextEditorProperties.ShowClassBrowser;
+					break;
 				default:
 					Console.WriteLine ("unhandled property change: {0}", e.Key);
 					break;
Index: Extras/MonoDevelop.SourceEditor/ChangeLog
===================================================================
--- Extras/MonoDevelop.SourceEditor/ChangeLog	(revision 63568)
+++ Extras/MonoDevelop.SourceEditor/ChangeLog	(working copy)
@@ -1,10 +1,11 @@
-2006-08-07 Philip Turnbull <philip.turnbull@gmail.com>
-	
-	* MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs:
-	* MonoDevelop.SourceEditor.InsightWindow/MethodInsightDataProvider.cs:
-	* MonoDevelop.SourceEditor.InsightWindow/IndexerInsightDataProvider.cs:
-	Track API changes in Ambience.
+2006-08-07 James Fitzsimons <james.fitzsimons@gmail.com>
 
+	* MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs: Added class and method browser combos. 		   Added ascx to list in CanCreateContentForMimeType().
+	* EditorBindings.glade: Added checkbox for Class & Method combos to BehaviourTextEditorPanel.
+	* MonoDevelop.SourceEditor.Gui.OptionPanels/BehaviourTextEditorPanel.cs: Added support for turning on and 
+	  off the class and method browser combos in the editor.
+	* MonoDevelop.SourceEditor.Properties/TextEditorProperties.cs: Added ShowClassBrowser property.
+
 2006-08-07 Lluis Sanchez Gual  <lluis@novell.com> 
 
 	* MonoDevelop.SourceEditor.Gui/SourceEditorView.cs: Ensure that the
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Properties/TextEditorProperties.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Properties/TextEditorProperties.cs	(revision 63568)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Properties/TextEditorProperties.cs	(working copy)
@@ -319,5 +319,14 @@
 				properties.SetProperty ("DefaultFont", value.ToString ());
 			}
 		}
+		
+		public static bool ShowClassBrowser {
+			get {
+				return properties.GetProperty("ShowClassBrowser", true);
+			}
+			set {
+				properties.SetProperty("ShowClassBrowser", value);
+			}
+		}
 	}
 }
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui.OptionPanels/BehaviorTextEditorPanel.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui.OptionPanels/BehaviorTextEditorPanel.cs	(revision 63568)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui.OptionPanels/BehaviorTextEditorPanel.cs	(working copy)
@@ -50,6 +50,7 @@
 			[Glade.Widget] RadioButton automaticIndentStyle;
 			[Glade.Widget] RadioButton smartIndentStyle;
 			[Glade.Widget] SpinButton indentAndTabSizeSpinButton;
+			[Glade.Widget] CheckButton showClassMethodCheckBox;
 			
 			public BehaviorTextEditorPanelWidget (IProperties CustomizationObject) :  
 				base ("EditorBindings.glade", "BehaviorTextEditorPanel")
@@ -64,6 +65,8 @@
 					"AutoInsertTemplates", true);
 				convertTabsToSpacesCheckBox.Active  = ((IProperties)CustomizationObject).GetProperty(
 					"TabsToSpaces", false);
+				showClassMethodCheckBox.Active = ((IProperties)CustomizationObject).GetProperty(
+					"ShowClassBrowser", false);
 
 				//FIXME: Only one of these should be selected to hold the value
 				indentAndTabSizeSpinButton.Value = ((IProperties)CustomizationObject).GetProperty(
@@ -86,6 +89,8 @@
 					"AutoInsertCurlyBracket", autoinsertCurlyBraceCheckBox.Active);
 				((IProperties)CustomizationObject).SetProperty(
 					"AutoInsertTemplates",    autoInsertTemplatesCheckBox.Active);
+				((IProperties)CustomizationObject).SetProperty(
+					"ShowClassBrowser",    showClassMethodCheckBox.Active);
 
 				if (noneIndentStyle.Active)
 					((IProperties)CustomizationObject).SetProperty("IndentStyle", IndentStyle.None);
