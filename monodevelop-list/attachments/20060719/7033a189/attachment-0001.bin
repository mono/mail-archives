Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/GenericParameter.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/GenericParameter.cs	(revision 62746)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/GenericParameter.cs	(working copy)
@@ -11,6 +11,7 @@
 using System;
 using System.Collections.Generic;
 using MonoDevelop.Projects.Parser;
+using Mono.Cecil;
 
 namespace MonoDevelop.Projects.Parser
 {
@@ -31,14 +32,15 @@
 	{
 		string                    name;
 		ReturnTypeList            baseTypes;
-		SpecialConstraintType     specialConstraints;
+		GenericParamAttributes    specialConstraints;
+		//SpecialConstraintType     specialConstraints;
 		
 		public GenericParameter() {
 		}
 		
 		public GenericParameter(string name
 		                      , ReturnTypeList baseTypes
-		                      , SpecialConstraintType specialConstraints) {
+		                      , GenericParamAttributes specialConstraints) {
 			this.name               = name;
 			this.baseTypes          = baseTypes;
 			this.specialConstraints = specialConstraints;
@@ -78,13 +80,13 @@
 		/// </summary>
 		public bool HasNewConstraint {
 			get {
-				return (specialConstraints & SpecialConstraintType.New) > 0;
+				return (specialConstraints & GenericParamAttributes.DefaultConstructorConstrait) > 0;
 			}
 			set {
 				if (value)
-					specialConstraints |= SpecialConstraintType.New;
+					specialConstraints |= GenericParamAttributes.DefaultConstructorConstrait;
 				else
-					specialConstraints &= ~SpecialConstraintType.New;
+					specialConstraints &= ~GenericParamAttributes.DefaultConstructorConstrait;
 			}
 		}
 		
@@ -95,13 +97,13 @@
 		/// </summary>
 		public bool HasStructConstraint {
 			get {
-				return (specialConstraints & SpecialConstraintType.Struct) > 0;
+				return (specialConstraints & GenericParamAttributes.NotNullableValueTypeConstraint) > 0;
 			}
 			set {
 				if (value)
-					specialConstraints |= SpecialConstraintType.Struct;
+					specialConstraints |= GenericParamAttributes.NotNullableValueTypeConstraint;
 				else
-					specialConstraints &= ~SpecialConstraintType.Struct;
+					specialConstraints &= ~GenericParamAttributes.NotNullableValueTypeConstraint;
 			}
 		}
 		
@@ -112,13 +114,13 @@
 		/// </summary>
 		public bool HasClassConstraint {
 			get {
-				return (specialConstraints & SpecialConstraintType.Class) > 0;
+				return (specialConstraints & GenericParamAttributes.ReferenceTypeConstraint) > 0;
 			}
 			set {
 				if (value)
-					specialConstraints |= SpecialConstraintType.Class;
+					specialConstraints |= GenericParamAttributes.ReferenceTypeConstraint;
 				else
-					specialConstraints &= ~SpecialConstraintType.Class;
+					specialConstraints &= ~GenericParamAttributes.ReferenceTypeConstraint;
 			}
 		}
 		
@@ -128,13 +130,13 @@
 		/// </summary>
 		public bool HasCovariantConstraint {
 			get {
-				return (specialConstraints & SpecialConstraintType.Covariant) > 0;
+				return (specialConstraints & GenericParamAttributes.Covariant) > 0;
 			}
 			set {
 				if (value)
-					specialConstraints |= SpecialConstraintType.Covariant;
+					specialConstraints |= GenericParamAttributes.Covariant;
 				else
-					specialConstraints &= ~SpecialConstraintType.Covariant;
+					specialConstraints &= ~GenericParamAttributes.Covariant;
 			}
 		}
 		
@@ -144,13 +146,13 @@
 		/// </summary>
 		public bool HasContravariantConstraint {
 			get {
-				return (specialConstraints & SpecialConstraintType.Contravariant) > 0;
+				return (specialConstraints & GenericParamAttributes.Contravariant) > 0;
 			}
 			set {
 				if (value)
-					specialConstraints |= SpecialConstraintType.Contravariant;
+					specialConstraints |= GenericParamAttributes.Contravariant;
 				else
-					specialConstraints &= ~SpecialConstraintType.Contravariant;
+					specialConstraints &= ~GenericParamAttributes.Contravariant;
 			}
 		}
 		
@@ -158,7 +160,7 @@
 		/// Gets or sets a value that indicates what kind of special constraints
 		/// this parameter has applied to it.
 		/// </summary>
-		public SpecialConstraintType SpecialConstraints {
+		public GenericParamAttributes SpecialConstraints {
 			get {
 				return specialConstraints;
 			}
@@ -167,13 +169,4 @@
 			}
 		}
 	}
-	
-	public enum SpecialConstraintType : byte
-	{
-		Class = 0x01,
-		Struct = 0x02,
-		New = 0x04,
-		Covariant = 0x08,
-		Contravariant = 0x10
-	}
 }
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/ReflectionClass.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/ReflectionClass.cs	(revision 62746)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/ReflectionClass.cs	(working copy)
@@ -12,6 +12,7 @@
 using System.Xml;
 using System.Collections.Specialized;
 using Mono.Cecil;
+using MDGenericParameter = MonoDevelop.Projects.Parser.GenericParameter;
 
 namespace MonoDevelop.Projects.Parser
 {
@@ -86,6 +87,29 @@
 			
 			modifiers |= GetModifiers (type.Attributes);
 			
+			// Add generic parameters to the type
+			if (type.GenericParameters != null && type.GenericParameters.Count > 0) {
+				this.GenericParameters = new GenericParameterList();
+				
+				FullyQualifiedName = FullyQualifiedName.Substring(0, FullyQualifiedName.LastIndexOf("`"));
+				
+				foreach (Mono.Cecil.GenericParameter par in type.GenericParameters) {
+					
+					// Fill out the type constraints for generic parameters 
+					ReturnTypeList rtl = null;
+					if (par.Constraints != null && par.Constraints.Count > 0)
+					{
+						rtl = new ReturnTypeList();
+						foreach (Mono.Cecil.TypeReference typeRef in par.Constraints) {
+							rtl.Add(new ReflectionReturnType(typeRef));
+						}
+					}
+					
+					// Add the parameter to the generic parameter list
+					this.GenericParameters.Add(new MDGenericParameter(par.Name, rtl, par.Attributes));
+				}
+			}
+			
 			// set base classes
 			if (type.BaseType != null) { // it's null for System.Object ONLY !!!
 				baseTypes.Add(new ReflectionReturnType(type.BaseType));
Index: Extras/CSharpBinding/CSharpAmbience.cs
===================================================================
--- Extras/CSharpBinding/CSharpAmbience.cs	(revision 62746)
+++ Extras/CSharpBinding/CSharpAmbience.cs	(working copy)
@@ -154,16 +154,21 @@
 				AppendPangoHtmlTag (builder, c.FullyQualifiedName, "b");
 			else
 				AppendPangoHtmlTag (builder, c.Name, "b");
-				
+			
+			Console.WriteLine("We have a generic parameter here! " + ((c.GenericParameters == null) ? "ničesar ni!!" : c.GenericParameters.Count.ToString()));
+			Console.WriteLine("The name: " + c.FullyQualifiedName);
+			Console.WriteLine("----------------------------------------------");
+
 			if (c.GenericParameters != null && c.GenericParameters.Count > 0)
 			{
-				builder.Append("&lt;");
+				
+				builder.Append(":");
 				for (int i = 0; i < c.GenericParameters.Count; i++)
 				{
 					builder.Append(c.GenericParameters[i].Name);
 					if (i + 1 < c.GenericParameters.Count) builder.Append(", ");
 				}
-				builder.Append("&gt;");
+				builder.Append(":");
 			}
 			
 			
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/PersistentClass.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/PersistentClass.cs	(revision 62746)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/PersistentClass.cs	(working copy)
@@ -76,6 +76,21 @@
 				cls.indexer.Add (pi);
 			}
 			
+			if (sclass.GenericParameters != null && sclass.GenericParameters.Count > 0) {
+				cls.GenericParameters = new GenericParameterList();
+				foreach (GenericParameter gp in sclass.GenericParameters) {
+					GenericParameter tmp = new GenericParameter();
+					tmp.Name = gp.Name;
+					tmp.SpecialConstraints = gp.SpecialConstraints;
+					if (gp.BaseTypes != null && gp.BaseTypes.Count > 0) {
+						tmp.BaseTypes = new ReturnTypeList();
+						foreach (IReturnType rt in gp.BaseTypes) {
+							tmp.BaseTypes.Add(PersistentReturnType.Resolve(rt, typeResolver));
+						}
+					}
+				}
+			}
+			
 			cls.region = sclass.Region;
 			cls.bodyRegion = sclass.BodyRegion;
 			cls.attributes = PersistentAttributeSectionCollection.Resolve (sclass.Attributes, typeResolver);
@@ -139,6 +154,24 @@
 				cls.indexer.Add (ind);
 			}
 			
+			// Read the generic parameters
+			count = reader.ReadUInt32();
+			if (count > 0) {
+				cls.GenericParameters = new GenericParameterList();
+				for (uint i = 0; i < count; ++i) {
+					GenericParameter gp = new GenericParameter();
+					gp.Name = PersistentHelper.ReadString(reader, nameTable);
+					gp.SpecialConstraints = (Mono.Cecil.GenericParamAttributes) reader.ReadInt16();
+					uint count2 = reader.ReadUInt32();
+					if (count2 > 0) {
+						gp.BaseTypes = new ReturnTypeList();
+						for (uint j = 0; j < count2; ++j) {
+							gp.BaseTypes.Add(PersistentReturnType.Read(reader, nameTable));
+						}
+					}
+				}
+			}
+			
 			cls.region = PersistentRegion.Read (reader, nameTable);
 			cls.bodyRegion = PersistentRegion.Read (reader, nameTable);
 			cls.attributes = PersistentAttributeSectionCollection.Read (reader, nameTable);
@@ -187,6 +220,27 @@
 				PersistentIndexer.WriteTo (ind, writer, nameTable);
 			}
 			
+			// Write the generic parameters to the database file
+			if (cls.GenericParameters == null || cls.GenericParameters.Count < 1)
+				writer.Write((uint)0);
+			else {
+				Console.WriteLine("Daaaaaamn thing!!! " + cls.FullyQualifiedName);
+				writer.Write((uint)cls.GenericParameters.Count);
+				foreach (GenericParameter gp in cls.GenericParameters) {
+					PersistentHelper.WriteString(gp.Name, writer, nameTable);
+					writer.Write((short)gp.SpecialConstraints);
+					if (gp.BaseTypes == null)
+						writer.Write((uint)0);
+					else {
+						writer.Write((uint)gp.BaseTypes.Count);
+						foreach (IReturnType rt in gp.BaseTypes) {
+							PersistentReturnType.WriteTo(rt, writer, nameTable);
+						}
+					}
+				}
+			}
+			
+			
 			PersistentRegion.WriteTo (cls.Region, writer, nameTable);
 			PersistentRegion.WriteTo (cls.BodyRegion, writer, nameTable);
 			PersistentAttributeSectionCollection.WriteTo (cls.Attributes, writer, nameTable);
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/CodeCompletionDatabase.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/CodeCompletionDatabase.cs	(revision 62746)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/CodeCompletionDatabase.cs	(working copy)
@@ -47,7 +47,7 @@
 	{
 		static readonly int MAX_ACTIVE_COUNT = 100;
 		static readonly int MIN_ACTIVE_COUNT = 50;
-		static protected readonly int FORMAT_VERSION = 8;
+		static protected readonly int FORMAT_VERSION = 9;
 		
 		NamespaceEntry rootNamespace;
 		protected ArrayList references;
