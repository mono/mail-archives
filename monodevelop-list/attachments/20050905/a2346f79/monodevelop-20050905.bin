Index: Extras/MonoQuery/ChangeLog
===================================================================
--- Extras/MonoQuery/ChangeLog	(revision 2789)
+++ Extras/MonoQuery/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2005-09-05  Sureshkumar T  <tsureshkumar@novell.com>
+
+	* Mono.Data.Sql/Providers/SqlDbProvider.cs: implemented procedure
+	and their parameters listing.
+
 2005-08-25  Daniel Morgan <danielmorgan@verizon.net>
 
 	* Extras/MonoQuery/MonoQuery/Gui/SqlQueryView.cs: implement
Index: Extras/MonoQuery/Mono.Data.Sql/Providers/SqlDbProvider.cs
===================================================================
--- Extras/MonoQuery/Mono.Data.Sql/Providers/SqlDbProvider.cs	(revision 2789)
+++ Extras/MonoQuery/Mono.Data.Sql/Providers/SqlDbProvider.cs	(working copy)
@@ -4,6 +4,7 @@
 // Authors:
 //   Christian Hergert	<chris@mosaix.net>
 //   Daniel Morgan <danielmorgan@verizon.net>
+//   Sureshkumar T <tsureshkumar@novell.com>
 //
 // Copyright (C) 2005 Mosaix Communications, Inc.
 //
@@ -38,7 +39,7 @@
 namespace Mono.Data.Sql
 {
 	/// <summary>
-	/// Mono.Data.Sql provider for PostgreSQL databases.
+	/// Mono.Data.Sql provider for SqlServer databases.
 	/// </summary>
 	[Serializable]
 	public class SqlDbProvider : DbProviderBase
@@ -454,5 +455,77 @@
 			
 			return (UserSchema[]) collection.ToArray (typeof (UserSchema));
 		}
+
+		public override ProcedureSchema[] GetProcedures ()
+		{
+			if (IsOpen == false && Open () == false)
+				throw new InvalidOperationException ("Invalid connection");
+
+			ArrayList collection = new ArrayList ();
+			
+			using (SqlCommand cmd = connection.CreateCommand ()) {
+				cmd.CommandText = "SELECT su.name AS owner, so.name as proc_name, so.id as proc_id, " +
+					" so.crdate as created_date, so.xtype as proc_type " +
+					"FROM dbo.sysobjects so, dbo.sysusers su " +
+					"WHERE xtype = 'P' " +
+					"AND su.uid = so.uid " +
+					"ORDER BY 1, 2";
+				using (SqlDataReader reader = cmd.ExecuteReader ()) {
+					while (reader.Read ()) {
+						ProcedureSchema proc = new ProcedureSchema ();
+						proc.Provider = this;
+						proc.Name = (string) reader ["proc_name"];
+						proc.OwnerName = (string) reader ["owner"];
+						proc.LanguageName = "TSQL";
+
+						// FIXME : get sysproc or not
+						collection.Add (proc);
+					}
+				}
+			       
+				// get procedure text
+				cmd.CommandType = CommandType.StoredProcedure;
+				cmd.CommandText = "sp_helptext";
+				SqlParameter param = cmd.Parameters.Add ("@objname", SqlDbType.VarChar);
+				foreach (ProcedureSchema proc in collection) {
+					param.Value = proc.Name;
+					using (SqlDataReader reader = cmd.ExecuteReader ()) {
+						if (reader.Read ())
+							proc.Definition = (string) reader [0];
+					}
+				}
+			}			  
+			
+			return (ProcedureSchema []) collection.ToArray (typeof (ProcedureSchema)); 
+		}
+
+		public override ColumnSchema[] GetProcedureColumns (ProcedureSchema schema)
+		{		     
+			if (IsOpen == false && Open () == false)
+				throw new InvalidOperationException ("Invalid connection");
+			
+			ArrayList collection = new ArrayList ();
+
+			using (SqlCommand cmd = connection.CreateCommand ()) {
+				cmd.CommandType = CommandType.StoredProcedure;
+				cmd.CommandText = "sp_sproc_columns";
+				SqlParameter owner = cmd.Parameters.Add ("@procedure_owner", SqlDbType.VarChar);
+				SqlParameter name = cmd.Parameters.Add ("@procedure_name", SqlDbType.VarChar);
+				owner.Value = schema.OwnerName;
+				name.Value = schema.Name;
+				using (SqlDataReader reader = cmd.ExecuteReader ()) {
+					while (reader.Read ()) {
+						ColumnSchema column = new ColumnSchema ();
+						column.Provider = this;
+						column.Name = (string) reader ["COLUMN_NAME"];
+						column.DataTypeName = (string) reader ["TYPE_NAME"];
+
+						collection.Add (column);
+					}
+				}			      
+			}			
+		      
+			return (ColumnSchema []) collection.ToArray (typeof (ColumnSchema));
+		}
 	}
 }
