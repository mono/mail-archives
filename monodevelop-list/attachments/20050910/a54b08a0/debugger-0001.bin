Index: DebuggingService.cs
===================================================================
--- DebuggingService.cs	(revision 2790)
+++ DebuggingService.cs	(working copy)
@@ -104,8 +104,7 @@
 
 		private Breakpoint CreateBreakpoint (string name)
 		{
-			SimpleBreakpoint point = new SimpleBreakpoint (name);
-			point.BreakpointHitEvent += new Mono.Debugger.BreakpointEventHandler (OnBreakpointHit);
+			SimpleBreakpoint point = new SimpleBreakpoint (name, null, new Mono.Debugger.BreakpointCheckHandler (OnBreakpointHit));
 			return point;
 		}
 
@@ -260,7 +259,7 @@
 			console.Error.Write (e.ToString ());
 		}
 
-		private void target_event (object sender, TargetEventArgs args)
+		private void target_event (TargetEventArgs args)
 		{
 			switch (args.Type) {
 			case TargetEventType.TargetExited:
@@ -370,11 +369,12 @@
 #endif
 			this.console = console;
 
-			backend = new DebuggerBackend ();
+			// TODO: How dow we obtain/create a DebuggerBackend here?
+			backend = null;
 			backend.ThreadManager.InitializedEvent += new ThreadEventHandler (initialized_event);
 			backend.ThreadManager.ThreadCreatedEvent += new ThreadEventHandler (thread_created);
 			backend.ThreadManager.ThreadExitedEvent += new ThreadEventHandler (thread_exited);
-			backend.Run (new ProcessStart (null, argv));
+			backend.Run (new DebuggerOptions(), argv);
 			
 			console.CancelRequested += new EventHandler (OnCancelRequested);
 		}
@@ -399,7 +399,7 @@
 				//throw new Exception ("Can't step unless paused.");
 				return;
 
-			proc.StepLine (false);
+			proc.StepLine ();
 		}
 
 		public void StepOver ()
@@ -412,7 +412,7 @@
 				//throw new Exception ("Can't step unless paused.");
 				return;
 
-			proc.NextLine (false);
+			proc.NextLine ();
 		}
 
 		public void StepOut ()
@@ -423,7 +423,7 @@
 			if (IsRunning)
 				return;
 
-			proc.Finish (false);
+			proc.Finish ();
 		}
 
 		public string[] Backtrace {
@@ -512,18 +512,23 @@
 			return "";
 		}
 
-		private void OnBreakpointHit (Breakpoint pointFromDbg, StackFrame frame)
+		private bool OnBreakpointHit (Breakpoint pointFromDbg, ITargetAccess target,
+						     TargetAddress address)
 		{
 			string[] toks = pointFromDbg.Name.Split (':');
 			string filename = toks [0];
 			int linenumber = Int32.Parse (toks [1]);
 
-			if (this.BreakpointHit == null)
-				return;
-			
-			BreakpointHitArgs args = new BreakpointHitArgs (filename, linenumber);
-			if (BreakpointHit != null)
-				BreakpointHit (this, args);
+			if (this.BreakpointHit != null)
+			{
+				BreakpointHitArgs args = new BreakpointHitArgs (filename, linenumber);
+				if (BreakpointHit != null) 
+				{
+					BreakpointHit (this, args);
+					return true;
+				}
+			}
+			return false;
 		}
 
 		public event DebuggingService.BreakpointHitHandler BreakpointHit;
Index: Gui/Pads/LocalsPad.cs
===================================================================
--- Gui/Pads/LocalsPad.cs	(revision 2790)
+++ Gui/Pads/LocalsPad.cs	(working copy)
@@ -99,15 +99,17 @@
 		{
 			bool inserted = false;
 
-			for (int i = array.LowerBound; i < array.UpperBound; i++) {
+			for (int i = array.GetLowerBound(0); i < array.GetUpperBound(0); i++) {
 
+				int[] indices = { i };
+				
 				inserted = true;
 
-				ITargetObject elt = array [i];
+				ITargetObject elt = array[indices];
 				if (elt == null)
 					continue;
 
-				TreeIter iter = store.Append (parent);
+				TreeIter iter = store.AppendNode (parent);
 				AddObject (i.ToString (), "" /* XXX */, elt, iter);
 			}
 
@@ -184,7 +186,7 @@
 			}
 			else {
 #endif
-				TreeIter iter = store.Append (parent);
+				TreeIter iter = store.AppendNode (parent);
 				AddObject (member.Name, icon_name, is_field ? sobj.GetField (member.Index) : sobj.GetProperty (member.Index),
 					   iter);
 				inserted = true;
@@ -280,7 +282,7 @@
 			bool inserted = false;
 
 			if (sobj.Type.HasParent) {
-				TreeIter iter = store.Append (parent);
+				TreeIter iter = store.AppendNode (parent);
 				AddObject ("<parent>", Stock.Class, sobj.Parent, iter);
 				inserted = true;
 			}
@@ -299,7 +301,7 @@
 					store.Remove (ref child);
 			}
 
-			TreeIter iter = store.Append (parent);
+			TreeIter iter = store.AppendNode (parent);
 			store.SetValue (iter, VALUE_COL, message);
 		}
 
@@ -409,11 +411,11 @@
 			}
 
 			if (obj == null) {
-				child = store.Append (args.Iter);
+				child = store.AppendNode (args.Iter);
 				return;
 			}
 
-			switch (obj.TypeInfo.Type.Kind) {
+			switch (obj.Kind) {
 			case TargetObjectKind.Array:
 				ITargetArrayObject array = (ITargetArrayObject) obj;
 				try {
@@ -461,13 +463,13 @@
 
 		void AddPlaceholder (ITargetObject obj, TreeIter parent)
 		{
-			if (obj.TypeInfo.Type.Kind == TargetObjectKind.Array) {
+			if (obj.Kind == TargetObjectKind.Array) {
 				ITargetArrayObject array = (ITargetArrayObject) obj;
-				if (array.LowerBound == array.UpperBound)
+				if (array.GetLowerBound(0) == array.GetUpperBound(0))
 					return;
 			}
 
-			store.Append (parent);
+			store.AppendNode (parent);
 			iters.Add (parent, obj);
 		}
 
@@ -476,20 +478,23 @@
 			if (obj == null) {
 				return "null";
 			}
-
-			switch (obj.TypeInfo.Type.Kind) {
+			return obj.Print();
+/* TODO : Was this needed, why not just call Print? 
+			switch (obj.Kind) {
 			case TargetObjectKind.Fundamental:
 				object contents = ((ITargetFundamentalObject) obj).Object;
 				return contents.ToString ();
-
+				break;
 			case TargetObjectKind.Array:
 				ITargetArrayObject array = (ITargetArrayObject) obj;
-				if (array.LowerBound == array.UpperBound && array.LowerBound == 0)
+				if (array.GetLowerBound(0) == array.GetUpperBound(0) && array.GetLowerBound(0) == 0)
 					return "[]";
 				else
 					return "";
-
+				break;
 			case TargetObjectKind.Struct:
+				goto case TargetObjectKind.Class;
+				break;
 			case TargetObjectKind.Class:
 				try {
 #if NET_2_0
@@ -510,9 +515,12 @@
 				  //Console.WriteLine ("getting object value failed: {0}", e);
 					return "";
 				}
+				break;
 			default:
 				return "";
+				break;
 			}
+			*/
 		}
 
 		void AddObject (string name, string icon_name, ITargetObject obj, TreeIter iter)
@@ -520,7 +528,7 @@
 			store.SetValue (iter, NAME_COL, name);
 			store.SetValue (iter, VALUE_COL, GetObjectValueString (obj));
 			store.SetValue (iter, TYPE_COL,
-					obj == null ? "" : Runtime.Ambience.CurrentAmbience.GetIntrinsicTypeName (obj.TypeInfo.Type.Name));
+					obj == null ? "" : Runtime.Ambience.CurrentAmbience.GetIntrinsicTypeName (obj.TypeName));
 			Gdk.Pixbuf icon = Runtime.Gui.Resources.GetIcon (icon_name, Gtk.IconSize.Menu);
 			if (icon != null)
 				store.SetValue (iter, PIXBUF_COL, icon);
@@ -532,8 +540,8 @@
 		{
 			string icon = "";
 
-			if (obj.TypeInfo.Type.TypeHandle is Type)
-				icon = Runtime.Gui.Icons.GetIcon ((Type)obj.TypeInfo.Type.TypeHandle);
+		// TODO:	if (obj.Type.TypeHandle is Type)
+		//		icon = Runtime.Gui.Icons.GetIcon ((Type)obj.Type.TypeHandle);
 
 			return icon;
 		}
@@ -640,7 +648,7 @@
 				/* it's alive, add it to the display */
 
 				ITargetObject obj = variable.GetObject (current_frame);
-				TreeIter iter;
+				TreeIter iter ;
 
 				if (!obj.IsValid)
 					return;
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 2790)
+++ ChangeLog	(working copy)
@@ -1,3 +1,14 @@
+2005-09-09  Jacques Beaurain <jacques.beaurain@gmail.com>
+
+	* DebuggingService.cs: Fix all compile errors against current 
+	Mono.Debugger assembly in SVN. TODO: Need to find out how to create or
+	obtain DebuggerBackend as it is internal to assembly.
+	* Gui/Pads/LocalsPad.cs: Fix printing of objects through generic 
+	Print method in interface. Some gtk-sharp fixups for current 
+	SVN. This probably needs review as it was not possible to test 
+	without being able to run debugger, also left some commented 
+	code intact.
+ 
 2005-08-08  Lluis Sanchez Gual  <lluis@novell.com> 
 
 	* DebuggingService.cs: Implement GetExecutionHandlerFactory method.