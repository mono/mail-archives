Index: libstetic/wrapper/ActionToolbarWrapper.cs
===================================================================
--- libstetic/wrapper/ActionToolbarWrapper.cs	(revisión: 120964)
+++ libstetic/wrapper/ActionToolbarWrapper.cs	(copia de trabajo)
@@ -159,6 +159,70 @@
 				return base.GenerateObjectCreation (ctx);
 		}
 
+		internal protected override void GeneratePostBuildCode (GeneratorContext ctx, CodeExpression var)
+		{
+			// Call ConnectAccelerator on all Actions to connect Accelerator Key to the action.
+			// ActionGroup Iteration
+			CodeVariableDeclarationStatement varGroupIndex = new CodeVariableDeclarationStatement (typeof(int), "n");
+			varGroupIndex.InitExpression = new CodePrimitiveExpression (0);
+			CodeExpression varIndex = new CodeVariableReferenceExpression ("n");
+
+			CodeIterationStatement iteration = new CodeIterationStatement ();
+			iteration.InitStatement = varGroupIndex;
+			CodePropertyReferenceExpression uiManager = new CodePropertyReferenceExpression (
+			                                                                                 new CodeThisReferenceExpression (),
+			                                                                                 "UIManager");
+			CodePropertyReferenceExpression groupsArray = new CodePropertyReferenceExpression (uiManager, "ActionGroups");
+			// Navigate in ActionGroups
+			iteration.TestExpression = new CodeBinaryOperatorExpression (
+			                                                             varIndex,
+			                                                             CodeBinaryOperatorType.LessThan,
+			                                                             new CodePropertyReferenceExpression (groupsArray, "Length"));
+			iteration.IncrementStatement = new CodeAssignStatement (
+			                                                        varIndex,
+			                                                        new CodeBinaryOperatorExpression (
+			                                                                                          varIndex,
+			                                                                                          CodeBinaryOperatorType.Add,
+			                                                                                          new CodePrimitiveExpression (1))
+			                                                        );
+
+			// Action Iterations
+			CodeVariableDeclarationStatement varActionIndex = new CodeVariableDeclarationStatement (typeof(int), "a");
+			varActionIndex.InitExpression = new CodePrimitiveExpression (0);
+			CodeExpression varaIndex = new CodeVariableReferenceExpression ("a");
+			
+			CodeArrayIndexerExpression arrayOfGroups = new  CodeArrayIndexerExpression (groupsArray, new CodeVariableReferenceExpression ("n"));
+			// Navigate in ListActions
+			CodeIterationStatement actionsIteration = new CodeIterationStatement ();
+			actionsIteration.InitStatement = varActionIndex;
+			actionsIteration.TestExpression = new CodeBinaryOperatorExpression (
+			                                                                    varaIndex,
+			                                                                    CodeBinaryOperatorType.LessThan,
+			                                                                    new CodePropertyReferenceExpression (
+			                                                                                             			new CodeMethodInvokeExpression (arrayOfGroups,
+			                                                                                                	                             		"ListActions"),
+			                                                                                                                                  		"Length"));
+			actionsIteration.IncrementStatement = new CodeAssignStatement (
+                                                    varaIndex,
+                                                    new CodeBinaryOperatorExpression (
+                                                                                      varaIndex,
+                                                                                      CodeBinaryOperatorType.Add,
+                                                                                      new CodePrimitiveExpression (1))
+                                                    );
+			iteration.Statements.Add (actionsIteration);
+			CodeArrayIndexerExpression arrayOfActions = new  CodeArrayIndexerExpression (
+			                                                                             new CodeMethodInvokeExpression (
+			                                                                                                             arrayOfGroups,
+            	                             																			"ListActions"), 
+			                                                                             new CodeVariableReferenceExpression ("a"));
+			// Call ConnectAccelerator
+			CodeMethodInvokeExpression connectMethod = new CodeMethodInvokeExpression (arrayOfActions,
+			                                                                           "ConnectAccelerator");
+			actionsIteration.Statements.Add (connectMethod);
+			ctx.Statements.Add (iteration);
+			base.GeneratePostBuildCode (ctx, var);
+		}
+		
 		protected override void GeneratePropertySet (GeneratorContext ctx, CodeExpression var, PropertyDescriptor prop)
 		{
 			if (toolbarStyle == ToolbarStyle.Default && prop.Name == "ToolbarStyle")
Index: ChangeLog
===================================================================
--- ChangeLog	(revisión: 120964)
+++ ChangeLog	(copia de trabajo)
@@ -1,3 +1,8 @@
+2008-12-08  Luciano N. Callero <lnc19@hotmail.com>
+        * libstetic/wrapper/ActionToolbarWrapper.cs: autogenerate call to 
+	  ConnectAccelerator on all ActionGroups/Actions to connect 
+	  Accelerator.
+
 2008-12-02  Michael Hutchinson  <mhutchinson@novell.com>
 
 	* Makefile.am:
