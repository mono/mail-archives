Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Ambience/Ambience.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Ambience/Ambience.cs	(revision 65310)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Ambience/Ambience.cs	(working copy)
@@ -86,6 +86,8 @@
 				return Convert (item as IMethod, conversionFlags);
 			else if (item is IProperty)
 				return Convert (item as IProperty, conversionFlags);
+			else if (item is LocalVariable)
+				return Convert (item as LocalVariable, conversionFlags);
 			else
 				return item.Name;
 		}
@@ -144,6 +146,12 @@
 		{
 			return Convert(modifier, ConversionFlags.StandardConversionFlags);
 		}
+
+		public string Convert(LocalVariable localVariable)
+		{
+			return Convert(localVariable, ConversionFlags.StandardConversionFlags);
+		}
+
 		
 		public abstract string Convert(IClass c, ConversionFlags flags);
 		public abstract string ConvertEnd(IClass c, ConversionFlags flags);
@@ -156,6 +164,7 @@
 		public abstract string Convert(IParameter param, ConversionFlags flags);
 		public abstract string Convert(IReturnType returnType, ConversionFlags flags);
 		public abstract string Convert(ModifierEnum modifier, ConversionFlags flags);
+		public abstract string Convert(LocalVariable localVariable, ConversionFlags flags);
 		
 		public abstract string WrapAttribute(string attribute);
 		public abstract string WrapComment(string comment);
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Ambience/NetAmbience.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Ambience/NetAmbience.cs	(revision 65310)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Ambience/NetAmbience.cs	(working copy)
@@ -303,6 +303,17 @@
 			return builder.ToString();
 		}
 
+		public override string Convert(LocalVariable localVariable, ConversionFlags conversionFlags)
+		{
+			StringBuilder builder = new StringBuilder();
+
+			builder.Append(localVariable.Name);
+			builder.Append(" : ");
+			builder.Append(Convert(localVariable.ReturnType));
+
+			return builder.ToString();
+		}
+
 		public override string WrapAttribute(string attribute)
 		{
 			return "[" + attribute + "]";
Index: Core/src/MonoDevelop.Projects/ChangeLog
===================================================================
--- Core/src/MonoDevelop.Projects/ChangeLog	(revision 65310)
+++ Core/src/MonoDevelop.Projects/ChangeLog	(working copy)
@@ -1,3 +1,11 @@
+2006-09-12 Jacob Ilsø Christensen <jacobilsoe@gmail.com> 
+
+	* MonoDevelop.Projects.Ambience/Ambience.cs:
+	Added Convert method for LocalVariable instances.
+
+	* MonoDevelop.Projects.Ambience/NetAmbience.cs:
+	Track changes in Ambience.
+
 2006-09-04 Lluis Sanchez Gual  <lluis@novell.com> 
 
 	* MonoDevelop.Projects/Project.cs: Workaround Mono bug. The watcher 
Index: Extras/NemerleBinding/NemerleAmbience.cs
===================================================================
--- Extras/NemerleBinding/NemerleAmbience.cs	(revision 65310)
+++ Extras/NemerleBinding/NemerleAmbience.cs	(working copy)
@@ -517,6 +517,17 @@
 			
 			return builder.ToString();
 		}
+
+		public override string Convert(LocalVariable localVariable, ConversionFlags conversionFlags)
+		{
+			StringBuilder builder = new StringBuilder();
+
+			builder.Append(localVariable.Name);
+			builder.Append(" : ");
+			builder.Append(Convert(localVariable.ReturnType, conversionFlags));
+			
+			return builder.ToString();
+		}
 		
 		// pango has some problems with
 		// <i>static </i>bool <b>Equals</b> (<i></i>object a, <i></i>object b)
Index: Extras/NemerleBinding/ChangeLog
===================================================================
--- Extras/NemerleBinding/ChangeLog	(revision 65310)
+++ Extras/NemerleBinding/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2006-09-12 Jacob Ilsø Christensen <jacobilsoe@gmail.com>
+
+	* NemerleAmbience.cs: Track changes in Ambience.
+
 2006-08-07 Lluis Sanchez Gual  <lluis@novell.com> 
 
 	* NemerleAmbience.cs: Track API changes in Ambience.
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs	(revision 65310)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs	(working copy)
@@ -24,15 +24,24 @@
 			
 			if (item is IParameter) {
 				s = "<small><i>" + GettextCatalog.GetString ("Parameter") + "</i></small>\n";
-				s += ambience.Convert ((IParameter)item, WindowConversionFlags);
+				s += ambience.Convert((IParameter)item, WindowConversionFlags);
 			}
 			else if (item is LocalVariable) {
-				LocalVariable var = (LocalVariable) item;
-				s = "<small><i>" + GettextCatalog.GetString ("Local variable") + "</i></small>\n" + var.ReturnType.FullyQualifiedName + " " + var.Name;
-			} else if (item is Namespace)
+				s = "<small><i>" + GettextCatalog.GetString ("Local variable") + "</i></small>\n";
+				s += ambience.Convert((LocalVariable)item, WindowConversionFlags);
+			}
+			else if (item is IField) {				
+				s = "<small><i>" + GettextCatalog.GetString ("Field") + "</i></small>\n";
+				s += ambience.Convert((IField)item, WindowConversionFlags);
+			}
+			else if (item is IProperty) {				
+				s = "<small><i>" + GettextCatalog.GetString ("Property") + "</i></small>\n";
+				s += ambience.Convert((IProperty)item, WindowConversionFlags);
+			}
+			else if (item is Namespace)
 				s = "namespace " + "<b>" + item.Name + "</b>";
 			else
-				s = ambience.Convert (item, WindowConversionFlags);
+				s = ambience.Convert(item, WindowConversionFlags);
 
 			string doc = GetDocumentation (item.Documentation).Trim ('\n');
 			if (doc.Length > 0)
Index: Extras/MonoDevelop.SourceEditor/ChangeLog
===================================================================
--- Extras/MonoDevelop.SourceEditor/ChangeLog	(revision 65311)
+++ Extras/MonoDevelop.SourceEditor/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2006-09-12 Jacob Ilsø Christensen  <jacobilsoe@gmail.com>
+
+	* MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs: Moved
+	things to Ambience plus cleaned up a bit.
+
 2006-09-11 Jacob Ilsø Christensen  <jacobilsoe@gmail.com>
 
 	* MonoDevelop.SourceEditor.addin.xml: A few minor
Index: Extras/VBNetBinding/ChangeLog
===================================================================
--- Extras/VBNetBinding/ChangeLog	(revision 65310)
+++ Extras/VBNetBinding/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2006-09-12 Jacob Ilsø Christensen <jacobilsoe@gmail.com>
+
+	* VBAmbience.cs: Track changes in Ambience.
+
 2006-07-11 Philip Turnbull <philip.turnbull@gmail.com>
 
 	* VBNetBinding/VBNetBinding.addin.xml:
Index: Extras/VBNetBinding/VBAmbience.cs
===================================================================
--- Extras/VBNetBinding/VBAmbience.cs	(revision 65310)
+++ Extras/VBNetBinding/VBAmbience.cs	(working copy)
@@ -551,6 +551,17 @@
 			builder.Append(Convert(param.ReturnType, conversionFlags));
 
 			return builder.ToString();
+		}
+
+		public override string Convert(LocalVariable localVariable, ConversionFlags conversionFlags)
+		{
+			StringBuilder builder = new StringBuilder();
+										
+			builder.Append(localVariable.Name);
+			builder.Append(" As ");			
+			builder.Append(Convert(localVariable.ReturnType, conversionFlags));
+
+			return builder.ToString();
 		}
 
 		public override string WrapAttribute(string attribute)
Index: Extras/BooBinding/BooAmbience.boo
===================================================================
--- Extras/BooBinding/BooAmbience.boo	(revision 65310)
+++ Extras/BooBinding/BooAmbience.boo	(working copy)
@@ -410,7 +410,16 @@
 		builder.Append(Convert(param.ReturnType, conversionFlags))
 		
 		return builder.ToString()
-	
+
+	override def Convert(localVariable as LocalVariable, conversionFlags as ConversionFlags) as string:
+		builder as StringBuilder = StringBuilder()
+					
+		builder.Append(localVariable.Name)
+		builder.Append(' as ')
+		builder.Append(Convert(localVariable.ReturnType, conversionFlags))
+		
+		return builder.ToString()
+
 	private def AppendPangoHtmlTag (sb as StringBuilder, text as string, tag as string, conversionFlags as ConversionFlags):
 		sb.Append ('<').Append (tag).Append ('>') if IncludeHTMLMarkup(conversionFlags) or IncludePangoMarkup(conversionFlags)
 		sb.Append (text)
Index: Extras/BooBinding/ChangeLog
===================================================================
--- Extras/BooBinding/ChangeLog	(revision 65310)
+++ Extras/BooBinding/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2006-09-12 Jacob Ilsø Christensen <jacobilsoe@gmail.com>
+
+	* BooAmbience.boo: Track changes in Ambience.
+
 2006-08-10 Lluis Sanchez Gual  <lluis@novell.com> 
 
 	* Gui/ShellTextView.boo: Provide the ambience to use for code
Index: Extras/CSharpBinding/ChangeLog
===================================================================
--- Extras/CSharpBinding/ChangeLog	(revision 65310)
+++ Extras/CSharpBinding/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2006-09-12 Jacob Ilsø Christensen <jacobilsoe@gmail.com>
+	
+	* Parser/CSharpVisitor.cs: Fixed compile warning.
+	* CSharpAmbience.cs: Track changes in Ambience.
+
 2006-09-01 Lluis Sanchez Gual  <lluis@novell.com>
 
 	* CSharpBinding/CSharpAmbience.cs: Avoid appending the class
Index: Extras/CSharpBinding/Parser/CSharpVisitor.cs
===================================================================
--- Extras/CSharpBinding/Parser/CSharpVisitor.cs	(revision 65310)
+++ Extras/CSharpBinding/Parser/CSharpVisitor.cs	(working copy)
@@ -13,8 +13,6 @@
 using ClassType = MonoDevelop.Projects.Parser.ClassType;
 using CSGenericParameter = CSharpBinding.Parser.SharpDevelopTree.GenericParameter;
 
-using MonoDevelop.Projects.Parser;
-
 namespace CSharpBinding.Parser
 {
 	public class Using : AbstractUsing
Index: Extras/CSharpBinding/CSharpAmbience.cs
===================================================================
--- Extras/CSharpBinding/CSharpAmbience.cs	(revision 65310)
+++ Extras/CSharpBinding/CSharpAmbience.cs	(working copy)
@@ -16,7 +16,7 @@
 
 namespace CSharpBinding
 {
-	public class CSharpAmbience :  Ambience
+	public class CSharpAmbience : Ambience
 	{
 		static string[,] typeConversionList = new string[,] {
 			{"System.Void",    "void"},
@@ -546,10 +546,25 @@
 			
 			if (ShowParameterNames(conversionFlags)) {
 				builder.Append(' ');
+				builder.Append("<b>");
 				builder.Append(param.Name);
+				builder.Append("</b>");
 			}
 			return builder.ToString();
 		}
+
+		public override string Convert(LocalVariable localVariable, ConversionFlags conversionFlags)
+		{
+			StringBuilder builder = new StringBuilder();						
+			
+			builder.Append(Convert(localVariable.ReturnType, conversionFlags));						
+			builder.Append(' ');
+			builder.Append("<b>");
+			builder.Append(localVariable.Name);
+			builder.Append("</b>");
+			
+			return builder.ToString();
+		}
 		
 		// pango has some problems with
 		// <i>static </i>bool <b>Equals</b> (<i></i>object a, <i></i>object b)