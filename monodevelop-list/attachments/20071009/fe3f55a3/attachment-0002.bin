Index: MonoDevelop.Ide.Gui.Dialogs/EncapsulateFieldDialog.cs
===================================================================
--- MonoDevelop.Ide.Gui.Dialogs/EncapsulateFieldDialog.cs	(revision 87143)
+++ MonoDevelop.Ide.Gui.Dialogs/EncapsulateFieldDialog.cs	(working copy)
@@ -30,42 +30,13 @@
 			entryPropertyName.Changed += new EventHandler (OnEntryChanged);
 			entryPropertyName.Activated += new EventHandler (OnEntryActivated);
 			
-			entryPropertyName.Text = GeneratePropertyName ();
+			entryPropertyName.Text = IdeApp.ProjectOperations.CodeRefactorer.GetPropertyName (field);
 			entryPropertyName.SelectRegion (0, -1);
 			
 			buttonOk.Clicked += new EventHandler (OnOKClicked);
 			buttonCancel.Clicked += new EventHandler (OnCancelClicked);
 		}
 		
-		string GeneratePropertyName ()
-		{
-			StringBuilder builder = new StringBuilder (field.Name.Length);
-			string fieldName = field.Name;
-			bool upper = true;
-			int i = 0;
-			
-			// Field names are commonly prefixed with "m" or "m_" by devs from c++ land.
-			if (fieldName[0] == 'm' && fieldName.Length > 1 &&
-			    (fieldName[1] == '_' || Char.IsUpper (fieldName[1])))
-				i++;
-			
-			while (i < fieldName.Length) {
-				if (fieldName[i] == '_') {
-					// strip _'s and uppercase the next letter
-					upper = true;
-				} else if (Char.IsLetter (fieldName[i])) {
-					builder.Append (upper ? Char.ToUpper (fieldName[i]) : fieldName[i]);
-					upper = false;
-				} else {
-					builder.Append (fieldName[i]);
-				}
-				
-				i++;
-			}
-			
-			return builder.ToString ();
-		}
-		
 		void OnEntryChanged (object sender, EventArgs e)
 		{
 			string name = entryPropertyName.Text;
@@ -134,8 +105,12 @@
 			IProgressMonitor monitor = IdeApp.Workbench.ProgressMonitors.GetBackgroundProgressMonitor (this.Title, null);
 			string name = entryPropertyName.Text;
 			
-			refactorer.EncapsulateField (monitor, field.DeclaringType, field, name, radioUpdateAll.Active);
+			// if the field was public before, then we provide a 'set', else we don't
+			EncapsulateFieldOptions options = new EncapsulateFieldOptions ();
+			options.CreateSetter = (field.IsPublic || (!field.IsPrivate && !field.IsProtectedOrInternal));
 			
+			refactorer.EncapsulateField (monitor, field.DeclaringType, field, name, radioUpdateAll.Active, options);
+			
 			((Widget) this).Destroy ();
 		}
 	}