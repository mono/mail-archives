Index: MonoDevelop.Projects.CodeGeneration.InsertionLocations/CurrentPositionInsertionLocation.cs
===================================================================
--- MonoDevelop.Projects.CodeGeneration.InsertionLocations/CurrentPositionInsertionLocation.cs	(revision 0)
+++ MonoDevelop.Projects.CodeGeneration.InsertionLocations/CurrentPositionInsertionLocation.cs	(revision 0)
@@ -0,0 +1,47 @@
+//
+// Authors:
+//   Ben Motmans  <ben.motmans@gmail.com>
+//
+// Copyright (C) 2007 Ben Motmans
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Collections;
+using System.CodeDom;
+using MonoDevelop.Core;
+using MonoDevelop.Projects.Text;
+using MonoDevelop.Projects.Parser;
+
+namespace MonoDevelop.Projects.CodeGeneration.InsertionLocations
+{
+	public class CurrentPositionInsertionLocation : IInsertionLocation
+	{
+		public string Description {
+			get { return GettextCatalog.GetString ("Current Position"); }
+		}
+		
+		public int GetLocation (IRefactorer refactorer, IEditableTextFile buffer, IClass cls, CodeTypeMember member)
+		{
+			return refactorer.GetCurrentInsertionPosition (buffer, cls);
+		}
+	}
+}
Index: MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastEventInsertionLocation.cs
===================================================================
--- MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastEventInsertionLocation.cs	(revision 0)
+++ MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastEventInsertionLocation.cs	(revision 0)
@@ -0,0 +1,47 @@
+//
+// Authors:
+//   Ben Motmans  <ben.motmans@gmail.com>
+//
+// Copyright (C) 2007 Ben Motmans
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Collections;
+using System.CodeDom;
+using MonoDevelop.Core;
+using MonoDevelop.Projects.Text;
+using MonoDevelop.Projects.Parser;
+
+namespace MonoDevelop.Projects.CodeGeneration.InsertionLocations
+{
+	public class AfterLastEventInsertionLocation : IInsertionLocation
+	{
+		public string Description {
+			get { return GettextCatalog.GetString ("After Last Event"); }
+		}
+		
+		public int GetLocation (IRefactorer refactorer, IEditableTextFile buffer, IClass cls, CodeTypeMember member)
+		{
+			return refactorer.GetAfterLastEventInsertionPosition (buffer, cls);
+		}
+	}
+}
Index: MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastFieldInsertionLocation.cs
===================================================================
--- MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastFieldInsertionLocation.cs	(revision 0)
+++ MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastFieldInsertionLocation.cs	(revision 0)
@@ -0,0 +1,47 @@
+//
+// Authors:
+//   Ben Motmans  <ben.motmans@gmail.com>
+//
+// Copyright (C) 2007 Ben Motmans
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Collections;
+using System.CodeDom;
+using MonoDevelop.Core;
+using MonoDevelop.Projects.Text;
+using MonoDevelop.Projects.Parser;
+
+namespace MonoDevelop.Projects.CodeGeneration.InsertionLocations
+{
+	public class AfterLastFieldInsertionLocation : IInsertionLocation
+	{
+		public string Description {
+			get { return GettextCatalog.GetString ("After Last Field"); }
+		}
+		
+		public int GetLocation (IRefactorer refactorer, IEditableTextFile buffer, IClass cls, CodeTypeMember member)
+		{
+			return refactorer.GetAfterLastFieldInsertionPosition (buffer, cls);
+		}
+	}
+}
Index: MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastPropertyInsertionLocation.cs
===================================================================
--- MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastPropertyInsertionLocation.cs	(revision 0)
+++ MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastPropertyInsertionLocation.cs	(revision 0)
@@ -0,0 +1,47 @@
+//
+// Authors:
+//   Ben Motmans  <ben.motmans@gmail.com>
+//
+// Copyright (C) 2007 Ben Motmans
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Collections;
+using System.CodeDom;
+using MonoDevelop.Core;
+using MonoDevelop.Projects.Text;
+using MonoDevelop.Projects.Parser;
+
+namespace MonoDevelop.Projects.CodeGeneration.InsertionLocations
+{
+	public class AfterLastPropertyInsertionLocation : IInsertionLocation
+	{
+		public string Description {
+			get { return GettextCatalog.GetString ("After Last Property"); }
+		}
+		
+		public int GetLocation (IRefactorer refactorer, IEditableTextFile buffer, IClass cls, CodeTypeMember member)
+		{
+			return refactorer.GetAfterLastPropertyInsertionPosition (buffer, cls);
+		}
+	}
+}
Index: MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastConstructorInsertionLocation.cs
===================================================================
--- MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastConstructorInsertionLocation.cs	(revision 0)
+++ MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastConstructorInsertionLocation.cs	(revision 0)
@@ -0,0 +1,47 @@
+//
+// Authors:
+//   Ben Motmans  <ben.motmans@gmail.com>
+//
+// Copyright (C) 2007 Ben Motmans
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Collections;
+using System.CodeDom;
+using MonoDevelop.Core;
+using MonoDevelop.Projects.Text;
+using MonoDevelop.Projects.Parser;
+
+namespace MonoDevelop.Projects.CodeGeneration.InsertionLocations
+{
+	public class AfterLastConstructorInsertionLocation : IInsertionLocation
+	{
+		public string Description {
+			get { return GettextCatalog.GetString ("After Last Constructor"); }
+		}
+		
+		public int GetLocation (IRefactorer refactorer, IEditableTextFile buffer, IClass cls, CodeTypeMember member)
+		{
+			return refactorer.GetAfterLastConstructorInsertionPosition (buffer, cls);
+		}
+	}
+}
Index: MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastMethodInsertionLocation.cs
===================================================================
--- MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastMethodInsertionLocation.cs	(revision 0)
+++ MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastMethodInsertionLocation.cs	(revision 0)
@@ -0,0 +1,47 @@
+//
+// Authors:
+//   Ben Motmans  <ben.motmans@gmail.com>
+//
+// Copyright (C) 2007 Ben Motmans
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Collections;
+using System.CodeDom;
+using MonoDevelop.Core;
+using MonoDevelop.Projects.Text;
+using MonoDevelop.Projects.Parser;
+
+namespace MonoDevelop.Projects.CodeGeneration.InsertionLocations
+{
+	public class AfterLastMethodInsertionLocation : IInsertionLocation
+	{
+		public string Description {
+			get { return GettextCatalog.GetString ("After Last Method"); }
+		}
+		
+		public int GetLocation (IRefactorer refactorer, IEditableTextFile buffer, IClass cls, CodeTypeMember member)
+		{
+			return refactorer.GetAfterLastMethodInsertionPosition (buffer, cls);
+		}
+	}
+}
Index: MonoDevelop.Projects.addin.xml
===================================================================
--- MonoDevelop.Projects.addin.xml	(revision 87143)
+++ MonoDevelop.Projects.addin.xml	(working copy)
@@ -60,6 +60,11 @@
 		<Description>Language bindings.</Description>
 		<ExtensionNode name="LanguageBinding" type="MonoDevelop.Projects.Extensions.LanguageBindingCodon"/>
 	</ExtensionPoint>
+	
+	<ExtensionPoint path = "/MonoDevelop/Refactoring/InsertionLocations" name = "CodeGeneration insertion locations">
+		<Description>CodeGeneration insertion locations.</Description>
+		<ExtensionNode name="InsertionLocation" type="MonoDevelop.Projects.Extensions.InsertionLocationCodon"/>
+	</ExtensionPoint>
 
 	<!-- Extensions -->
 
@@ -102,4 +107,13 @@
 		<Class id="MidStep" class = "MonoDevelop.Projects.ProjectServiceExtension" />
 		<Class id="FinalStep" class = "MonoDevelop.Projects.ProjectServiceExtension" />
 	</Extension>
+	
+	<Extension path = "/MonoDevelop/Refactoring/InsertionLocations">
+		<InsertionLocation id="AfterLastConstructor" class = "MonoDevelop.Projects.CodeGeneration.InsertionLocations.AfterLastConstructorInsertionLocation" />
+		<InsertionLocation id="AfterLastEvent" class = "MonoDevelop.Projects.CodeGeneration.InsertionLocations.AfterLastEventInsertionLocation" />
+		<InsertionLocation id="AfterLastField" class = "MonoDevelop.Projects.CodeGeneration.InsertionLocations.AfterLastFieldInsertionLocation" />
+		<InsertionLocation id="AfterLastMethod" class = "MonoDevelop.Projects.CodeGeneration.InsertionLocations.AfterLastMethodInsertionLocation" />
+		<InsertionLocation id="AfterLastProperty" class = "MonoDevelop.Projects.CodeGeneration.InsertionLocations.AfterLastPropertyInsertionLocation" />
+		<InsertionLocation id="CurrentPosition" class = "MonoDevelop.Projects.CodeGeneration.InsertionLocations.CurrentPositionInsertionLocation" />
+	</Extension>
 </Addin>
Index: MonoDevelop.Projects.mdp
===================================================================
--- MonoDevelop.Projects.mdp	(revision 87143)
+++ MonoDevelop.Projects.mdp	(working copy)
@@ -238,6 +238,15 @@
     <File name="./MonoDevelop.Projects.addin.xml" subtype="Code" buildaction="EmbedAsResource" />
     <File name="./MonoDevelop.Projects.Text/TextFileService.cs" subtype="Code" buildaction="Compile" />
     <File name="./MonoDevelop.Projects.Ambience/ITypeNameResolver.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Projects.CodeGeneration/EncapsulateFieldOptions.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Projects.CodeGeneration/IInsertionLocation.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Projects.Extensions/InsertionLocationCodon.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastConstructorInsertionLocation.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastPropertyInsertionLocation.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastFieldInsertionLocation.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Projects.CodeGeneration.InsertionLocations/CurrentPositionInsertionLocation.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastEventInsertionLocation.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastMethodInsertionLocation.cs" subtype="Code" buildaction="Compile" />
   </Contents>
   <References>
     <ProjectReference type="Gac" localcopy="False" refto="monodoc, Version=1.0.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756" />
Index: MonoDevelop.Projects.CodeGeneration/IInsertionLocation.cs
===================================================================
--- MonoDevelop.Projects.CodeGeneration/IInsertionLocation.cs	(revision 0)
+++ MonoDevelop.Projects.CodeGeneration/IInsertionLocation.cs	(revision 0)
@@ -0,0 +1,41 @@
+//
+// Authors:
+//   Ben Motmans  <ben.motmans@gmail.com>
+//
+// Copyright (C) 2007 Ben Motmans
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Collections;
+using System.CodeDom;
+using MonoDevelop.Projects.Text;
+using MonoDevelop.Projects.Parser;
+
+namespace MonoDevelop.Projects.CodeGeneration
+{
+	public interface IInsertionLocation
+	{
+		string Description { get; }
+		
+		int GetLocation (IRefactorer refactorer, IEditableTextFile buffer, IClass cls, CodeTypeMember member);
+	}
+}
Index: MonoDevelop.Projects.CodeGeneration/EncapsulateFieldOptions.cs
===================================================================
--- MonoDevelop.Projects.CodeGeneration/EncapsulateFieldOptions.cs	(revision 0)
+++ MonoDevelop.Projects.CodeGeneration/EncapsulateFieldOptions.cs	(revision 0)
@@ -0,0 +1,52 @@
+//
+// Authors:
+//   Ben Motmans  <ben.motmans@gmail.com>
+//
+// Copyright (C) 2007 Ben Motmans
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.CodeDom;
+
+namespace MonoDevelop.Projects.CodeGeneration
+{
+	public class EncapsulateFieldOptions
+	{
+		public bool CreateGetter = true;
+		public bool CreateSetter = true;
+		
+		public MemberAttributes Attributes = MemberAttributes.Public;
+		public MemberAttributes? GetterAttributes;
+		public MemberAttributes? SetterAttributes;
+		
+		public EncapsulateFieldOptions ()
+		{
+		}
+
+		public EncapsulateFieldOptions (bool createGetter, bool createSetter, MemberAttributes attributes)
+		{
+			CreateGetter = createGetter;
+			CreateSetter = createSetter;
+			Attributes = attributes;
+		}
+	}
+}
Index: MonoDevelop.Projects.CodeGeneration/IRefactorer.cs
===================================================================
--- MonoDevelop.Projects.CodeGeneration/IRefactorer.cs	(revision 87143)
+++ MonoDevelop.Projects.CodeGeneration/IRefactorer.cs	(working copy)
@@ -42,7 +42,7 @@
 		IClass RenameClass (RefactorerContext ctx, IClass cls, string newName);
 		MemberReferenceCollection FindClassReferences (RefactorerContext ctx, string fileName, IClass cls);
 		
-		IMember AddMember (RefactorerContext ctx, IClass cls, CodeTypeMember memberInfo);
+		IMember AddMember (RefactorerContext ctx, IClass cls, CodeTypeMember memberInfo, IInsertionLocation insertionLocation);
 		IMember ImplementMember (RefactorerContext ctx, IClass cls, string prefix, bool explicitly, IMember member, IClass declaringClass, IReturnType hintReturnType);
 		void RemoveMember (RefactorerContext ctx, IClass cls, IMember member);
 		IMember RenameMember (RefactorerContext ctx, IClass cls, IMember member, string newName);
@@ -55,8 +55,17 @@
 		bool RenameParameter (RefactorerContext ctx, IParameter param, string newName);
 		MemberReferenceCollection FindParameterReferences (RefactorerContext ctx, string fileName, IParameter param);
 		
-		IMember EncapsulateField (RefactorerContext ctx, IClass cls, IField field, string propName);
+		IMember EncapsulateField (RefactorerContext ctx, IClass cls, IField field, string propName, EncapsulateFieldOptions options, IInsertionLocation insertionLocation);
 		
+		string GetPropertyName (RefactorerContext ctx, IClass cls, IField field);
+		
+		int GetCurrentInsertionPosition (IEditableTextFile buffer, IClass cls);
+		int GetAfterLastFieldInsertionPosition (IEditableTextFile buffer, IClass cls);
+		int GetAfterLastEventInsertionPosition (IEditableTextFile buffer, IClass cls);
+		int GetAfterLastPropertyInsertionPosition (IEditableTextFile buffer, IClass cls);
+		int GetAfterLastMethodInsertionPosition (IEditableTextFile buffer, IClass cls);
+		int GetAfterLastConstructorInsertionPosition (IEditableTextFile buffer, IClass cls);
+		
 		string ConvertToLanguageTypeName (string netTypeName);
 	}
 	
Index: MonoDevelop.Projects.CodeGeneration/BaseRefactorer.cs
===================================================================
--- MonoDevelop.Projects.CodeGeneration/BaseRefactorer.cs	(revision 87143)
+++ MonoDevelop.Projects.CodeGeneration/BaseRefactorer.cs	(working copy)
@@ -28,6 +28,7 @@
 
 using System;
 using System.IO;
+using System.Text;
 using System.CodeDom;
 using System.CodeDom.Compiler;
 using Microsoft.CSharp;
@@ -79,11 +80,15 @@
 			return null;
 		}
 		
-		public virtual IMember AddMember (RefactorerContext ctx, IClass cls, CodeTypeMember member)
+		public virtual IMember AddMember (RefactorerContext ctx, IClass cls, CodeTypeMember member, IInsertionLocation insertionLocation)
 		{
 			IEditableTextFile buffer = ctx.GetFile (cls.Region.FileName);
 			
-			int pos = GetNewMemberPosition (buffer, cls, member);
+			int pos;
+			if (insertionLocation == null)
+				pos = GetNewMemberPosition (buffer, cls, member);
+			else
+				pos = insertionLocation.GetLocation (this, buffer, cls, member);
 			
 			string code = GenerateCodeFromMember (member);
 			
@@ -180,7 +185,7 @@
 			if (!explicitly)
 				m.Attributes |= MemberAttributes.Public;
 			
-			return AddMember (ctx, cls, m);
+			return AddMember (ctx, cls, m, null);
 		}
 		
 		public virtual void RemoveMember (RefactorerContext ctx, IClass cls, IMember member)
@@ -299,6 +304,35 @@
 				return null;
 		}
 		
+		public virtual string GetPropertyName (RefactorerContext ctx, IClass cls, IField field)
+		{
+			StringBuilder builder = new StringBuilder (field.Name.Length);
+			string fieldName = field.Name;
+			bool upper = true;
+			int i = 0;
+			
+			// Field names are commonly prefixed with "m" or "m_" by devs from c++ land.
+			if (fieldName[0] == 'm' && fieldName.Length > 1 &&
+			    (fieldName[1] == '_' || Char.IsUpper (fieldName[1])))
+				i++;
+			
+			while (i < fieldName.Length) {
+				if (fieldName[i] == '_') {
+					// strip _'s and uppercase the next letter
+					upper = true;
+				} else if (Char.IsLetter (fieldName[i])) {
+					builder.Append (upper ? Char.ToUpper (fieldName[i]) : fieldName[i]);
+					upper = false;
+				} else {
+					builder.Append (fieldName[i]);
+				}
+				
+				i++;
+			}
+			
+			return builder.ToString ();
+		}
+		
 		///
 		/// EncapsulateFieldImpGetSet:
 		///
@@ -309,7 +343,7 @@
 			
 		}
 		
-		public virtual IMember EncapsulateField (RefactorerContext ctx, IClass cls, IField field, string propName)
+		public virtual IMember EncapsulateField (RefactorerContext ctx, IClass cls, IField field, string propName, EncapsulateFieldOptions options, IInsertionLocation insertionLocation)
 		{
 			// If the field isn't already private/protected/internal, we'll need to fix it to be
 			if (true || field.IsPublic || (!field.IsPrivate && !field.IsProtectedOrInternal)) {
@@ -358,18 +392,16 @@
 			prop.Name = propName;
 			
 			prop.Type = ReturnTypeToDom (field.ReturnType, null, null);
-			prop.Attributes = MemberAttributes.Public | MemberAttributes.Final;
+			prop.HasGet = options.CreateGetter;
+			prop.HasSet = options.CreateSetter;
+			
+			prop.Attributes = MemberAttributes.Final | options.Attributes;
 			if (field.IsStatic)
 				prop.Attributes |= MemberAttributes.Static;
-			
-			prop.HasGet = true;
-			
-			// if the field was public before, then we provide a 'set', else we don't
-			prop.HasSet = (field.IsPublic || (!field.IsPrivate && !field.IsProtectedOrInternal));
-			
+
 			EncapsulateFieldImpGetSet (ctx, cls, field, prop);
 			
-			return AddMember (ctx, cls, prop);
+			return AddMember (ctx, cls, prop, insertionLocation);
 		}
 		
 
@@ -564,9 +596,29 @@
 			return RemoveIndent (code);
 		}
 		
-
-		/// Helper methods ////////////////////////////
-
+		protected virtual int GetNewMemberPosition (IEditableTextFile buffer, IClass cls, CodeTypeMember member)
+		{
+			if (member is CodeMemberField)
+				return GetAfterLastFieldInsertionPosition (buffer, cls);
+			else if (member is CodeMemberMethod)
+				return GetAfterLastMethodInsertionPosition (buffer, cls);
+			else if (member is CodeMemberEvent)
+				return GetAfterLastEventInsertionPosition (buffer, cls);
+			else if (member is CodeMemberProperty)
+				return GetAfterLastPropertyInsertionPosition (buffer, cls);
+			else
+				throw new InvalidOperationException ("Invalid member type: " + member);
+		}
+		
+		protected virtual CodeGeneratorOptions GetOptions (bool isMethod)
+		{
+			CodeGeneratorOptions ops = new CodeGeneratorOptions ();
+			ops.IndentString = "\t";
+			if (isMethod)
+				ops.BracingStyle = "C";
+			return ops;
+		}
+		
 		// Returns a reparsed IClass instance that contains the generated code.
 		protected IClass GetGeneratedClass (RefactorerContext ctx, IEditableTextFile buffer, IClass cls)
 		{
@@ -653,33 +705,24 @@
 				return code;
 		}
 		
-		protected virtual int GetNewMemberPosition (IEditableTextFile buffer, IClass cls, CodeTypeMember member)
+		public virtual int GetCurrentInsertionPosition (IEditableTextFile buffer, IClass cls)
 		{
-			if (member is CodeMemberField)
-				return GetNewFieldPosition (buffer, cls);
-			else if (member is CodeMemberMethod)
-				return GetNewMethodPosition (buffer, cls);
-			else if (member is CodeMemberEvent)
-				return GetNewEventPosition (buffer, cls);
-			else if (member is CodeMemberProperty)
-				return GetNewPropertyPosition (buffer, cls);
-			else
-				throw new InvalidOperationException ("Invalid member type: " + member);
+			int sp = buffer.GetPositionFromLineColumn (cls.BodyRegion.BeginLine, cls.BodyRegion.BeginColumn);
+			int ep = buffer.GetPositionFromLineColumn (cls.BodyRegion.EndLine, cls.BodyRegion.EndColumn);
+			string s = buffer.GetText (sp, ep);
+			int i = s.IndexOf ('{');
+			if (i == -1) return -1;
+			i++;
+			int pos = GetNextLine (buffer, sp + i);
+			string ind = GetLineIndent (buffer, cls.BodyRegion.BeginLine);
+			buffer.InsertText (pos, ind + "\t" + Environment.NewLine);
+			return pos + ind.Length + 1;
 		}
 		
-		protected virtual int GetNewFieldPosition (IEditableTextFile buffer, IClass cls)
+		public virtual int GetAfterLastFieldInsertionPosition (IEditableTextFile buffer, IClass cls)
 		{
 			if (cls.Fields.Count == 0) {
-				int sp = buffer.GetPositionFromLineColumn (cls.BodyRegion.BeginLine, cls.BodyRegion.BeginColumn);
-				int ep = buffer.GetPositionFromLineColumn (cls.BodyRegion.EndLine, cls.BodyRegion.EndColumn);
-				string s = buffer.GetText (sp, ep);
-				int i = s.IndexOf ('{');
-				if (i == -1) return -1;
-				i++;
-				int pos = GetNextLine (buffer, sp + i);
-				string ind = GetLineIndent (buffer, cls.BodyRegion.BeginLine);
-				buffer.InsertText (pos, ind + "\t\n");
-				return pos + ind.Length + 1;
+				return GetCurrentInsertionPosition (buffer, cls);
 			} else {
 				IField f = cls.Fields [cls.Fields.Count - 1];
 				int pos = buffer.GetPositionFromLineColumn (f.Region.EndLine, f.Region.EndColumn);
@@ -690,10 +733,10 @@
 			}
 		}
 		
-		protected virtual int GetNewMethodPosition (IEditableTextFile buffer, IClass cls)
+		public virtual int GetAfterLastEventInsertionPosition (IEditableTextFile buffer, IClass cls)
 		{
-			if (cls.Methods.Count == 0) {
-				int pos = GetNewPropertyPosition (buffer, cls);
+			if (cls.Events.Count == 0) {
+				int pos = GetAfterLastMethodInsertionPosition (buffer, cls);
 				int line, col;
 				buffer.GetLineColumnFromPosition (pos, out line, out col);
 				string ind = GetLineIndent (buffer, line);
@@ -701,16 +744,8 @@
 				buffer.InsertText (pos, ind);
 				return pos + ind.Length;
 			} else {
-				IMethod m = cls.Methods [cls.Methods.Count - 1];
-				
-				int pos;
-				if (m.BodyRegion != null && m.BodyRegion.EndLine > 0) {
-					pos = buffer.GetPositionFromLineColumn (m.BodyRegion.EndLine, m.BodyRegion.EndColumn);
-				} else {
-					// Abstract or P/Inboke methods don't have a body
-					pos = buffer.GetPositionFromLineColumn (m.Region.EndLine, m.Region.EndColumn);
-				}
-				
+				IEvent m = cls.Events [cls.Events.Count - 1];
+				int pos = buffer.GetPositionFromLineColumn (m.BodyRegion.EndLine, m.BodyRegion.EndColumn);
 				pos = GetNextLine (buffer, pos);
 				pos = GetNextLine (buffer, pos);
 				string ind = GetLineIndent (buffer, m.Region.EndLine);
@@ -719,10 +754,10 @@
 			}
 		}
 		
-		protected virtual int GetNewPropertyPosition (IEditableTextFile buffer, IClass cls)
+		public virtual int GetAfterLastPropertyInsertionPosition (IEditableTextFile buffer, IClass cls)
 		{
 			if (cls.Properties.Count == 0) {
-				int pos = GetNewFieldPosition (buffer, cls);
+				int pos = GetAfterLastFieldInsertionPosition (buffer, cls);
 				int line, col;
 				buffer.GetLineColumnFromPosition (pos, out line, out col);
 				string indent = GetLineIndent (buffer, line);
@@ -740,10 +775,27 @@
 			}
 		}
 		
-		protected virtual int GetNewEventPosition (IEditableTextFile buffer, IClass cls)
+		public virtual int GetAfterLastMethodInsertionPosition (IEditableTextFile buffer, IClass cls)
 		{
-			if (cls.Events.Count == 0) {
-				int pos = GetNewMethodPosition (buffer, cls);
+			IMethod m = GetLastMethods (cls, false);
+			return GetAfterMethodInsertionPosition (buffer, cls, m);
+		}
+		
+		protected virtual IMethod GetLastMethods (IClass cls, bool ctor)
+		{
+			int count = cls.Methods.Count;
+			while (--count >= 0) {
+				IMethod m = cls.Methods[count];
+				if (m.IsConstructor == ctor)
+					return m;
+			}
+			return null;
+		}
+		
+		protected virtual int GetAfterMethodInsertionPosition (IEditableTextFile buffer, IClass cls, IMethod m)
+		{
+			if (m == null) {
+				int pos = GetAfterLastPropertyInsertionPosition (buffer, cls);
 				int line, col;
 				buffer.GetLineColumnFromPosition (pos, out line, out col);
 				string ind = GetLineIndent (buffer, line);
@@ -751,8 +803,14 @@
 				buffer.InsertText (pos, ind);
 				return pos + ind.Length;
 			} else {
-				IEvent m = cls.Events [cls.Events.Count - 1];
-				int pos = buffer.GetPositionFromLineColumn (m.BodyRegion.EndLine, m.BodyRegion.EndColumn);
+				int pos;
+				if (m.BodyRegion != null && m.BodyRegion.EndLine > 0) {
+					pos = buffer.GetPositionFromLineColumn (m.BodyRegion.EndLine, m.BodyRegion.EndColumn);
+				} else {
+					// Abstract or P/Inboke methods don't have a body
+					pos = buffer.GetPositionFromLineColumn (m.Region.EndLine, m.Region.EndColumn);
+				}
+				
 				pos = GetNextLine (buffer, pos);
 				pos = GetNextLine (buffer, pos);
 				string ind = GetLineIndent (buffer, m.Region.EndLine);
@@ -761,6 +819,12 @@
 			}
 		}
 		
+		public virtual int GetAfterLastConstructorInsertionPosition (IEditableTextFile buffer, IClass cls)
+		{
+			IMethod m = GetLastMethods (cls, true);
+			return GetAfterMethodInsertionPosition (buffer, cls, m);
+		}
+		
 		protected virtual int GetNextLine (IEditableTextFile buffer, int pos)
 		{
 			while (pos < buffer.Length) {
@@ -789,14 +853,5 @@
 			}
 			return buffer.GetText (ipos, pos);
 		}
-		
-		protected virtual CodeGeneratorOptions GetOptions (bool isMethod)
-		{
-			CodeGeneratorOptions ops = new CodeGeneratorOptions ();
-			ops.IndentString = "\t";
-			if (isMethod)
-				ops.BracingStyle = "C";
-			return ops;
-		}
 	}
 }
Index: MonoDevelop.Projects.CodeGeneration/CodeRefactorer.cs
===================================================================
--- MonoDevelop.Projects.CodeGeneration/CodeRefactorer.cs	(revision 87143)
+++ MonoDevelop.Projects.CodeGeneration/CodeRefactorer.cs	(working copy)
@@ -102,9 +102,14 @@
 		
 		public IMember AddMember (IClass cls, CodeTypeMember member)
 		{
+			return AddMember (cls, member, null);
+		}
+		
+		public IMember AddMember (IClass cls, CodeTypeMember member, IInsertionLocation insertionLocation)
+		{
 			RefactorerContext gctx = GetGeneratorContext (cls);
 			IRefactorer gen = GetGeneratorForClass (cls);
-			IMember m = gen.AddMember (gctx, cls, member);
+			IMember m = gen.AddMember (gctx, cls, member, insertionLocation);
 			gctx.Save ();
 			return m;
 		}
@@ -365,8 +370,13 @@
 			}
 		}
 		
-		public IMember EncapsulateField (IProgressMonitor monitor, IClass cls, IField field, string propName, bool updateInternalRefs)
+		public IMember EncapsulateField (IProgressMonitor monitor, IClass cls, IField field, string propName, bool updateInternalRefs, EncapsulateFieldOptions options)
 		{
+			return EncapsulateField (monitor, cls, field, propName, updateInternalRefs, options, null);
+		}
+		
+		public IMember EncapsulateField (IProgressMonitor monitor, IClass cls, IField field, string propName, bool updateInternalRefs, EncapsulateFieldOptions options, IInsertionLocation insertionLocation)
+		{
 			RefactoryScope scope;
 			
 			if (field.IsPrivate || (!field.IsProtectedOrInternal && !field.IsPublic))
@@ -410,7 +420,7 @@
 			
 			RefactorerContext gctx = GetGeneratorContext (cls);
 			IRefactorer r = GetGeneratorForClass (cls);
-			IMember m = r.EncapsulateField (gctx, cls, field, propName);
+			IMember m = r.EncapsulateField (gctx, cls, field, propName, options, insertionLocation);
 			gctx.Save ();
 			
 			return m;
@@ -438,6 +448,14 @@
 			return (IClass[]) list.ToArray (typeof(IClass));
 		}
 		
+		public string GetPropertyName (IField field)
+		{
+			IClass cls = field.DeclaringType;
+			RefactorerContext ctx = GetGeneratorContext (cls);
+			IRefactorer r = GetGeneratorForClass (cls);
+			return r.GetPropertyName (ctx, cls, field);
+		}
+		
 		bool IsSubclass (IParserContext ctx, IClass baseClass, IClass subclass)
 		{
 			foreach (IReturnType clsName in subclass.BaseTypes)
Index: Makefile.am
===================================================================
--- Makefile.am	(revision 87143)
+++ Makefile.am	(working copy)
@@ -20,14 +20,23 @@
 	MonoDevelop.Projects.Ambience/ConversionFlags.cs \
 	MonoDevelop.Projects.Ambience/ITypeNameResolver.cs \
 	MonoDevelop.Projects.Ambience/NetAmbience.cs \
+	MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastConstructorInsertionLocation.cs \
+	MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastEventInsertionLocation.cs \
+	MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastFieldInsertionLocation.cs \
+	MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastMethodInsertionLocation.cs \
+	MonoDevelop.Projects.CodeGeneration.InsertionLocations/AfterLastPropertyInsertionLocation.cs \
+	MonoDevelop.Projects.CodeGeneration.InsertionLocations/CurrentPositionInsertionLocation.cs \
 	MonoDevelop.Projects.CodeGeneration/BaseRefactorer.cs \
 	MonoDevelop.Projects.CodeGeneration/CodeRefactorer.cs \
+	MonoDevelop.Projects.CodeGeneration/EncapsulateFieldOptions.cs \
+	MonoDevelop.Projects.CodeGeneration/IInsertionLocation.cs \
 	MonoDevelop.Projects.CodeGeneration/IRefactorer.cs \
 	MonoDevelop.Projects.CodeGeneration/RefactorerContext.cs \
 	MonoDevelop.Projects.CodeGeneration/RefactorOperations.cs \
 	MonoDevelop.Projects.CodeGeneration/XmlCodeDomReader.cs \
 	MonoDevelop.Projects.Documentation/IDocumentationService.cs \
 	MonoDevelop.Projects.Extensions/DataTypeCodon.cs \
+	MonoDevelop.Projects.Extensions/InsertionLocationCodon.cs \
 	MonoDevelop.Projects.Extensions/ItemPropertyCodon.cs \
 	MonoDevelop.Projects.Extensions/LanguageBindingCodon.cs \
 	MonoDevelop.Projects.Extensions/ProjectBindingCodon.cs \
Index: MonoDevelop.Projects.Extensions/InsertionLocationCodon.cs
===================================================================
--- MonoDevelop.Projects.Extensions/InsertionLocationCodon.cs	(revision 0)
+++ MonoDevelop.Projects.Extensions/InsertionLocationCodon.cs	(revision 0)
@@ -0,0 +1,40 @@
+//
+// Authors:
+//   Ben Motmans  <ben.motmans@gmail.com>
+//
+// Copyright (C) 2007 Ben Motmans
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using Mono.Addins;
+using MonoDevelop.Projects.CodeGeneration;
+
+namespace MonoDevelop.Projects.Extensions
+{
+	[ExtensionNode (Description="An insertion location used by the refactorer. The specified class must implement MonoDevelop.Projects.CodeGeneration.IInsertionLocation.")]
+	public class InsertionLocationCodon : TypeExtensionNode
+	{
+		public IInsertionLocation InsertionLocation {
+			get { return (IInsertionLocation) base.GetInstance (); }
+		}
+	}
+}