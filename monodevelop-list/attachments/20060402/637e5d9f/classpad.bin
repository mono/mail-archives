Index: ChangeLog
===================================================================
--- ChangeLog	(revision 58886)
+++ ChangeLog	(working copy)
@@ -1,3 +1,14 @@
+2006-04-02 Philip Turnbull <Philip.Turnbull@gmail.com>
+	* MonoDevelop.Ide.Gui.Pads.ClassPad/MonoDevelop.Ide.addin.xml: Added 'Group
+	types' option to ClassPad.
+	* MonoDevelop.Ide.Gui.Pads.ClassPad/ClassNodeBuilder.cs:
+	* MonoDevelop.Ide.Gui.Pads.ClassPad/FieldNodeBuilder.cs:
+	* MonoDevelop.Ide.Gui.Pads.ClassPad/MemberNodeBuilder.cs:
+	* MonoDevelop.Ide.Gui.Pads.ClassPad/MethodNodeBuilder.cs:
+	* MonoDevelop.Ide.Gui.Pads.ClassPad/PropertyNodeBuilder.cs:
+	Added various formatting for methods, constructors, fields, events,
+	properties and delegates.
+	
 2006-03-31 Lluis Sanchez Gual  <lluis@novell.com>   
 
 	* MonoDevelop.Ide.addin.xml: Break compatibility
Index: MonoDevelop.Ide.Gui.Pads.ClassPad/MethodNodeBuilder.cs
===================================================================
--- MonoDevelop.Ide.Gui.Pads.ClassPad/MethodNodeBuilder.cs	(revision 58886)
+++ MonoDevelop.Ide.Gui.Pads.ClassPad/MethodNodeBuilder.cs	(working copy)
@@ -1,8 +1,9 @@
 //
 // MethodNodeBuilder.cs
 //
-// Author:
+// Authors:
 //   Lluis Sanchez Gual
+//   Philip Turnbull
 //
 // Copyright (C) 2005 Novell, Inc (http://www.novell.com)
 //
@@ -28,6 +29,7 @@
 
 using System;
 using System.Collections;
+using System.Text;
 
 using MonoDevelop.Projects;
 using MonoDevelop.Core;
@@ -45,8 +47,44 @@
 		public override void BuildNode (ITreeBuilder treeBuilder, object dataObject, ref string label, ref Gdk.Pixbuf icon, ref Gdk.Pixbuf closedIcon)
 		{
 			IMethod data = dataObject as IMethod;
-			label = data.Name;
+			label = FormatMethod (treeBuilder, data);
 			icon = Context.GetIcon (Services.Icons.GetIcon (data));
 		}
+		
+		public static string FormatMethod(ITreeBuilder treeBuilder, IMethod method)
+		{
+			StringBuilder labelBuilder = new StringBuilder ();
+			if (method.IsConstructor)
+				labelBuilder.Append (method.DeclaringType.Name);
+			else if (method.DeclaringType.ClassType == ClassType.Delegate && method.Name == "Invoke")
+				labelBuilder.Append (method.DeclaringType.Name);
+			else
+				labelBuilder.Append (method.Name);
+				
+			labelBuilder.Append ("(");
+			
+			if (method.Parameters.Count > 0) {
+				int i = 0;
+				for (;i < method.Parameters.Count - 1; i++) {
+					labelBuilder.Append (method.Parameters[i].ReturnType.Name);
+					labelBuilder.Append (" ");
+					labelBuilder.Append (method.Parameters[i].Name);
+					labelBuilder.Append (", ");
+				}
+				
+				labelBuilder.Append (method.Parameters[i].ReturnType.Name);
+				labelBuilder.Append (" ");
+				labelBuilder.Append (method.Parameters[i].Name);
+			}
+			
+			labelBuilder.Append (")");
+			
+			if (!method.IsConstructor) {
+				labelBuilder.Append (" : ");
+				labelBuilder.Append (method.ReturnType.Name);
+			}
+			
+			return labelBuilder.ToString ();
+		}
 	}
 }
Index: MonoDevelop.Ide.Gui.Pads.ClassPad/EventNodeBuilder.cs
===================================================================
--- MonoDevelop.Ide.Gui.Pads.ClassPad/EventNodeBuilder.cs	(revision 58886)
+++ MonoDevelop.Ide.Gui.Pads.ClassPad/EventNodeBuilder.cs	(working copy)
@@ -1,8 +1,9 @@
 //
 // EventNodeBuilder.cs
 //
-// Author:
+// Authors:
 //   Lluis Sanchez Gual
+//   Philip Turnbull
 //
 // Copyright (C) 2005 Novell, Inc (http://www.novell.com)
 //
@@ -28,6 +29,7 @@
 
 using System;
 using System.Collections;
+using System.Text;
 
 using MonoDevelop.Projects;
 using MonoDevelop.Core;
@@ -45,16 +47,12 @@
 		public override void BuildNode (ITreeBuilder treeBuilder, object dataObject, ref string label, ref Gdk.Pixbuf icon, ref Gdk.Pixbuf closedIcon)
 		{
 			IEvent data = dataObject as IEvent;
-			label = data.Name;
+			StringBuilder labelBuilder = new StringBuilder ();
+			labelBuilder.Append (data.Name);
+			labelBuilder.Append (" : ");
+			labelBuilder.Append (data.ReturnType.Name);
+			label = labelBuilder.ToString ();
 			icon = Context.GetIcon (Services.Icons.GetIcon (data));
 		}
-
-		public override int CompareObjects (ITreeNavigator thisNode, ITreeNavigator otherNode)
-		{
-			if (thisNode.Options ["GroupByType"]) {
-			
-			}
-			return DefaultSort;
-		}
 	}
 }
Index: MonoDevelop.Ide.Gui.Pads.ClassPad/FieldNodeBuilder.cs
===================================================================
--- MonoDevelop.Ide.Gui.Pads.ClassPad/FieldNodeBuilder.cs	(revision 58886)
+++ MonoDevelop.Ide.Gui.Pads.ClassPad/FieldNodeBuilder.cs	(working copy)
@@ -1,8 +1,9 @@
 //
 // FieldNodeBuilder.cs
 //
-// Author:
+// Authors:
 //   Lluis Sanchez Gual
+//   Philip Turnbull
 //
 // Copyright (C) 2005 Novell, Inc (http://www.novell.com)
 //
@@ -28,6 +29,7 @@
 
 using System;
 using System.Collections;
+using System.Text;
 
 using MonoDevelop.Projects;
 using MonoDevelop.Core;
@@ -45,7 +47,20 @@
 		public override void BuildNode (ITreeBuilder treeBuilder, object dataObject, ref string label, ref Gdk.Pixbuf icon, ref Gdk.Pixbuf closedIcon)
 		{
 			IField data = dataObject as IField;
-			label = data.Name;
+			
+			if (data.ReturnType != null) {
+				StringBuilder labelBuilder = new StringBuilder ();
+				
+				labelBuilder.Append (data.Name);
+				labelBuilder.Append (" : ");
+				labelBuilder.Append (data.ReturnType.Name);
+				
+				label = labelBuilder.ToString ();
+			} else {
+				Console.WriteLine (dataObject.GetType().Name);
+				label = data.Name;
+			}
+			
 			icon = Context.GetIcon (Services.Icons.GetIcon (data));
 		}
 	}
Index: MonoDevelop.Ide.Gui.Pads.ClassPad/PropertyNodeBuilder.cs
===================================================================
--- MonoDevelop.Ide.Gui.Pads.ClassPad/PropertyNodeBuilder.cs	(revision 58886)
+++ MonoDevelop.Ide.Gui.Pads.ClassPad/PropertyNodeBuilder.cs	(working copy)
@@ -1,8 +1,9 @@
 //
 // PropertyNodeBuilder.cs
 //
-// Author:
+// Authors:
 //   Lluis Sanchez Gual
+//   Philip Turnbull
 //
 // Copyright (C) 2005 Novell, Inc (http://www.novell.com)
 //
@@ -28,6 +29,7 @@
 
 using System;
 using System.Collections;
+using System.Text;
 
 using MonoDevelop.Projects;
 using MonoDevelop.Core;
@@ -45,7 +47,20 @@
 		public override void BuildNode (ITreeBuilder treeBuilder, object dataObject, ref string label, ref Gdk.Pixbuf icon, ref Gdk.Pixbuf closedIcon)
 		{
 			IProperty data = dataObject as IProperty;
-			label = data.Name;
+			StringBuilder labelBuilder = new StringBuilder ();
+			
+			labelBuilder.Append (data.Name);
+			labelBuilder.Append (" : ");
+			labelBuilder.Append (data.ReturnType.Name);
+			
+			if (data.CanGet && data.CanSet)
+				labelBuilder.Append (" { get; set; }");
+			else if (data.CanGet && !data.CanSet)
+				labelBuilder.Append (" { get; }");
+			else
+				labelBuilder.Append (" { set; }");
+				
+			label = labelBuilder.ToString ();
 			icon = Context.GetIcon (Services.Icons.GetIcon (data));
 		}
 	}
Index: MonoDevelop.Ide.Gui.Pads.ClassPad/ClassNodeBuilder.cs
===================================================================
--- MonoDevelop.Ide.Gui.Pads.ClassPad/ClassNodeBuilder.cs	(revision 58886)
+++ MonoDevelop.Ide.Gui.Pads.ClassPad/ClassNodeBuilder.cs	(working copy)
@@ -1,8 +1,9 @@
 //
 // ClassNodeBuilder.cs
 //
-// Author:
+// Authors:
 //   Lluis Sanchez Gual
+//   Philip Turnbull	
 //
 // Copyright (C) 2005 Novell, Inc (http://www.novell.com)
 //
@@ -28,6 +29,7 @@
 
 using System;
 using System.Collections;
+using System.Text;
 
 using MonoDevelop.Projects;
 using MonoDevelop.Core;
@@ -55,7 +57,14 @@
 		public override void BuildNode (ITreeBuilder treeBuilder, object dataObject, ref string label, ref Gdk.Pixbuf icon, ref Gdk.Pixbuf closedIcon)
 		{
 			ClassData classData = dataObject as ClassData;
-			label = classData.Class.Name;
+			
+			if (classData.Class.ClassType == ClassType.Delegate) {		
+				foreach (IMethod method in classData.Class.Methods)
+					if (method.Name == "Invoke")
+						label = MethodNodeBuilder.FormatMethod (treeBuilder, method);
+			} else {
+				label = classData.Class.Name;
+			}
 			icon = Context.GetIcon (Services.Icons.GetIcon (classData.Class));
 		}
 
@@ -92,6 +101,10 @@
 		public override bool HasChildNodes (ITreeBuilder builder, object dataObject)
 		{
 			ClassData classData = dataObject as ClassData;
+			
+			if (classData.Class.ClassType == ClassType.Delegate)
+				return false;
+			
 			return 	classData.Class.InnerClasses.Count > 0 ||
 					classData.Class.Methods.Count > 0 ||
 					classData.Class.Properties.Count > 0 ||
@@ -101,11 +114,29 @@
 		
 		public override int CompareObjects (ITreeNavigator thisNode, ITreeNavigator otherNode)
 		{
-			if (thisNode.DataItem is ClassData)
-				return DefaultSort;
-			else
-				return 1;
+			if (!(otherNode.DataItem is ClassData)) return 1;
+			
+			if (thisNode.Options ["GroupTypes"]) {
+				int v1 = GetTypeSortValue ((ClassData)thisNode.DataItem);
+				int v2 = GetTypeSortValue ((ClassData)otherNode.DataItem);
+				if (v1 < v2) return -1;
+				else if (v1 > v2) return 1;
+			}
+
+			return DefaultSort;
 		}
+		
+		int GetTypeSortValue (ClassData data)
+		{
+			IClass cls = data.Class;
+			if (cls.ClassType == ClassType.Class) return 0;
+			if (cls.ClassType == ClassType.Interface) return 1;
+			if (cls.ClassType == ClassType.Struct) return 2;
+			if (cls.ClassType == ClassType.Enum) return 3;
+			if (cls.ClassType == ClassType.Delegate) return 4;
+		
+			return 5;
+		}
 	}
 	
 	public class ClassNodeCommandHandler: NodeCommandHandler
Index: MonoDevelop.Ide.Gui.Pads.ClassPad/MemberNodeBuilder.cs
===================================================================
--- MonoDevelop.Ide.Gui.Pads.ClassPad/MemberNodeBuilder.cs	(revision 58886)
+++ MonoDevelop.Ide.Gui.Pads.ClassPad/MemberNodeBuilder.cs	(working copy)
@@ -1,8 +1,9 @@
 //
 // MemberNodeBuilder.cs
 //
-// Author:
+// Authors:
 //   Lluis Sanchez Gual
+//   Philip Turnbull
 //
 // Copyright (C) 2005 Novell, Inc (http://www.novell.com)
 //
@@ -67,11 +68,12 @@
 		
 		int GetTypeSortValue (object member)
 		{
-			if (member is IField) return 0;
-			if (member is IEvent) return 1;
-			if (member is IProperty) return 2;
-			if (member is IMethod) return 3;
-			return 4;
+			if (member is IMethod && (member as IMethod).IsConstructor) return 0; 
+			if (member is IField) return 1;
+			if (member is IEvent) return 2;
+			if (member is IProperty) return 3;
+			if (member is IMethod) return 4;
+			return 5;
 		}
 		
 		int GetAccessSortValue (ModifierEnum mods)
Index: MonoDevelop.Ide.addin.xml
===================================================================
--- MonoDevelop.Ide.addin.xml	(revision 58886)
+++ MonoDevelop.Ide.addin.xml	(working copy)
@@ -618,6 +618,7 @@
 		<SolutionPad id = "MonoDevelop.Ide.Gui.Pads.ClassPad" defaultPlacement = "Left" _label = "Classes" icon = "md-class">
 			<PadOption id = "NestedNamespaces" _label = "Nested namespaces" defaultValue = "True" />
 			<PadOption id = "ShowProjects" _label = "Show project structure" defaultValue = "True" />
+			<PadOption id = "GroupTypes" _label = "Group types" defaultValue = "False" />
 			<PadOption id = "GroupByAccess" _label = "Group members by access" defaultValue = "False" />
 			<PadOption id = "GroupByType" _label = "Group members by member type" defaultValue = "True" />
 			<PadOption id = "PublicApiOnly" _label = "Show public members only" defaultValue = "False" />