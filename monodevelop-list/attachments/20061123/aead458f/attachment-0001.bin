Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/ViewCommands.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/ViewCommands.cs	(revision 68418)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/ViewCommands.cs	(working copy)
@@ -34,6 +34,7 @@
 		ResetTreeDisplayOptions,
 		RefreshTree,
 		CollapseAllTreeNodes,
+		LayoutSelector,
 	}
 	
 	internal class FullScreenHandler: CommandHandler
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.addin.xml
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.addin.xml	(revision 68418)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.addin.xml	(working copy)
@@ -339,10 +339,19 @@
 				_label = "Layout List" />
 		<Command id = "MonoDevelop.Ide.Commands.ViewCommands.NewLayout"
 				defaultHandler = "MonoDevelop.Ide.Commands.NewLayoutHandler"
-				_label = "_New Layout..." />
+				_label = "_New Layout..."
+				icon = "gtk-add"
+				description = "Create new layout" />
 		<Command id = "MonoDevelop.Ide.Commands.ViewCommands.DeleteCurrentLayout"
 				defaultHandler = "MonoDevelop.Ide.Commands.DeleteCurrentLayoutHandler"
-				_label = "_Delete Current Layout" />
+				_label = "_Delete Current Layout"
+				icon = "gtk-remove"
+				description = "Delete Current layout" />
+		<Command id = "MonoDevelop.Ide.Commands.ViewCommands.LayoutSelector"
+				type = "custom"
+				widget = "MonoDevelop.Ide.Gui.LayoutComboBox"
+				_label = "Active Layout"
+				description = "Switch Active Layout" />
 		<Command id = "MonoDevelop.Ide.Commands.ViewCommands.FullScreen"
 				defaultHandler = "MonoDevelop.Ide.Commands.FullScreenHandler"
 				_label = "_Full Screen" 
@@ -772,6 +781,11 @@
 			<CommandItem id = "MonoDevelop.Ide.Commands.ProjectCommands.Run" />
 			<CommandItem id = "MonoDevelop.Ide.Commands.ProjectCommands.Stop" />
 		</ItemSet>
+		<ItemSet id = "Layout" _label = "Layout">
+			<CommandItem id = "MonoDevelop.Ide.Commands.ViewCommands.LayoutSelector" />
+			<CommandItem id = "MonoDevelop.Ide.Commands.ViewCommands.NewLayout" />
+			<CommandItem id = "MonoDevelop.Ide.Commands.ViewCommands.DeleteCurrentLayout" />
+		</ItemSet>
 	</Extension>
 
 	<!-- Main Menu -->
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.mdp
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.mdp	(revision 68418)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.mdp	(working copy)
@@ -261,6 +261,7 @@
     <File name="./MonoDevelop.Ide.Gui.Pads.ProjectPad/LinkedFilesFolder.cs" subtype="Code" buildaction="Compile" />
     <File name="./MonoDevelop.Ide.Gui.Pads.ProjectPad/LinkedFilesFolderNodeBuilder.cs" subtype="Code" buildaction="Compile" />
     <File name="./icons/Icons.16x16.LinkOverlay.png" subtype="Code" buildaction="EmbedAsResource" />
+    <File name="./MonoDevelop.Ide.Gui/LayoutComboBox.cs" subtype="Code" buildaction="Compile" />
   </Contents>
   <References>
     <ProjectReference type="Project" localcopy="True" refto="MonoDevelop.Core" />
Index: Core/src/MonoDevelop.Ide/Makefile.am
===================================================================
--- Core/src/MonoDevelop.Ide/Makefile.am	(revision 68418)
+++ Core/src/MonoDevelop.Ide/Makefile.am	(working copy)
@@ -96,6 +96,7 @@
 MonoDevelop.Ide.Gui/ViewCommandHandlers.cs \
 MonoDevelop.Ide.Gui/ViewContentCollection.cs \
 MonoDevelop.Ide.Gui/WorkbenchWindowCollection.cs \
+MonoDevelop.Ide.Gui/LayoutComboBox.cs \
 MonoDevelop.Ide.Gui.BrowserDisplayBinding/BrowserDisplayBinding.cs \
 MonoDevelop.Ide.Gui.BrowserDisplayBinding/HtmlViewPane.cs \
 MonoDevelop.Ide.Gui.Content/IBookmarkBuffer.cs \
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/LayoutComboBox.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/LayoutComboBox.cs	(revision 0)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/LayoutComboBox.cs	(revision 0)
@@ -0,0 +1,77 @@
+//
+// LayoutComboBox.cs
+//
+// Author:
+//   David Makovský <yakeen@sannyas-on.net>
+//
+// Copyright (C) 2006 David Makovský
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using MonoDevelop.Ide;
+using Gtk;
+
+namespace MonoDevelop.Ide.Gui
+{
+	internal class LayoutComboBox : Alignment
+	{
+		ComboBox combo;
+		bool changingHere = false;
+	
+		public LayoutComboBox ()
+			: base (0.5f, 0.5f, 1.0f, 0f)
+		{
+			LeftPadding = 3;
+			RightPadding = 3;
+			combo = Gtk.ComboBox.NewText ();
+			combo.Changed += new EventHandler (OnComboChanged);
+			Add (combo);
+			ShowAll ();
+			
+			IdeApp.Workbench.LayoutChanged += (EventHandler) Services.DispatchService.GuiDispatch (new EventHandler (OnConfigurationsChanged));
+		}
+		
+		void OnConfigurationsChanged (object sender, EventArgs e)
+		{
+			((Gtk.ListStore)combo.Model).Clear ();
+			//combo.Sensitive = true;
+			int active = 0;
+			Console.WriteLine ("\n\nLayoutComboBox.OnConfigurationsChanged, Layouts: {0}\n\n", IdeApp.Workbench.Layouts.Length);
+			for (int i = 0; i < IdeApp.Workbench.Layouts.Length; i++)
+			{
+				combo.AppendText (IdeApp.Workbench.Layouts[i]);
+				if (IdeApp.Workbench.Layouts[i] == IdeApp.Workbench.CurrentLayout)
+					active = i;
+			}
+			changingHere = true;
+			combo.Active = active;
+			combo.ShowAll ();
+		}
+		
+		void OnComboChanged (object sender, EventArgs e)
+		{
+			if (! changingHere)
+				IdeApp.Workbench.CurrentLayout = combo.ActiveText;
+			changingHere = false;
+		}
+	}
+}
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/Workbench.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/Workbench.cs	(revision 68418)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/Workbench.cs	(working copy)
@@ -56,6 +56,7 @@
 		IStatusBarService statusBarService;
 		
 		public event EventHandler ActiveDocumentChanged;
+		public event EventHandler LayoutChanged;
 		
 		internal void Initialize (IProgressMonitor monitor)
 		{
@@ -109,6 +110,11 @@
 			workbench.SetMemento ((IXmlConvertable)Runtime.Properties.GetProperty (workbenchMemento, workbench.CreateMemento()));
 			RootWindow.Visible = true;
 			workbench.Context = WorkbenchContext.Edit;
+			
+			// now we have an layout set notify it
+			if (LayoutChanged != null)
+				LayoutChanged (this, EventArgs.Empty);
+
 			workbench.RedrawAllComponents ();
 			RootWindow.Present ();
 		}
@@ -168,7 +174,11 @@
 			get { return workbench.WorkbenchLayout != null ? workbench.WorkbenchLayout.CurrentLayout : ""; }
 			set {
 				if (value != workbench.WorkbenchLayout.CurrentLayout)
-					workbench.WorkbenchLayout.CurrentLayout = value; 
+				{
+					workbench.WorkbenchLayout.CurrentLayout = value;
+					if (LayoutChanged != null)
+						LayoutChanged (this, EventArgs.Empty);
+				}
 			}
 		}
 
