Index: Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns/AddInTreeSingleton.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns/AddInTreeSingleton.cs	(revision 58163)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns/AddInTreeSingleton.cs	(working copy)
@@ -21,10 +21,20 @@
 	public class AddInTreeSingleton
 	{
 		static DefaultAddInTree addInTree = null;
-		readonly static string defaultCoreDirectory = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location) + // DON'T REPLACE
-		Path.DirectorySeparatorChar + ".." +
-		Path.DirectorySeparatorChar + "AddIns";
 		
+		static string defaultCoreDirectory
+		{	
+			get
+			{
+				string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
+
+				if (Assembly.GetEntryAssembly() != null)
+					baseDirectory = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
+	
+				return baseDirectory+ Path.DirectorySeparatorChar + ".." + Path.DirectorySeparatorChar + "AddIns";
+			}
+		}
+		
 		static bool ignoreDefaultCoreDirectory = false;
 		static string[] addInDirectories       = null;
 		
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/DefaultLoggingService.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/DefaultLoggingService.cs	(revision 58163)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/DefaultLoggingService.cs	(working copy)
@@ -16,7 +16,7 @@
 
 		public DefaultLoggingService()
 		{
-			if (File.Exists (Assembly.GetEntryAssembly().Location + ".config"))
+			if (Assembly.GetEntryAssembly() != null && File.Exists(Assembly.GetEntryAssembly().Location + ".config"))
 				XmlConfigurator.Configure ();
 			else
 				BasicConfigurator.Configure ();
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/FileUtilityService.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/FileUtilityService.cs	(revision 58163)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/FileUtilityService.cs	(working copy)
@@ -33,7 +33,10 @@
 		
 		public FileUtilityService()
 		{
-			sharpDevelopRootPath = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location) + Path.DirectorySeparatorChar + "..";
+			if (Assembly.GetEntryAssembly() != null)
+				sharpDevelopRootPath = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location) + Path.DirectorySeparatorChar + "..";
+			else
+				sharpDevelopRootPath = (AppDomain.CurrentDomain.BaseDirectory) + Path.DirectorySeparatorChar + "..";
 		}
 		
 		public override void UnloadService()
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/PropertyService.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/PropertyService.cs	(revision 58163)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/PropertyService.cs	(working copy)
@@ -37,9 +37,13 @@
 			if (confDataDirectory != null) {
 				dataDirectory = confDataDirectory;
 			} else {
-				dataDirectory = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location) + 
-				                                       Path.DirectorySeparatorChar + ".." +
-				                                       Path.DirectorySeparatorChar + "data";
+
+				string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
+
+				if (Assembly.GetEntryAssembly() != null)
+					baseDirectory = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
+
+				dataDirectory = baseDirectory + Path.DirectorySeparatorChar + ".." + Path.DirectorySeparatorChar + "data";
 			}
 
 			configDirectory = Environment.GetEnvironmentVariable ("XDG_CONFIG_HOME");
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns.Setup/SetupService.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns.Setup/SetupService.cs	(revision 58163)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core.AddIns.Setup/SetupService.cs	(working copy)
@@ -71,8 +71,15 @@
 			get { return addInDirs; }
 		}
 		
-		string BinPath {
-			get { return Path.GetDirectoryName (Assembly.GetEntryAssembly().Location); } 
+		string BinPath
+		{
+			get
+			{
+				if (Assembly.GetEntryAssembly() != null)
+					return Path.GetDirectoryName (Assembly.GetEntryAssembly().Location);
+
+				return AppDomain.CurrentDomain.BaseDirectory; 
+			} 
 		}
 		
 		string UserConfigPath {
Index: Makefile.include
===================================================================
--- Makefile.include	(revision 58163)
+++ Makefile.include	(working copy)
@@ -1,3 +1,3 @@
-
 build_sources = $(addprefix $(srcdir)/, $(FILES)) $(GENERATED_FILES)
+build_test_sources = $(addprefix $(srcdir)/, $(TESTFILES)) $(GENERATED_FILES)
 
Index: Extras/CSharpBinding/Test/Test.cs
===================================================================
--- Extras/CSharpBinding/Test/Test.cs	(revision 0)
+++ Extras/CSharpBinding/Test/Test.cs	(revision 0)
@@ -0,0 +1,67 @@
+using System;
+using System.IO;
+
+using MonoDevelop.Core;
+using MonoDevelop.Projects.Parser;
+using MonoDevelop.Ide.Gui;
+
+using NUnit.Framework;
+
+namespace CSharpBinding.Test
+{
+	[TestFixture]
+	public class ResolverTest
+	{
+		string testFileName = "Test.cs";
+		string testFileContents = @"
+using System;
+using System.IO;
+
+public class C
+{
+	public static void Main()
+	{
+	}
+}
+";
+		private IParserContext parserContext;
+
+		[TestFixtureSetUp]
+		public void SetUp()
+		{
+			Runtime.Initialize();
+			Runtime.AddInService.CheckAssemblyLoadConflicts = true;
+			Runtime.AddInService.StartApplication ("IDE", new string[] {});
+
+			TextWriter tw = new StreamWriter(testFileName);
+			tw.Write(testFileContents);
+			tw.Close();
+
+			IParserDatabase pdb = IdeApp.ProjectOperations.ParserDatabase;
+			parserContext = pdb.GetFileParserContext(testFileName);
+			parserContext.ParseFile(testFileName, testFileContents);
+		}
+
+		[TestFixtureTearDown]
+		public void TearDown()
+		{
+			File.Delete(testFileName);
+		}
+
+		[Test]
+		public void ResolveNamespace()
+		{
+			ILanguageItem languageItem = parserContext.ResolveIdentifier("System", 1, 9, testFileName, testFileContents);
+			Assert.IsTrue(languageItem is Namespace);
+			Assert.AreEqual("System", (languageItem as Namespace).Name);
+
+			languageItem = parserContext.ResolveIdentifier("System.IO", 2, 14, testFileName, testFileContents);
+			Assert.IsTrue(languageItem is Namespace);
+			Assert.AreEqual("System.IO", (languageItem as Namespace).Name);
+		}
+	}
+}
+
+
+
+
Index: Extras/CSharpBinding/templates/EmptyHTMLFile.xft.xml
===================================================================
--- Extras/CSharpBinding/templates/EmptyHTMLFile.xft.xml	(revision 0)
+++ Extras/CSharpBinding/templates/EmptyHTMLFile.xft.xml	(revision 0)
@@ -0,0 +1,25 @@
+<?xml version="1.0"?>
+<Template Originator="Mike Krueger" Language="HTML" Created="6/10/2001" LastModified="6/10/2001">
+	
+	<TemplateConfiguration>
+		<_Name>Empty HTML File</_Name>
+		<Icon>md-html-file-icon</Icon>
+		<Category>Web</Category>
+		<_Description>Creates an empty HTML file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".html" DefaultName="EmptyHtmlfile"><![CDATA[
+<Html>
+	<Head>
+		<Title></Title>
+	</Head>
+	<Body>
+	</Body>
+</Html>]]>
+		</File>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
Index: Extras/CSharpBinding/templates/EmptyTextFile.xft.xml
===================================================================
--- Extras/CSharpBinding/templates/EmptyTextFile.xft.xml	(revision 0)
+++ Extras/CSharpBinding/templates/EmptyTextFile.xft.xml	(revision 0)
@@ -0,0 +1,17 @@
+<?xml version="1.0"?>
+<Template Originator="Mike Krueger" Language="Default" Created="6/10/2001" LastModified="6/10/2001">
+	
+	<TemplateConfiguration>
+		<_Name>Empty Text File</_Name>
+		<Icon>md-text-file-icon</Icon>
+		<Category>Misc</Category>
+		<_Description>Creates an empty text file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".txt" DefaultName="EmptyTextfile"/>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
Index: Extras/CSharpBinding/templates/EmptyResourceFile.xft.xml
===================================================================
--- Extras/CSharpBinding/templates/EmptyResourceFile.xft.xml	(revision 0)
+++ Extras/CSharpBinding/templates/EmptyResourceFile.xft.xml	(revision 0)
@@ -0,0 +1,20 @@
+<?xml version="1.0"?>
+<Template Originator="Mike Krueger" Language="ResourceFiles" Created="6/10/2001" LastModified="6/10/2001">
+	
+	<TemplateConfiguration>
+		<_Name>Empty Resource File</_Name>
+		<Icon>md-resource-file-icon</Icon>
+		<Category>Misc</Category>
+		<ProjectType>DotNet</ProjectType>
+		<_Description>Creates an empty resource file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<ProjectResource>
+			<File DefaultExtension=".resources" DefaultName="EmptyResourcefile"/>
+		</ProjectResource>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
Index: Extras/CSharpBinding/templates/AppConfigFile.xft.xml
===================================================================
--- Extras/CSharpBinding/templates/AppConfigFile.xft.xml	(revision 0)
+++ Extras/CSharpBinding/templates/AppConfigFile.xft.xml	(revision 0)
@@ -0,0 +1,22 @@
+<?xml version="1.0"?>
+<Template Originator="Fawad Halim" Language="XML" Created="10/14/2004" LastModified="10/14/2004">
+	
+	<TemplateConfiguration>
+		<_Name>Application Configuration File</_Name>
+		<Icon>md-text-file-icon</Icon>
+		<Category>Misc</Category>
+		<ProjectType>DotNet</ProjectType>
+		<_Description>Creates a .NET application configuration file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".config" DefaultName="app">
+			<![CDATA[<?xml version="1.0" encoding="utf-8" ?>
+<configuration>
+</configuration>]]>
+		</File>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
Index: Extras/CSharpBinding/templates/EmptyXMLFile.xft.xml
===================================================================
--- Extras/CSharpBinding/templates/EmptyXMLFile.xft.xml	(revision 0)
+++ Extras/CSharpBinding/templates/EmptyXMLFile.xft.xml	(revision 0)
@@ -0,0 +1,17 @@
+<?xml version="1.0"?>
+<Template Originator="Mike Krueger" Language="XML" Created="6/10/2001" LastModified="6/10/2001">
+	
+	<TemplateConfiguration>
+		<_Name>Empty XML File</_Name>
+		<Icon>md-xml-file-icon</Icon>
+		<Category>XML</Category>
+		<_Description>Creates an empty XML file.</_Description>
+	</TemplateConfiguration>
+	
+	<TemplateFiles>
+		<File DefaultExtension=".xml" DefaultName="EmptyXmlfile"/>
+	</TemplateFiles>
+	
+	<FileOptions/>
+	
+</Template>
Index: Extras/CSharpBinding/Makefile.am
===================================================================
--- Extras/CSharpBinding/Makefile.am	(revision 58163)
+++ Extras/CSharpBinding/Makefile.am	(working copy)
@@ -74,6 +74,14 @@
 
 ADDIN = CSharpBinding.addin.xml
 
+TESTFILES = \
+	Test/Test.cs
+
+TESTDLLS = \
+	/r:nunit.framework.dll
+
+TESTASSEMBLY = $(top_builddir)/build/bin/CSharpBinding.Test.dll
+
 all: $(ASSEMBLY) $(ADDIN_BUILD)/$(ADDIN)
 
 $(ADDIN_BUILD)/$(ADDIN): $(srcdir)/$(ADDIN)
@@ -85,6 +93,13 @@
 	$(CSC) $(CSC_FLAGS) -out:$@ -target:library $(DLLS) \
 		$(RES:%=/resource:%) $(build_sources)
 
+check: all $(TESTASSEMBLY)	
+	MONO_PATH=../../build/AddIns nunit-console $(TESTASSEMBLY)
+
+$(TESTASSEMBLY) : $(build_test_sources) $(RES)
+	$(CSC) $(CSC_FLAGS) -debug -codepage:utf8 -out:$@ -target:library $(DLLS) $(TESTDLLS) /r:$(ASSEMBLY) \
+	$(monodoc_libflags) $(RES:%=/resource:%) $(build_test_sources)
+
 parse: $(PARSE)
 
 $(PARSE): parse.cs $(ASSEMBLY)

