Index: Core/src/MonoDevelop.Base/Services/Project/IProjectService.cs
===================================================================
--- Core/src/MonoDevelop.Base/Services/Project/IProjectService.cs	(revision 2588)
+++ Core/src/MonoDevelop.Base/Services/Project/IProjectService.cs	(working copy)
@@ -173,6 +173,7 @@
 		/// </remarks>
 		event ProjectReferenceEventHandler ReferenceAddedToProject;
 		event ProjectReferenceEventHandler ReferenceRemovedFromProject;
+		event ProjectReferenceEventHandler ReferenceRenamedInProject;
 		
 		/// <remarks>
 		/// Called before a build run
Index: Core/src/MonoDevelop.Base/Services/Project/ProjectService.cs
===================================================================
--- Core/src/MonoDevelop.Base/Services/Project/ProjectService.cs	(revision 2588)
+++ Core/src/MonoDevelop.Base/Services/Project/ProjectService.cs	(working copy)
@@ -287,6 +287,7 @@
 				openCombine.FileChangedInProject += new ProjectFileEventHandler (NotifyFileChangedInProject);
 				openCombine.ReferenceAddedToProject += new ProjectReferenceEventHandler (NotifyReferenceAddedToProject);
 				openCombine.ReferenceRemovedFromProject += new ProjectReferenceEventHandler (NotifyReferenceRemovedFromProject);
+				openCombine.ReferenceRenamedInProject += new ProjectReferenceEventHandler (NotifyReferenceRenamedInProject);
 				
 				SearchForNewFiles ();
 		
@@ -1206,6 +1207,11 @@
 		{
 			OnReferenceRemovedFromProject (e);
 		}
+
+		internal void NotifyReferenceRenamedInProject (object sender, ProjectReferenceEventArgs e)
+		{
+			OnReferenceRenamedInProject (e);
+		}
 		
 		protected virtual void OnFileRemovedFromProject (ProjectFileEventArgs e)
 		{
@@ -1249,6 +1255,13 @@
 			}
 		}
 
+		protected virtual void OnReferenceRenamedInProject (ProjectReferenceEventArgs e)
+		{
+			if (ReferenceRenamedInProject != null) {
+				ReferenceRenamedInProject (this, e);
+			}
+		}
+
 		public event ProjectFileEventHandler FileRemovedFromProject;
 		public event ProjectFileEventHandler FileAddedToProject;
 		public event ProjectFileEventHandler FileChangedInProject;
@@ -1267,5 +1280,6 @@
 		
 		public event ProjectReferenceEventHandler ReferenceAddedToProject;
 		public event ProjectReferenceEventHandler ReferenceRemovedFromProject;
+		public event ProjectReferenceEventHandler ReferenceRenamedInProject;
 	}
 }
Index: Core/src/MonoDevelop.Base/Gui/Pads/ProjectPad/ProjectReferenceFolderNodeBuilder.cs
===================================================================
--- Core/src/MonoDevelop.Base/Gui/Pads/ProjectPad/ProjectReferenceFolderNodeBuilder.cs	(revision 2588)
+++ Core/src/MonoDevelop.Base/Gui/Pads/ProjectPad/ProjectReferenceFolderNodeBuilder.cs	(working copy)
@@ -39,6 +39,7 @@
 	{
 		ProjectReferenceEventHandler addedHandler;
 		ProjectReferenceEventHandler removedHandler;
+		ProjectReferenceEventHandler renamedHandler;
 
 		public override Type NodeDataType {
 			get { return typeof(ProjectReferenceCollection); }
@@ -61,15 +62,18 @@
 		{
 			addedHandler = (ProjectReferenceEventHandler) Runtime.DispatchService.GuiDispatch (new ProjectReferenceEventHandler (OnAddReference));
 			removedHandler = (ProjectReferenceEventHandler) Runtime.DispatchService.GuiDispatch (new ProjectReferenceEventHandler (OnRemoveReference));
+			renamedHandler = (ProjectReferenceEventHandler) Runtime.DispatchService.GuiDispatch (new ProjectReferenceEventHandler (OnRenameReference));
 
 			Runtime.ProjectService.ReferenceAddedToProject += addedHandler;
 			Runtime.ProjectService.ReferenceRemovedFromProject += removedHandler;
+			Runtime.ProjectService.ReferenceRenamedInProject += renamedHandler;
 		}
 		
 		public override void Dispose ()
 		{
 			Runtime.ProjectService.ReferenceAddedToProject -= addedHandler;
 			Runtime.ProjectService.ReferenceRemovedFromProject -= removedHandler;
+			Runtime.ProjectService.ReferenceRenamedInProject -= renamedHandler;
 		}
 		
 		public override void BuildNode (ITreeBuilder treeBuilder, object dataObject, ref string label, ref Gdk.Pixbuf icon, ref Gdk.Pixbuf closedIcon)
@@ -110,6 +114,12 @@
 			ITreeBuilder tb = Context.GetTreeBuilder (e.Project.ProjectReferences);
 			if (tb != null) tb.AddChild (e.ProjectReference);
 		}
+
+		void OnRenameReference(object sender, ProjectReferenceEventArgs e)
+		{
+			ITreeBuilder tb = Context.GetTreeBuilder (e.Project.ProjectReferences);
+			if (tb != null) tb.UpdateChildren ();
+		}
 	}
 	
 	public class ProjectReferenceFolderNodeCommandHandler: NodeCommandHandler
Index: Core/src/MonoDevelop.Base/Internal/Project/Project/Project.cs
===================================================================
--- Core/src/MonoDevelop.Base/Internal/Project/Project/Project.cs	(revision 2588)
+++ Core/src/MonoDevelop.Base/Internal/Project/Project/Project.cs	(working copy)
@@ -243,6 +243,23 @@
 			}
 		}
 
+		public void RenameReference(string oldName, string newName)
+		{
+			foreach (ProjectReference refInfo in this.ProjectReferences) {
+				switch (refInfo.ReferenceType) {
+				case ReferenceType.Project:
+					if (refInfo.Reference == oldName) {
+						refInfo.Reference = newName;
+						this.NotifyReferenceRenamedInProject(refInfo);
+					}
+					break;
+				case ReferenceType.Assembly:
+				case ReferenceType.Gac:
+					break;
+				}
+			}
+		}
+
 		public void CopyReferencesToOutputPath (bool force)
 		{
 			AbstractProjectConfiguration config = ActiveConfiguration as AbstractProjectConfiguration;
@@ -587,6 +604,12 @@
 			isDirty = true;
 			OnReferenceAddedToProject (new ProjectReferenceEventArgs (this, reference));
 		}
+
+		internal void NotifyReferenceRenamedInProject (ProjectReference reference)
+		{
+			isDirty = true;
+			OnReferenceRenamedInProject (new ProjectReferenceEventArgs (this, reference));
+		}
 		
 		protected virtual void OnFileRemovedFromProject (ProjectFileEventArgs e)
 		{
@@ -616,6 +639,13 @@
 			}
 		}
 
+		protected virtual void OnReferenceRenamedInProject (ProjectReferenceEventArgs e)
+		{
+			if (ReferenceRenamedInProject != null) {
+				ReferenceRenamedInProject (this, e);
+			}
+		}
+
  		protected virtual void OnFileChangedInProject (ProjectFileEventArgs e)
 		{
 			if (FileChangedInProject != null) {
@@ -636,6 +666,7 @@
 		public event ProjectFileRenamedEventHandler FileRenamedInProject;
 		public event ProjectReferenceEventHandler ReferenceRemovedFromProject;
 		public event ProjectReferenceEventHandler ReferenceAddedToProject;
+		public event ProjectReferenceEventHandler ReferenceRenamedInProject;
 	}
 	
 	public class ProjectActiveConfigurationTypeConverter : TypeConverter
Index: Core/src/MonoDevelop.Base/Internal/Project/Combine/Combine.cs
===================================================================
--- Core/src/MonoDevelop.Base/Internal/Project/Combine/Combine.cs	(revision 2588)
+++ Core/src/MonoDevelop.Base/Internal/Project/Combine/Combine.cs	(working copy)
@@ -63,6 +63,7 @@
 
 		ProjectReferenceEventHandler referenceAddedToProjectHandler;
 		ProjectReferenceEventHandler referenceRemovedFromProjectHandler;
+		ProjectReferenceEventHandler referenceRenamedInProjectHandler;
 		
 		CombineEntryCollection entries;
 		
@@ -154,6 +155,7 @@
 			fileRenamedInProjectHandler = new ProjectFileRenamedEventHandler (NotifyFileRenamedInProject);
 			referenceAddedToProjectHandler = new ProjectReferenceEventHandler (NotifyReferenceAddedToProject);
 			referenceRemovedFromProjectHandler = new ProjectReferenceEventHandler (NotifyReferenceRemovedFromProject);
+			referenceRenamedInProjectHandler = new ProjectReferenceEventHandler (NotifyReferenceRenamedInProject);
 		}
 		
 		internal void NotifyEntryAdded (CombineEntry entry)
@@ -189,6 +191,7 @@
 				project.FileRenamedInProject += fileRenamedInProjectHandler;
 				project.ReferenceRemovedFromProject += referenceRemovedFromProjectHandler;
 				project.ReferenceAddedToProject += referenceAddedToProjectHandler;
+				project.ReferenceRenamedInProject += referenceRenamedInProjectHandler;
 			}
 			else if (entry is Combine)
 			{
@@ -199,6 +202,7 @@
 				combine.FileRenamedInProject += fileRenamedInProjectHandler;
 				combine.ReferenceRemovedFromProject += referenceRemovedFromProjectHandler;
 				combine.ReferenceAddedToProject += referenceAddedToProjectHandler;
+				combine.ReferenceRenamedInProject += referenceRenamedInProjectHandler;
 			}
 		}
 		
@@ -250,6 +254,7 @@
 				pce.FileRenamedInProject -= fileRenamedInProjectHandler;
 				pce.ReferenceRemovedFromProject -= referenceRemovedFromProjectHandler;
 				pce.ReferenceAddedToProject -= referenceAddedToProjectHandler;
+				pce.ReferenceRenamedInProject -= referenceRenamedInProjectHandler;
 			}
 			else {
 				Combine cce = entry as Combine;
@@ -260,6 +265,7 @@
 					cce.FileRenamedInProject -= fileRenamedInProjectHandler;
 					cce.ReferenceRemovedFromProject -= referenceRemovedFromProjectHandler;
 					cce.ReferenceAddedToProject -= referenceAddedToProjectHandler;
+					cce.ReferenceRenamedInProject -= referenceRenamedInProjectHandler;
 				}
 			}
 
@@ -632,6 +638,11 @@
 		{
 			OnReferenceAddedToProject (e);
 		}
+
+		internal void NotifyReferenceRenamedInProject (object sender, ProjectReferenceEventArgs e)
+		{
+			OnReferenceRenamedInProject (e);
+		}
 		
 		protected virtual void OnStartupPropertyChanged(EventArgs e)
 		{
@@ -696,6 +707,14 @@
 			}
 		}
 
+
+		protected virtual void OnReferenceRenamedInProject (ProjectReferenceEventArgs e)
+		{
+			if (ReferenceRenamedInProject != null) {
+				ReferenceRenamedInProject (this, e);
+			}
+		}
+
 		public event EventHandler StartupPropertyChanged;
 		public event CombineEntryEventHandler EntryAdded;
 		public event CombineEntryEventHandler EntryRemoved;
@@ -705,6 +724,7 @@
 		public event ProjectFileRenamedEventHandler FileRenamedInProject;
 		public event ProjectReferenceEventHandler ReferenceAddedToProject;
 		public event ProjectReferenceEventHandler ReferenceRemovedFromProject;
+		public event ProjectReferenceEventHandler ReferenceRenamedInProject;
 	}
 	
 	public class CombineActiveConfigurationTypeConverter : TypeConverter
Index: Core/src/MonoDevelop.Base/Internal/Project/Combine/CombineEntry.cs
===================================================================
--- Core/src/MonoDevelop.Base/Internal/Project/Combine/CombineEntry.cs	(revision 2588)
+++ Core/src/MonoDevelop.Base/Internal/Project/Combine/CombineEntry.cs	(working copy)
@@ -44,6 +44,7 @@
 				return name;
 			}
 			set {
+
 				if (name != value && value != null && value.Length > 0) {
 					string oldName = name;
 					name = value;
@@ -186,6 +187,22 @@
 		
 		protected virtual void OnNameChanged (CombineEntryRenamedEventArgs e)
 		{
+			Combine topMostParentCombine = this.parentCombine;
+
+			if (topMostParentCombine != null) {
+				while (topMostParentCombine.ParentCombine != null) {
+					topMostParentCombine = topMostParentCombine.ParentCombine;
+				}
+				
+				foreach (Project project in topMostParentCombine.GetAllProjects()) {
+					if (project == this) {
+						continue;
+					}
+					
+					project.RenameReference(e.OldName, e.NewName);
+				}
+			}
+			
 			if (NameChanged != null) {
 				NameChanged (this, e);
 			}