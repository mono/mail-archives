Index: Core/src/MonoDevelop.Ide/ChangeLog
===================================================================
--- Core/src/MonoDevelop.Ide/ChangeLog	(revision 74076)
+++ Core/src/MonoDevelop.Ide/ChangeLog	(working copy)
@@ -1,3 +1,24 @@
+2007-03-11  Zach Lute <zach.lute@gmail.com> 
+
+	* MonoDevelop.Ide.Gui.Search/FindToolbar.cs, gtk-gui/objects.xml,
+	  gtk-gui/MonoDevelop.Ide.Gui.Search.FindToolbar.cs, gtk-gui/gui.stetic
+	  gtk-gui/generated.cs, MonoDevelop.Ide.mdp, Makefile.am: 
+	  Added FindToolbar widget with support for type-ahead find.
+	* MonoDevelop.Ide.Gui/SdiWorkspaceLayout.cs: Added Find toolbar.
+	* MonoDevelop.Ide.Gui.Search/DefaultSearchResult.cs, 
+	  MonoDevelop.Ide.Gui.Search/ISearchResult.cs: Added Wrapped property.
+	* MonoDevelop.Ide.Gui.Search/SearchOptions.cs: Added option for
+	  continuous wrapping and serialization of options.
+	* MonoDevelop.Ide.Gui.Search/ForwardTextIterator.cs: Fixed a crash bug.
+	* MonoDevelop.Ide.Gui.Search/DefaultFind.cs: Made changes to support
+	  type-ahead find.
+	* MonoDevelop.Ide.Gui.Search/SearchReplaceManager.cs: Search functions
+	  now return the ISearchResult for post-processing.  Added a 'silent'
+	  option to search functions to not pop up any dialogs, etc. Added
+	  detection of search wrapping.
+	* MonoDevelop.Ide.Gui.Dialogs/ReplaceDialog.cs: Changes to support
+	  'silent' option in Find API.
+
 2007-03-08  Lluis Sanchez Gual <lluis@novell.com> 
 
 	* gtk-gui/MonoDevelop.Ide.Gui.Dialogs.GotoTypeDialog.cs:
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/ReplaceDialog.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/ReplaceDialog.cs	(revision 74076)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Dialogs/ReplaceDialog.cs	(working copy)
@@ -265,7 +265,7 @@
 				return;
 			
 			SetupSearchReplaceManager();
-			SearchReplaceManager.FindNext();
+			SearchReplaceManager.FindNext(false);
 			
 			AddSearchHistoryItem(findHistory, searchPatternEntry.Text);
 		}
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.mdp
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.mdp	(revision 74076)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.mdp	(working copy)
@@ -271,6 +271,9 @@
     <File name="./MonoDevelop.Ide.Gui.Content/TextEditorExtension.cs" subtype="Code" buildaction="Compile" />
     <File name="./MonoDevelop.Ide.Gui/TextEditor.cs" subtype="Code" buildaction="Compile" />
     <File name="./gtk-gui/MonoDevelop.Ide.Gui.Dialogs.OpenFileInSolutionDialog.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MonoDevelop.Ide.Gui.Search/FindToolbar.cs" subtype="Code" buildaction="Compile" />
+    <File name="./gtk-gui/objects.xml" subtype="Code" buildaction="EmbedAsResource" />
+    <File name="./gtk-gui/MonoDevelop.Ide.Gui.Search.FindToolbar.cs" subtype="Code" buildaction="Compile" />
   </Contents>
   <References>
     <ProjectReference type="Gac" localcopy="False" refto="gecko-sharp, Version=2.0.0.0, Culture=neutral, PublicKeyToken=ccf7d78a55e9f021" />
@@ -313,7 +316,11 @@
     <AsmRefVar Sync="True" Name="REFS" Prefix="-r:" />
     <ProjectRefVar Sync="True" Name="REFS" Prefix="-r:" />
   </MonoDevelop.Autotools.MakefileInfo>
-  <GtkDesignInfo partialTypes="True" />
+  <GtkDesignInfo partialTypes="True">
+    <ExportedWidgets>
+      <Widget>MonoDevelop.Ide.Gui.Search.FindToolbar</Widget>
+    </ExportedWidgets>
+  </GtkDesignInfo>
   <DeploymentInformation strategy="File">
     <excludeFiles />
   </DeploymentInformation>
Index: Core/src/MonoDevelop.Ide/gtk-gui/generated.cs
===================================================================
--- Core/src/MonoDevelop.Ide/gtk-gui/generated.cs	(revision 74076)
+++ Core/src/MonoDevelop.Ide/gtk-gui/generated.cs	(working copy)
@@ -22,6 +22,53 @@
         }
     }
     
+    internal class BinContainer {
+        
+        private Gtk.Widget child;
+        
+        private Gtk.UIManager uimanager;
+        
+        public static BinContainer Attach(Gtk.Bin bin) {
+            BinContainer bc = new BinContainer();
+            bin.SizeRequested += new Gtk.SizeRequestedHandler(bc.OnSizeRequested);
+            bin.SizeAllocated += new Gtk.SizeAllocatedHandler(bc.OnSizeAllocated);
+            bin.Added += new Gtk.AddedHandler(bc.OnAdded);
+            return bc;
+        }
+        
+        private void OnSizeRequested(object sender, Gtk.SizeRequestedArgs args) {
+            if ((this.child != null)) {
+                args.Requisition = this.child.SizeRequest();
+            }
+        }
+        
+        private void OnSizeAllocated(object sender, Gtk.SizeAllocatedArgs args) {
+            if ((this.child != null)) {
+                this.child.Allocation = args.Allocation;
+            }
+        }
+        
+        private void OnAdded(object sender, Gtk.AddedArgs args) {
+            this.child = args.Widget;
+        }
+        
+        public void SetUiManager(Gtk.UIManager uim) {
+            this.uimanager = uim;
+            this.child.Realized += new System.EventHandler(this.OnRealized);
+        }
+        
+        private void OnRealized(object sender, System.EventArgs args) {
+            if ((this.uimanager != null)) {
+                Gtk.Widget w;
+                w = this.child.Toplevel;
+                if (((w != null) && typeof(Gtk.Window).IsInstanceOfType(w))) {
+                    ((Gtk.Window)(w)).AddAccelGroup(this.uimanager.AccelGroup);
+                    this.uimanager = null;
+                }
+            }
+        }
+    }
+    
     internal class ActionGroups {
         
         public static Gtk.ActionGroup GetActionGroup(System.Type type) {
Index: Core/src/MonoDevelop.Ide/gtk-gui/MonoDevelop.Ide.Gui.Dialogs.OpenFileInSolutionDialog.cs
===================================================================
--- Core/src/MonoDevelop.Ide/gtk-gui/MonoDevelop.Ide.Gui.Dialogs.OpenFileInSolutionDialog.cs	(revision 74076)
+++ Core/src/MonoDevelop.Ide/gtk-gui/MonoDevelop.Ide.Gui.Dialogs.OpenFileInSolutionDialog.cs	(working copy)
@@ -41,6 +41,8 @@
             this.Events = ((Gdk.EventMask)(256));
             this.Name = "MonoDevelop.Ide.Gui.Dialogs.OpenFileInSolutionDialog";
             this.Title = Mono.Unix.Catalog.GetString("Open File in Solution");
+            this.WindowPosition = ((Gtk.WindowPosition)(4));
+            this.HasSeparator = false;
             // Internal child MonoDevelop.Ide.Gui.Dialogs.OpenFileInSolutionDialog.VBox
             Gtk.VBox w1 = this.VBox;
             w1.Events = ((Gdk.EventMask)(256));
Index: Core/src/MonoDevelop.Ide/gtk-gui/MonoDevelop.Ide.Gui.Search.FindToolbar.cs
===================================================================
--- Core/src/MonoDevelop.Ide/gtk-gui/MonoDevelop.Ide.Gui.Search.FindToolbar.cs	(revision 0)
+++ Core/src/MonoDevelop.Ide/gtk-gui/MonoDevelop.Ide.Gui.Search.FindToolbar.cs	(revision 0)
@@ -0,0 +1,286 @@
+// ------------------------------------------------------------------------------
+//  <autogenerated>
+//      This code was generated by a tool.
+//      Mono Runtime Version: 2.0.50727.42
+// 
+//      Changes to this file may cause incorrect behavior and will be lost if 
+//      the code is regenerated.
+//  </autogenerated>
+// ------------------------------------------------------------------------------
+
+namespace MonoDevelop.Ide.Gui.Search {
+    
+    
+    public partial class FindToolbar {
+        
+        private Gtk.Table table1;
+        
+        private Gtk.Button advancedFindButton;
+        
+        private Gtk.Button closeButton;
+        
+        private Gtk.Entry findEntry;
+        
+        private Gtk.Button findNextButton;
+        
+        private Gtk.Button findPrevButton;
+        
+        private Gtk.Button markAllButton;
+        
+        private Gtk.CheckButton matchCaseCheckButton;
+        
+        private Gtk.HBox resultBox;
+        
+        private Gtk.Image resultImage;
+        
+        private Gtk.Label resultLabel;
+        
+        protected virtual void Build() {
+            Stetic.Gui.Initialize();
+            // Widget MonoDevelop.Ide.Gui.Search.FindToolbar
+            Stetic.BinContainer w1 = Stetic.BinContainer.Attach(this);
+            Gtk.UIManager w2 = new Gtk.UIManager();
+            Gtk.ActionGroup w3 = new Gtk.ActionGroup("Default");
+            w2.InsertActionGroup(w3, 0);
+            this.Events = ((Gdk.EventMask)(256));
+            this.Name = "MonoDevelop.Ide.Gui.Search.FindToolbar";
+            // Container child MonoDevelop.Ide.Gui.Search.FindToolbar.Gtk.Container+ContainerChild
+            this.table1 = new Gtk.Table(((uint)(1)), ((uint)(8)), false);
+            this.table1.Name = "table1";
+            // Container child table1.Gtk.Table+TableChild
+            this.advancedFindButton = new Gtk.Button();
+            this.advancedFindButton.CanFocus = true;
+            this.advancedFindButton.Name = "advancedFindButton";
+            this.advancedFindButton.UseUnderline = true;
+            this.advancedFindButton.Relief = ((Gtk.ReliefStyle)(2));
+            // Container child advancedFindButton.Gtk.Container+ContainerChild
+            Gtk.Alignment w4 = new Gtk.Alignment(0.5F, 0.5F, 0F, 0F);
+            w4.Name = "GtkAlignment4";
+            // Container child GtkAlignment4.Gtk.Container+ContainerChild
+            Gtk.HBox w5 = new Gtk.HBox();
+            w5.Name = "GtkHBox4";
+            w5.Spacing = 2;
+            // Container child GtkHBox4.Gtk.Container+ContainerChild
+            Gtk.Image w6 = new Gtk.Image();
+            w6.Name = "image77";
+            w6.Pixbuf = Gtk.IconTheme.Default.LoadIcon("gtk-preferences", 20, 0);
+            w5.Add(w6);
+            // Container child GtkHBox4.Gtk.Container+ContainerChild
+            Gtk.Label w8 = new Gtk.Label();
+            w8.Name = "GtkLabel5";
+            w8.LabelProp = Mono.Unix.Catalog.GetString("_Find");
+            w8.UseUnderline = true;
+            w5.Add(w8);
+            w4.Add(w5);
+            this.advancedFindButton.Add(w4);
+            this.table1.Add(this.advancedFindButton);
+            Gtk.Table.TableChild w12 = ((Gtk.Table.TableChild)(this.table1[this.advancedFindButton]));
+            w12.LeftAttach = ((uint)(1));
+            w12.RightAttach = ((uint)(2));
+            w12.XPadding = ((uint)(4));
+            w12.XOptions = ((Gtk.AttachOptions)(4));
+            w12.YOptions = ((Gtk.AttachOptions)(4));
+            // Container child table1.Gtk.Table+TableChild
+            this.closeButton = new Gtk.Button();
+            this.closeButton.CanFocus = true;
+            this.closeButton.Name = "closeButton";
+            this.closeButton.UseUnderline = true;
+            this.closeButton.Relief = ((Gtk.ReliefStyle)(2));
+            // Container child closeButton.Gtk.Container+ContainerChild
+            Gtk.Alignment w13 = new Gtk.Alignment(0.5F, 0.5F, 0F, 0F);
+            w13.Name = "GtkAlignment3";
+            // Container child GtkAlignment3.Gtk.Container+ContainerChild
+            Gtk.HBox w14 = new Gtk.HBox();
+            w14.Name = "GtkHBox3";
+            w14.Spacing = 2;
+            // Container child GtkHBox3.Gtk.Container+ContainerChild
+            Gtk.Image w15 = new Gtk.Image();
+            w15.Name = "image78";
+            w15.Pixbuf = Gtk.IconTheme.Default.LoadIcon("gtk-close", 18, 0);
+            w14.Add(w15);
+            // Container child GtkHBox3.Gtk.Container+ContainerChild
+            Gtk.Label w17 = new Gtk.Label();
+            w17.Name = "GtkLabel4";
+            w17.LabelProp = "";
+            w14.Add(w17);
+            w13.Add(w14);
+            this.closeButton.Add(w13);
+            this.table1.Add(this.closeButton);
+            Gtk.Table.TableChild w21 = ((Gtk.Table.TableChild)(this.table1[this.closeButton]));
+            w21.XOptions = ((Gtk.AttachOptions)(4));
+            w21.YOptions = ((Gtk.AttachOptions)(4));
+            // Container child table1.Gtk.Table+TableChild
+            this.findEntry = new Gtk.Entry();
+            this.findEntry.CanFocus = true;
+            this.findEntry.Name = "findEntry";
+            this.findEntry.IsEditable = true;
+            this.findEntry.InvisibleChar = '●';
+            this.table1.Add(this.findEntry);
+            Gtk.Table.TableChild w22 = ((Gtk.Table.TableChild)(this.table1[this.findEntry]));
+            w22.LeftAttach = ((uint)(2));
+            w22.RightAttach = ((uint)(3));
+            w22.XPadding = ((uint)(4));
+            w22.YOptions = ((Gtk.AttachOptions)(4));
+            // Container child table1.Gtk.Table+TableChild
+            this.findNextButton = new Gtk.Button();
+            this.findNextButton.CanFocus = true;
+            this.findNextButton.Name = "findNextButton";
+            this.findNextButton.UseUnderline = true;
+            this.findNextButton.FocusOnClick = false;
+            this.findNextButton.Relief = ((Gtk.ReliefStyle)(2));
+            // Container child findNextButton.Gtk.Container+ContainerChild
+            Gtk.Alignment w23 = new Gtk.Alignment(0.5F, 0.5F, 0F, 0F);
+            w23.Name = "GtkAlignment2";
+            // Container child GtkAlignment2.Gtk.Container+ContainerChild
+            Gtk.HBox w24 = new Gtk.HBox();
+            w24.Name = "GtkHBox2";
+            w24.Spacing = 2;
+            // Container child GtkHBox2.Gtk.Container+ContainerChild
+            Gtk.Image w25 = new Gtk.Image();
+            w25.Name = "image79";
+            w25.Pixbuf = Gtk.IconTheme.Default.LoadIcon("gtk-go-down", 20, 0);
+            w24.Add(w25);
+            // Container child GtkHBox2.Gtk.Container+ContainerChild
+            Gtk.Label w27 = new Gtk.Label();
+            w27.Name = "GtkLabel3";
+            w27.LabelProp = Mono.Unix.Catalog.GetString("_Next");
+            w27.UseUnderline = true;
+            w24.Add(w27);
+            w23.Add(w24);
+            this.findNextButton.Add(w23);
+            this.table1.Add(this.findNextButton);
+            Gtk.Table.TableChild w31 = ((Gtk.Table.TableChild)(this.table1[this.findNextButton]));
+            w31.LeftAttach = ((uint)(3));
+            w31.RightAttach = ((uint)(4));
+            w31.XPadding = ((uint)(4));
+            w31.XOptions = ((Gtk.AttachOptions)(4));
+            w31.YOptions = ((Gtk.AttachOptions)(4));
+            // Container child table1.Gtk.Table+TableChild
+            this.findPrevButton = new Gtk.Button();
+            this.findPrevButton.CanFocus = true;
+            this.findPrevButton.Name = "findPrevButton";
+            this.findPrevButton.UseUnderline = true;
+            this.findPrevButton.FocusOnClick = false;
+            this.findPrevButton.Relief = ((Gtk.ReliefStyle)(2));
+            // Container child findPrevButton.Gtk.Container+ContainerChild
+            Gtk.Alignment w32 = new Gtk.Alignment(0.5F, 0.5F, 0F, 0F);
+            w32.Name = "GtkAlignment1";
+            // Container child GtkAlignment1.Gtk.Container+ContainerChild
+            Gtk.HBox w33 = new Gtk.HBox();
+            w33.Name = "GtkHBox1";
+            w33.Spacing = 2;
+            // Container child GtkHBox1.Gtk.Container+ContainerChild
+            Gtk.Image w34 = new Gtk.Image();
+            w34.Name = "image80";
+            w34.Pixbuf = Gtk.IconTheme.Default.LoadIcon("gtk-go-up", 20, 0);
+            w33.Add(w34);
+            // Container child GtkHBox1.Gtk.Container+ContainerChild
+            Gtk.Label w36 = new Gtk.Label();
+            w36.Name = "GtkLabel2";
+            w36.LabelProp = Mono.Unix.Catalog.GetString("_Previous");
+            w36.UseUnderline = true;
+            w33.Add(w36);
+            w32.Add(w33);
+            this.findPrevButton.Add(w32);
+            this.table1.Add(this.findPrevButton);
+            Gtk.Table.TableChild w40 = ((Gtk.Table.TableChild)(this.table1[this.findPrevButton]));
+            w40.LeftAttach = ((uint)(4));
+            w40.RightAttach = ((uint)(5));
+            w40.XPadding = ((uint)(4));
+            w40.XOptions = ((Gtk.AttachOptions)(4));
+            w40.YOptions = ((Gtk.AttachOptions)(4));
+            // Container child table1.Gtk.Table+TableChild
+            this.markAllButton = new Gtk.Button();
+            this.markAllButton.CanFocus = true;
+            this.markAllButton.Name = "markAllButton";
+            this.markAllButton.UseUnderline = true;
+            this.markAllButton.FocusOnClick = false;
+            this.markAllButton.Relief = ((Gtk.ReliefStyle)(2));
+            // Container child markAllButton.Gtk.Container+ContainerChild
+            Gtk.Alignment w41 = new Gtk.Alignment(0.5F, 0.5F, 0F, 0F);
+            w41.Name = "GtkAlignment";
+            // Container child GtkAlignment.Gtk.Container+ContainerChild
+            Gtk.HBox w42 = new Gtk.HBox();
+            w42.Name = "GtkHBox";
+            w42.Spacing = 2;
+            // Container child GtkHBox.Gtk.Container+ContainerChild
+            Gtk.Image w43 = new Gtk.Image();
+            w43.Name = "image81";
+            w43.Pixbuf = Gtk.IconTheme.Default.LoadIcon("gtk-find", 20, 0);
+            w42.Add(w43);
+            // Container child GtkHBox.Gtk.Container+ContainerChild
+            Gtk.Label w45 = new Gtk.Label();
+            w45.Name = "GtkLabel1";
+            w45.LabelProp = Mono.Unix.Catalog.GetString("Mark _all");
+            w45.UseUnderline = true;
+            w42.Add(w45);
+            w41.Add(w42);
+            this.markAllButton.Add(w41);
+            this.table1.Add(this.markAllButton);
+            Gtk.Table.TableChild w49 = ((Gtk.Table.TableChild)(this.table1[this.markAllButton]));
+            w49.LeftAttach = ((uint)(5));
+            w49.RightAttach = ((uint)(6));
+            w49.XPadding = ((uint)(4));
+            w49.XOptions = ((Gtk.AttachOptions)(4));
+            w49.YOptions = ((Gtk.AttachOptions)(4));
+            // Container child table1.Gtk.Table+TableChild
+            this.matchCaseCheckButton = new Gtk.CheckButton();
+            this.matchCaseCheckButton.CanFocus = true;
+            this.matchCaseCheckButton.Name = "matchCaseCheckButton";
+            this.matchCaseCheckButton.Label = Mono.Unix.Catalog.GetString("Mat_ch case");
+            this.matchCaseCheckButton.DrawIndicator = true;
+            this.matchCaseCheckButton.UseUnderline = true;
+            this.matchCaseCheckButton.FocusOnClick = false;
+            this.table1.Add(this.matchCaseCheckButton);
+            Gtk.Table.TableChild w50 = ((Gtk.Table.TableChild)(this.table1[this.matchCaseCheckButton]));
+            w50.LeftAttach = ((uint)(6));
+            w50.RightAttach = ((uint)(7));
+            w50.YOptions = ((Gtk.AttachOptions)(4));
+            // Container child table1.Gtk.Table+TableChild
+            this.resultBox = new Gtk.HBox();
+            this.resultBox.Name = "resultBox";
+            // Container child resultBox.Gtk.Box+BoxChild
+            this.resultImage = new Gtk.Image();
+            this.resultImage.Name = "resultImage";
+            this.resultBox.Add(this.resultImage);
+            Gtk.Box.BoxChild w51 = ((Gtk.Box.BoxChild)(this.resultBox[this.resultImage]));
+            w51.Position = 0;
+            w51.Expand = false;
+            w51.Fill = false;
+            // Container child resultBox.Gtk.Box+BoxChild
+            this.resultLabel = new Gtk.Label();
+            this.resultLabel.Name = "resultLabel";
+            this.resultLabel.LabelProp = Mono.Unix.Catalog.GetString("Result");
+            this.resultBox.Add(this.resultLabel);
+            Gtk.Box.BoxChild w52 = ((Gtk.Box.BoxChild)(this.resultBox[this.resultLabel]));
+            w52.Position = 1;
+            w52.Expand = false;
+            w52.Fill = false;
+            w52.Padding = ((uint)(4));
+            this.table1.Add(this.resultBox);
+            Gtk.Table.TableChild w53 = ((Gtk.Table.TableChild)(this.table1[this.resultBox]));
+            w53.LeftAttach = ((uint)(7));
+            w53.RightAttach = ((uint)(8));
+            w53.XPadding = ((uint)(4));
+            w53.XOptions = ((Gtk.AttachOptions)(4));
+            w53.YOptions = ((Gtk.AttachOptions)(4));
+            this.Add(this.table1);
+            if ((this.Child != null)) {
+                this.Child.ShowAll();
+            }
+            w1.SetUiManager(w2);
+            this.resultImage.Hide();
+            this.Hide();
+            this.Show();
+            this.matchCaseCheckButton.Clicked += new System.EventHandler(this.HandleMatchCaseClicked);
+            this.markAllButton.Clicked += new System.EventHandler(this.HandleMarkAllClicked);
+            this.findPrevButton.Clicked += new System.EventHandler(this.HandlePreviousClicked);
+            this.findNextButton.Clicked += new System.EventHandler(this.HandleNextClicked);
+            this.findEntry.Changed += new System.EventHandler(this.HandleFindEntryChanged);
+            this.findEntry.KeyPressEvent += new Gtk.KeyPressEventHandler(this.HandleFindEntryKeyPress);
+            this.findEntry.Activated += new System.EventHandler(this.HandleFindEntryActivated);
+            this.closeButton.Clicked += new System.EventHandler(this.HandleCloseClicked);
+            this.advancedFindButton.Clicked += new System.EventHandler(this.HandleAdvancedClicked);
+        }
+    }
+}
Index: Core/src/MonoDevelop.Ide/gtk-gui/objects.xml
===================================================================
--- Core/src/MonoDevelop.Ide/gtk-gui/objects.xml	(revision 0)
+++ Core/src/MonoDevelop.Ide/gtk-gui/objects.xml	(revision 0)
@@ -0,0 +1,19 @@
+<objects>
+  <object type="MonoDevelop.Ide.Gui.Search.FindToolbar" palette-category="widget" allow-children="false" base-type="Gtk.Widget">
+    <itemgroups>
+      <itemgroup label="Container Properties">
+        <property name="BorderWidth" />
+        <property name="FocusHadjustment" />
+        <property name="FocusVadjustment" />
+      </itemgroup>
+    </itemgroups>
+    <signals>
+      <itemgroup label="Container Signals">
+        <signal name="ResizeChecked" />
+        <signal name="Removed" />
+        <signal name="FocusChildSet" />
+        <signal name="Added" />
+      </itemgroup>
+    </signals>
+  </object>
+</objects>
\ No newline at end of file
Index: Core/src/MonoDevelop.Ide/gtk-gui/gui.stetic
===================================================================
--- Core/src/MonoDevelop.Ide/gtk-gui/gui.stetic	(revision 74076)
+++ Core/src/MonoDevelop.Ide/gtk-gui/gui.stetic	(working copy)
@@ -3,13 +3,16 @@
   <import>
     <widget-library name="../../../../build/AddIns/MonoDevelop.Projects.Gui.dll" />
     <widget-library name="../../../../build/AddIns/MonoDevelop.Components.dll" />
+    <widget-library name="../../../../build/AddIns/MonoDevelop.Ide.dll" />
   </import>
   <widget class="Gtk.Dialog" id="MonoDevelop.Ide.Gui.Dialogs.OpenFileInSolutionDialog" design-size="690 356">
     <property name="MemberName" />
     <property name="Events">ButtonPressMask</property>
     <property name="Title" translatable="yes">Open File in Solution</property>
+    <property name="WindowPosition">CenterOnParent</property>
     <property name="Buttons">2</property>
     <property name="HelpButton">False</property>
+    <property name="HasSeparator">False</property>
     <signal name="Shown" handler="HandleShown" />
     <child internal-child="VBox">
       <widget class="Gtk.VBox" id="dialog_VBox">
@@ -192,4 +195,244 @@
       </widget>
     </child>
   </widget>
+  <widget class="Gtk.Bin" id="MonoDevelop.Ide.Gui.Search.FindToolbar" design-size="925 48">
+    <action-group name="Default" />
+    <property name="MemberName" />
+    <property name="Visible">False</property>
+    <property name="Events">ButtonPressMask</property>
+    <child>
+      <widget class="Gtk.Table" id="table1">
+        <property name="MemberName" />
+        <property name="NRows">1</property>
+        <property name="NColumns">8</property>
+        <child>
+          <widget class="Gtk.Button" id="advancedFindButton">
+            <property name="MemberName" />
+            <property name="CanFocus">True</property>
+            <property name="Type">TextAndIcon</property>
+            <property name="Icon">stock:gtk-preferences Button</property>
+            <property name="Label" translatable="yes">_Find</property>
+            <property name="UseUnderline">True</property>
+            <property name="IsDialogButton">False</property>
+            <property name="Relief">None</property>
+            <signal name="Clicked" handler="HandleAdvancedClicked" />
+          </widget>
+          <packing>
+            <property name="LeftAttach">1</property>
+            <property name="RightAttach">2</property>
+            <property name="XPadding">4</property>
+            <property name="AutoSize">True</property>
+            <property name="XOptions">Fill</property>
+            <property name="YOptions">Fill</property>
+            <property name="XExpand">False</property>
+            <property name="XFill">True</property>
+            <property name="XShrink">False</property>
+            <property name="YExpand">False</property>
+            <property name="YFill">True</property>
+            <property name="YShrink">False</property>
+          </packing>
+        </child>
+        <child>
+          <widget class="Gtk.Button" id="closeButton">
+            <property name="MemberName" />
+            <property name="CanFocus">True</property>
+            <property name="Type">TextAndIcon</property>
+            <property name="Icon">stock:gtk-close SmallToolbar</property>
+            <property name="Label" translatable="yes" />
+            <property name="UseUnderline">True</property>
+            <property name="IsDialogButton">False</property>
+            <property name="Relief">None</property>
+            <signal name="Clicked" handler="HandleCloseClicked" />
+          </widget>
+          <packing>
+            <property name="AutoSize">True</property>
+            <property name="XOptions">Fill</property>
+            <property name="YOptions">Fill</property>
+            <property name="XExpand">False</property>
+            <property name="XFill">True</property>
+            <property name="XShrink">False</property>
+            <property name="YExpand">False</property>
+            <property name="YFill">True</property>
+            <property name="YShrink">False</property>
+          </packing>
+        </child>
+        <child>
+          <widget class="Gtk.Entry" id="findEntry">
+            <property name="MemberName" />
+            <property name="CanFocus">True</property>
+            <property name="IsEditable">True</property>
+            <property name="InvisibleChar">●</property>
+            <signal name="Changed" handler="HandleFindEntryChanged" />
+            <signal name="KeyPressEvent" handler="HandleFindEntryKeyPress" />
+            <signal name="Activated" handler="HandleFindEntryActivated" />
+          </widget>
+          <packing>
+            <property name="LeftAttach">2</property>
+            <property name="RightAttach">3</property>
+            <property name="XPadding">4</property>
+            <property name="AutoSize">True</property>
+            <property name="YOptions">Fill</property>
+            <property name="XExpand">True</property>
+            <property name="XFill">True</property>
+            <property name="XShrink">False</property>
+            <property name="YExpand">False</property>
+            <property name="YFill">True</property>
+            <property name="YShrink">False</property>
+          </packing>
+        </child>
+        <child>
+          <widget class="Gtk.Button" id="findNextButton">
+            <property name="MemberName" />
+            <property name="CanFocus">True</property>
+            <property name="Type">TextAndIcon</property>
+            <property name="Icon">stock:gtk-go-down Button</property>
+            <property name="Label" translatable="yes">_Next</property>
+            <property name="UseUnderline">True</property>
+            <property name="IsDialogButton">False</property>
+            <property name="FocusOnClick">False</property>
+            <property name="Relief">None</property>
+            <signal name="Clicked" handler="HandleNextClicked" />
+          </widget>
+          <packing>
+            <property name="LeftAttach">3</property>
+            <property name="RightAttach">4</property>
+            <property name="XPadding">4</property>
+            <property name="AutoSize">True</property>
+            <property name="XOptions">Fill</property>
+            <property name="YOptions">Fill</property>
+            <property name="XExpand">False</property>
+            <property name="XFill">True</property>
+            <property name="XShrink">False</property>
+            <property name="YExpand">False</property>
+            <property name="YFill">True</property>
+            <property name="YShrink">False</property>
+          </packing>
+        </child>
+        <child>
+          <widget class="Gtk.Button" id="findPrevButton">
+            <property name="MemberName" />
+            <property name="CanFocus">True</property>
+            <property name="Type">TextAndIcon</property>
+            <property name="Icon">stock:gtk-go-up Button</property>
+            <property name="Label" translatable="yes">_Previous</property>
+            <property name="UseUnderline">True</property>
+            <property name="IsDialogButton">False</property>
+            <property name="FocusOnClick">False</property>
+            <property name="Relief">None</property>
+            <signal name="Clicked" handler="HandlePreviousClicked" />
+          </widget>
+          <packing>
+            <property name="LeftAttach">4</property>
+            <property name="RightAttach">5</property>
+            <property name="XPadding">4</property>
+            <property name="AutoSize">True</property>
+            <property name="XOptions">Fill</property>
+            <property name="YOptions">Fill</property>
+            <property name="XExpand">False</property>
+            <property name="XFill">True</property>
+            <property name="XShrink">False</property>
+            <property name="YExpand">False</property>
+            <property name="YFill">True</property>
+            <property name="YShrink">False</property>
+          </packing>
+        </child>
+        <child>
+          <widget class="Gtk.Button" id="markAllButton">
+            <property name="MemberName" />
+            <property name="CanFocus">True</property>
+            <property name="Type">TextAndIcon</property>
+            <property name="Icon">stock:gtk-find Button</property>
+            <property name="Label" translatable="yes">Mark _all</property>
+            <property name="UseUnderline">True</property>
+            <property name="IsDialogButton">False</property>
+            <property name="FocusOnClick">False</property>
+            <property name="Relief">None</property>
+            <signal name="Clicked" handler="HandleMarkAllClicked" />
+          </widget>
+          <packing>
+            <property name="LeftAttach">5</property>
+            <property name="RightAttach">6</property>
+            <property name="XPadding">4</property>
+            <property name="AutoSize">True</property>
+            <property name="XOptions">Fill</property>
+            <property name="YOptions">Fill</property>
+            <property name="XExpand">False</property>
+            <property name="XFill">True</property>
+            <property name="XShrink">False</property>
+            <property name="YExpand">False</property>
+            <property name="YFill">True</property>
+            <property name="YShrink">False</property>
+          </packing>
+        </child>
+        <child>
+          <widget class="Gtk.CheckButton" id="matchCaseCheckButton">
+            <property name="MemberName" />
+            <property name="CanFocus">True</property>
+            <property name="Label" translatable="yes">Mat_ch case</property>
+            <property name="DrawIndicator">True</property>
+            <property name="HasLabel">True</property>
+            <property name="UseUnderline">True</property>
+            <property name="FocusOnClick">False</property>
+            <signal name="Clicked" handler="HandleMatchCaseClicked" />
+          </widget>
+          <packing>
+            <property name="LeftAttach">6</property>
+            <property name="RightAttach">7</property>
+            <property name="AutoSize">True</property>
+            <property name="YOptions">Fill</property>
+            <property name="XExpand">True</property>
+            <property name="XFill">True</property>
+            <property name="XShrink">False</property>
+            <property name="YExpand">False</property>
+            <property name="YFill">True</property>
+            <property name="YShrink">False</property>
+          </packing>
+        </child>
+        <child>
+          <widget class="Gtk.HBox" id="resultBox">
+            <property name="MemberName" />
+            <child>
+              <widget class="Gtk.Image" id="resultImage">
+                <property name="MemberName" />
+                <property name="Visible">False</property>
+              </widget>
+              <packing>
+                <property name="Position">0</property>
+                <property name="AutoSize">True</property>
+                <property name="Expand">False</property>
+                <property name="Fill">False</property>
+              </packing>
+            </child>
+            <child>
+              <widget class="Gtk.Label" id="resultLabel">
+                <property name="MemberName" />
+                <property name="LabelProp" translatable="yes">Result</property>
+              </widget>
+              <packing>
+                <property name="Position">1</property>
+                <property name="AutoSize">True</property>
+                <property name="Expand">False</property>
+                <property name="Fill">False</property>
+                <property name="Padding">4</property>
+              </packing>
+            </child>
+          </widget>
+          <packing>
+            <property name="LeftAttach">7</property>
+            <property name="RightAttach">8</property>
+            <property name="XPadding">4</property>
+            <property name="AutoSize">True</property>
+            <property name="XOptions">Fill</property>
+            <property name="YOptions">Fill</property>
+            <property name="XExpand">False</property>
+            <property name="XFill">True</property>
+            <property name="XShrink">False</property>
+            <property name="YExpand">False</property>
+            <property name="YFill">True</property>
+            <property name="YShrink">False</property>
+          </packing>
+        </child>
+      </widget>
+    </child>
+  </widget>
 </stetic-interface>
\ No newline at end of file
Index: Core/src/MonoDevelop.Ide/Makefile.am
===================================================================
--- Core/src/MonoDevelop.Ide/Makefile.am	(revision 74076)
+++ Core/src/MonoDevelop.Ide/Makefile.am	(working copy)
@@ -29,6 +29,7 @@
 FILES =  \
 	gtk-gui/generated.cs \
 	gtk-gui/MonoDevelop.Ide.Gui.Dialogs.OpenFileInSolutionDialog.cs \
+	gtk-gui/MonoDevelop.Ide.Gui.Search.FindToolbar.cs \
 	MonoDevelop.Ide.CodeTemplates/CodeTemplate.cs \
 	MonoDevelop.Ide.CodeTemplates/CodeTemplateGroup.cs \
 	MonoDevelop.Ide.CodeTemplates/CodeTemplateLoader.cs \
@@ -170,6 +171,7 @@
 	MonoDevelop.Ide.Gui.Search/DirectoryDocumentIterator.cs \
 	MonoDevelop.Ide.Gui.Search/ExtendedStreamReader.cs \
 	MonoDevelop.Ide.Gui.Search/FileDocumentInformation.cs \
+	MonoDevelop.Ide.Gui.Search/FindToolbar.cs \
 	MonoDevelop.Ide.Gui.Search/ForwardTextFileIterator.cs \
 	MonoDevelop.Ide.Gui.Search/ForwardTextIterator.cs \
 	MonoDevelop.Ide.Gui.Search/IDocumentInformation.cs \
@@ -266,6 +268,7 @@
 RES =  \
 	Base.glade \
 	gtk-gui/gui.stetic \
+	gtk-gui/objects.xml \
 	icons/Icons.16x16.LinkOverlay.png \
 	icons/Icons.AboutImage \
 	icons/mono-powered.png \
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/SdiWorkspaceLayout.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/SdiWorkspaceLayout.cs	(revision 74076)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/SdiWorkspaceLayout.cs	(working copy)
@@ -23,6 +23,7 @@
 using MonoDevelop.Core.AddIns;
 using MonoDevelop.Ide.Commands;
 using MonoDevelop.Ide.Codons;
+using MonoDevelop.Ide.Gui.Search;
 using MonoDevelop.Components.Commands;
 using MonoDevelop.Components.DockToolbars;
 
@@ -107,15 +108,24 @@
 			toolbarFrame.AddContent (dockBox);
 
 			// Create the notebook for the various documents.
+			Gtk.VBox docVBox = new VBox(false, 0);
+			
 			tabControl = new DragNotebook ();
 			tabControl.Scrollable = true;
 			tabControl.SwitchPage += new SwitchPageHandler (ActiveMdiChanged);
 			tabControl.TabsReordered += new TabsReorderedHandler (OnTabsReordered);
+			
+			docVBox.PackStart(tabControl, true, true, 0);
+			
+			// Add the Find toolbar.
+			FindToolbar findToolbar = FindToolbar.Instance;
+			docVBox.PackEnd(findToolbar, false, true, 0);
+			
 			DockItem item = new DockItem ("Documents", "Documents",
 						      DockItemBehavior.Locked | DockItemBehavior.NoGrip);
 			item.PreferredWidth = -2;
 			item.PreferredHeight = -2;
-			item.Add (tabControl);
+			item.Add (docVBox);
 			item.Show ();
 			dock.AddItem (item, DockPlacement.Center);
 
@@ -125,6 +135,8 @@
 			vbox.ShowAll ();
 			Services.StatusBar.Control.ShowAll ();
 			
+			findToolbar.Hide();
+			
 			foreach (IViewContent content in workbench.ViewContentCollection)
 				ShowView (content);
 
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/ISearchResult.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/ISearchResult.cs	(revision 74076)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/ISearchResult.cs	(working copy)
@@ -51,6 +51,14 @@
 		/// </value>
 		int Length {
 			get;
+		}
+		
+		/// <value>
+		/// Whether the search wrapped.
+		/// </value>
+		bool Wrapped {
+			get;
+			set;
 		}
 		
 		/// <remarks>
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/SearchOptions.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/SearchOptions.cs	(revision 74076)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/SearchOptions.cs	(working copy)
@@ -37,6 +37,16 @@
 			set {
 				properties.SetProperty("SearchWholeWordOnly", value);
 			}
+		}
+		
+		public bool Wrap {
+			get {
+				return properties.GetProperty("Wrap", false);
+			}
+			
+			set {
+				properties.SetProperty("Wrap", value);
+			}
 		}
 		
 		public string SearchPattern {
@@ -134,7 +144,22 @@
 				SearchStrategyTypeChanged(this, e);
 			}
 		}
-		
+		
+		public override string ToString ()
+		{
+			string retVal = "SearchPattern = " + SearchPattern + ", ";
+			retVal += "ReplacePattern = " + ReplacePattern + ", ";
+			retVal += "IgnoreCase = " + IgnoreCase + ", ";
+			retVal += "WholeWordOnly = " + SearchWholeWordOnly + ", ";
+			retVal += "Wrap = " + Wrap + ", ";
+			retVal += "StrategyType = " + SearchStrategyType + ", ";
+			retVal += "FileMask = " + FileMask + ", ";
+			retVal += "SearchDirectory = " + SearchDirectory + ", ";
+			retVal += "SearchSubdirectories = " + SearchSubdirectories;
+			
+			return retVal;
+		}
+
 		public event EventHandler DocumentIteratorTypeChanged;
 		public event EventHandler SearchStrategyTypeChanged;
 	}
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/ForwardTextIterator.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/ForwardTextIterator.cs	(revision 74076)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/ForwardTextIterator.cs	(working copy)
@@ -29,12 +29,13 @@
 		IDocumentInformation docInfo;
 		
 		public ForwardTextIterator (IDocumentInformation docInfo, Gtk.TextView document, int endOffset)
-		{
-			Debug.Assert(endOffset >= 0 && endOffset < BufferLength);
-			
+		{		
 			this.docInfo = docInfo;
 			this.textBuffer = document.Buffer;
-			this.endOffset = endOffset;
+			this.endOffset = endOffset;
+			
+			Debug.Assert(endOffset >= 0 && endOffset < BufferLength);
+			
 			Reset();
 		}
 		
@@ -226,7 +227,12 @@
 		
 		protected int BufferLength
 		{
-			get { return textBuffer.EndIter.Offset + 1; }
+			get { 
+				if(textBuffer != null)
+					return textBuffer.EndIter.Offset + 1;
+				else
+					return 0;
+			}
 		}
 
 		public virtual void Reset()
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/DefaultFind.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/DefaultFind.cs	(revision 74076)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/DefaultFind.cs	(working copy)
@@ -21,7 +21,8 @@
 		int matches;
 		int lastResultPos;
 		SearchMap reverseSearchMap;
-		bool lastWasReverse;
+		bool lastWasReverse;
+		string lastOptionsCheck;
 		
 		public IDocumentInformation CurrentDocumentInformation {
 			get {
@@ -69,7 +70,8 @@
 			cancelled = false;
 			searchedFiles = 0;
 			matches = 0;
-			lastResultPos = -1;
+			lastResultPos = -1;
+			lastOptionsCheck = "";
 		}
 		
 		public void Replace (ISearchResult result, string pattern)
@@ -109,7 +111,18 @@
 						if (reverse)
 							textIterator.MoveToEnd ();
 					} 
-
+
+					// If the options have changed, we want to start our search from
+					// the beginning position of the last result found.  This allows
+					// to do type-ahead style finding, because we'll continue to match
+					// the same word as we build it.
+					// We use a serialized version of the search options as a ghetto
+					// check for changes.  It gets the job done.
+					if(lastResultPos != -1 && options.ToString() != lastOptionsCheck)
+						textIterator.Position = lastResultPos - 1;
+					
+					lastOptionsCheck = options.ToString();
+					
 					ISearchResult result;
 					if (!reverse)
 						result = searchStrategy.FindNext (textIterator, options, false);
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/SearchReplaceManager.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/SearchReplaceManager.cs	(revision 74076)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/SearchReplaceManager.cs	(working copy)
@@ -68,28 +68,39 @@
 		
 		public static void ShowFindReplaceWindow ()
 		{
-			ShowWindow (true);
+			ShowWindow (true, true);
 		}
 		
-		public static void ShowFindWindow ()
-		{
-			ShowWindow (false);
+		public static void ShowFindWindow (bool advanced)
+		{
+			ShowWindow (false, advanced);
 		}
 		
-		static void ShowWindow (bool mode)
-		{
-			if (ReplaceDialog != null) {
-				if (ReplaceDialog.replaceMode == mode) {
-					ReplaceDialog.SetSearchPattern (SearchOptions.SearchPattern);
-					ReplaceDialog.Present ();
+		static void ShowWindow (bool mode, bool advanced)
+		{
+			// If it's find mode, show the toolbar unless
+			// we're doing an advanced find.  If it's replace
+			// mode, always show the dialog.
+			if(!mode && !advanced) {
+				searchOptions.Wrap = true;
+				FindToolbar.Instance.ShowToolbar();
+			} else {
+				searchOptions.Wrap = false;
+				FindToolbar.Instance.Hide();
+				
+				if (ReplaceDialog != null) {
+					if (ReplaceDialog.replaceMode == mode) {
+						ReplaceDialog.SetSearchPattern (SearchOptions.SearchPattern);
+						ReplaceDialog.Present ();
+					} else {
+						ReplaceDialog.Destroy ();
+						ReplaceDialog rd = new ReplaceDialog (mode);
+						rd.ShowAll ();
+					}
 				} else {
-					ReplaceDialog.Destroy ();
 					ReplaceDialog rd = new ReplaceDialog (mode);
-					rd.ShowAll ();
-				}
-			} else {
-				ReplaceDialog rd = new ReplaceDialog (mode);
-				rd.ShowAll();
+					rd.ShowAll();
+				}
 			}
 		}
 		
@@ -106,11 +117,16 @@
 						editable.SelectedText = SearchOptions.ReplacePattern;
 				}
 			}
-			FindNext();
+			FindNext(false);
 		}
 		
 		public static void MarkAll()
-		{
+		{
+			// If we leave continuous wrapping on here, we'll loop
+			// infinitely over the document.  That's bad.
+			bool wasWrap = searchOptions.Wrap;
+			searchOptions.Wrap = false;
+			
 			find.Reset();
 			try {
 				find.SearchStrategy.CompilePattern(searchOptions);
@@ -131,7 +147,9 @@
 						textArea.SetBookmarked (result.DocumentOffset, true);
 					}
 				}
-			}
+			}
+			
+			searchOptions.Wrap = wasWrap;
 		}
 		
 		public static void ReplaceAll()
@@ -159,22 +177,22 @@
 			}
 		}
 		
-		public static void FindNext ()
+		public static ISearchResult FindNext (bool silent)
 		{
-			Find (false);
+			return Find (false, silent);
 		}
 		
-		public static void FindPrevious ()
+		public static ISearchResult FindPrevious (bool silent)
 		{
-			Find (true);
+			return Find (true, silent);
 		}
 		
-		public static void Find (bool reverse)
+		public static ISearchResult Find (bool reverse, bool silent)
 		{
 			if (find == null || 
 			    searchOptions.SearchPattern == null || 
 			    searchOptions.SearchPattern.Length == 0) {
-				return;
+				return null;
 			}
 			
 			// Restart the search if the file or cursor position has changed
@@ -195,20 +213,22 @@
 			try {
 				find.SearchStrategy.CompilePattern(searchOptions);
 			} catch {
-				Services.MessageService.ShowMessage (GettextCatalog.GetString ("Search pattern is invalid"), DialogPointer);
-				return;
+				if(!silent)
+					Services.MessageService.ShowMessage (GettextCatalog.GetString ("Search pattern is invalid"), DialogPointer);
+				return null;
 			}
 			
-			FindInternal (reverse);
+			return FindInternal (reverse, silent);
 		}
 		
-		static void FindInternal (bool reverse)
+		static ISearchResult FindInternal (bool reverse, bool silent)
 		{
 			try {
 				find.SearchStrategy.CompilePattern(searchOptions);
 			} catch {
-				Services.MessageService.ShowMessage (GettextCatalog.GetString ("Search pattern is invalid"), DialogPointer);
-				return;
+				if(!silent)
+					Services.MessageService.ShowMessage (GettextCatalog.GetString ("Search pattern is invalid"), DialogPointer);
+				return null;
 			}
 
 			ISearchResult result;
@@ -216,11 +236,18 @@
 				result = find.FindNext (searchOptions);
 			else
 				result = find.FindPrevious (searchOptions);
+			
+			// Set the Wrapped property, since it depends on
+			// the last result so can't be set by the search
+			// itself.
+			if(result != null)
+				result.Wrapped = CheckWrapped(lastResult, result, reverse);
 			
 			lastResult = result;
 			
 			if (result == null) {
-				Services.MessageService.ShowMessage(GettextCatalog.GetString ("Search string not found:") + "\n" + SearchOptions.SearchPattern, DialogPointer ); 
+				if(!silent)
+					Services.MessageService.ShowMessage(GettextCatalog.GetString ("Search string not found:") + "\n" + SearchOptions.SearchPattern, DialogPointer ); 
 				find.Reset();
 			} else {
 				ITextBuffer textArea = OpenView (result.FileName, typeof(ITextBuffer)) as ITextBuffer;
@@ -230,15 +257,37 @@
 					
 					if (startPos == textArea.SelectionStartPosition && endPos == textArea.SelectionEndPosition) {
 						// If the result is the same of what we have selected, search again.
-						FindInternal (reverse);
-						return;
+						return FindInternal (reverse, silent);
 					}
 					
 					textArea.ShowPosition (endPos);
 					textArea.Select (endPos, startPos);
 				}
-			}
+			}
+
+			return result;
 		}
+		
+		static bool CheckWrapped(ISearchResult old, ISearchResult current, bool reverse)
+		{
+			if(old == null || current == null)
+				return false;
+			
+			if(old.FileName != current.FileName)
+				return false;
+			
+			if(reverse) {
+				return (old.Line < current.Line ||
+				        (old.Line == current.Line &&
+				         old.Column < current.Column));
+			} else {
+				return (old.Line > current.Line ||
+				        (old.Line == current.Line &&
+				         old.Column > current.Column));
+			}
+			
+			return false;
+		}
 		
 		static object OpenView (string fileName, Type contentType) 
 		{
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/FindToolbar.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/FindToolbar.cs	(revision 0)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/FindToolbar.cs	(revision 0)
@@ -0,0 +1,137 @@
+
+using System;
+
+namespace MonoDevelop.Ide.Gui.Search
+{	
+	public partial class FindToolbar : Gtk.Bin
+	{
+		static FindToolbar instance;
+		public static FindToolbar Instance {
+			get {
+				if (instance == null)
+					instance = new FindToolbar ();
+				return instance;
+			}
+		}
+		
+		public FindToolbar ()
+		{
+			this.Build ();
+			findEntry.GrabFocus ();
+		}
+		
+		public void ShowToolbar ()
+		{
+			resultBox.Hide();
+			Show();
+			
+			// Set the text to the search pattern.
+			findEntry.Text = SearchReplaceManager.SearchOptions.SearchPattern;
+			
+			// Set the "Match Case" checkbox.
+			matchCaseCheckButton.Active = !SearchReplaceManager.SearchOptions.IgnoreCase;
+				
+			// Highlight the text so they can quickly type over it.
+			findEntry.SelectRegion (0, findEntry.Text.Length);
+			findEntry.GrabFocus ();
+		}
+		
+		protected virtual void HandleAdvancedClicked(object sender, System.EventArgs e)
+		{
+			SearchReplaceManager.ShowFindWindow (true);
+		}
+
+		protected virtual void HandleCloseClicked(object sender, System.EventArgs e)
+		{
+			Hide();
+		}
+
+		protected virtual void HandleNextClicked(object sender, System.EventArgs e)
+		{
+			SearchReplaceManager.FindNext(true);
+		}
+
+		protected virtual void HandlePreviousClicked(object sender, System.EventArgs e)
+		{
+			SearchReplaceManager.FindPrevious(true);
+		}
+
+		protected virtual void HandleMarkAllClicked(object sender, System.EventArgs e)
+		{
+			SearchReplaceManager.MarkAll();
+		}
+
+		protected virtual void HandleMatchCaseClicked(object sender, System.EventArgs e)
+		{
+			SearchReplaceManager.SearchOptions.IgnoreCase = !matchCaseCheckButton.Active;
+		}
+
+		protected virtual void HandleFindEntryChanged(object sender, System.EventArgs e)
+		{
+			SearchReplaceManager.SearchOptions.SearchPattern = findEntry.Text;
+			
+			if (findEntry.Text.Length > 0) {
+				// Something in the box.  Enable things.
+				findNextButton.Sensitive = true;
+				findPrevButton.Sensitive = true;
+				markAllButton.Sensitive = true;
+			} else {
+				// Box is empty, so disable things.
+				findNextButton.Sensitive = false;
+				findPrevButton.Sensitive = false;
+				markAllButton.Sensitive = false;
+			}
+			
+			ISearchResult result = SearchReplaceManager.Find (false, true);
+			DisplayResult(result, false, false);
+			
+		}
+				   
+		void DisplayResult(ISearchResult result, bool reverse, bool foundSame)
+		{
+			resultBox.Hide();
+			if (result == null && findEntry.Text.Length > 0 && !foundSame) {
+				resultImage.Pixbuf = Gtk.IconTheme.Default.LoadIcon ("gtk-dialog-error", 18, 0);
+				resultLabel.Text = Mono.Unix.Catalog.GetString ("No matches found.");
+				resultBox.ShowAll();
+			} else if (result != null && result.Wrapped) {
+				resultImage.Pixbuf = Gtk.IconTheme.Default.LoadIcon ("gtk-dialog-info", 18, 0);
+				
+				if(reverse)
+					resultLabel.Text = Mono.Unix.Catalog.GetString ("Reached top, continued from bottom.");
+				else
+					resultLabel.Text = Mono.Unix.Catalog.GetString ("Reached bottom, continued from top.");
+				resultBox.ShowAll();
+			}
+		}
+
+		protected virtual void HandleFindEntryKeyPress (object o, Gtk.KeyPressEventArgs args)
+		{
+			Gdk.EventKey key = args.Event;
+			switch (key.Key) {
+			case Gdk.Key.Escape: {
+				Hide ();
+				break;
+			}
+			case Gdk.Key.Down: {
+				ISearchResult result = SearchReplaceManager.FindNext (true);
+				DisplayResult (result, false, true);
+				args.RetVal = true;
+				break;
+			}
+			case Gdk.Key.Up: {
+				ISearchResult result = SearchReplaceManager.FindPrevious (true);
+				DisplayResult (result, true, true);
+				args.RetVal = true;
+				break;
+			}
+			}
+		}
+
+		protected virtual void HandleFindEntryActivated(object sender, System.EventArgs e)
+		{
+			ISearchResult result = SearchReplaceManager.FindNext (true);
+			DisplayResult (result, false, true);
+		}
+	}
+}
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/DefaultSearchResult.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/DefaultSearchResult.cs	(revision 74076)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Search/DefaultSearchResult.cs	(working copy)
@@ -16,7 +16,8 @@
 		int length;
 		int line;
 		int column;
-		int position;
+		int position;
+		bool wrapped;
 		
 		public DefaultSearchResult (ITextIterator iter, int length)
 		{
@@ -25,7 +26,8 @@
 			line = iter.Line + 1;
 			column = iter.Column + 1;
 			this.length = length;
-			documentInformation = iter.DocumentInformation;
+			documentInformation = iter.DocumentInformation;
+			wrapped = false;
 		}
 		
 		public string FileName {
@@ -64,6 +66,11 @@
 		
 		public int Column {
 			get { return column; }
+		}
+		
+		public bool Wrapped {
+			get { return wrapped; }
+			set { wrapped = value; }
 		}
 		
 		public virtual string TransformReplacePattern (string pattern)
Index: Extras/MonoDevelop.SourceEditor/EditorBindings.glade
===================================================================
--- Extras/MonoDevelop.SourceEditor/EditorBindings.glade	(revision 74076)
+++ Extras/MonoDevelop.SourceEditor/EditorBindings.glade	(working copy)
@@ -423,6 +423,26 @@
 		      <property name="fill">False</property>
 		    </packing>
 		  </child>
+
+		  <child>
+		    <widget class="GtkCheckButton" id="enableTypeAheadFindCheckBox">
+		      <property name="visible">True</property>
+		      <property name="can_focus">True</property>
+		      <property name="label" translatable="yes">Enable _type-ahead find</property>
+		      <property name="use_underline">True</property>
+		      <property name="relief">GTK_RELIEF_NORMAL</property>
+		      <property name="focus_on_click">True</property>
+		      <property name="active">False</property>
+		      <property name="inconsistent">False</property>
+		      <property name="draw_indicator">True</property>
+		    </widget>
+		    <packing>
+		      <property name="padding">0</property>
+		      <property name="expand">False</property>
+		      <property name="fill">False</property>
+		    </packing>
+		  </child>
+
 		</widget>
 		<packing>
 		  <property name="padding">0</property>
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorWidget.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorWidget.cs	(revision 74076)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorWidget.cs	(working copy)
@@ -146,33 +146,33 @@
 		public void Find()
 		{
 			SetSearchPattern();
-			SearchReplaceManager.ShowFindWindow ();
+			SearchReplaceManager.ShowFindWindow (!View.EnableTypeAheadFind);
 		}
 		
 		[CommandHandler (SearchCommands.FindNext)]
 		public void FindNext ()
 		{
-			SearchReplaceManager.FindNext ();
+			SearchReplaceManager.FindNext (false);
 		}
 	
 		[CommandHandler (SearchCommands.FindPrevious)]
 		public void FindPrevious ()
 		{
-			SearchReplaceManager.FindPrevious ();
+			SearchReplaceManager.FindPrevious (false);
 		}
 	
 		[CommandHandler (SearchCommands.FindNextSelection)]
 		public void FindNextSelection ()
 		{
 			SetSearchPattern();
-			SearchReplaceManager.FindNext ();
+			SearchReplaceManager.FindNext (false);
 		}
 	
 		[CommandHandler (SearchCommands.FindPreviousSelection)]
 		public void FindPreviousSelection ()
 		{
 			SetSearchPattern();
-			SearchReplaceManager.FindPrevious ();
+			SearchReplaceManager.FindPrevious (false);
 		}
 	
 		[CommandHandler (SearchCommands.Replace)]
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorView.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorView.cs	(revision 74076)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorView.cs	(working copy)
@@ -32,6 +32,7 @@
 		internal IFormattingStrategy fmtr = new DefaultFormattingStrategy ();
 		public SourceEditorBuffer buf;
 		bool codeCompleteEnabled;
+		bool typeAheadFindEnabled;
 		bool autoInsertTemplates;
 		EditActionCollection editactions = new EditActionCollection ();
 		LanguageItemWindow languageItemWindow;
@@ -49,6 +50,11 @@
 			get { return codeCompleteEnabled; }
 			set { codeCompleteEnabled = value; }
 		}
+		
+		public bool EnableTypeAheadFind {
+			get { return typeAheadFindEnabled; }
+			set { typeAheadFindEnabled = value; }
+		}
 
 		public bool AutoInsertTemplates {
 			get { return autoInsertTemplates; }
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs	(revision 74076)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs	(working copy)
@@ -780,6 +780,7 @@
 			se.Buffer.CheckBrackets = TextEditorProperties.ShowMatchingBracket;
 			se.View.ShowMargin = TextEditorProperties.ShowVerticalRuler;
 			se.View.EnableCodeCompletion = TextEditorProperties.EnableCodeCompletion;
+			se.View.EnableTypeAheadFind = TextEditorProperties.EnableTypeAheadFind;
 			se.View.InsertSpacesInsteadOfTabs = TextEditorProperties.ConvertTabsToSpaces;
 			se.View.AutoIndent = (TextEditorProperties.IndentStyle == IndentStyle.Auto);
 			se.View.AutoInsertTemplates = TextEditorProperties.AutoInsertTemplates;
@@ -818,6 +819,9 @@
 				case "EnableCodeCompletion":
 					se.View.EnableCodeCompletion = TextEditorProperties.EnableCodeCompletion;
 					break;
+				case "EnableTypeAheadFind":
+					se.View.EnableTypeAheadFind = TextEditorProperties.EnableTypeAheadFind;
+					break;
 				case "ConvertTabsToSpaces":
 					se.View.InsertSpacesInsteadOfTabs = TextEditorProperties.ConvertTabsToSpaces;
 					break;
@@ -902,36 +906,62 @@
 								
 			
 			if (reverse) {
-				if (!hasWrapped)
+				if (!hasWrapped || options.Wrap)
 					limit = Buffer.StartIter;
 				else
 					limit = Buffer.GetIterAtOffset (EndOffset);
 			} else {
-				if (!hasWrapped)
+				if (!hasWrapped || options.Wrap)
 					limit = Buffer.EndIter;
 				else
 					limit = Buffer.GetIterAtOffset (EndOffset + text.Length);
 			}
 			
-			// machEnd is the position of the last matched char + 1
+			if(DocumentOffset == -1 && options.Wrap) {
+				// The iterator got set Done, at which point
+				// it's useless.  We need to reset it.
+				this.Reset();
+				DocumentOffset = EndOffset;
+			}
+
+			// matchEnd is the position of the last matched char + 1
 			// When searching forward, the limit check is: matchEnd < limit
 			// When searching backwards, the limit check is: matchEnd > limit
 			
 			TextIter iterator = Buffer.GetIterAtOffset (DocumentOffset);
 			bool res = Find (reverse, iterator, text, flags, out matchStart, out matchEnd, limit);
 			
-			if (!res && !hasWrapped) {
+			if (!res && (!hasWrapped || options.Wrap)) {
 				
-				hasWrapped = true;																
-								
+				hasWrapped = true;							
+				
 				// Not found in the first half of the document, try the other half
-				if (reverse && DocumentOffset <= EndOffset) {					
-					limit = Buffer.GetIterAtOffset (EndOffset);
+				if (reverse && (DocumentOffset <= EndOffset || options.Wrap)) {
+					if (options.Wrap)
+						limit = Buffer.StartIter;
+					else
+						limit = Buffer.GetIterAtOffset (EndOffset);
 					res = Find (true, Buffer.EndIter, text, flags, out matchStart, out matchEnd, limit);
+					if(res && matchStart.Offset == DocumentOffset) {
+						// We found the same result again.  Bail out.
+						// Because infinite loops are bad!
+						// (Though we'll actually never hit this case currently,
+						// because we never start a continously wrapped search
+						// backwards...but maybe someday we will!)
+						res = false;
+					}
 				// Not found in the second half of the document, try the other half
-				} else if (!reverse && DocumentOffset >= EndOffset) {										
-					limit = Buffer.GetIterAtOffset (EndOffset + text.Length);									
+				} else if (!reverse && (DocumentOffset >= EndOffset || options.Wrap)) {
+					if (options.Wrap)
+						limit = Buffer.EndIter;
+					else
+						limit = Buffer.GetIterAtOffset (EndOffset + text.Length);
 					res = Find (false, Buffer.StartIter, text, flags, out matchStart, out matchEnd, limit);
+					if(res && matchEnd.Offset == DocumentOffset) {
+						// We found the same result again.  Bail out.
+						// Because infinite loops are bad!
+						res = false;
+					}
 				}
 			}
 			
Index: Extras/MonoDevelop.SourceEditor/ChangeLog
===================================================================
--- Extras/MonoDevelop.SourceEditor/ChangeLog	(revision 74076)
+++ Extras/MonoDevelop.SourceEditor/ChangeLog	(working copy)
@@ -1,3 +1,15 @@
+2007-03-11  Zach Lute <zach.lute@gmail.com>
+
+	* MonoDevelop.SourceEditor.Gui.OptionPanels/GeneralTextEditorPanel.cs, 
+	  MonoDevelop.SourceEditor.Properties/TextEditorProperties.cs,
+	  MonoDevelop.SourceEditor.Gui/SourceEditorView.cs,
+	  EditorBindings.glade: Added EnableTypeAheadFind option.
+	* MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs:
+	  SourceViewTextIterator::SearchNext now supports a continuously
+	  wrapping search without needing to restart the search.
+	* MonoDevelop.SourceEditor.Gui/SourceEditorWidget.cs: Changes to support
+	  modifications to find API for silent searches.
+
 2007-02-27  Lluis Sanchez Gual <lluis@novell.com> 
 
 	* MonoDevelop.SourceEditor.Gui/SourceEditorWidget.cs,
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Properties/TextEditorProperties.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Properties/TextEditorProperties.cs	(revision 74076)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Properties/TextEditorProperties.cs	(working copy)
@@ -82,6 +82,15 @@
 			}
 		}
 		
+		public static bool EnableTypeAheadFind {
+			get {
+				return properties.GetProperty ("EnableTypeAheadFind", true);
+			}
+			set {
+				properties.SetProperty ("EnableTypeAheadFind", value);
+			}
+		}
+		
 		public static IndentStyle IndentStyle {
 			get {
 				return (IndentStyle)properties.GetProperty ("IndentStyle", IndentStyle.Smart);
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui.OptionPanels/GeneralTextEditorPanel.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui.OptionPanels/GeneralTextEditorPanel.cs	(revision 74076)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui.OptionPanels/GeneralTextEditorPanel.cs	(working copy)
@@ -42,6 +42,7 @@
 		{	
 			[Glade.Widget] CheckButton enableCodeCompletionCheckBox;
 			[Glade.Widget] CheckButton enableFoldingCheckBox;
+			[Glade.Widget] CheckButton enableTypeAheadFindCheckBox;
 			[Glade.Widget] FontButton fontNameDisplayTextBox;
 			[Glade.Widget] VBox encodingBox;
 			[Glade.Widget] RadioButton use_monospace;
@@ -55,6 +56,8 @@
 				
  				enableFoldingCheckBox.Active = TextEditorProperties.EnableFolding;
 				
+				enableTypeAheadFindCheckBox.Active = TextEditorProperties.EnableTypeAheadFind;
+				
 				switch (TextEditorProperties.FontType) {
 				case EditorFontType.DefaultMonospace:
 					use_monospace.Active = true;
@@ -104,6 +107,7 @@
 			{
 				TextEditorProperties.EnableCodeCompletion = enableCodeCompletionCheckBox.Active;
 				TextEditorProperties.EnableFolding = enableFoldingCheckBox.Active;
+				TextEditorProperties.EnableTypeAheadFind = enableTypeAheadFindCheckBox.Active;
 				
 				if (use_monospace.Active) {
 					TextEditorProperties.FontType = EditorFontType.DefaultMonospace;