Index: main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/CSharpTextEditorCompletion.cs
===================================================================
--- main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/CSharpTextEditorCompletion.cs	(revision 155785)
+++ main/src/addins/CSharpBinding/MonoDevelop.CSharp.Completion/CSharpTextEditorCompletion.cs	(working copy)
@@ -950,6 +950,19 @@
 				yieldDataList.Add ("break", "md-keyword");
 				yieldDataList.Add ("return", "md-keyword");
 				return yieldDataList;
+			case "where":
+				CompletionDataList whereDataList = new CompletionDataList ();
+
+				NRefactoryResolver constraintResolver = new NRefactoryResolver (dom, Document.CompilationUnit, ICSharpCode.NRefactory.SupportedLanguage.CSharp, Editor, Document.FileName);
+				constraintResolver.SetupResolver (new DomLocation (completionContext.TriggerLine, completionContext.TriggerLineOffset));
+				
+				if (constraintResolver.CallingMember is IMethod) {
+					foreach (ITypeParameter tp in ((IMethod)constraintResolver.CallingMember).TypeParameters) {
+						whereDataList.Add (tp.Name, "md-keyword");
+					}
+				}
+				
+				return whereDataList;			
 			}
 			return null;
 		}
@@ -1676,9 +1689,16 @@
 				resolver.AddAccessibleCodeCompletionData (expressionResult.ExpressionContext, col);
 			} else {
 				col.Add ("global", "md-keyword");
-				col.Add ("var", "md-keyword");
 				AddPrimitiveTypes (col);
 				resolver.AddAccessibleCodeCompletionData (expressionResult.ExpressionContext, col);
+				
+				if (expressionResult.ExpressionContext == ExpressionContext.Constraints) {
+					col.Add ("struct", "md-keyword");
+					col.Add ("class", "md-keyword");
+					col.Add ("new()", "md-keyword");
+				} else {
+					col.Add ("var", "md-keyword");
+				}
 			}
 			
 			if (resolver.CallingMember is IMethod) {