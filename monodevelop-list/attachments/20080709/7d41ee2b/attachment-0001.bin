Index: MonoDevelop.Projects.Formats.MSBuild/MSBuildProjectHandler.cs
===================================================================
--- MonoDevelop.Projects.Formats.MSBuild/MSBuildProjectHandler.cs	(revision 107567)
+++ MonoDevelop.Projects.Formats.MSBuild/MSBuildProjectHandler.cs	(working copy)
@@ -218,6 +218,8 @@
 						localCopy = pref.LocalCopy;
 					}
 					pref.LocalCopy = localCopy;
+					if (buildItem.HasMetadata ("RequiredTargetFramework"))
+					    pref.ExtendedProperties["RequiredTargetFramework"] = buildItem.GetMetadata ("RequiredTargetFramework");
 					ReadBuildItemMetadata (ser, buildItem, pref, typeof(ProjectReference));
 					dotNetProject.References.Add (pref);
 				}
@@ -464,6 +466,8 @@
 						if (refgrp == null)
 							refgrp = FindItemGroup (msproject, "Reference");
 						buildItem = refgrp.AddNewItem ("Reference", include);
+						if (pref.ExtendedProperties.Contains("RequiredTargetFramework"))
+						    buildItem.SetMetadata ("RequiredTargetFramework", (string) pref.ExtendedProperties["RequiredTargetFramework"]);
 					}
 					else if (pref.ReferenceType == ReferenceType.Project) {
 						Project refProj = project.ParentSolution.FindProjectByName (pref.Reference);
@@ -473,7 +477,7 @@
 							buildItem = prefgrp.AddNewItem ("ProjectReference", MSBuildProjectService.ToMSBuildPath (project.BaseDirectory, refProj.FileName));
 							MSBuildProjectHandler handler = refProj.ItemHandler as MSBuildProjectHandler;
 							if (handler != null)
-								buildItem.SetMetadata ("Project", Item.ItemId);
+								buildItem.SetMetadata ("Project", handler.Item.ItemId);
 							buildItem.SetMetadata ("Name", refProj.Name);
 							if (!pref.LocalCopy)
 								buildItem.SetMetadata ("Private", "False");
