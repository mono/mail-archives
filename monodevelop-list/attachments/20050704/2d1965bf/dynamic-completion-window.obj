Index: AddIns/DisplayBindings/SourceEditor/CodeCompletion/CompletionListWindow.cs
===================================================================
--- AddIns/DisplayBindings/SourceEditor/CodeCompletion/CompletionListWindow.cs	(revision 2621)
+++ AddIns/DisplayBindings/SourceEditor/CodeCompletion/CompletionListWindow.cs	(working copy)
@@ -168,13 +168,13 @@
 		
 		void UpdateDeclarationView ()
 		{
-			ICompletionData data = completionData[List.Selection];
+			ICompletionData data = completionData[List.Selection + this.FirstMatchingWord];
 			
 			declarationviewwindow.Hide ();
 			declarationviewwindow.Clear ();
 			
 			if (List.GdkWindow == null) return;
-			Gdk.Rectangle rect = List.GetRowArea (List.Selection);
+			Gdk.Rectangle rect = List.GetRowArea (List.Selection + this.FirstMatchingWord);
 			int listpos_x = 0, listpos_y = 0;
 			while (listpos_x == 0 || listpos_y == 0)
 				GetPosition (out listpos_x, out listpos_y);
Index: AddIns/DisplayBindings/SourceEditor/CodeCompletion/ListWindow.cs
===================================================================
--- AddIns/DisplayBindings/SourceEditor/CodeCompletion/ListWindow.cs	(revision 2621)
+++ AddIns/DisplayBindings/SourceEditor/CodeCompletion/ListWindow.cs	(working copy)
@@ -14,6 +14,8 @@
 		
 		StringBuilder word;
 		int curPos;
+		private int matchingWords = 0;
+		private int firstMatchingWord = 0;
 		
 		[Flags]
 		public enum KeyAction { Process=1, Ignore=2, CloseWindow=4, Complete=8 } 
@@ -56,19 +58,32 @@
 				scrollbar.Adjustment.PageIncrement = list.VisibleRows - 1;
 				scrollbar.Adjustment.StepIncrement = 1;
 			}
-
-			this.Resize(this.list.WidthRequest, this.list.HeightRequest);
 		}
 		
 		public IListDataProvider DataProvider
 		{
 			get { return provider; }
-			set { provider = value; }
+			set {
+				this.provider = value;
+				this.matchingWords = this.provider.ItemCount;
+				this.firstMatchingWord = 0;
+			}
 		}
+
+		public int MatchingWords
+		{
+			get { return this.matchingWords; }
+		}
+
+
+		public int FirstMatchingWord
+		{
+			get { return this.firstMatchingWord; }
+		}
 		
 		public string CompleteWord
 		{
-			get { return provider.GetText (list.Selection);	}
+			get { return provider.GetText (list.Selection + this.firstMatchingWord); }
 		}
 		
 		public string PartialWord
@@ -183,20 +198,29 @@
 			string s = word.ToString ();
 			int max = (provider == null ? 0 : provider.ItemCount);
 			
+			int matchesFound = 0;
 			int bestMatch = -1;
+
 			for (int n=0; n<max; n++) 
 			{
 				string txt = provider.GetText (n);
-				if (txt.StartsWith (s)) {
-					list.Selection = n;
-					return;
+
+				if (txt.ToLower().StartsWith(s.ToLower())) {
+					if (bestMatch == -1) {
+						bestMatch = n;
+					}
+					
+					matchesFound++;
 				}
-				else if (bestMatch == -1 && txt.ToLower().StartsWith (s.ToLower()))
-					bestMatch = n;
 			}
-			
+
 			if (bestMatch != -1) {
-				list.Selection = bestMatch;
+				this.firstMatchingWord = bestMatch;
+				this.matchingWords = matchesFound;
+				list.Reset();
+				list.Selection = 0;
+				
+				this.Resize(this.list.WidthRequest, this.list.HeightRequest);
 				return;
 			}
 			
@@ -271,8 +295,8 @@
 			set {
 				if (value < 0)
 					value = 0;
-				else if (value >= win.DataProvider.ItemCount)
-					value = win.DataProvider.ItemCount - 1;
+				else if (value >= win.MatchingWords)
+					value = win.MatchingWords - 1;
 					
 				if (value != selection) 
 				{
@@ -335,17 +359,7 @@
 			if (!buttonPressed)
 				return base.OnMotionNotifyEvent (e);
 			
-			int winWidth, winHeight;
-			this.GdkWindow.GetSize (out winWidth, out winHeight);
-			
-	/*		int ypos = (int) e.Y;
-			if (ypos < 0) {
-			}
-			else if (ypos >= winHeight) {
-			}
-			else
-	*/			Selection = GetRowByPosition ((int) e.Y);
-			
+			Selection = GetRowByPosition ((int) e.Y);
 			return true;
 		}
 		
@@ -365,8 +379,11 @@
 			int lineWidth = winWidth - margin*2;
 			int xpos = margin + padding;
 				
-			int n = 0;
-			while (ypos < winHeight - margin && (page + n) < win.DataProvider.ItemCount)
+			int n = win.FirstMatchingWord;			
+
+			this.GdkWindow.Clear();
+
+			while (ypos < winHeight - margin && (page + n) < win.MatchingWords + win.FirstMatchingWord)
 			{
 				layout.SetMarkup (win.DataProvider.GetText (page + n));
 				Gdk.Pixbuf icon = win.DataProvider.GetIcon (page + n);
@@ -376,7 +393,7 @@
 				typos = he < rowHeight ? ypos + (rowHeight - he) / 2 : ypos;
 				iypos = icon.Height < rowHeight ? ypos + (rowHeight - icon.Height) / 2 : ypos;
 				
-				if (page + n == selection) {
+				if (page + n - win.FirstMatchingWord == selection) {
 					if (!disableSelection) {
 						this.GdkWindow.DrawRectangle (this.Style.BaseGC (StateType.Selected), true, margin, ypos, lineWidth, he + padding);
 						this.GdkWindow.DrawLayout (this.Style.TextGC (StateType.Selected), xpos + icon.Width + 2, typos, layout);
@@ -431,10 +448,10 @@
 			
 			int newHeight;
 
-			if (this.win.DataProvider.ItemCount > this.visibleRows)
+			if (this.win.MatchingWords > this.visibleRows)
 				newHeight = (rowHeight * visibleRows) + margin * 2;
 			else
-				newHeight = (rowHeight * this.win.DataProvider.ItemCount) + margin * 2;
+				newHeight = (rowHeight * this.win.MatchingWords) + margin * 2;
 			
 			if (lvWidth != listWidth || lvHeight != newHeight)
 				this.SetSizeRequest (listWidth, newHeight);
@@ -454,6 +471,7 @@
 			
 			FontDescription des = this.Style.FontDescription.Copy();
 			layout.FontDescription = des;
+			DrawList ();
 			CalcVisibleRows ();
 		}
 	}