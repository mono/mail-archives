using System.Collections;

using AST = ICSharpCode.SharpRefactory.Parser.AST;

namespace CSharpBinding.Parser
{
	public class ReformatVisitor : ICSharpCode.SharpRefactory.Parser.AbstractASTVisitor
	{
		Hashtable h = new Hashtable();
		int nestingLevel = 0;

		private void AddLine(object lineNumber)
		{
			if (!h.Contains(lineNumber)) {
				this.h.Add(lineNumber, nestingLevel);
			}
		}
		
		public override object Visit(AST.CompilationUnit compilationUnit, object data)
		{
			compilationUnit.AcceptChildren(this, data);

			return h;
		}
		
		public override object Visit(AST.UsingDeclaration usingDeclaration, object data)
		{			
			this.AddLine(usingDeclaration.StartLocation.Y);

			return h;
		}

		public override object Visit(AST.UsingAliasDeclaration usingAliasDeclaration, object data)
		{
			this.AddLine(usingAliasDeclaration.StartLocation.Y);

			return h;
		}

		public override object Visit(AST.NamespaceDeclaration namespaceDeclaration, object data)
		{
			this.AddLine(namespaceDeclaration.StartLocation.Y);
			this.AddLine(namespaceDeclaration.EndLocation.Y);

			this.nestingLevel++;
			namespaceDeclaration.AcceptChildren(this, data);
			this.nestingLevel--;

			return h;
		}

		public override object Visit(AST.TypeDeclaration typeDeclaration, object data)
		{
			this.AddLine(typeDeclaration.StartLocation.Y);
			this.AddLine(typeDeclaration.EndLocation.Y);

			this.nestingLevel++;
			typeDeclaration.AcceptChildren(this, data);
			this.nestingLevel--;

			return h;
		}

		public override object Visit(AST.FieldDeclaration fieldDeclaration, object data)
		{
			this.AddLine(fieldDeclaration.StartLocation.Y);
			this.AddLine(fieldDeclaration.EndLocation.Y);

			return h;
		}


		public override object Visit(AST.MethodDeclaration methodDeclaration, object data)
		{
			this.AddLine(methodDeclaration.StartLocation.Y);
			this.AddLine(methodDeclaration.EndLocation.Y);

			if (methodDeclaration.Body != null) {
				this.AddLine(methodDeclaration.Body.StartLocation.Y);
				this.AddLine(methodDeclaration.Body.EndLocation.Y);

				this.nestingLevel++;
				methodDeclaration.Body.AcceptVisitor(this, data);
				this.nestingLevel--;
			}

			return h;
		}

		public override object Visit(AST.PropertyDeclaration propertyDeclaration, object data)
		{
			this.AddLine(propertyDeclaration.StartLocation.Y);
			this.AddLine(propertyDeclaration.EndLocation.Y);
			this.AddLine(propertyDeclaration.BodyStart.Y);
			this.AddLine(propertyDeclaration.BodyEnd.Y);

			this.nestingLevel++;

			if (propertyDeclaration.HasGetRegion) {
				propertyDeclaration.GetRegion.AcceptVisitor(this, data);
			}

			if (propertyDeclaration.HasSetRegion) {
				propertyDeclaration.SetRegion.AcceptVisitor(this, data);
			}

			this.nestingLevel--;

			return h;
		}

		public override object Visit(AST.PropertyGetRegion propertyGetRegion, object data)
		{
			this.AddLine(propertyGetRegion.StartLocation.Y);
			this.AddLine(propertyGetRegion.EndLocation.Y);

			if (propertyGetRegion.Block != null) {
				propertyGetRegion.Block.AcceptVisitor(this, data);
			}

			return h;
		}

		public override object Visit(AST.PropertySetRegion propertySetRegion, object data)
		{
			this.AddLine(propertySetRegion.StartLocation.Y);
			this.AddLine(propertySetRegion.EndLocation.Y);

			if (propertySetRegion.Block != null) {
				propertySetRegion.Block.AcceptVisitor(this, data);
			}

			return h;
		}

		public override object Visit(AST.BlockStatement blockStatement, object data)
		{
			this.AddLine(blockStatement.StartLocation.Y);
			this.AddLine(blockStatement.EndLocation.Y);

			this.nestingLevel++;
			blockStatement.AcceptChildren(this, data);
			this.nestingLevel--;

			return h;
		}

		public override object Visit(AST.ReturnStatement returnStatement, object data)
		{
			this.AddLine(returnStatement.StartLocation.Y);
			this.AddLine(returnStatement.EndLocation.Y);

			return h;
		}

		public override object Visit(AST.LocalVariableDeclaration localVariableDeclaration, object data)
		{
			this.AddLine(localVariableDeclaration.StartLocation.Y);
			this.AddLine(localVariableDeclaration.EndLocation.Y);

			return h;
		}
	}
}