Index: Core/src/MonoDevelop.Ide/ChangeLog
===================================================================
--- Core/src/MonoDevelop.Ide/ChangeLog	(revision 83497)
+++ Core/src/MonoDevelop.Ide/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2007-08-05  Valentin Sawadski <valentin.sawadski@gmx.de> 
+
+	* MonoDevelop.Ide.Gui/DefaultWorkbench.cs, 
+	  MonoDevelop.Ide.Gui/SdiWorkspaceLayout.cs: Added a "-SVN" suffix
+	  to the window title if running MD from "make run".
+
 2007-08-03  Lluis Sanchez Gual <lluis@novell.com> 
 
 	* MonoDevelop.Ide.Templates/CombineDescriptor.cs,
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/DefaultWorkbench.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/DefaultWorkbench.cs	(revision 83497)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/DefaultWorkbench.cs	(working copy)
@@ -142,7 +142,7 @@
 
 		public DefaultWorkbench() : base (Gtk.WindowType.Toplevel)
 		{
-			Title = "MonoDevelop";
+			Title = Runtime.IsDebugRun ? "MonoDevelop-SVN" : "MonoDevelop";
 			Runtime.LoggingService.Info ("Creating DefaultWorkbench");
 		
 			windowChangeEventHandler = new EventHandler(OnActiveWindowChanged);
@@ -510,9 +510,12 @@
 		void SetProjectTitle(object sender, ProjectEventArgs e)
 		{
 			if (e.Project != null) {
-				Title = String.Concat(e.Project.Name, " - ", "MonoDevelop");
+				if (!Runtime.IsDebugRun)
+					Title =  String.Concat(e.Project.Name, " - ", "MonoDevelop");
+				else
+					Title =  String.Concat(e.Project.Name, " - ", "MonoDevelop-SVN");
 			} else {
-				Title = "MonoDevelop";
+				Title = Runtime.IsDebugRun ? "MonoDevelop-SVN" : "MonoDevelop";
 			}
 		}
 		
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/SdiWorkspaceLayout.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/SdiWorkspaceLayout.cs	(revision 83497)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/SdiWorkspaceLayout.cs	(working copy)
@@ -761,11 +761,12 @@
 				return;
 				
 			lastActive = ActiveWorkbenchwindow;
-
+			string mdSuffix = Runtime.IsDebugRun ? "MonoDevelop-SVN" : "MonoDevelop";
+			
 			try {
 				if (ActiveWorkbenchwindow != null) {
 					if (ActiveWorkbenchwindow.ViewContent.IsUntitled) {
-						((Gtk.Window)workbench).Title = "MonoDevelop";
+						((Gtk.Window)workbench).Title = mdSuffix;
 					} else {
 						string post = String.Empty;
 						if (ActiveWorkbenchwindow.ViewContent.IsDirty) {
@@ -773,20 +774,20 @@
 						}
 						if (ActiveWorkbenchwindow.ViewContent.Project != null)
 						{
-							((Gtk.Window)workbench).Title = ActiveWorkbenchwindow.ViewContent.Project.Name + " - " + ActiveWorkbenchwindow.ViewContent.PathRelativeToProject + post + " - MonoDevelop";
+							((Gtk.Window)workbench).Title = ActiveWorkbenchwindow.ViewContent.Project.Name + " - " + ActiveWorkbenchwindow.ViewContent.PathRelativeToProject + post + " - " + mdSuffix;
 						}
 						else
 						{
-							((Gtk.Window)workbench).Title = ActiveWorkbenchwindow.ViewContent.ContentName + post + " - MonoDevelop";
+							((Gtk.Window)workbench).Title = ActiveWorkbenchwindow.ViewContent.ContentName + post + " - " + mdSuffix;
 						}
 					}
 				} else {
-					((Gtk.Window)workbench).Title = "MonoDevelop";
+					((Gtk.Window)workbench).Title = mdSuffix;
 					if (!isInFullViewMode) 
 						this.ToggleFullViewMode ();
 				}
 			} catch {
-				((Gtk.Window)workbench).Title = "MonoDevelop";
+				((Gtk.Window)workbench).Title = mdSuffix;
 			}
 			if (ActiveWorkbenchWindowChanged != null) {
 				ActiveWorkbenchWindowChanged(this, e);
Index: Core/src/MonoDevelop.Core/ChangeLog
===================================================================
--- Core/src/MonoDevelop.Core/ChangeLog	(revision 83497)
+++ Core/src/MonoDevelop.Core/ChangeLog	(working copy)
@@ -1,3 +1,12 @@
+2007-08-05  Valentin Sawadski <valentin.sawadski@gmx.de> 
+
+	* MonoDevelop.Core/Runtime.cs: Added a property to determine if
+	  MonoDevelop has been launched from "make run".
+	* MonoDevelop.Core/StringParserService.cs: Fixed a bug where sps
+	  could throw exceptions if an unknown propertyName should be replaced.
+	* MonoDevelop.Core/PropertyService.cs: Setting the config path
+	  differently if MonoDevelop has been started by "make run".
+	  
 2007-07-25  Lluis Sanchez Gual <lluis@novell.com> 
 
 	* MonoDevelop.Core/DefaultLoggingService.cs: Added some null checks.
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/Runtime.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/Runtime.cs	(revision 83497)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/Runtime.cs	(working copy)
@@ -53,6 +53,10 @@
 		{
 		}
 		
+		public static bool IsDebugRun {
+			get { return "build" == new System.IO.DirectoryInfo (System.AppDomain.CurrentDomain.BaseDirectory).Parent.Name; }
+		}
+		
 		public static void Initialize (bool updateAddinRegistry)
 		{
 			if (initialized)
@@ -66,11 +70,11 @@
 			string configDir = System.IO.Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Personal), ".config");
 			configDir = System.IO.Path.Combine (configDir, "MonoDevelop");
 			
-			if ("build" == new System.IO.DirectoryInfo (System.AppDomain.CurrentDomain.BaseDirectory).Parent.Name) {
+			if (IsDebugRun) {
 				Console.WriteLine ("Using debug add-in registry: " + System.AppDomain.CurrentDomain.BaseDirectory);
 				configDir = ".";
 			}
-				
+
 			AddinManager.Initialize (configDir);
 			if (updateAddinRegistry)
 				AddinManager.Registry.Update (null);
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/StringParserService.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/StringParserService.cs	(revision 83497)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/StringParserService.cs	(working copy)
@@ -91,7 +91,7 @@
 					propertyValue = DateTime.Now.Second.ToString ();
 					break;
 				
-				case "USER": // current time
+				case "USER": // current user
 					propertyValue = Environment.UserName;
 					break;
 				
@@ -111,9 +111,11 @@
 					}
 					
 					if (propertyValue == null) {
-						IStringTagProvider stringTagProvider = stringTagProviders[propertyName.ToUpper()] as IStringTagProvider;
-						if (stringTagProvider != null) {
-							propertyValue = stringTagProvider.Convert(propertyName.ToUpper());
+						if (stringTagProviders.ContainsKey(propertyName.ToUpper())) {
+							IStringTagProvider stringTagProvider = stringTagProviders[propertyName.ToUpper()] as IStringTagProvider;
+							if (stringTagProvider != null) {
+								propertyValue = stringTagProvider.Convert(propertyName.ToUpper());
+							}
 						}
 					}
 					
@@ -130,6 +132,9 @@
 							}
 						}
 					}
+					if (propertyValue == null)				
+						propertyValue = "${" + propertyName + "}";
+				
 					break;
 			}
 			
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core/PropertyService.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core/PropertyService.cs	(revision 83497)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core/PropertyService.cs	(working copy)
@@ -44,7 +44,11 @@
 			if (String.IsNullOrEmpty (configDirectory))
 				configDirectory = System.IO.Path.Combine (Environment.GetEnvironmentVariable ("HOME"), ".config");
 
-			configDirectory = System.IO.Path.Combine (configDirectory, "MonoDevelop");
+			if (!Runtime.IsDebugRun) {
+				configDirectory = System.IO.Path.Combine (configDirectory, "MonoDevelop");
+			} else {
+				configDirectory = ".";
+			}
 			configDirectory += System.IO.Path.DirectorySeparatorChar;
 		}
 
