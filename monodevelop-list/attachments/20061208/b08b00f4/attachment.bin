Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/RefactoryCommands.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/RefactoryCommands.cs	(revision 69237)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Commands/RefactoryCommands.cs	(working copy)
@@ -43,9 +43,46 @@
 {
 	public enum RefactoryCommands
 	{
-		CurrentRefactoryOperations
+		CurrentRefactoryOperations,
+		Rename
 	}
 	
+	public class RenameRefactoryHandler: CommandHandler
+	{
+		static bool IsRenamable(ILanguageItem languageItem)
+		{
+			return (languageItem != null) && (languageItem is IClass || languageItem is IField);
+		}
+	
+		protected override void Run ()
+		{
+			ILanguageItem languageItem;
+			ILanguageItem enclosingLanguageItem;
+			IParserContext context;
+			
+			Refactorer.GetLanguageItems(out languageItem, out enclosingLanguageItem, out context);					
+			
+			if (!IsRenamable(languageItem))
+			{
+				return;
+			}
+			
+			// TODO: Show GUI which calls CodeRefactorer.RenameClass/CodeRefactorer.RenameMember
+		}
+	
+		protected override void Update (CommandInfo info)
+		{
+    		ILanguageItem languageItem;
+			ILanguageItem enclosingLanguageItem;
+			IParserContext context;
+			
+			Refactorer.GetLanguageItems(out languageItem, out enclosingLanguageItem, out context);					
+			
+			info.Enabled = IsRenamable(languageItem);
+			info.Visible = IsRenamable(languageItem);
+		}
+	}
+	
 	public class CurrentRefactoryOperationsHandler: CommandHandler
 	{
 		protected override void Run (object data)
@@ -57,46 +94,24 @@
 		
 		protected override void Update (CommandArrayInfo ainfo)
 		{
-			Document doc = IdeApp.Workbench.ActiveDocument;
-			if (doc != null) {
-				ITextBuffer editor = IdeApp.Workbench.ActiveDocument.Content as ITextBuffer;
-				if (editor != null) {
-					int line, column;
-					editor.GetLineColumnFromPosition (editor.CursorPosition, out line, out column);
-					IParserContext ctx;
-					if (doc.Project != null)
-						ctx = IdeApp.ProjectOperations.ParserDatabase.GetProjectParserContext (doc.Project);
-					else
-						ctx = IdeApp.ProjectOperations.ParserDatabase.GetFileParserContext (doc.FileName);
-					
-					// Look for an identifier at the cursor position
-					
-					string id = editor.SelectedText;
-					if (id.Length == 0) {
-						IExpressionFinder finder = Services.ParserService.GetExpressionFinder (editor.Name);
-						if (finder == null)
-							return;
-						id = finder.FindFullExpression (editor.Text, editor.CursorPosition).Expression;
-						if (id == null) return;
-					}
-					
-					ILanguageItem item = ctx.ResolveIdentifier (id, line, column, editor.Name, null);
-					if (item != null) {
-						CommandInfo ci = BuildRefactoryMenuForItem (ctx, item);
-						if (ci != null)
-							ainfo.Add (ci, null);
-					}
-					
-					// Look for the enclosing language item
-					ILanguageItem eitem = ctx.GetEnclosingLanguageItem (line, column, editor);
-					if (eitem != null && !eitem.Equals (item)) {
-						CommandInfo ci = BuildRefactoryMenuForItem (ctx, eitem);
-						if (ci != null)
-							ainfo.Add (ci, null);
-					}
-				}
+			ILanguageItem languageItem;
+			ILanguageItem enclosingLanguageItem;
+			IParserContext context;
+			
+			Refactorer.GetLanguageItems(out languageItem, out enclosingLanguageItem, out context);
+				
+			if (languageItem != null) {
+				CommandInfo ci = BuildRefactoryMenuForItem (context, languageItem);
+				if (ci != null)
+					ainfo.Add (ci, null);
 			}
-		}
+													
+			if (enclosingLanguageItem != null && !enclosingLanguageItem.Equals (languageItem)) {
+				CommandInfo ci = BuildRefactoryMenuForItem (context, enclosingLanguageItem);
+				if (ci != null)
+					ainfo.Add (ci, null);
+			}
+		}			
 		
 		CommandInfo BuildRefactoryMenuForItem (IParserContext ctx, ILanguageItem item)
 		{
@@ -170,7 +185,6 @@
 	{
 		ILanguageItem item;
 		IParserContext ctx;
-		MemberReferenceCollection references;
 		ISearchProgressMonitor monitor;
 		
 		public Refactorer (IParserContext ctx, ILanguageItem item)
@@ -196,7 +210,8 @@
 		{
 			using (monitor) {
 				CodeRefactorer refactorer = IdeApp.ProjectOperations.CodeRefactorer;
-				
+				MemberReferenceCollection references = null;
+
 				if (item is IMember) {
 					references = refactorer.FindMemberReferences (monitor, ((IMember)item).DeclaringType, (IMember)item, RefactoryScope.Solution);
 				} else if (item is IClass) {
@@ -248,5 +263,41 @@
 				}
 			}
 		}
+		
+		static internal void GetLanguageItems(out ILanguageItem languageItem, out ILanguageItem enclosingLanguageItem, out IParserContext context)
+		{
+			languageItem = null;
+			enclosingLanguageItem = null;
+			context = null;
+			
+			Document doc = IdeApp.Workbench.ActiveDocument;
+			
+			if (doc != null) {
+				ITextBuffer editor = IdeApp.Workbench.ActiveDocument.Content as ITextBuffer;
+				if (editor != null) {
+					int line, column;
+					editor.GetLineColumnFromPosition (editor.CursorPosition, out line, out column);
+					
+					if (doc.Project != null)
+						context = IdeApp.ProjectOperations.ParserDatabase.GetProjectParserContext (doc.Project);
+					else
+						context = IdeApp.ProjectOperations.ParserDatabase.GetFileParserContext (doc.FileName);
+					
+					// Look for an identifier at the cursor position					
+					string id = editor.SelectedText;
+					if (id.Length == 0) {
+						IExpressionFinder finder = Services.ParserService.GetExpressionFinder (editor.Name);
+						if (finder == null)
+							return;
+						id = finder.FindFullExpression (editor.Text, editor.CursorPosition).Expression;
+						if (id == null) return;
+					}
+					
+					// Find the two language items
+					languageItem = context.ResolveIdentifier (id, line, column, editor.Name, null);															
+					enclosingLanguageItem = context.GetEnclosingLanguageItem (line, column, editor);					
+				}
+			}
+		}
 	}
 }
Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.addin.xml
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.addin.xml	(revision 69237)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.addin.xml	(working copy)
@@ -483,9 +483,9 @@
 				icon = "md-replace-in-files" 
 				description = "Replace in files" />
 		<Command id = "MonoDevelop.Ide.Commands.SearchCommands.GotoType"		
-		        defaultHandler = "MonoDevelop.Ide.Commands.GotoTypeHandler"
+				defaultHandler = "MonoDevelop.Ide.Commands.GotoTypeHandler"
 				_label = "Go to Type..." 
-                shortcut = "Control|Shift|T" />
+				shortcut = "Control|Shift|T" />
 				
 		<!-- RefactoryCommands -->
 		
@@ -493,6 +493,12 @@
 				defaultHandler = "MonoDevelop.Ide.Commands.CurrentRefactoryOperationsHandler"
 				type="array"
 				_label = "Refactory Operations" /> 
+
+		<Command id = "MonoDevelop.Ide.Commands.RefactoryCommands.Rename"
+				defaultHandler = "MonoDevelop.Ide.Commands.RenameRefactoryHandler"
+				_label = "Rename..."
+				shortcut = "Control|Shift|R" />				
+
 	</Extension>
 	
 	<Extension path = "/SharpDevelop/Views/ProjectBrowser/ContextMenu/CombineBrowserNode" extension-nodes="CommandItem, SeparatorItem, ItemSet, LinkItem, LocalCommandItem" description="Context menu for solutions in the solution pad.">
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.addin.xml
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.addin.xml	(revision 69237)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.addin.xml	(working copy)
@@ -165,6 +165,13 @@
 		</ItemSet>
 	</Extension>
 	
+	<Extension path = "/SharpDevelop/Workbench/MainMenu">
+		<ItemSet id = "Refactoring" insertafter ="Search" insertbefore ="Project" _label = "_Refactoring">
+			<CommandItem id = "MonoDevelop.Ide.Commands.RefactoryCommands.CurrentRefactoryOperations" />
+			<CommandItem id = "MonoDevelop.Ide.Commands.RefactoryCommands.Rename" />
+		</ItemSet>
+	</Extension>
+
 	<Extension path = "/SharpDevelop/Workbench/MainMenu/File">
 			<SeparatorItem id = "PrintSeparator"  insertafter = "SaveSeparator" />
 			<CommandItem id = "MonoDevelop.SourceEditor.EditorCommands.PrintPreviewDocument"