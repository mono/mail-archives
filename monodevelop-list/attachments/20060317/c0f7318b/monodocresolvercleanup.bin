Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/DefaultParserService.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/DefaultParserService.cs	(revision 58088)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/DefaultParserService.cs	(working copy)
@@ -239,20 +239,7 @@
 				return null;
 			}
 		}
-		
-		public string MonodocResolver (string expression, int caretLineNumber, int caretColumn, string fileName, string fileContent)
-		{
-			try {
-				IParser parser = parserService.GetParser (fileName);
-				if (parser != null) {
-					return parser.MonodocResolver (this, expression, caretLineNumber, caretColumn, fileName, fileContent);
-				}
-				return null;
-			} catch {
-				return null;
-			}
-		}
-		
+			
 		public LanguageItemCollection IsAsResolve (string expression, int caretLineNumber, int caretColumn, string fileName, string fileContent)
 		{
 			try {
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IParser.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IParser.cs	(revision 58088)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IParser.cs	(working copy)
@@ -137,8 +137,6 @@
 		                      string fileName,
 		                      string fileContent);
 
-		string MonodocResolver (IParserContext parserContext, string expression, int caretLineNumber, int caretColumn, string fileName, string fileContent);
-
 		LanguageItemCollection IsAsResolve (IParserContext parserContext, string expression, int caretLineNumber, int caretColumn, string fileName, string fileContent);
 		
 		LanguageItemCollection CtrlSpace(IParserContext parserContext, int caretLine, int caretColumn, string fileName);
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IParserService.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IParserService.cs	(revision 58088)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Parser/IParserService.cs	(working copy)
@@ -118,7 +118,6 @@
 		/// </summary>
 		ResolveResult Resolve (string expression, int caretLineNumber, int caretColumn, string fileName, string fileContent);
 		
-		string MonodocResolver (string expression, int caretLineNumber, int caretColumn, string fileName, string fileContent);
 		LanguageItemCollection IsAsResolve (string expression, int caretLineNumber, int caretColumn, string fileName, string fileContent);
 		LanguageItemCollection CtrlSpace (int caretLine, int caretColumn, string fileName);
 		ILanguageItem ResolveIdentifier (string id, int caretLineNumber, int caretColumn, string fileName, string fileContent);
Index: Extras/VBNetBinding/Parser/Parser.cs
===================================================================
--- Extras/VBNetBinding/Parser/Parser.cs	(revision 58088)
+++ Extras/VBNetBinding/Parser/Parser.cs	(working copy)
@@ -140,11 +140,6 @@
 			return new Resolver (parserContext).IsAsResolve (expression, caretLineNumber, caretColumn, fileName, fileContent);
 		}
 		
-		public string MonodocResolver (IParserContext parserContext, string expression, int caretLineNumber, int caretColumn, string fileName, string fileContent)
-		{
-			return new Resolver (parserContext).MonodocResolver (expression, caretLineNumber, caretColumn, fileName, fileContent);
-		}
-		
 		public ILanguageItem ResolveIdentifier (IParserContext parserContext, string id, int caretLineNumber, int caretColumn, string fileName, string fileContent)
 		{
 			return null;
Index: Extras/VBNetBinding/Parser/Resolver.cs
===================================================================
--- Extras/VBNetBinding/Parser/Resolver.cs	(revision 58088)
+++ Extras/VBNetBinding/Parser/Resolver.cs	(working copy)
@@ -212,29 +212,6 @@
 			return parserContext.GetClass (cls.FullyQualifiedName,true,false);
 		}
 
-
-		
-		public string MonodocResolver (string expression, int caretLineNumber, int caretColumn, string fileName, string fileContent) 
-		{
-			//Console.WriteLine("Entering MonodocResolver for " + expression);
-			if (expression == null) {
-				return null;
-			}
-			expression = expression.TrimStart (null);
-			if (expression == "") {
-				return null;
-			}
-			IReturnType retType = internalResolve (expression, caretLineNumber, caretColumn, fileName, fileContent);
-			IClass retClass = parserContext.SearchType (retType.FullyQualifiedName, null, cu);
-			if (retClass == null) {
-				//Console.WriteLine ("Retclass was null");
-				return null;
-			}
-			
-			//Console.WriteLine (retClass.FullyQualifiedName);
-			return "T:" + retClass.FullyQualifiedName;
-		}
-		
 		public LanguageItemCollection IsAsResolve (string expression, int caretLine, int caretColumn, string fileName, string fileContent)
 		{
 			//Console.WriteLine("Entering IsAsResolve for " + expression);
Index: Extras/CSharpBinding/Parser/Parser.cs
===================================================================
--- Extras/CSharpBinding/Parser/Parser.cs	(revision 58088)
+++ Extras/CSharpBinding/Parser/Parser.cs	(working copy)
@@ -116,12 +116,7 @@
 		{
 			return new Resolver (parserContext).Resolve (expression, caretLineNumber, caretColumn, fileName, fileContent);
 		}
-
-		public string MonodocResolver (IParserContext parserContext, string expression, int caretLineNumber, int caretColumn, string fileName, string fileContent)
-		{
-			return new Resolver (parserContext).MonodocResolver (expression, caretLineNumber, caretColumn, fileName, fileContent);
-		}
-		
+	
 		public ILanguageItem ResolveIdentifier (IParserContext parserContext, string id, int caretLineNumber, int caretColumn, string fileName, string fileContent)
 		{
 			return new Resolver (parserContext).ResolveIdentifier (parserContext, id, caretLineNumber, caretColumn, fileName, fileContent);
Index: Extras/CSharpBinding/Parser/Resolver.cs
===================================================================
--- Extras/CSharpBinding/Parser/Resolver.cs	(revision 58088)
+++ Extras/CSharpBinding/Parser/Resolver.cs	(working copy)
@@ -206,26 +206,6 @@
 			return item;
 		}
 
-		public string MonodocResolver (string expression, int caretLineNumber, int caretColumn, string fileName, string fileContent) 
-		{
-			if (expression == null) {
-				return null;
-			}
-			expression = expression.TrimStart (null);
-			if (expression == "") {
-				return null;
-			}
-			IReturnType retType = internalResolve (expression, caretLineNumber, caretColumn, fileName, fileContent);
-			IClass retClass = parserContext.SearchType (retType.FullyQualifiedName, null, cu);
-			if (retClass == null) {
-				Console.WriteLine ("Retclass was null");
-				return null;
-			}
-			
-			Console.WriteLine (retClass.FullyQualifiedName);
-			return "T:" + retClass.FullyQualifiedName;
-		}
-		
 		public ResolveResult Resolve (string expression, int caretLineNumber, int caretColumn, string fileName, string fileContent) 
 		{
 			if (expression == null) {
