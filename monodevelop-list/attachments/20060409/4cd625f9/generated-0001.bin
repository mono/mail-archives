// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 1.1.4322.2032
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Stetic {
    
    class Gui {
        
        public static void Build(object obj, System.Type type) {
            Stetic.Gui.Build(obj, type.FullName);
        }
        
        public static void Build(object obj, string id) {
            System.Collections.Hashtable widgets = new System.Collections.Hashtable();
            if ((id == "MainWindow")) {
                Gtk.Window cobj = ((Gtk.Window)(obj));
                // Widget MainWindow
                cobj.Title = "My eBay Selling";
                cobj.WindowPosition = ((Gtk.WindowPosition)(4));
                cobj.Events = ((Gdk.EventMask)(0));
                cobj.Name = "MainWindow";
                // Container child MainWindow.Gtk.Container+ContainerChild
                Gtk.VBox w1 = new Gtk.VBox();
                w1.Events = ((Gdk.EventMask)(0));
                w1.Name = "vbox1";
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.HBox w2 = new Gtk.HBox();
                w2.Events = ((Gdk.EventMask)(0));
                w2.Name = "hbox1";
                // Container child hbox1.Gtk.Box+BoxChild
                Gtk.Button w3 = new Gtk.Button();
                w3.CanFocus = true;
                w3.Events = ((Gdk.EventMask)(0));
                w3.Name = "button1";
                w3.Label = "button1";
                widgets["button1"] = w3;
                w2.Add(w3);
                Gtk.Box.BoxChild w4 = ((Gtk.Box.BoxChild)(w2[w3]));
                w4.Expand = false;
                w4.Fill = false;
                // Container child hbox1.Gtk.Box+BoxChild
                Gtk.Button w5 = new Gtk.Button();
                w5.CanFocus = true;
                w5.Events = ((Gdk.EventMask)(0));
                w5.Name = "button2";
                w5.Label = "button2";
                widgets["button2"] = w5;
                w2.Add(w5);
                Gtk.Box.BoxChild w6 = ((Gtk.Box.BoxChild)(w2[w5]));
                w6.Position = 1;
                w6.Expand = false;
                w6.Fill = false;
                // Container child hbox1.Gtk.Box+BoxChild
                Gtk.Button w7 = new Gtk.Button();
                w7.CanFocus = true;
                w7.Events = ((Gdk.EventMask)(0));
                w7.Name = "button3";
                w7.Label = "button3";
                widgets["button3"] = w7;
                w2.Add(w7);
                Gtk.Box.BoxChild w8 = ((Gtk.Box.BoxChild)(w2[w7]));
                w8.Position = 2;
                w8.Expand = false;
                w8.Fill = false;
                widgets["hbox1"] = w2;
                w1.Add(w2);
                Gtk.Box.BoxChild w9 = ((Gtk.Box.BoxChild)(w1[w2]));
                w9.Expand = false;
                w9.Fill = false;
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.Label w10 = new Gtk.Label();
                w10.LabelProp = "label1";
                w10.Events = ((Gdk.EventMask)(0));
                w10.Name = "label1";
                widgets["label1"] = w10;
                w1.Add(w10);
                Gtk.Box.BoxChild w11 = ((Gtk.Box.BoxChild)(w1[w10]));
                w11.Position = 1;
                w11.Expand = false;
                w11.Fill = false;
                // Container child vbox1.Gtk.Box+BoxChild
                Gtk.ScrolledWindow w12 = new Gtk.ScrolledWindow();
                w12.VscrollbarPolicy = ((Gtk.PolicyType)(1));
                w12.HscrollbarPolicy = ((Gtk.PolicyType)(1));
                w12.CanFocus = true;
                w12.Events = ((Gdk.EventMask)(0));
                w12.Name = "scrolledwindow2";
                // Container child scrolledwindow2.Gtk.Container+ContainerChild
                Gtk.TreeView w13 = new Gtk.TreeView();
                w13.CanFocus = true;
                w13.Events = ((Gdk.EventMask)(256));
                w13.Name = "treeview";
                widgets["treeview"] = w13;
                w12.Add(w13);
                widgets["scrolledwindow2"] = w12;
                w1.Add(w12);
                Gtk.Box.BoxChild w15 = ((Gtk.Box.BoxChild)(w1[w12]));
                w15.Position = 2;
                widgets["vbox1"] = w1;
                cobj.Add(w1);
                cobj.DefaultWidth = 400;
                cobj.DefaultHeight = 300;
                widgets["MainWindow"] = cobj;
                w3.Show();
                w5.Show();
                w7.Show();
                w2.Show();
                w10.Show();
                w13.Show();
                w12.Show();
                w1.Show();
                cobj.Show();
                cobj.DeleteEvent += ((Gtk.DeleteEventHandler)(System.Delegate.CreateDelegate(typeof(Gtk.DeleteEventHandler), cobj, "OnDeleteEvent")));
                w3.Clicked += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnButton1Clicked")));
                w5.Clicked += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnButton2Clicked")));
                w7.Clicked += ((System.EventHandler)(System.Delegate.CreateDelegate(typeof(System.EventHandler), cobj, "OnButton3Clicked")));
                w13.RowActivated += ((Gtk.RowActivatedHandler)(System.Delegate.CreateDelegate(typeof(Gtk.RowActivatedHandler), cobj, "OnTreeviewRowActivated")));
                w13.ButtonPressEvent += ((Gtk.ButtonPressEventHandler)(System.Delegate.CreateDelegate(typeof(Gtk.ButtonPressEventHandler), cobj, "OnTreeviewButtonPressEvent")));
                w13.KeyPressEvent += ((Gtk.KeyPressEventHandler)(System.Delegate.CreateDelegate(typeof(Gtk.KeyPressEventHandler), cobj, "OnTreeviewKeyPressEvent")));
            }
            System.Reflection.FieldInfo[] fields = obj.GetType().GetFields(((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) | System.Reflection.BindingFlags.Instance));
            for (int n = 0; (n < fields.Length); n = (n + 1)) {
                System.Reflection.FieldInfo field = fields[n];
                object widget = widgets[field.Name];
                if (((widget != null) && field.FieldType.IsInstanceOfType(widget))) {
                    field.SetValue(obj, widget);
                }
            }
        }
    }
    
}
