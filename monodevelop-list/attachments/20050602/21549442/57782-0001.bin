Index: Core/src/MonoDevelop.Base/Gui/Pads/ProjectPad/ProjectNodeBuilder.cs
===================================================================
--- Core/src/MonoDevelop.Base/Gui/Pads/ProjectPad/ProjectNodeBuilder.cs	(revision 2578)
+++ Core/src/MonoDevelop.Base/Gui/Pads/ProjectPad/ProjectNodeBuilder.cs	(working copy)
@@ -33,6 +33,7 @@
 using MonoDevelop.Internal.Project;
 using MonoDevelop.Services;
 using MonoDevelop.Commands;
+using MonoDevelop.Core.Services;
 
 namespace MonoDevelop.Gui.Pads.ProjectPad
 {
@@ -279,18 +280,80 @@
 			combine.SingleStartupProject = true;
 			Runtime.ProjectService.SaveCombine ();
 		}
+
+		private bool IsReferenced(Combine cmb, Project prj, bool deleteFoundReferences)
+		{
+			bool isReferredToByOtherProjects = false;
+			
+			foreach (Project projectEntry in cmb.GetAllProjects()) {
+				
+				if (prj == projectEntry) {
+					continue;
+				}
+				
+				ArrayList toBeDeleted = new ArrayList();
+
+				foreach (ProjectReference refInfo in projectEntry.ProjectReferences) {
+					switch (refInfo.ReferenceType) {
+					case ReferenceType.Project:
+						if (Runtime.ProjectService.GetProject (refInfo.Reference) == prj) {
+							isReferredToByOtherProjects = true;
+							
+							if (deleteFoundReferences) {
+								toBeDeleted.Add(refInfo);
+							}
+						}
+						break;
+					case ReferenceType.Assembly:
+					case ReferenceType.Gac:
+						break;
+					}
+				}
+
+				if (deleteFoundReferences) {
+					foreach (ProjectReference refInfo in toBeDeleted) {
+						projectEntry.ProjectReferences.Remove(refInfo);
+					}
+				}
+			}
+
+			return isReferredToByOtherProjects;			
+		}
 		
+		private void RemoveReferences(Combine cmb, Project prj)
+		{
+			IsReferenced(cmb, prj, true);
+		}
+		
 		[CommandHandler (EditCommands.Delete)]
 		public void RemoveItem ()
 		{
 			Combine cmb = CurrentNode.GetParentDataItem (typeof(Combine), false) as Combine;;
 			Project prj = CurrentNode.DataItem as Project;
-			
-			bool yes = Runtime.MessageService.AskQuestion (String.Format (GettextCatalog.GetString ("Do you really want to remove project {0} from solution {1}"), prj.Name, cmb.Name));
-			if (yes) {
-				cmb.RemoveEntry (prj);
-				Runtime.ProjectService.SaveCombine();
+
+			if (IsReferenced(cmb, prj, false))
+			{
+				QuestionResponse response = Runtime.MessageService.AskQuestionWithCancel (String.Format (GettextCatalog.GetString ("Project {0} is referred to from other projects from solution {1}. Should these references be dropped"), prj.Name, cmb.Name));
+
+				if (response == QuestionResponse.Cancel) {
+					return;
+				}
+
+				if (response == QuestionResponse.Yes) {
+					RemoveReferences(cmb, prj);
+				}
 			}
+			else
+			{
+				bool yes = Runtime.MessageService.AskQuestion (String.Format (GettextCatalog.GetString ("Do you really want to remove project {0} from solution {1}"), prj.Name, cmb.Name));
+
+				if (!yes) {
+					return;
+				}
+			}
+
+			cmb.RemoveEntry (prj);
+			Runtime.ProjectService.SaveCombine();
 		}
 		
 		[CommandHandler (ProjectCommands.AddReference)]