Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorView.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorView.cs	(revision 70252)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorView.cs	(working copy)
@@ -344,7 +344,7 @@
 			CompletionListWindow.ShowWindow (triggerChar, GetCodeCompletionDataProvider (true), this);
 		}
 
-		IParserContext GetParserContext ()
+		internal IParserContext GetParserContext ()
 		{
 			string file = ParentEditor.DisplayBinding.IsUntitled ? ParentEditor.DisplayBinding.UntitledName : ParentEditor.DisplayBinding.ContentName;
 			Project project = ParentEditor.DisplayBinding.Project;
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs	(revision 70252)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs	(working copy)
@@ -17,6 +17,8 @@
 using MonoDevelop.Ide.Codons;
 using MonoDevelop.SourceEditor.Document;
 using MonoDevelop.Projects.Text;
+using MonoDevelop.Projects.Gui.Completion;
+using MonoDevelop.Projects.Parser;
 
 using Gtk;
 using GtkSourceView;
@@ -154,12 +156,108 @@
 				return GettextCatalog.GetString ("Source Editor");
 			}
 		}
+
+		ComboBox member_list;
+
+		void OnMemberListBoxChanged ()
+		{
+			ListStore ls = (ListStore) member_list.Model;
+			TreeIter ti;
+			if (!member_list.GetActiveIter (out ti))
+				return;
+			int line = (int) ls.GetValue (ti, 1);
+			int col = (int) ls.GetValue (ti, 2);
+			IPositionable view = IdeApp.Workbench.ActiveDocument.Content as IPositionable;
+			if (line > 0 && col > 0)
+				view.JumpTo (line, col);
+		}
+
+		// FIXME: make them translatable
+		// FIXME: are they appropriate? aren't they C#-specific?
+		string GetTypeKindLabel (ClassType type)
+		{
+			switch (type) {
+			case ClassType.Class:
+				return "class";
+			case ClassType.Delegate:
+				return "delegate";
+			case ClassType.Enum:
+				return "enum";
+			case ClassType.Interface:
+				return "interface";
+			case ClassType.Struct:
+				return "struct";
+			}
+			return null;
+		}
+
+		void OnMemberListBoxFocused ()
+		{
+			IParserContext ctx = se.View.GetParserContext ();
+			string file = se.DisplayBinding.IsUntitled ? se.DisplayBinding.UntitledName : se.DisplayBinding.ContentName;
+			IClass [] classes = ctx.GetFileContents (file);
+			string curMember = member_list.ActiveText;
+
+			ListStore mls = (ListStore) member_list.Model;
+			mls.Clear ();
+			mls.AppendValues ("(select member to jump)", 0, 0);
+			member_list.Active = 0;
+			// FIXME: give decent (formatted) list items e.g. to
+			// distinguish method overloads.
+			// FIXME: use icons, though it'd be better to refactory
+			// some icon stock manager in TreeViewPad.
+			foreach (IClass c in classes) {
+				mls.AppendValues (GetTypeKindLabel (c.ClassType) + " " + c.Name, c.Region.BeginLine, c.Region.BeginColumn);
+				foreach (IEvent e in c.Events)
+					mls.AppendValues ("[E] " + e.Name, e.Region.BeginLine, e.Region.BeginColumn);
+				foreach (IField f in c.Fields)
+					mls.AppendValues ("[F] " + f.Name, f.Region.BeginLine, f.Region.BeginColumn);
+				foreach (IProperty p in c.Properties)
+					mls.AppendValues ("[P] " + p.Name, p.Region.BeginLine, p.Region.BeginColumn);
+				foreach (IIndexer i in c.Indexer)
+					mls.AppendValues ("[I] " + i.Name, i.Region.BeginLine, i.Region.BeginColumn);
+				foreach (IMethod m in c.Methods)
+					mls.AppendValues ("[M] " + m.Name, m.Region.BeginLine, m.Region.BeginColumn);
+			}
+			mls.SetSortColumnId (1, SortType.Ascending);
+			TreeIter ti;
+			if (mls.GetIterFirst (out ti)) {
+				int idx = 0;
+				do {
+					if (curMember == (string) mls.GetValue (ti, 0))
+						member_list.Active = idx;
+					idx++;
+				} while (mls.IterNext (ref ti));
+			}
+		}
+
+		void SetupClassMemberSelector ()
+		{
+			ListStore mls = new ListStore (typeof (string), typeof (int), typeof (int));
+			ComboBox mb = new ComboBox (mls);
+			CellRenderer mr = new CellRendererText ();
+			mb.PackStart (mr, true);
+			mb.AddAttribute (mr, "text", 0);
+			mls.AppendValues ("--Members--", 0, 0);
+			mb.Active = 0;
+			mb.FocusChildSet += delegate (object o, FocusChildSetArgs e) {
+				OnMemberListBoxFocused ();
+			};
+			mb.Changed += delegate (object o, EventArgs e) {
+				OnMemberListBoxChanged ();
+			};
+			member_list = mb;
+		}
 		
 		public SourceEditorDisplayBindingWrapper ()
 		{
 			mainBox = new VBox ();
 			editorBar = new HBox ();
 			mainBox.PackStart (editorBar, false, false, 0);
+
+			SetupClassMemberSelector ();
+			mainBox.PackStart (member_list, false ,false, 0);
+
 			se = new SourceEditor (this);
 			se.Buffer.ModifiedChanged += new EventHandler (OnModifiedChanged);
 			se.Buffer.MarkSet += new MarkSetHandler (OnMarkSet);
