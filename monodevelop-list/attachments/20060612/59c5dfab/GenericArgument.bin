//
// GenericParameter.cs: Represents a type argument for generic types. It stores
//                      type information .
//
// Author:
//   Matej Urbas (matej.urbas@gmail.com)
//
// (C) 2006 Matej Urbas
// 

using System;
using System.Collections.Generic;

namespace MonoDevelop.Projects
{
	/// <summary>
	/// Contains information about arguments for generic parameters.
	/// <para>For example, if a generic class would be instantiated like this:
	/// <code>
	/// new MyClass<List<SomeType>>();
	/// </code>
	/// Then <c>List</c> is the <c>name</c> of the first (and only) generic
	/// argument and <c>SomeType<c> is the generic argument for <c>List</c>.
	/// </para>
	/// </summary>
	public class GenericArgument
	{
		string                    name;
		List<GenericArgument>     genericArguments;
		
		public GenericArgument() {
		}
		
		public GenericArgument(string name
		                     , List<GenericArgument> genericArguments) {
			this.name               = name;
			this.genericArguments   = genericArguments;
		}
		
		/// <summary>
		/// Gets or sets the collection of generic arguments (if this argument 
		/// is itself a generic type).
		/// <param>An argument is not generic if this property returns
		/// <c>null</c> or an empty <c>List</c>.</param>
		/// </summary>
		public List<GenericArgument> GenericArguments {
			get {
				return genericArguments;
			}
			set {
				genericArguments = value;
			}
		}
		
		/// <summary>
		/// Returns the name of this argument.
		/// </summary>
		public string Name {
			get {
				return name;
			}
			set {
				name = value;
			}
		}
	}
}
