//
// GenericParameter.cs: Represents a type parameter for generic types. It stores
//                      constraint information.
//
// Author:
//   Matej Urbas (matej.urbas@gmail.com)
//
// (C) 2006 Matej Urbas
// 

using System;
using System.Collections.Generic;

namespace MonoDevelop.Projects
{
	/// <summary>
	/// Contains information about generic parameters.
	/// <para>For example, if a class would be defined like this:
	/// <code>
	/// public class MyClass<T> where T : SomeType, new()
	/// {
	/// }
	/// </code>
	/// Then <c>T</c> is the <c>name</c> of the only generic parameter and
	/// <c>SomeType<c> and <c>new()</c> are constraints for this parameter.
	/// </para>
	/// </summary>
	public class GenericParameter
	{
		string                    name;
		List<TypeConstraint>      baseTypes;
		SpecialConstraintType     specialConstraints;
		
		public GenericParameter() {
		}
		
		public GenericParameter(string name
		                      , List<TypeConstraint> baseTypes
		                      , SpecialConstraintType specialConstraints) {
			this.name               = name;
			this.baseTypes          = baseTypes;
			this.specialConstraints = specialConstraints;
		}
		
		/// <summary>
		/// Gets or sets the collection of base types that constrain this
		/// parameter.
		/// <param>A parameter is not constrained if this property returns
		/// <c>null</c> or an empty <c>List</c>.</param>
		/// </summary>
		public List<TypeConstraint> BaseTypes {
			get {
				return baseTypes;
			}
			set {
				baseTypes = value;
			}
		}
		
		/// <summary>
		/// Returns the name of this parameter.
		/// </summary>
		public string Name {
			get {
				return name;
			}
			set {
				name = value;
			}
		}
		
		/// <summary>
		/// Gets or sets a value that indicates whether this parameter has the
		/// 'new' constraint applied to it (meaning that it has the default
		/// constructor).
		/// </summary>
		public bool HasNewConstraint {
			get {
				return (specialConstraints & SpecialConstraintType.New) > 0;
			}
			set {
				if (value)
					specialConstraints |= SpecialConstraintType.New;
				else
					specialConstraints &= ~SpecialConstraintType.New;
			}
		}
		
		/// <summary>
		/// Gets or sets a value that indicates whether this parameter has the
		/// 'struct' constraint applied to it (meaning that it can represent
		/// anything that is not a nullable type).
		/// </summary>
		public bool HasStructConstraint {
			get {
				return (specialConstraints & SpecialConstraintType.Struct) > 0;
			}
			set {
				if (value)
					specialConstraints |= SpecialConstraintType.Struct;
				else
					specialConstraints &= ~SpecialConstraintType.Struct;
			}
		}
		
		/// <summary>
		/// Gets or sets a value that indicates whether this parameter has the
		/// 'class' constraint applied to it (meaning that it can represent
		/// only reference type).
		/// </summary>
		public bool HasClassConstraint {
			get {
				return (specialConstraints & SpecialConstraintType.Class) > 0;
			}
			set {
				if (value)
					specialConstraints |= SpecialConstraintType.Class;
				else
					specialConstraints &= ~SpecialConstraintType.Class;
			}
		}
		
		/// <summary>
		/// Gets or sets a value that indicates what kind of special constraints
		/// this parameter has applied to it.
		/// </summary>
		public SpecialConstraintType SpecialConstraints {
			get {
				return specialConstraints;
			}
			set {
				specialConstraints = value;
			}
		}
	}
	
	/// <summary>
	/// Represents a type that constrains a generic type paramter (can be a
	/// class, an interface or a delegate). Constraints may also be generic and
	/// can use naked types as generic parameters.
	/// </summary>
	public class TypeConstraint
	{
		string                    typeName;
		bool                      isNaked;
		List<TypeConstraint>      genericParameters;
		
		public TypeConstraint() {
		}
		
		public TypeConstraint(string typeName
	                        , bool isNaked
	                        , List<TypeConstraint> genericParameters) {
			this.typeName = typeName;
		    this.isNaked  = isNaked;
		    this.genericParameters = genericParameters;
		}
		
		/// <summary>
		/// Gets or sets the name of the class which constraints a type
		/// parameter in the generic parameter list.
		/// </summary>
		public string TypeName {
			get {
				return typeName;
			}
			set {
				typeName = value;
			}
		}
		
		/// <summary>
		/// Gets or sets a value that indicates whether this is a naked
		/// constraint.
		/// </summary>
		public bool IsNaked {
			get {
				return isNaked;
			}
			set {
				isNaked = value;
			}
		}
		
		/// <summary>
		/// Gets or sets the list of all generic parameters for this constraint.
		/// </summary>
		public List<TypeConstraint> GenericParameters {
			get {
				return genericParameters;
			}
			set {
				genericParameters = value;
			}
		}
	}
	
	public enum SpecialConstraintType : byte
	{
		Class = 0x01,
		Struct = 0x02,
		New = 0x04
	}
}
