Index: Extras/CBinding/Parser/TagDatabaseManager.cs
===================================================================
--- Extras/CBinding/Parser/TagDatabaseManager.cs	(revision 88411)
+++ Extras/CBinding/Parser/TagDatabaseManager.cs	(working copy)
@@ -33,6 +33,7 @@
 using System.IO;
 using System.Text;
 using System.Collections.Generic;
+using System.Threading;
 
 using MonoDevelop.Projects;
 using MonoDevelop.Core;
@@ -49,10 +50,16 @@
 	public class TagDatabaseManager
 	{
 		private static TagDatabaseManager instance;
+		private Queue<ProjectFilePair> parsingJobs = new Queue<ProjectFilePair> ();
+		
 		public event ClassPadEventHandler FileUpdated;
 		
 		private TagDatabaseManager()
 		{
+			Thread t = new Thread (ParsingThread);
+			t.IsBackground = true;
+			t.Name = "CBinding parsing thread";
+			t.Start();
 		}
 		
 		public static TagDatabaseManager Instance
@@ -203,8 +210,36 @@
 			fileInfo.IsFilled = true;
 		}
 		
+		private void ParsingThread ()
+		{
+			while (true)
+			{
+				if (parsingJobs.Count > 0) {
+					ProjectFilePair p;
+					
+					lock (this) {
+						p = parsingJobs.Dequeue ();
+					}
+
+					DoUpdateFileTags (p.Project, p.File);
+				} else {
+					Thread.Sleep (1000);
+				}
+			}
+		}
+		
 		public void UpdateFileTags (Project project, string filename)
 		{
+			ProjectFilePair p = new ProjectFilePair (project, filename);
+
+			lock (this) {
+				if (!parsingJobs.Contains (p))
+					parsingJobs.Enqueue (p);
+			}
+		}
+		
+		private void DoUpdateFileTags (Project project, string filename)
+		{
 			string[] headers = Headers (filename, false);
 			string ctags_options = "--C++-kinds=+p+u --fields=+a-f+S --language-force=C++ --excmd=pattern -f - " + filename + " " + string.Join (" ", headers);
 			
@@ -225,9 +260,7 @@
 			
 			ProjectInformation info = ProjectInformationManager.Instance.Get (project);
 			string tagEntry;
-			
 
-			
 			using (StringReader reader = new StringReader (ctags_output)) {
 				while ((tagEntry = reader.ReadLine ()) != null) {
 					if (tagEntry.StartsWith ("!_")) continue;
@@ -568,5 +601,43 @@
 			
 			return res.ToArray ();
 		}
+		
+		private class ProjectFilePair
+		{
+			string file;
+			Project project;
+			
+			public ProjectFilePair (Project project, string file)
+			{
+				this.project = project;
+				this.file = file;
+			}
+			
+			public string File {
+				get { return file; }
+			}
+			
+			public Project Project {
+				get { return project; }
+			}
+			
+			public override bool Equals (object other)
+			{
+				ProjectFilePair o = other as ProjectFilePair;
+				
+				if (o == null)
+					return false;
+				
+				if (file == o.File && project == o.Project)
+					return true;
+				else
+					return false;
+			}
+			
+			public override int GetHashCode ()
+			{
+				return (project.ToString() + file).GetHashCode ();
+			}
+		}
 	}
 }
Index: Extras/CBinding/Navigation/ProjectNodeBuilderExtension.cs
===================================================================
--- Extras/CBinding/Navigation/ProjectNodeBuilderExtension.cs	(revision 88411)
+++ Extras/CBinding/Navigation/ProjectNodeBuilderExtension.cs	(working copy)
@@ -73,11 +73,11 @@
 			CProject p = dataObject as CProject;
 			
 			if (p == null) return;
-			
-			Thread builderThread = new Thread (new ParameterizedThreadStart (CreatePadTree));
-			builderThread.Name = "PadBuilder";
-			builderThread.IsBackground = true;
-			builderThread.Start (p);
+
+			foreach (ProjectFile f in p.ProjectFiles) {
+				if (f.BuildAction == BuildAction.Compile)
+					TagDatabaseManager.Instance.UpdateFileTags (p, f.Name);
+			}
 		}
 		
 		public override void Dispose ()
@@ -198,10 +198,10 @@
 			
 			if (p == null) return;
 			
-			Thread builderThread = new Thread (new ParameterizedThreadStart (ProjectNodeBuilderExtension.CreatePadTree));
-			builderThread.Name = "PadBuilder";
-			builderThread.IsBackground = true;
-			builderThread.Start (p);
+			foreach (ProjectFile f in p.ProjectFiles) {
+				if (f.BuildAction == BuildAction.Compile)
+					TagDatabaseManager.Instance.UpdateFileTags (p, f.Name);
+			}
 		}
 	}
 }