Index: Gui/Dialogs/ReferenceDialog/GacReferencePanel.cs
===================================================================
--- Gui/Dialogs/ReferenceDialog/GacReferencePanel.cs	(revision 2668)
+++ Gui/Dialogs/ReferenceDialog/GacReferencePanel.cs	(working copy)
@@ -20,15 +20,20 @@
 	{
 		SelectReferenceDialog selectDialog;
 
-		TreeStore store;
+		ListStore store;
+		TreeModelFilter filter;
 		TreeView  treeView;
+		Entry search;
 		
 		public GacReferencePanel(SelectReferenceDialog selectDialog)
 		{
 			this.selectDialog = selectDialog;
 			
-			store = new TreeStore (typeof (string), typeof (string), typeof(string), typeof(bool), typeof(string));
+			store = new ListStore (typeof (string), typeof (string), typeof(string), typeof(bool), typeof(string));
 			treeView = new TreeView (store);
+			filter = new TreeModelFilter (store, null);
+			filter.VisibleFunc = new TreeModelFilterVisibleFunc (SearchFilterFunc);
+			treeView.Model = filter;
 
 			TreeViewColumn firstColumn = new TreeViewColumn ();
 			firstColumn.Title = GettextCatalog.GetString ("Reference Name");
@@ -43,7 +48,8 @@
 			
 			treeView.AppendColumn (firstColumn);
 			treeView.AppendColumn (GettextCatalog.GetString ("Version"), new CellRendererText (), "text", 1);
-			treeView.AppendColumn (GettextCatalog.GetString ("Path"), new CellRendererText (), "text", 2);
+			// FIXME: this seems pretty useless
+			//treeView.AppendColumn (GettextCatalog.GetString ("Path"), new CellRendererText (), "text", 2);
 
 			store.SetSortColumnId (0, SortType.Ascending);
 			
@@ -51,11 +57,37 @@
 			ScrolledWindow sc = new ScrolledWindow ();
 			sc.ShadowType = Gtk.ShadowType.In;
 			sc.Add (treeView);
+			
+			HBox hbox = new HBox (false, 0);
+			hbox.PackStart (new Label (GettextCatalog.GetString ("_Search:")), false, true, 0);
+			search = new Entry ();
+			search.Activated += new EventHandler (OnSearch);
+			hbox.PackStart (search, true, true, 6);
+
+			this.PackStart (hbox, false, true, 3);
 			this.PackStart (sc, true, true, 0);
 			ShowAll ();
 			BorderWidth = 6;
 		}
+		
+		bool SearchFilterFunc (TreeModel model, TreeIter iter)
+		{
+			string term = search.Text.Trim ();
+			if (term.Length < 1)
+				return true;
 
+			string val = (string) model.GetValue (iter, 0);
+			// FIXME: should be able to search for 'sharp'
+			// and get all the *-sharp assemblies, etc.
+			// also doesn't handle case-sensitive
+			return val.StartsWith (term);
+		}
+
+		void OnSearch (object sender, EventArgs a)
+		{
+			filter.Refilter ();
+		}
+
 		public void Reset ()
 		{
 			store.Clear ();
