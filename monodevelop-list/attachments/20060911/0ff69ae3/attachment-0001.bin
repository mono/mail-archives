Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Ambience/Ambience.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Ambience/Ambience.cs	(revision 65242)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Ambience/Ambience.cs	(working copy)
@@ -86,6 +86,8 @@
 				return Convert (item as IMethod, conversionFlags);
 			else if (item is IProperty)
 				return Convert (item as IProperty, conversionFlags);
+			else if (item is LocalVariable)
+				return Convert (item as LocalVariable, conversionFlags);
 			else
 				return item.Name;
 		}
@@ -144,6 +146,12 @@
 		{
 			return Convert(modifier, ConversionFlags.StandardConversionFlags);
 		}
+
+		public string Convert(LocalVariable localVariable)
+		{
+			return Convert(localVariable, ConversionFlags.StandardConversionFlags);
+		}
+
 		
 		public abstract string Convert(IClass c, ConversionFlags flags);
 		public abstract string ConvertEnd(IClass c, ConversionFlags flags);
@@ -156,6 +164,7 @@
 		public abstract string Convert(IParameter param, ConversionFlags flags);
 		public abstract string Convert(IReturnType returnType, ConversionFlags flags);
 		public abstract string Convert(ModifierEnum modifier, ConversionFlags flags);
+		public abstract string Convert(LocalVariable localVariable, ConversionFlags flags);
 		
 		public abstract string WrapAttribute(string attribute);
 		public abstract string WrapComment(string comment);
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Ambience/NetAmbience.cs
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Ambience/NetAmbience.cs	(revision 65242)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.Ambience/NetAmbience.cs	(working copy)
@@ -1,321 +0,0 @@
-// <file>
-//     <copyright see="prj:///doc/copyright.txt"/>
-//     <license see="prj:///doc/license.txt"/>
-//     <owner name="Mike KrÃ¼ger" email="mike@icsharpcode.net"/>
-//     <version value="$version"/>
-// </file>
-
-using System;
-using System.Text;
-
-using MonoDevelop.Projects.Parser;
-using MonoDevelop.Core.Properties;
-using MonoDevelop.Core;
-
-namespace MonoDevelop.Projects.Ambience
-{
-	public class NetAmbience : Ambience
-	{		
-		public override string Convert(ModifierEnum modifier, ConversionFlags conversionFlags)
-		{
-			return "";
-		}
-		
-		public override string Convert(IClass c, ConversionFlags conversionFlags)
-		{
-			StringBuilder builder = new StringBuilder();
-			
-			if (ShowClassModifiers(conversionFlags)) {
-				switch (c.ClassType) {
-					case ClassType.Delegate:
-						builder.Append("Delegate");
-						break;
-					case ClassType.Class:
-						builder.Append("Class");
-						break;
-					case ClassType.Struct:
-						builder.Append("Structure");
-						break;
-					case ClassType.Interface:
-						builder.Append("Interface");
-						break;
-					case ClassType.Enum:
-						builder.Append("Enumeration");
-						break;
-				}
-				builder.Append(' ');
-			}
-			
-			if (UseFullyQualifiedNames(conversionFlags))
-				builder.Append (c.FullyQualifiedName);
-			else
-				builder.Append (c.Name);
-			
-			if (c.GenericParameters != null && c.GenericParameters.Count > 0)
- 			{
- 				builder.Append("&lt;");
- 				for (int i = 0; i < c.GenericParameters.Count; i++)
- 				{
- 					builder.Append(c.GenericParameters[i].Name);
- 					if (i + 1 < c.GenericParameters.Count) builder.Append(", ");
- 				}
- 				builder.Append("&gt;");
- 			}
-				
-			if (c.ClassType == ClassType.Delegate) {
-				builder.Append('(');
-				
-				foreach (IMethod m in c.Methods) {
-					if (m.Name != "Invoke") continue;
-					
-					for (int i = 0; i < m.Parameters.Count; ++i) {
-						builder.Append(Convert(m.Parameters[i]));
-						if (i + 1 < m.Parameters.Count) {
-							builder.Append(", ");
-						}
-					}					
-				}
-				
-				builder.Append(')');
-				if (c.Methods.Count > 0) {
-					builder.Append(" : ");
-					builder.Append(Convert(c.Methods[0].ReturnType));
-				}
-			} else if (ShowInheritanceList(conversionFlags)) {
-				if (c.BaseTypes.Count > 0) {
-					builder.Append(" : ");
-					for (int i = 0; i < c.BaseTypes.Count; ++i) {
-						builder.Append(c.BaseTypes[i]);
-						if (i + 1 < c.BaseTypes.Count) {
-							builder.Append(", ");
-						}
-					}
-				}
-			}
-			
-			if (IncludeBodies(conversionFlags)) {
-				builder.Append("\n{");
-			}
-			
-			return builder.ToString();		
-		}
-		
-		public override string ConvertEnd(IClass c, ConversionFlags conversionFlags)
-		{
-			return "}";
-		}
-		
-		public override string Convert(IField field, ConversionFlags conversionFlags)
-		{
-			StringBuilder builder = new StringBuilder();
-			if (ShowMemberModifiers(conversionFlags)) {
-				builder.Append("Field");
-				builder.Append(' ');
-			}
-			
-			if (UseFullyQualifiedNames(conversionFlags)) {
-				builder.Append(field.FullyQualifiedName);
-			} else {
-				builder.Append(field.Name);
-			}
-			
-			if (field.ReturnType != null) {
-				builder.Append(" : ");
-				builder.Append(Convert(field.ReturnType));
-			}
-			
-			return builder.ToString();			
-		}
-		
-		public override string Convert(IProperty property, ConversionFlags conversionFlags)
-		{
-			StringBuilder builder = new StringBuilder();
-			if (ShowMemberModifiers(conversionFlags)) {
-				builder.Append("Property");
-				builder.Append(' ');
-			}
-			
-			if (UseFullyQualifiedNames(conversionFlags)) {
-				builder.Append(property.FullyQualifiedName);
-			} else {
-				builder.Append(property.Name);
-			}
-
-			if (property.Parameters.Count > 0) builder.Append('(');
-			
-			for (int i = 0; i < property.Parameters.Count; ++i) {
-				builder.Append(Convert(property.Parameters[i]));
-				if (i + 1 < property.Parameters.Count) {
-					builder.Append(", ");
-				}
-			}
-			
-			if (property.Parameters.Count > 0) builder.Append(')');
-			
-			
-			if (property.ReturnType != null) {
-				builder.Append(" : ");
-				builder.Append(Convert(property.ReturnType));
-			}
-			return builder.ToString();
-		}
-		
-		public override string Convert(IEvent e, ConversionFlags conversionFlags)
-		{
-			StringBuilder builder = new StringBuilder();
-			if (ShowMemberModifiers(conversionFlags)) {
-				builder.Append("Event ");
-			}
-			
-			if (UseFullyQualifiedNames(conversionFlags)) {
-				builder.Append(e.FullyQualifiedName);
-			} else {
-				builder.Append(e.Name);
-			}
-			if (e.ReturnType != null) {
-				builder.Append(" : ");
-				builder.Append(Convert(e.ReturnType));
-			}
-			return builder.ToString();
-		}
-		
-		public override string Convert(IIndexer m, ConversionFlags conversionFlags)
-		{
-			StringBuilder builder = new StringBuilder();
-			if (ShowMemberModifiers(conversionFlags)) {
-				builder.Append("Indexer ");
-			}
-			
-			if (UseFullyQualifiedNames(conversionFlags)) {
-				builder.Append(m.FullyQualifiedName);
-			} else {
-				builder.Append(m.Name);
-			}
-			builder.Append('[');
-			for (int i = 0; i < m.Parameters.Count; ++i) {
-				builder.Append(Convert(m.Parameters[i]));
-				if (i + 1 < m.Parameters.Count) {
-					builder.Append(", ");
-				}
-			}
-			
-			builder.Append("]");
-			if (m.ReturnType != null) {
-				builder.Append(" : ");
-				builder.Append(Convert(m.ReturnType));
-			}
-			return builder.ToString();
-		}
-		
-		public override string Convert(IMethod m, ConversionFlags conversionFlags)
-		{
-			StringBuilder builder = new StringBuilder();
-			if (ShowMemberModifiers(conversionFlags)) {
-				builder.Append("Method ");
-			}
-			
-			if (UseFullyQualifiedNames(conversionFlags)) {
-				builder.Append(m.FullyQualifiedName);
-			} else {
-				builder.Append(m.Name);
-			}
-			builder.Append('(');
-			for (int i = 0; i < m.Parameters.Count; ++i) {
-				builder.Append(Convert(m.Parameters[i]));
-				if (i + 1 < m.Parameters.Count) {
-					builder.Append(", ");
-				}
-			}
-			
-			builder.Append(")");
-			if (m.ReturnType != null) {
-				builder.Append(" : ");
-				builder.Append(Convert(m.ReturnType));
-			}
-			
-			if (IncludeBodies(conversionFlags)) {
-				builder.Append(" {");
-			}
-			
-			return builder.ToString();
-		}
-		
-		public override string ConvertEnd(IMethod m, ConversionFlags conversionFlags)
-		{
-			return "}";
-		}	
-		
-		public override string Convert(IReturnType returnType, ConversionFlags conversionFlags)
-		{
-			if (returnType == null) {
-				return String.Empty;
-			}
-			StringBuilder builder = new StringBuilder();
-			
-			bool linkSet = false;
-			
-			//if (UseLinkArrayList(conversionFlags)) {
-				//SharpAssemblyReturnType ret = returnType as SharpAssemblyReturnType;
-				//if (ret != null) {
-				//	if (ret.UnderlyingClass != null) {
-				//		builder.Append("<a href='as://" + linkArrayList.Add(ret.UnderlyingClass) + "'>");
-				//		linkSet = true;
-				//	}
-				//}
-			//}
-			
-			if (UseFullyQualifiedNames(conversionFlags)) {
-				builder.Append(returnType.FullyQualifiedName);
-			} else {
-				builder.Append(returnType.Name);
-			}
-			
-			if (linkSet) {
-				builder.Append("</a>");
-			}
-			
-			for (int i = 0; i < returnType.PointerNestingLevel; ++i) {
-				builder.Append('*');
-			}
-			
-			for (int i = 0; i < returnType.ArrayCount; ++i) {
-				builder.Append('[');
-				for (int j = 1; j < returnType.ArrayDimensions[i]; ++j) {
-					builder.Append(',');
-				}
-				builder.Append(']');
-			}
-			
-			return builder.ToString();
-		}
-		
-		public override string Convert(IParameter param, ConversionFlags conversionFlags)
-		{
-			StringBuilder builder = new StringBuilder();
-			if (ShowParameterNames(conversionFlags)) {
-				builder.Append(param.Name);
-				builder.Append(" : ");
-			}
-			builder.Append(Convert(param.ReturnType));
-			if (param.IsRef) {
-				builder.Append("&amp;");
-			}
-			return builder.ToString();
-		}
-
-		public override string WrapAttribute(string attribute)
-		{
-			return "[" + attribute + "]";
-		}
-		
-		public override string WrapComment(string comment)
-		{
-			return "// " + comment;
-		}
-		
-		public override string GetIntrinsicTypeName(string dotNetTypeName)
-		{
-			return dotNetTypeName;
-		}
-	}
-}
Index: Core/src/MonoDevelop.Projects/ChangeLog
===================================================================
--- Core/src/MonoDevelop.Projects/ChangeLog	(revision 65242)
+++ Core/src/MonoDevelop.Projects/ChangeLog	(working copy)
@@ -1,3 +1,13 @@
+2006-09-11 Jacob IlsÃ¸ Christensen <jacobilsoe@gmail.com> 
+
+	* MonoDevelop.Projects.Ambience/NetAmbience.cs:
+	* MonoDevelop.Projects.mdp:
+	* Makefile.am:
+	Removed NetAmbience.cs as it does not seem to be used.
+
+	* MonoDevelop.Projects.Ambience/Ambience.cs:
+	Added Convert method for LocalVariable instances.
+
 2006-09-04 Lluis Sanchez Gual  <lluis@novell.com> 
 
 	* MonoDevelop.Projects/Project.cs: Workaround Mono bug. The watcher 
Index: Core/src/MonoDevelop.Projects/MonoDevelop.Projects.mdp
===================================================================
--- Core/src/MonoDevelop.Projects/MonoDevelop.Projects.mdp	(revision 65242)
+++ Core/src/MonoDevelop.Projects/MonoDevelop.Projects.mdp	(working copy)
@@ -19,7 +19,6 @@
     <File name="./MonoDevelop.Projects.Ambience/AmbienceService.cs" subtype="Code" buildaction="Compile" />
     <File name="./MonoDevelop.Projects.Ambience/CodeDOMGeneratorUtility.cs" subtype="Code" buildaction="Compile" />
     <File name="./MonoDevelop.Projects.Ambience/IAmbience.cs" subtype="Code" buildaction="Compile" />
-    <File name="./MonoDevelop.Projects.Ambience/NetAmbience.cs" subtype="Code" buildaction="Compile" />
     <File name="./MonoDevelop.Projects/Language.cs" subtype="Code" buildaction="Compile" />
     <File name="./MonoDevelop.Projects/LanguageService.cs" subtype="Code" buildaction="Compile" />
     <File name="./MonoDevelop.Projects/LanguageBindingService.cs" subtype="Code" buildaction="Compile" />
@@ -244,4 +243,4 @@
   <DeploymentInformation strategy="File">
     <excludeFiles />
   </DeploymentInformation>
-</Project>
\ No newline at end of file
+</Project>
Index: Core/src/MonoDevelop.Projects/Makefile.am
===================================================================
--- Core/src/MonoDevelop.Projects/Makefile.am	(revision 65242)
+++ Core/src/MonoDevelop.Projects/Makefile.am	(working copy)
@@ -16,7 +16,6 @@
 MonoDevelop.Projects.Ambience/AmbienceService.cs \
 MonoDevelop.Projects.Ambience/CodeDOMGeneratorUtility.cs \
 MonoDevelop.Projects.Ambience/IAmbience.cs \
-MonoDevelop.Projects.Ambience/NetAmbience.cs \
 MonoDevelop.Projects.Deployment/DeployHandler.cs \
 MonoDevelop.Projects.Deployment/DeployService.cs \
 MonoDevelop.Projects.Deployment/DeployTarget.cs \
Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs	(revision 65242)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs	(working copy)
@@ -24,15 +24,24 @@
 			
 			if (item is IParameter) {
 				s = "<small><i>" + GettextCatalog.GetString ("Parameter") + "</i></small>\n";
-				s += ambience.Convert ((IParameter)item, WindowConversionFlags);
+				s += ambience.Convert((IParameter)item, WindowConversionFlags);
 			}
 			else if (item is LocalVariable) {
-				LocalVariable var = (LocalVariable) item;
-				s = "<small><i>" + GettextCatalog.GetString ("Local variable") + "</i></small>\n" + var.ReturnType.FullyQualifiedName + " " + var.Name;
-			} else if (item is Namespace)
+				s = "<small><i>" + GettextCatalog.GetString ("Local variable") + "</i></small>\n";
+				s += ambience.Convert((LocalVariable)item, WindowConversionFlags);
+			}
+			else if (item is IField) {				
+				s = "<small><i>" + GettextCatalog.GetString ("Field") + "</i></small>\n";
+				s += ambience.Convert((IField)item, WindowConversionFlags);
+			}
+			else if (item is IProperty) {				
+				s = "<small><i>" + GettextCatalog.GetString ("Property") + "</i></small>\n";
+				s += ambience.Convert((IProperty)item, WindowConversionFlags);
+			}
+			else if (item is Namespace)
 				s = "namespace " + "<b>" + item.Name + "</b>";
 			else
-				s = ambience.Convert (item, WindowConversionFlags);
+				s = ambience.Convert(item, WindowConversionFlags);
 
 			string doc = GetDocumentation (item.Documentation).Trim ('\n');
 			if (doc.Length > 0)
Index: Extras/MonoDevelop.SourceEditor/ChangeLog
===================================================================
--- Extras/MonoDevelop.SourceEditor/ChangeLog	(revision 65242)
+++ Extras/MonoDevelop.SourceEditor/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2006-09-11 Jacob IlsÃ¸ Christensen  <jacobilsoe@gmail.com>
+
+	* MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs: Moved
+	things to Ambience plus cleaned up a bit.
+
 2006-09-01 Lluis Sanchez Gual  <lluis@novell.com>
 
 	* MonoDevelop.SourceEditor.Gui/SourceEditorDisplayBinding.cs:
@@ -3,7 +8,7 @@
 	  Added missing Dispose call to base class.
 
-2006-08-11  Jacob IlsÃ¸ Christensen  <jacobilsoe@gmail.com>
+2006-08-11 Jacob IlsÃ¸ Christensen  <jacobilsoe@gmail.com>
 
-	*  MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs: Prepend
+	* MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs: Prepend
 	namespace tooltips with a namespace clause.
 
Index: Extras/VBNetBinding/ChangeLog
===================================================================
--- Extras/VBNetBinding/ChangeLog	(revision 65242)
+++ Extras/VBNetBinding/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2006-09-11 Jacob IlsÃ¸ Christensen <jacobilsoe@gmail.com>
+
+	* VBAmbience.cs: Track changes in Ambience.
+
 2006-07-11 Philip Turnbull <philip.turnbull@gmail.com>
 
 	* VBNetBinding/VBNetBinding.addin.xml:
Index: Extras/VBNetBinding/VBAmbience.cs
===================================================================
--- Extras/VBNetBinding/VBAmbience.cs	(revision 65242)
+++ Extras/VBNetBinding/VBAmbience.cs	(working copy)
@@ -551,6 +551,17 @@
 			builder.Append(Convert(param.ReturnType, conversionFlags));
 
 			return builder.ToString();
+		}
+
+		public override string Convert(LocalVariable localVariable, ConversionFlags conversionFlags)
+		{
+			StringBuilder builder = new StringBuilder();
+										
+			builder.Append(localVariable.Name);
+			builder.Append(" As ");			
+			builder.Append(Convert(localVariable.ReturnType, conversionFlags));
+
+			return builder.ToString();
 		}
 
 		public override string WrapAttribute(string attribute)
Index: Extras/CSharpBinding/ChangeLog
===================================================================
--- Extras/CSharpBinding/ChangeLog	(revision 65242)
+++ Extras/CSharpBinding/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2006-09-11 Jacob IlsÃ¸ Christensen <jacobilsoe@gmail.com>
+	
+	* Parser/CSharpVisitor.cs: Fixed compile warning.
+	* CSharpAmbience.cs: Track changes in Ambience.
+
 2006-09-01 Lluis Sanchez Gual  <lluis@novell.com>
 
 	* CSharpBinding/CSharpAmbience.cs: Avoid appending the class
Index: Extras/CSharpBinding/Parser/CSharpVisitor.cs
===================================================================
--- Extras/CSharpBinding/Parser/CSharpVisitor.cs	(revision 65242)
+++ Extras/CSharpBinding/Parser/CSharpVisitor.cs	(working copy)
@@ -13,8 +13,6 @@
 using ClassType = MonoDevelop.Projects.Parser.ClassType;
 using CSGenericParameter = CSharpBinding.Parser.SharpDevelopTree.GenericParameter;
 
-using MonoDevelop.Projects.Parser;
-
 namespace CSharpBinding.Parser
 {
 	public class Using : AbstractUsing
Index: Extras/CSharpBinding/CSharpAmbience.cs
===================================================================
--- Extras/CSharpBinding/CSharpAmbience.cs	(revision 65242)
+++ Extras/CSharpBinding/CSharpAmbience.cs	(working copy)
@@ -16,7 +16,7 @@
 
 namespace CSharpBinding
 {
-	public class CSharpAmbience :  Ambience
+	public class CSharpAmbience : Ambience
 	{
 		static string[,] typeConversionList = new string[,] {
 			{"System.Void",    "void"},
@@ -546,10 +546,25 @@
 			
 			if (ShowParameterNames(conversionFlags)) {
 				builder.Append(' ');
+				builder.Append("<b>");
 				builder.Append(param.Name);
+				builder.Append("</b>");
 			}
 			return builder.ToString();
 		}
+
+		public override string Convert(LocalVariable localVariable, ConversionFlags conversionFlags)
+		{
+			StringBuilder builder = new StringBuilder();						
+			
+			builder.Append(Convert(localVariable.ReturnType, conversionFlags));						
+			builder.Append(' ');
+			builder.Append("<b>");
+			builder.Append(localVariable.Name);
+			builder.Append("</b>");
+			
+			return builder.ToString();
+		}
 		
 		// pango has some problems with
 		// <i>static </i>bool <b>Equals</b> (<i></i>object a, <i></i>object b)