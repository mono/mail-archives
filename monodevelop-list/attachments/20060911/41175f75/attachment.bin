Index: Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs
===================================================================
--- Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs	(revision 65242)
+++ Extras/MonoDevelop.SourceEditor/MonoDevelop.SourceEditor.Gui/LanguageItemWindow.cs	(working copy)
@@ -28,8 +28,13 @@
 			}
 			else if (item is LocalVariable) {
 				LocalVariable var = (LocalVariable) item;
-				s = "<small><i>" + GettextCatalog.GetString ("Local variable") + "</i></small>\n" + var.ReturnType.FullyQualifiedName + " " + var.Name;
-			} else if (item is Namespace)
+				s = "<small><i>" + GettextCatalog.GetString ("Local variable") + "</i></small>\n" + var.ReturnType.FullyQualifiedName + " <b>" + var.Name + "</b>";
+			}
+			else if (item is IField) {
+				IField field = item as IField;
+				s = "<small><i>" + GettextCatalog.GetString ("Field") + "</i></small>\n" + field.ReturnType.FullyQualifiedName + " <b>" + field.Name + "</b>";
+			}
+			else if (item is Namespace)
 				s = "namespace " + "<b>" + item.Name + "</b>";
 			else
 				s = ambience.Convert (item, WindowConversionFlags);
Index: Extras/CSharpBinding/CSharpAmbience.cs
===================================================================
--- Extras/CSharpBinding/CSharpAmbience.cs	(revision 65242)
+++ Extras/CSharpBinding/CSharpAmbience.cs	(working copy)
@@ -546,7 +546,9 @@
 			
 			if (ShowParameterNames(conversionFlags)) {
 				builder.Append(' ');
+				builder.Append("<b>");
 				builder.Append(param.Name);
+				builder.Append("</b>");
 			}
 			return builder.ToString();
 		}