Index: Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/ProjectOperations.cs
===================================================================
--- Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/ProjectOperations.cs	(revision 81150)
+++ Core/src/MonoDevelop.Ide/MonoDevelop.Ide.Gui/ProjectOperations.cs	(working copy)
@@ -898,10 +898,15 @@
 		
 		public IAsyncOperation Execute (CombineEntry entry)
 		{
+			ExecutionContext context = new ExecutionContext (new DefaultExecutionHandlerFactory (), IdeApp.Workbench.ProgressMonitors);
+			return Execute (entry, context);
+		}
+		
+		public IAsyncOperation Execute (CombineEntry entry, ExecutionContext context)
+		{
 			if (currentRunOperation != null && !currentRunOperation.IsCompleted) return currentRunOperation;
 
 			IProgressMonitor monitor = new MessageDialogProgressMonitor ();
-			ExecutionContext context = new ExecutionContext (new DefaultExecutionHandlerFactory (), IdeApp.Workbench.ProgressMonitors);
 
 			Services.DispatchService.ThreadDispatch (new StatefulMessageHandler (ExecuteCombineEntryAsync), new object[] {entry, monitor, context});
 			currentRunOperation = monitor.AsyncOperation;
@@ -1037,6 +1042,21 @@
 			}
 		}
 		
+		public IAsyncOperation ExecuteFile (string file, ExecutionContext context)
+		{
+			Project tempProject = projectService.CreateSingleFileProject (file);
+			if (tempProject != null) {
+				IAsyncOperation aop = Execute (tempProject, context);
+				ProjectOperationHandler h = new ProjectOperationHandler ();
+				h.Project = tempProject;
+				aop.Completed += new OperationHandler (h.Run);
+				return aop;
+			} else {
+				Services.MessageService.ShowError(GettextCatalog.GetString ("No runnable executable found."));
+				return NullAsyncOperation.Failure;
+			}
+		}
+		
 		public IAsyncOperation Rebuild (CombineEntry entry)
 		{
 			if (currentBuildOperation != null && !currentBuildOperation.IsCompleted) return currentBuildOperation;
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core.Execution/ProcessWrapper.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core.Execution/ProcessWrapper.cs	(revision 81150)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core.Execution/ProcessWrapper.cs	(working copy)
@@ -73,6 +73,10 @@
 			get { return ExitCode; }
 		}
 		
+		int IProcessAsyncOperation.ProcessId {
+			get { return Id; }
+		}
+		
 		void IAsyncOperation.Cancel ()
 		{
 			try {
Index: Core/src/MonoDevelop.Core/MonoDevelop.Core.Execution/IProcessAsyncOperation.cs
===================================================================
--- Core/src/MonoDevelop.Core/MonoDevelop.Core.Execution/IProcessAsyncOperation.cs	(revision 81150)
+++ Core/src/MonoDevelop.Core/MonoDevelop.Core.Execution/IProcessAsyncOperation.cs	(working copy)
@@ -34,5 +34,7 @@
 	public interface IProcessAsyncOperation: IAsyncOperation
 	{
 		int ExitCode { get; }
+		
+		int ProcessId { get; }
 	}
 }