Index: MonoDevelop.Projects.Formats.MSBuild/MSBuildProjectHandler.cs
===================================================================
--- MonoDevelop.Projects.Formats.MSBuild/MSBuildProjectHandler.cs	(revision 159660)
+++ MonoDevelop.Projects.Formats.MSBuild/MSBuildProjectHandler.cs	(working copy)
@@ -283,6 +283,9 @@
 					item = st.CreateInstance (language);
 					if (!string.IsNullOrEmpty (st.Import))
 						targetImports.AddRange (st.Import.Split (':'));
+					if (!string.IsNullOrEmpty (st.Exclude))
+						foreach (string e in st.Exclude.Split (':'))
+							targetImports.Remove (e);
 				} else
 					throw new InvalidOperationException ("Unknown solution item type.");
 			}
Index: MonoDevelop.Projects.Extensions/DotNetProjectSubtypeNode.cs
===================================================================
--- MonoDevelop.Projects.Extensions/DotNetProjectSubtypeNode.cs	(revision 159660)
+++ MonoDevelop.Projects.Extensions/DotNetProjectSubtypeNode.cs	(working copy)
@@ -45,6 +45,9 @@
 		[NodeAttribute]
 		string extension;
 
+		[NodeAttribute]
+		string exclude;
+
 		Type itemType;
 
 		public string Import {
@@ -70,6 +73,12 @@
 			}
 		}
 		
+		public string Exclude {
+			get { 
+				return exclude; 
+			}
+		}
+		
 		public bool SupportsType (string guid)
 		{
 			return string.Compare (this.guid, guid, true) == 0;
@@ -99,6 +108,9 @@
 			MSBuildProjectHandler h = (MSBuildProjectHandler) ProjectExtensionUtil.GetItemHandler (item);
 			if (!string.IsNullOrEmpty (import))
 				h.TargetImports.AddRange (import.Split (':'));
+			if (!string.IsNullOrEmpty (exclude))
+				foreach (string e in exclude.Split (':'))
+					h.TargetImports.Remove (e);
 			h.SubtypeGuids.Add (guid);
 		}
 	}