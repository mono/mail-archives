using System;
using System.Diagnostics;
using static System.Console;

namespace Scratchpad3
{
    struct Vector3
    {
        public readonly double X;
        public readonly double Y;
        public readonly double Z;

        public Vector3(double x, double y, double z)
        {
            X = x;
            Y = y;
            Z = z;
        }

        public static Vector3 Cross(Vector3 lhs, Vector3 rhs)
            => new Vector3(
                lhs.Y * rhs.Z - rhs.Y * lhs.Z,
                rhs.X * lhs.Z - lhs.X * rhs.Z,
                lhs.X * rhs.Y - rhs.X * lhs.Y);

        public static Vector3 Cross(ref Vector3 lhs, ref Vector3 rhs)
            => new Vector3(
                lhs.Y * rhs.Z - rhs.Y * lhs.Z,
                rhs.X * lhs.Z - lhs.X * rhs.Z,
                lhs.X * rhs.Y - rhs.X * lhs.Y);

        public static Vector3 Cross(Vector3 lhs, ref Vector3 rhs)
            => new Vector3(
                lhs.Y * rhs.Z - rhs.Y * lhs.Z,
                rhs.X * lhs.Z - lhs.X * rhs.Z,
                lhs.X * rhs.Y - rhs.X * lhs.Y);

        public static Vector3 Cross(ref Vector3 lhs, Vector3 rhs)
            => new Vector3(
                lhs.Y * rhs.Z - rhs.Y * lhs.Z,
                rhs.X * lhs.Z - lhs.X * rhs.Z,
                lhs.X * rhs.Y - rhs.X * lhs.Y);

        public static void Cross(
            ref Vector3 lhs, 
            ref Vector3 rhs, 
            out Vector3 result)
        {
            result = new Vector3(
                lhs.Y * rhs.Z - rhs.Y * lhs.Z,
                rhs.X * lhs.Z - lhs.X * rhs.Z,
                lhs.X * rhs.Y - rhs.X * lhs.Y);
        }

    }

    class Program
    {
        const int NUM_VECTORS = 20000000;
        static void Main(string[] args)
        {
            var vectors = new Vector3[NUM_VECTORS];
            var results1 = new Vector3[NUM_VECTORS];
            var results2 = new Vector3[NUM_VECTORS];
            var results3 = new Vector3[NUM_VECTORS];
            var results4 = new Vector3[NUM_VECTORS];

            var rnd = new Random(NUM_VECTORS);

            WriteLine("Preparing test data");
            for (int i = 0; i < NUM_VECTORS; i++) {
                vectors[i] = new Vector3(
                    rnd.NextDouble(), 
                    rnd.NextDouble(), 
                    rnd.NextDouble());
            }
            WriteLine("Test data ready");

            var sw = new Stopwatch();

            retry:

            sw.Restart();
            for (int i = 1; i < NUM_VECTORS-1; i++) {
                results1[i] = Vector3.Cross(
                    Vector3.Cross(vectors[i - 1], vectors[i]), 
                    vectors[i+1]);
            }
            sw.Stop();
            WriteLine($"By value: elapsed milliseconds: {sw.ElapsedMilliseconds}");

            sw.Restart();
            for (int i = 1; i < NUM_VECTORS - 1; i++) {
                results2[i] = Vector3.Cross(
                    Vector3.Cross(ref vectors[i - 1], ref vectors[i]),
                    ref vectors[i + 1]);
            }
            sw.Stop();
            WriteLine($"Mixed by ref/value: elapsed milliseconds: {sw.ElapsedMilliseconds}");

            sw.Restart();
            for (int i = 1; i < NUM_VECTORS - 1; i++) {
                var temp3 = Vector3.Cross(ref vectors[i - 1], ref vectors[i]);
                results3[i] = Vector3.Cross(ref temp3, ref vectors[i + 1]);
            }
            sw.Stop();
            WriteLine($"By ref: elapsed milliseconds: {sw.ElapsedMilliseconds}");

            sw.Restart();
            for (int i = 1; i < NUM_VECTORS - 1; i++) {
                Vector3.Cross(ref vectors[i - 1], ref vectors[i], out var temp4);
                Vector3.Cross(ref temp4, ref vectors[i + 1], out results4[i]);
            }
            sw.Stop();
            WriteLine($"By ref/out: elapsed milliseconds: {sw.ElapsedMilliseconds}");

            WriteLine("Done! Press spacebar to retry");
            if (ReadKey(true).KeyChar == ' ') goto retry;
        }
    }
}
