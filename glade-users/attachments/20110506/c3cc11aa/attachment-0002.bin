#include <gtk/gtk.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

typedef struct _MyData MyData;
struct _MyData {
  GtkWidget *window1;
  GtkWidget *menubar1;
  GtkWidget *view;
  GtkAction *cut_action;
  GtkAction *copy_action;
  GtkAction *paste_action;
  GtkWidget *entry1;
  GtkWidget *entry2;
};

/* Prototypes */
void on_entry1_activate (GtkWidget *, MyData *);
void on_entry2_activate (GtkWidget *, MyData *);
void on_cut   (GtkAction *, MyData *);
void on_copy  (GtkAction *, MyData *);
void on_paste (GtkAction *, MyData *);
void on_has_selection_notify (GtkTextBuffer *, GParamSpec *, MyData *);

int
main (int argc, char **argv)
{
  MyData *data;
  GtkBuilder *builder;
  GtkWidget *window1;

  gtk_init (&argc, &argv);

  builder = gtk_builder_new();

  data = g_slice_new (MyData);

  gtk_builder_add_from_file (builder, "menubar.glade", NULL);

  data->window1       = GTK_WIDGET (gtk_builder_get_object (builder, "window1"));
  data->menubar1      = GTK_WIDGET (gtk_builder_get_object (builder, "menubar1"));
  data->view          = GTK_WIDGET (gtk_builder_get_object (builder, "view"));
  data->cut_action    = GTK_ACTION (gtk_builder_get_object (builder, "cut_action"));
  data->copy_action   = GTK_ACTION (gtk_builder_get_object (builder, "copy_action"));
  data->paste_action  = GTK_ACTION (gtk_builder_get_object (builder, "paste_action"));
  data->entry1        = GTK_WIDGET (gtk_builder_get_object (builder, "entry1"));
  data->entry2        = GTK_WIDGET (gtk_builder_get_object (builder, "entry2"));

  gtk_builder_connect_signals (builder, NULL);

  window1 = GTK_WIDGET (gtk_builder_get_object (builder, "window1"));
  gtk_window_set_position (GTK_WINDOW (window1), GTK_WIN_POS_CENTER);


  g_object_unref (G_OBJECT (builder));

  gtk_widget_show (data->window1);

  gtk_main ();

  g_slice_free (MyData, data);
  
  return (0);
}

/* SIGNAL HANDLERS */

void on_entry1_activate (GtkWidget *entry1, MyData *data)
{
  const gchar *entry1_text;

  entry1_text = gtk_entry_get_text (GTK_ENTRY (entry1));

  printf ("Entry 1: %s\n", entry1_text);
}

void on_entry2_activate (GtkWidget *entry2, MyData *data)
{
  const gchar *entry2_text;

  entry2_text = gtk_entry_get_text (GTK_ENTRY (entry2));

  printf ("Entry 2: %s\n", entry2_text);
}

void
on_cut (GtkAction *action, MyData *data)
{
    g_signal_emit_by_name (data->view, "cut-clipboard", NULL);
    gtk_action_set_sensitive (data->paste_action, TRUE);
}

void
on_copy (GtkAction *action, MyData *data)
{
    g_signal_emit_by_name (data->view, "copy-clipboard", NULL);
    gtk_action_set_sensitive (data->paste_action, TRUE);
}

void
on_paste (GtkAction *action, MyData *data)
{
    g_signal_emit_by_name (data->view, "paste-clipboard", NULL);
}

void
on_has_selection_notify (const gchar *entry_text, GParamSpec *pspec, MyData *data)
{
/*  gboolean has_selection = gtk_text_buffer_get_has_selection (buffer);     ??? what to do ??? */
    gtk_action_set_sensitive (data->cut_action, has_selection);
    gtk_action_set_sensitive (data->copy_action, has_selection);
}

