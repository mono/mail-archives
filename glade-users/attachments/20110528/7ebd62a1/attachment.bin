#include "test5.h"

static gpointer
thread_func (TestData *data)
{
  printf ("Cycling commences\n");

  while (data->cycle == 1) {
    sleep (1);
    gdk_threads_enter();
    gtk_button_set_label (GTK_BUTTON (data->button1), "Thread" );
    gdk_threads_leave();

    sleep (1);
    gdk_threads_enter();
    gtk_button_set_label (GTK_BUTTON (data->button1), "Cycle" );
    gdk_threads_leave();
  }

    return( NULL );
}
 
gboolean
on_button1_clicked (GtkButton *button, TestData *data)
{
  GThread *thread;
  GError *error = NULL;

// No need to call gdk_threads_enter/gdk_threads_leave,
// since gtk callbacks are executed withing main lock.

  if (data->cycle == 0) {
    thread = g_thread_create (thread_func, data, FALSE, &error);
    if (! thread) {
      g_print ("Error: %s\n", error->message);
      return (FALSE);
    }

    printf ("Button 1 clicked asking for cycle to commence\n");

    data->cycle = 1;
  }

  return (TRUE);
}

gboolean
on_button2_clicked (GtkButton *button, TestData *data)
{
  printf ("Button 2 clicked to stop cycle\n");
  data->cycle = 0;

  return (TRUE);
}
 
int
main (int argc, char **argv)
{
  GtkBuilder *builder;
  TestData *data;
  GError *error = NULL;
 
// Secure glib
  if (! g_thread_supported())
    g_thread_init (NULL);
 
// Secure gtk
  gdk_threads_init ();
 
// Obtain gtk's global lock
  gdk_threads_enter();
 
// Do stuff as usual
  gtk_init (&argc, &argv);
 
// Create new GtkBuilder object
  builder = gtk_builder_new ();
  if (! gtk_builder_add_from_file (builder, "test5.glade", &error)) {
    g_warning ("%s", error->message);
    g_free (error);
    return (1);
  }

// Allocate data structure
  data = g_slice_new (TestData);

// Get objects from UI
  data->main_window = GTK_WIDGET (gtk_builder_get_object (builder, "main_window"));
  data->button1 = GTK_BUTTON (gtk_builder_get_object (builder, "button1"));
  data->button2 = GTK_BUTTON (gtk_builder_get_object (builder, "button2"));
  data->cycle = 0;

  gtk_builder_connect_signals (builder, data);

// Show window. All other widgets are automatically shown by GtkBuilder
  gtk_widget_show (data->main_window);
  gtk_main ();

// Free any allocated data
  g_slice_free (TestData, data);

// Release gtk's global lock
  gdk_threads_leave ();

  return (0);
}
