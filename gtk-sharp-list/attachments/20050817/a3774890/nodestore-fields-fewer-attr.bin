Index: sample/NodeViewDemo.cs
===================================================================
--- sample/NodeViewDemo.cs	(revision 48444)
+++ sample/NodeViewDemo.cs	(working copy)
@@ -10,25 +10,21 @@
 	using System.Reflection;
 	using Gtk;
 
-	[TreeNode (ColumnCount=2)]
 	public class DemoTreeNode : TreeNode {
-
-		string name;
 		string desc;
 		static int count = 0;
 
 		public DemoTreeNode (string name, string desc)
 		{
-			this.name = name;
+			this.Name = name;
 			this.desc = desc;
 			count++;
 		}
-
-		[TreeNodeValue (Column=0)]
-		public string Name {
-			get { return name; }
-		}
-
+		
+		// TreeNodeValues can come from both properties and fields
+		[TreeNodeValue (Column=0)]	
+		public string Name;
+		
 		[TreeNodeValue (Column=1)]
 		public string Description {
 			get { return desc; }
Index: gtk/TreeNodeAttribute.cs
===================================================================
--- gtk/TreeNodeAttribute.cs	(revision 48444)
+++ gtk/TreeNodeAttribute.cs	(working copy)
@@ -25,16 +25,12 @@
 
 	[AttributeUsage(AttributeTargets.Class)]
 	public sealed class TreeNodeAttribute : Attribute {
-		int col_count;
 		bool list_only;
-
+		
+		[Obsolete ("This is no longer needed; it gets detected by gtk#")]
 		public int ColumnCount {
-			get {
-				return col_count;
-			}
-			set {
-				col_count = value;
-			}
+			get { return 0; }
+			set { }
 		}
 
 		public bool ListOnly {
Index: gtk/TreeNodeValueAttribute.cs
===================================================================
--- gtk/TreeNodeValueAttribute.cs	(revision 48444)
+++ gtk/TreeNodeValueAttribute.cs	(working copy)
@@ -23,7 +23,7 @@
 
 	using System;
 
-	[AttributeUsage (AttributeTargets.Property, AllowMultiple = true)]
+	[AttributeUsage (AttributeTargets.Property | AttributeTargets.Field)]
 	public sealed class TreeNodeValueAttribute : Attribute {
 
 		int col;
Index: gtk/NodeStore.cs
===================================================================
--- gtk/NodeStore.cs	(revision 48444)
+++ gtk/NodeStore.cs	(working copy)
@@ -92,8 +92,8 @@
 
 		Hashtable node_hash = new IDHashtable ();
  		GLib.GType[] ctypes; 
-		PropertyInfo[] getters;
-		int n_cols = 1;
+		MemberInfo [] getters;
+		int n_cols;
 		bool list_only = false;
 		ArrayList nodes = new ArrayList ();
 		TreeModelIfaceDelegates tree_model_iface;
@@ -150,7 +150,11 @@
 			if (node == null)
 				return;
 			g_value_init (ref val, ctypes [col].Val);
-			object col_val = getters[col].GetValue (node, null);
+			object col_val;
+			if (getters [col] is PropertyInfo)
+				col_val = ((PropertyInfo) getters [col]).GetValue (node, null);
+			else
+				col_val = ((FieldInfo) getters [col]).GetValue (node);
 			val.Val = col_val;
 		}
 
@@ -293,20 +297,30 @@
 
 		void ScanType (Type type)
 		{
-			foreach (TreeNodeAttribute attr in type.GetCustomAttributes (typeof (TreeNodeAttribute), false)) {
-				n_cols = attr.ColumnCount;
-				list_only = attr.ListOnly;
-			}
+			TreeNodeAttribute tna = (TreeNodeAttribute) Attribute.GetCustomAttribute (type, typeof (TreeNodeAttribute), false);
+			if (tna != null)
+				list_only = tna.ListOnly;
+			
+			ArrayList minfos = new ArrayList ();
+			
+			foreach (PropertyInfo pi in type.GetProperties ())
+				if (Attribute.IsDefined (pi, typeof (TreeNodeValueAttribute), false))
+					minfos.Add (pi);
+			foreach (FieldInfo fi in type.GetFields ())
+				if (Attribute.IsDefined (fi, typeof (TreeNodeValueAttribute), false))
+					minfos.Add (fi);
+			
+ 			ctypes = new GLib.GType [minfos.Count];
+ 			getters = new MemberInfo [minfos.Count];
 
- 			ctypes = new GLib.GType [n_cols];
- 			getters = new PropertyInfo [n_cols];
-
-			foreach (PropertyInfo pi in type.GetProperties ()) {
-				foreach (TreeNodeValueAttribute attr in pi.GetCustomAttributes (typeof (TreeNodeValueAttribute), false)) {
-					int col = attr.Column;
-					getters [col] = pi;
-                                        ctypes[col] = (GLib.GType) pi.PropertyType;
-				}
+			foreach (MemberInfo mi in minfos) {
+				TreeNodeValueAttribute tnva = (TreeNodeValueAttribute) Attribute.GetCustomAttribute (
+					mi, typeof (TreeNodeValueAttribute), false);
+				int col = tnva.Column;
+				getters [col] = mi;
+				Type t = mi is PropertyInfo ? ((PropertyInfo) mi).PropertyType
+				                            : ((FieldInfo) mi).FieldType;
+                                ctypes [col] = (GLib.GType) t;
 			}
 		}
 

