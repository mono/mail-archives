using System;
using Gtk;

public partial class MainWindow: Gtk.Window
{
	public class CellRendererString : CellRendererText
	{
		[GLib.Property("object")]
		public object Object
		{ get; set; }

		public override void GetSize (Gtk.Widget widget, ref Gdk.Rectangle cell_area, out int x_offset, out int y_offset, out int width, out int height)
		{
			Text = Object.ToString();
			base.GetSize (widget, ref cell_area, out x_offset, out y_offset, out width, out height);
		}

		protected override void Render (Gdk.Drawable window, Gtk.Widget widget, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gdk.Rectangle expose_area, Gtk.CellRendererState flags)
		{
			Text = Object.ToString();
			base.Render (window, widget, background_area, cell_area, expose_area, flags);
		}
	}
	
	public MainWindow (): base (Gtk.WindowType.Toplevel)
	{
		Build ();

		ListStore ls = new ListStore(typeof(object));

		treeview1.Model = ls;

		treeview1.AppendColumn("Test", new CellRendererString(), "object", 0);

		ls.AppendValues(DateTime.Now);
		ls.AppendValues(System.Guid.NewGuid());
	}
	
	protected void OnDeleteEvent (object sender, DeleteEventArgs a)
	{
		Application.Quit ();
		a.RetVal = true;
	}
}