// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class CellRenderer : Gtk.Object {

		public CellRenderer(IntPtr raw) : base(raw) {}

		protected CellRenderer() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("mode")]
		public Gtk.CellRendererMode Mode {
			get {
				GLib.Value val = GetProperty ("mode");
				Gtk.CellRendererMode ret = (Gtk.CellRendererMode) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("mode", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("cell-background")]
		public string CellBackground {
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("cell-background", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("is-expanded")]
		public bool IsExpanded {
			get {
				GLib.Value val = GetProperty ("is-expanded");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("is-expanded", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("xpad")]
		public uint Xpad {
			get {
				GLib.Value val = GetProperty ("xpad");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("xpad", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("ypad")]
		public uint Ypad {
			get {
				GLib.Value val = GetProperty ("ypad");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("ypad", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("editing")]
		public bool Editing {
			get {
				GLib.Value val = GetProperty ("editing");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("is-expander")]
		public bool IsExpander {
			get {
				GLib.Value val = GetProperty ("is-expander");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("is-expander", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("yalign")]
		public float Yalign {
			get {
				GLib.Value val = GetProperty ("yalign");
				float ret = (float) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("yalign", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("cell-background-gdk")]
		public Gdk.Color CellBackgroundGdk {
			get {
				GLib.Value val = GetProperty ("cell-background-gdk");
				Gdk.Color ret = (Gdk.Color) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = (GLib.Value) value;
				SetProperty("cell-background-gdk", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("width")]
		public int Width {
			get {
				GLib.Value val = GetProperty ("width");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("width", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("xalign")]
		public float Xalign {
			get {
				GLib.Value val = GetProperty ("xalign");
				float ret = (float) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("xalign", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("sensitive")]
		public bool Sensitive {
			get {
				GLib.Value val = GetProperty ("sensitive");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("sensitive", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("visible")]
		public bool Visible {
			get {
				GLib.Value val = GetProperty ("visible");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("visible", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("height")]
		public int Height {
			get {
				GLib.Value val = GetProperty ("height");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("height", val);
				val.Dispose ();
			}
		}

		[GLib.Signal("editing-started")]
		public event Gtk.EditingStartedHandler EditingStarted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "editing-started", typeof (Gtk.EditingStartedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "editing-started", typeof (Gtk.EditingStartedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.Signal("editing-canceled")]
		public event System.EventHandler EditingCanceled {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "editing-canceled");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "editing-canceled");
				sig.RemoveDelegate (value);
			}
		}

		static RenderNativeDelegate Render_cb_delegate;
		static RenderNativeDelegate RenderVMCallback {
			get {
				if (Render_cb_delegate == null)
					Render_cb_delegate = new RenderNativeDelegate (Render_cb);
				return Render_cb_delegate;
			}
		}

		static void OverrideRender (GLib.GType gtype)
		{
			OverrideRender (gtype, RenderVMCallback);
		}

		static void OverrideRender (GLib.GType gtype, RenderNativeDelegate callback)
		{
			GtkCellRendererClass class_iface = GetClassStruct (gtype, false);
			class_iface.Render = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (GLib.Global.CallingConvention)]
		delegate void RenderNativeDelegate (IntPtr inst, IntPtr window, IntPtr widget, IntPtr background_area, IntPtr cell_area, IntPtr expose_area, int flags);

		static void Render_cb (IntPtr inst, IntPtr window, IntPtr widget, IntPtr background_area, IntPtr cell_area, IntPtr expose_area, int flags)
		{
			try {
				CellRenderer __obj = GLib.Object.GetObject (inst, false) as CellRenderer;
				__obj.OnRender (GLib.Object.GetObject(window) as Gdk.Drawable, GLib.Object.GetObject(widget) as Gtk.Widget, Gdk.Rectangle.New (background_area), Gdk.Rectangle.New (cell_area), Gdk.Rectangle.New (expose_area), (Gtk.CellRendererState) flags);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellRenderer), ConnectionMethod="OverrideRender")]
		protected virtual void OnRender (Gdk.Drawable window, Gtk.Widget widget, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gdk.Rectangle expose_area, Gtk.CellRendererState flags)
		{
			InternalRender (window, widget, background_area, cell_area, expose_area, flags);
		}

		private void InternalRender (Gdk.Drawable window, Gtk.Widget widget, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gdk.Rectangle expose_area, Gtk.CellRendererState flags)
		{
			RenderNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Render;
			if (unmanaged == null) return;

			IntPtr native_background_area = GLib.Marshaller.StructureToPtrAlloc (background_area);
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			IntPtr native_expose_area = GLib.Marshaller.StructureToPtrAlloc (expose_area);
			unmanaged (this.Handle, window == null ? IntPtr.Zero : window.Handle, widget == null ? IntPtr.Zero : widget.Handle, native_background_area, native_cell_area, native_expose_area, (int) flags);
			background_area = Gdk.Rectangle.New (native_background_area);
			Marshal.FreeHGlobal (native_background_area);
			cell_area = Gdk.Rectangle.New (native_cell_area);
			Marshal.FreeHGlobal (native_cell_area);
			expose_area = Gdk.Rectangle.New (native_expose_area);
			Marshal.FreeHGlobal (native_expose_area);
		}

		static ActivateNativeDelegate Activate_cb_delegate;
		static ActivateNativeDelegate ActivateVMCallback {
			get {
				if (Activate_cb_delegate == null)
					Activate_cb_delegate = new ActivateNativeDelegate (Activate_cb);
				return Activate_cb_delegate;
			}
		}

		static void OverrideActivate (GLib.GType gtype)
		{
			OverrideActivate (gtype, ActivateVMCallback);
		}

		static void OverrideActivate (GLib.GType gtype, ActivateNativeDelegate callback)
		{
			GtkCellRendererClass class_iface = GetClassStruct (gtype, false);
			class_iface.Activate = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (GLib.Global.CallingConvention)]
		delegate bool ActivateNativeDelegate (IntPtr inst, IntPtr evnt, IntPtr widget, IntPtr path, IntPtr background_area, IntPtr cell_area, int flags);

		static bool Activate_cb (IntPtr inst, IntPtr evnt, IntPtr widget, IntPtr path, IntPtr background_area, IntPtr cell_area, int flags)
		{
			try {
				CellRenderer __obj = GLib.Object.GetObject (inst, false) as CellRenderer;
				bool __result = __obj.OnActivate (Gdk.Event.GetEvent (evnt), GLib.Object.GetObject(widget) as Gtk.Widget, GLib.Marshaller.Utf8PtrToString (path), Gdk.Rectangle.New (background_area), Gdk.Rectangle.New (cell_area), (Gtk.CellRendererState) flags);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellRenderer), ConnectionMethod="OverrideActivate")]
		protected virtual bool OnActivate (Gdk.Event evnt, Gtk.Widget widget, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags)
		{
			return InternalActivate (evnt, widget, path, background_area, cell_area, flags);
		}

		private bool InternalActivate (Gdk.Event evnt, Gtk.Widget widget, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags)
		{
			ActivateNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Activate;
			if (unmanaged == null) return false;

			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr native_background_area = GLib.Marshaller.StructureToPtrAlloc (background_area);
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			bool __result = unmanaged (this.Handle, evnt.Handle, widget == null ? IntPtr.Zero : widget.Handle, native_path, native_background_area, native_cell_area, (int) flags);
			GLib.Marshaller.Free (native_path);
			background_area = Gdk.Rectangle.New (native_background_area);
			Marshal.FreeHGlobal (native_background_area);
			cell_area = Gdk.Rectangle.New (native_cell_area);
			Marshal.FreeHGlobal (native_cell_area);
			return __result;
		}

		static StartEditingNativeDelegate StartEditing_cb_delegate;
		static StartEditingNativeDelegate StartEditingVMCallback {
			get {
				if (StartEditing_cb_delegate == null)
					StartEditing_cb_delegate = new StartEditingNativeDelegate (StartEditing_cb);
				return StartEditing_cb_delegate;
			}
		}

		static void OverrideStartEditing (GLib.GType gtype)
		{
			OverrideStartEditing (gtype, StartEditingVMCallback);
		}

		static void OverrideStartEditing (GLib.GType gtype, StartEditingNativeDelegate callback)
		{
			GtkCellRendererClass class_iface = GetClassStruct (gtype, false);
			class_iface.StartEditing = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (GLib.Global.CallingConvention)]
		delegate IntPtr StartEditingNativeDelegate (IntPtr inst, IntPtr evnt, IntPtr widget, IntPtr path, IntPtr background_area, IntPtr cell_area, int flags);

		static IntPtr StartEditing_cb (IntPtr inst, IntPtr evnt, IntPtr widget, IntPtr path, IntPtr background_area, IntPtr cell_area, int flags)
		{
			try {
				CellRenderer __obj = GLib.Object.GetObject (inst, false) as CellRenderer;
				Gtk.CellEditable __result = __obj.OnStartEditing (Gdk.Event.GetEvent (evnt), GLib.Object.GetObject(widget) as Gtk.Widget, GLib.Marshaller.Utf8PtrToString (path), Gdk.Rectangle.New (background_area), Gdk.Rectangle.New (cell_area), (Gtk.CellRendererState) flags);
				return __result == null ? IntPtr.Zero : ((__result is GLib.Object) ? (__result as GLib.Object).Handle : (__result as Gtk.CellEditableAdapter).Handle);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellRenderer), ConnectionMethod="OverrideStartEditing")]
		protected virtual Gtk.CellEditable OnStartEditing (Gdk.Event evnt, Gtk.Widget widget, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags)
		{
			return InternalStartEditing (evnt, widget, path, background_area, cell_area, flags);
		}

		private Gtk.CellEditable InternalStartEditing (Gdk.Event evnt, Gtk.Widget widget, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags)
		{
			StartEditingNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).StartEditing;
			if (unmanaged == null) return null;

			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr native_background_area = GLib.Marshaller.StructureToPtrAlloc (background_area);
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			IntPtr __result = unmanaged (this.Handle, evnt.Handle, widget == null ? IntPtr.Zero : widget.Handle, native_path, native_background_area, native_cell_area, (int) flags);
			GLib.Marshaller.Free (native_path);
			background_area = Gdk.Rectangle.New (native_background_area);
			Marshal.FreeHGlobal (native_background_area);
			cell_area = Gdk.Rectangle.New (native_cell_area);
			Marshal.FreeHGlobal (native_cell_area);
			return Gtk.CellEditableAdapter.GetObject (__result, false);
		}

		static EditingCanceledNativeDelegate EditingCanceled_cb_delegate;
		static EditingCanceledNativeDelegate EditingCanceledVMCallback {
			get {
				if (EditingCanceled_cb_delegate == null)
					EditingCanceled_cb_delegate = new EditingCanceledNativeDelegate (EditingCanceled_cb);
				return EditingCanceled_cb_delegate;
			}
		}

		static void OverrideEditingCanceled (GLib.GType gtype)
		{
			OverrideEditingCanceled (gtype, EditingCanceledVMCallback);
		}

		static void OverrideEditingCanceled (GLib.GType gtype, EditingCanceledNativeDelegate callback)
		{
			GtkCellRendererClass class_iface = GetClassStruct (gtype, false);
			class_iface.EditingCanceled = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (GLib.Global.CallingConvention)]
		delegate void EditingCanceledNativeDelegate (IntPtr inst);

		static void EditingCanceled_cb (IntPtr inst)
		{
			try {
				CellRenderer __obj = GLib.Object.GetObject (inst, false) as CellRenderer;
				__obj.OnEditingCanceled ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellRenderer), ConnectionMethod="OverrideEditingCanceled")]
		protected virtual void OnEditingCanceled ()
		{
			InternalEditingCanceled ();
		}

		private void InternalEditingCanceled ()
		{
			EditingCanceledNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).EditingCanceled;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static EditingStartedNativeDelegate EditingStarted_cb_delegate;
		static EditingStartedNativeDelegate EditingStartedVMCallback {
			get {
				if (EditingStarted_cb_delegate == null)
					EditingStarted_cb_delegate = new EditingStartedNativeDelegate (EditingStarted_cb);
				return EditingStarted_cb_delegate;
			}
		}

		static void OverrideEditingStarted (GLib.GType gtype)
		{
			OverrideEditingStarted (gtype, EditingStartedVMCallback);
		}

		static void OverrideEditingStarted (GLib.GType gtype, EditingStartedNativeDelegate callback)
		{
			GtkCellRendererClass class_iface = GetClassStruct (gtype, false);
			class_iface.EditingStarted = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (GLib.Global.CallingConvention)]
		delegate void EditingStartedNativeDelegate (IntPtr inst, IntPtr editable, IntPtr path);

		static void EditingStarted_cb (IntPtr inst, IntPtr editable, IntPtr path)
		{
			try {
				CellRenderer __obj = GLib.Object.GetObject (inst, false) as CellRenderer;
				__obj.OnEditingStarted (Gtk.CellEditableAdapter.GetObject (editable, false), GLib.Marshaller.Utf8PtrToString (path));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellRenderer), ConnectionMethod="OverrideEditingStarted")]
		protected virtual void OnEditingStarted (Gtk.CellEditable editable, string path)
		{
			InternalEditingStarted (editable, path);
		}

		private void InternalEditingStarted (Gtk.CellEditable editable, string path)
		{
			EditingStartedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).EditingStarted;
			if (unmanaged == null) return;

			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			unmanaged (this.Handle, editable == null ? IntPtr.Zero : ((editable is GLib.Object) ? (editable as GLib.Object).Handle : (editable as Gtk.CellEditableAdapter).Handle), native_path);
			GLib.Marshaller.Free (native_path);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkCellRendererClass {
			IntPtr GetSize;
			public RenderNativeDelegate Render;
			public ActivateNativeDelegate Activate;
			public StartEditingNativeDelegate StartEditing;
			public EditingCanceledNativeDelegate EditingCanceled;
			public EditingStartedNativeDelegate EditingStarted;
			IntPtr GtkReserved1;
			IntPtr GtkReserved2;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Object)).GetClassSize ();
		static Hashtable class_structs;

		static GtkCellRendererClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Hashtable ();

			if (use_cache && class_structs.Contains (gtype))
				return (GtkCellRendererClass) class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkCellRendererClass class_struct = (GtkCellRendererClass) Marshal.PtrToStructure (class_ptr, typeof (GtkCellRendererClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkCellRendererClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = GLib.Global.CallingConvention)]
		static extern void gtk_cell_renderer_editing_canceled(IntPtr raw);

		[Obsolete]
		public void CancelEditing() {
			gtk_cell_renderer_editing_canceled(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = GLib.Global.CallingConvention)]
		static extern IntPtr gtk_cell_renderer_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_cell_renderer_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = GLib.Global.CallingConvention)]
		static extern bool gtk_cell_renderer_activate(IntPtr raw, IntPtr evnt, IntPtr widget, IntPtr path, IntPtr background_area, IntPtr cell_area, int flags);

		public bool Activate(Gdk.Event evnt, Gtk.Widget widget, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr native_background_area = GLib.Marshaller.StructureToPtrAlloc (background_area);
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			bool raw_ret = gtk_cell_renderer_activate(Handle, evnt.Handle, widget == null ? IntPtr.Zero : widget.Handle, native_path, native_background_area, native_cell_area, (int) flags);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_path);
			background_area = Gdk.Rectangle.New (native_background_area);
			Marshal.FreeHGlobal (native_background_area);
			cell_area = Gdk.Rectangle.New (native_cell_area);
			Marshal.FreeHGlobal (native_cell_area);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = GLib.Global.CallingConvention)]
		static extern void gtk_cell_renderer_stop_editing(IntPtr raw, bool canceled);

		public void StopEditing(bool canceled) {
			gtk_cell_renderer_stop_editing(Handle, canceled);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = GLib.Global.CallingConvention)]
		static extern void gtk_cell_renderer_render(IntPtr raw, IntPtr window, IntPtr widget, IntPtr background_area, IntPtr cell_area, IntPtr expose_area, int flags);

		public void Render(Gdk.Window window, Gtk.Widget widget, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gdk.Rectangle expose_area, Gtk.CellRendererState flags) {
			IntPtr native_background_area = GLib.Marshaller.StructureToPtrAlloc (background_area);
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			IntPtr native_expose_area = GLib.Marshaller.StructureToPtrAlloc (expose_area);
			gtk_cell_renderer_render(Handle, window == null ? IntPtr.Zero : window.Handle, widget == null ? IntPtr.Zero : widget.Handle, native_background_area, native_cell_area, native_expose_area, (int) flags);
			background_area = Gdk.Rectangle.New (native_background_area);
			Marshal.FreeHGlobal (native_background_area);
			cell_area = Gdk.Rectangle.New (native_cell_area);
			Marshal.FreeHGlobal (native_cell_area);
			expose_area = Gdk.Rectangle.New (native_expose_area);
			Marshal.FreeHGlobal (native_expose_area);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = GLib.Global.CallingConvention)]
		static extern void gtk_cell_renderer_get_fixed_size(IntPtr raw, out int width, out int height);

		public void GetFixedSize(out int width, out int height) {
			gtk_cell_renderer_get_fixed_size(Handle, out width, out height);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = GLib.Global.CallingConvention)]
		static extern void gtk_cell_renderer_set_fixed_size(IntPtr raw, int width, int height);

		public void SetFixedSize(int width, int height) {
			gtk_cell_renderer_set_fixed_size(Handle, width, height);
		}

#endregion
#region Customized extensions
#line 1 "CellRenderer.custom"
//
// CellRenderer.custom - Gtk CellRenderer class customizations
//
// Author: Todd Berman <tberman@sevenl.net>,
//         Peter Johanson <peter@peterjohanson.com>
//
// Copyright (C) 2004 Todd Berman
// Copyright (C) 2007 Peter Johanson
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = GLib.Global.CallingConvention)]
		static extern IntPtr gtk_cell_renderer_start_editing (IntPtr handle, IntPtr evnt, IntPtr widget, IntPtr path, ref Gdk.Rectangle bg_area, ref Gdk.Rectangle cell_area, int flags);

		public CellEditable StartEditing (Widget widget, Gdk.Event evnt, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, CellRendererState flags)
		{
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr raw_ret = gtk_cell_renderer_start_editing (Handle, evnt.Handle, widget.Handle, native, ref background_area, ref cell_area, (int) flags);
			GLib.Marshaller.Free (native);
			Gtk.CellEditable ret = (Gtk.CellEditable) GLib.Object.GetObject(raw_ret);
			return ret;
		}

		[DllImport ("libgtk-win32-2.0-0.dll", CallingConvention = GLib.Global.CallingConvention)]
		static extern void gtk_cell_renderer_render (IntPtr handle, IntPtr drawable, IntPtr widget, ref Gdk.Rectangle bg_area, ref Gdk.Rectangle cell_area, ref Gdk.Rectangle expose_area, int flags);
		
		public void Render (Widget widget, Gdk.Drawable window, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gdk.Rectangle expose_area, CellRendererState flags)
		{
			gtk_cell_renderer_render (Handle, window == null ? IntPtr.Zero : window.Handle, widget == null ? IntPtr.Zero : widget.Handle, ref background_area, ref cell_area, ref expose_area, (int) flags);
		}

		// We have to implement this VM manually because x_offset, y_offset, width and height params may be NULL and therefore cannot be treated as "out int"
		// TODO: Implement "nullable" attribute for value type parameters in GAPI
		[UnmanagedFunctionPointer (GLib.Global.CallingConvention)]
		delegate void OnGetSizeDelegate (IntPtr item, IntPtr widget, IntPtr cell_area_ptr, IntPtr x_offset, IntPtr y_offset, IntPtr width, IntPtr height);
                
		static void OnGetSize_cb (IntPtr item, IntPtr widget, IntPtr cell_area_ptr, IntPtr x_offset, IntPtr y_offset, IntPtr width, IntPtr height)
		{
			try {
				CellRenderer obj = GLib.Object.GetObject (item, false) as CellRenderer;
				Gtk.Widget widg = GLib.Object.GetObject (widget, false) as Gtk.Widget;
				Gdk.Rectangle cell_area = Gdk.Rectangle.New (cell_area_ptr);
				int a, b, c, d;

				obj.OnGetSize (widg, ref cell_area, out a, out b, out c, out d);
				if (x_offset != IntPtr.Zero)
					Marshal.WriteInt32 (x_offset, a);
				if (y_offset != IntPtr.Zero)
					Marshal.WriteInt32 (y_offset, b);
				if (width != IntPtr.Zero)
					Marshal.WriteInt32 (width, c);
				if (height != IntPtr.Zero)
					Marshal.WriteInt32 (height, d);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[DllImport("gtksharpglue-3")]
		static extern void gtksharp_cellrenderer_override_get_size (IntPtr gtype, OnGetSizeDelegate cb);

		static OnGetSizeDelegate OnGetSizeCallback;
		static void OverrideOnGetSize (GLib.GType gtype)
		{
			if (OnGetSizeCallback == null)
				OnGetSizeCallback = new OnGetSizeDelegate (OnGetSize_cb);
			gtksharp_cellrenderer_override_get_size (gtype.Val, OnGetSizeCallback);
		}
               
		[GLib.DefaultSignalHandler (Type=typeof(Gtk.CellRenderer), ConnectionMethod="OverrideOnGetSize")] 
		protected virtual void OnGetSize (Gtk.Widget widget, ref Gdk.Rectangle cell_area, out int x_offset, out int y_offset, out int width, out int height) 
		{
			InternalOnGetSize (widget, ref cell_area, out x_offset, out y_offset, out width, out height);
		}

		[DllImport("gtksharpglue-3")]
		static extern void gtksharp_cellrenderer_base_get_size (IntPtr cell, IntPtr widget, IntPtr cell_area, out int x_offset, out int y_offset, out int width, out int height);

		private void InternalOnGetSize (Gtk.Widget widget, ref Gdk.Rectangle cell_area, out int x_offset, out int y_offset, out int width, out int height) 
		{
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			gtksharp_cellrenderer_base_get_size (Handle, widget == null ? IntPtr.Zero : widget.Handle, native_cell_area, out x_offset, out y_offset, out width, out height);
			cell_area = Gdk.Rectangle.New (native_cell_area);
			Marshal.FreeHGlobal (native_cell_area);
		}

		// Compatibility code for old GetSize(..) virtual method
		static void ObsoleteGetSize_cb (IntPtr item, IntPtr widget, IntPtr cell_area_ptr, IntPtr x_offset, IntPtr y_offset, IntPtr width, IntPtr height)
		{
			try {
				CellRenderer obj = GLib.Object.GetObject (item, false) as CellRenderer;
				Gtk.Widget widg = GLib.Object.GetObject (widget, false) as Gtk.Widget;
				Gdk.Rectangle cell_area = Gdk.Rectangle.New (cell_area_ptr);
				int a, b, c, d;

				obj.GetSize (widg, ref cell_area, out a, out b, out c, out d);
				if (x_offset != IntPtr.Zero)
					Marshal.WriteInt32 (x_offset, a);
				if (y_offset != IntPtr.Zero)
					Marshal.WriteInt32 (y_offset, b);
				if (width != IntPtr.Zero)
					Marshal.WriteInt32 (width, c);
				if (height != IntPtr.Zero)
					Marshal.WriteInt32 (height, d);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideObsoleteGetSize (GLib.GType gtype)
		{
			if (OnGetSizeCallback == null)
				OnGetSizeCallback = new OnGetSizeDelegate (ObsoleteGetSize_cb);
			gtksharp_cellrenderer_override_get_size (gtype.Val, OnGetSizeCallback);
		}

		[Obsolete ("Replaced by OnGetSize for implementations and GetSize(..., out Gdk.Rectangle bounds) for callers.")]
		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellRenderer), ConnectionMethod="OverrideObsoleteGetSize")]
		public virtual void GetSize(Gtk.Widget widget, ref Gdk.Rectangle cell_area, out int x_offset, out int y_offset, out int width, out int height) 
		{
			InternalOnGetSize (widget, ref cell_area, out x_offset, out y_offset, out width, out height);
		}

		// Compatibility code for old Render(..) virtual method
		static void ObsoleteRender_cb (IntPtr cell, IntPtr window, IntPtr widget, IntPtr background_area, IntPtr cell_area, IntPtr expose_area, int flags)
		{
			try {
				Gtk.CellRenderer __obj = GLib.Object.GetObject (cell, false) as Gtk.CellRenderer;
				__obj.Render (GLib.Object.GetObject(window) as Gdk.Drawable, GLib.Object.GetObject(widget) as Gtk.Widget, Gdk.Rectangle.New (background_area), Gdk.Rectangle.New (cell_area), Gdk.Rectangle.New (expose_area), (Gtk.CellRendererState) flags);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static RenderNativeDelegate ObsoleteRenderVMCallback;
		static void OverrideObsoleteRender (GLib.GType gtype)
		{
			if (ObsoleteRenderVMCallback == null)
				ObsoleteRenderVMCallback = new RenderNativeDelegate (ObsoleteRender_cb);
			OverrideRender (gtype, ObsoleteRenderVMCallback); // -> autogenerated method
		}

		[Obsolete ("Replaced by OnRender for subclass overrides and Render (Widget ...) for callers.")]
		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellRenderer), ConnectionMethod="OverrideObsoleteRender")]
		protected virtual void Render (Gdk.Drawable window, Gtk.Widget widget, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gdk.Rectangle expose_area, Gtk.CellRendererState flags)
		{
			InternalRender (window, widget, background_area, cell_area, expose_area, flags);
		}

		// Compatibility code for old StartEditing(..) virtual method
		static IntPtr ObsoleteStartEditing_cb (IntPtr cell, IntPtr evnt, IntPtr widget, IntPtr path, IntPtr background_area, IntPtr cell_area, int flags)
		{
			try {
				Gtk.CellRenderer __obj = GLib.Object.GetObject (cell, false) as Gtk.CellRenderer;
				Gtk.CellEditable __result = __obj.StartEditing (Gdk.Event.GetEvent (evnt), GLib.Object.GetObject(widget) as Gtk.Widget, GLib.Marshaller.Utf8PtrToString (path), Gdk.Rectangle.New (background_area), Gdk.Rectangle.New (cell_area), (Gtk.CellRendererState) flags);
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		static StartEditingNativeDelegate ObsoleteStartEditingVMCallback;
		static void OverrideObsoleteStartEditing (GLib.GType gtype)
		{
			if (ObsoleteStartEditingVMCallback == null)
				ObsoleteStartEditingVMCallback = new StartEditingNativeDelegate (ObsoleteStartEditing_cb);
			OverrideStartEditing (gtype, ObsoleteStartEditingVMCallback);
		}

		[Obsolete ("Replaced by OnStartEditing for subclass overrides and StartEditing (Gtk.Widget ...) for callers.")]
		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellRenderer), ConnectionMethod="OverrideObsoleteStartEditing")]
		public virtual Gtk.CellEditable StartEditing(Gdk.Event evnt, Gtk.Widget widget, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags) {
			return InternalStartEditing (evnt, widget, path, background_area, cell_area, flags);
		}

#endregion
	}
}
