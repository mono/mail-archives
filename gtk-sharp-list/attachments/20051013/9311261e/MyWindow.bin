using System;
using System.Threading;
using Gtk;
using Gdk;

public class MyWindow : Gtk.Window
{
	public Flux flux;
	VBox vBoxPrinc;
	HBox hBoxImages;
	HBox hBoxMessages;
	HBox hBoxInfos;
	HBox hBoxVide;
	Table tableau;
	Gtk.Image imageDLL;
	Gtk.Image imageProsys;
	Gtk.Image imageHomme;
	Gtk.Image imageCommande;
	Gtk.Image imageOK;
	Gtk.Image imageStop;
	Label labelMessage;
	Label labelDateHeure;
	Entry entryBadge;
	
	Timer timerHorloge;
	TimerCallback timerHorlogeDelegue;

	public MyWindow () : base ("MyWindow")
	{
		InitialiserComposants();
		this.Show();
		InitialiserSuite();
	}
	
	private void InitialiserComposants()
	{
		// Initialisation de la fenêtre
		this.Title = "Borne de contrôle d'accès";
		this.Maximize();
		this.Resizable = false;
		
			// Création de la VBox principale
		vBoxPrinc = new VBox();
			// Création des HBox
		hBoxImages = new HBox();
		hBoxMessages = new HBox();
		hBoxInfos = new HBox();
		hBoxVide = new HBox();
		
			// Création des objets
				// Images
		imageDLL = new Gtk.Image("./DLL.jpg");
		imageProsys = new Gtk.Image("./ProSys.jpg");
		imageHomme = new Gtk.Image("./homme.png");
		imageCommande = new Gtk.Image("./commande.png");
		imageOK = new Gtk.Image("./OK.png");
		imageStop = new Gtk.Image("./stop.png");
				// Labels
		labelMessage = new Label();
		Style styleLabelMessage = new Style();
		styleLabelMessage = labelMessage.Style.Copy();
		styleLabelMessage.FontDesc.Size = 20000;
		labelMessage.Style = styleLabelMessage;
		labelDateHeure = new Label();
				// Entry
		entryBadge = new Entry();
		entryBadge.NoShowAll = true;
		entryBadge.MaxLength = 11;
		entryBadge.TextInserted += new TextInsertedHandler (EntryBadgeTextInserted);
		
			// Remplissage des box
		hBoxImages.PackStart(imageDLL,false,false,0);
		hBoxImages.PackStart(hBoxVide,true,true,0);
		hBoxImages.PackStart(imageProsys,false,false,0);

		hBoxMessages.PackStart(imageHomme,true,true,0);
		hBoxMessages.PackStart(imageCommande,true,true,0);
		hBoxMessages.PackStart(imageOK,true,true,0);
		hBoxMessages.PackStart(imageStop,true,true,0);
		hBoxMessages.PackStart(labelMessage,true,false,0);

		hBoxInfos.PackStart(entryBadge,false,false,0);
		hBoxInfos.PackStart(labelDateHeure);

		vBoxPrinc.PackStart(hBoxImages,false,true,0);
		vBoxPrinc.PackStart(hBoxMessages,true,true,0);
		vBoxPrinc.PackStart(hBoxInfos,false,true,0);
		
			// Ajout du widget vBoxPrinc à la fenêtre
		this.Add(vBoxPrinc);


		// Affichage de l'heure
			// Création du timer
		timerHorlogeDelegue = new TimerCallback(TimerHorlogeTick);
		timerHorloge = new Timer(timerHorlogeDelegue,null,0,1000);
				
		this.DeleteEvent += new DeleteEventHandler (OnMyWindowDelete);
	}
	
	private void InitialiserSuite()
	{
		// Affichage des Box excepté la hBoxMessages
		vBoxPrinc.ShowAll();
		this.FocusSaisie(true);
	}
	
	void TimerHorlogeTick (System.Object state)
	{
		labelDateHeure.Text = DateTime.Now.ToShortDateString()+' '+DateTime.Now.ToLongTimeString();
	}
	
	void OnMyWindowDelete (object sender, DeleteEventArgs a)
	{
		Application.Quit ();
		a.RetVal = true;
	}

	void EntryBadgeTextInserted (object o, TextInsertedArgs a)
	{
		if (entryBadge.Text.Length == 11)
		{
			entryBadge.Editable = false;
			flux.GererInteractionEntry(entryBadge.Text);
		}
	}
	
	public void AfficherMsg(string message,Int32 result)
	{
		Console.WriteLine("Afficher message");

		// Affichage de l'icône correspondante au message
		switch(result)
		{
			// Affichage icône commande
			case -2:
				break;
			// Affichage icône homme
			case -1:
				hBoxMessages.HideAll();
				imageHomme.Show();
				labelMessage.Text = message;
				labelMessage.Show();
				hBoxMessages.Show();
				
				Console.WriteLine("Homme");
				break;
			// Affichage icône OK
			case 0:
				break;
			// Affichage icône Problème
			default:
				hBoxMessages.HideAll();
				imageStop.Show();
				labelMessage.Text = message;
				labelMessage.Show();
				hBoxMessages.Show();

				Console.WriteLine("Stop");
				break;
		}
		Console.WriteLine("Fin d'affichage des messages");
	}
	
	
	public void FocusSaisie(bool fs)
	{
		entryBadge.HasFocus = fs;
		entryBadge.Editable = fs;
	}
}