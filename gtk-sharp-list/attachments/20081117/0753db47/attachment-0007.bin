// Model.cs
//
//  Copyright (C) 2008 Whitemice Consulting
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//
using System;
using System.Collections;
using System.Collections.Generic;
using Gtk;
using Hyena.Data;
using Hyena.Collections;
using Hyena.Gui;
using Hyena.Data.Gui;

using Selection = Hyena.Collections.Selection;

namespace ListView
{
  public class Model : IListModel<Item>, ISortable
  {
    private ISortableColumn sortColumn;
    private List<Item> store = new List<Item> ();
    private Selection selection = new Selection ();
    public event EventHandler Cleared;
    public event EventHandler Reloaded;
          
    public Model ()
    {
      Random random = new Random (0);
      for (int i = 0; i < 100000; i++) {
        store.Add (new Item (i, random));
      }
    }
            
    public void Clear ()
    {
    }
            
    public void Reload ()
    {
      this.Reloaded(this, null);
    }
            
    public int Count {
      get { return store.Count; }
    }

    public bool CanReorder {
      get { return false; }
    }
            
    public Item this[int index] {
      get { return store[index]; }
    }
            
    public Selection Selection {
      get { return selection; }
    }
    
    // Sortability
    public bool Sort(ISortableColumn column)
    {
      sortColumn = column;;
      store.Sort(
        delegate(Item i1, Item i2) 
        { 
          int v;
          
          switch(SortColumn.SortKey)
          {
            case "A": v = i1.A.CompareTo(i2.A); break;
            case "G": v = i1.G.CompareTo(i2.G); break;
            default: v = 0; break;
          }
          if (SortColumn.SortType == Hyena.Data.SortType.Descending)
            v = (v * (-1));
          return v;
        });
      Console.WriteLine();
      return false;
    }
     
    public ISortableColumn SortColumn 
    { 
      get  
      { 
        return sortColumn;
      }
    }
  } // end Model
}
