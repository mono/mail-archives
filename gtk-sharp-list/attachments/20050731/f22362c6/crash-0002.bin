// Test program for DSDataTable

using System;
using System.Collections;
using Gtk;
using Glade;

[TreeNode (ColumnCount=5)]
public class CrashTreeNode : TreeNode {
	string name;
	string desc;
	string loc;
	int id;
	bool check;
	static int count = 0;

	public CrashTreeNode (string name, string desc)
    {
	   this.name = name;
	   this.desc = desc;
	   this.loc = name + desc;
	   this.id = count;
	   if (count % 2 == 0) {
           this.check = true;
	   } else {
          this.check = false;
	   }
	   count++;
	}

	[TreeNodeValue (Column=0)]
	public string Name {
		get { return name; }
	}

	[TreeNodeValue (Column=1)]
	public string Description {
		get { return desc; }
	}

	[TreeNodeValue (Column=2)]
	public string LocationCode {
		get { return loc; }
	}

	[TreeNodeValue (Column=3)]
	public int Id {
		get { return id; }
	}

	[TreeNodeValue (Column=4)]
	public bool Check {
		get { return check; }
	}

	public static int Count {
		get {
			return count;
		}
	}
}

class Crash : Gtk.Window {
    public int rowCount = 10000;
    public NodeStore buildNodeStore () {
        NodeStore store = new NodeStore (typeof (CrashTreeNode));
        CrashTreeNode n;

        string code, loc;

        for (int i = 0; i < this.rowCount; ++i) {
            code = String.Format("Code: {0}", i);
            if (i % 2 == 0) // even
                loc = "GREECE";
            else
                loc = "CHILI";

            n = new CrashTreeNode (code, loc);
            store.AddNode (n);
        }
        return store;
    }

    [Glade.Widget] public Toolbar toolbar;
    [Glade.Widget] public VBox vbox;
    [Glade.Widget] public Alignment alignment;

    public Crash (string title) : base (title) {
        Glade.XML xml = new Glade.XML ("crash.glade", "vbox", null);
        xml.Autoconnect (this);
        base.Add (vbox);
    }

    public void Start () {
        NodeStore nodeStore = this.buildNodeStore ();

        ScrolledWindow sw = new ScrolledWindow ();

        NodeView nv = new NodeView (nodeStore);
        nv.AppendColumn ("Code", new CellRendererText (), "text", 0);
        nv.AppendColumn ("Description", new CellRendererText (), "text", 1);
        nv.AppendColumn ("Location Code", new CellRendererText (), "text", 2);
        nv.AppendColumn ("Id", new CellRendererText (), "text", 3);
        nv.AppendColumn ("Checked", new CellRendererToggle (), "active", 4);

        sw.Add(nv);

        this.alignment.Add(sw);
        this.DeleteEvent += this.window_deleted_cb;
        this.Resize(800, 600);
        this.ShowAll();
    }

    public static void Main(string[] args) {
        Application.Init();
        Crash crash = new Crash("Test mystery crash");
        crash.Start();
        Application.Run();
    }

    void window_deleted_cb (object o, DeleteEventArgs args) {
        Application.Quit();
        args.RetVal = true;
    }
}