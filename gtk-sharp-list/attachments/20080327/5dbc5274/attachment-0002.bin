43c43,66
< 
---
> 		
> 		// This hashtable will hold MethodInfos containing the methods in the underlying implementor class that are to be called
> 		private System.Collections.Hashtable ImplementedSetMethods;
> 		private void GetImplementedMethods() {
> 			System.Type ImplementorType = this.Implementor.GetType();
> 			ImplementedSetMethods = new System.Collections.Hashtable(7);
> 			System.Type[] SetValueTypes = new System.Type[7] {typeof(object), typeof(bool), typeof(double), typeof(int), typeof(string), typeof(float), typeof(uint)};
> 			for(int TypeIndex = 0; TypeIndex < 7; TypeIndex++) {
> 				System.Reflection.MethodInfo SetMethod = ImplementorType.GetMethod("SetValue", System.Reflection.BindingFlags.ExactBinding|System.Reflection.BindingFlags.Public|System.Reflection.BindingFlags.Instance, null, new System.Type[] {typeof(Gtk.TreeIter), typeof(int), SetValueTypes[TypeIndex]} , new System.Reflection.ParameterModifier[] {});
> 				if(SetMethod == null) {
> 					// Method not implemented by the implementor
> 					if(SetValueTypes[TypeIndex] == typeof(object)) {
> 						// Method(Gtk.TreeIter, int, object) not implemented by the implementor
> 						// Throw error
> 						throw(new System.NotImplementedException("The underlying implementor does not implement interface method SetValue(Gtk.TreeIter, int, object)"));
> 					} else {
> 						// Use SetValue(Gtk.TreeIter, int, object) instead
> 						SetMethod = (System.Reflection.MethodInfo) ImplementedSetMethods[typeof(object)];
> 					}
> 				}
> 				ImplementedSetMethods.Add(SetValueTypes[TypeIndex], SetMethod);
> 			}
> 		}
> 		
45c68,70
< 			SetValue (iter, column, new GLib.Value (value));
---
> 			if(ImplementedSetMethods == null)
> 				GetImplementedMethods();
> 			(ImplementedSetMethods[typeof(bool)] as System.Reflection.MethodInfo).Invoke(this.Implementor, new System.Object[] {iter, column, value} );
49c74,76
< 			SetValue (iter, column, new GLib.Value (value));
---
> 			if(ImplementedSetMethods == null)
> 				GetImplementedMethods();
> 			(ImplementedSetMethods[typeof(double)] as System.Reflection.MethodInfo).Invoke(this.Implementor, new System.Object[] {iter, column, value} );
53c80,82
< 			SetValue (iter, column, new GLib.Value (value));
---
> 			if(ImplementedSetMethods == null)
> 				GetImplementedMethods();
> 			(ImplementedSetMethods[typeof(int)] as System.Reflection.MethodInfo).Invoke(this.Implementor, new System.Object[] {iter, column, value} );
57c86,88
< 			SetValue (iter, column, new GLib.Value (value));
---
> 			if(ImplementedSetMethods == null)
> 				GetImplementedMethods();
> 			(ImplementedSetMethods[typeof(string)] as System.Reflection.MethodInfo).Invoke(this.Implementor, new System.Object[] {iter, column, value} );
61c92,94
< 			SetValue (iter, column, new GLib.Value (value));
---
> 			if(ImplementedSetMethods == null)
> 				GetImplementedMethods();
> 			(ImplementedSetMethods[typeof(float)] as System.Reflection.MethodInfo).Invoke(this.Implementor, new System.Object[] {iter, column, value} );
65c98,100
< 			SetValue (iter, column, new GLib.Value (value));
---
> 			if(ImplementedSetMethods == null)
> 				GetImplementedMethods();
> 			(ImplementedSetMethods[typeof(uint)] as System.Reflection.MethodInfo).Invoke(this.Implementor, new System.Object[] {iter, column, value} );
69c104,106
< 			SetValue (iter, column, new GLib.Value (value));
---
> 			if(ImplementedSetMethods == null)
> 				GetImplementedMethods();
> 			(ImplementedSetMethods[typeof(object)] as System.Reflection.MethodInfo).Invoke(this.Implementor, new System.Object[] {iter, column, value} );
70a108
> 		
