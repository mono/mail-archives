using System;
using System.Text;
using System.Text.RegularExpressions;
using Gtk;

namespace Langley.Widgets
{
    public class SearchableComboBox : ComboBox
    {
    	private int column;
    	private StringBuilder buffer = new StringBuilder();
    	private DateTime last_buffer_change = DateTime.Now;
    	private TimeSpan acceptable_delay = new TimeSpan(0, 0, 0, 1, 5);
    	
    	public SearchableComboBox(int column_to_search) : base()
    	{
    		this.column = column_to_search;
        	this.KeyPressEvent += OnKeyPressEvent;
        }
        
    	private void OnKeyPressEvent (object o, KeyPressEventArgs args)
    	{
    		char ch;
    		ch = (char)Gdk.Keyval.ToUnicode(args.Event.KeyValue);
    		
    		if (args.Event.Key == Gdk.Key.BackSpace || args.Event.Key == Gdk.Key.Escape) {
    			buffer.Length = 0;
    		} else if (Regex.IsMatch(ch.ToString(), @"[^\d\s]") && Regex.IsMatch(ch.ToString(), @"[\w]")) {
    			/*The above line matches only letters (no digits, punctuation or white space)
    				and is intended to be Unicode safe.
    			*/
    			if (DateTime.Now.Subtract(last_buffer_change) > acceptable_delay) {
    				buffer.Length = 0;
    			}
    			buffer.Append(ch);
    		    FindBufferInModel(buffer);
    		}
    		last_buffer_change = DateTime.Now;
    	}
    	
    	private void FindBufferInModel(StringBuilder buf)
    	{
    		int i = 0;
    		string low_buf = buf.ToString().ToLower();
    		if (this.Model != null) {
    			foreach (object [] row in (ListStore) this.Model) {
    				if (((string) row[column]).ToLower().Replace(" ", "").StartsWith(low_buf)) {
    					/* This gets rid of spaces so that the user can search multi-word entries.
    						FIXME: probably better to get rid of all white space with regex magic.
    					*/
    					this.Active = i;
    					break;
    				}
    				i++;
    			}
    		} else {
    			Console.WriteLine("Model is null");	
    		}
    	}
    }
}

