using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace ISIS.Private.App
{
    
    /// <summary>
    /// Provides a System.Windows.Form control.
    /// </summary>
    public class GtkFormsPlug : Gtk.DrawingArea
    {

        private Control control;

        /// <summary>
        /// Creates a new instance.
        /// </summary>
        public GtkFormsPlug()
        {
            DoubleBuffered = false;
            Realized += this_Realized;
            SizeAllocated += this_SizeAllocated;

            // Our bridge control.
            control = new Control();
            control.Location = new Point(0, 0);
        }

        /// <summary>
        /// Invoked when the <see cref="GdkWindow"/> has been created. That is, when an OS window has been allocated.
        /// We reparent our peer <see cref="Control"/> into the new OS window.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void this_Realized(object sender, EventArgs e)
        {
            control.Show();
            SetParent(control.Handle, gdk_win32_drawable_get_handle(GdkWindow.Handle));
            QueueResize();
        }

        /// <summary>
        /// Invoked when Gtk knows the size of this child widget. Here we force the size of our peer <see
        /// cref="Control"/>.
        /// </summary>
        /// <param name="o"></param>
        /// <param name="args"></param>
        private void this_SizeAllocated(object o, Gtk.SizeAllocatedArgs args)
        {
            control.Size = new Size(args.Allocation.Width, args.Allocation.Height);
        }

        /// <summary>
        /// Gets a reference to the peer control. Users of the <see cref="GtkWinFormsPlug"/> should add their Windows
        /// Forms <see cref="Control"/> instances as children of this.
        /// </summary>
        public Control Control
        {
            get { return control; }
        }

        [DllImport("libgdk-win32-2.0-0.dll")]
        private static extern IntPtr gdk_win32_drawable_get_handle(IntPtr w);

        [DllImport("user32.dll")]
        private static extern IntPtr SetParent(IntPtr child, IntPtr parent);

    }

}
