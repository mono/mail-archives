using System;
using Gtk;

namespace Test
{
	class TestWidget : Button
	{
		public TestWidget () : base ("Test")
		{
			Clicked			+= OnClicked;
			//I try both, Destroyed and DestroyEvent, just to be sure.
			Destroyed		+= OnDestroyed;
			DestroyEvent	+= OnDestroyed;
		}

		~TestWidget ()
		{
			Console.WriteLine ("Destructor called!");
		}
		
		private static void OnClicked (object sender, EventArgs args)
		{
			Widget parent = ((Widget)sender).Parent;
			
			//This should remove the only reference to the button.
			((Container)parent).Remove ((Widget)sender);
			//This should collect the button and trigger, Destroyed event and the destructor.
			GC.Collect ();
		}
		
		private static void OnDestroyed (object sender, EventArgs args)
		{
			Console.WriteLine ("Button destroyed!");
		}
	}
	
	class Test
	{
		private static void OnDeleteEvent (object sender, DeleteEventArgs args)
		{
			args.RetVal = false;
			
			Application.Quit ();
			Console.WriteLine ("Quit");
		}
		
		private static void OnDestroyEvent (object sender, DestroyEventArgs args)
		{
			Application.Quit ();
		}
		
		public static void Main ()
		{
			Application.Init ();
			
			Window wnd			= new Window ("Test");
			TestWidget button	= new TestWidget ();
			
			wnd.DeleteEvent		+= OnDeleteEvent;
			wnd.DestroyEvent	+= OnDestroyEvent;
			
			wnd.Add (button);
			wnd.ShowAll ();
			
			Application.Run ();
			Console.WriteLine ("Exit");
		}
	}
}
