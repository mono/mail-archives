// WidgetInfo.custom
//
// Author: Thiago M. Say√£o <thiago.sayao@gmail.com>
//
// This code is inserted after the automatically generated code.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.
		[Obsolete ("Replaced by Parent property")]		
		public Glade.WidgetInfo parent {
			get { return Glade.WidgetInfo.New (_parent); }
		}

		public Glade.WidgetInfo Parent {
			get { return Glade.WidgetInfo.New (_parent); }
		}

		[Obsolete ("Replaced by Properties property")]
		public Glade.Property properties {
			get { return Glade.Property.New (_properties); }
		}

		public Property[] Properties {
			get {
				Property[] result = new Property [NProperties];
				for (int i = 0; i < NProperties; i++)
					result [i] = Property.New (Marshal.ReadIntPtr (_properties, i * IntPtr.Size));
				return result;
			}
		}

		[Obsolete ("Replaced by AtkProps property")]
		public Glade.Property atk_props 
		{
			get { return Glade.Property.New (_atk_props); }
		}
		
		public Property[] AtkProps {
			get {
				Property[] result = new Property [NAtkProps];
				for (int i = 0; i < NAtkProps; i++)
					result [i] = Property.New (Marshal.ReadIntPtr (_atk_props, i * IntPtr.Size));
				return result;
			}
		}
		
		[Obsolete ("Replaced by Signals property")]
		public Glade.SignalInfo signals {
			get { return Glade.SignalInfo.New (_signals); }
		}
		
		public SignalInfo[] Signals {
			get {
				SignalInfo[] result = new SignalInfo [NSignals];
				for (int i = 0; i < NSignals; i++)
					result [i] = SignalInfo.New (Marshal.ReadIntPtr (_signals, i * IntPtr.Size));
				return result;
			}
		}

		[Obsolete ("Replaced by AtkActions property")]
		public Glade.AtkActionInfo atk_actions {
			get { return Glade.AtkActionInfo.New (_atk_actions); }
		}

		public AtkActionInfo[] AtkActions {
			get {
				AtkActionInfo[] result = new AtkActionInfo [NAtkActions];
				for (int i = 0; i < NAtkActions; i++)
					result [i] = AtkActionInfo.New (Marshal.ReadIntPtr (_atk_actions, i * IntPtr.Size));
				return result;
			}
		}

		[Obsolete ("Replaced by Relations property")]
		public Glade.AtkRelationInfo relations {
			get { return Glade.AtkRelationInfo.New (_relations); }
		}

		public AtkRelationInfo[] Relations {
			get {
				AtkRelationInfo[] result = new AtkRelationInfo [NRelations];
				for (int i = 0; i < NRelations; i++)
					result [i] = AtkRelationInfo.New (Marshal.ReadIntPtr (_relations, i * IntPtr.Size));
				return result;
			}
		}

		[Obsolete ("Replaced by Accels property")]
		public Glade.AccelInfo accels {
			get { return Glade.AccelInfo.New (_accels); }
		}

		public AccelInfo[] Accels {
			get {
				AccelInfo[] result = new AccelInfo [NAccels];
				for (int i = 0; i < NAccels; i++)
					result [i] = AccelInfo.New (Marshal.ReadIntPtr (_accels, i * IntPtr.Size));
				return result;
			}
		}
		
		[Obsolete ("Replaced by Children property")]
		public Glade.ChildInfo children {
			get { return Glade.ChildInfo.New (_children); }
		}

		public ChildInfo[] Children {
			get {
				ChildInfo[] result = new ChildInfo [NChildren];
				for (int i = 0; i < NChildren; i++)
					result [i] = ChildInfo.New (Marshal.ReadIntPtr (_children, i * IntPtr.Size));
				return result;
			}
		}