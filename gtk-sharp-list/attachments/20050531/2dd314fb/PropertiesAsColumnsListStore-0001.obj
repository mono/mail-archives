//
// Copyright (C) 2005 Rafael "Monoman" Teixeira (rafaelteixeirabr@hotmail.com)
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Collections;
using System.ComponentModel;
using System.Text;

using Gtk;

namespace Commons.Gtk.Useful
{

	internal class InstanceToStringAsValuePropertyDescriptor : PropertyDescriptor
	{
		public InstanceToStringAsValuePropertyDescriptor(Type type) : base(type.Name, null) { }
		public override object GetValue(object component) { return component.ToString(); }
		public override Type ComponentType { get { return null; } }
		public override bool IsReadOnly { get { return true; } }
		public override Type PropertyType { get { return typeof(string); } }
		public override void SetValue(object component, object value) { }
		public override void ResetValue(object component) { }
		public override bool CanResetValue(object component) { return false; }
		public override bool ShouldSerializeValue(object component) { return false; }
	}

	public class PropertiesAsColumnsListStore : ListStore
	{
		private Type itemType = null;
		private PropertyDescriptorCollection props;
		
		private static ArgumentException InvalidTypeForAddedItemException = 
			new ArgumentException("Added item isn't of the expected type");
		private static ArgumentNullException NullTypeException = 
			new ArgumentNullException("Type for store items can't be null");
		
		private void setItemType(Type type)
		{
			itemType = type;
			if (itemType == null)
				throw NullTypeException;			
			props = new PropertyDescriptorCollection(null);
			PropertyDescriptorCollection tempProps = TypeDescriptor.GetProperties(type);
			foreach(PropertyDescriptor info in tempProps) {
				Type ptype = info.PropertyType;
				if ( ptype == typeof(string) || (!typeof(IEnumerable).IsAssignableFrom(ptype) && !ptype.IsArray))
					props.Add(info);
			}
			if (props.Count == 0)
				props.Add(new InstanceToStringAsValuePropertyDescriptor(type));
			GLib.GType[] gtypes = new GLib.GType[props.Count];
			for(int i = 0; i < props.Count; i++)
				if (props[i].PropertyType.IsPrimitive)
					gtypes[i] = (GLib.GType)props[i].PropertyType;
				else
					gtypes[i] = GLib.GType.String;
			ColumnTypes = gtypes;
		}
			
		public PropertiesAsColumnsListStore(Type itemType)
		{
			setItemType(itemType);
		}
		
		public PropertiesAsColumnsListStore(IEnumerable items)
		{
			foreach(object item in items)
				Add(item);
		}
		
		private void setColumnValue(TreeIter iter, int col, object value)
		{
			if (value != null) {
				if (GetColumnType(col) == GLib.GType.String && !(value is string)) {
					TypeConverter converter = TypeDescriptor.GetConverter(value);
					value = (converter != null)?converter.ConvertToString(value):value.ToString();
				}
				GLib.Value val = new GLib.Value (value);
				SetValue (iter, col, val);
				val.Dispose ();
			}
		}
				
		public void Add(object item)
		{
			if (item == null)
				return;
				
			if (itemType == null)
				setItemType(item.GetType());
			else {
				if (item.GetType() != itemType)
					throw InvalidTypeForAddedItemException;
			}
			TreeIter iter = Append();
			int col = 0;
			foreach(PropertyDescriptor info in props)
				setColumnValue(iter, col++, info.GetValue(item));
		}

		public PropertyDescriptorCollection SuggestedColumns { get { return props; } }
	}
	
	public class PropertiesAsColumnsHelper {
	
		public static void Set(TreeView treeView, PropertiesAsColumnsListStore listStore)
		{
			try {
				int col = 0;
				treeView.Model = listStore;
				while (treeView.Columns.Length > 0)
					treeView.RemoveColumn(treeView.Columns[0]);
				if (listStore.SuggestedColumns != null)
					foreach(PropertyDescriptor prop in listStore.SuggestedColumns)
						treeView.AppendColumn(createColumn(prop, col++));
			} catch (Exception ex) {
				Console.WriteLine(ex);
			}
		}
		
		public static void Set(TreeView treeView, Array itemArray)
		{
			if (itemArray.Length == 0)
				Set(treeView, new PropertiesAsColumnsListStore(itemArray.GetType().GetElementType()));
			else
				Set(treeView, new PropertiesAsColumnsListStore(itemArray));
		}
		
		public static void Set(TreeView treeView, IEnumerable items)
		{
			Set(treeView, new PropertiesAsColumnsListStore(items));
		}
		
		private static TreeViewColumn createColumn(PropertyDescriptor prop, int col)
		{
			CellRenderer cell;
			if (prop.PropertyType == typeof(bool))
				cell = new CellRendererToggle();
			else
				cell = new CellRendererText();
			TreeViewColumn column = new TreeViewColumn();
			column.PackStart(cell, false);
			if (prop.PropertyType == typeof(bool))
				column.AddAttribute(cell, "active", col);
			else
				column.AddAttribute(cell, "text", col);
			column.Title = prop.DisplayName;
			return column;
		}
	}
}