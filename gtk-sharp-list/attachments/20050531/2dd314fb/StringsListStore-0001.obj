//
// Copyright (C) 2005 Rafael "Monoman" Teixeira (rafaelteixeirabr@hotmail.com)
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Collections;
using System.ComponentModel;
using System.Text;

using Gtk;

namespace Commons.Gtk.Useful
{

	public class StringsListStore : ListStore
	{
		private string displayName;
		private StringsListStore() { ColumnTypes = new GLib.GType[] { GLib.GType.String }; }
		
		public static StringsListStore CreateNamed(string displayName, params object[] objects)
		{
			StringsListStore sls = new StringsListStore();
			sls.displayName = displayName;
			foreach(object item in objects)
				sls.Add(item.ToString());
			return sls;
		}
		
		public static StringsListStore Create(params object[] objects)
		{
			return CreateNamed(null, objects);
		}
		
		public void Add(object item)
		{
			if (item == null)
				return;
			TreeIter iter = Append();
			GLib.Value val = new GLib.Value (item);
			SetValue (iter, 0, val);
			val.Dispose ();
		}
		
		public void SetOn(TreeView treeView)
		{
			try {
				treeView.Model = this;
				while (treeView.Columns.Length > 0)
					treeView.RemoveColumn(treeView.Columns[0]);
				CellRenderer cell = new CellRendererText();
				TreeViewColumn column = new TreeViewColumn();
				column.PackStart(cell, false);
				column.AddAttribute(cell, "text", 0);
				column.Title = displayName;
			} catch (Exception ex) {
				Console.WriteLine(ex);
			}
		}
	}	
}