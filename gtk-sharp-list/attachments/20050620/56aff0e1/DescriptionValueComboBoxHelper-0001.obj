//
// DescriptionValueComboBoxHelper.cs.cs
//
// Copyright Â©2005 Rafael 'Monoman' Teixeira
//
// This work is licensed under the Creative Commons Attribution License. 
// To view a copy of this license, visit http://creativecommons.org/licenses/by/2.0/br/ 
// or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.

using System;

using Gtk;

namespace Commons.Gtk.Useful {

	public class DescriptionValueComboBoxHelper
	{
		private ComboBox wrappedComboBox;
		private CellRendererText description = new CellRendererText ();
		private ListStore comboBoxStore = new ListStore (typeof (string), typeof (ManagedReference));
		
		public DescriptionValueComboBoxHelper(ComboBox wrappedComboBox)
		{
			if (wrappedComboBox == null)
				throw new ArgumentNullException("wrappedComboBox");
			this.wrappedComboBox = wrappedComboBox;
			this.wrappedComboBox.Clear();
			this.wrappedComboBox.Model = comboBoxStore;
			this.wrappedComboBox.PackStart (description, false);
			this.wrappedComboBox.AddAttribute (description, "text"  , 0);
		}
		
		public void Add(string itemText, object itemValue)
		{
			comboBoxStore.AppendValues(itemText, new ManagedReference(itemValue));
		}
		
		public void Add(object item)
		{
			comboBoxStore.AppendValues(item.ToString(), new ManagedReference(item));		
		}
		
		private object getValue(TreeIter iter)
		{
			return ((ManagedReference)wrappedComboBox.Model.GetValue(iter, 1)).Object;
		}
		
		public object SelectedValue {
			get {
				TreeIter iter;
         		if (wrappedComboBox.GetActiveIter(out iter))
               		return getValue(iter);
               	return null;
			}
			set {
				TreeIter iter;
				if (wrappedComboBox.Model.GetIterFirst(out iter)) {
					do {
						if (value == getValue(iter)) {
							wrappedComboBox.SetActiveIter(iter);
							return;
						}
					} while (wrappedComboBox.Model.IterNext(ref iter));
				}
			}
		}
		
	}
}