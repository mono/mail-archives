using System;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using System.Net;
using Gtk;

class MsdnView : Window {
    NodeStore Store = new NodeStore (typeof (TreeNode));

    public MsdnView () : base ("blah")
    {
	ScrolledWindow sw = new ScrolledWindow ();
	Add (sw);

	NodeView view = new NodeView (Store);
	view.AppendColumn ("Name", new CellRendererText (), "text", 0);
		
	sw.Add (view);
    }

    static void Main ()
    {
	Application.Init ();
	Tree t;
	XmlSerializer s = new XmlSerializer (typeof (Tree));
	t = (Tree) s.Deserialize (MsdnUtils.GetDocument ("/library/en-us/toc/msdnlib/top.xml"));
	
	MsdnView x = new MsdnView ();
	foreach (TreeNode n in t.Children)
	    x.Store.AddNode (n);
	x.ShowAll ();
	Console.WriteLine (t.ToStringRecurse ());
	Application.Run ();




    }
}

class MsdnUtils {
    public static Stream GetDocument (string s)
    {	
	Console.WriteLine (Environment.StackTrace);
	WebRequest wr = WebRequest.Create ("http://msdn.microsoft.com" + s);
	return wr.GetResponse ().GetResponseStream ();

    }
}

public class Tree {
   [XmlElement ("TreeNode")]
   public TreeNode [] Children;
   public string ToStringRecurse ()
    {
	string s = this.ToString ();
	if (Children != null) {
	    s += "\n{\n";
	    foreach (TreeNode c in Children)
		s += c.ToStringRecurse () + "\n";
	    s += "}\n";
	}
	return s;

    }
}

[TreeNode (ColumnCount=1)]
public class TreeNode : ITreeNode
{
    [XmlAttribute]
    public string NodeId;
    string title;
    [XmlAttribute]
    [TreeNodeValue (Column=0)]
    public string Title {
	get { return title; }
	set { title = value; }
    }
    [XmlAttribute]
    public string Href;
    [XmlAttribute]
    public string ParentXmlSrc;
    [XmlAttribute]
    public string NodeXmlSrc;
    
    TreeNode parent;
    TreeNode [] children;

    [XmlElement ("TreeNode")]
    public TreeNode [] Children {
	get {
	    if (children != null)
		return children;

	    if (NodeXmlSrc == null)
		return null;

	    if (Parent != null)
		return null;

	    TreeNode n = (TreeNode) node_ser.Deserialize (MsdnUtils.GetDocument (NodeXmlSrc));
	    Children = n.children;
	    
	    return children;
	}
	set {
	    children = value;
	    if (children != null)
		foreach (TreeNode c in children)
		    c.parent = this;
	}
    }


    static XmlSerializer node_ser = new XmlSerializer (typeof (TreeNode));
    
    public override string ToString ()
    {
	return string.Format ("TreeNode [{0}:{1}]", NodeId, Title);
    }
    public string ToStringRecurse ()
    {
	string s = this.ToString ();
	if (children != null) {
	    s += "\n{\n";
	    foreach (TreeNode c in children)
		s += c.ToStringRecurse () + "\n";
	    s += "}\n";
	}
	return s;

    }


    static int next_idx = 0;
    int id;
		
    public TreeNode ()
    {
	id = next_idx++;
    }

    public int ID {
	get {
	    return id;
	}
    }

    public ITreeNode Parent {
	get {
	    return parent;
	}
    }
    
    public int ChildCount {
	get {
	    Console.WriteLine (Environment.StackTrace);
	    if (Children == null)
		return 0;
	    return Children.Length;
	}
    }

    public int IndexOf (object o) 
    {
	return Array.IndexOf (Children, o);
    }
    
    public ITreeNode this [int index] {
	get {
	    if (index >= ChildCount)
		return null;
	    
	    return Children [index] as ITreeNode;
	}
    }


    // We are read-only, so this isn't needed...
    public event EventHandler Changed;

    public event TreeNodeAddedHandler ChildAdded;
    
    public event TreeNodeRemovedHandler ChildRemoved;

}

