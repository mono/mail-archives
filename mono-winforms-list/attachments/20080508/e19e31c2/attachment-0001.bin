Index: System.Windows.Forms/Control.cs
===================================================================
--- System.Windows.Forms/Control.cs	(revision 102695)
+++ System.Windows.Forms/Control.cs	(working copy)
@@ -5725,6 +5725,7 @@
 			if (IsDisposed)
 				return;
 
+			Form frm = this as Form;
 			if (m.WParam.ToInt32() != 0) {
 				if (m.LParam.ToInt32 () == 0) {
 					CreateControl ();
@@ -5747,8 +5748,6 @@
 			} else {
 				if (parent != null && Focused) {
 					Control	container;
-					Form frm = this as Form;
-					
 					// Need to start at parent, GetContainerControl might return ourselves if we're a container
 					container = (Control)parent.GetContainerControl();
 					if (container != null && (frm == null || !frm.IsMdiChild)) {
@@ -5757,10 +5756,12 @@
 				}
 			}
 
+			if (frm != null)
+				frm.waiting_showwindow = false;
+
 			// If the form is Max/Min, it got its OnVisibleChanged in SetVisibleCore
-			Form f = this as Form;
-			if (f != null) {
-				if (!IsRecreating && (f.IsMdiChild || f.WindowState == FormWindowState.Normal)) /* XXX make sure this works for mdi forms */
+			if (frm != null) {
+				if (!IsRecreating && (frm.IsMdiChild || frm.WindowState == FormWindowState.Normal)) /* XXX make sure this works for mdi forms */
 					OnVisibleChanged(EventArgs.Empty);
 			} else if (is_toplevel)
 				OnVisibleChanged(EventArgs.Empty);
Index: System.Windows.Forms/XplatUIX11.cs
===================================================================
--- System.Windows.Forms/XplatUIX11.cs	(revision 102695)
+++ System.Windows.Forms/XplatUIX11.cs	(working copy)
@@ -1430,10 +1430,12 @@
 
 		private void MapWindow(Hwnd hwnd, WindowType windows) {
 			if (!hwnd.mapped) {
-				if (Control.FromHandle(hwnd.Handle) is Form) {
-					Form f = Control.FromHandle(hwnd.Handle) as Form;
-					if (f.WindowState == FormWindowState.Normal)
+				Form f = Control.FromHandle(hwnd.Handle) as Form;
+				if (f != null) {
+					if (f.WindowState == FormWindowState.Normal) {
+						f.waiting_showwindow = true;
 						SendMessage(hwnd.Handle, Msg.WM_SHOWWINDOW, (IntPtr)1, IntPtr.Zero);
+					}
 				}
 
 				// it's possible that our Hwnd is no
@@ -1442,44 +1444,40 @@
 				if (hwnd.zombie)
 					return;
 
-				bool need_to_wait = false;
-
 				if ((windows & WindowType.Whole) != 0) {
 					XMapWindow(DisplayHandle, hwnd.whole_window);
 				}
 				if ((windows & WindowType.Client) != 0) {
 					XMapWindow(DisplayHandle, hwnd.client_window);
-
-					need_to_wait = true;
 				}
 
 				hwnd.mapped = true;
 
-				if (need_to_wait && Control.FromHandle(hwnd.Handle) is Form)
+				if (f != null && f.waiting_showwindow)
 					WaitForHwndMessage (hwnd, Msg.WM_SHOWWINDOW);
 			}
 		}
 
 		private void UnmapWindow(Hwnd hwnd, WindowType windows) {
 			if (hwnd.mapped) {
+				Form f = null;
 				if (Control.FromHandle(hwnd.Handle) is Form) {
-					Form f = Control.FromHandle(hwnd.Handle) as Form;
-					if (f.WindowState == FormWindowState.Normal)
+					f = Control.FromHandle(hwnd.Handle) as Form;
+					if (f.WindowState == FormWindowState.Normal) {
+						f.waiting_showwindow = true;
 						SendMessage(hwnd.Handle, Msg.WM_SHOWWINDOW, IntPtr.Zero, IntPtr.Zero);
+					}
 				}
 
 				// it's possible that our Hwnd is no
 				// longer valid after making that
 				// SendMessage call, so check here.
+				// FIXME: it is likely wrong, as it has already sent WM_SHOWWINDOW
 				if (hwnd.zombie)
 					return;
 
-				bool need_to_wait = false;
-
 				if ((windows & WindowType.Client) != 0) {
 					XUnmapWindow(DisplayHandle, hwnd.client_window);
-
-					need_to_wait = true;
 				}
 				if ((windows & WindowType.Whole) != 0) {
 					XUnmapWindow(DisplayHandle, hwnd.whole_window);
@@ -1487,7 +1485,7 @@
 
 				hwnd.mapped = false;
 
-				if (need_to_wait && Control.FromHandle(hwnd.Handle) is Form)
+				if (f != null && f.waiting_showwindow)
 					WaitForHwndMessage (hwnd, Msg.WM_SHOWWINDOW);
 			}
 		}
Index: System.Windows.Forms/Form.cs
===================================================================
--- System.Windows.Forms/Form.cs	(revision 102695)
+++ System.Windows.Forms/Form.cs	(working copy)
@@ -92,6 +92,7 @@
 		private bool			shown_raised;  // The shown event is only raised once
 		private bool			is_clientsize_set;
 		internal bool			suppress_closing_events;
+		internal bool			waiting_showwindow; // for XplatUIX11
 
 #if NET_2_0
 		private MenuStrip		main_menu_strip;
Index: System.Windows.Forms/ApplicationContext.cs
===================================================================
--- System.Windows.Forms/ApplicationContext.cs	(revision 102695)
+++ System.Windows.Forms/ApplicationContext.cs	(working copy)
@@ -106,7 +106,8 @@
 		}
 
 		protected virtual void ExitThreadCore() {
-			XplatUI.PostQuitMessage(0);
+			if (Application.MWFThread.Current.Context == this)
+				XplatUI.PostQuitMessage(0);
 			if (!thread_exit_raised && ThreadExit != null) {
 				thread_exit_raised = true;
 				ThreadExit(this, EventArgs.Empty);
