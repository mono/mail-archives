
#include <stdio.h>
#include <stdlib.h>

#include "GdiPlusFlat.h"
#include "texturebrush.h"
#include <X11/Xlib.h>

void win_draw (Display *dpy, Window win)
{
	GpStatus status;
	GpGraphics *gp;
	GpAdjustableArrowCap *arrowcap;
	GpPen *pen;
	ARGB solid_black = 0xFF000000;
	ARGB solid_red = 0xFFFF0000;
	GpPath *path;
	GpCustomLineCap *hookcap;
	GpPen *customcappen, *cappen2;
	GpLineCap startcap, endcap;
	GpPoint points[] = {
		{150, 150},
		{250, 100},
		{300, 350}
	};
	GpPoint points2[] = {
		{50, 150},
		{150, 350},
		{200, 100}
	};

	XClearWindow (dpy, win);
	GdipCreateFromXDrawable_linux (win, dpy, &gp);

	status = GdipCreateAdjustableArrowCap (10.0, 6.0, TRUE, &arrowcap);
	if (status != Ok) {
		fprintf (stderr, "Error creating arrowcap\n");
		exit (-1);
	}

	status = GdipCreatePen1 (solid_black, 1.0, 0, &pen);
	if (status != Ok) {
		fprintf (stderr, "Error creating pen\n");
		exit (-1);
	}
	
	status = GdipSetPenCustomStartCap (pen, arrowcap);
	if (status != Ok) {
		fprintf (stderr, "Error setting start cap\n");
		exit (-1);
	}

	status = GdipSetPenCustomEndCap (pen, arrowcap);
	if (status != Ok) {
		fprintf (stderr, "Error setting end cap\n");
		exit (-1);
	}

	status = GdipDrawLine (gp, pen, 20, 20, 20, 50);
	status = GdipDrawLine (gp, pen, 50, 20, 200, 20);
	status = GdipDrawLine (gp, pen, 200, 50, 50, 50);
	status = GdipDrawLine (gp, pen, 300, 20, 340, 50);
	status = GdipDrawLine (gp, pen, 280, 20, 240, 50);
	status = GdipDrawLine (gp, pen, 360, 50, 360, 20);

	status = GdipCreatePath (FillModeAlternate, &path);
	if (status != Ok) {
		fprintf (stderr, "Error creating path\n");
		exit (-1);
	}

	status = GdipAddPathLine (path, 0, 0, 0, 5);
	status = GdipAddPathLine (path, 0, 5, 5, 1);
	status = GdipAddPathLine (path, 5, 1, 3, 1);

	status = GdipCreateCustomLineCap (NULL, path, LineCapFlat, 0, &hookcap);
	if (status != Ok) {
		fprintf (stderr, "Error creating custom cap\n");
		exit (-1);
	}

	status = GdipSetCustomLineCapStrokeCaps (hookcap, LineCapRound, LineCapRound);
	if (status != Ok) {
		fprintf (stderr, "Error setting stroke caps\n");
		exit (-1);
	}

	status = GdipCreatePen1 (solid_black, 5.0, 0, &customcappen);
	if (status != Ok) {
		fprintf (stderr, "Error creating custom cap pen\n");
		exit (-1);
	}

	status = GdipSetPenCustomStartCap (customcappen, hookcap);
	if (status != Ok) {
		fprintf (stderr, "Error setting custom pen start cap\n");
		exit (-1);
	}

	status = GdipSetPenCustomEndCap (customcappen, hookcap);
	if (status != Ok) {
		fprintf (stderr, "Error setting custom pen end cap\n");
		exit (-1);
	}

	status = GdipCreatePen1 (solid_red, 10.0, 0, &cappen2);
	if (status != Ok) {
		fprintf (stderr, "Error creating red pen\n");
		exit (-1);
	}

	status = GdipGetCustomLineCapStrokeCaps (hookcap, &startcap, &endcap);
	if (status != Ok) {
		fprintf (stderr, "Error getting custom stroke caps\n");
		exit (-1);
	}

	status = GdipSetPenStartCap (cappen2, startcap);
	if (status != Ok) {
		fprintf (stderr, "Error setting red pen start cap\n");
		exit (-1);
	}

	status = GdipSetPenEndCap (cappen2, endcap);
	if (status != Ok) {
		fprintf (stderr, "Error setting red pen end cap\n");
		exit (-1);
	}

	status = GdipDrawLinesI (gp, cappen2, points, 3);
	if (status != Ok) {
		fprintf (stderr, "Error drawing red lines\n");
		exit (-1);
	}

	status = GdipDrawLinesI (gp, customcappen, points, 3);
	if (status != Ok) {
		fprintf (stderr, "Error drawing custom lines\n");
		exit (-1);
	}

	status = GdipDrawLinesI (gp, cappen2, points2, 3);
	if (status != Ok) {
		fprintf (stderr, "Error drawing second red lines\n");
		exit (-1);
	}

	status = GdipDrawLinesI (gp, customcappen, points2, 3);
	if (status != Ok) {
		fprintf (stderr, "Error drawing second custom lines\n");
		exit (-1);
	}

	GdipDeletePath (path);
	GdipDeleteCustomLineCap (hookcap);
	GdipDeletePen (customcappen);
	GdipDeletePen (cappen2);
}

void handle_events (Display *dpy, Window win)
{
	XEvent xev;

	KeyCode quit_code = XKeysymToKeycode (dpy, XStringToKeysym ("Q"));

	while (1) {
		XNextEvent (dpy, &xev);

		switch (xev.type) {
		case KeyPress: {
			XKeyEvent *kev = &xev.xkey;

			if (kev->keycode == quit_code) {
				return;
			}
			break;
		}
		case ConfigureNotify: {
			XConfigureEvent *cev = &xev.xconfigure;

			break;
		}
		case Expose: {
			XExposeEvent *eev = &xev.xexpose;

			if (eev->count == 0) {
				win_draw (dpy, win);
			}
			break;
		}
		}
	}
}

int main (int argc, char **argv)
{
	GdiplusStartupInput gdiplusStartupInput;
	ULONG_PTR gdiplusToken;

	Display *dpy;
	int scr;
	Window win, root;
	GC gc;

	dpy = XOpenDisplay (0);
	if (dpy == NULL) {
		fprintf (stderr, "Failed to open display\n");
		exit (-1);
	}

	XSynchronize (dpy, 1);
	root = DefaultRootWindow (dpy);
	scr = DefaultScreen (dpy);
	win = XCreateSimpleWindow (dpy, root, 0, 0, 400, 400, 0,
				   WhitePixel (dpy, scr), WhitePixel (dpy, scr));
	XSelectInput (dpy, win, KeyPressMask | StructureNotifyMask | ExposureMask);
	XMapWindow (dpy, win);

	GdiplusStartup (&gdiplusToken, &gdiplusStartupInput, NULL);


	win_draw (dpy, win);
	handle_events (dpy, win);

	GdiplusShutdown (gdiplusToken);

	XDestroyWindow (dpy, win);
	XCloseDisplay (dpy);

	exit (0);
}

