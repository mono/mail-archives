Index: class/Managed.Windows.Forms/System.Windows.Forms/Theme.cs
===================================================================
--- class/Managed.Windows.Forms/System.Windows.Forms/Theme.cs	(revision 103545)
+++ class/Managed.Windows.Forms/System.Windows.Forms/Theme.cs	(working copy)
@@ -957,6 +957,8 @@
 		public abstract Size TrackBarDefaultSize{get; }		// Default size for the TrackBar control
 		
 		public abstract int TrackBarValueFromMousePosition (int x, int y, TrackBar tb);
+
+		public abstract bool TrackBarHasHotThumbStyle { get; }
 		#endregion	// TrackBar
 
 		#region UpDownBase
Index: class/Managed.Windows.Forms/System.Windows.Forms/ThemeWin32Classic.cs
===================================================================
--- class/Managed.Windows.Forms/System.Windows.Forms/ThemeWin32Classic.cs	(revision 103545)
+++ class/Managed.Windows.Forms/System.Windows.Forms/ThemeWin32Classic.cs	(working copy)
@@ -5731,6 +5731,11 @@
 			}
 		}
 
+		public override bool TrackBarHasHotThumbStyle {
+			get {
+				return false;
+			}
+		}
 		#endregion	// TrackBar
 
 		#region UpDownBase
Index: class/Managed.Windows.Forms/System.Windows.Forms/TrackBar.cs
===================================================================
--- class/Managed.Windows.Forms/System.Windows.Forms/TrackBar.cs	(revision 103545)
+++ class/Managed.Windows.Forms/System.Windows.Forms/TrackBar.cs	(working copy)
@@ -76,6 +76,7 @@
 #if NET_2_0
 		private bool right_to_left_layout;
 #endif
+		bool thumb_entered;
 	
 		#region events
 #if NET_2_0
@@ -219,6 +220,7 @@
 			MouseDown += new MouseEventHandler (OnMouseDownTB); 
 			MouseUp += new MouseEventHandler (OnMouseUpTB); 
 			MouseMove += new MouseEventHandler (OnMouseMoveTB);
+			MouseLeave += new EventHandler (OnMouseLeave);
 			KeyDown += new KeyEventHandler (OnKeyDownTB);
 			LostFocus += new EventHandler (OnLostFocusTB);
 			GotFocus += new EventHandler (OnGotFocusTB);
@@ -251,6 +253,17 @@
 				thumb_area = value;
 			}
 		}
+
+		internal bool ThumbEntered {
+			get { return thumb_entered; }
+			set {
+				if (thumb_entered == value)
+					return;
+				thumb_entered = value;
+				if (ThemeEngine.Current.TrackBarHasHotThumbStyle)
+					Invalidate (GetRealThumbRectangle ());
+			}
+		}
 		#endregion	// Private & Internal Properties
 
 		#region Public Properties
@@ -779,8 +792,19 @@
     				if (Value != old_value)
     					OnScroll (EventArgs.Empty);
 			}
+			ThumbEntered = GetRealThumbRectangle ().Contains (e.Location);
     		}
 
+		Rectangle GetRealThumbRectangle ()
+		{
+			Rectangle result = thumb_pos;
+			if (Orientation == Orientation.Vertical) {
+				result.Width = thumb_pos.Height;
+				result.Height = thumb_pos.Width;
+			}
+			return result;
+		}
+
 		internal override void OnPaintInternal (PaintEventArgs pevent)
 		{		
 			ThemeEngine.Current.DrawTrackBar (pevent.Graphics, pevent.ClipRectangle, this);
@@ -885,6 +909,11 @@
  					Refresh();
 			}			
 		}					
+
+		void OnMouseLeave (object sender, EventArgs e)
+		{
+			ThumbEntered = false;
+		}
     		#endregion // Private Methods
 	}
 }
