Index: mcs/class/Managed.Windows.Forms/System.Windows.Forms/X11Structs.cs
===================================================================
--- mcs/class/Managed.Windows.Forms/System.Windows.Forms/X11Structs.cs	(revision 82534)
+++ mcs/class/Managed.Windows.Forms/System.Windows.Forms/X11Structs.cs	(working copy)
@@ -1659,4 +1659,19 @@
 		public int nimage;     /* number of images */
 		public IntPtr images;   /* array of XcursorImage pointers */
 	}
+
+	[StructLayout(LayoutKind.Sequential)]
+	internal struct XVisualInfo
+	{
+		internal IntPtr visual;
+		internal int visualid;
+		internal int screen;
+		internal uint depth;
+		internal int klass;
+		internal uint red_mask;
+		internal uint green_mask;
+		internal uint blue_mask;
+		internal int colormap_size;
+		internal int bits_per_rgb;		
+	}
 }
Index: mcs/class/Managed.Windows.Forms/System.Windows.Forms.X11Internal/Xlib.cs
===================================================================
--- mcs/class/Managed.Windows.Forms/System.Windows.Forms.X11Internal/Xlib.cs	(revision 82534)
+++ mcs/class/Managed.Windows.Forms/System.Windows.Forms.X11Internal/Xlib.cs	(working copy)
@@ -346,5 +346,11 @@
 
 		[DllImport (libX11)]
 		public extern static void XPeekEvent (IntPtr display, ref XEvent xevent);
+
+		[DllImport (libX11)]
+		internal extern static IntPtr XGetVisualInfo (IntPtr display, int vinfo_mask, ref XVisualInfo vinfo_template, ref int nitems);
+
+		[DllImport (libX11)]
+		internal extern static IntPtr XCreateColormap (IntPtr display, IntPtr window, IntPtr visual, int alloc);
 	}
 }
Index: mcs/class/Managed.Windows.Forms/System.Windows.Forms.X11Internal/X11Display.cs
===================================================================
--- mcs/class/Managed.Windows.Forms/System.Windows.Forms.X11Internal/X11Display.cs	(revision 82534)
+++ mcs/class/Managed.Windows.Forms/System.Windows.Forms.X11Internal/X11Display.cs	(working copy)
@@ -1214,8 +1214,32 @@
 						((X11Hwnd)ModalWindows.Peek()).Activate ();
 				}
 			}
-                }
+		}
 
+		public IntPtr GetRGBAColormap ()
+		{
+			IntPtr rgbaColormap = IntPtr.Zero;
+
+			// try to find the rgba visual
+			XVisualInfo visual = new XVisualInfo ();
+			visual.screen = (int) display;
+			visual.depth = 32;
+			visual.red_mask = 0xff0000;
+			visual.green_mask = 0x00ff00;
+			visual.blue_mask = 0x0000ff;
+			int mask = 0x2  /* VisualIDMask */ | 0x04  /* VisualDepthMask */ | 0x10 /* VisualRedMaskMask */ | 
+				0x20 /* VisualGreenMaskMask */ | 0x40 /* VisualBlueMaskMask */;
+
+			int nitems = 0;
+			IntPtr vPtr = Xlib.XGetVisualInfo (display, mask, ref visual, ref nitems);
+			if (vPtr != IntPtr.Zero && nitems > 0) {
+				rgbaColormap = Xlib.XCreateColormap (display, this.RootWindow.Handle, vPtr, 0x0 /* AllocNone */);
+				Xlib.XFree (vPtr);
+			}
+
+			return rgbaColormap;
+		}
+
 		public void GetDisplaySize (out Size size)
 		{
 			XWindowAttributes attributes = new XWindowAttributes();
Index: mcs/class/Managed.Windows.Forms/System.Windows.Forms.X11Internal/X11Hwnd.cs
===================================================================
--- mcs/class/Managed.Windows.Forms/System.Windows.Forms.X11Internal/X11Hwnd.cs	(revision 82534)
+++ mcs/class/Managed.Windows.Forms/System.Windows.Forms.X11Internal/X11Hwnd.cs	(working copy)
@@ -130,7 +130,7 @@
 			    && !StyleSet (cp.Style, WindowStyles.WS_POPUP)) {
 				if (x<0) x = 50;
 				if (y<0) y = 50;
-			}
+			}			
 			// minimum width/height
 			if (width<1) width=1;
 			if (height<1) height=1;
@@ -154,7 +154,13 @@
 
 			ValueMask &= ~(SetWindowValuemask.OverrideRedirect | SetWindowValuemask.SaveUnder);
 
-			if (display.CustomVisual != IntPtr.Zero && display.CustomColormap != IntPtr.Zero) {
+			if (ExStyleSet (cp.ExStyle, WindowExStyles.WS_EX_TRANSPARENT)) {
+				IntPtr colormap = Display.GetRGBAColormap ();
+				if (colormap != IntPtr.Zero) {
+					ValueMask |= SetWindowValuemask.ColorMap;
+					Attributes.colormap = colormap;
+				}
+			} else if (display.CustomVisual != IntPtr.Zero && display.CustomColormap != IntPtr.Zero) {
 				ValueMask |= SetWindowValuemask.ColorMap;
 				Attributes.colormap = display.CustomColormap;
 			}