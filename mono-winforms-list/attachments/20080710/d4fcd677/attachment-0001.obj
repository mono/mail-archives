Index: class/Managed.Windows.Forms/System.Windows.Forms.VisualStyles/VisualStyleRenderer.cs
===================================================================
--- class/Managed.Windows.Forms/System.Windows.Forms.VisualStyles/VisualStyleRenderer.cs	(revision 107683)
+++ class/Managed.Windows.Forms/System.Windows.Forms.VisualStyles/VisualStyleRenderer.cs	(working copy)
@@ -44,14 +44,24 @@
 
 		#region Public Constructors
 		public VisualStyleRenderer (string className, int part, int state)
+			: this (className, part, state, false)
 		{
+		}
+
+		VisualStyleRenderer (string className, int part, int state, bool skipApplicationVisualStyleStateCheck)
+		{
 			theme_handle_manager.VisualStyleRenderer = this;
-			this.SetParameters (className, part, state);
+			this.SetParameters (className, part, state, skipApplicationVisualStyleStateCheck);
 		}
 
 		public VisualStyleRenderer (VisualStyleElement element)
-			: this (element.ClassName, element.Part, element.State) {
+			: this (element, false)
+		{
 		}
+
+		internal VisualStyleRenderer (VisualStyleElement element, bool skipApplicationVisualStyleStateCheck)
+			: this (element.ClassName, element.Part, element.State, skipApplicationVisualStyleStateCheck) {
+		}
 		#endregion
 
 		#region Public Properties
@@ -63,22 +73,33 @@
 		
 		public static bool IsSupported {
 			get {
-				if (!VisualStyleInformation.IsEnabledByUser) 
-					return false;
-				
-				if (Application.VisualStyleState == VisualStyleState.ClientAndNonClientAreasEnabled ||
-					Application.VisualStyleState == VisualStyleState.ClientAreaEnabled)
-						return true;
-						
-				return false;
+				return GetIsSupported (false);
 			}
 		}
+
+		static bool GetIsSupported (bool skipApplicationVisualStyleStateCheck)
+		{
+			if (!VisualStyleInformation.IsEnabledByUser) 
+				return false;
+			
+			if (skipApplicationVisualStyleStateCheck ||
+				Application.VisualStyleState == VisualStyleState.ClientAndNonClientAreasEnabled ||
+				Application.VisualStyleState == VisualStyleState.ClientAreaEnabled)
+					return true;
+					
+			return false;
+		}
 		#endregion
 
 		#region Public Static Methods
 		public static bool IsElementDefined (VisualStyleElement element)
 		{
-			if (!IsSupported)
+			return IsElementDefined (element, false);
+		}
+
+		internal static bool IsElementDefined (VisualStyleElement element, bool skipApplicationVisualStyleStateCheck)
+		{
+			if (!GetIsSupported (skipApplicationVisualStyleStateCheck))
 				throw new InvalidOperationException ("Visual Styles are not enabled.");
 
 			if (IsElementKnownToBeSupported (element.ClassName, element.Part, element.State))
@@ -390,10 +411,15 @@
 
 		public void SetParameters (string className, int part, int state)
 		{
+			SetParameters (className, part, state, false);
+		}
+
+		void SetParameters (string className, int part, int state, bool skipApplicationVisualStyleStateCheck)
+		{
 			if (theme != IntPtr.Zero)
 				last_hresult = VisualStyles.UxThemeCloseThemeData (theme);
 
-			if (!IsSupported)
+			if (!GetIsSupported (skipApplicationVisualStyleStateCheck))
 				throw new InvalidOperationException ("Visual Styles are not enabled.");
 
 			this.class_name = className;
@@ -409,8 +435,13 @@
 
 		public void SetParameters (VisualStyleElement element)
 		{
-			this.SetParameters (element.ClassName, element.Part, element.State);
+			SetParameters (element, false);
 		}
+
+		internal void SetParameters (VisualStyleElement element, bool skipApplicationVisualStyleStateCheck)
+		{
+			this.SetParameters (element.ClassName, element.Part, element.State, skipApplicationVisualStyleStateCheck);
+		}
 		#endregion
 
 		#region Private Properties
Index: class/Managed.Windows.Forms/System.Windows.Forms/ThemeVisualStyles.cs
===================================================================
--- class/Managed.Windows.Forms/System.Windows.Forms/ThemeVisualStyles.cs	(revision 107683)
+++ class/Managed.Windows.Forms/System.Windows.Forms/ThemeVisualStyles.cs	(working copy)
@@ -787,9 +787,9 @@
 			if (form.WindowManager is MdiWindowManager && form.WindowManager.IsMaximized)
 				return null;
 			VisualStyleElement title_bar_element = ManagedWindowGetTitleBarVisualStyleElement (form.WindowManager);
-			if (!VisualStyleRenderer.IsElementDefined (title_bar_element))
+			if (!VisualStyleRenderer.IsElementDefined (title_bar_element, true))
 				return null;
-			VisualStyleRenderer renderer = new VisualStyleRenderer (title_bar_element);
+			VisualStyleRenderer renderer = new VisualStyleRenderer (title_bar_element, true);
 			if (!renderer.IsBackgroundPartiallyTransparent ())
 				return null;
 			IDeviceContext dc = GetMeasurementDeviceContext ();
@@ -815,32 +815,32 @@
 			VisualStyleElement right_border_element;
 			VisualStyleElement bottom_border_element;
 			ManagedWindowGetBorderVisualStyleElements (wm, out left_border_element, out right_border_element, out bottom_border_element);
-			if (!VisualStyleRenderer.IsElementDefined (title_bar_element) ||
+			if (!VisualStyleRenderer.IsElementDefined (title_bar_element, true) ||
 				(!wm.IsMinimized && (
-				!VisualStyleRenderer.IsElementDefined (left_border_element) ||
-				!VisualStyleRenderer.IsElementDefined (right_border_element) ||
-				!VisualStyleRenderer.IsElementDefined (bottom_border_element))))
+				!VisualStyleRenderer.IsElementDefined (left_border_element, true) ||
+				!VisualStyleRenderer.IsElementDefined (right_border_element, true) ||
+				!VisualStyleRenderer.IsElementDefined (bottom_border_element, true))))
 				return base.ManagedWindowDrawTitleBarAndBorders (dc, clip, wm);
-			VisualStyleRenderer renderer = new VisualStyleRenderer (title_bar_element);
+			VisualStyleRenderer renderer = new VisualStyleRenderer (title_bar_element, true);
 			Rectangle title_bar_rectangle = ManagedWindowGetTitleBarRectangle (wm);
 			renderer.DrawBackground (dc, title_bar_rectangle, clip);
 			if (!wm.IsMinimized) {
 				int border_width = ManagedWindowBorderWidth (wm);
-				renderer.SetParameters (left_border_element);
+				renderer.SetParameters (left_border_element, true);
 				renderer.DrawBackground (dc, new Rectangle (
 					0,
 					title_bar_rectangle.Bottom,
 					border_width,
 					wm.Form.Height - title_bar_rectangle.Bottom
 					), clip);
-				renderer.SetParameters (right_border_element);
+				renderer.SetParameters (right_border_element, true);
 				renderer.DrawBackground (dc, new Rectangle (
 					wm.Form.Width - border_width,
 					title_bar_rectangle.Bottom,
 					border_width,
 					wm.Form.Height - title_bar_rectangle.Bottom
 					), clip);
-				renderer.SetParameters (bottom_border_element);
+				renderer.SetParameters (bottom_border_element, true);
 				renderer.DrawBackground (dc, new Rectangle (
 					0,
 					wm.Form.Height - border_width,
@@ -975,7 +975,7 @@
 						element = VisualStyleElement.Window.RestoreButton.Hot;
 						break;
 					}
-				if (VisualStyleRenderer.IsElementDefined (element))
+				if (VisualStyleRenderer.IsElementDefined (element, true))
 					return true;
 			}
 			return base.ManagedWindowTitleButtonHasHotElementStyle (button, form);
@@ -1054,11 +1054,11 @@
 				return;
 			}
 			VisualStyleElement element = ManagedWindowGetTitleButtonVisualStyleElement (button, form);
-			if (!VisualStyleRenderer.IsElementDefined (element)) {
+			if (!VisualStyleRenderer.IsElementDefined (element, true)) {
 				base.ManagedWindowDrawTitleButton (dc, button, clip, form);
 				return;
 			}
-			new VisualStyleRenderer (element).DrawBackground (dc, button.Rectangle, clip);
+			new VisualStyleRenderer (element, true).DrawBackground (dc, button.Rectangle, clip);
 		}
 		public override Size ManagedWindowButtonSize (InternalWindowManager wm)
 		{
@@ -1067,10 +1067,10 @@
 			VisualStyleElement element = wm.IsToolWindow && !wm.IsMinimized ?
 				VisualStyleElement.Window.SmallCloseButton.Normal :
 				VisualStyleElement.Window.CloseButton.Normal;
-			if (!VisualStyleRenderer.IsElementDefined (element))
+			if (!VisualStyleRenderer.IsElementDefined (element, true))
 				return base.ManagedWindowButtonSize (wm);
 			IDeviceContext dc = GetMeasurementDeviceContext ();
-			Size result = new VisualStyleRenderer (element).GetPartSize (dc, ThemeSizeType.True);
+			Size result = new VisualStyleRenderer (element, true).GetPartSize (dc, ThemeSizeType.True);
 			ReleaseMeasurementDeviceContext (dc);
 			return result;
 		}
@@ -1081,11 +1081,11 @@
 				return;
 			}
 			VisualStyleElement element = ManagedWindowGetMenuButtonVisualStyleElement (button, wm);
-			if (!VisualStyleRenderer.IsElementDefined (element)) {
+			if (!VisualStyleRenderer.IsElementDefined (element, true)) {
 				base.ManagedWindowDrawMenuButton (dc, button, clip, wm);
 				return;
 			}
-			new VisualStyleRenderer (element).DrawBackground (dc, button.Rectangle, clip);
+			new VisualStyleRenderer (element, true).DrawBackground (dc, button.Rectangle, clip);
 		}
 		static VisualStyleElement ManagedWindowGetMenuButtonVisualStyleElement (TitleButton button, InternalWindowManager wm)
 		{
