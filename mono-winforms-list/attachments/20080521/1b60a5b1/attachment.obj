Index: class/Managed.Windows.Forms/System.Windows.Forms/ComboBox.cs
===================================================================
--- class/Managed.Windows.Forms/System.Windows.Forms/ComboBox.cs	(revision 103730)
+++ class/Managed.Windows.Forms/System.Windows.Forms/ComboBox.cs	(working copy)
@@ -70,6 +70,7 @@
 		private Rectangle button_area;
 		private Rectangle listbox_area;
 		private const int button_width = 16;
+		bool drop_down_button_entered;
 #if NET_2_0
 		private AutoCompleteStringCollection auto_complete_custom_source = null;
 		private AutoCompleteMode auto_complete_mode = AutoCompleteMode.None;
@@ -111,6 +112,7 @@
 			MouseUp += new MouseEventHandler (OnMouseUpCB);
 			MouseMove += new MouseEventHandler (OnMouseMoveCB);
 			MouseWheel += new MouseEventHandler (OnMouseWheelCB);
+			MouseLeave += new EventHandler (OnMouseLeave);
 			KeyDown +=new KeyEventHandler(OnKeyDownCB);
 		}
 
@@ -1470,24 +1472,40 @@
 			}
 			
 			if (show_dropdown_button) {
-				dc.FillRectangle (theme.ResPool.GetSolidBrush (theme.ColorControl), button_area);
-
 				ButtonState current_state;
 				if (is_enabled)
 					current_state = button_state;
 				else
 					current_state = ButtonState.Inactive;
 
+				if (is_flat || theme.ComboBoxNormalDropDownButtonHasTransparentBackground (this, current_state))
+					dc.FillRectangle (theme.ResPool.GetSolidBrush (theme.ColorControl), button_area);
+
 				if (is_flat) {
 					theme.DrawFlatStyleComboButton (dc, button_area, current_state);
 				} else {
-					theme.CPDrawComboButton (dc, button_area, current_state);
+					theme.ComboBoxDrawNormalDropDownButton (this, dc, clip, button_area, current_state); 
 				}
 			}
 		}
 
+		internal bool DropDownButtonEntered {
+			get {
+				return drop_down_button_entered;
+			}
+			private set {
+				if (drop_down_button_entered == value)
+					return;
+				drop_down_button_entered = value;
+				if (ThemeEngine.Current.ComboBoxDropDownButtonHasHotElementStyle (this))
+					Invalidate (button_area);
+			}
+		}
+
 		internal void DropDownListBox ()
 		{
+			DropDownButtonEntered = false;
+
 			if (DropDownStyle == ComboBoxStyle.Simple)
 				return;
 			
@@ -1703,8 +1721,17 @@
 			Capture = true;
 		}
 
+		void OnMouseLeave (object sender, EventArgs e)
+		{
+			if (show_dropdown_button)
+				DropDownButtonEntered = false;
+		}
+
 		void OnMouseMoveCB (object sender, MouseEventArgs e)
 		{
+			if (show_dropdown_button && !dropped_down)
+				DropDownButtonEntered = button_area.Contains (e.Location);
+
 			if (DropDownStyle == ComboBoxStyle.Simple)
 				return;
 
Index: class/Managed.Windows.Forms/System.Windows.Forms/Theme.cs
===================================================================
--- class/Managed.Windows.Forms/System.Windows.Forms/Theme.cs	(revision 103730)
+++ class/Managed.Windows.Forms/System.Windows.Forms/Theme.cs	(working copy)
@@ -742,6 +742,9 @@
 		// Drawing
 		public abstract void DrawComboBoxItem (ComboBox ctrl, DrawItemEventArgs e);
 		public abstract void DrawFlatStyleComboButton (Graphics graphics, Rectangle rectangle, ButtonState state);
+		public abstract void ComboBoxDrawNormalDropDownButton (ComboBox comboBox, Graphics g, Rectangle clippingArea, Rectangle area, ButtonState state);
+		public abstract bool ComboBoxNormalDropDownButtonHasTransparentBackground (ComboBox comboBox, ButtonState state);
+		public abstract bool ComboBoxDropDownButtonHasHotElementStyle (ComboBox comboBox);
 		#endregion	// ComboBox
 
 		#region Control
Index: class/Managed.Windows.Forms/System.Windows.Forms/ThemeWin32Classic.cs
===================================================================
--- class/Managed.Windows.Forms/System.Windows.Forms/ThemeWin32Classic.cs	(revision 103730)
+++ class/Managed.Windows.Forms/System.Windows.Forms/ThemeWin32Classic.cs	(working copy)
@@ -1579,6 +1579,18 @@
 				graphics.FillPolygon(SystemBrushes.ControlText, arrow, FillMode.Winding);
 			}		
 		}
+		public override void ComboBoxDrawNormalDropDownButton (ComboBox comboBox, Graphics g, Rectangle clippingArea, Rectangle area, ButtonState state)
+		{
+			CPDrawComboButton (g, area, state);
+		}
+		public override bool ComboBoxNormalDropDownButtonHasTransparentBackground (ComboBox comboBox, ButtonState state)
+		{
+			return true;
+		}
+		public override bool ComboBoxDropDownButtonHasHotElementStyle (ComboBox comboBox)
+		{
+			return false;
+		}
 		#endregion ComboBox
 		
 		#region Datagrid
