* Test case approach and ToDos for MWF testing

* Approach 

	* We are writing unit tests using NUnit for checking Property, Method and Events for every Control/Class.
        * Properties and Methods are grouped together and are in file ControlNameTets.cs Events are in file 
        ControlNameEventTets.cs.

	* Properties are checked for its default value.
	
   		example :
			For Label: FlatStyle default property is standard. 
	   		Assert.AreEqual (FlatStyle.Standard , l.FlatStyle, "#A1");

	* Methods are called and expected properties are checked.

		example :
			public void LabelScaleMethodTest () {
   				Label mylabel = new Label ();
   				mylabel.Width = 40;
				mylabel.Scale (2); //calling Scale method.
   				Assert.AreEqual (80, mylabel.Width, "#A1");
			}

	* Events are invoked and checked inside an event handler 

		example:
			public class EventClass
			{	
				static bool eventhandled = false;
				public static void Event_Handler1(object sender, EventArgs e)
        			{
					eventhandled = true;
        			}

				public void BackColorChangedTest() 
				{
        	    			Control c = new Control();
				      	// Test BackColorChanged Event
					c.BackColorChanged += new  System.EventHandler(Event_Handler1);
			        	c.BackColor = Color.Black;
				        Assert.AreEqual(true, eventhandled, "#A2");
				}
			}
	
   		
* ToDos.
	
	* We are not checking for protected Properties, Methods or Events

	* Members are not checked if they are inherited form any other Control.
	
	* Negative Test are not covered. 
	
	* Properties are not checked explicitly for set and get.

	* In Events source and other properties for EventArgs are not checked
	
	* Visual tests, which are environment dependent are tested for the basic property
		
		example:	Assert.AreEqual("Mono Project, Novell, Inc.", Control.CompanyName, "#A4"); 
		
		example: Height could vary of different environment
 	
				public void GetItemRectTest ()
				{
					Form myform = new Form ();
					ListView mylistview = new ListView ();
					mylistview.Items.Add ("Item 1");	
					Rectangle r = mylistview.GetItemRect (0);
					AAssert.IsTrue (r.Height > 0, "#A3"); // Checking for height to be greater than 0 
										 not for a specific value           
				}
            
	* Some of the Update,Focus,Mouse,etc related visual tests are not covered

		example: 
			MousePosition property for Control class.

		example:
	        	public void BeginEndUpdateTest ()
		        {
        		        Form myform = new Form ();
                		myform.Visible = true;
		                ListView mylistview = new ListView();
                		mylistview.Visible = true;
        		        mylistview.BeginUpdate ();  //BeginUpdate Method
                		for(int x = 1 ; x < 5000 ; x++){
	                        	mylistview.Items.Add ("Item " + x.ToString());
				}
			}
