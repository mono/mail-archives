// Main.cs created with MonoDevelop
// User: gnilk at 20:28Â 05/27/2008
//
// To change standard headers go to Edit->Preferences->Coding->Standard Headers
//
using System;
using System.Threading;
using System.Collections.Generic;
using System.Text;

using System.Windows.Forms;
using System.Drawing;
using System.ComponentModel;
using System.Threading;



namespace osxWinFormsBug
{
	public enum KeyState
    {
        ksUnknown,  // Means: No registered state for a given key
        ksDown,     // Last known state was Down
        ksUp,       // Last known state was Up
    };


    public class WinFormsTest
    {

        // Internal class, used to enabled certain features and control
        // specific behaviour of the window!
        protected class MyWindow : Form
        {
            bool bClearBackground = true;
            public MyWindow()
                : base()
            {
                this.DoubleBuffered = true;                
            }
            protected override void OnPaintBackground(PaintEventArgs e)
            {
                if (bClearBackground)
                {
                    base.OnPaintBackground(e);
                    bClearBackground = false;
                }
                
            }
        }


        const int DEFAULT_WIDTH = 640;
        const int DEFAULT_HEIGHT = 480;
        const int DEFAULT_BPP = 32;

        protected string sTitle = "GOA v2 - .NET Winforms";
        protected int iWidth = 640;
        protected int iHeight = 480;
        protected bool bFullscreen = false;
        protected int iBitplanes = 32;
        protected string sAspect = "4:3";   // supported: 4:3, 16:9 or custom

        //protected Pixmap pixmap = null;
        //protected Form window = null;
        protected MyWindow window = null;

        // "vertical retrace", signals that an update has completed!
        protected bool bWaitForRefresh = true;
        protected ManualResetEvent refresh = new ManualResetEvent(false); 

        protected BackgroundWorker windowthread;
        protected Queue<int> kbinputqueue = new Queue<int>();

        protected struct KeyEvent
        {
            public int iKey;
            public KeyState currentState;
            public bool bHasBeenPressed;
            public DateTime timestamp;
        }
        protected Dictionary<int, KeyEvent> kbhitmap = new Dictionary<int, KeyEvent>();

        #region IDisplayDriver Members
        public string Description
        {
            get
            {
                return "name=winforms;fullscreen=false;date=26032008";
            }
        }
        public string Caption
        {
            get
            {
                if (window != null)
                {
                    return window.Text;
                }
                return null;
            }
            set
            {
                if (window != null)
                {
                    window.Text = value;
                }
            }
        }

        public void Configure(string sConfig)
        {
            //Dictionary<string, string> properties = StringHelper.SplitPropertyString(sConfig);


        }

        public void Initialize()
        {
            if (window == null)
            {
                window = new MyWindow();

                window.ClientSize = new System.Drawing.Size(iWidth, iHeight);
                window.FormBorderStyle = FormBorderStyle.FixedSingle;
                window.Visible = true;

                window.Text = sTitle;

                window.MaximizeBox = false;
                window.MinimizeBox = false;

                window.Paint += new PaintEventHandler(window_Paint);
                
                window.KeyPress += new KeyPressEventHandler(window_KeyPress);
                window.KeyDown += new KeyEventHandler(window_KeyDown);
                window.KeyUp += new KeyEventHandler(window_KeyUp);
			
				window.Show();
            }
        }


        public void Dispose()
        {
            window.Close();
            window = null;
        }

        protected delegate void DoUpdateDelegate(object pMap);
        public void Update(object pMap)
        {
            // Make sure we come from the right thread!
            if (window.InvokeRequired)
            {
				System.Console.WriteLine("Update, Invoking!");
                window.Invoke(new DoUpdateDelegate(Update), new object[] { pMap });
            }
            else
            {
                //System.Console.WriteLine("Update, updateing");
                //pixmap = pMap;
                refresh.Reset();
                window.Invalidate();
                // Should be placed in own thread ?
				//System.Console.WriteLine("Application.DoEvents...");
                //Application.DoEvents();
				window.Update();
                // If using tripple buffer, you won't need this unless you
                // are extremely fast!
                if (bWaitForRefresh)
                {
					//System.Console.WriteLine("Waiting for refresh event...");
                    refresh.WaitOne();
                }
            }
        }

        public KeyState GetKeyState(int iKey)
        {
            KeyState state = KeyState.ksUnknown;
            if (kbhitmap.ContainsKey(iKey))
            {
                state = kbhitmap[iKey].currentState;
            }
            return state;
        }

        // Checks if a certain key has been pressed since last time
        public bool KeyPressed(int iKey)
        {
            bool bRes = false;
            if (kbhitmap.ContainsKey(iKey))
            {
                bRes = kbhitmap[iKey].bHasBeenPressed;
                // Reset!                
                KeyEvent kv = kbhitmap[iKey];
                kv.bHasBeenPressed = false;
                kbhitmap[iKey] = kv;
            }
            return bRes;
        }
        #endregion

        #region Event handlers
		Color[] colArray = new Color[] {
			System.Drawing.Color.Azure,
			System.Drawing.Color.Red,
			System.Drawing.Color.Blue,
			System.Drawing.Color.White,
			System.Drawing.Color.Yellow,
		};
		int iColSpinCount = 0;
        void window_Paint(object sender, PaintEventArgs e)
        {
            System.Drawing.Graphics g = e.Graphics;
			//System.Console.WriteLine("window_Paint");
            	
			//g.DrawString("wefwef",window.Font,System.Drawing.Brushes.Black,0.0f,0.0f);
			         
			//g.FillRectangle(System.Drawing.SystemBrushes.ControlDark, window.ClientRectangle);
            g.Clear(colArray[iColSpinCount]);
			iColSpinCount++;
			if (iColSpinCount >= colArray.Length)
			{
				iColSpinCount = 0;
			}
            
            refresh.Set();

        }
        void window_KeyPress(object sender, KeyPressEventArgs e)
        {
            //System.Console.WriteLine("KC: {0}", (int)e.KeyChar);
            kbinputqueue.Enqueue((int)e.KeyChar);
        }
        void window_KeyUp(object sender, KeyEventArgs e)
        {
            KeyEvent kv;
            if (kbhitmap.ContainsKey(e.KeyValue))
            {
                kv = kbhitmap[e.KeyValue];
                kv.currentState = KeyState.ksUp;
                kbhitmap[e.KeyValue] = kv;
            }
            else
            {
                // Very strange!
            }
        }

        void window_KeyDown(object sender, KeyEventArgs e)
        {
            //throw new Exception("The method or operation is not implemented.");
			
            KeyEvent kv;
            if (kbhitmap.ContainsKey(e.KeyValue))
            {
                kv = kbhitmap[e.KeyValue];
            }
            else
            {
                kv = new KeyEvent();
            }
            kv.bHasBeenPressed = true;
            kv.timestamp = DateTime.UtcNow;
            kv.iKey = e.KeyValue;
            kv.currentState = KeyState.ksDown;
            kbhitmap[e.KeyValue] = kv;
        }
        #endregion
    }

	class MainClass
	{
		public static void Main(string[] args)
		{
			WinFormsTest disp = new WinFormsTest();
			disp.Initialize();
			while(!disp.KeyPressed((int)System.Windows.Forms.Keys.Escape))
			{
				disp.Update(null);
				Thread.Sleep(10);
				Application.DoEvents();
			}
			Console.WriteLine("Hello World!");
			
			
		}
	}
}