diff --git a/samples/ImageKitDemoStep1/DragDelegate.cs b/samples/ImageKitDemoStep1/DragDelegate.cs
index 9acc344..d110517 100644
--- a/samples/ImageKitDemoStep1/DragDelegate.cs
+++ b/samples/ImageKitDemoStep1/DragDelegate.cs
@@ -28,7 +28,7 @@ namespace ImageKitDemo
 			//so it is best to not display the copy icon.
 
 			//Console.WriteLine ("Drag Delegate received 'DraggingUpdated'");
-			NSObject obj = GetSource(sender);
+			NSObject obj = sender.DraggingSource;
 			if (obj != null && obj.Equals (browserView))
 			{
 				return NSDragOperation.Move;
@@ -43,55 +43,31 @@ namespace ImageKitDemo
 			//It seems that browserView does not send this message when it is an internal move.
 			//It does all the work by sending a moveitems message to the datasource,
 			// but I return false here just to be safe.
-			NSObject obj = GetSource (sender);
-			if (obj != null && obj.Equals (browserView))
-			{
+
+			NSObject obj = sender.DraggingSource;
+			if (obj != null && obj.Equals (browserView)) {
 				Console.WriteLine ("\tLet the image browser handle it.");
 				return false;
 			}
-			//I'm not sure this is the best way to get data from the pasteboard, but it works
-			//for me today.
-			NSPasteboard pb = GetPasteboard (sender);
+
+			NSPasteboard pb = sender.DraggingPasteboard ;
 			NSArray data = null;
-//			if (pb.Types.Contains (NSPasteboard.NSUrlType))
-//				data = pb.GetPropertyListForType (NSPasteboard.NSUrlType) as NSArray;
+			//			if (pb.Types.Contains (NSPasteboard.NSUrlType))
+			//				data = pb.GetPropertyListForType (NSPasteboard.NSUrlType) as NSArray;
 			if (pb.Types.Contains (NSPasteboard.NSFilenamesType))
 				data = pb.GetPropertyListForType (NSPasteboard.NSFilenamesType) as NSArray;
-			if (data != null)
-			{
-				//Console.WriteLine ("Got Data");
+			if (data != null) {
 				for (int i = 0; i < data.Count; i++) {
 					string path = (string)NSString.FromHandle (data.ValueAt ((uint)i));
 					Console.WriteLine ("From pasteboard Item {0} = {1}", i, path);
 					((BrowseData)browserView.DataSource).AddImages (
 						NSUrl.FromFilename (path), browserView.GetIndexAtLocationOfDroppedItem ());
-					browserView.ReloadData();
+					browserView.ReloadData ();
 				}
 			}
 			return true;
 		}
 
-
-		#region communicating with sender
-		//calling NSDraggingInfo methods on the sender crashes the app, so we need to use the low level system.
-		//Thanks to http://mono.1490590.n4.nabble.com/MonoMac-Drag-and-Drop-tp2533506p2539358.html
-
-		static IntPtr selDraggingPasteboard = Selector.GetHandle ("draggingPasteboard");
-		static IntPtr selDraggingSouce = Selector.GetHandle ("draggingSource");
-
-		private NSPasteboard GetPasteboard (NSDraggingInfo sender)
-		{
-			return (NSPasteboard) Runtime.GetNSObject (Messaging.IntPtr_objc_msgSend (sender.Handle, selDraggingPasteboard));
-		}
-
-		private NSObject GetSource(NSDraggingInfo sender)
-		{
-			return Runtime.GetNSObject (Messaging.IntPtr_objc_msgSend (sender.Handle, selDraggingSouce));
-		}
-
-		#endregion
-
-
 		#region implemented only for testing
 		public override bool PrepareForDragOperation (NSDraggingInfo sender)
 		{
