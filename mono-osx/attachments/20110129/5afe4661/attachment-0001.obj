using System;
using System.Collections.Generic;

namespace MonoMac.Security
{
    public class KeychainException : Exception
    {
    }

    public class Keychain : IDisposable
    {

        private Keychain()
        {}

        // keychain access
        public static Keychain Create(string path)
        {
            throw new NotImplementedException();
        }

        public static Keychain Open(string path)
        {
            throw new NotImplementedException();
        }

        public static Keychain Default
        {
            get { throw new NotImplementedException(); }
        }

        // events
        public event EventHandler<KeychainEventArgs> Locked;
        public event EventHandler<KeychainEventArgs> Unlocked;
        public event EventHandler<KeychainEventArgs> ItemAdded;
        public event EventHandler<KeychainEventArgs> ItemDeleted;
        public event EventHandler<KeychainEventArgs> ItemUpdated;
        public event EventHandler<KeychainEventArgs> PasswordChanged;

        // keychain manipulation
        public void Delete()
        {
            throw new NotImplementedException();
        }

        public void SetDefault()
        {
            throw new NotImplementedException();
        }

        public void Lock()
        {
            throw new NotImplementedException();
        }

        public static void LockAllUserKeychains()
        {
            throw new NotImplementedException();
        }

        public void Unlock()
        {
            throw new NotImplementedException();
        }

        // read-only properties
        public string Path
        {
            get { throw new NotImplementedException(); }
        }

        public bool IsLocked
        {
            get { throw new NotImplementedException(); }
        }

        public bool IsReadable
        {
            get { throw new NotImplementedException(); }
        }

        public bool IsWriteable
        {
            get { throw new NotImplementedException(); }
        }

        public int Version
        {
            get { throw new NotImplementedException(); }
        }

        public KeychainAccessControl AccessControl
        {
            get { throw new NotImplementedException(); }
        }

        public IntPtr NativeHandle
        {
            get { throw new NotImplementedException(); }
        }

        // settable properties
        public bool LockOnSleep
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }

        public TimeSpan? LockInterval
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }

        public bool UserInteractionAllowed
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }

        // storing and retrieving passwords
        public KeychainItem AddGenericPassword(string service, string account, byte[] password)
        {
            throw new NotImplementedException();
        }

        public KeychainItem AddInternetPassword(string server, string account, byte[] password /*, ...*/)
        {
            throw new NotImplementedException();
        }

        public KeychainItem AddCustomPassword(IDictionary<object, object> attributes)
        {
            throw new NotImplementedException();
        }

        public bool TryFindGenericPassword(string service, string account, out KeychainItem record)
        {
            throw new NotImplementedException();
        }

        public bool TryFindInternetPassword(string server, string account, out KeychainItem record /*, ...*/)
        {
            throw new NotImplementedException();
        }

        public bool TryFindCustomPassword(IDictionary<object, object> attributes, out KeychainItem record)
        {
            throw new NotImplementedException();
        }

        // enumerating items
        public IEnumerable<KeychainItem> GetKeychainItems(IDictionary<object, object> filter)
        {
            throw new NotImplementedException();
        }

        // IDisposable
        public void Dispose()
        {
            throw new NotImplementedException();
        }
    }

    public class KeychainItem : IDisposable
    {
        private KeychainItem()
        {}

        // Password record manipulation
        public void Delete()
        {
            throw new NotImplementedException();
        }

        // read-only properties
        public IDictionary<object, object> Attributes
        {
            get { throw new NotImplementedException(); }
        }

        public KeychainAccessControl AccessControl
        {
            get { throw new NotImplementedException(); }
        }

        public IntPtr NativeHandle
        {
            get { throw new NotImplementedException(); }
        }

        // properties
        // strongly typed properties over password record
        // modifying the property causes immediate modification of the backing keychain object
        public DateTime? CreationDate
        {
            get { throw new NotImplementedException(); }
            set { throw new NotImplementedException(); }
        }
        // many, many more...

        // IDisposable
        public void Dispose()
        {
            throw new NotImplementedException();
        }
    }

    public class KeychainAccessControl : IDisposable
    {
        private KeychainAccessControl()
        {}

        // read-only properties
        public ICollection<TrustedApplication> OwnerAccessList
        {
            get { throw new NotImplementedException(); }
        }

        public ICollection<TrustedApplication> SafeOperationAccessList
        {
            get { throw new NotImplementedException(); }
        }

        public ICollection<TrustedApplication> RestrictedOperationAccessList
        {
            get { throw new NotImplementedException(); }
        }

        public IntPtr NativeHandle
        {
            get { throw new NotImplementedException(); }
        }

        // IDisposable
        public void Dispose()
        {
            throw new NotImplementedException();
        }
    }

    public class TrustedApplication : IDisposable
    {
        private TrustedApplication()
        {}

        // creation
        public static TrustedApplication Create(string path)
        {
            throw new NotImplementedException();
        }

        // read-only properites
        public string Path
        {
            get { throw new NotImplementedException(); }
        }

        public IntPtr NativeHandle
        {
            get { throw new NotImplementedException(); }
        }

        //
        public void Dispose()
        {
            throw new NotImplementedException();
        }
    }

    public class KeychainEventArgs : EventArgs
    {
        // TBD
    }
}

