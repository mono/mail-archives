Index: AppKit/Enums.cs
===================================================================
--- AppKit/Enums.cs	(revision 156369)
+++ AppKit/Enums.cs	(working copy)
@@ -1160,4 +1160,22 @@
 		PlainText,
 		Rounded
 	}
+	
+	public enum NSWorkspaceLaunchOptions {
+		Print = 2,
+		InhibitingBackgroundOnly = 80,
+		WithoutAddingToRecents = 100,
+		WithoutActivation = 200,
+		Async = 10000,
+		AllowingClassicStartup = 20000,
+		PreferringClassic = 40000,
+		NewInstance = 80000,
+		Hide = 100000,
+		HideOthers = 200000,
+		Default = Async | AllowingClassicStartup
+	}
+	public enum NSWorkspaceIconCreationOptions {
+		NSExcludeQuickDrawElements   = 1 << 1,
+		NSExclude10_4Elements       = 1 << 2
+	}
 } 
\ No newline at end of file
Index: appkit.cs
===================================================================
--- appkit.cs	(revision 156369)
+++ appkit.cs	(working copy)
@@ -10039,4 +10039,232 @@
 		void DidEndLiveResize (NSNotification  notification);
 	}
 	
+	[BaseType (typeof (NSObject))]
+	interface NSWorkspace {
+		[Static]
+		[Export ("sharedWorkspace")]
+		NSWorkspace SharedWorkspace ();
+		
+		[Export ("notificationCenter")]
+		NSNotificationCenter NotificationCenter ();
+		
+		[Export ("openFile:")]
+		bool OpenFile (string fullPath);
+		
+		[Export ("openFile:withApplication:")]
+		bool OpenFile (string fullPath, string appName);
+		
+		[Export ("openFile:withApplication:andDeactivate:")]
+		bool OpenFile (string fullPath, string appName, bool deactivate);
+		
+		[Export ("openFile:fromImage:at:inView:")]
+		bool OpenFile (string fullPath, NSImage anImage, PointF point, NSView aView);
+		
+		[Export ("openURL:")]
+		bool OpenURL (NSUrl url);
+		
+		[Export ("launchApplication:")]
+		bool LaunchApplication (string appName);
+		
+		[Export ("launchApplicationAtURL:options:configuration:error:")]
+		NSRunningApplication LaunchApplication (NSUrl url, NSWorkspaceLaunchOptions options, NSDictionary configuration, NSError error );
+		
+		[Export ("launchApplication:showIcon:autolaunch:")]
+		bool LaunchApplication (string appName, bool showIcon, bool autolaunch);
+		
+		[Export ("fullPathForApplication:")]
+		string FullPathForApplication (string appName);
+		
+		[Export ("selectFile:inFileViewerRootedAtPath:")]
+		bool SelectFile (string fullPath, string rootFullPath);
+		
+		[Export ("activateFileViewerSelectingURLs:")]
+		void ActivateFileViewer (NSUrl[] fileURLs );
+		
+		[Export ("showSearchResultsForQueryString:")]
+		bool ShowSearchResults (string queryString );
+		
+		[Export ("noteFileSystemChanged:")]
+		void NoteFileSystemChanged (string path);
+		
+		[Export ("getInfoForFile:application:type:")]
+		bool GetInfo (string fullPath, string appName, string type);
+		
+		[Export ("isFilePackageAtPath:")]
+		bool IsFilePackage (string fullPath);
+		
+		[Export ("iconForFile:")]
+		NSImage IconForFile (string fullPath);
+		
+		[Export ("iconForFiles:")]
+		NSImage IconForFiles (string[] fullPaths);
+		
+		[Export ("iconForFileType:")]
+		NSImage IconForFileType (string fileType);
+		
+		[Export ("setIcon:forFile:options:")]
+		bool SetIconforFile (NSImage image, string fullPath, NSWorkspaceIconCreationOptions options);
+		
+		[Export ("fileLabels")]
+		string[] FileLabels { get ; }
+		
+		[Export ("fileLabelColors")]
+		NSColor[] FileLabelColors { get; }
+		
+		//Fix me
+		//[Export ("recycleURLs:completionHandler:NSDictionary*newURLs,NSError*error))handler")]
+		//void RecycleURLscompletionHandlerNSDictionary*newURLs,NSError*error))handler (NSUrl[] URLs, void (^ (NSDictionary, );
+		
+		//[Export ("duplicateURLs:completionHandler:NSDictionary*newURLs,NSError*error))handler")]
+		//void DuplicateURLscompletionHandlerNSDictionary*newURLs,NSError*error))handler (NSUrl[] URLs, void (^ (NSDictionary, );
+		
+		[Export ("getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:")]
+		bool GetFileSystemInfo (string fullPath, bool removableFlag, bool writableFlag, bool unmountableFlag, string description, string fileSystemType);
+		
+		[Export ("performFileOperation:source:destination:files:tag:")]
+		bool PerformFileOperation (string operation, string source, string destination, string[] files, int tag);
+		
+		[Export ("unmountAndEjectDeviceAtPath:")]
+		bool UnmountAndEjectDevice(string path);
+		
+		[Export ("unmountAndEjectDeviceAtURL:error:")]
+		bool UnmountAndEjectDevice (NSUrl url, NSError error );
+		
+		[Export ("extendPowerOffBy:")]
+		int ExtendPowerOffBy (int requested);
+		
+		[Export ("hideOtherApplications")]
+		void HideOtherApplications ();
+		
+		[Export ("mountedLocalVolumePaths")]
+		string[] MountedLocalVolumePaths { get; }
+		
+		[Export ("mountedRemovableMedia")]
+		string[] MountedRemovableMedia {  get; }
+		
+		[Export ("URLForApplicationWithBundleIdentifier:")]
+		NSUrl URLForApplication (string bundleIdentifier );
+		
+		[Export ("URLForApplicationToOpenURL:")]
+		NSUrl URLForApplication (NSUrl url );
+		
+		[Export ("absolutePathForAppBundleWithIdentifier:")]
+		string AbsolutePathForAppBundle (string bundleIdentifier);
+		
+		//FIXME : NSAppleEventDescriptor needs converted
+		//[Export ("launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:")]
+		//bool LaunchApp (string bundleIdentifier, NSWorkspaceLaunchOptions options, NSAppleEventDescriptor descriptor, NSNumber identifier);
+		
+		//FIXME : NSAppleEventDescriptor needs converted
+		//[Export ("openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:")]
+		//bool OpenURLs (NSUrl[] urls, string bundleIdentifier, NSWorkspaceLaunchOptions options, NSAppleEventDescriptor descriptor, string[] identifiers);
+		
+		[Export ("launchedApplications")]
+		NSDictionary [] LaunchedApplications { get; }
+		
+		[Export ("activeApplication")]
+		NSDictionary ActiveApplication { get; }
+		
+		[Export ("typeOfFile:error:")]
+		string TypeOfFile (string absoluteFilePath, NSError outError);
+		
+		[Export ("localizedDescriptionForType:")]
+		string LocalizedDescription (string typeName);
+		
+		[Export ("preferredFilenameExtensionForType:")]
+		string PreferredFilenameExtension (string typeName);
+		
+		[Export ("filenameExtension:isValidForType:")]
+		bool IsFilenameExtensionValid (string filenameExtension, string typeName);
+		
+		[Export ("type:conformsToType:")]
+		bool TypeconformsToType (string firstTypeName, string secondTypeName);
+		
+		[Export ("setDesktopImageURL:forScreen:options:error:")]
+		bool SetDesktopImageURL (NSUrl url, NSScreen screen, NSDictionary options, NSError error );
+		
+		[Export ("desktopImageURLForScreen:")]
+		NSUrl DesktopImageURL (NSScreen screen );
+		
+		[Export ("desktopImageOptionsForScreen:")]
+		NSDictionary DesktopImageOptionsForScreen (NSScreen screen );		
+		
+		[Export ("runningApplications")]
+		NSDictionary[] RunningApplications ();
+	
+	}
+	
+	
+	[BaseType (typeof (NSObject))]
+	interface NSRunningApplication {
+		[Export ("terminated")]
+		bool terminated { [Bind ("isTerminated")] get;  }
+		
+		[Export ("finishedLaunching")]
+		bool finishedLaunching { [Bind ("isFinishedLaunching")] get;  }
+		
+		[Export ("hidden")]
+		bool hidden { [Bind ("isHidden")] get;  }
+		
+		[Export ("active")]
+		bool active { [Bind ("isActive")] get;  }
+		
+		[Export ("activationPolicy")]
+		NSApplicationActivationPolicy activationPolicy { get;  }
+		
+		[Export ("localizedName")]
+		string localizedName { get;  }
+		
+		[Export ("bundleIdentifier")]
+		string bundleIdentifier { get;  }
+		
+		[Export ("bundleURL")]
+		NSUrl bundleURL { get;  }
+		
+		[Export ("executableURL")]
+		NSUrl executableURL { get;  }
+		
+		// changed pid_t to int
+		[Export ("processIdentifier")]
+		int processIdentifier { get;  }
+		
+		[Export ("launchDate")]
+		NSDate launchDate { get;  }
+		
+		[Export ("icon")]
+		NSImage icon { get;  }
+		
+		[Export ("executableArchitecture")]
+		int executableArchitecture { get;  }
+		
+		[Export ("hide")]
+		bool Hide { get; }
+		
+		[Export ("unhide")]
+		bool Unhide { get; }
+		
+		[Export ("activateWithOptions:")]
+		bool Activate (NSApplicationActivationOptions options);
+		
+		[Export ("terminate")]
+		bool Terminate ();
+		
+		[Export ("forceTerminate")]
+		bool ForceTerminate ();
+		
+		[Static]
+		[Export ("runningApplicationsWithBundleIdentifier:")]
+		NSRunningApplication[] GetRunningApplications (string bundleIdentifier);
+		
+		[Static]
+		[Export ("runningApplicationWithProcessIdentifier:")]
+		NSRunningApplication GetRunningApplication (int pid);
+		
+		[Static]
+		[Export ("currentApplication")]
+		NSRunningApplication CurrentApplication { get ; }
+	
+	}
+	
+	
 }