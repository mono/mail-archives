//
// Auto-generated from generator.cs, do not edit
//
// We keep references to objects, so warning 414 is expected

#pragma warning disable 414

using System;

using System.Drawing;

using System.Runtime.InteropServices;

using MonoMac.CoreFoundation;

using MonoMac.Foundation;

using MonoMac.ObjCRuntime;

using MonoMac.CoreGraphics;

using MonoMac.CoreAnimation;

using MonoMac.CoreLocation;

using MonoMac.QTKit;

namespace MonoMac.CoreWlan {
	[Register("CWWirelessProfile")]
	public partial class CWWirelessProfile : NSObject {
		static IntPtr selSsid = Selector.GetHandle ("ssid");
		static IntPtr selSetSsid = Selector.GetHandle ("setSsid:");
		static IntPtr selSecurityMode = Selector.GetHandle ("securityMode");
		static IntPtr selSetSecurityMode = Selector.GetHandle ("setSecurityMode:");
		static IntPtr selPassphrase = Selector.GetHandle ("passphrase");
		static IntPtr selSetPassphrase = Selector.GetHandle ("setPassphrase:");
		static IntPtr selUser8021XProfile = Selector.GetHandle ("user8021XProfile");
		static IntPtr selSetUser8021XProfile = Selector.GetHandle ("setUser8021XProfile:");
		static IntPtr selInit = Selector.GetHandle ("init");
		static IntPtr selProfile = Selector.GetHandle ("profile");
		static IntPtr selIsEqualToProfile = Selector.GetHandle ("isEqualToProfile:");

		static IntPtr class_ptr = Class.GetHandle ("CWWirelessProfile");

		public override IntPtr ClassHandle { get { return class_ptr; } }

		[Export ("init")]
		public  CWWirelessProfile () : base (NSObjectFlag.Empty)
		{
			if (IsDirectBinding) {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, Selector.Init);
			} else {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, Selector.Init);
			}
		}

		[Export ("initWithCoder:")]
		public CWWirelessProfile (NSCoder coder) : base (NSObjectFlag.Empty)
		{
			if (IsDirectBinding) {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend_IntPtr (this.Handle, Selector.InitWithCoder, coder.Handle);
			} else {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_IntPtr (this.SuperHandle, Selector.InitWithCoder, coder.Handle);
			}
		}

		public CWWirelessProfile (NSObjectFlag t) : base (t) {}

		public CWWirelessProfile (IntPtr handle) : base (handle) {}

		[Export ("init")]
		public virtual CWWirelessProfile Init ()
		{
			if (IsDirectBinding) {
				return (CWWirelessProfile) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selInit));
			} else {
				return (CWWirelessProfile) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selInit));
			}
		}

		[Export ("profile")]
		public static CWWirelessProfile Profile ()
		{
			return (CWWirelessProfile) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (class_ptr, selProfile));
		}

		[Export ("isEqualToProfile:")]
		public virtual bool IsEqualToProfile (CWWirelessProfile profile)
		{
			if (profile == null)
				throw new ArgumentNullException ("profile");
			if (IsDirectBinding) {
				return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend_IntPtr (this.Handle, selIsEqualToProfile, profile.Handle);
			} else {
				return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper_IntPtr (this.SuperHandle, selIsEqualToProfile, profile.Handle);
			}
		}

		public virtual string Ssid {
			[Export ("ssid")]
			get {
				if (IsDirectBinding) {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selSsid));
				} else {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selSsid));
				}
			}

			[Export ("setSsid:")]
			set {
				if (value == null)
					throw new ArgumentNullException ("value");
			var nsvalue = new NSString (value);

				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_IntPtr (this.Handle, selSetSsid, nsvalue.Handle);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_IntPtr (this.SuperHandle, selSetSsid, nsvalue.Handle);
				}
							nsvalue.Dispose ();

			}
		}

		MonoMac.Foundation.NSNumber __mt_SecurityMode_var;
		public virtual NSNumber SecurityMode {
			[Export ("securityMode")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selSecurityMode));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selSecurityMode));
				}
				__mt_SecurityMode_var = ret;
				return ret;
			}

			[Export ("setSecurityMode:")]
			set {
				if (value == null)
					throw new ArgumentNullException ("value");
				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_IntPtr (this.Handle, selSetSecurityMode, value.Handle);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_IntPtr (this.SuperHandle, selSetSecurityMode, value.Handle);
				}
				__mt_SecurityMode_var = value;
			}
		}

		public virtual string Passphrase {
			[Export ("passphrase")]
			get {
				if (IsDirectBinding) {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selPassphrase));
				} else {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selPassphrase));
				}
			}

			[Export ("setPassphrase:")]
			set {
				if (value == null)
					throw new ArgumentNullException ("value");
			var nsvalue = new NSString (value);

				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_IntPtr (this.Handle, selSetPassphrase, nsvalue.Handle);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_IntPtr (this.SuperHandle, selSetPassphrase, nsvalue.Handle);
				}
							nsvalue.Dispose ();

			}
		}

		MonoMac.CoreWlan.CW8021XProfile __mt_User8021XProfile_var;
		public virtual CW8021XProfile User8021XProfile {
			[Export ("user8021XProfile")]
			get {
				CW8021XProfile ret;
				if (IsDirectBinding) {
					ret = (CW8021XProfile) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selUser8021XProfile));
				} else {
					ret = (CW8021XProfile) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selUser8021XProfile));
				}
				__mt_User8021XProfile_var = ret;
				return ret;
			}

			[Export ("setUser8021XProfile:")]
			set {
				if (value == null)
					throw new ArgumentNullException ("value");
				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_IntPtr (this.Handle, selSetUser8021XProfile, value.Handle);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_IntPtr (this.SuperHandle, selSetUser8021XProfile, value.Handle);
				}
				__mt_User8021XProfile_var = value;
			}
		}

	
	} /* class CWWirelessProfile */
}