//
// Auto-generated from generator.cs, do not edit
//
// We keep references to objects, so warning 414 is expected

#pragma warning disable 414

using System;

using System.Drawing;

using System.Runtime.InteropServices;

using MonoMac.CoreFoundation;

using MonoMac.Foundation;

using MonoMac.ObjCRuntime;

using MonoMac.CoreGraphics;

using MonoMac.CoreAnimation;

using MonoMac.CoreLocation;

using MonoMac.QTKit;

namespace MonoMac.CoreWlan {
	[Register("CW8021XProfile")]
	public partial class CW8021XProfile : NSObject {
		static IntPtr selUserDefinedName = Selector.GetHandle ("userDefinedName");
		static IntPtr selSetUserDefinedName = Selector.GetHandle ("setUserDefinedName:");
		static IntPtr selSsid = Selector.GetHandle ("ssid");
		static IntPtr selSetSsid = Selector.GetHandle ("setSsid:");
		static IntPtr selUsername = Selector.GetHandle ("username");
		static IntPtr selSetUsername = Selector.GetHandle ("setUsername:");
		static IntPtr selPassword = Selector.GetHandle ("password");
		static IntPtr selSetPassword = Selector.GetHandle ("setPassword:");
		static IntPtr selAlwaysPromptForPassword = Selector.GetHandle ("alwaysPromptForPassword");
		static IntPtr selSetAlwaysPromptForPassword = Selector.GetHandle ("setAlwaysPromptForPassword:");
		static IntPtr selInit = Selector.GetHandle ("init");
		static IntPtr selProfile = Selector.GetHandle ("profile");
		static IntPtr selIsEqualToProfile = Selector.GetHandle ("isEqualToProfile:");
		static IntPtr selAllUser8021XProfiles = Selector.GetHandle ("allUser8021XProfiles");

		static IntPtr class_ptr = Class.GetHandle ("CW8021XProfile");

		public override IntPtr ClassHandle { get { return class_ptr; } }

		[Export ("init")]
		public  CW8021XProfile () : base (NSObjectFlag.Empty)
		{
			if (IsDirectBinding) {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, Selector.Init);
			} else {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, Selector.Init);
			}
		}

		[Export ("initWithCoder:")]
		public CW8021XProfile (NSCoder coder) : base (NSObjectFlag.Empty)
		{
			if (IsDirectBinding) {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend_IntPtr (this.Handle, Selector.InitWithCoder, coder.Handle);
			} else {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_IntPtr (this.SuperHandle, Selector.InitWithCoder, coder.Handle);
			}
		}

		public CW8021XProfile (NSObjectFlag t) : base (t) {}

		public CW8021XProfile (IntPtr handle) : base (handle) {}

		[Export ("init")]
		public virtual CW8021XProfile Init ()
		{
			if (IsDirectBinding) {
				return (CW8021XProfile) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selInit));
			} else {
				return (CW8021XProfile) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selInit));
			}
		}

		[Export ("profile")]
		public static CW8021XProfile Profile ()
		{
			return (CW8021XProfile) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (class_ptr, selProfile));
		}

		[Export ("isEqualToProfile:")]
		public virtual bool IsEqualToProfile (CW8021XProfile profile)
		{
			if (profile == null)
				throw new ArgumentNullException ("profile");
			if (IsDirectBinding) {
				return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend_IntPtr (this.Handle, selIsEqualToProfile, profile.Handle);
			} else {
				return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper_IntPtr (this.SuperHandle, selIsEqualToProfile, profile.Handle);
			}
		}

		[Export ("allUser8021XProfiles")]
		public static CW8021XProfile[] AllUser8021XProfiles ()
		{
			return NSArray.ArrayFromHandle<MonoMac.CoreWlan.CW8021XProfile>(MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (class_ptr, selAllUser8021XProfiles));
		}

		public virtual string UserDefinedName {
			[Export ("userDefinedName")]
			get {
				if (IsDirectBinding) {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selUserDefinedName));
				} else {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selUserDefinedName));
				}
			}

			[Export ("setUserDefinedName:")]
			set {
				if (value == null)
					throw new ArgumentNullException ("value");
			var nsvalue = new NSString (value);

				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_IntPtr (this.Handle, selSetUserDefinedName, nsvalue.Handle);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_IntPtr (this.SuperHandle, selSetUserDefinedName, nsvalue.Handle);
				}
							nsvalue.Dispose ();

			}
		}

		public virtual string Ssid {
			[Export ("ssid")]
			get {
				if (IsDirectBinding) {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selSsid));
				} else {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selSsid));
				}
			}

			[Export ("setSsid:")]
			set {
				if (value == null)
					throw new ArgumentNullException ("value");
			var nsvalue = new NSString (value);

				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_IntPtr (this.Handle, selSetSsid, nsvalue.Handle);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_IntPtr (this.SuperHandle, selSetSsid, nsvalue.Handle);
				}
							nsvalue.Dispose ();

			}
		}

		public virtual string Username {
			[Export ("username")]
			get {
				if (IsDirectBinding) {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selUsername));
				} else {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selUsername));
				}
			}

			[Export ("setUsername:")]
			set {
				if (value == null)
					throw new ArgumentNullException ("value");
			var nsvalue = new NSString (value);

				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_IntPtr (this.Handle, selSetUsername, nsvalue.Handle);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_IntPtr (this.SuperHandle, selSetUsername, nsvalue.Handle);
				}
							nsvalue.Dispose ();

			}
		}

		public virtual string Password {
			[Export ("password")]
			get {
				if (IsDirectBinding) {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selPassword));
				} else {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selPassword));
				}
			}

			[Export ("setPassword:")]
			set {
				if (value == null)
					throw new ArgumentNullException ("value");
			var nsvalue = new NSString (value);

				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_IntPtr (this.Handle, selSetPassword, nsvalue.Handle);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_IntPtr (this.SuperHandle, selSetPassword, nsvalue.Handle);
				}
							nsvalue.Dispose ();

			}
		}

		public virtual bool AlwaysPromptForPassword {
			[Export ("alwaysPromptForPassword")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selAlwaysPromptForPassword);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selAlwaysPromptForPassword);
				}
			}

			[Export ("setAlwaysPromptForPassword:")]
			set {
				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_Boolean (this.Handle, selSetAlwaysPromptForPassword, value);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_Boolean (this.SuperHandle, selSetAlwaysPromptForPassword, value);
				}
			}
		}

	
	} /* class CW8021XProfile */
}