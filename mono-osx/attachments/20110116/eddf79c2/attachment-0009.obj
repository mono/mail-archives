//
// Auto-generated from generator.cs, do not edit
//
// We keep references to objects, so warning 414 is expected

#pragma warning disable 414

using System;

using System.Drawing;

using System.Runtime.InteropServices;

using MonoMac.CoreFoundation;

using MonoMac.Foundation;

using MonoMac.ObjCRuntime;

using MonoMac.CoreGraphics;

using MonoMac.CoreAnimation;

using MonoMac.CoreLocation;

using MonoMac.QTKit;

namespace MonoMac.CoreWlan {
	[Register("CWInterface")]
	public partial class CWInterface : NSObject {
		static IntPtr selSupportsWoW = Selector.GetHandle ("supportsWoW");
		static IntPtr selSupportsWEP = Selector.GetHandle ("supportsWEP");
		static IntPtr selSupportsAES_CCM = Selector.GetHandle ("supportsAES_CCM");
		static IntPtr selSupportsIBSS = Selector.GetHandle ("supportsIBSS");
		static IntPtr selSupportsTKIP = Selector.GetHandle ("supportsTKIP");
		static IntPtr selSupportsPMGT = Selector.GetHandle ("supportsPMGT");
		static IntPtr selSupportsHostAP = Selector.GetHandle ("supportsHostAP");
		static IntPtr selSupportsMonitorMode = Selector.GetHandle ("supportsMonitorMode");
		static IntPtr selSupportsWPA = Selector.GetHandle ("supportsWPA");
		static IntPtr selSupportsWPA2 = Selector.GetHandle ("supportsWPA2");
		static IntPtr selSupportsWME = Selector.GetHandle ("supportsWME");
		static IntPtr selSupportsShortGI40MHz = Selector.GetHandle ("supportsShortGI40MHz");
		static IntPtr selSupportsShortGI20MHz = Selector.GetHandle ("supportsShortGI20MHz");
		static IntPtr selSupportsTSN = Selector.GetHandle ("supportsTSN");
		static IntPtr selPower = Selector.GetHandle ("power");
		static IntPtr selPowerSave = Selector.GetHandle ("powerSave");
		static IntPtr selName = Selector.GetHandle ("name");
		static IntPtr selSupportedChannels = Selector.GetHandle ("supportedChannels");
		static IntPtr selSupportedPHYModes = Selector.GetHandle ("supportedPHYModes");
		static IntPtr selChannel = Selector.GetHandle ("channel");
		static IntPtr selPhyMode = Selector.GetHandle ("phyMode");
		static IntPtr selSsid = Selector.GetHandle ("ssid");
		static IntPtr selBssid = Selector.GetHandle ("bssid");
		static IntPtr selBssidData = Selector.GetHandle ("bssidData");
		static IntPtr selRssi = Selector.GetHandle ("rssi");
		static IntPtr selNoise = Selector.GetHandle ("noise");
		static IntPtr selTxRate = Selector.GetHandle ("txRate");
		static IntPtr selSecurityMode = Selector.GetHandle ("securityMode");
		static IntPtr selInterfaceState = Selector.GetHandle ("interfaceState");
		static IntPtr selCountryCode = Selector.GetHandle ("countryCode");
		static IntPtr selOpMode = Selector.GetHandle ("opMode");
		static IntPtr selTxPower = Selector.GetHandle ("txPower");
		static IntPtr selConfiguration = Selector.GetHandle ("configuration");
		static IntPtr selSupportedInterfaces = Selector.GetHandle ("supportedInterfaces");
		static IntPtr selInit = Selector.GetHandle ("init");
		static IntPtr selInterface = Selector.GetHandle ("interface");
		static IntPtr selInterfaceWithName = Selector.GetHandle ("interfaceWithName:");
		static IntPtr selInitWithInterfaceName = Selector.GetHandle ("initWithInterfaceName:");
		static IntPtr selIsEqualToInterface = Selector.GetHandle ("isEqualToInterface:");
		static IntPtr selDisassociate = Selector.GetHandle ("disassociate");

		static IntPtr class_ptr = Class.GetHandle ("CWInterface");

		public override IntPtr ClassHandle { get { return class_ptr; } }

		[Export ("init")]
		public  CWInterface () : base (NSObjectFlag.Empty)
		{
			if (IsDirectBinding) {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, Selector.Init);
			} else {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, Selector.Init);
			}
		}

		[Export ("initWithCoder:")]
		public CWInterface (NSCoder coder) : base (NSObjectFlag.Empty)
		{
			if (IsDirectBinding) {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend_IntPtr (this.Handle, Selector.InitWithCoder, coder.Handle);
			} else {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_IntPtr (this.SuperHandle, Selector.InitWithCoder, coder.Handle);
			}
		}

		public CWInterface (NSObjectFlag t) : base (t) {}

		public CWInterface (IntPtr handle) : base (handle) {}

		[Export ("supportedInterfaces")]
		public static System.String[] SupportedInterfaces ()
		{
			return NSArray.StringArrayFromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (class_ptr, selSupportedInterfaces));
		}

		[Export ("init")]
		public virtual CWInterface Init ()
		{
			if (IsDirectBinding) {
				return (CWInterface) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selInit));
			} else {
				return (CWInterface) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selInit));
			}
		}

		[Export ("interface")]
		public static CWInterface Interface ()
		{
			return (CWInterface) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (class_ptr, selInterface));
		}

		[Export ("interfaceWithName:")]
		public static CWInterface InterfaceWithName (string name)
		{
			if (name == null)
				throw new ArgumentNullException ("name");
			var nsname = new NSString (name);

			CWInterface ret;
			ret = (CWInterface) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend_IntPtr (class_ptr, selInterfaceWithName, nsname.Handle));
						nsname.Dispose ();

			return ret;
		}

		[Export ("initWithInterfaceName:")]
		public virtual CWInterface InitWithInterfaceName (string name)
		{
			if (name == null)
				throw new ArgumentNullException ("name");
			var nsname = new NSString (name);

			CWInterface ret;
			if (IsDirectBinding) {
				ret = (CWInterface) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend_IntPtr (this.Handle, selInitWithInterfaceName, nsname.Handle));
			} else {
				ret = (CWInterface) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_IntPtr (this.SuperHandle, selInitWithInterfaceName, nsname.Handle));
			}
						nsname.Dispose ();

			return ret;
		}

		[Export ("isEqualToInterface:")]
		public virtual bool IsEqualToInterface (CWInterface intface)
		{
			if (intface == null)
				throw new ArgumentNullException ("intface");
			if (IsDirectBinding) {
				return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend_IntPtr (this.Handle, selIsEqualToInterface, intface.Handle);
			} else {
				return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper_IntPtr (this.SuperHandle, selIsEqualToInterface, intface.Handle);
			}
		}

		[Export ("disassociate")]
		public virtual void Disassociate ()
		{
			if (IsDirectBinding) {
				MonoMac.ObjCRuntime.Messaging.void_objc_msgSend (this.Handle, selDisassociate);
			} else {
				MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper (this.SuperHandle, selDisassociate);
			}
		}

		public virtual bool SupportsWoW {
			[Export ("supportsWoW")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selSupportsWoW);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selSupportsWoW);
				}
			}

		}

		public virtual bool SupportsWEP {
			[Export ("supportsWEP")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selSupportsWEP);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selSupportsWEP);
				}
			}

		}

		public virtual bool SupportsAES_CCM {
			[Export ("supportsAES_CCM")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selSupportsAES_CCM);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selSupportsAES_CCM);
				}
			}

		}

		public virtual bool SupportsIBSS {
			[Export ("supportsIBSS")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selSupportsIBSS);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selSupportsIBSS);
				}
			}

		}

		public virtual bool SupportsTKIP {
			[Export ("supportsTKIP")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selSupportsTKIP);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selSupportsTKIP);
				}
			}

		}

		public virtual bool SupportsPMGT {
			[Export ("supportsPMGT")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selSupportsPMGT);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selSupportsPMGT);
				}
			}

		}

		public virtual bool SupportsHostAP {
			[Export ("supportsHostAP")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selSupportsHostAP);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selSupportsHostAP);
				}
			}

		}

		public virtual bool SupportsMonitorMode {
			[Export ("supportsMonitorMode")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selSupportsMonitorMode);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selSupportsMonitorMode);
				}
			}

		}

		public virtual bool SupportsWPA {
			[Export ("supportsWPA")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selSupportsWPA);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selSupportsWPA);
				}
			}

		}

		public virtual bool SupportsWPA2 {
			[Export ("supportsWPA2")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selSupportsWPA2);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selSupportsWPA2);
				}
			}

		}

		public virtual bool SupportsWME {
			[Export ("supportsWME")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selSupportsWME);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selSupportsWME);
				}
			}

		}

		public virtual bool SupportsShortGI40MHz {
			[Export ("supportsShortGI40MHz")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selSupportsShortGI40MHz);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selSupportsShortGI40MHz);
				}
			}

		}

		public virtual bool SupportsShortGI20MHz {
			[Export ("supportsShortGI20MHz")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selSupportsShortGI20MHz);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selSupportsShortGI20MHz);
				}
			}

		}

		public virtual bool SupportsTSN {
			[Export ("supportsTSN")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selSupportsTSN);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selSupportsTSN);
				}
			}

		}

		public virtual bool Power {
			[Export ("power")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selPower);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selPower);
				}
			}

		}

		public virtual bool PowerSave {
			[Export ("powerSave")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selPowerSave);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selPowerSave);
				}
			}

		}

		public virtual string Name {
			[Export ("name")]
			get {
				if (IsDirectBinding) {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selName));
				} else {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selName));
				}
			}

		}

		MonoMac.Foundation.NSNumber[] __mt_SupportedChannels_var;
		public virtual NSNumber[] SupportedChannels {
			[Export ("supportedChannels")]
			get {
				NSNumber[] ret;
				if (IsDirectBinding) {
					ret = NSArray.ArrayFromHandle<MonoMac.Foundation.NSNumber>(MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selSupportedChannels));
				} else {
					ret = NSArray.ArrayFromHandle<MonoMac.Foundation.NSNumber>(MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selSupportedChannels));
				}
				__mt_SupportedChannels_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSNumber[] __mt_SupportedPHYModes_var;
		public virtual NSNumber[] SupportedPHYModes {
			[Export ("supportedPHYModes")]
			get {
				NSNumber[] ret;
				if (IsDirectBinding) {
					ret = NSArray.ArrayFromHandle<MonoMac.Foundation.NSNumber>(MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selSupportedPHYModes));
				} else {
					ret = NSArray.ArrayFromHandle<MonoMac.Foundation.NSNumber>(MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selSupportedPHYModes));
				}
				__mt_SupportedPHYModes_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSNumber __mt_Channel_var;
		public virtual NSNumber Channel {
			[Export ("channel")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selChannel));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selChannel));
				}
				__mt_Channel_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSNumber __mt_PhyMode_var;
		public virtual NSNumber PhyMode {
			[Export ("phyMode")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selPhyMode));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selPhyMode));
				}
				__mt_PhyMode_var = ret;
				return ret;
			}

		}

		public virtual string Ssid {
			[Export ("ssid")]
			get {
				if (IsDirectBinding) {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selSsid));
				} else {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selSsid));
				}
			}

		}

		public virtual string Bssid {
			[Export ("bssid")]
			get {
				if (IsDirectBinding) {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selBssid));
				} else {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selBssid));
				}
			}

		}

		MonoMac.Foundation.NSData __mt_BssidData_var;
		public virtual NSData BssidData {
			[Export ("bssidData")]
			get {
				NSData ret;
				if (IsDirectBinding) {
					ret = (NSData) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selBssidData));
				} else {
					ret = (NSData) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selBssidData));
				}
				__mt_BssidData_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSNumber __mt_Rssi_var;
		public virtual NSNumber Rssi {
			[Export ("rssi")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selRssi));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selRssi));
				}
				__mt_Rssi_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSNumber __mt_Noise_var;
		public virtual NSNumber Noise {
			[Export ("noise")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selNoise));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selNoise));
				}
				__mt_Noise_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSNumber __mt_TxRate_var;
		public virtual NSNumber TxRate {
			[Export ("txRate")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selTxRate));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selTxRate));
				}
				__mt_TxRate_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSNumber __mt_SecurityMode_var;
		public virtual NSNumber SecurityMode {
			[Export ("securityMode")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selSecurityMode));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selSecurityMode));
				}
				__mt_SecurityMode_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSNumber __mt_InterfaceState_var;
		public virtual NSNumber InterfaceState {
			[Export ("interfaceState")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selInterfaceState));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selInterfaceState));
				}
				__mt_InterfaceState_var = ret;
				return ret;
			}

		}

		public virtual string CountryCode {
			[Export ("countryCode")]
			get {
				if (IsDirectBinding) {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selCountryCode));
				} else {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selCountryCode));
				}
			}

		}

		MonoMac.Foundation.NSNumber __mt_OpMode_var;
		public virtual NSNumber OpMode {
			[Export ("opMode")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selOpMode));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selOpMode));
				}
				__mt_OpMode_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSNumber __mt_TxPower_var;
		public virtual NSNumber TxPower {
			[Export ("txPower")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selTxPower));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selTxPower));
				}
				__mt_TxPower_var = ret;
				return ret;
			}

		}

		MonoMac.CoreWlan.CWConfiguration __mt_Configuration_var;
		public virtual CWConfiguration Configuration {
			[Export ("configuration")]
			get {
				CWConfiguration ret;
				if (IsDirectBinding) {
					ret = (CWConfiguration) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selConfiguration));
				} else {
					ret = (CWConfiguration) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selConfiguration));
				}
				__mt_Configuration_var = ret;
				return ret;
			}

		}

	
	} /* class CWInterface */
}