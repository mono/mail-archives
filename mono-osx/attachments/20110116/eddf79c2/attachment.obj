using MonoMac.Foundation;
using MonoMac.CoreFoundation;
using System;
namespace MonoMac.CoreWlan{
	[BaseType (typeof (NSObject))]
	interface CW8021XProfile {
		[Export ("userDefinedName")]
		string UserDefinedName { get; set;  }

		[Export ("ssid")]
		string Ssid { get; set;  }

		[Export ("username")]
		string Username { get; set;  }

		[Export ("password")]
		string Password { get; set;  }

		[Export ("alwaysPromptForPassword")]
		bool AlwaysPromptForPassword{ get; set;  }

		[Export ("init")]
		CW8021XProfile Init ();

		[Static]
		[Export ("profile")]
		CW8021XProfile Profile ();

		[Export ("isEqualToProfile:")]
		bool IsEqualToProfile (CW8021XProfile profile);

		[Static]
		[Export ("allUser8021XProfiles")]
		CW8021XProfile[] AllUser8021XProfiles ();
	}

	[BaseType (typeof (NSObject))]
	interface CWConfiguration {
		[Export ("rememberedNetworks")]
		NSSet RememberedNetworks { get; set;  }

		[Export ("preferredNetworks")]
		CWWirelessProfile[] PreferredNetworks { get; set;  }

		[Export ("alwaysRememberNetworks")]
		bool AlwaysRememberNetworks{ get; set;  }

		[Export ("disconnectOnLogout")]
		bool DisconnectOnLogout{ get; set;  }

		[Export ("requireAdminForNetworkChange")]
		bool RequireAdminForNetworkChange { get; set;  }

		[Export ("requireAdminForPowerChange")]
		bool RequireAdminForPowerChange { get; set;  }

		[Export ("requireAdminForIBSSCreation")]
		bool RequireAdminForIBSSCreation { get; set;  }

		[Export ("init")]
		CWConfiguration Init ();

		[Static]
		[Export ("configuration")]
		CWConfiguration Configuration ();

		[Export ("isEqualToConfiguration:")]
		bool IsEqualToConfiguration (CWConfiguration configuration);
	}

	[BaseType (typeof (NSObject))]
	interface CWInterface {
		[Export ("supportsWoW")]
		bool SupportsWoW { get;  }

		[Export ("supportsWEP")]
		bool SupportsWEP { get;  }

		[Export ("supportsAES_CCM")]
		bool SupportsAES_CCM { get;  }

		[Export ("supportsIBSS")]
		bool SupportsIBSS { get;  }

		[Export ("supportsTKIP")]
		bool SupportsTKIP { get;  }

		[Export ("supportsPMGT")]
		bool SupportsPMGT { get;  }

		[Export ("supportsHostAP")]
		bool SupportsHostAP { get;  }

		[Export ("supportsMonitorMode")]
		bool SupportsMonitorMode { get;  }

		[Export ("supportsWPA")]
		bool SupportsWPA { get;  }

		[Export ("supportsWPA2")]
		bool SupportsWPA2 { get;  }

		[Export ("supportsWME")]
		bool SupportsWME { get;  }

		[Export ("supportsShortGI40MHz")]
		bool SupportsShortGI40MHz { get;  }

		[Export ("supportsShortGI20MHz")]
		bool SupportsShortGI20MHz { get;  }

		[Export ("supportsTSN")]
		bool SupportsTSN { get;  }

		[Export ("power")]
		bool Power { get;  }

		[Export ("powerSave")]
		bool PowerSave { get;  }

		[Export ("name")]
		string Name { get;  }

		[Export ("supportedChannels")]
		NSNumber[] SupportedChannels { get;  }

		[Export ("supportedPHYModes")]
		NSNumber[] SupportedPHYModes { get;  }

		[Export ("channel")]
		NSNumber Channel { get;  }

		[Export ("phyMode")]
		NSNumber PhyMode { get;  }

		[Export ("ssid")]
		string Ssid { get;  }

		[Export ("bssid")]
		string Bssid { get;  }

		[Export ("bssidData")]
		NSData BssidData { get;  }

		[Export ("rssi")]
		NSNumber Rssi { get;  }

		[Export ("noise")]
		NSNumber Noise { get;  }

		[Export ("txRate")]
		NSNumber TxRate { get;  }

		[Export ("securityMode")]
		NSNumber SecurityMode { get;  }

		[Export ("interfaceState")]
		NSNumber InterfaceState { get;  }

		[Export ("countryCode")]
		string CountryCode { get;  }

		[Export ("opMode")]
		NSNumber OpMode { get;  }

		[Export ("txPower")]
		NSNumber TxPower { get;  }

		[Export ("configuration")]
		CWConfiguration Configuration { get;  }

		[Static]
		[Export ("supportedInterfaces")]
		string[] SupportedInterfaces ();

		[Export ("init")]
		CWInterface Init ();

		[Static]
		[Export ("interface")]
		CWInterface Interface ();

		[Static]
		[Export ("interfaceWithName:")]
		CWInterface InterfaceWithName (string name);

		[Export ("initWithInterfaceName:")]
		CWInterface InitWithInterfaceName (string name);

		[Export ("isEqualToInterface:")]
		bool IsEqualToInterface (CWInterface intface);

		//[Export ("setPower:error:")]
		//bool SetPowererror (bool power, NSError error);

		//[Export ("setChannel:error:")]
		//bool SetChannelerror (uint channel, NSError error);

		//[Export ("scanForNetworksWithParameters:error:")]
		//NSArray ScanForNetworksWithParameterserror (NSDictionary parameters, NSError error, );

		//[Export ("associateToNetwork:parameters:error:")]
		//bool AssociateToNetworkparameterserror (CWNetwork network, NSDictionary parameters, NSError error, );

		[Export ("disassociate")]
		void Disassociate ();

		//[Export ("enableIBSSWithParameters:error:")]
		//bool EnableIBSSWithParameterserror (NSDictionary parameters, NSError error, );

		//[Export ("commitConfiguration:error:")]
		//bool CommitConfigurationerror (CWConfiguration config, NSError error, );

	}

	[BaseType (typeof (NSObject))]
	interface CWWirelessProfile {
		[Export ("ssid")]
		string Ssid { get; set;  }

		[Export ("securityMode")]
		NSNumber SecurityMode { get; set;  }

		[Export ("passphrase")]
		string Passphrase { get; set;  }

		[Export ("user8021XProfile")]
		CW8021XProfile User8021XProfile { get; set;  }

		[Export ("init")]
		CWWirelessProfile Init ();

		[Static]
		[Export ("profile")]
		CWWirelessProfile Profile ();

		[Export ("isEqualToProfile:")]
		bool IsEqualToProfile (CWWirelessProfile profile);
	}

	[BaseType (typeof (NSObject))]
	interface CWNetwork {
		[Export ("ssid")]
		string Ssid { get;  }

		[Export ("bssid")]
		string Bssid { get;  }

		[Export ("bssidData")]
		NSData BssidData { get;  }

		[Export ("securityMode")]
		NSNumber SecurityMode { get;  }

		[Export ("phyMode")]
		NSNumber PhyMode { get;  }

		[Export ("channel")]
		NSNumber Channel { get;  }

		[Export ("rssi")]
		NSNumber Rssi { get;  }

		[Export ("noise")]
		NSNumber Noise { get;  }

		[Export ("ieData")]
		NSData IeData { get;  }

		[Export ("isIBSS")]
		bool IsIBSS { get;  }

		[Export ("wirelessProfile")]
		CWWirelessProfile WirelessProfile { get;  }

		[Export ("isEqualToNetwork:")]
		bool IsEqualToNetwork (CWNetwork network);
	}

}
