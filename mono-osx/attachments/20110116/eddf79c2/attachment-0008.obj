//
// Auto-generated from generator.cs, do not edit
//
// We keep references to objects, so warning 414 is expected

#pragma warning disable 414

using System;

using System.Drawing;

using System.Runtime.InteropServices;

using MonoMac.CoreFoundation;

using MonoMac.Foundation;

using MonoMac.ObjCRuntime;

using MonoMac.CoreGraphics;

using MonoMac.CoreAnimation;

using MonoMac.CoreLocation;

using MonoMac.QTKit;

namespace MonoMac.CoreWlan {
	[Register("CWConfiguration")]
	public partial class CWConfiguration : NSObject {
		static IntPtr selRememberedNetworks = Selector.GetHandle ("rememberedNetworks");
		static IntPtr selSetRememberedNetworks = Selector.GetHandle ("setRememberedNetworks:");
		static IntPtr selPreferredNetworks = Selector.GetHandle ("preferredNetworks");
		static IntPtr selSetPreferredNetworks = Selector.GetHandle ("setPreferredNetworks:");
		static IntPtr selAlwaysRememberNetworks = Selector.GetHandle ("alwaysRememberNetworks");
		static IntPtr selSetAlwaysRememberNetworks = Selector.GetHandle ("setAlwaysRememberNetworks:");
		static IntPtr selDisconnectOnLogout = Selector.GetHandle ("disconnectOnLogout");
		static IntPtr selSetDisconnectOnLogout = Selector.GetHandle ("setDisconnectOnLogout:");
		static IntPtr selRequireAdminForNetworkChange = Selector.GetHandle ("requireAdminForNetworkChange");
		static IntPtr selSetRequireAdminForNetworkChange = Selector.GetHandle ("setRequireAdminForNetworkChange:");
		static IntPtr selRequireAdminForPowerChange = Selector.GetHandle ("requireAdminForPowerChange");
		static IntPtr selSetRequireAdminForPowerChange = Selector.GetHandle ("setRequireAdminForPowerChange:");
		static IntPtr selRequireAdminForIBSSCreation = Selector.GetHandle ("requireAdminForIBSSCreation");
		static IntPtr selSetRequireAdminForIBSSCreation = Selector.GetHandle ("setRequireAdminForIBSSCreation:");
		static IntPtr selInit = Selector.GetHandle ("init");
		static IntPtr selConfiguration = Selector.GetHandle ("configuration");
		static IntPtr selIsEqualToConfiguration = Selector.GetHandle ("isEqualToConfiguration:");

		static IntPtr class_ptr = Class.GetHandle ("CWConfiguration");

		public override IntPtr ClassHandle { get { return class_ptr; } }

		[Export ("init")]
		public  CWConfiguration () : base (NSObjectFlag.Empty)
		{
			if (IsDirectBinding) {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, Selector.Init);
			} else {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, Selector.Init);
			}
		}

		[Export ("initWithCoder:")]
		public CWConfiguration (NSCoder coder) : base (NSObjectFlag.Empty)
		{
			if (IsDirectBinding) {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend_IntPtr (this.Handle, Selector.InitWithCoder, coder.Handle);
			} else {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_IntPtr (this.SuperHandle, Selector.InitWithCoder, coder.Handle);
			}
		}

		public CWConfiguration (NSObjectFlag t) : base (t) {}

		public CWConfiguration (IntPtr handle) : base (handle) {}

		[Export ("init")]
		public virtual CWConfiguration Init ()
		{
			if (IsDirectBinding) {
				return (CWConfiguration) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selInit));
			} else {
				return (CWConfiguration) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selInit));
			}
		}

		[Export ("configuration")]
		public static CWConfiguration Configuration ()
		{
			return (CWConfiguration) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (class_ptr, selConfiguration));
		}

		[Export ("isEqualToConfiguration:")]
		public virtual bool IsEqualToConfiguration (CWConfiguration configuration)
		{
			if (configuration == null)
				throw new ArgumentNullException ("configuration");
			if (IsDirectBinding) {
				return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend_IntPtr (this.Handle, selIsEqualToConfiguration, configuration.Handle);
			} else {
				return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper_IntPtr (this.SuperHandle, selIsEqualToConfiguration, configuration.Handle);
			}
		}

		MonoMac.Foundation.NSSet __mt_RememberedNetworks_var;
		public virtual NSSet RememberedNetworks {
			[Export ("rememberedNetworks")]
			get {
				NSSet ret;
				if (IsDirectBinding) {
					ret = (NSSet) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selRememberedNetworks));
				} else {
					ret = (NSSet) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selRememberedNetworks));
				}
				__mt_RememberedNetworks_var = ret;
				return ret;
			}

			[Export ("setRememberedNetworks:")]
			set {
				if (value == null)
					throw new ArgumentNullException ("value");
				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_IntPtr (this.Handle, selSetRememberedNetworks, value.Handle);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_IntPtr (this.SuperHandle, selSetRememberedNetworks, value.Handle);
				}
				__mt_RememberedNetworks_var = value;
			}
		}

		MonoMac.CoreWlan.CWWirelessProfile[] __mt_PreferredNetworks_var;
		public virtual CWWirelessProfile[] PreferredNetworks {
			[Export ("preferredNetworks")]
			get {
				CWWirelessProfile[] ret;
				if (IsDirectBinding) {
					ret = NSArray.ArrayFromHandle<MonoMac.CoreWlan.CWWirelessProfile>(MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selPreferredNetworks));
				} else {
					ret = NSArray.ArrayFromHandle<MonoMac.CoreWlan.CWWirelessProfile>(MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selPreferredNetworks));
				}
				__mt_PreferredNetworks_var = ret;
				return ret;
			}

			[Export ("setPreferredNetworks:")]
			set {
				if (value == null)
					throw new ArgumentNullException ("value");
			var nsa_value = NSArray.FromNSObjects (value);

				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_IntPtr (this.Handle, selSetPreferredNetworks, nsa_value.Handle);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_IntPtr (this.SuperHandle, selSetPreferredNetworks, nsa_value.Handle);
				}
							nsa_value.Dispose ();

				__mt_PreferredNetworks_var = value;
			}
		}

		public virtual bool AlwaysRememberNetworks {
			[Export ("alwaysRememberNetworks")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selAlwaysRememberNetworks);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selAlwaysRememberNetworks);
				}
			}

			[Export ("setAlwaysRememberNetworks:")]
			set {
				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_Boolean (this.Handle, selSetAlwaysRememberNetworks, value);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_Boolean (this.SuperHandle, selSetAlwaysRememberNetworks, value);
				}
			}
		}

		public virtual bool DisconnectOnLogout {
			[Export ("disconnectOnLogout")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selDisconnectOnLogout);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selDisconnectOnLogout);
				}
			}

			[Export ("setDisconnectOnLogout:")]
			set {
				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_Boolean (this.Handle, selSetDisconnectOnLogout, value);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_Boolean (this.SuperHandle, selSetDisconnectOnLogout, value);
				}
			}
		}

		public virtual bool RequireAdminForNetworkChange {
			[Export ("requireAdminForNetworkChange")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selRequireAdminForNetworkChange);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selRequireAdminForNetworkChange);
				}
			}

			[Export ("setRequireAdminForNetworkChange:")]
			set {
				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_Boolean (this.Handle, selSetRequireAdminForNetworkChange, value);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_Boolean (this.SuperHandle, selSetRequireAdminForNetworkChange, value);
				}
			}
		}

		public virtual bool RequireAdminForPowerChange {
			[Export ("requireAdminForPowerChange")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selRequireAdminForPowerChange);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selRequireAdminForPowerChange);
				}
			}

			[Export ("setRequireAdminForPowerChange:")]
			set {
				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_Boolean (this.Handle, selSetRequireAdminForPowerChange, value);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_Boolean (this.SuperHandle, selSetRequireAdminForPowerChange, value);
				}
			}
		}

		public virtual bool RequireAdminForIBSSCreation {
			[Export ("requireAdminForIBSSCreation")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selRequireAdminForIBSSCreation);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selRequireAdminForIBSSCreation);
				}
			}

			[Export ("setRequireAdminForIBSSCreation:")]
			set {
				if (IsDirectBinding) {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSend_Boolean (this.Handle, selSetRequireAdminForIBSSCreation, value);
				} else {
					MonoMac.ObjCRuntime.Messaging.void_objc_msgSendSuper_Boolean (this.SuperHandle, selSetRequireAdminForIBSSCreation, value);
				}
			}
		}

	
	} /* class CWConfiguration */
}