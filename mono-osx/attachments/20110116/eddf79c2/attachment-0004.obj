//
// Auto-generated from generator.cs, do not edit
//
// We keep references to objects, so warning 414 is expected

#pragma warning disable 414

using System;

using System.Drawing;

using System.Runtime.InteropServices;

using MonoMac.CoreFoundation;

using MonoMac.Foundation;

using MonoMac.ObjCRuntime;

using MonoMac.CoreGraphics;

using MonoMac.CoreAnimation;

using MonoMac.CoreLocation;

using MonoMac.QTKit;

namespace MonoMac.CoreWlan {
	[Register("CWNetwork")]
	public partial class CWNetwork : NSObject {
		static IntPtr selSsid = Selector.GetHandle ("ssid");
		static IntPtr selBssid = Selector.GetHandle ("bssid");
		static IntPtr selBssidData = Selector.GetHandle ("bssidData");
		static IntPtr selSecurityMode = Selector.GetHandle ("securityMode");
		static IntPtr selPhyMode = Selector.GetHandle ("phyMode");
		static IntPtr selChannel = Selector.GetHandle ("channel");
		static IntPtr selRssi = Selector.GetHandle ("rssi");
		static IntPtr selNoise = Selector.GetHandle ("noise");
		static IntPtr selIeData = Selector.GetHandle ("ieData");
		static IntPtr selIsIBSS = Selector.GetHandle ("isIBSS");
		static IntPtr selWirelessProfile = Selector.GetHandle ("wirelessProfile");
		static IntPtr selIsEqualToNetwork = Selector.GetHandle ("isEqualToNetwork:");

		static IntPtr class_ptr = Class.GetHandle ("CWNetwork");

		public override IntPtr ClassHandle { get { return class_ptr; } }

		[Export ("init")]
		public  CWNetwork () : base (NSObjectFlag.Empty)
		{
			if (IsDirectBinding) {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, Selector.Init);
			} else {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, Selector.Init);
			}
		}

		[Export ("initWithCoder:")]
		public CWNetwork (NSCoder coder) : base (NSObjectFlag.Empty)
		{
			if (IsDirectBinding) {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend_IntPtr (this.Handle, Selector.InitWithCoder, coder.Handle);
			} else {
				Handle = MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_IntPtr (this.SuperHandle, Selector.InitWithCoder, coder.Handle);
			}
		}

		public CWNetwork (NSObjectFlag t) : base (t) {}

		public CWNetwork (IntPtr handle) : base (handle) {}

		[Export ("isEqualToNetwork:")]
		public virtual bool IsEqualToNetwork (CWNetwork network)
		{
			if (network == null)
				throw new ArgumentNullException ("network");
			if (IsDirectBinding) {
				return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend_IntPtr (this.Handle, selIsEqualToNetwork, network.Handle);
			} else {
				return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper_IntPtr (this.SuperHandle, selIsEqualToNetwork, network.Handle);
			}
		}

		public virtual string Ssid {
			[Export ("ssid")]
			get {
				if (IsDirectBinding) {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selSsid));
				} else {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selSsid));
				}
			}

		}

		public virtual string Bssid {
			[Export ("bssid")]
			get {
				if (IsDirectBinding) {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selBssid));
				} else {
					return NSString.FromHandle (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selBssid));
				}
			}

		}

		MonoMac.Foundation.NSData __mt_BssidData_var;
		public virtual NSData BssidData {
			[Export ("bssidData")]
			get {
				NSData ret;
				if (IsDirectBinding) {
					ret = (NSData) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selBssidData));
				} else {
					ret = (NSData) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selBssidData));
				}
				__mt_BssidData_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSNumber __mt_SecurityMode_var;
		public virtual NSNumber SecurityMode {
			[Export ("securityMode")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selSecurityMode));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selSecurityMode));
				}
				__mt_SecurityMode_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSNumber __mt_PhyMode_var;
		public virtual NSNumber PhyMode {
			[Export ("phyMode")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selPhyMode));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selPhyMode));
				}
				__mt_PhyMode_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSNumber __mt_Channel_var;
		public virtual NSNumber Channel {
			[Export ("channel")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selChannel));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selChannel));
				}
				__mt_Channel_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSNumber __mt_Rssi_var;
		public virtual NSNumber Rssi {
			[Export ("rssi")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selRssi));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selRssi));
				}
				__mt_Rssi_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSNumber __mt_Noise_var;
		public virtual NSNumber Noise {
			[Export ("noise")]
			get {
				NSNumber ret;
				if (IsDirectBinding) {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selNoise));
				} else {
					ret = (NSNumber) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selNoise));
				}
				__mt_Noise_var = ret;
				return ret;
			}

		}

		MonoMac.Foundation.NSData __mt_IeData_var;
		public virtual NSData IeData {
			[Export ("ieData")]
			get {
				NSData ret;
				if (IsDirectBinding) {
					ret = (NSData) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selIeData));
				} else {
					ret = (NSData) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selIeData));
				}
				__mt_IeData_var = ret;
				return ret;
			}

		}

		public virtual bool IsIBSS {
			[Export ("isIBSS")]
			get {
				if (IsDirectBinding) {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSend (this.Handle, selIsIBSS);
				} else {
					return MonoMac.ObjCRuntime.Messaging.Boolean_objc_msgSendSuper (this.SuperHandle, selIsIBSS);
				}
			}

		}

		MonoMac.CoreWlan.CWWirelessProfile __mt_WirelessProfile_var;
		public virtual CWWirelessProfile WirelessProfile {
			[Export ("wirelessProfile")]
			get {
				CWWirelessProfile ret;
				if (IsDirectBinding) {
					ret = (CWWirelessProfile) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, selWirelessProfile));
				} else {
					ret = (CWWirelessProfile) Runtime.GetNSObject (MonoMac.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, selWirelessProfile));
				}
				__mt_WirelessProfile_var = ret;
				return ret;
			}

		}

	
	} /* class CWNetwork */
}