diff --git a/samples/Rulers/ColorRect.cs b/samples/Rulers/ColorRect.cs
index caceb0a..e8c5dd4 100644
--- a/samples/Rulers/ColorRect.cs
+++ b/samples/Rulers/ColorRect.cs
@@ -43,7 +43,7 @@ namespace Rulers
 			if (IsLocked){
 				float xSize = (Frame.Width > 10.0f) ? 5.0f : 3.0f;
 				
-				NSBezierPath path = NSBezierPath.CreateBezierPath ();
+				NSBezierPath path = new NSBezierPath ();
 				
 				NSColor.Black.Set ();
 				path.LineWidth = 3.0f;
diff --git a/src/AppKit/NSBezierPath.cs b/src/AppKit/NSBezierPath.cs
new file mode 100644
index 0000000..73fce5e
--- /dev/null
+++ b/src/AppKit/NSBezierPath.cs
@@ -0,0 +1,133 @@
+using System;
+using System.Drawing;
+using MonoMac.Foundation;
+using MonoMac.ObjCRuntime;
+using System.Runtime.InteropServices;
+
+namespace MonoMac.AppKit {
+	public partial class NSBezierPath {
+
+		public void GetLineDash (out float[] pattern, out float phase)
+		{
+			//Call the internal method with null to get the length of the pattern array
+			int length;
+			_GetLineDash ((IntPtr)null, out length, out phase);
+			
+			//Allocate space for the C-array
+			float[] managedArray = new float[length];
+			int size = Marshal.SizeOf(managedArray[0]) * length;
+			IntPtr pNativeArray = Marshal.AllocHGlobal(size);
+			
+			//Call the method again to get the array
+			_GetLineDash (pNativeArray, out length, out phase);
+
+			Marshal.Copy(pNativeArray, managedArray, 0, length);
+			Marshal.FreeHGlobal(pNativeArray);
+
+			pattern = managedArray;
+		}
+
+		public void SetLineDash (float[] pattern, float phase)
+		{
+			if (pattern == null)
+				throw new ArgumentNullException ("pattern");
+
+			int size = Marshal.SizeOf(pattern[0]) * pattern.Length;
+			IntPtr pNativeArray = Marshal.AllocHGlobal(size);
+			Marshal.Copy(pattern, 0, pNativeArray, pattern.Length);
+
+			_SetLineDash (pNativeArray, pattern.Length, phase);
+			
+			Marshal.FreeHGlobal(pNativeArray);
+		}
+
+		public NSBezierPathElement ElementAt (int index, out PointF[] points)
+		{
+			//return array will be 1 or 3 points, depending on type.
+			int size = Marshal.SizeOf(typeof(PointF)) * 3;
+			IntPtr pNativeArray = Marshal.AllocHGlobal(size);
+
+			NSBezierPathElement bpe = _ElementAt (index, pNativeArray);
+			
+			int length = 1;
+			if (bpe == NSBezierPathElement.CurveTo)
+				length = 3;
+			points = new PointF[length];
+
+			IntPtr currentPtr = pNativeArray;
+			for (int i = 0; i < length; i++)
+			{
+            	points[i] = (PointF)Marshal.PtrToStructure(currentPtr, typeof(PointF));
+				currentPtr = (IntPtr)((long)currentPtr + Marshal.SizeOf(points[i]));
+			}
+
+			Marshal.FreeHGlobal(pNativeArray);
+
+			return bpe;
+		}
+
+		public void SetAssociatedPointsAtIndex (PointF[] points, int index)
+		{
+		    if (points == null)
+		        throw new ArgumentNullException ("points");
+			if (points.Length < 1)
+				throw new ArgumentException ("points array is empty");
+
+			int size = Marshal.SizeOf(points[0]) * points.Length;
+			IntPtr pNativeArray = Marshal.AllocHGlobal(size);
+			IntPtr currentPtr = pNativeArray;
+			for (int i = 0; i < points.Length; i++)
+			{
+				Marshal.StructureToPtr(points[i], currentPtr, false);
+				currentPtr = (IntPtr)((long)currentPtr + Marshal.SizeOf(points[i]));
+			}
+
+			_SetAssociatedPointsAtIndex (pNativeArray, index);
+			
+			Marshal.FreeHGlobal(pNativeArray);
+		}
+
+		public void AppendPathWithPoints (PointF[] points)
+		{
+			if (points == null)
+				throw new ArgumentNullException ("points");
+			if (points.Length < 1)
+				throw new ArgumentException ("points array is empty");
+
+			int size = Marshal.SizeOf(points[0]) * points.Length;
+			IntPtr pNativeArray = Marshal.AllocHGlobal(size);
+			IntPtr currentPtr = pNativeArray;
+			for (int i = 0; i < points.Length; i++)
+			{
+				Marshal.StructureToPtr(points[i], currentPtr, false);
+				currentPtr = (IntPtr)((long)currentPtr + Marshal.SizeOf(points[i]));
+			}
+
+			_AppendPathWithPoints (pNativeArray, points.Length);
+			
+			Marshal.FreeHGlobal(pNativeArray);
+		}
+
+		public void AppendPathWithGlyphs (uint[] glyphs, NSFont font)
+		{
+			if (glyphs == null)
+				throw new ArgumentNullException ("glyphs");
+			if (glyphs.Length < 1)
+				throw new ArgumentException ("glyphs array is empty");
+
+			int size = Marshal.SizeOf(glyphs[0]);
+			IntPtr pNativeArray = Marshal.AllocHGlobal(size * glyphs.Length);
+			IntPtr currentPtr = pNativeArray;
+			for (int i = 0; i < glyphs.Length; i++)
+			{
+				Marshal.WriteIntPtr(currentPtr, (IntPtr)glyphs[i]);
+				currentPtr = (IntPtr)((long)currentPtr + size);
+			}
+
+			_AppendPathWithGlyphs (pNativeArray, glyphs.Length, font);
+			
+			Marshal.FreeHGlobal(pNativeArray);
+		}
+
+	}
+}
diff --git a/src/Makefile b/src/Makefile
index 5227966..faccc61 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -40,6 +40,7 @@ MONOMAC_SOURCES = \
 	./AppKit/NSApplicationDelegate.cs		\
 	./AppKit/NSBitmapImageRep.cs			\
 	./AppKit/NSButton.cs				\
+	./AppKit/NSBezierPath.cs			\
 	./AppKit/NSColor.cs				\
 	./AppKit/NSControl.cs				\
 	./AppKit/NSGradient.cs				\
diff --git a/src/appkit.cs b/src/appkit.cs
index 49c8375..a8ee762 100644
--- a/src/appkit.cs
+++ b/src/appkit.cs
@@ -684,9 +684,6 @@ namespace MonoMac.AppKit {
 	
 	[BaseType (typeof (NSObject))]
 	public interface NSBezierPath {
-		[Static]
-		[Export ("bezierPath")]
-		NSBezierPath CreateBezierPath ();
 
 		[Static]
 		[Export ("bezierPathWithRect:")]
@@ -698,7 +695,7 @@ namespace MonoMac.AppKit {
 
 		[Static]
 		[Export ("bezierPathWithRoundedRect:xRadius:yRadius:")]
-		NSBezierPath BezierPathWithRoundedRect (RectangleF rect, float xRadius, float yRadius);
+		NSBezierPath FromRoundedRect (RectangleF rect, float xRadius, float yRadius);
 
 		[Static]
 		[Export ("fillRect:")]
@@ -716,9 +713,10 @@ namespace MonoMac.AppKit {
 		[Export ("strokeLineFromPoint:toPoint:")]
 		void StrokeLine (PointF point1, PointF point2);
 
-		//[Static]
-		//[Export ("drawPackedGlyphs:atPoint:")]
-		//void DrawPackedGlyphsatPoint (IntPtr *packedGlyphs, PointF point);
+		//IntPtr is exposed because the packedGlyphs should be treated as a "black box"
+		[Static]
+		[Export ("drawPackedGlyphs:atPoint:")]
+		void DrawPackedGlyphsAtPoint (IntPtr packedGlyphs, PointF point);
 
 		[Export ("moveToPoint:")]
 		void MoveTo (PointF point);
@@ -744,11 +742,11 @@ namespace MonoMac.AppKit {
 		[Export ("relativeCurveToPoint:controlPoint1:controlPoint2:")]
 		void RelativeCurveTo (PointF endPoint, PointF controlPoint1, PointF controlPoint2);
 
-		//[Export ("getLineDash:count:phase:")]
-		//void GetLineDashcountphase (float pattern, 
+		[Export ("getLineDash:count:phase:"), Internal]
+		void _GetLineDash (IntPtr pattern, out int count, out float phase);
 
-		//[Export ("setLineDash:count:phase:")]
-		//void SetLineDashcountphase (float *pattern, int count, float phase);
+		[Export ("setLineDash:count:phase:"), Internal]
+		void _SetLineDash (IntPtr pattern, int count, float phase);
 
 		[Export ("stroke")]
 		void Stroke ();
@@ -786,16 +784,14 @@ namespace MonoMac.AppKit {
 		[Export ("elementCount")]
 		int ElementCount { get; }
 
-		// FIXME: marshal NSPoint as a NSPoint *, instead of an NSArray
-		//[Export ("elementAtIndex:associatedPoints:")]
-		//NSBezierPathElement ElementAt (int index, NSPoint [] points);
+		[Export ("elementAtIndex:associatedPoints:"), Internal]
+		NSBezierPathElement _ElementAt (int index, IntPtr points);
 
 		[Export ("elementAtIndex:")]
 		NSBezierPathElement ElementAt (int index);
 
-		// FIXME: marshal
-		//[Export ("setAssociatedPoints:atIndex:")]
-		//void SetAssociatedPointsatIndex (NSPointArray points, int index);
+		[Export ("setAssociatedPoints:atIndex:"), Internal]
+		void _SetAssociatedPointsAtIndex (IntPtr points, int index);
 
 		[Export ("appendBezierPath:")]
 		void AppendPath (NSBezierPath path);
@@ -803,9 +799,8 @@ namespace MonoMac.AppKit {
 		[Export ("appendBezierPathWithRect:")]
 		void AppendPathWithRect (RectangleF rect);
 
-		// FIXME: marshal
-		//[Export ("appendBezierPathWithPoints:count:")]
-		//void AppendPathWithPoints (NSPointArray points, int count);
+		[Export ("appendBezierPathWithPoints:count:"), Internal]
+		void _AppendPathWithPoints (IntPtr points, int count);
 
 		[Export ("appendBezierPathWithOvalInRect:")]
 		void AppendPathWithOvalInRect (RectangleF rect);
@@ -822,13 +817,12 @@ namespace MonoMac.AppKit {
 		[Export ("appendBezierPathWithGlyph:inFont:")]
 		void AppendPathWithGlyph (uint glyph, NSFont font);
 
-		// FIXME: Marshal NSGlypy *
-		//[Export ("appendBezierPathWithGlyphs:count:inFont:")]
-		//void AppendPathWithGlyphs (uint *glyphs, int count, NSFont font);
+		[Export ("appendBezierPathWithGlyphs:count:inFont:"), Internal]
+		void _AppendPathWithGlyphs (IntPtr glyphs, int count, NSFont font);
 
-		// FIXME: Marshal NSGlyph
-		//[Export ("appendBezierPathWithPackedGlyphs:")]
-		//void AppendPathWithPackedGlyphs (const char packedGlyphs);
+		//IntPtr is exposed because the packedGlyphs should be treated as a "black box"
+		[Export ("appendBezierPathWithPackedGlyphs:")]
+		void AppendPathWithPackedGlyphs (IntPtr packedGlyphs);
 
 		[Export ("appendBezierPathWithRoundedRect:xRadius:yRadius:")]
 		void AppendPathWithRoundedRect (RectangleF rect, float xRadius, float yRadius);