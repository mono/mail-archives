/* 
 * CSharp.xclangspec: Xcode syntax coloring for C#
 * 
 * Copyright (c) 2008 Andreas Faerber <andreas.faerber@web.de>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

(
	{
		Identifier = "mono.lang.csharp";
		Description = "C# Coloring";
		IncludeInMenu = YES;
		BasedOn = "xcode.lang.simpleColoring";
		Name = "C#";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			IncludeRules = (
				"mono.lang.csharp.using",
				"mono.lang.csharp.namespace",
				"mono.lang.csharp.class",
				"mono.lang.csharp.interface"
			);
			Type = "xcode.syntax.plain";
		};
	},
	{
		Identifier = "mono.lang.csharp.lexer";
		Syntax = {
			IncludeRules = (
				"xcode.lang.comment",
				"xcode.lang.comment.singleline",
				"mono.lang.csharp.preprocessor",
				"xcode.lang.string",
				"xcode.lang.character",
				"xcode.lang.completionplaceholder",
				"mono.lang.csharp.identifier",
				"xcode.lang.number",
				//"mono.lang.csharp.interestingOperators"
			);
		};
	},
	
	{
		Identifier = "mono.lang.csharp.preprocessor";
		Syntax = {
			Start = "#";
			EscapeChar = "\\";
			End = "\n";
			StartAtBOL = YES;
			
			Tokenizer = "mono.lang.csharp.preprocessor.lexer";
			IncludeRules = (
				"mono.lang.csharp.preprocessor.define"
			);
			Type = "xcode.syntax.preprocessor";
		};
	},
	{
		Identifier = "mono.lang.csharp.preprocessor.lexer";
		Syntax = {
			IncludeRules = (
				"xcode.lang.comment.singleline",
				"xcode.lang.string",
				"xcode.lang.character",
				"xcode.lang.number",
				"mono.lang.csharp.preprocessor.identifier"
			);
		};
	},
	{
		Identifier = "mono.lang.csharp.preprocessor.identifier";
		Syntax = {
			StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
			Chars      = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789";
			Words = (
				"define",
				"elif",
				"else",
				"endif",
				"endregion",
				"error",
				"if",
				"region",
				"undef",
				"warning"
			);
			Type = "xcode.syntax.preprocessor.keyword";
			AltType = "xcode.syntax.preprocessor.identifier";
		};
	},
	{
		Identifier = "mono.lang.csharp.preprocessor.define";
		Syntax = {
			Tokenizer = "mono.lang.csharp.preprocessor.lexer";
			Rules = (
				"define",
				"mono.lang.csharp.preprocessor.define.name"
			);
			Type = "xcode.syntax.preprocessor";
		};
	},
	{
		Identifier = "mono.lang.csharp.preprocessor.define.name";
		Syntax = {
			Tokenizer = "mono.lang.csharp.preprocessor.lexer";
			Rules = (
				"mono.lang.csharp.preprocessor.identifier"
			);
			Type = "xcode.syntax.definition.macro";
		};
	},
	
	{
		Identifier = "mono.lang.csharp.identifier";
		Syntax = {
			StartChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_";
			Chars      = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789";
			Words = (
				"abstract",
				"as",
				"base",
				"bool",
				"break",
				"byte",
				"case",
				"catch",
				"char",
				"class",
				"const",
				"continue",
				"default",
				"do",
				"double",
				"else",
				"enum",
				"extern",
				"false",
				"finally",
				"float",
				"for",
				"foreach",
				"get",
				"if",
				"int",
				"interface",
				"internal",
				"is",
				"lock",
				"long",
				"namespace",
				"new",
				"null",
				"out",
				"override",
				"params",
				"private",
				"protected",
				"public",
				"ref",
				"return",
				"sealed",
				"set",
				"static",
				"switch",
				"this",
				"true",
				"try",
				"throw",
				"typeof",
				"uint",
				"ulong",
				"unsafe",
				"using",
				"virtual",
				"void",
				"while"
				//TODO
			);
			Type = "xcode.syntax.keyword";
			AltType = "xcode.syntax.identifier";
		};
	},
	{
		Identifier = "mono.lang.csharp.interestingOperators";
		Syntax = {
			Words = (
				"."
			);
			Type = "xcode.syntax.plain";
		};
	},
	
	{
		Identifier = "mono.lang.csharp.qualifiedname";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Rules = (
				"mono.lang.csharp.identifier",
				"mono.lang.csharp.qualifiedname.more*"
			);
		};
	},
	{
		Identifier = "mono.lang.csharp.qualifiedname.more";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Rules = (
				".",
				"mono.lang.csharp.identifier"
			);
		};
	},
	{
		Identifier = "mono.lang.csharp.using";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Rules = (
				"using",
				"mono.lang.csharp.using.assignment?",
				"mono.lang.csharp.using.qualifiedname",
				";"
			);
		};
	},
	{
		Identifier = "mono.lang.csharp.using.assignment";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Rules = (
				"mono.lang.csharp.identifier",
				"="
			);
		};
	},
	{
		Identifier = "mono.lang.csharp.using.qualifiedname";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Rules = (
				"mono.lang.csharp.identifier",
				"mono.lang.csharp.qualifiedname.more*"
			);
			Type = "mono.syntax.csharp.using";
		};
	},
	{
		Identifier = "mono.lang.csharp.namespace";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Foldable = YES;
			Recursive = YES;
			Rules = (
				"mono.lang.csharp.namespace.declarator",
				"mono.lang.csharp.namespace.block"
			);
		};
	},
	{
		Identifier = "mono.lang.csharp.namespace.declarator";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Rules = (
				"namespace",
				"mono.lang.csharp.namespace.name"
			);
		};
	},
	{
		Identifier = "mono.lang.csharp.namespace.name";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Rules = (
				"mono.lang.csharp.identifier",
				"mono.lang.csharp.qualifiedname.more*"
			);
			Type = "xcode.syntax.csharp.namespace";
		};
	},
	{
		Identifier = "mono.lang.csharp.namespace.block";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Start = "{";
			End   = "}";
			Foldable = YES;
			Recursive = YES;
			IncludeRules = (
				"mono.lang.csharp.using",
				//"mono.lang.csharp.namespace",
				"mono.lang.csharp.class",
				"mono.lang.csharp.interface"
			);
		};
	},
	
	{
		Identifier = "mono.lang.csharp.class";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Foldable = YES;
			Recursive = YES;
			Rules = (
				"mono.lang.csharp.class.declarator",
				"mono.lang.csharp.class.block"
			);
			Type = "mono.syntax.definition.csharp.class";
		};
	},
	{
		Identifier = "mono.lang.csharp.class.declarator";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Rules = (
				//"mono.lang.csharp.class.modifier*",
				"class",
				"mono.lang.csharp.class.name",
				//TODO
				"mono.lang.csharp.class.inheritance?"
			);
		};
	},
	{
		Identifier = "mono.lang.csharp.class.modifier";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Rules = (
				"mono.lang.csharp.class.modifier.visibility|static"
			);
		};
	},
	{
		Identifier = "mono.lang.csharp.class.modifier.visibility";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Rules = (
				"public|protected|private|internal",
			);
		};
	},
	{
		Identifier = "mono.lang.csharp.class.name";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Rules = (
				"mono.lang.csharp.identifier"
				//TODO
			);
			Type = "xcode.syntax.name.partial";
		};
	},
	{
		Identifier = "mono.lang.csharp.class.inheritance";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Rules = (
				":",
				"mono.lang.csharp.qualifiedname",
				"mono.lang.csharp.class.inheritance.more*"
			);
		};
	},
	{
		Identifier = "mono.lang.csharp.class.inheritance.more";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Rules = (
				",",
				"mono.lang.csharp.qualifiedname"
			);
		};
	},
	{
		Identifier = "mono.lang.csharp.class.block";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Start = "{";
			End   = "}";
			Foldable = YES;
			Recursive = YES;
			IncludeRules = (
				"mono.lang.csharp.class",
				"mono.lang.csharp.interface"
				//TODO
			);
		};
	},
	
	{
		Identifier = "mono.lang.csharp.interface";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Foldable = YES;
			Recursive = YES;
			Rules = (
				"mono.lang.csharp.interface.declarator",
				"mono.lang.csharp.interface.block"
			);
			Type = "mono.syntax.declaration.csharp.interface";
		};
	},
	{
		Identifier = "mono.lang.csharp.interface.declarator";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Rules = (
				"interface",
				"mono.lang.csharp.class.name"
				//TODO
			);
		};
	},
	{
		Identifier = "mono.lang.csharp.interface.block";
		Syntax = {
			Tokenizer = "mono.lang.csharp.lexer";
			Start = "{";
			End   = "}";
			Foldable = YES;
			Recursive = YES;
			IncludeRules = (
				"mono.lang.csharp.class",
				"mono.lang.csharp.interface"
				//TODO
			);
		};
	}
)
