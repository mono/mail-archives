using System;
using MonoMac.Foundation;
using MonoMac.ObjCRuntime;
namespace MonoMac.CoreData
{
	[BaseType (typeof (NSPersistentStore))]
	interface NSAtomicStore {

		//- (id)initWithPersistentStoreCoordinator:(NSPersistentStoreCoordinator *)coordinator configurationName:(NSString *)configurationName URL:(NSURL *)url options:(NSDictionary *)options;
		[Export ("initWithPersistentStoreCoordinator:configurationName:URL:options:")]
		IntPtr Constructor (NSPersistentStoreCoordinator coordinator, string configurationName, NSUrl url, NSDictionary options);

		//- (BOOL)load:(NSError **)error;
		[Export ("load:")]
		bool Load (NSError error);

		//- (BOOL)save:(NSError **)error;
		[Export ("save:")]
		bool Save (NSError error);

		//- (NSAtomicStoreCacheNode *)newCacheNodeForManagedObject:(NSManagedObject *)managedObject;
		[Export ("newCacheNodeForManagedObject:")]
		NSAtomicStoreCacheNode NewCacheNodeForManagedObject (NSManagedObject managedObject);

		//- (void)updateCacheNode:(NSAtomicStoreCacheNode *)node fromManagedObject:(NSManagedObject *)managedObject;
		[Export ("updateCacheNode:fromManagedObject:")]
		void UpdateCacheNode (NSAtomicStoreCacheNode node, NSManagedObject managedObject);

		//- (NSSet *)cacheNodes;
		[Export ("cacheNodes")]
		NSSet CacheNodes { get; }

		//- (void)addCacheNodes:(NSSet *)cacheNodes;
		[Export ("addCacheNodes:")]
		void AddCacheNodes (NSSet cacheNodes);

		//- (void)willRemoveCacheNodes:(NSSet *)cacheNodes;
		[Export ("willRemoveCacheNodes:")]
		void WillRemoveCacheNodes (NSSet cacheNodes);

		//- (NSAtomicStoreCacheNode *)cacheNodeForObjectID:(NSManagedObjectID *)objectID;
		[Export ("cacheNodeForObjectID:")]
		NSAtomicStoreCacheNode CacheNodeForObjectID (NSManagedObjectID objectID);

		//- (NSManagedObjectID *)objectIDForEntity:(NSEntityDescription *)entity referenceObject:(id)data;
		[Export ("objectIDForEntity:referenceObject:")]
		NSManagedObjectID ObjectIDForEntity (NSEntityDescription entity, NSObject data);

		//- (id)newReferenceObjectForManagedObject:(NSManagedObject *)managedObject;
		[Export ("newReferenceObjectForManagedObject:")]
		NSAtomicStore NewReferenceObjectForManagedObject (NSManagedObject managedObject);

		//- (id)referenceObjectForObjectID:(NSManagedObjectID *)objectID;
		[Export ("referenceObjectForObjectID:")]
		NSAtomicStore ReferenceObjectForObjectID (NSManagedObjectID objectID);

	}
	[BaseType (typeof (NSObject))]
	interface NSAtomicStoreCacheNode {

		//- (id)initWithObjectID:(NSManagedObjectID *)moid;
		[Export ("initWithObjectID:")]
		IntPtr Constructor (NSManagedObjectID moid);

		//- (NSManagedObjectID*)objectID;
		[Export ("objectID")]
		NSManagedObjectID ObjectID { get; }

		//- (NSMutableDictionary *)propertyCache;
		[Export ("propertyCache")]
		NSDictionary PropertyCache { get; set; }

		//- (id)valueForKey:(NSString*)key;
		[Export ("valueForKey:")]
		NSAtomicStoreCacheNode ValueForKey (string key);

		//- (void)setValue:(id)value forKey:(NSString*)key;
		[Export ("setValue:forKey:")]
		void SetValue (NSObject value, string key);

	}
	[BaseType (typeof (NSPropertyDescription))]
	interface NSAttributeDescription {

		//- (NSAttributeType)attributeType;
//		[Export ("attributeType")]
//		NSAttributeType AttributeType { get; set; }

		//- (NSString *)attributeValueClassName;
		[Export ("attributeValueClassName")]
		string AttributeValueClassName { get; set; }

		//- (id)defaultValue;
		[Export ("defaultValue")]
		NSAttributeDescription DefaultValue { get; }

		//- (void)setDefaultValue:(id)value;    
		[Export ("setDefaultValue:")]
		void SetDefaultValue (NSObject value);

//#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
		//- (NSData *)versionHash;
		[Export ("versionHash")]
		NSData VersionHash { get; }

		//- (NSString *)valueTransformerName;
		[Export ("valueTransformerName")]
		string ValueTransformerName { get; set; }

//#endif 
	}
	[BaseType (typeof (NSObject))]
	interface NSEntityDescription {

		//+ (NSEntityDescription *)entityForName:(NSString *)entityName inManagedObjectContext:(NSManagedObjectContext *)context;
		[Static, Export ("entityForName:inManagedObjectContext:")]
		NSEntityDescription EntityForName (string entityName, NSManagedObjectContext context);

		//+ (id)insertNewObjectForEntityForName:(NSString *)entityName inManagedObjectContext:(NSManagedObjectContext *)context;
		[Static, Export ("insertNewObjectForEntityForName:inManagedObjectContext:")]
		NSEntityDescription InsertNewObjectForEntityForName (string entityName, NSManagedObjectContext context);

		//- (NSManagedObjectModel *)managedObjectModel;
		[Export ("managedObjectModel")]
		NSManagedObjectModel ManagedObjectModel { get; }

		//- (NSString *)managedObjectClassName;
		[Export ("managedObjectClassName")]
		string ManagedObjectClassName { get; set; }

		//- (NSString *)name;
		[Export ("name")]
		string Name { get; set; }

		//- (BOOL)isAbstract;
		[Export ("isAbstract")]
		bool Abstract { [Bind("isAbstract")] get; set; }

		//- (NSDictionary *)subentitiesByName;
		[Export ("subentitiesByName")]
		NSDictionary SubentitiesByName { get; }

		//- (NSArray *)subentities;
		[Export ("subentities")]
		NSArray Subentities { get; set; }

		//- (NSEntityDescription *)superentity;
		[Export ("superentity")]
		NSEntityDescription Superentity { get; }

		//- (NSDictionary *)propertiesByName;
		[Export ("propertiesByName")]
		NSDictionary PropertiesByName { get; }

		//- (NSArray *)properties;
		[Export ("properties")]
		NSArray Properties { get; set; }

		//- (NSDictionary *)userInfo;
		[Export ("userInfo")]
		NSDictionary UserInfo { get; set; }

		//- (NSDictionary *)attributesByName;
		[Export ("attributesByName")]
		NSDictionary AttributesByName { get; }

		//- (NSDictionary *)relationshipsByName;
		[Export ("relationshipsByName")]
		NSDictionary RelationshipsByName { get; }

		//- (NSArray *)relationshipsWithDestinationEntity:(NSEntityDescription *)entity;
		[Export ("relationshipsWithDestinationEntity:")]
		NSArray RelationshipsWithDestinationEntity (NSEntityDescription entity);

//#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
		//- (BOOL)isKindOfEntity:(NSEntityDescription *)entity;
		[Export ("isKindOfEntity:")]
		bool IsKindOfEntity (NSEntityDescription entity);

		//- (NSData *)versionHash;
		[Export ("versionHash")]
		NSData VersionHash { get; }

		//- (NSString *)versionHashModifier;
		[Export ("versionHashModifier")]
		string VersionHashModifier { get; set; }

//#endif 
	}
	[BaseType (typeof (NSObject))]
	interface NSEntityMapping {

		//- (NSString *)name;
		[Export ("name")]
		string Name { get; set; }

		//- (NSEntityMappingType)mappingType;
//		[Export ("mappingType")]
//		NSEntityMappingType MappingType { get; set; }

		//- (NSString *)sourceEntityName;
		[Export ("sourceEntityName")]
		string SourceEntityName { get; set; }

		//- (NSData *)sourceEntityVersionHash;
		[Export ("sourceEntityVersionHash")]
		NSData SourceEntityVersionHash { get; set; }

		//- (NSString *)destinationEntityName;
		[Export ("destinationEntityName")]
		string DestinationEntityName { get; set; }

		//- (NSData *)destinationEntityVersionHash;
		[Export ("destinationEntityVersionHash")]
		NSData DestinationEntityVersionHash { get; set; }

		//- (NSArray *)attributeMappings;
		[Export ("attributeMappings")]
		NSArray AttributeMappings { get; set; }

		//- (NSArray *)relationshipMappings;
		[Export ("relationshipMappings")]
		NSArray RelationshipMappings { get; set; }

		//- (NSExpression *)sourceExpression;
//		[Export ("sourceExpression")]
//		NSExpression SourceExpression { get; set; }

		//- (NSDictionary *)userInfo;
		[Export ("userInfo")]
		NSDictionary UserInfo { get; set; }

		//- (NSString *)entityMigrationPolicyClassName;
		[Export ("entityMigrationPolicyClassName")]
		string EntityMigrationPolicyClassName { get; set; }

	}
	[BaseType (typeof (NSObject))]
	interface NSEntityMigrationPolicy {

		//- (BOOL)beginEntityMapping:(NSEntityMapping *)mapping manager:(NSMigrationManager *)manager error:(NSError **)error;
		[Export ("beginEntityMapping:manager:error:")]
		bool BeginEntityMapping (NSEntityMapping mapping, NSMigrationManager manager, NSError error);

		//- (BOOL)createDestinationInstancesForSourceInstance:(NSManagedObject *)sInstance entityMapping:(NSEntityMapping *)mapping manager:(NSMigrationManager *)manager error:(NSError **)error;
		[Export ("createDestinationInstancesForSourceInstance:entityMapping:manager:error:")]
		bool CreateDestinationInstancesForSourceInstance (NSManagedObject sInstance, NSEntityMapping mapping, NSMigrationManager manager, NSError error);

		//- (BOOL)endInstanceCreationForEntityMapping:(NSEntityMapping *)mapping manager:(NSMigrationManager *)manager error:(NSError **)error;
		[Export ("endInstanceCreationForEntityMapping:manager:error:")]
		bool EndInstanceCreationForEntityMapping (NSEntityMapping mapping, NSMigrationManager manager, NSError error);

		//- (BOOL)createRelationshipsForDestinationInstance:(NSManagedObject *)dInstance entityMapping:(NSEntityMapping *)mapping manager:(NSMigrationManager *)manager error:(NSError **)error;
		[Export ("createRelationshipsForDestinationInstance:entityMapping:manager:error:")]
		bool CreateRelationshipsForDestinationInstance (NSManagedObject dInstance, NSEntityMapping mapping, NSMigrationManager manager, NSError error);

		// - (BOOL)endRelationshipCreationForEntityMapping:(NSEntityMapping *)mapping manager:(NSMigrationManager *)manager error:(NSError **)error;
		[Export ("endRelationshipCreationForEntityMapping:manager:error:")]
		bool EndRelationshipCreationForEntityMapping (NSEntityMapping mapping, NSMigrationManager manager, NSError error);

		//- (BOOL)performCustomValidationForEntityMapping:(NSEntityMapping *)mapping manager:(NSMigrationManager *)manager error:(NSError **)error;
		[Export ("performCustomValidationForEntityMapping:manager:error:")]
		bool PerformCustomValidationForEntityMapping (NSEntityMapping mapping, NSMigrationManager manager, NSError error);

		//- (BOOL)endEntityMapping:(NSEntityMapping *)mapping manager:(NSMigrationManager *)manager error:(NSError **)error;
		[Export ("endEntityMapping:manager:error:")]
		bool EndEntityMapping (NSEntityMapping mapping, NSMigrationManager manager, NSError error);

	}
	[BaseType (typeof (NSPropertyDescription))]
	interface NSFetchedPropertyDescription {

		//- (NSFetchRequest *)fetchRequest;
		[Export ("fetchRequest")]
		NSFetchRequest FetchRequest { get; set; }

	}
	[BaseType (typeof (NSObject))]
	interface NSFetchRequest {

		//- (NSEntityDescription *)entity;
		[Export ("entity")]
		NSEntityDescription Entity { get; set; }

		//- (NSPredicate *)predicate;
		[Export ("predicate")]
		NSPredicate Predicate { get; set; }

		//- (NSArray *)sortDescriptors;
		[Export ("sortDescriptors")]
		NSArray SortDescriptors { get; set; }

		//- (NSUInteger)fetchLimit;
		[Export ("fetchLimit")]
		uint FetchLimit { get; set; }

		//- (NSArray *)affectedStores;
		[Export ("affectedStores")]
		NSArray AffectedStores { get; set; }

//#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
		//- (NSFetchRequestResultType)resultType;
//		[Export ("resultType")]
//		NSFetchRequestResultType ResultType { get; set; }

		//- (BOOL)includesSubentities;
		[Export ("includesSubentities")]
		bool IncludesSubentities { get; set; }

		//- (BOOL)includesPropertyValues;
		[Export ("includesPropertyValues")]
		bool IncludesPropertyValues { get; set; }

		//- (BOOL)returnsObjectsAsFaults;
		[Export ("returnsObjectsAsFaults")]
		bool ReturnsObjectsAsFaults { get; set; }

		//- (NSArray *)relationshipKeyPathsForPrefetching;
		[Export ("relationshipKeyPathsForPrefetching")]
		NSArray RelationshipKeyPathsForPrefetching { get; set; }

//#endif 
	}
	[BaseType (typeof (NSObject))]
	interface NSManagedObject {

		//- (id)initWithEntity:(NSEntityDescription *)entity insertIntoManagedObjectContext:(NSManagedObjectContext *)context;    
		[Export ("initWithEntity:insertIntoManagedObjectContext:")]
		IntPtr Constructor (NSEntityDescription entity, NSManagedObjectContext context);

		//- (NSManagedObjectContext *)managedObjectContext;
		[Export ("managedObjectContext")]
		NSManagedObjectContext ManagedObjectContext { get; }

		//- (NSEntityDescription *)entity;
		[Export ("entity")]
		NSEntityDescription Entity { get; }

		//- (NSManagedObjectID *)objectID;
		[Export ("objectID")]
		NSManagedObjectID ObjectID { get; }

		//- (BOOL)isInserted;
		[Export ("isInserted")]
		bool IsInserted { get; }

		//- (BOOL)isUpdated;
		[Export ("isUpdated")]
		bool IsUpdated { get; }

		//- (BOOL)isDeleted;
		[Export ("isDeleted")]
		bool IsDeleted { get; }

		//- (BOOL)isFault;    
		[Export ("isFault")]
		bool IsFault { get; }

//#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
		//- (BOOL) hasFaultForRelationshipNamed:(NSString *)key; 
		[Export ("hasFaultForRelationshipNamed:")]
		bool HasFaultForRelationshipNamed (string key);

//#endif 
		//- (void)willAccessValueForKey:(NSString *)key;      
		[Export ("willAccessValueForKey:")]
		void WillAccessValueForKey (string key);

		//- (void)didAccessValueForKey:(NSString *)key;       
		[Export ("didAccessValueForKey:")]
		void DidAccessValueForKey (string key);

		//- (void)willChangeValueForKey:(NSString *)key;
		[Export ("willChangeValueForKey:")]
		void WillChangeValueForKey (string key);

		//- (void)didChangeValueForKey:(NSString *)key;
		[Export ("didChangeValueForKey:")]
		void DidChangeValueForKey (string key);

		//- (void)willChangeValueForKey:(NSString *)inKey withSetMutation:(NSKeyValueSetMutationKind)inMutationKind usingObjects:(NSSet *)inObjects;
//		[Export ("willChangeValueForKey:withSetMutation:usingObjects:")]
//		void WillChangeValueForKey (string inKey, NSKeyValueSetMutationKind inMutationKind, NSSet inObjects);

		//- (void)didChangeValueForKey:(NSString *)inKey withSetMutation:(NSKeyValueSetMutationKind)inMutationKind usingObjects:(NSSet *)inObjects;
//		[Export ("didChangeValueForKey:withSetMutation:usingObjects:")]
//		void DidChangeValueForKey (string inKey, NSKeyValueSetMutationKind inMutationKind, NSSet inObjects);

		//- (void)setObservationInfo:(void *)inObservationInfo; 
		[Export ("setObservationInfo:")]
		void SetObservationInfo (IntPtr inObservationInfo);

		//- (void *)observationInfo;    
		[Export ("observationInfo")]
		void ObservationInfo ();

		//- (void)awakeFromFetch;    
		[Export ("awakeFromFetch")]
		void AwakeFromFetch ();

		//- (void)awakeFromInsert;    
		[Export ("awakeFromInsert")]
		void AwakeFromInsert ();

		//- (void)willSave;    
		[Export ("willSave")]
		void WillSave ();

		//- (void)didSave;    
		[Export ("didSave")]
		void DidSave ();

//#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
		//- (void) willTurnIntoFault;
		[Export ("willTurnIntoFault")]
		void WillTurnIntoFault ();

//#endif 
		//- (void)didTurnIntoFault;    
		[Export ("didTurnIntoFault")]
		void DidTurnIntoFault ();

		//- (id)valueForKey:(NSString *)key;    
		[Export ("valueForKey:")]
		NSManagedObject ValueForKey (string key);

		//- (void)setValue:(id)value forKey:(NSString *)key;    
		[Export ("setValue:forKey:")]
		void SetValue (NSObject value, string key);

		//- (id)primitiveValueForKey:(NSString *)key;    
		[Export ("primitiveValueForKey:")]
		NSManagedObject PrimitiveValueForKey (string key);

		//- (void)setPrimitiveValue:(id)value forKey:(NSString *)key;
		[Export ("setPrimitiveValue:forKey:")]
		void SetPrimitiveValue (NSObject value, string key);

		//- (NSDictionary *)committedValuesForKeys:(NSArray *)keys;    
		[Export ("committedValuesForKeys:")]
		NSDictionary CommittedValuesForKeys (NSArray keys);

		//- (NSDictionary *)changedValues;    
		[Export ("changedValues")]
		NSDictionary ChangedValues { get; }

		//- (BOOL)validateValue:(id *)value forKey:(NSString *)key error:(NSError **)error;    
		[Export ("validateValue:forKey:error:")]
		bool ValidateValue (NSObject value, string key, NSError error);

		//- (BOOL)validateForDelete:(NSError **)error;
		[Export ("validateForDelete:")]
		bool ValidateForDelete (NSError error);

		//- (BOOL)validateForInsert:(NSError **)error;
		[Export ("validateForInsert:")]
		bool ValidateForInsert (NSError error);

		//- (BOOL)validateForUpdate:(NSError **)error;
		[Export ("validateForUpdate:")]
		bool ValidateForUpdate (NSError error);

	}
	[BaseType (typeof (NSObject))]
	interface NSManagedObjectContext {

		//- (NSPersistentStoreCoordinator *)persistentStoreCoordinator;
		[Export ("persistentStoreCoordinator")]
		NSPersistentStoreCoordinator PersistentStoreCoordinator { get; set; }

		//- (NSUndoManager *)undoManager;
		[Export ("undoManager")]
		NSUndoManager UndoManager { get; set; }

		//- (BOOL)hasChanges;
		[Export ("hasChanges")]
		bool HasChanges { get; }

		//- (NSManagedObject *)objectRegisteredForID:(NSManagedObjectID *)objectID;    
		[Export ("objectRegisteredForID:")]
		NSManagedObject ObjectRegisteredForID (NSManagedObjectID objectID);

		//- (NSManagedObject *)objectWithID:(NSManagedObjectID *)objectID;    
		[Export ("objectWithID:")]
		NSManagedObject ObjectWithID (NSManagedObjectID objectID);

		//- (NSArray *)executeFetchRequest:(NSFetchRequest *)request error:(NSError **)error;    
		[Export ("executeFetchRequest:error:")]
		NSArray ExecuteFetchRequest (NSFetchRequest request, NSError error);

//#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
		//- (NSUInteger) countForFetchRequest: (NSFetchRequest *)request error: (NSError **)error;    
		[Export ("countForFetchRequest:error:")]
		uint CountForFetchRequest (NSFetchRequest request, NSError error);

//#endif 
		//- (void)insertObject:(NSManagedObject *)object;
		[Export ("insertObject:")]
		void InsertObject (NSManagedObject object1);

		//- (void)deleteObject:(NSManagedObject *)object;
		[Export ("deleteObject:")]
		void DeleteObject (NSManagedObject object1);

		//- (void)refreshObject:(NSManagedObject *)object mergeChanges:(BOOL)flag;    
		[Export ("refreshObject:mergeChanges:")]
		void RefreshObject (NSManagedObject object1, bool flag);

		//- (void)detectConflictsForObject:(NSManagedObject *)object;    
		[Export ("detectConflictsForObject:")]
		void DetectConflictsForObject (NSManagedObject object1);

		//- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context;    
		[Export ("observeValueForKeyPath:ofObject:change:context:")]
		void ObserveValueForKeyPath (string keyPath, NSObject object1, NSDictionary change, IntPtr context);

		//- (void)processPendingChanges;    
		[Export ("processPendingChanges")]
		void ProcessPendingChanges ();

		//- (void)assignObject:(id)object toPersistentStore:(NSPersistentStore *)store;    
		[Export ("assignObject:toPersistentStore:")]
		void AssignObject (NSObject object1, NSPersistentStore store);

		//- (NSSet *)insertedObjects;
		[Export ("insertedObjects")]
		NSSet InsertedObjects { get; }

		//- (NSSet *)updatedObjects;
		[Export ("updatedObjects")]
		NSSet UpdatedObjects { get; }

		//- (NSSet *)deletedObjects;
		[Export ("deletedObjects")]
		NSSet DeletedObjects { get; }

		//- (NSSet *)registeredObjects;
		[Export ("registeredObjects")]
		NSSet RegisteredObjects { get; }

		//- (void)undo;
		[Export ("undo")]
		void Undo ();

		//- (void)redo;
		[Export ("redo")]
		void Redo ();

		//- (void)reset;
		[Export ("reset")]
		void Reset ();

		//- (void)rollback;
		[Export ("rollback")]
		void Rollback ();

		//- (BOOL)save:(NSError **)error;
		[Export ("save:")]
		bool Save (NSError error);

		//- (void)lock;
		[Export ("lock")]
		void Lock ();

		//- (void)unlock;
		[Export ("unlock")]
		void Unlock ();

		//- (BOOL)tryLock;
		[Export ("tryLock")]
		bool TryLock { get; }

		//- (BOOL)propagatesDeletesAtEndOfEvent;  
		[Export ("propagatesDeletesAtEndOfEvent")]
		bool PropagatesDeletesAtEndOfEvent { get; set; }

		//- (BOOL)retainsRegisteredObjects;  
		[Export ("retainsRegisteredObjects")]
		bool RetainsRegisteredObjects { get; set; }

		//- (NSTimeInterval)stalenessInterval;
		[Export ("stalenessInterval")]
		double StalenessInterval { get; set; }

		//- (void)setMergePolicy:(id)mergePolicy;  
		[Export ("setMergePolicy:")]
		void SetMergePolicy (NSObject mergePolicy);

		//- (id)mergePolicy;    
		[Export ("mergePolicy")]
		NSManagedObjectContext MergePolicy { get; }

//#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
		//- (BOOL)obtainPermanentIDsForObjects:(NSArray *)objects error:(NSError **)error;
		[Export ("obtainPermanentIDsForObjects:error:")]
		bool ObtainPermanentIDsForObjects (NSArray objects, NSError error);

		//- (void)mergeChangesFromContextDidSaveNotification:(NSNotification *)notification;
		[Export ("mergeChangesFromContextDidSaveNotification:")]
		void MergeChangesFromContextDidSaveNotification (NSNotification notification);

//#endif 
	}
	[BaseType (typeof (NSObject))]
	interface NSManagedObjectID {

		//- (NSEntityDescription *)entity;    
		[Export ("entity")]
		NSEntityDescription Entity { get; }

		//- (NSPersistentStore *)persistentStore;    
		[Export ("persistentStore")]
		NSPersistentStore PersistentStore { get; }

		//- (BOOL)isTemporaryID;    
		[Export ("isTemporaryID")]
		bool IsTemporaryID { get; }

		//- (NSURL *)URIRepresentation;    
		[Export ("URIRepresentation")]
		NSUrl URIRepresentation { get; }

	}
	[BaseType (typeof (NSObject))]
	interface NSManagedObjectModel {

		//+ (NSManagedObjectModel *)mergedModelFromBundles:(NSArray *)bundles;    
		[Static, Export ("mergedModelFromBundles:")]
		NSManagedObjectModel MergedModelFromBundles (NSArray bundles);

		//+ (NSManagedObjectModel *)modelByMergingModels:(NSArray *)models;    
		[Static, Export ("modelByMergingModels:")]
		NSManagedObjectModel ModelByMergingModels (NSArray models);

		//- (id)init;    
		[Export ("init")]
		IntPtr Init { get; }

		//- (id)initWithContentsOfURL:(NSURL *)url;
		[Export ("initWithContentsOfURL:")]
		IntPtr Constructor (NSUrl url);

		//- (NSDictionary *)entitiesByName;
		[Export ("entitiesByName")]
		NSDictionary EntitiesByName { get; }

		//- (NSArray *)entities;
		[Export ("entities")]
		NSArray Entities { get; set; }

		//- (NSArray *)configurations;    
		[Export ("configurations")]
		NSArray Configurations { get; }

		//- (NSArray *)entitiesForConfiguration:(NSString *)configuration;
		[Export ("entitiesForConfiguration:")]
		NSArray EntitiesForConfiguration (string configuration);

		//- (void)setEntities:(NSArray *)entities forConfiguration:(NSString *)configuration;
		[Export ("setEntities:forConfiguration:")]
		void SetEntities (NSArray entities, string configuration);

		//- (void)setFetchRequestTemplate:(NSFetchRequest *)fetchRequestTemplate forName:(NSString *)name;
		[Export ("setFetchRequestTemplate:forName:")]
		void SetFetchRequestTemplate (NSFetchRequest fetchRequestTemplate, string name);

		//- (NSFetchRequest *)fetchRequestTemplateForName:(NSString *)name;
		[Export ("fetchRequestTemplateForName:")]
		NSFetchRequest FetchRequestTemplateForName (string name);

		//- (NSFetchRequest *)fetchRequestFromTemplateWithName:(NSString *)name substitutionVariables:(NSDictionary *)variables;    
		[Export ("fetchRequestFromTemplateWithName:substitutionVariables:")]
		NSFetchRequest FetchRequestFromTemplateWithName (string name, NSDictionary variables);

		//- (NSDictionary *)localizationDictionary;
		[Export ("localizationDictionary")]
		NSDictionary LocalizationDictionary { get; set; }

//#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
		//+ (NSManagedObjectModel *)mergedModelFromBundles:(NSArray *)bundles forStoreMetadata:(NSDictionary *)metadata;
		[Static, Export ("mergedModelFromBundles:forStoreMetadata:")]
		NSManagedObjectModel MergedModelFromBundles (NSArray bundles, NSDictionary metadata);

		//+ (NSManagedObjectModel *)modelByMergingModels:(NSArray *)models forStoreMetadata:(NSDictionary *)metadata;
		[Static, Export ("modelByMergingModels:forStoreMetadata:")]
		NSManagedObjectModel ModelByMergingModels (NSArray models, NSDictionary metadata);

		//- (NSDictionary *)fetchRequestTemplatesByName;
		[Export ("fetchRequestTemplatesByName")]
		NSDictionary FetchRequestTemplatesByName { get; }

		//- (NSSet *)versionIdentifiers;
		[Export ("versionIdentifiers")]
		NSSet VersionIdentifiers { get; set; }

		//- (BOOL)isConfiguration:(NSString *)configuration compatibleWithStoreMetadata:(NSDictionary *)metadata;
		[Export ("isConfiguration:compatibleWithStoreMetadata:")]
		bool IsConfiguration (string configuration, NSDictionary metadata);

		//- (NSDictionary *)entityVersionHashesByName;
		[Export ("entityVersionHashesByName")]
		NSDictionary EntityVersionHashesByName { get; }

//#endif 
	}
	[BaseType (typeof (NSObject))]
	interface NSMappingModel {

		//+ (NSMappingModel *)mappingModelFromBundles:(NSArray *)bundles forSourceModel:(NSManagedObjectModel *)sourceModel destinationModel:(NSManagedObjectModel *)destinationModel;
		[Static, Export ("mappingModelFromBundles:forSourceModel:destinationModel:")]
		NSMappingModel MappingModelFromBundles (NSArray bundles, NSManagedObjectModel sourceModel, NSManagedObjectModel destinationModel);

		//- (id)initWithContentsOfURL:(NSURL *)url;
		[Export ("initWithContentsOfURL:")]
		IntPtr Constructor (NSUrl url);

		//- (NSArray *)entityMappings;
		[Export ("entityMappings")]
		NSArray EntityMappings { get; set; }

		//- (NSDictionary *)entityMappingsByName;
		[Export ("entityMappingsByName")]
		NSDictionary EntityMappingsByName { get; }

	}
	[BaseType (typeof (NSObject))]
	interface NSMigrationManager {

		//- (id)initWithSourceModel:(NSManagedObjectModel *)sourceModel destinationModel:(NSManagedObjectModel *)destinationModel;
		[Export ("initWithSourceModel:destinationModel:")]
		IntPtr Constructor (NSManagedObjectModel sourceModel, NSManagedObjectModel destinationModel);

		//- (BOOL)migrateStoreFromURL:(NSURL *)sourceURL type:(NSString *)sStoreType options:(NSDictionary *)sOptions withMappingModel:(NSMappingModel *)mappings toDestinationURL:(NSURL *)dURL destinationType:(NSString *)dStoreType destinationOptions:(NSDictionary *)dOptions error:(NSError **)error;
		[Export ("migrateStoreFromURL:type:options:withMappingModel:toDestinationURL:destinationType:destinationOptions:error:")]
		bool MigrateStoreFromUrl (NSUrl sourceURL, string sStoreType, NSDictionary sOptions, NSMappingModel mappings, NSUrl dURL, string dStoreType, NSDictionary dOptions, NSError error);

		//- (void)reset;
		[Export ("reset")]
		void Reset ();

		//- (NSMappingModel *)mappingModel;
		[Export ("mappingModel")]
		NSMappingModel MappingModel { get; }

		//- (NSManagedObjectModel *)sourceModel;
		[Export ("sourceModel")]
		NSManagedObjectModel SourceModel { get; }

		//- (NSManagedObjectModel *)destinationModel;
		[Export ("destinationModel")]
		NSManagedObjectModel DestinationModel { get; }

		//- (NSManagedObjectContext *)sourceContext;
		[Export ("sourceContext")]
		NSManagedObjectContext SourceContext { get; }

		//- (NSManagedObjectContext *)destinationContext;
		[Export ("destinationContext")]
		NSManagedObjectContext DestinationContext { get; }

		//- (NSEntityDescription *)sourceEntityForEntityMapping:(NSEntityMapping *)mEntity;
		[Export ("sourceEntityForEntityMapping:")]
		NSEntityDescription SourceEntityForEntityMapping (NSEntityMapping mEntity);

		//- (NSEntityDescription *)destinationEntityForEntityMapping:(NSEntityMapping *)mEntity;
		[Export ("destinationEntityForEntityMapping:")]
		NSEntityDescription DestinationEntityForEntityMapping (NSEntityMapping mEntity);

		//- (void)associateSourceInstance:(NSManagedObject *)sourceInstance withDestinationInstance:(NSManagedObject *)destinationInstance forEntityMapping:(NSEntityMapping *)entityMapping;
		[Export ("associateSourceInstance:withDestinationInstance:forEntityMapping:")]
		void AssociateSourceInstance (NSManagedObject sourceInstance, NSManagedObject destinationInstance, NSEntityMapping entityMapping);

		// - (NSArray *)destinationInstancesForEntityMappingNamed:(NSString *)mappingName sourceInstances:(NSArray*)sourceInstances;
		[Export ("destinationInstancesForEntityMappingNamed:sourceInstances:")]
		NSArray DestinationInstancesForEntityMappingNamed (string mappingName, NSArray sourceInstances);

		// - (NSArray *)sourceInstancesForEntityMappingNamed:(NSString *)mappingName destinationInstances:(NSArray *)destinationInstances;
		[Export ("sourceInstancesForEntityMappingNamed:destinationInstances:")]
		NSArray SourceInstancesForEntityMappingNamed (string mappingName, NSArray destinationInstances);

		//- (NSEntityMapping *)currentEntityMapping;
		[Export ("currentEntityMapping")]
		NSEntityMapping CurrentEntityMapping { get; }

		//- (float)migrationProgress;
		[Export ("migrationProgress")]
		float MigrationProgress { get; }

		//- (NSDictionary *)userInfo;
		[Export ("userInfo")]
		NSDictionary UserInfo { get; set; }

		//- (void)cancelMigrationWithError:(NSError *)error;
		[Export ("cancelMigrationWithError:")]
		void CancelMigrationWithError (NSError error);

	}
	[BaseType (typeof (NSObject))]
	interface NSPersistentStore {

		//+ (NSDictionary *)metadataForPersistentStoreWithURL:(NSURL *)url error:(NSError **)error;    
		[Static, Export ("metadataForPersistentStoreWithURL:error:")]
		NSDictionary MetadataForPersistentStoreWithUrl (NSUrl url, NSError error);

		//+ (BOOL)setMetadata:(NSDictionary *)metadata forPersistentStoreWithURL:(NSURL*)url error:(NSError **)error;
		[Static, Export ("setMetadata:forPersistentStoreWithURL:error:")]
		bool SetMetadata (NSDictionary metadata, NSUrl url, NSError error);

		//- (id)initWithPersistentStoreCoordinator:(NSPersistentStoreCoordinator *)root configurationName:(NSString *)name URL:(NSURL *)url options:(NSDictionary *)options ;
		[Export ("initWithPersistentStoreCoordinator:configurationName:URL:options:")]
		IntPtr Constructor (NSPersistentStoreCoordinator root, string name, NSUrl url, NSDictionary options);

		//- (NSPersistentStoreCoordinator*) persistentStoreCoordinator;
		[Export ("persistentStoreCoordinator")]
		NSPersistentStoreCoordinator PersistentStoreCoordinator { get; }

		//- (NSString *)configurationName; 
		[Export ("configurationName")]
		string ConfigurationName { get; }

		//- (NSDictionary *)options; 
		[Export ("options")]
		NSDictionary Options { get; }

		//- (NSURL *)URL;
		[Export ("URL")]
		NSUrl Url { get; set; }

		//- (NSString *)identifier;
		[Export ("identifier")]
		string Identifier { get; set; }

		//- (NSString *)type; 
		[Export ("type")]
		string Type { get; }

		//- (BOOL)isReadOnly;     
		[Export ("isReadOnly")]
		bool IsReadOnly { [Bind("isReadonly")] get; set; }

		//- (NSDictionary *)metadata; 
		[Export ("metadata")]
		NSDictionary Metadata { get; set; }

		//- (void)didAddToPersistentStoreCoordinator:(NSPersistentStoreCoordinator *)coordinator;
		[Export ("didAddToPersistentStoreCoordinator:")]
		void DidAddToPersistentStoreCoordinator (NSPersistentStoreCoordinator coordinator);

		//- (void)willRemoveFromPersistentStoreCoordinator:(NSPersistentStoreCoordinator *)coordinator; 
		[Export ("willRemoveFromPersistentStoreCoordinator:")]
		void WillRemoveFromPersistentStoreCoordinator (NSPersistentStoreCoordinator coordinator);

	}
	[BaseType (typeof (NSObject))]
	interface NSPersistentStoreCoordinator {

//#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
		//+ (NSDictionary *)registeredStoreTypes;
		[Static, Export ("registeredStoreTypes")]
		NSDictionary RegisteredStoreTypes { get; }

		//+ (void)registerStoreClass:(Class)storeClass forStoreType:(NSString *)storeType;
		[Static, Export ("registerStoreClass:forStoreType:")]
		void RegisterStoreClass (Class storeClass, string storeType);

		//+ (NSDictionary *)metadataForPersistentStoreOfType:(NSString *)storeType URL:(NSURL *)url error:(NSError **)error; 
		[Static, Export ("metadataForPersistentStoreOfType:URL:error:")]
		NSDictionary MetadataForPersistentStoreOfType (string storeType, NSUrl url, NSError error);

		//+ (BOOL)setMetadata:(NSDictionary *)metadata forPersistentStoreOfType:(NSString *)storeType URL:(NSURL*)url error:(NSError **)error;
		[Static, Export ("setMetadata:forPersistentStoreOfType:URL:error:")]
		bool SetMetadata (NSDictionary metadata, string storeType, NSUrl url, NSError error);

//#endif 
		//- (void)setMetadata:(NSDictionary *)metadata forPersistentStore:(NSPersistentStore *)store;    
		[Export ("setMetadata:forPersistentStore:")]
		void SetMetadata (NSDictionary metadata, NSPersistentStore store);

		//- (NSDictionary *)metadataForPersistentStore:(NSPersistentStore *)store;    
		[Export ("metadataForPersistentStore:")]
		NSDictionary MetadataForPersistentStore (NSPersistentStore store);

		//- (id)initWithManagedObjectModel:(NSManagedObjectModel *)model;
		[Export ("initWithManagedObjectModel:")]
		IntPtr Constructor (NSManagedObjectModel model);

		//- (NSManagedObjectModel *)managedObjectModel;
		[Export ("managedObjectModel")]
		NSManagedObjectModel ManagedObjectModel { get; }

		//- (NSArray *)persistentStores;
		[Export ("persistentStores")]
		NSArray PersistentStores { get; }

		//- (NSPersistentStore *)persistentStoreForURL:(NSURL *)URL;
		[Export ("persistentStoreForURL:")]
		NSPersistentStore PersistentStoreForUrl (NSUrl URL);

		//- (NSURL *)URLForPersistentStore:(NSPersistentStore *)store;
		[Export ("URLForPersistentStore:")]
		NSUrl UrlForPersistentStore (NSPersistentStore store);

//#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
		//- (BOOL)setURL:(NSURL*)url forPersistentStore:(NSPersistentStore *)store;    
		[Export ("setURL:forPersistentStore:")]
		bool SetUrl (NSUrl url, NSPersistentStore store);

//#endif 
		//- (NSPersistentStore *)addPersistentStoreWithType:(NSString *)storeType configuration:(NSString *)configuration URL:(NSURL *)storeURL options:(NSDictionary *)options error:(NSError **)error;    
		[Export ("addPersistentStoreWithType:configuration:URL:options:error:")]
		NSPersistentStore AddPersistentStoreWithType (string storeType, string configuration, NSUrl storeURL, NSDictionary options, NSError error);

		//- (BOOL)removePersistentStore:(NSPersistentStore *)store error:(NSError **)error;
		[Export ("removePersistentStore:error:")]
		bool RemovePersistentStore (NSPersistentStore store, NSError error);

		//- (NSPersistentStore *)migratePersistentStore:(NSPersistentStore *)store toURL:(NSURL *)URL options:(NSDictionary *)options withType:(NSString *)storeType error:(NSError **)error;    
		[Export ("migratePersistentStore:toURL:options:withType:error:")]
		NSPersistentStore MigratePersistentStore (NSPersistentStore store, NSUrl URL, NSDictionary options, string storeType, NSError error);

		//- (NSManagedObjectID *)managedObjectIDForURIRepresentation:(NSURL *)url;    
		[Export ("managedObjectIDForURIRepresentation:")]
		NSManagedObjectID ManagedObjectIDForURIRepresentation (NSUrl url);

		//- (void)lock;
		[Export ("lock")]
		void Lock ();

		//- (void)unlock;
		[Export ("unlock")]
		void Unlock ();

		//- (BOOL)tryLock;
		[Export ("tryLock")]
		bool TryLock { get; }

		//+ (NSDictionary *)metadataForPersistentStoreWithURL:(NSURL *)url error:(NSError **)error DEPRECATED_IN_MAC_OS_X_VERSION_10_5_AND_LATER;
		[Static, Export ("metadataForPersistentStoreWithURL:error:")]
		NSDictionary MetadataForPersistentStoreWithUrl (NSUrl url, NSError error);

	}
	[BaseType (typeof (NSObject))]
	interface NSPropertyDescription {

		//- (NSEntityDescription *)entity;
		[Export ("entity")]
		NSEntityDescription Entity { get; }

		//- (NSString *)name;
		[Export ("name")]
		string Name { get; set; }

		//- (BOOL)isOptional;
		[Export ("isOptional")]
		bool Optional { [Bind("isOptional")] get; set; }

		//- (BOOL)isTransient;
		[Export ("isTransient")]
		bool Transient { [Bind("isTransient")] get; set; }

		//- (NSArray *)validationPredicates;
		[Export ("validationPredicates")]
		NSArray ValidationPredicates { get; }

		//- (NSArray *)validationWarnings;
		[Export ("validationWarnings")]
		NSArray ValidationWarnings { get; }

		//- (void)setValidationPredicates:(NSArray *)validationPredicates withValidationWarnings:(NSArray *)validationWarnings;
		[Export ("setValidationPredicates:withValidationWarnings:")]
		void SetValidationPredicates (NSArray validationPredicates, NSArray validationWarnings);

		//- (NSDictionary *)userInfo;
		[Export ("userInfo")]
		NSDictionary UserInfo { get; set; }

//#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
		//- (BOOL)isIndexed;
		[Export ("isIndexed")]
		bool Indexed { [Bind("isIndexed")] get; set; }

		//- (NSData *)versionHash;
		[Export ("versionHash")]
		NSData VersionHash { get; }

		//- (NSString *)versionHashModifier;
		[Export ("versionHashModifier")]
		string VersionHashModifier { get; set; }

//#endif 
	}
	[BaseType (typeof (NSObject))]
	interface NSPropertyMapping {

		//- (NSString *)name;
		[Export ("name")]
		string Name { get; set; }

		//- (NSExpression *)valueExpression;
//		[Export ("valueExpression")]
//		NSExpression ValueExpression { get; set; }

		//- (NSDictionary *)userInfo;
		[Export ("userInfo")]
		NSDictionary UserInfo { get; set; }

	}
	[BaseType (typeof (NSPropertyDescription))]
	interface NSRelationshipDescription {

		//- (NSEntityDescription *)destinationEntity;
		[Export ("destinationEntity")]
		NSEntityDescription DestinationEntity { get; set; }

		//- (NSRelationshipDescription *)inverseRelationship;
		[Export ("inverseRelationship")]
		NSRelationshipDescription InverseRelationship { get; set; }

		//- (NSUInteger)maxCount;
		[Export ("maxCount")]
		uint MaxCount { get; set; }

		//- (NSUInteger)minCount;
		[Export ("minCount")]
		uint MinCount { get; set; }

		//- (NSDeleteRule)deleteRule;
//		[Export ("deleteRule")]
//		NSDeleteRule DeleteRule { get; set; }

		//- (BOOL)isToMany;    
		[Export ("isToMany")]
		bool IsToMany { get; }

//#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
		//- (NSData *)versionHash;
		[Export ("versionHash")]
		NSData VersionHash { get; }

//#endif 
	}
}
