diff --git a/src/CoreMedia/CMSampleBuffer.cs b/src/CoreMedia/CMSampleBuffer.cs
index 27c4e55..334edb8 100644
--- a/src/CoreMedia/CMSampleBuffer.cs
+++ b/src/CoreMedia/CMSampleBuffer.cs
@@ -15,6 +15,12 @@ using MonoMac.Foundation;
 using MonoMac.CoreVideo;
 #endif
 
+using OSStatus = System.Int32;
+using CMItemCount = System.Int32;
+using CMItemIndex = System.Int32;
+using size_t = System.Int32;
+using CFTypeID = System.Int32;
+
 namespace MonoMac.CoreMedia {
 
 	[Since (4,0)]
@@ -57,7 +63,152 @@ namespace MonoMac.CoreMedia {
 				handle = IntPtr.Zero;
 			}
 		}
+		
+/*		[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMAudioSampleBufferCreateWithPacketDescriptions (
+		   CFAllocatorRef allocator,
+		   CMBlockBufferRef dataBuffer,
+		   Boolean dataReady,
+		   CMSampleBufferMakeDataReadyCallback makeDataReadyCallback,
+		   void *makeDataReadyRefcon,
+		   CMFormatDescriptionRef formatDescription,
+		   CMItemCount numSamples,
+		   CMTime sbufPTS,
+		   const AudioStreamPacketDescription *packetDescriptions,
+		   CMSampleBufferRef *sBufOut
+		);
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferCallForEachSample (
+		   CMSampleBufferRef sbuf,
+		   OSStatus (*callback)(CMSampleBufferRef sampleBuffer, CMItemCount index, void *refcon),
+		   void *refcon
+		);
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferCopySampleBufferForRange (
+		   CFAllocatorRef allocator,
+		   CMSampleBufferRef sbuf,
+		   CFRange sampleRange,
+		   CMSampleBufferRef *sBufOut
+		);
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferCreate (
+		   CFAllocatorRef allocator,
+		   CMBlockBufferRef dataBuffer,
+		   Boolean dataReady,
+		   CMSampleBufferMakeDataReadyCallback makeDataReadyCallback,
+		   void *makeDataReadyRefcon,
+		   CMFormatDescriptionRef formatDescription,
+		   CMItemCount numSamples,
+		   CMItemCount numSampleTimingEntries,
+		   const CMSampleTimingInfo *sampleTimingArray,
+		   CMItemCount numSampleSizeEntries,
+		   const size_t *sampleSizeArray,
+		   CMSampleBufferRef *sBufOut
+		);
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferCreateCopy (
+		   CFAllocatorRef allocator,
+		   CMSampleBufferRef sbuf,
+		   CMSampleBufferRef *sbufCopyOut
+		);
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferCreateCopyWithNewTiming (
+		   CFAllocatorRef allocator,
+		   CMSampleBufferRef originalSBuf,
+		   CMItemCount numSampleTimingEntries,
+		   const CMSampleTimingInfo *sampleTimingArray,
+		   CMSampleBufferRef *sBufCopyOut
+		);
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferCreateForImageBuffer (
+		   CFAllocatorRef allocator,
+		   CVImageBufferRef imageBuffer,
+		   Boolean dataReady,
+		   CMSampleBufferMakeDataReadyCallback makeDataReadyCallback,
+		   void *makeDataReadyRefcon,
+		   CMVideoFormatDescriptionRef formatDescription,
+		   const CMSampleTimingInfo *sampleTiming,
+		   CMSampleBufferRef *sBufOut
+		);*/
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static bool CMSampleBufferDataIsReady (IntPtr handle);
+		
+		public bool DataIsReady
+		{
+			get
+			{
+				return CMSampleBufferDataIsReady (handle);
+			}
+		}
+
+		/*[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer (
+		   CMSampleBufferRef sbuf,
+		   size_t *bufferListSizeNeededOut,
+		   AudioBufferList *bufferListOut,
+		   size_t bufferListSize,
+		   CFAllocatorRef bbufStructAllocator,
+		   CFAllocatorRef bbufMemoryAllocator,
+		   uint32_t flags,
+		   CMBlockBufferRef *blockBufferOut
+		);
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferGetAudioStreamPacketDescriptions (
+		   CMSampleBufferRef sbuf,
+		   size_t packetDescriptionsSize,
+		   AudioStreamPacketDescription *packetDescriptionsOut,
+		   size_t *packetDescriptionsSizeNeededOut
+		);
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferGetAudioStreamPacketDescriptionsPtr (
+		   CMSampleBufferRef sbuf,
+		   const AudioStreamPacketDescription **packetDescriptionsPtrOut,
+		   size_t *packetDescriptionsSizeOut
+		);
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		CMBlockBufferRef CMSampleBufferGetDataBuffer (
+		   CMSampleBufferRef sbuf
+		);*/
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static CMTime CMSampleBufferGetDecodeTimeStamp (IntPtr handle);
+		
+		public CMTime DecodeTimeStamp
+		{
+			get
+			{
+				return CMSampleBufferGetDecodeTimeStamp (handle);
+			}
+		}
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static CMTime CMSampleBufferGetDuration (IntPtr handle);
+		
+		public CMTime Duration
+		{
+			get
+			{
+				return CMSampleBufferGetDuration (handle);
+			}
+		}
+
+		/*[DllImport(Constants.CoreMediaLibrary)]
+		CMFormatDescriptionRef CMSampleBufferGetFormatDescription (
+		   CMSampleBufferRef sbuf
+		);*/
+
 #if !COREBUILD
+
 		[DllImport(Constants.CoreMediaLibrary)]
 		extern static IntPtr CMSampleBufferGetImageBuffer (IntPtr handle);
 
@@ -72,6 +223,218 @@ namespace MonoMac.CoreMedia {
 				return new CVPixelBuffer (ib, false);
 			return new CVImageBuffer (ib, false);
 		}
+		
 #endif
+		
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static CMItemCount CMSampleBufferGetNumSamples (IntPtr handle);
+		
+		public CMItemCount NumSamples
+		{
+			get
+			{
+				return CMSampleBufferGetNumSamples (handle);
+			}
+		}
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static CMTime CMSampleBufferGetOutputDecodeTimeStamp (IntPtr handle);
+		
+		public CMTime OutputDecodeTimeStamp
+		{
+			get
+			{
+				return CMSampleBufferGetOutputDecodeTimeStamp (handle);
+			}
+		}
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static CMTime CMSampleBufferGetOutputDuration (IntPtr handle);
+		
+		public CMTime OutputDuration
+		{
+			get
+			{
+				return CMSampleBufferGetOutputDuration (handle);
+			}
+		}
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static CMTime CMSampleBufferGetOutputPresentationTimeStamp (IntPtr handle);
+		
+		public CMTime OutputPresentationTimeStamp
+		{
+			get
+			{
+				return CMSampleBufferGetOutputPresentationTimeStamp (handle);
+			}
+		}
+		
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static OSStatus CMSampleBufferSetOutputPresentationTimeStamp (IntPtr handle, CMTime outputPresentationTimeStamp);
+		
+		public OSStatus SetOutputPresentationTimeStamp (CMTime outputPresentationTimeStamp)
+		{
+			return CMSampleBufferSetOutputPresentationTimeStamp (handle, outputPresentationTimeStamp);
+		}
+
+		/*[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferGetOutputSampleTimingInfoArray (
+		   CMSampleBufferRef sbuf,
+		   CMItemCount timingArrayEntries,
+		   CMSampleTimingInfo *timingArrayOut,
+		   CMItemCount *timingArrayEntriesNeededOut
+		);*/
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static CMTime CMSampleBufferGetPresentationTimeStamp (IntPtr handle);
+		
+		public CMTime PresentationTimeStamp
+		{
+			get
+			{
+				return CMSampleBufferGetPresentationTimeStamp (handle);
+			}
+		}
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static IntPtr CMSampleBufferGetSampleAttachmentsArray (IntPtr handle, bool createIfNecessary);
+		
+		public IntPtr [] GetSampleAttachments (bool createIfNecessary)
+		{
+			var cfArrayRef = CMSampleBufferGetSampleAttachmentsArray (handle, createIfNecessary);
+			if (cfArrayRef == IntPtr.Zero)
+			{
+				return new IntPtr [0];
+			}
+			else
+			{
+				//
+				// This is a CFMutableDictionary, but there is no proper mapping for CFMutableArray
+				// in CoreFoundation.
+				//
+				return NSArray.ArrayFromHandle (cfArrayRef, h => h);
+			}
+		}
+
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static size_t CMSampleBufferGetSampleSize (IntPtr handle, CMItemIndex sampleIndex);
+		
+		public size_t GetSampleSize (CMItemIndex sampleIndex)
+		{
+			return CMSampleBufferGetSampleSize (handle, sampleIndex);
+		}
+		
+		/*[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferGetSampleSizeArray (
+		   CMSampleBufferRef sbuf,
+		   CMItemCount sizeArrayEntries,
+		   size_t *sizeArrayOut,
+		   CMItemCount *sizeArrayEntriesNeededOut
+		);
+		
+		[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferGetSampleTimingInfo (
+		   CMSampleBufferRef sbuf,
+		   CMItemIndex sampleIndex,
+		   CMSampleTimingInfo *timingInfoOut
+		);
+		
+		[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferGetSampleTimingInfoArray (
+		   CMSampleBufferRef sbuf,
+		   CMItemCount timingArrayEntries,
+		   CMSampleTimingInfo *timingArrayOut,
+		   CMItemCount *timingArrayEntriesNeededOut
+		);*/
+		
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static size_t CMSampleBufferGetTotalSampleSize (IntPtr handle);
+		
+		public size_t TotalSampleSize
+		{
+			get
+			{
+				return CMSampleBufferGetTotalSampleSize (handle);
+			}
+		}
+		
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static CFTypeID CMSampleBufferGetTypeID ();
+		
+		public static CFTypeID GetTypeID ()
+		{
+			return CMSampleBufferGetTypeID ();
+		}
+		
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static OSStatus CMSampleBufferInvalidate (IntPtr handle);
+		
+		public OSStatus Invalidate()
+		{
+			return CMSampleBufferInvalidate (handle);
+		}
+		
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static bool CMSampleBufferIsValid (IntPtr handle);
+		
+		public bool IsValid
+		{
+			get
+			{
+				return CMSampleBufferIsValid (handle);
+			}
+		}
+		
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static OSStatus CMSampleBufferMakeDataReady (IntPtr handle);
+		
+		public OSStatus MakeDataReady ()
+		{
+			return CMSampleBufferMakeDataReady (handle);
+		}
+		
+		/*[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferSetDataBuffer (
+		   CMSampleBufferRef sbuf,
+		   CMBlockBufferRef dataBuffer
+		);
+		
+		[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferSetDataBufferFromAudioBufferList (
+		   CMSampleBufferRef sbuf,
+		   CFAllocatorRef bbufStructAllocator,
+		   CFAllocatorRef bbufMemoryAllocator,
+		   uint32_t flags,
+		   const AudioBufferList *bufferList
+		);*/
+		
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static OSStatus CMSampleBufferSetDataReady (IntPtr handle);
+		
+		public OSStatus SetDataReady ()
+		{
+			return CMSampleBufferSetDataReady (handle);
+		}
+		
+		/*[DllImport(Constants.CoreMediaLibrary)]
+		OSStatus CMSampleBufferSetInvalidateCallback (
+		   CMSampleBufferRef sbuf,
+		   CMSampleBufferInvalidateCallback invalidateCallback,
+		   uint64_t invalidateRefCon
+		);*/
+				
+		[DllImport(Constants.CoreMediaLibrary)]
+		extern static OSStatus CMSampleBufferTrackDataReadiness (IntPtr handle, IntPtr handleToTrack);
+		
+		public OSStatus TrackDataReadiness (CMSampleBuffer bufferToTrack)
+		{
+			var handleToTrack = IntPtr.Zero;
+			if (bufferToTrack != null) {
+				handleToTrack = bufferToTrack.handle;
+			}
+			return CMSampleBufferTrackDataReadiness (handle, handleToTrack);
+		}
+
 	}
 }
diff --git a/src/CoreMedia/CoreMedia.cs b/src/CoreMedia/CoreMedia.cs
index 67beaa0..bf796d5 100644
--- a/src/CoreMedia/CoreMedia.cs
+++ b/src/CoreMedia/CoreMedia.cs
@@ -82,6 +82,13 @@ namespace MonoMac.CoreMedia {
 
 		// TODO: kCMTimeValueKey, TimeScaleKey, TimeEpockKey, TimeFlagsKey
 	}
+	
+	[StructLayout(LayoutKind.Sequential)]
+	struct CMSampleTimingInfo {
+		public CMTime Duration;
+		public CMTime PresentationTimeStamp;
+		public CMTime DecodeTimeStamp;
+	}
 
 	[StructLayout(LayoutKind.Sequential)]
 	public struct CMTimeRange {