From 19b41063e4da17248a654d1c8c54091ce0485e9b Mon Sep 17 00:00:00 2001
From: Oleg Zee <olegzzzz@gmail.com>
Date: Fri, 31 Dec 2010 03:35:13 +0600
Subject: [PATCH 2/2] Introduced Villain data structure instead of Dictionary<>.

---
 samples/VillainTracker/Villain.cs                  |   39 +++++++
 samples/VillainTracker/VillainTracker.csproj       |    1 +
 .../VillainTrackerAppDelegate.Delegates.cs         |   31 +++++-
 .../VillainTracker/VillainTrackerAppDelegate.cs    |  114 +++++++-------------
 4 files changed, 106 insertions(+), 79 deletions(-)
 create mode 100644 samples/VillainTracker/Villain.cs

diff --git a/samples/VillainTracker/Villain.cs b/samples/VillainTracker/Villain.cs
new file mode 100644
index 0000000..69acdb5
--- /dev/null
+++ b/samples/VillainTracker/Villain.cs
@@ -0,0 +1,39 @@
+using System;
+using System.Collections.Generic;
+using MonoMac.AppKit;
+
+namespace VillainTracker
+{
+	/// <summary>
+	/// Keeps villain data
+	/// </summary>
+	public class Villain
+	{
+		public string Name { get; set; }
+		public string LastKnownLocation { get; set; }
+		public DateTime LastSeenDate { get; set; }
+		public string SwornEnemy { get; set; }
+		public string PrimaryMotivation { get; set; }
+		public IList<string> Powers { get; set; }
+		public string PowerSource { get; set; }
+		public int Evilness { get; set; }
+		public NSImage Mugshot { get; set; }
+		public string Notes { get; set; }
+
+		public Villain ()
+		{
+			Name = string.Empty;
+			LastKnownLocation = string.Empty;
+			LastSeenDate = DateTime.Now;
+			SwornEnemy = string.Empty;
+			PrimaryMotivation = string.Empty;
+			Powers = new[] {string.Empty};
+			PowerSource = string.Empty;
+			Evilness = 0;
+			Mugshot = NSImage.ImageNamed("NSUser");
+			Notes = string.Empty;
+		}
+		
+	}
+}
+
diff --git a/samples/VillainTracker/VillainTracker.csproj b/samples/VillainTracker/VillainTracker.csproj
index 395e209..ae76125 100644
--- a/samples/VillainTracker/VillainTracker.csproj
+++ b/samples/VillainTracker/VillainTracker.csproj
@@ -52,6 +52,7 @@
     <Compile Include="VillainTrackerAppDelegate.Delegates.cs">
       <DependentUpon>MainMenu.xib</DependentUpon>
     </Compile>
+    <Compile Include="Villain.cs" />
   </ItemGroup>
   <ItemGroup>
     <Page Include="MainMenu.xib" />
diff --git a/samples/VillainTracker/VillainTrackerAppDelegate.Delegates.cs b/samples/VillainTracker/VillainTrackerAppDelegate.Delegates.cs
index 4c5f633..d36e077 100644
--- a/samples/VillainTracker/VillainTrackerAppDelegate.Delegates.cs
+++ b/samples/VillainTracker/VillainTrackerAppDelegate.Delegates.cs
@@ -23,14 +23,39 @@ namespace VillainTracker
 			public override MonoMac.Foundation.NSObject GetObjectValue (MonoMac.AppKit.NSTableView tableView, MonoMac.AppKit.NSTableColumn tableColumn, int rowIndex)
 			{
 				var valueKey = (string)(NSString)tableColumn.Identifier;
+				var dataRow = _app._villains[rowIndex];
+				
+				switch((string)valueKey)
+				{
+				case "name":
+					return (NSString)dataRow.Name;
+				case "mugshot":
+					return dataRow.Mugshot;
+				case "lastSeenDate":
+					return (NSDate)dataRow.LastSeenDate;
+				}
 			
-				return _app._villains[rowIndex][valueKey];
+				throw new Exception(string.Format("Incorrect value requested '{0}'", (string)valueKey));
 			}
 			
 			public override void SetObjectValue (NSTableView tableView, NSObject theObject, NSTableColumn tableColumn, int rowIndex)
 			{
 				var valueKey = (string)(NSString)tableColumn.Identifier;
-				_app._villains[rowIndex][valueKey] = theObject;
+				var dataRow = _app._villains[rowIndex];
+	
+				switch((string)valueKey)
+				{
+				case "name":
+					dataRow.Name = (string)(NSString)theObject;
+					break;
+				case "mugshot":
+					dataRow.Mugshot = (NSImage)theObject;
+					break;
+				case "lastSeenDate":
+					dataRow.LastSeenDate = (NSDate)theObject;
+					break;
+				}
+		
 				_app.UpdateDetailViews();
 			}
 		}
@@ -63,7 +88,7 @@ namespace VillainTracker
 			
 			public override void TextDidChange (NSNotification notification)
 			{
-				_app._villain[kNotes] = (NSString)_app.notesView.Value;
+				_app._villain.Notes = _app.notesView.Value;
 			}
 		}
 	}
diff --git a/samples/VillainTracker/VillainTrackerAppDelegate.cs b/samples/VillainTracker/VillainTrackerAppDelegate.cs
index 54aa612..2e045a6 100644
--- a/samples/VillainTracker/VillainTrackerAppDelegate.cs
+++ b/samples/VillainTracker/VillainTrackerAppDelegate.cs
@@ -2,36 +2,21 @@ using System;
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Linq;
-using System.Collections.Generic;
 using MonoMac.Foundation;
 using MonoMac.AppKit;
 
 namespace VillainTracker
 {
-	using VillainData = Dictionary<string,NSObject>;
-	
 	public partial class VillainTrackerAppDelegate: NSApplicationDelegate
-	{
-		private const string kName = "name";
-		private const string kLastKnownLocation = "lastKnownLocation";
-		private const string kLastSeenDate = "lastSeenDate";
-		private const string kSwornEnemy = "swornEnemy";
-		private const string kPrimaryMotivation = "primaryMotivation";
-		private const string kPowers = "powers";
-		private const string kPowerSource = "powerSource";
-		private const string kEvilness = "evilness";
-		private const string kMugshot = "mugshot";
-		private const string kNotes = "notes";
-		
+	{	
 		private static readonly string[] __motivations = new[] {"Greed", "Revenge", "Bloodlust", "Nihilism", "Insanity"};
 		private static readonly string[] __powers = new[] {"Strength", "Intellect", "Psionics", "Imperviousness", "Speed", "Stealth",
 			"Fighting ability", "Time control", "Cosmic consciousness", "Size", "Special weapon attack", "Leadership"};
 		
 		private static readonly NSObject nil = new NSObject(IntPtr.Zero);
-		private static readonly NSString emptyStr = (NSString)(string.Empty);
 
-		private List<VillainData> _villains;
-		private VillainData _villain;
+		private List<Villain> _villains;
+		private Villain _villain;
 		
 		public override bool ApplicationShouldTerminateAfterLastWindowClosed (NSApplication sender)
 		{
@@ -40,21 +25,18 @@ namespace VillainTracker
 		
 		public override void DidFinishLaunching (NSNotification notification)
 		{
-			_villain = new VillainData
+			_villain = new Villain
 			{
-				{kName, (NSString)"Lex Luthor"},
-				{kLastKnownLocation, (NSString)"Smallville"},
-				{kLastSeenDate, NSDate.Now},
-				{kSwornEnemy, (NSString)"Superman"},
-				{kPrimaryMotivation, (NSString)"Revenge"},
-				{kPowers, new NSSet("Intellect", "Leadership")},
-				{kPowerSource, (NSString)"Superhero Action"},
-				{kEvilness, NSNumber.FromInt32(9)},
-				{kMugshot, NSImage.ImageNamed("NSUser")},
-				{kNotes, (NSString)(string.Empty)}
+				Name = "Lex Luthor",
+				LastKnownLocation = "Smallville",
+				SwornEnemy = "Superman",
+				PrimaryMotivation = "Revenge",
+				Powers = new [] {"Intellect", "Leadership"},
+				PowerSource = "Superhero Action",
+				Evilness = 9
 			};
 			
-			_villains = new List<VillainData>(new[] {_villain});
+			_villains = new List<Villain>(new[] {_villain});
 			
 			// initialize delegates after critical data initialized
 			villainsTableView.DataSource = new DataSource(this);
@@ -69,28 +51,29 @@ namespace VillainTracker
 		
 		private void UpdateDetailViews()
 		{
-			nameView.StringValue = (string)(NSString)_villain[kName];
-			lastKnownLocationView.StringValue = (string)(NSString)_villain[kLastKnownLocation];
-			lastSeenDateView.DateValue = (NSDate)_villain[kLastSeenDate];
-			evilnessView.IntValue = ((NSNumber)_villain[kEvilness]).Int32Value;
-			powerSourceView.Title = _villain.GetString(kPowerSource);
-			mugshotView.Image = (NSImage)_villain[kMugshot];
-			notesView.Value = _villain.GetString(kNotes);
-			
-			if(swornEnemyView.IndexOf(_villain[kSwornEnemy]) == int.MaxValue)
+			nameView.StringValue = _villain.Name;
+			lastKnownLocationView.StringValue = _villain.LastKnownLocation;
+			lastSeenDateView.DateValue = (NSDate)_villain.LastSeenDate;
+			evilnessView.IntValue = _villain.Evilness;
+			powerSourceView.Title = _villain.PowerSource;
+			mugshotView.Image = _villain.Mugshot;
+			notesView.Value = _villain.Notes;
+
+			var villainSwornEnemy = (NSString)_villain.SwornEnemy;
+			if(swornEnemyView.IndexOf(villainSwornEnemy) == int.MaxValue)
 			{
-				swornEnemyView.Add(_villain[kSwornEnemy]);
+				swornEnemyView.Add(villainSwornEnemy);
 			}
-			swornEnemyView.Select(_villain[kSwornEnemy]);
+			swornEnemyView.Select(villainSwornEnemy);
 			
-			var cellTag = Array.IndexOf(__motivations, _villain.GetString(kPrimaryMotivation));
+			var cellTag = Array.IndexOf(__motivations, _villain.PrimaryMotivation);
 			primaryMotivationView.SelectCellWithTag(cellTag >= 0 ? cellTag : 0);
 			
 			powersView.DeselectAllCells();
-			var powers = (NSSet)_villain[kPowers];
+			var powers = _villain.Powers;
 
 			foreach(var tag in __powers
-				.Where(p => powers.Contains((NSString)p))
+				.Where(p => powers.Contains(p))
 				.Select(p => Array.IndexOf(__powers, p)))
 			{
 				powersView.CellWithTag(tag).State = NSCellStateValue.On;
@@ -101,31 +84,31 @@ namespace VillainTracker
 		
 		partial void takeName (MonoMac.Foundation.NSObject sender)
 		{
-			_villain[kName] = (NSString)(((NSTextField)sender).StringValue);
+			_villain.Name = ((NSTextField)sender).StringValue;
 			villainsTableView.ReloadData();
 			
-			Console.WriteLine(string.Format("current villain properties: {0}", _villain[kName].ToString()));
+			Console.WriteLine(string.Format("current villain properties: {0}", _villain.Name));
 		}
 		
 		partial void takeEvilness (NSObject sender)
 		{
-			_villain[kEvilness] = NSNumber.FromInt32(((NSLevelIndicator)sender).IntValue);
+			_villain.Evilness = ((NSLevelIndicator)sender).IntValue;
 		}
 		
 		partial void takeLastKnownLocation (NSObject sender)
 		{
-			_villain[kLastKnownLocation] = (NSString)(((NSTextField)sender).StringValue);
+			_villain.LastKnownLocation = ((NSTextField)sender).StringValue;
 		}
 		
 		partial void takeLastSeenDate (NSObject sender)
 		{
-			_villain[kLastSeenDate] = ((NSDatePicker)sender).DateValue;
+			_villain.LastSeenDate = (DateTime)((NSDatePicker)sender).DateValue;
 			villainsTableView.ReloadData();
 		}
 		
 		partial void takeMugshot (NSObject sender)
 		{
-			_villain[kMugshot] = ((NSImageView)sender).Image;
+			_villain.Mugshot = ((NSImageView)sender).Image;
 			villainsTableView.ReloadData();
 		}
 		
@@ -135,41 +118,29 @@ namespace VillainTracker
 				.Where(cell => cell.State == NSCellStateValue.On)
 				.Select(cell => cell.Title);
 			
-			_villain[kPowers] = new NSSet(selectedPowers.ToArray());
+			_villain.Powers = selectedPowers.ToList();
 		}
 		
 		partial void takePowerSource (NSObject sender)
 		{
-			_villain[kPowerSource] = (NSString)(((NSPopUpButton)sender).Title);
+			_villain.PowerSource = ((NSPopUpButton)sender).Title;
 		}
 		
 		partial void takePrimaryMotivation (NSObject sender)
 		{
-			_villain[kPrimaryMotivation] = (NSString)(((NSMatrix)sender).SelectedCell.Title);
+			_villain.PrimaryMotivation = ((NSMatrix)sender).SelectedCell.Title;
 		}
 		
 		partial void takeSwornEnemy (NSObject sender)
 		{
-			_villain[kSwornEnemy] = (NSString)(((NSTextField)sender).StringValue);
+			_villain.SwornEnemy = ((NSTextField)sender).StringValue;
 		}
 		
 		partial void newVillain (NSObject sender)
 		{
 			window.EndEditingFor(nil);
 		
-			_villains.Add(new VillainData
-			{
-				{kName, emptyStr},
-				{kLastKnownLocation, emptyStr},
-				{kLastSeenDate, NSDate.Now},
-				{kSwornEnemy, emptyStr},
-				{kPrimaryMotivation, emptyStr},
-				{kPowers, new NSSet()},
-				{kPowerSource, emptyStr},
-				{kEvilness, (NSNumber)0},
-				{kMugshot, NSImage.ImageNamed("NSUser")},
-				{kNotes, emptyStr}
-			});
+			_villains.Add(new Villain());
 			
 			villainsTableView.ReloadData();
 			villainsTableView.SelectRows(new NSIndexSet(_villains.Count - 1), false);
@@ -196,13 +167,4 @@ namespace VillainTracker
 		
 		#endregion
 	}
-
-	internal static class NSDictionaryExtensions
-	{
-		public static string GetString(this VillainData dict, string key)
-		{
-			return (string)(NSString)dict[key];
-		}
-	}
-
 }
-- 
1.7.3.2

