Index: AppKit/Enums.cs
===================================================================
--- AppKit/Enums.cs	(revision 156024)
+++ AppKit/Enums.cs	(working copy)
@@ -1081,4 +1081,51 @@
 		SolidVerticalLine   = 1 << 0,
 		SolidHorizontalLine = 1 << 1 
 	}
+	
+	public enum NSSplitViewDividerStyle {
+		Thick = 1,
+		Thin = 2,
+		PaneSplitter = 3
+	}
+	
+	public enum NSImageScaling {
+		ProportionallyDown = 0,
+		AxesIndependently,
+		None,
+		ProportionallyUpOrDown
+	}
+	
+	public enum NSSegmentStyle {
+		Automatic = 0,
+		Rounded = 1,
+		TexturedRounded = 2,
+		RoundRect = 3,
+		TexturedSquare = 4,
+		Capsule = 5,
+		SmallSquare = 6
+	}
+	
+	public enum NSSegmentSwitchTracking {
+		SelectOne = 0,
+		SelectAny = 1,
+		Momentary = 2
+	}
+	
+	public enum NSTickMarkPosition {
+		Below,
+		Above,
+		Left,
+		Right
+	}
+	
+	public enum NSSliderType {
+		Linear   = 0,
+		Circular = 1
+	}
+	
+	public enum NSTokenStyle {
+		Default,
+		PlainText,
+		Rounded
+	}
 }
Index: appkit.cs
===================================================================
--- appkit.cs	(revision 156027)
+++ appkit.cs	(working copy)
@@ -9165,4 +9165,551 @@
 		[Export ("windowDidEndLiveResize:"), EventArgs ("NSNotification")]
 		void DidEndLiveResize (NSNotification  notification);
 	}
+	
+	[BaseType (typeof (NSView))]
+	interface NSSplitView {
+		[Export ("drawDividerInRect:")]
+		void DrawDivider (RectangleF rect);
+
+		[Export ("dividerColor")]
+		NSColor DividerColor { get; }
+
+		[Export ("dividerThickness")]
+		float DividerThickness { get; }
+
+		[Export ("adjustSubviews")]
+		void AdjustSubviews ();
+
+		[Export ("isSubviewCollapsed:")]
+		bool IsSubviewCollapsed (NSView subview);
+
+		[Export ("minPossiblePositionOfDividerAtIndex:")]
+		float MinPositionOfDivider (int dividerIndex);
+
+		[Export ("maxPossiblePositionOfDividerAtIndex:")]
+		float MaxPositionOfDivider (int dividerIndex);
+
+		[Export ("setPosition:ofDividerAtIndex:")]
+		void SetPositionofDivider (float position, int dividerIndex);
+
+		//Detected properties
+		[Export ("vertical")]
+		bool IsVertical { [Bind ("isVertical")]get; set; }
+
+		[Export ("dividerStyle")]
+		NSSplitViewDividerStyle DividerStyle { get; set; }
+
+		[Export ("autosaveName")]
+		string AutosaveName { get; set; }
+		
+		[Export ("delegate"), NullAllowed]
+		NSObject WeakDelegate { get; set; }
+
+		[Wrap ("WeakDelegate")]
+		NSSplitViewDelegate Delegate { get; set; }
+
+	}
+
+	[BaseType (typeof (NSObject))]
+	[Model]
+	interface NSSplitViewDelegate {
+		[Export ("splitView:canCollapseSubview:") ] [DefaultValue (true)]
+		bool CanCollapse (NSSplitView splitView, NSView subview);
+
+		[Export ("splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:")] [DefaultValue (true)]
+		bool SDhouldCollapseForDoubleClick (NSSplitView splitView, NSView subview, int dividerIndex);
+
+		[Export ("splitView:constrainMinCoordinate:ofSubviewAt:")]
+		float SetMinCoordinateofSubview (NSSplitView splitView, float proposedMinimumPosition, int dividerIndex);
+
+		[Export ("splitView:constrainMaxCoordinate:ofSubviewAt:")]
+		float SetMaxCoordinateofSubview (NSSplitView splitView, float proposedMaximumPosition, int dividerIndex);
+
+		[Export ("splitView:constrainSplitPosition:ofSubviewAt:")]
+		float SplitViewconstrainSplitPositionofSubviewAt (NSSplitView splitView, float proposedPosition, int dividerIndex);
+
+		[Export ("splitView:resizeSubviewsWithOldSize:")]
+		void Resize (NSSplitView splitView, SizeF oldSize);
+
+		[Export ("splitView:shouldAdjustSizeOfSubview:")][DefaultValue (true)]
+		bool ShouldAdjustSize (NSSplitView splitView, NSView view);
+
+		[Export ("splitView:shouldHideDividerAtIndex:")] [DefaultValue (false)]
+		bool ShouldHideDivider (NSSplitView splitView, int dividerIndex);
+
+		[Export ("splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:")]
+		RectangleF GetEffectiveRect (NSSplitView splitView, RectangleF proposedEffectiveRect, RectangleF drawnRect, int dividerIndex);
+
+		[Export ("splitView:additionalEffectiveRectOfDividerAtIndex:")]
+		RectangleF GetAdditionalEffectiveRect (NSSplitView splitView, int dividerIndex);
+
+		[Export ("splitViewWillResizeSubviews:")]
+		void SplitViewWillResizeSubviews (NSNotification notification);
+
+		[Export ("splitViewDidResizeSubviews:")]
+		void DidResizeSubviews (NSNotification notification);
+
+	}
+	
+
+	[BaseType (typeof (NSButton))]
+	interface NSPopUpButton {
+		[Export ("initWithFrame:pullsDown:")]
+		IntPtr Constructor (RectangleF buttonFrame, bool pullsDown);
+
+		[Export ("addItemWithTitle:")]
+		void AddItemWithTitle (string title);
+
+		[Export ("addItemsWithTitles:")]
+		void AddItemsWithTitles (NSArray itemTitles);
+
+		[Export ("insertItemWithTitle:atIndex:")]
+		void InsertItemWithTitle (string title, int index);
+
+		[Export ("removeItemWithTitle:")]
+		void RemoveItemWithTitle (string title);
+
+		[Export ("removeItemAtIndex:")]
+		void RemoveItem (int index);
+
+		[Export ("removeAllItems")]
+		void RemoveAllItems ();
+
+		[Export ("itemArray")]
+		NSMenuItem [] Items ();
+
+		[Export ("numberOfItems")]
+		int NumberOfItems ();
+
+		[Export ("indexOfItem:")]
+		int IndexOfItem (NSMenuItem item);
+
+		[Export ("indexOfItemWithTitle:")]
+		int IndexOfItem (string title);
+
+		[Export ("indexOfItemWithTag:")]
+		int IndexOfItem (int tag);
+
+		[Export ("indexOfItemWithRepresentedObject:")]
+		int IndexOfItem (NSObject obj);
+
+		[Export ("indexOfItemWithTarget:andAction:")]
+		int IndexOfItem (NSObject target, Selector actionSelector);
+
+		[Export ("itemAtIndex:")]
+		NSMenuItem ItemAtIndex (int index);
+
+		[Export ("itemWithTitle:")]
+		NSMenuItem ItemWithTitle (string title);
+
+		[Export ("lastItem")]
+		NSMenuItem LastItem { get; }
+
+		[Export ("selectItem:")]
+		void SelectItem (NSMenuItem item);
+
+		[Export ("selectItemAtIndex:")]
+		void SelectItem (int index);
+
+		[Export ("selectItemWithTitle:")]
+		void SelectItem (string title);
+
+		[Export ("selectItemWithTag:")]
+		bool SelectItemWithTag (int tag);
+
+		[Export ("setTitle:")]
+		void SetTitle (string aString);
+
+		[Export ("selectedItem")]
+		NSMenuItem SelectedItem ();
+
+		[Export ("indexOfSelectedItem")]
+		int IndexOfSelectedItem ();
+
+		[Export ("synchronizeTitleAndSelectedItem")]
+		void SynchronizeTitleAndSelectedItem ();
+
+		[Export ("itemTitleAtIndex:")]
+		string ItemTitle (int index);
+
+		[Export ("itemTitles")]
+		string [] ItemTitles ();
+
+		[Export ("titleOfSelectedItem")]
+		string TitleOfSelectedItem ();
+
+		//Detected properties
+		[Export ("menu")]
+		NSMenu Menu { get; set; }
+
+		[Export ("pullsDown")]
+		bool PullsDown { get; set; }
+
+		[Export ("autoenablesItems")]
+		bool AutoenablesItems { get; set; }
+
+		[Export ("preferredEdge")]
+		NSRectEdge PreferredEdge { get; set; }
+
+	}
+	
+	[BaseType (typeof (NSControl))]
+	interface NSSegmentedControl {
+		[Export ("selectSegmentWithTag:")]
+		bool SelectSegment (int tag);
+
+		[Export ("setWidth:forSegment:")]
+		void SetWidth (float width, int segment);
+
+		[Export ("widthForSegment:")]
+		float GetWidth (int segment);
+
+		[Export ("setImage:forSegment:")]
+		void SetImage (NSImage image, int segment);
+
+		[Export ("imageForSegment:")]
+		NSImage GetImage (int segment);
+
+		[Export ("setImageScaling:forSegment:")]
+		void SetImageScaling (NSImageScaling scaling, int segment);
+
+		[Export ("imageScalingForSegment:")]
+		NSImageScaling GetImageScaling (int segment);
+
+		[Export ("setLabel:forSegment:")]
+		void SetLabel (string label, int segment);
+
+		[Export ("labelForSegment:")]
+		string GetLabel (int segment);
+
+		[Export ("setMenu:forSegment:")]
+		void SetMenu (NSMenu menu, int segment);
+
+		[Export ("menuForSegment:")]
+		NSMenu GetMenu (int segment);
+
+		[Export ("setSelected:forSegment:")]
+		void SetSelected (bool selected, int segment);
+
+		[Export ("isSelectedForSegment:")]
+		bool IsSelectedForSegment (int segment);
+
+		[Export ("setEnabled:forSegment:")]
+		void SetEnabled (bool enabled, int segment);
+
+		[Export ("isEnabledForSegment:")]
+		bool IsEnabled (int segment);
+
+		//Detected properties
+		[Export ("segmentCount")]
+		int SegmentCount { get; set; }
+
+		[Export ("selectedSegment")]
+		int SelectedSegment { get; set; }
+
+		[Export ("segmentStyle")]
+		NSSegmentStyle SegmentStyle { get; set; }
+
+	}
+	
+	[BaseType (typeof (NSActionCell))]
+	interface NSSegmentedCell {
+		[Export ("selectSegmentWithTag:")]
+		bool SelectSegment (int tag);
+
+		[Export ("makeNextSegmentKey")]
+		void InsertSegmentAfterSelection ();
+
+		[Export ("makePreviousSegmentKey")]
+		void InsertSegmentBeforeSelection ();
+
+		[Export ("setWidth:forSegment:")]
+		void SetWidth (float width, int segment);
+
+		[Export ("widthForSegment:")]
+		float GetWidth (int segment);
+
+		[Export ("setImage:forSegment:")]
+		void SetImage (NSImage image, int segment);
+
+		[Export ("imageForSegment:")]
+		NSImage GetImageForSegment (int segment);
+
+		[Export ("setImageScaling:forSegment:")]
+		void SetImageScaling (NSImageScaling scaling, int segment);
+
+		[Export ("imageScalingForSegment:")]
+		NSImageScaling GetImageScaling (int segment);
+
+		[Export ("setLabel:forSegment:")]
+		void SetLabel (string label, int segment);
+
+		[Export ("labelForSegment:")]
+		string GetLabel (int segment);
+
+		[Export ("setSelected:forSegment:")]
+		void SetSelected (bool selected, int segment);
+
+		[Export ("isSelectedForSegment:")]
+		bool IsSelected (int segment);
+
+		[Export ("setEnabled:forSegment:")]
+		void SetEnabled (bool enabled, int segment);
+
+		[Export ("isEnabledForSegment:")]
+		bool IsEnabled (int segment);
+
+		[Export ("setMenu:forSegment:")]
+		void SetMenu (NSMenu menu, int segment);
+
+		[Export ("menuForSegment:")]
+		NSMenu GetMenu (int segment);
+
+		[Export ("setToolTip:forSegment:")]
+		void SetToolTip (string toolTip, int segment);
+
+		[Export ("toolTipForSegment:")]
+		string GetToolTip (int segment);
+
+		[Export ("setTag:forSegment:")]
+		void SetTag (int tag, int segment);
+
+		[Export ("tagForSegment:")]
+		int GetTag (int segment);
+
+		[Export ("drawSegment:inFrame:withView:")]
+		void DrawSegment (int segment, RectangleF frame, NSView controlView);
+
+		//Detected properties
+		[Export ("segmentCount")]
+		int SegmentCount { get; set; }
+
+		[Export ("selectedSegment")]
+		int SelectedSegment { get; set; }
+
+		[Export ("trackingMode")]
+		NSSegmentSwitchTracking TrackingMode { get; set; }
+
+		[Export ("segmentStyle")]
+		NSSegmentStyle SegmentStyle { get; set; }
+
+	}
+	
+	
+	[BaseType (typeof (NSControl))]
+	interface NSSlider {
+		[Export ("setMinValue:")]
+		void SetMinValue (double aDouble);
+
+		[Export ("isVertical")]
+		int IsVertical { get; }
+
+		[Export ("acceptsFirstMouse:")]
+		bool AcceptsFirstMouse (NSEvent theEvent);
+
+		//Detected properties
+		[Export ("maxValue")]
+		double MaxValue { get; set; }
+
+		[Export ("altIncrementValue")]
+		double AltIncrementValue { get; set; }
+
+		[Export ("titleCell")]
+		NSObject TitleCell { get; set; }
+
+		[Export ("titleColor")]
+		NSColor TitleColor { get; set; }
+
+		[Export ("titleFont")]
+		NSFont TitleFont { get; set; }
+
+		[Export ("title")]
+		string Title { get; set; }
+
+		[Export ("knobThickness")]
+		float KnobThickness { get; set; }
+
+		[Export ("image")]
+		NSImage Image { get; set; }
+	
+		[Export ("tickMarkValueAtIndex:")]
+		double TickMarkValue (int index);
+
+		[Export ("rectOfTickMarkAtIndex:")]
+		RectangleF RectOfTick (int index);
+
+		[Export ("indexOfTickMarkAtPoint:")]
+		int IndexOfTickMark (PointF point);
+
+		[Export ("closestTickMarkValueToValue:")]
+		double ClosestTickMarkValue (double value);
+
+		//Detected properties
+		[Export ("numberOfTickMarks")]
+		int NumberOfTickMarks { get; set; }
+
+		[Export ("tickMarkPosition")]
+		NSTickMarkPosition TickMarkPosition { get; set; }
+
+		[Export ("allowsTickMarkValuesOnly")]
+		bool AllowsTickMarkValuesOnly { get; set; }
+
+	}
+	
+	[BaseType (typeof (NSActionCell))]
+	interface NSSliderCell {
+		[Export ("prefersTrackingUntilMouseUp")]
+		bool PrefersTrackingUntilMouseUp ();
+
+		[Export ("isVertical")]
+		int IsVertical { get; }
+
+		[Export ("knobRectFlipped:")]
+		RectangleF KnobRectFlipped (bool flipped);
+
+		[Export ("drawKnob")]
+		void DrawKnob (RectangleF knobRect);
+
+		[Export ("drawKnob")]
+		void DrawKnob ();
+
+		[Export ("drawBarInside:flipped:")]
+		void DrawBar (RectangleF aRect, bool flipped);
+
+		[Export ("trackRect")]
+		RectangleF TrackRect{ get; }
+
+		//Detected properties
+		[Export ("minValue")]
+		double MinValue { get; set; }
+
+		[Export ("maxValue")]
+		double MaxValue { get; set; }
+
+		[Export ("altIncrementValue")]
+		double AltIncrementValue { get; set; }
+
+		[Export ("titleColor")]
+		NSColor TitleColor { get; set; }
+
+		[Export ("titleFont")]
+		NSFont TitleFont { get; set; }
+
+		[Export ("title")]
+		string Title { get; set; }
+
+		[Export ("titleCell")]
+		NSObject TitleCell { get; set; }
+
+		[Export ("knobThickness")]
+		float KnobThickness { get; set; }
+
+		[Export ("sliderType")]
+		NSSliderType SliderType { get; set; }
+	
+		[Export ("tickMarkValueAtIndex:")]
+		double TickMarkValue (int index);
+
+		[Export ("rectOfTickMarkAtIndex:")]
+		RectangleF RectOfTickMark (int index);
+
+		[Export ("indexOfTickMarkAtPoint:")]
+		int IndexOfTickMark (PointF point);
+
+		[Export ("closestTickMarkValueToValue:")]
+		double ClosestTickMarkValue (double value);
+
+		//Detected properties
+		[Export ("numberOfTickMarks")]
+		int NumberOfTickMarks { get; set; }
+
+		[Export ("tickMarkPosition")]
+		NSTickMarkPosition TickMarkPosition { get; set; }
+
+		[Export ("allowsTickMarkValuesOnly")]
+		bool AllowsTickMarkValuesOnly { get; set; }
+
+	}
+	
+	
+	[BaseType (typeof (NSTextField))]
+	interface NSTokenField {
+		[Export ("setTokenStyle:style")]
+		void SetTokenStylestyle (NSTokenStyle style );
+
+		[Export ("tokenStyle")]
+		NSTokenStyle TokenStyle ();
+
+		[Export ("setCompletionDelay:delay")]
+		void SetCompletionDelaydelay (double delay );
+
+		[Export ("completionDelay")]
+		double CompletionDelay { get; }
+
+		[Static]
+		[Export ("defaultCompletionDelay")]
+		double DefaultCompletionDelay { get; }
+
+		[Static]
+		[Export ("defaultTokenizingCharacterSet")]
+		NSCharacterSet DefaultCharacterSet { get; }
+
+		//Detected properties
+		[Export ("delegate", ArgumentSemantic.Assign), NullAllowed]
+		NSObject WeakDelegate { get; set; }
+
+		[Wrap ("WeakDelegate")]
+		NSTokenFieldDelegate Delegate { get; set; }
+
+		[Export ("tokenizingCharacterSet")]
+		NSCharacterSet CharacterSet { get; set; }
+
+	}
+
+	[BaseType (typeof (NSObject))]
+	[Model]
+	interface NSTokenFieldDelegate {
+		[Abstract]
+		[Export ("tokenField:completionsForSubstring:indexOfToken:indexOfSelectedItem:")]
+		string [] GetCompletionStrings (NSTokenField tokenField, string substring, int tokenIndex, int selectedIndex);
+
+		[Abstract]
+		[Export ("tokenField:shouldAddObjects:atIndex:")]
+		NSTokenField [] ShouldAddObjects (NSTokenField tokenField, NSTokenField [] tokens, uint index);
+
+		[Abstract]
+		[Export ("tokenField:displayStringForRepresentedObject:")]
+		string GetDisplayString (NSTokenField tokenField, NSObject representedObject);
+
+		[Abstract]
+		[Export ("tokenField:editingStringForRepresentedObject:")]
+		string GetEditingString (NSTokenField tokenField, NSObject representedObject);
+
+		[Abstract]
+		[Export ("tokenField:representedObjectForEditingString:")]
+		NSObject GetRepresentedObject (NSTokenField tokenField, string editingString);
+
+		[Abstract]
+		[Export ("tokenField:writeRepresentedObjects:toPasteboard:")]
+		bool isWriteRepresented (NSTokenField tokenField, NSArray objects, NSPasteboard pboard);
+
+		[Abstract]
+		[Export ("tokenField:readFromPasteboard:")]
+		NSArray Read (NSTokenField tokenField, NSPasteboard pboard);
+
+		[Abstract]
+		[Export ("tokenField:menuForRepresentedObject:")]
+		NSMenu GetMenu (NSTokenField tokenField, NSObject representedObject);
+
+		[Abstract]
+		[Export ("tokenField:hasMenuForRepresentedObject:")]
+		bool HasMenu (NSTokenField tokenField, NSObject representedObject);
+
+		[Abstract]
+		[Export ("tokenField:styleForRepresentedObject:")]
+		NSTokenStyle GetStyle (NSTokenField tokenField, NSObject representedObject);
+
+	}
+
+
 }