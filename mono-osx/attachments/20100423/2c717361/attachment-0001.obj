Index: src/AppKit/Enums.cs
===================================================================
--- src/AppKit/Enums.cs	(revision 156024)
+++ src/AppKit/Enums.cs	(working copy)
@@ -1081,4 +1081,34 @@
 		SolidVerticalLine   = 1 << 0,
 		SolidHorizontalLine = 1 << 1 
 	}
-}
+	public enum NSGradientDrawingOptions{
+		BeforeStartingLocation =   (1 << 0),
+		AfterEndingLocation =    (1 << 1)
+	}
+	
+	public enum NSImageAlignment {
+		Center = 0,
+		Top,
+		TopLeft,
+		TopRight,
+		Left,
+		Bottom,
+		BottomLeft,
+		BottomRight,
+		Right
+	}
+	
+	public enum NSImageFrameStyle {
+		None = 0,
+		Photo,
+		GrayBezel,
+		Groove,
+		Button
+	}
+	
+	public enum NSSpeechBoundary {
+		Immediate =  0,
+		hWord,
+		Sentence
+	}
+} 
\ No newline at end of file
Index: src/appkit.cs
===================================================================
--- src/appkit.cs	(revision 156027)
+++ src/appkit.cs	(working copy)
@@ -9165,4 +9165,346 @@
 		[Export ("windowDidEndLiveResize:"), EventArgs ("NSNotification")]
 		void DidEndLiveResize (NSNotification  notification);
 	}
+	
+	[BaseType (typeof (NSObject))]
+	interface NSGradient {
+		[Export ("initWithStartingColor:endingColor:")]
+		IntPtr Constructor  (NSColor startingColor, NSColor endingColor);
+
+		[Export ("initWithColors:")]
+		IntPtr Constructor  (NSColor[] colorArray);
+
+		[Export ("initWithColorsAndLocations:")]
+		IntPtr Constructor (NSColor firstColor );
+
+		[Export ("initWithColors:atLocations:colorSpace:")]
+		IntPtr Constructor (NSColor[] colorArray, float locations, NSColorSpace colorSpace);
+
+		[Export ("drawFromPoint:toPoint:options:")]
+		void DrawFromPoint (PointF startingPoint, PointF endingPoint, NSGradientDrawingOptions options);
+
+		[Export ("drawInRect:angle:")]
+		void DrawInRect (RectangleF rect, float angle);
+
+		[Export ("drawInBezierPath:angle:")]
+		void DrawInBezierPath (NSBezierPath path, float angle);
+
+		[Export ("drawFromCenter:radius:toCenter:radius:options:")]
+		void DrawFromCenterRadius (PointF startCenter, float startRadius, PointF endCenter, float endRadius, NSGradientDrawingOptions options);
+
+		[Export ("drawInRect:relativeCenterPosition:")]
+		void DrawInRect (RectangleF rect, PointF relativeCenterPosition);
+
+		[Export ("drawInBezierPath:relativeCenterPosition:")]
+		void DrawInBezierPath (NSBezierPath path, PointF relativeCenterPosition);
+
+		[Export ("colorSpace")]
+		NSColorSpace ColorSpace { get; }
+
+		[Export ("numberOfColorStops")]
+		int NumberOfColorStops { get; }
+
+		[Export ("getColor:location:atIndex:")]
+		void GetColor (NSColor color, float location, int index);
+
+		[Export ("interpolatedColorAtLocation:")]
+		NSColor GetInterpolatedColor(float location);
+
+	}
+	
+	[BaseType (typeof (NSCell))]
+	interface NSImageCell {
+		//Detected properties
+		[Export ("imageAlignment")]
+		NSImageAlignment ImageAlignment { get; set; }
+
+		[Export ("imageScaling")]
+		NSImageScale ImageScaling { get; set; }
+
+		[Export ("imageFrameStyle")]
+		NSImageFrameStyle ImageFrameStyle { get; set; }
+
+	}
+	
+	[BaseType (typeof (NSControl))]
+	interface NSImageView {
+		//Detected properties
+		[Export ("image")]
+		NSImage Image { get; set; }
+
+		[Export ("imageAlignment")]
+		NSImageAlignment ImageAlignment { get; set; }
+
+		[Export ("imageScaling")]
+		NSImageScale ImageScaling { get; set; }
+
+		[Export ("imageFrameStyle")]
+		NSImageFrameStyle ImageFrameStyle { get; set; }
+
+		[Export ("editable")]
+		bool Editable { [Bind ("isEditable")]get; set; }
+
+		[Export ("animates")]
+		bool Animates { get; set; }
+
+		[Export ("allowsCutCopyPaste")]
+		bool AllowsCutCopyPaste { get; set; }
+
+	}
+	
+	[BaseType (typeof (NSObject))]
+	interface NSNib {
+		[Export ("initWithContentsOfURL:")]
+		IntPtr Constructor (NSUrl nibFileURL);
+
+		[Export ("initWithNibNamed:bundle:")]
+		IntPtr Constructor (string nibName, NSBundle bundle);
+
+		[Export ("instantiateNibWithExternalNameTable:")]
+		bool InstantiateNib (NSDictionary externalNameTable);
+
+		[Export ("instantiateNibWithOwner:topLevelObjects:")]
+		bool InstantiateNib (NSObject owner, NSArray topLevelObjects);
+
+	}	
+	
+	[BaseType (typeof (NSObject))]
+	interface NSSpeechRecognizer {
+
+		[Export ("startListening")]
+		void StartListening ();
+
+		[Export ("stopListening")]
+		void StopListening ();
+
+		//Detected properties
+		[Export ("delegate"), NullAllowed]
+		NSObject WeakDelegate { get; set; }
+
+		[Wrap ("WeakDelegate")]
+		NSSpeechRecognizerDelegate Delegate { get; set; }
+
+		[Export ("commands")]
+		NSObject [] Commands { get; set; }
+
+		[Export ("displayedCommandsTitle")]
+		string DisplayedCommandsTitle { get; set; }
+
+		[Export ("listensInForegroundOnly")]
+		bool ListensInForegroundOnly { get; set; }
+
+		[Export ("blocksOtherRecognizers")]
+		bool BlocksOtherRecognizers { get; set; }
+
+	}
+
+	[BaseType (typeof (NSObject))]
+	[Model]
+	interface NSSpeechRecognizerDelegate {
+		[Export ("speechRecognizer:didRecognizeCommand:")]
+		void DidRecognizeCommand (NSSpeechRecognizer sender, NSObject command);
+
+	}
+
+	[BaseType (typeof (NSObject))]
+	interface NSSpeechSynthesizer {
+		[Export ("initWithVoice:")]
+		IntPtr Constructor (string voice);
+
+		[Export ("startSpeakingString:")]
+		bool StartSpeakingString (string theString);
+
+		[Export ("startSpeakingString:toURL:")]
+		bool StartSpeakingStringtoURL (string theString, NSUrl url);
+
+		[Export ("isSpeaking")]
+		bool IsSpeaking { get; }
+
+		[Export ("stopSpeaking")]
+		void StopSpeaking ();
+
+		[Export ("stopSpeakingAtBoundary:")]
+		void StopSpeaking (NSSpeechBoundary boundary);
+
+		[Export ("pauseSpeakingAtBoundary:")]
+		void PauseSpeaking (NSSpeechBoundary boundary);
+
+		[Export ("continueSpeaking")]
+		void ContinueSpeaking ();
+
+		[Export ("addSpeechDictionary:")]
+		void AddSpeechDictionary (NSDictionary speechDictionary);
+
+		[Export ("phonemesFromText:")]
+		string PhonemesFromText (string text);
+
+		[Export ("objectForProperty:error:")]
+		NSObject ObjectForProperty (string property, NSError outError);
+
+		[Export ("setObject:forProperty:error:")]
+		bool SetObjectforProperty (NSObject theObject, string property, NSError outError);
+
+		[Export ("isAnyApplicationSpeaking")]
+		bool IsAnyApplicationSpeaking { get; }
+
+		[Static]
+		[Export ("defaultVoice")]
+		string DefaultVoice { get; }
+
+		[Static]
+		[Export ("availableVoices")]
+		NSArray AvailableVoices { get; }
+
+		[Static]
+		[Export ("attributesForVoice:")]
+		NSDictionary AttributesForVoice (string voice);
+
+		//Detected properties
+		[Export ("delegate"), NullAllowed]
+		NSObject WeakDelegate { get; set; }
+
+		[Wrap ("WeakDelegate")]
+		NSSpeechSynthesizerDelegate Delegate { get; set; }
+
+		[Export ("voice")]
+		string Voice { get; set; }
+
+		[Export ("rate")]
+		float Rate { get; set; }
+
+		[Export ("volume")]
+		float Volume { get; set; }
+
+		[Export ("usesFeedbackWindow")]
+		bool UsesFeedbackWindow { get; set; }
+
+	}
+
+	[BaseType (typeof (NSObject))]
+	[Model]
+	interface NSSpeechSynthesizerDelegate {
+		[Export ("speechSynthesizer:didFinishSpeaking:")]
+		void DidFinishSpeaking (NSSpeechSynthesizer sender, bool finishedSpeaking);
+
+		[Export ("speechSynthesizer:willSpeakWord:ofString:")]
+		void WillSpeakWordofString (NSSpeechSynthesizer sender, NSRange characterRange, string theString);
+
+		[Export ("speechSynthesizer:willSpeakPhoneme:")]
+		void WillSpeakPhoneme (NSSpeechSynthesizer sender, short phonemeOpcode);
+
+		[Export ("speechSynthesizer:didEncounterErrorAtIndex:ofString:message:")]
+		void DidEncounterError (NSSpeechSynthesizer sender, uint characterIndex, string theString, string message);
+
+		[Export ("speechSynthesizer:didEncounterSyncMessage:")]
+		void DidEncounterSyncMessage (NSSpeechSynthesizer sender, string message);
+
+	}
+	
+	[BaseType (typeof (NSObject))]
+	interface NSSpellChecker {
+		[Static]
+		[Export ("sharedSpellChecker")]
+		NSSpellChecker SharedSpellChecker ();
+
+		[Static]
+		[Export ("sharedSpellCheckerExists")]
+		bool SharedSpellCheckerExists ();
+
+		[Static]
+		[Export ("uniqueSpellDocumentTag")]
+		int UniqueSpellDocumentTag ();
+
+		[Export ("checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:")]
+		NSRange CheckSpelling (string stringToCheck, int startingOffset, string language, bool wrapFlag, int tag, int wordCount);
+
+		[Export ("checkSpellingOfString:startingAt:")]
+		NSRange CheckSpelling (string stringToCheck, int startingOffset);
+
+		[Export ("countWordsInString:language:")]
+		int CountWords (string stringToCount, string language);
+
+		[Export ("checkGrammarOfString:startingAt:language:wrap:inSpellDocumentWithTag:details:")]
+		NSRange CheckGrammar (string stringToCheck, int startingOffset, string language, bool wrapFlag, int tag, NSDictionary[] details );
+
+		[Export ("checkString:range:types:options:inSpellDocumentWithTag:orthography:wordCount:")]
+		NSTextCheckingResult [] CheckString (string stringToCheck, NSRange range, NSTextCheckingTypes checkingTypes, NSDictionary options, int tag, NSOrthography orthography, int wordCount);
+
+		//FIXME:
+		//[Export ("requestCheckingOfString:range:types:options:inSpellDocumentWithTag:completionHandler:NSIntegersequenceNumber,NSArray*results,NSOrthography*orthography,NSIntegerwordCount))completionHandler")]
+		//int RequestChecking (string stringToCheck, NSRange range, NSTextCheckingTypes checkingTypes, NSDictionary options, int tag, IntPtr completionHandler );
+
+		[Export ("menuForResult:string:options:atLocation:inView:")]
+		NSMenu MenuForResults (NSTextCheckingResult result, string checkedString, NSDictionary options, PointF location, NSView view);
+
+		[Export ("userQuotesArrayForLanguage:")]
+		string [] UserQuotesArrayForLanguage (string language );
+
+		[Export ("userReplacementsDictionary")]
+		NSDictionary UserReplacementsDictionary { get; }
+
+		[Export ("updateSpellingPanelWithMisspelledWord:")]
+		void UpdateSpellingPanelWithMisspelledWord (string word);
+
+		[Export ("updateSpellingPanelWithGrammarString:detail:")]
+		void UpdateSpellingPanelWithGrammarl (string theString, NSDictionary detail);
+
+		[Export ("spellingPanel")]
+		NSPanel SpellingPanel { get; }
+
+		[Export ("substitutionsPanel")]
+		NSPanel SubstitutionsPanel { get; }
+
+		[Export ("updatePanels")]
+		void UpdatePanels ();
+
+		[Export ("ignoreWord:inSpellDocumentWithTag:")]
+		void IgnoreWord (string wordToIgnore, int tag);
+
+		[Export ("ignoredWordsInSpellDocumentWithTag:")]
+		string [] IgnoredWords (int tag);
+
+		[Export ("setIgnoredWords:inSpellDocumentWithTag:")]
+		void SetIgnoredWords (string [] words, int tag);
+
+		[Export ("guessesForWordRange:inString:language:inSpellDocumentWithTag:")]
+		string [] GuessesForWordRange (NSRange range, string theString, string language, int tag);
+
+		[Export ("completionsForPartialWordRange:inString:language:inSpellDocumentWithTag:")]
+		string [] CompletionsForPartialWordRange (NSRange range, string theString, string language, int tag );
+
+		[Export ("closeSpellDocumentWithTag:")]
+		void CloseSpellDocument (int tag);
+
+		[Export ("availableLanguages")]
+		string [] AvailableLanguages { get; }
+
+		[Export ("userPreferredLanguages")]
+		string [] UserPreferredLanguages { get; }
+
+		[Export ("setWordFieldStringValue:")]
+		void SetWordFieldStringValue (string aString);
+
+		[Export ("learnWord:")]
+		void LearnWord (string word);
+
+		[Export ("hasLearnedWord:")]
+		bool HasLearnedWord (string word );
+
+		[Export ("unlearnWord:")]
+		void UnlearnWord (string word );
+
+		//Detected properties
+		[Export ("accessoryView")]
+		NSView AccessoryView { get; set; }
+
+		[Export ("substitutionsPanelAccessoryViewController")]
+		NSViewController SubstitutionsPanelAccessoryViewController { get; set; }
+
+		[Export ("automaticallyIdentifiesLanguages")]
+		bool AutomaticallyIdentifiesLanguages { get; set; }
+
+		[Export ("language")]
+		string Language { get; set; }
+
+	}
 }