Index: appkit.cs
===================================================================
--- appkit.cs	(revision 155973)
+++ appkit.cs	(working copy)
@@ -8525,4 +8525,163 @@
 		[Export ("windowDidEndLiveResize:"), EventArgs ("NSNotification")]
 		void DidEndLiveResize (NSNotification  notification);
 	}
-}
+	
+	[BaseType (typeof (NSObject))]
+	interface NSAnimationContext {
+		[Export ("beginGrouping")]
+		void BeginGrouping ();
+
+		[Static]
+		[Export ("endGrouping")]
+		void EndGrouping ();
+
+		[Static]
+		[Export ("currentContext")]
+		NSAnimationContext CurrentContext ();
+
+		//Detected properties
+		[Export ("duration")]
+		double Duration { get; set; }
+
+	}
+	
+	[BaseType (typeof (NSPanel))]
+	interface NSFontPanel {
+		[Static]
+		[Export ("sharedFontPanel")]
+		NSFontPanel SharedFontPanel { get; }
+
+		[Static]
+		[Export ("sharedFontPanelExists")]
+		bool SharedFontPanelExists { get; }
+
+		[Export ("setPanelFont:isMultiple:")]
+		void SetPanelFont (NSFont fontObj, bool flag);
+
+		[Export ("panelConvertFont:")]
+		NSFont PanelConvertFont (NSFont fontObj);
+
+		[Export ("worksWhenModal")]
+		bool WorksWhenModal { get; }
+
+		[Export ("reloadDefaultFontFamilies")]
+		void ReloadDefaultFontFamilies ();
+
+		//Detected properties
+		[Export ("accessoryView")]
+		NSView AccessoryView { get; set; }
+
+		[Export ("enabled")]
+		bool Enabled { [Bind ("isEnabled")]get; set; }
+
+	}
+	
+	[BaseType (typeof (NSImageRep))]
+	interface NSCachedImageRep {
+		[Export ("initWithIdentifier:")]
+	   	IntPtr Constructor (NSWindow win, RectangleF rect );
+		
+		[Export ("initWithSize:depth:separate:alpha:")]
+		IntPtr Constructor (SizeF size, NSWindowDepth depth, bool flag, bool alpha );
+
+		[Export ("window")]
+		NSWindow Window ();
+
+		[Export ("rect")]
+		RectangleF Rect ();
+
+	}
+	
+	[BaseType (typeof (NSImageRep))]
+	interface NSCIImageRep {
+		[Export ("imageRepWithCIImage:")]
+		NSObject ImageRep (CIImage image);
+
+		[Export ("initWithCIImage:")]
+		IntPtr Constructor (CIImage image);
+
+		[Export ("CIImage")]
+		CIImage CIImage { get; }
+
+	}
+	
+	[BaseType (typeof (NSObject))]
+	interface CIImage {
+		[Export ("drawInRect:fromRect:operation:fraction:")]
+		void Draw (RectangleF rect, RectangleF fromRect, NSCompositingOperation op, float delta);
+
+		[Export ("drawAtPoint:fromRect:operation:fraction:")]
+		void DrawAtPoint (PointF point, RectangleF fromRect, NSCompositingOperation op, float delta);
+
+	}
+	
+	[BaseType (typeof (NSImageRep))]
+	interface NSCustomImageRep {
+		[Export ("initWithDrawSelector:delegate:")]
+		IntPtr Constructor (Selector aMethod, NSObject anObject);
+
+		[Export ("drawSelector")]
+		Selector DrawSelector ();		
+		
+		[Export ("delegate", ArgumentSemantic.Assign)][NullAllowed]  
+		NSObject WeakDelegate { get; set; }  
+		
+		[Wrap ("WeakDelegate")][NullAllowed]  
+		NSObject Delegate { get; set; }  
+
+	}	
+	
+	[BaseType (typeof (NSImageRep))]
+	interface NSEPSImageRep {
+		[Static]
+		[Export ("imageRepWithData:")]
+		NSObject ImageRep (NSData epsData);
+
+		[Export ("initWithData:")]
+		IntPtr Constructor (NSData epsData);
+
+		[Export ("prepareGState")]
+		void PrepareGState ();
+
+		[Export ("EPSRepresentation")]
+		NSData EPSRepresentation ();
+
+		[Export ("boundingBox")]
+		RectangleF BoundingBox ();
+
+	}
+	
+	[BaseType (typeof (NSObject))]
+	interface NSHelpManager {
+		[Export ("sharedHelpManager")]
+		NSHelpManager SharedHelpManager ();
+
+		[Export ("setContextHelp:forObject:")]
+		void SetContext (NSAttributedString attrString, NSObject theObject);
+
+		[Export ("removeContextHelpForObject:")]
+		void RemoveContext (NSObject theObject);
+
+		[Export ("contextHelpForObject:")]
+		NSAttributedString Context (NSObject theObject);
+
+		[Export ("showContextHelpForObject:locationHint:")]
+		bool ShowContext (NSObject theObject, PointF pt);
+
+		[Export ("openHelpAnchor:inBook:")]
+		void OpenHelpAnchor (string anchor, string book);
+
+		[Export ("findString:inBook:")]
+		void FindString (string query, string book);
+
+		[Export ("registerBooksInBundle:")]
+		bool RegisterBooks (NSBundle bundle );
+
+		//Detected properties
+		[Static]
+		[Export ("contextHelpModeActive")]
+		bool ContextHelpModeActive { [Bind ("isContextHelpModeActive")]get; set; }
+
+	}
+
+}
\ No newline at end of file