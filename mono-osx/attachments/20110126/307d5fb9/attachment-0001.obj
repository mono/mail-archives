diff --git a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.addin.xml b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.addin.xml
index 570c62e..33dffb9 100644
--- a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.addin.xml
+++ b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.addin.xml
@@ -26,8 +26,32 @@
 	<Dependencies>
 		<Addin id="Core" version="2.4"/>
 		<Addin id="Ide"  version="2.4"/>
+		<!--Addin id="SourceEditor2" version="2.4"/-->
 	</Dependencies>
 	
+    <Extension path = "/MonoDevelop/Ide/Commands">
+        <Command id = "MonoDevelop.MonoMac.MonoMacCommands.MonoMacAddFrameworksHandler"
+                 _label = "Add Framework Reference"
+                 defaultHandler = "MonoDevelop.MonoMac.MonoMacAddFrameworksHandler"
+                 _description = "Add Framework reference to 'External Frameworks and Libraries'" />
+    </Extension>
+	
+	<Extension path = "/MonoDevelop/Ide/ContextMenu/ProjectPad/Add">
+		<Condition id="ItemType" value="Project">	
+			<CommandItem id = "MonoDevelop.MonoMac.MonoMacCommands.MonoMacAddFrameworksHandler"/>
+		</Condition>
+	</Extension>
+	
+	<Extension path = "/MonoDevelop/Ide/Pads/ProjectPad">
+		<NodeBuilder class = "MonoDevelop.MonoMac.ExternalFrameworksNodeBuilder"/>
+		<NodeBuilder class = "MonoDevelop.MonoMac.ExternalFrameworkFolderNodeBuilder"/>
+		<NodeBuilder class = "MonoDevelop.MonoMac.ExternalFrameworkNodeBuilder"/>
+	</Extension>
+	
+	<Extension path = "/MonoDevelop/ProjectModel/SerializableClasses">
+		<DataType class = "MonoDevelop.MonoMac.ExternalFrameworkNode" />
+	</Extension>
+	
 	<Extension path = "/MonoDevelop/Ide/FileTemplates">
 		<FileTemplate id = "MonoMacPlist"
 		            file = "templates/MonoMacPlist.xft.xml"/>
diff --git a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.csproj b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.csproj
index 09e592f..2d89e30 100644
--- a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.csproj
+++ b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.csproj
@@ -81,11 +81,21 @@
     <Compile Include="MonoMacExecutionHandler.cs" />
     <Compile Include="MonoMacProject.cs" />
     <Compile Include="MonoMacCodeBehind.cs" />
+    <Compile Include="gtk-gui\generated.cs" />
+    <Compile Include="AddFrameworks.cs" />
+    <Compile Include="gtk-gui\MonoDevelop.MonoMac.AddFrameworks.cs" />
+    <Compile Include="ExternalFrameworksNodeBuilder.cs" />
+    <Compile Include="ExternalFrameworkNodeBuilder.cs" />
+    <Compile Include="ExternalFrameworkNode.cs" />
+    <Compile Include="MonoMacAddFrameworksHandler.cs" />
   </ItemGroup>
   <ItemGroup>
     <EmbeddedResource Include="MonoDevelop.MonoMac.addin.xml">
       <LogicalName>MonoDevelop.MonoMac.addin.xml</LogicalName>
     </EmbeddedResource>
+    <EmbeddedResource Include="gtk-gui\gui.stetic">
+      <LogicalName>gui.stetic</LogicalName>
+    </EmbeddedResource>
   </ItemGroup>
   <ItemGroup>
     <Folder Include="templates\" />
diff --git a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoMacBuildExtension.cs b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoMacBuildExtension.cs
index 2923b0f..60994c3 100644
--- a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoMacBuildExtension.cs
+++ b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoMacBuildExtension.cs
@@ -30,15 +30,14 @@ using System.Linq;
 using System.Collections.Generic;
 using MonoDevelop.Core;
 using MonoDevelop.Projects;
-using MonoDevelop.Core.ProgressMonitoring;
-using System.Xml;
 using System.Text;
-using System.Diagnostics;
-using System.CodeDom.Compiler;
 using Mono.Addins;
 using MonoDevelop.MacDev;
 using Mono.Unix;
 using MonoDevelop.MacDev.Plist;
+using System.CodeDom;
+using Microsoft.CSharp;
+using System.CodeDom.Compiler;
 
 namespace MonoDevelop.MonoMac
 {
@@ -111,6 +110,93 @@ namespace MonoDevelop.MonoMac
 				using (var f = File.OpenWrite (pkgInfo))
 					f.Write (new byte [] { 0X41, 0X50, 0X50, 0X4C, 0x3f, 0x3f, 0x3f, 0x3f}, 0, 8); // "APPL???"
 			
+			// external frameworks
+			int externalFrameworksCount = proj.Items.GetAll<ExternalFrameworkNode> ().Count();
+			if (externalFrameworksCount > 0) {
+				monitor.BeginTask ("Copying frameworks to bundle", externalFrameworksCount);
+				var externalFrameworks = conf.AppDirectory.Combine ("Contents", "Frameworks");
+				
+				if (!Directory.Exists (externalFrameworks))
+					Directory.CreateDirectory (externalFrameworks);
+				
+				foreach (ExternalFrameworkNode node in proj.Items.GetAll<ExternalFrameworkNode> ()) {
+					DirectoryInfo di = new DirectoryInfo (node.FullPath);
+					monitor.Log.WriteLine (string.Format ("Copying '{0}' to bundle", di.Name));
+
+					var destFramework = externalFrameworks.Combine (di.Name);
+					if (Directory.Exists (destFramework) == true) {
+						Directory.Delete (destFramework, true);
+					}
+					Directory.CreateDirectory (destFramework);
+					
+					CopyFolder (node.FullPath, destFramework);
+					monitor.Step (1);
+				}
+				
+				FilePath generatedFilePath = proj.BaseDirectory.Combine ("MonoMacFrameworks.cs");
+				File.Delete (generatedFilePath);
+				
+				CodeCompileUnit loadFrameworksCU = new CodeCompileUnit ();
+				CodeNamespace projectNameSpace = new CodeNamespace (proj.DefaultNamespace);
+				projectNameSpace.Imports.Add (new CodeNamespaceImport ("System"));
+				projectNameSpace.Imports.Add (new CodeNamespaceImport ("System.Runtime.InteropServices"));
+				projectNameSpace.Imports.Add (new CodeNamespaceImport ("MonoMac.ObjCRuntime"));
+				
+				CodeTypeDeclaration mainClass = new CodeTypeDeclaration ("MonoMacFrameworks");
+				mainClass.Attributes = MemberAttributes.Public | MemberAttributes.Static;
+				
+				CodeMemberMethod loadFrameworkMethod = new CodeMemberMethod ();
+				loadFrameworkMethod.Name = "Initialize";
+				loadFrameworkMethod.Attributes = MemberAttributes.Public | MemberAttributes.Static;
+				loadFrameworkMethod.Comments.Add (new CodeCommentStatement ("Call this method prior to NSApplication.Init()", true));
+	
+				mainClass.Members.Add (loadFrameworkMethod);
+				projectNameSpace.Types.Add (mainClass);
+				loadFrameworksCU.Namespaces.Add (projectNameSpace);
+			
+				CodeTypeReference dlfcnClass = new CodeTypeReference ("Dlfcn");
+				CodeTypeReferenceExpression dlfcnRef = new CodeTypeReferenceExpression (dlfcnClass);
+				
+				CodeMethodReferenceExpression dlopenMethod = new CodeMethodReferenceExpression (dlfcnRef, "dlopen");
+				CodeMethodReferenceExpression dlerrorMethod = new CodeMethodReferenceExpression (dlfcnRef, "dlerror");
+			 	
+				CodeTypeReferenceExpression consoleType = new CodeTypeReferenceExpression ();
+	            consoleType.Type = new CodeTypeReference (typeof (Console));
+				
+		        CodeMethodReferenceExpression writeLineRef = new CodeMethodReferenceExpression (consoleType, "WriteLine");
+	        
+				CodeTypeReferenceExpression intPtrType = new CodeTypeReferenceExpression ();
+				intPtrType.Type = new CodeTypeReference (typeof (IntPtr));
+		
+				foreach (ExternalFrameworkNode node in proj.Items.GetAll<ExternalFrameworkNode> ()) {
+
+					DirectoryInfo di = new DirectoryInfo (node.FullPath);
+					string libName = di.Name.Replace (".framework", "");
+					
+					CodeMethodInvokeExpression writeLine = new CodeMethodInvokeExpression (
+						writeLineRef, new CodePrimitiveExpression (
+							string.Format ("Failed to open '{0}' with error: '{1}'",
+								libName, "{0}")), new CodeMethodInvokeExpression (dlerrorMethod));
+		
+					CodeConditionStatement check = new CodeConditionStatement ();
+					check.Condition = new CodeBinaryOperatorExpression (
+						new CodeMethodInvokeExpression (dlopenMethod,
+							new CodePrimitiveExpression (node.FullPath), new CodePrimitiveExpression (0)),
+					    CodeBinaryOperatorType.IdentityEquality,                                               
+		                new CodeFieldReferenceExpression (intPtrType, "Zero"));
+					check.TrueStatements.Add (writeLine);
+					
+					loadFrameworkMethod.Statements.Add (check);
+				}
+				
+				CSharpCodeProvider cscp = new CSharpCodeProvider ();
+	        
+	        	using (StreamWriter sw = new StreamWriter (generatedFilePath))
+	        		cscp.GenerateCodeFromCompileUnit (loadFrameworksCU, sw, null);
+
+				monitor.EndTask ();
+			}
+			
 			return res;
 		}
 		
@@ -184,6 +270,19 @@ namespace MonoDevelop.MonoMac
 			if (!File.Exists (conf.AppDirectory.Combine ("Contents", "PkgInfo")))
 			    return true;
 			
+			//external frameworks
+			var externalFrameworks = conf.AppDirectory.Combine ("Contents", "Frameworks");
+			if (proj.Items.GetAll<ExternalFrameworkNode> ().Count () > 0 && Directory.Exists (externalFrameworks) == false)
+			    return true;
+			
+			foreach (ExternalFrameworkNode node in proj.Items.GetAll<ExternalFrameworkNode> ()) {
+				DirectoryInfo di = new DirectoryInfo (node.FullPath);
+
+				var destFramework = externalFrameworks.Combine (di.Name);
+				if (Directory.Exists (destFramework) == false)
+					return true;
+			}
+			
 			return false;
 		}
 		
@@ -236,5 +335,30 @@ namespace MonoDevelop.MonoMac
 				if (pf.BuildAction == BuildAction.Content)
 					yield return new FilePair (pf.FilePath, pf.ProjectVirtualPath.ToAbsolute (resDir));
 		}
+		
+		static private void CopyFolder (string sourceFolder, string destFolder)
+        {
+            if (!Directory.Exists (destFolder))
+                Directory.CreateDirectory (destFolder);
+			
+            string[] files = Directory.GetFiles (sourceFolder);
+            foreach (string file in files) {
+                string name = Path.GetFileName (file);
+				if (name[0] == '.')
+					continue;
+                string dest = Path.Combine (destFolder, name);
+
+                File.Copy (file, dest);
+            }
+			
+            string[] folders = Directory.GetDirectories (sourceFolder);
+            foreach (string folder in folders) {
+                string name = Path.GetFileName (folder);
+				if (name[0] == '.')
+					continue;
+                string dest = Path.Combine (destFolder, name);
+                CopyFolder (folder, dest);
+            }
+        }
 	}
 }
diff --git a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/templates/MonoMacProject.xpt.xml b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/templates/MonoMacProject.xpt.xml
index 8cd592d..6e80202 100644
--- a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/templates/MonoMacProject.xpt.xml
+++ b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/templates/MonoMacProject.xpt.xml
@@ -42,16 +42,31 @@ using MonoMac.ObjCRuntime;
 
 namespace ${Namespace}
 {
-	class MainClass
+	partial class MainClass
 	{
-		static void Main (string [] args)
+		partial static void Main (string [] args)
 		{
+			MonoMacFrameworks.Initialize();
 			NSApplication.Init ();
 			NSApplication.Main (args);
 		}
 	}
 }	
 ]]></File>
+				<File name="MonoMacFrameworks.cs">
+<![CDATA[// This file is auto generated.
+using System;
+
+namespace ${Namespace}
+{
+	public class MonoMacFrameworks
+	{
+		public static void Initialize ()
+		{
+		}
+	}
+}	
+]]></File>
 				<File name="AppDelegate.cs" DependsOn="MainMenu.xib">
 <![CDATA[using System;
 using System.Drawing;