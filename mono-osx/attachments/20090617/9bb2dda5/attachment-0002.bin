Index: Manager.cs
===================================================================
--- Manager.cs	(revision 136302)
+++ Manager.cs	(working copy)
@@ -25,6 +25,7 @@
 
 using System;
 using System.Reflection;
+using System.Runtime.InteropServices;
 
 namespace Mono.WebBrowser
 {
@@ -39,8 +40,17 @@
 		{
 			string browserEngine = Environment.GetEnvironmentVariable ("MONO_BROWSER_ENGINE");
 
-#if NET_2_0			
-			if (browserEngine == "webkit") {
+#if NET_2_0
+			if (RunningOnMacOSX) {
+				if (browserEngine == null || browserEngine == "webkit") {
+					try {
+						Assembly assembly = Assembly.LoadWithPartialName ("mono-cocoa-webkit");
+						return (IWebBrowser) assembly.CreateInstance ("Mono.CocoaWebKit.WebBrowser");
+					} catch {
+						browserEngine = null;
+					}
+				}
+			} else if (browserEngine == "webkit") {
 				Assembly ass;
 				try {
 					ass = Assembly.LoadWithPartialName ("mono-webkit");
@@ -57,6 +67,31 @@
 			throw new Exception (Mono.WebBrowser.Exception.ErrorCodes.EngineNotSupported, browserEngine);
 		}
 
-		
+		// OS detection hackery grabbed from System.Windows.Forms/XplatUI.cs
+		static bool RunningOnUnix {
+			get {
+				int p = (int) Environment.OSVersion.Platform;
+				return (p == 4 || p == 6 || p == 128);
+			}
+		}
+
+		static bool RunningOnMacOSX {
+			get {
+				bool ret = false;
+				if (RunningOnUnix) {
+					IntPtr buf = Marshal.AllocHGlobal (8192);
+					if (uname (buf) == 0) {
+						string os = Marshal.PtrToStringAnsi (buf);
+						if (os == "Darwin")
+							ret = true;
+					}
+					Marshal.FreeHGlobal (buf);
+				}
+				return ret;
+			}
+		}
+
+		[DllImport ("libc")]
+		static extern int uname (IntPtr buf);
 	}
 }
