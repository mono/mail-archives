diff --git a/src/generator.cs b/src/generator.cs
index cb1dd55..533869f 100644
--- a/src/generator.cs
+++ b/src/generator.cs
@@ -75,8 +75,8 @@ public static class ReflectionExtensions {
 		string nwrap;
 
 		if (parent_type != typeof (NSObject)) {
-			if (Attribute.IsDefined (parent_type, typeof (ModelAttribute), false)) {
-				foreach (PropertyInfo pinfo in parent_type.GetProperties ()) {
+			foreach (PropertyInfo pinfo in parent_type.GetProperties ()) {
+				if (Attribute.IsDefined (parent_type, typeof (ModelAttribute), false)) {
 					bool toadd = true;
 					var modelea = Generator.GetExportAttribute (pinfo, out nwrap);
 					foreach (PropertyInfo exists in properties) {
@@ -87,6 +87,9 @@ public static class ReflectionExtensions {
 
 					if (toadd)
 						properties.Add (pinfo);
+				} else {
+					if (Generator.HasAttribute (pinfo, typeof (AbstractAttribute)))
+						properties.Add (pinfo);
 				}
 			}
 	                parent_type = GetBaseType (parent_type);
@@ -102,9 +105,10 @@ public static class ReflectionExtensions {
 		string nwrap;
 
 		if (parent_type != typeof (NSObject)) {
-			if (Attribute.IsDefined (parent_type, typeof (ModelAttribute), false)) {
-				foreach (PropertyInfo pinfo in parent_type.GetProperties (flags)) {
+			foreach (PropertyInfo pinfo in parent_type.GetProperties (flags)) {
+				if (Attribute.IsDefined (parent_type, typeof (ModelAttribute), false)) {
 					bool toadd = true;
+
 					var modelea = Generator.GetExportAttribute (pinfo, out nwrap);
 					foreach (PropertyInfo exists in properties) {
 						var origea = Generator.GetExportAttribute (exists, out owrap);
@@ -114,6 +118,9 @@ public static class ReflectionExtensions {
 
 					if (toadd)
 						properties.Add (pinfo);
+				} else {
+					if (Generator.HasAttribute (pinfo, typeof (AbstractAttribute)))
+						properties.Add (pinfo);
 				}
 			}
 	                parent_type = GetBaseType (parent_type);
@@ -129,6 +136,12 @@ public static class ReflectionExtensions {
 		if (parent_type != typeof (NSObject)) {
 			if (Attribute.IsDefined (parent_type, typeof (ModelAttribute), false)) {
 				methods.AddRange (parent_type.GetMethods ());
+			} else {
+				foreach (var mi in parent_type.GetMethods ()) {
+					if (Generator.HasAttribute (mi, typeof (AbstractAttribute))) {
+						methods.Add (mi);
+					}
+				}
 			}
 	                parent_type = GetBaseType (parent_type);
 		}
@@ -144,6 +157,12 @@ public static class ReflectionExtensions {
 		if (parent_type != typeof (NSObject)) {
 			if (Attribute.IsDefined (parent_type, typeof (ModelAttribute), false)) {
 				methods.AddRange (parent_type.GetMethods (flags));
+			} else {
+				foreach (var mi in parent_type.GetMethods (flags)) {
+					if (Generator.HasAttribute (mi, typeof (AbstractAttribute))) {
+						methods.Add (mi);
+					}
+				}
 			}
 	                parent_type = GetBaseType (parent_type);
 		}
@@ -811,22 +830,22 @@ public class Generator {
 		return GetAttribute (mi, typeof (BindAttribute)) as BindAttribute;
 	}
 	
-	public bool HasAttribute (PropertyInfo pi, Type t)
+	public static bool HasAttribute (PropertyInfo pi, Type t)
 	{
 		return pi.GetCustomAttributes (t, true).Length > 0;
 	}
 
-	public bool HasAttribute (Type queryType, Type t)
+	public static bool HasAttribute (Type queryType, Type t)
 	{
 		return queryType.GetCustomAttributes (t, true).Length > 0;
 	}
 	
-	public bool HasAttribute (MethodInfo mi, Type t)
+	public static bool HasAttribute (MethodInfo mi, Type t)
 	{
 		return mi.GetCustomAttributes (t, true).Length > 0;
 	}
 
-	public bool HasAttribute (ParameterInfo pi, Type t)
+	public static bool HasAttribute (ParameterInfo pi, Type t)
 	{
 		return pi.GetCustomAttributes (t, true).Length > 0;
 	}
