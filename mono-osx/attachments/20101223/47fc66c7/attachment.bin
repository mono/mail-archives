#!/usr/bin/env python

import os
import shutil
import subprocess
import urllib
from collections import deque
from BeautifulSoup import BeautifulSoup

def loadpage(url) :
  html = subprocess.Popen(
    ["mod", url], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
  if len(html) < 4 : print "WARNING : url %s very short!" % (url,)
  return html

def makedirs(fname) :
  dname = os.path.dirname(fname)
  if dname and not os.path.exists(dname) : os.makedirs(dname)

def backtoroot(fname) :
  uptoroot = os.path.sep.join('..' for c in fname if c == os.path.sep)
  if len(uptoroot) > 0 : return uptoroot + os.path.sep
  return ''

def ismonodocurl(url) :
  return not url.startswith('http:')\
    and not url.startswith('edit:')

def dumppage(pageurl, fname, fnamer) :
  print "dumping %s to %s..." % (pageurl, fname,)
  html = loadpage(pageurl)
  soup = BeautifulSoup(html)
  urls = []
  prefix = backtoroot(fname)
  for ahref in soup('a') :
    try : url = ahref['href']
    except KeyError : continue
    if ismonodocurl(url) :
      urls.append(url)
      ahref['href'] = prefix + fnamer(url)
  makedirs(fname)
  out = file(fname, 'w')
  out.write(soup.prettify())
  out.close()
  return urls

class FNamer(object) :
  def __init__(self, maxlen=240) :
    self.maxlen = maxlen
    self.prefixmap = {}

  def url2fname(self, url) :
    if url.startswith('root:/') : url = url[6:]
    if url[-2] == '/' :
      if url[-1] in ('M', 'C', 'P', 'F', 'E') :
        url = url[:-2] + '/' + url[-1]
      elif url[-1] == '*' :
        url = url[:-2] + '.all'
    if url.endswith('.html') : url = url[:-5]
    return urllib.quote(url.replace(':', os.path.sep))

  def __call__(self, url) :
    maybefname = self.url2fname(url)
    if len(maybefname) > self.maxlen :
      prefix = maybefname[:self.maxlen]
      suffix = maybefname[self.maxlen:]
      mapping = self.prefixmap.setdefault(prefix, {})
      idx = mapping.setdefault(suffix, len(mapping) + 1)
      fname = prefix + str(idx)
    else :
      fname = maybefname
    return fname + '.html'

class FIFOSet(object) :
  def __init__(self, it) :
    self.d = deque(it)
    self.s = set(self.d)

  def __len__(self) : return len(self.d)

  def popleft(self) :
    v = self.d.popleft()
    self.s.remove(v)
    return v

  def add(self, v) :
    if v not in self.s :
      self.d.append(v)
      self.s.add(v)

  def extend(self, it) :
    for v in it :
      self.add(v)

def dumpall() :
  fnamer = FNamer()
  tovisit = set(dumppage(u"root:", "index.html", fnamer))
  if u"root:" in tovisit : tovisit.remove(u"root:")
  tovisit = FIFOSet(tovisit)
  visited = set([u"root:"])
  while len(tovisit) > 0 :
    url = tovisit.popleft()
    visited.add(url)
    tovisit.extend(set(dumppage(url, fnamer(url), fnamer)) - visited)

def main() :
  dumpall()

if __name__ == "__main__" :
  main()
