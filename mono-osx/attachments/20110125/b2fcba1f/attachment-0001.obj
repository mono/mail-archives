diff --git a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.addin.xml b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.addin.xml
index 570c62e..2c92d94 100644
--- a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.addin.xml
+++ b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.addin.xml
@@ -26,8 +26,28 @@
 	<Dependencies>
 		<Addin id="Core" version="2.4"/>
 		<Addin id="Ide"  version="2.4"/>
+		<Addin id="SourceEditor2" version="2.4"/>
 	</Dependencies>
 	
+    <Extension path = "/MonoDevelop/Ide/Commands">
+        <Command id = "MonoDevelop.MonoMac.MonoMacCommands.MonoMacAddFrameworksHandler"
+                 _label = "Existing framework..."
+                 defaultHandler = "MonoDevelop.MonoMac.MonoMacAddFrameworksHandler"
+                 _description = "Add Exiting Framework to 'External Frameworks and Libraries'" />
+    </Extension>
+	
+	<Extension path = "/MonoDevelop/Ide/ContextMenu/ProjectPad/Add">
+		<Condition id="ItemType" value="Project">	
+			<CommandItem id = "MonoDevelop.MonoMac.MonoMacCommands.MonoMacAddFrameworksHandler"/>
+		</Condition>
+	</Extension>
+	
+	<Extension path = "/MonoDevelop/Ide/Pads/ProjectPad">
+		<NodeBuilder class = "MonoDevelop.MonoMac.ExternalFrameworksNodeBuilder"/>
+		<NodeBuilder class = "MonoDevelop.MonoMac.ExternalFrameworkFolderNodeBuilder"/>
+		<NodeBuilder class = "MonoDevelop.MonoMac.ExternalFrameworkNodeBuilder"/>
+	</Extension>
+	
 	<Extension path = "/MonoDevelop/Ide/FileTemplates">
 		<FileTemplate id = "MonoMacPlist"
 		            file = "templates/MonoMacPlist.xft.xml"/>
diff --git a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.csproj b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.csproj
index 09e592f..2d89e30 100644
--- a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.csproj
+++ b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoDevelop.MonoMac.csproj
@@ -81,11 +81,21 @@
     <Compile Include="MonoMacExecutionHandler.cs" />
     <Compile Include="MonoMacProject.cs" />
     <Compile Include="MonoMacCodeBehind.cs" />
+    <Compile Include="gtk-gui\generated.cs" />
+    <Compile Include="AddFrameworks.cs" />
+    <Compile Include="gtk-gui\MonoDevelop.MonoMac.AddFrameworks.cs" />
+    <Compile Include="ExternalFrameworksNodeBuilder.cs" />
+    <Compile Include="ExternalFrameworkNodeBuilder.cs" />
+    <Compile Include="ExternalFrameworkNode.cs" />
+    <Compile Include="MonoMacAddFrameworksHandler.cs" />
   </ItemGroup>
   <ItemGroup>
     <EmbeddedResource Include="MonoDevelop.MonoMac.addin.xml">
       <LogicalName>MonoDevelop.MonoMac.addin.xml</LogicalName>
     </EmbeddedResource>
+    <EmbeddedResource Include="gtk-gui\gui.stetic">
+      <LogicalName>gui.stetic</LogicalName>
+    </EmbeddedResource>
   </ItemGroup>
   <ItemGroup>
     <Folder Include="templates\" />
diff --git a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoMacBuildExtension.cs b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoMacBuildExtension.cs
index 2923b0f..c98e886 100644
--- a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoMacBuildExtension.cs
+++ b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoMacBuildExtension.cs
@@ -111,6 +111,62 @@ namespace MonoDevelop.MonoMac
 				using (var f = File.OpenWrite (pkgInfo))
 					f.Write (new byte [] { 0X41, 0X50, 0X50, 0X4C, 0x3f, 0x3f, 0x3f, 0x3f}, 0, 8); // "APPL???"
 			
+			// external frameworks
+			if (proj.externalFrameworks.Count > 0) {
+				monitor.BeginTask ("Copying frameworks to bundle", proj.externalFrameworks.Count);
+				var externalFrameworks = conf.AppDirectory.Combine ("Contents", "Frameworks");
+				
+				if (!Directory.Exists (externalFrameworks))
+					Directory.CreateDirectory (externalFrameworks);
+				
+				foreach (string framework in proj.externalFrameworks) {
+					DirectoryInfo di = new DirectoryInfo (framework);
+					monitor.Log.WriteLine (string.Format ("Copying '{0}' to bundle", di.Name));
+
+					var destFramework = externalFrameworks.Combine (di.Name);
+					if (Directory.Exists (destFramework) == true) {
+						Directory.Delete (destFramework, true);
+					}
+					Directory.CreateDirectory (destFramework);
+					
+					CopyFolder (framework, destFramework);
+					monitor.Step (1);
+				}
+				
+				FilePath file = proj.BaseDirectory.Combine("Main.Frameworks.cs");
+				Console.WriteLine("deleting {0}", file.FullPath);
+				File.Delete(file.FullPath);
+				
+				StringBuilder data = new StringBuilder();
+				data.AppendLine("using System.Runtime.InteropServices;");
+				data.AppendLine("using System;");
+				data.AppendLine();
+				data.AppendLine("namespace " + proj.DefaultNamespace);
+				data.AppendLine("{");
+				data.AppendLine("\tpartial class MainClass");
+				data.AppendLine("\t{");
+				data.AppendLine("\t\t[DllImport (\"/usr/lib/libSystem.dylib\")]");
+                data.AppendLine("\t\tpublic static extern IntPtr dlopen (string path, int mode);");
+                data.AppendLine("\t\t[DllImport(\"/usr/lib/libSystem.dylib\")]");
+        		data.AppendLine("\t\tpublic static extern string dlerror();");
+				data.AppendLine();
+				data.AppendLine("\t\tpublic static void LoadFrameworks()");
+				data.AppendLine("\t\t{");
+
+				foreach (string framework in proj.externalFrameworks) {
+					DirectoryInfo di = new DirectoryInfo(framework);
+					string libName = di.Name.Replace(".framework", "");
+					
+					data.AppendLine(string.Format("\t\t\tif (dlopen (\"{0}/{1}\", 0) == IntPtr.Zero)", framework, libName));
+					data.AppendLine(string.Format("\t\t\t\tConsole.WriteLine (\"Failed to open {0} with error: {1}\", dlerror());", framework, "{0}"));
+				}
+				data.AppendLine("\t\t}");
+				data.AppendLine("\t}");
+				data.AppendLine("}");
+				File.WriteAllText(file.FullPath, data.ToString());
+				monitor.EndTask ();
+			}
+			
 			return res;
 		}
 		
@@ -184,6 +240,19 @@ namespace MonoDevelop.MonoMac
 			if (!File.Exists (conf.AppDirectory.Combine ("Contents", "PkgInfo")))
 			    return true;
 			
+			//external frameworks
+			var externalFrameworks = conf.AppDirectory.Combine ("Contents", "Frameworks");
+			if (proj.externalFrameworks.Count > 0 && Directory.Exists (externalFrameworks) == false)
+			    return true;
+			
+			foreach (string framework in proj.externalFrameworks) {
+				DirectoryInfo di = new DirectoryInfo (framework);
+
+				var destFramework = externalFrameworks.Combine (di.Name);
+				if (Directory.Exists (destFramework) == false)
+					return true;
+			}
+
 			return false;
 		}
 		
@@ -236,5 +305,30 @@ namespace MonoDevelop.MonoMac
 				if (pf.BuildAction == BuildAction.Content)
 					yield return new FilePair (pf.FilePath, pf.ProjectVirtualPath.ToAbsolute (resDir));
 		}
+		
+		static private void CopyFolder (string sourceFolder, string destFolder)
+        {
+            if (!Directory.Exists (destFolder))
+                Directory.CreateDirectory (destFolder);
+			
+            string[] files = Directory.GetFiles (sourceFolder);
+            foreach (string file in files) {
+                string name = Path.GetFileName (file);
+				if (name[0] == '.')
+					continue;
+                string dest = Path.Combine (destFolder, name);
+
+                File.Copy (file, dest);
+            }
+			
+            string[] folders = Directory.GetDirectories (sourceFolder);
+            foreach (string folder in folders) {
+                string name = Path.GetFileName (folder);
+				if (name[0] == '.')
+					continue;
+                string dest = Path.Combine (destFolder, name);
+                CopyFolder (folder, dest);
+            }
+        }
 	}
 }
diff --git a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoMacProject.cs b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoMacProject.cs
index e6d1b16..dc4b2d4 100644
--- a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoMacProject.cs
+++ b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/MonoMacProject.cs
@@ -36,6 +36,7 @@ using MonoDevelop.Core.Execution;
 using MonoDevelop.Ide;
 using System.Reflection;
 using MonoDevelop.MacDev.Plist;
+using System.Collections;
 
 namespace MonoDevelop.MonoMac
 {
@@ -210,5 +211,17 @@ namespace MonoDevelop.MonoMac
 			doc.WriteToFile (name);
 			return AddFile (name);
 		}
+		
+		#region Serialize External Frameworks
+		
+		[ItemProperty("ExternalFrameworks")]
+		[ItemProperty("Framework", Scope="*")]
+		public List<string> externalFrameworks = new List<string>();
+		
+		public void NotifyModified()
+		{
+			NotifyModified("Frameworks");
+		}
+		#endregion
 	}
 }
diff --git a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/templates/MonoMacProject.xpt.xml b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/templates/MonoMacProject.xpt.xml
index 8cd592d..92b8926 100644
--- a/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/templates/MonoMacProject.xpt.xml
+++ b/extras/MonoDevelop.MonoMac/MonoDevelop.MonoMac/templates/MonoMacProject.xpt.xml
@@ -42,16 +42,37 @@ using MonoMac.ObjCRuntime;
 
 namespace ${Namespace}
 {
-	class MainClass
+	partial class MainClass
 	{
-		static void Main (string [] args)
+		partial static void Main (string [] args)
 		{
+			LoadFrameworks();
 			NSApplication.Init ();
 			NSApplication.Main (args);
 		}
 	}
 }	
 ]]></File>
+				<File name="Main.Frameworks.cs" DependsOn="Main.cs">
+<![CDATA[// This file is auto generated.
+using System.Runtime.InteropServices;
+using System;
+
+namespace ${Namespace}
+{
+	partial class MainClass
+	{
+		[DllImport ("/usr/lib/libSystem.dylib")]
+		public static extern IntPtr dlopen (string path, int mode);
+		[DllImport("/usr/lib/libSystem.dylib")]
+        public static extern string dlerror();
+
+		static void LoadFrameworks ()
+		{
+		}
+	}
+}	
+]]></File>
 				<File name="AppDelegate.cs" DependsOn="MainMenu.xib">
 <![CDATA[using System;
 using System.Drawing;