Index: Ode.cs
===================================================================
--- Ode.cs	(revision 45067)
+++ Ode.cs	(working copy)
@@ -97,6 +97,154 @@
             public real[] I;
         }
 
+		/// <summary>
+		/// 
+		/// </summary>
+		[StructLayout(LayoutKind.Sequential)]
+		public struct dContactGeom {
+			/// <summary>
+			/// 
+			/// </summary>
+			[MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]
+			public real[] pos;
+			/// <summary>
+			/// 
+			/// </summary>
+			[MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]
+			public real[] normal;
+			/// <summary>
+			/// 
+			/// </summary>
+			public real depth;
+			/// <summary>
+			/// 
+			/// </summary>
+			public IntPtr g1,g2;
+		}
+
+		/// <summary>
+		/// 
+		/// </summary>
+		[FlagsAttribute]
+		public enum dContactFlags:int {
+			/// <summary>
+			/// 
+			/// </summary>
+			dContactMu2			= 0x001,
+			/// <summary>
+			/// 
+			/// </summary>
+			dContactFDir1		= 0x002,
+			/// <summary>
+			/// 
+			/// </summary>
+			dContactBounce		= 0x004,
+			/// <summary>
+			/// 
+			/// </summary>
+			dContactSoftERP		= 0x008,
+			/// <summary>
+			/// 
+			/// </summary>
+			dContactSoftCFM		= 0x010,
+			/// <summary>
+			/// 
+			/// </summary>
+			dContactMotion1		= 0x020,
+			/// <summary>
+			/// 
+			/// </summary>
+			dContactMotion2		= 0x040,
+			/// <summary>
+			/// 
+			/// </summary>
+			dContactSlip1		= 0x080,
+			/// <summary>
+			/// 
+			/// </summary>
+			dContactSlip2		= 0x100,
+			
+			/// <summary>
+			/// 
+			/// </summary>
+			dContactApprox0		= 0x0000,
+			/// <summary>
+			/// 
+			/// </summary>
+			dContactApprox1_1	= 0x1000,
+			/// <summary>
+			/// 
+			/// </summary>
+			dContactApprox1_2	= 0x2000,
+			/// <summary>
+			/// 
+			/// </summary>
+			dContactApprox1		= 0x3000
+		}
+
+		/// <summary>
+		/// 
+		/// </summary>
+		[StructLayout(LayoutKind.Sequential)]
+		public struct dSurfaceParameters {
+			/// <summary>
+			/// 
+			/// </summary>
+			public dContactFlags mode;
+			/// <summary>
+			/// 
+			/// </summary>
+			public real mu;
+			/// <summary>
+			/// 
+			/// </summary>
+			public real mu2;
+			/// <summary>
+			/// 
+			/// </summary>
+			public real bounce;
+			/// <summary>
+			/// 
+			/// </summary>
+			public real bounce_vel;
+			/// <summary>
+			/// 
+			/// </summary>
+			public real soft_erp;
+			/// <summary>
+			/// 
+			/// </summary>
+			public real soft_cfm;
+			/// <summary>
+			/// 
+			/// </summary>
+			public real motion1, motion2;
+			/// <summary>
+			/// 
+			/// </summary>
+			public real slip1, slip2;
+		}
+
+		/// <summary>
+		/// 
+		/// </summary>
+		[StructLayout(LayoutKind.Sequential)]
+		public struct dContact {
+			/// <summary>
+			/// 
+			/// </summary>
+			public dSurfaceParameters surface;
+			/// <summary>
+			/// 
+			/// </summary>
+			public dContactGeom geom;
+			/// <summary>
+			/// 
+			/// </summary>
+			[MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]
+			public real[] fdir1;
+		}
+
         // --- Public Externs ---
         // dWorldID dWorldCreate();
 		/// <summary>
@@ -106,10 +254,19 @@
         [DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
         public static extern IntPtr dWorldCreate();
 
-        // dSpaceID dHashSpaceCreate(dSpaceID space);
+		// dWorldID dWorldDestroy();
 		/// <summary>
 		/// 
 		/// </summary>
+		/// <param name="world"></param>
+		/// <returns></returns>
+		[DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
+		public static extern IntPtr dWorldDestroy(IntPtr world);
+
+		// dSpaceID dHashSpaceCreate(dSpaceID space);
+		/// <summary>
+		/// 
+		/// </summary>
 		/// <param name="space"></param>
 		/// <returns></returns>
         [DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
@@ -216,6 +373,16 @@
         [DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
         public static extern void dBodyAddForce(IntPtr body, real fx, real fy, real fz);
 
+		/// <summary>
+		/// 
+		/// </summary>
+		/// <param name="body"></param>
+		/// <param name="fx"></param>
+		/// <param name="fy"></param>
+		/// <param name="fz"></param>
+		[DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
+		public static extern void dBodyAddTorque(IntPtr body, real fx, real fy, real fz);
+
         // const dReal * dBodyGetPosition(dBodyID);
         [DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, EntryPoint="dBodyGetPosition"), SuppressUnmanagedCodeSecurity]
         private static extern IntPtr __dBodyGetPosition(IntPtr body);
@@ -269,6 +436,29 @@
             return velocityArray;
         }
 
+		[DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, EntryPoint="dBodyGetAngularVel"), SuppressUnmanagedCodeSecurity]
+		private static extern IntPtr __dBodyGetAngularVel(IntPtr body);
+
+		/// <summary>
+		/// 
+		/// </summary>
+		/// <param name="body"></param>
+		/// <returns></returns>
+		public static real[] dBodyGetAngularVel(IntPtr body) {
+			real[] velocityArray = new real[3];
+
+			unsafe {
+				IntPtr velocity = __dBodyGetAngularVel(body);
+				real* velocityPointer = (real*) velocity.ToPointer();
+
+				for(int i = 0; i < velocityArray.Length; i++) {
+					velocityArray[i] = velocityPointer[i];
+				}
+			}
+
+			return velocityArray;
+		}
+
         // void dWorldStep (dWorldID, dReal stepsize);
 		/// <summary>
 		/// 
@@ -278,15 +468,42 @@
         [DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
         public static extern void dWorldStep(IntPtr world, real stepsize);
 
-        // void dWorldSetCFM (dWorldID, dReal cfm);
+		// void dWorldSetQuickStepNumIterations (dWorldID, dReal stepsize);
 		/// <summary>
 		/// 
 		/// </summary>
 		/// <param name="world"></param>
+		/// <param name="num"></param>
+		[DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
+		public static extern void dWorldSetQuickStepNumIterations(IntPtr world, int num);
+
+		// void dWorldQuickStep (dWorldID, dReal stepsize);
+		/// <summary>
+		/// 
+		/// </summary>
+		/// <param name="world"></param>
+		/// <param name="stepsize"></param>
+		[DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
+		public static extern void dWorldQuickStep(IntPtr world, real stepsize);
+
+		// void dWorldSetCFM (dWorldID, dReal cfm);
+		/// <summary>
+		/// 
+		/// </summary>
+		/// <param name="world"></param>
 		/// <param name="crm"></param>
         [DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
         public static extern void dWorldSetCFM(IntPtr world, real crm);
 
+		/// <summary>
+		/// 
+		/// </summary>
+		/// <param name="space"></param>
+		/// <param name="radius"></param>
+		/// <returns></returns>
+		[DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
+		public static extern IntPtr dCreateSphere(IntPtr space, real radius);
+
         // dGeomID dCreateBox (dSpaceID space, dReal lx, dReal ly, dReal lz);
 		/// <summary>
 		/// 
@@ -299,6 +516,7 @@
         [DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
         public static extern IntPtr dCreateBox(IntPtr space, real x, real y, real z);
 
+
         // void dGeomSetBody (dGeomID, dBodyID);
 		/// <summary>
 		/// 
@@ -315,5 +533,75 @@
 		/// <param name="jointGroup"></param>
         [DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
         public static extern void dJointGroupEmpty(IntPtr jointGroup);
+
+		/// <summary>
+		/// 
+		/// </summary>
+		/// <param name="jointGroup"></param>
+		[DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
+		public static extern void dJointGroupDestroy(IntPtr jointGroup);
+
+		/// <summary>
+		/// 
+		/// </summary>
+		/// <param name="world"></param>
+		/// <param name="jointGroup"></param>
+		/// <param name="contact"></param>
+		/// <returns></returns>
+		[DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
+		public static extern IntPtr dJointCreateContact(IntPtr world, IntPtr jointGroup, ref dContact contact);
+
+		/// <summary>
+		/// 
+		/// </summary>
+		/// <param name="joint"></param>
+		[DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
+		public static extern void dJointDestroy(IntPtr joint);
+
+		/// <summary>
+		/// 
+		/// </summary>
+		/// <param name="joint"></param>
+		/// <param name="body1"></param>
+		/// <param name="body2"></param>
+		[DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
+		public static extern void dJointAttach(IntPtr joint, IntPtr body1, IntPtr body2);
+
+		/// <summary>
+		/// 
+		/// </summary>
+		/// <param name="joint"></param>
+		/// <param name="index"></param>
+		/// <returns></returns>
+		[DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
+		public static extern IntPtr dJointGetBody(IntPtr joint, int index);
+
+		/// <summary>
+		/// 
+		/// </summary>
+		/// <param name="world"></param>
+		/// <param name="jointGroup"></param>
+		/// <returns></returns>
+		[DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
+		public static extern IntPtr dJointCreateFixed(IntPtr world, IntPtr jointGroup);
+
+		/// <summary>
+		/// 
+		/// </summary>
+		/// <param name="joint"></param>
+		[DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, ExactSpelling=true), SuppressUnmanagedCodeSecurity]
+		public static extern void dJointSetFixed(IntPtr joint);
+
+		/// <summary>
+		/// 
+		/// </summary>
+		/// <param name="o1"></param>
+		/// <param name="o2"></param>
+		/// <param name="flags"></param>
+		/// <param name="contactGeoms"></param>
+		/// <param name="skip"></param>
+		/// <returns></returns>
+		[DllImport("ode.dll", CallingConvention=CALLING_CONVENTION, EntryPoint="dCollide"), SuppressUnmanagedCodeSecurity]
+		public static extern int dCollide(IntPtr o1, IntPtr o2, int flags, [In,Out] dContactGeom[] contactGeoms, int skip);
     }
 }
