Index: src/dependencyproperty.g.cpp
===================================================================
--- src/dependencyproperty.g.cpp	(revision 126982)
+++ src/dependencyproperty.g.cpp	(working copy)
@@ -392,7 +392,7 @@
 	DependencyProperty::Register (this, Type::BEZIERSEGMENT, "Point1", Type::POINT);
 	DependencyProperty::Register (this, Type::BEGINSTORYBOARD, "Storyboard", Type::STORYBOARD);
 	DependencyProperty::Register (this, Type::ARCSEGMENT, "SweepDirection", new Value (SweepDirectionCounterclockwise), Type::INT32);
-	DependencyProperty::Register (this, Type::ARCSEGMENT, "Size", Type::POINT);
+	DependencyProperty::Register (this, Type::ARCSEGMENT, "Size", Type::SIZE);
 	DependencyProperty::Register (this, Type::ARCSEGMENT, "RotationAngle", new Value (0.0), Type::DOUBLE);
 	DependencyProperty::Register (this, Type::ARCSEGMENT, "Point", Type::POINT);
 	DependencyProperty::Register (this, Type::ARCSEGMENT, "IsLargeArc", new Value (false), Type::BOOL);
@@ -5065,15 +5065,15 @@
 	SetValue (ArcSegment::SweepDirectionProperty, Value (value));
 }
 
-Point *
+Size *
 ArcSegment::GetSize ()
 {
 	Value *value = GetValue (ArcSegment::SizeProperty);
-	return value ? value->AsPoint () : NULL;
+	return value ? value->AsSize () : NULL;
 }
 
 void
-ArcSegment::SetSize (Point *value)
+ArcSegment::SetSize (Size *value)
 {
 	if (!value) return;
 	SetValue (ArcSegment::SizeProperty, Value (*value));
Index: src/geometry.h
===================================================================
--- src/geometry.h	(revision 126982)
+++ src/geometry.h	(working copy)
@@ -393,7 +393,7 @@
 	const static int PointProperty;
  	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors */
 	const static int RotationAngleProperty;
- 	/* @PropertyType=Point,ManagedPropertyType=Size,GenerateAccessors */
+ 	/* @PropertyType=Size,ManagedPropertyType=Size,GenerateAccessors */
 	const static int SizeProperty;
  	/* @PropertyType=SweepDirection,DefaultValue=SweepDirectionCounterclockwise,GenerateAccessors */
 	const static int SweepDirectionProperty;
@@ -417,8 +417,8 @@
 	void SetRotationAngle (double angle);
 	double GetRotationAngle ();
 	
-	void SetSize (Point *size);
-	Point *GetSize ();
+	void SetSize (Size *size);
+	Size *GetSize ();
 	
 	void SetSweepDirection (SweepDirection direction);
 	SweepDirection GetSweepDirection ();
Index: src/geometry.cpp
===================================================================
--- src/geometry.cpp	(revision 126982)
+++ src/geometry.cpp	(working copy)
@@ -632,9 +632,9 @@
 void
 ArcSegment::Append (moon_path *path)
 {
-	Point *size = GetSize ();
-	double width = size ? size->x : 0.0;
-	double height = size ? size->y : 0.0;
+	Size *size = GetSize ();
+	double width = size ? size->width : 0.0;
+	double height = size ? size->height : 0.0;
 
 	Point *end_point = GetPoint ();
 	double ex = end_point ? end_point->x : 0.0;
Index: tools/generators/README
===================================================================
--- tools/generators/README	(revision 126982)
+++ tools/generators/README	(working copy)
@@ -1,6 +1,6 @@
 This directory includes a scripts to generate different parts of our code.
 
-Just run 'make' to execute the generator.
+Run 'make' to create the generator and 'make generate' to execute it.
 
 The generator parses every h file in src/ and creates a list of all the types,
 methods, enums, etc. it can find. It's not overly smart, feeding it complex
