commit ddfd8e24d3e975563e67e78a3e6fd66d18f26302
Author: Rolf Bjarne Kvinge <RKvinge@novell.com>
Date:   Thu Jan 21 12:26:37 2010 +0100

    2010-01-21  Rolf Bjarne Kvinge  <RKvinge@novell.com>
    
    	* gensources.sh: Converted to C# for a 15-100x speedup.

diff --git a/.gitignore b/.gitignore
index 0ae961b..99647ca 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
 *.mdb
 *.exe
 *.o
+tools/gensources.sh.cs
diff --git a/tools/ChangeLog b/tools/ChangeLog
index 4c1f1a7..b22f80c 100644
--- a/tools/ChangeLog
+++ b/tools/ChangeLog
@@ -1,3 +1,7 @@
+2010-01-21  Rolf Bjarne Kvinge  <RKvinge@novell.com>
+
+	* gensources.sh: Converted to C# for a 15-100x speedup.
+
 2010-01-12  Jonathan Pryor  <jpryor@novell.com>
 
 	* Makefile: monodoc should only be built under the 2.0 profile.
diff --git a/tools/gensources.sh b/tools/gensources.sh
index 7e71029..35f2681 100755
--- a/tools/gensources.sh
+++ b/tools/gensources.sh
@@ -1,68 +1,89 @@
 #!/usr/bin/env bash
 
-includefile=$1
-excludefile=$2
-
-## input variables:
-## 	$filelist:
-##		A colon (':') separated list of files already read.
-##		Must be initialized to ":".
-##	$excludelist:
-##		A newline separated of element (support Shell Patterns) to exclude.
-##	$separator:
-##		The separator used in list for the output
-##	
-## output variables:
-## 	$list:
-##		A list of elements separated by the separator given in $separator.
-##		The new elements will be appended to the list.
-readlist () {
-	local onelist
-	local onelistcontent
-	onelist=$1
-
-	if [ ":$onelist:" = "::" ] ; then return ; fi
-	if [ ! -f $onelist ] ; then return ; fi
-	if [ ":${filelist##*:$onelist:*}:" = "::" ]  ; then return ; fi
-	filelist=":$onelist$filelist"
-
-	onelistcontent=`cat $onelist | sed "s=[ \t]*$==g" | while read line ; do echo -n $line ; echo -n ":" ; done`
-
-	OFS="$IFS"
-	IFS=":"
-	for line in $onelistcontent ; do
-		line2=${line##\#}
-		if [ ":$line:" = ":$line2:" ] ; then
-			for linex in $excludelist ; do
-				if [ ":${line##$linex}:" = "::" ] ; then line="" ; fi
-			done
-			if [ ":$line:" != "::" ] ; then
-				if [ ":$list:" = "::" ] ; then
-					list="$line"
-				else
-					list="$list$separator$line"
-				fi
-			fi
-		else
-			line3=${line2##include }
-			if [ ":$line3:" != ":$line2:" -a ":$line3:" != "::" ] ; then
-				readlist "$line3"
-			fi
-		fi
-	done
-	IFS="$OFS"
+cat >$0.cs <<EOF
+
+using System;
+using System.Collections.Generic;
+using System.IO;
+
+class GenSource {
+	static List<string> filelist;
+	static List<string> list;
+	static List<string> excludelist;
+
+	static int Main (string [] args)
+	{
+		string includefile = null;
+		string excludefile = null;
+
+		if (args.Length == 0) {
+			Console.Error.WriteLine ("No arguments");
+			return 1;
+		}
+
+		if (args.Length > 0)
+			includefile = args [0];
+
+		if (args.Length > 1)
+			excludefile = args [1];
+
+		list = new List<string> ();
+		filelist = new List<string> ();
+		Parse (excludefile);
+		if (list.Count != 0) {
+			excludelist = list;
+			list = new List<string> ();
+		}
+
+		Parse (includefile);
+		foreach (string line in list)
+			Console.WriteLine (line);
+		return 0;
+	}
+
+	static void Parse (string onelist)
+	{
+		if (string.IsNullOrEmpty (onelist))
+			return;
+
+		if (!File.Exists (onelist))
+			return;
+
+		if (filelist.Contains (onelist))
+			return;
+
+		filelist.Add (onelist);
+
+		foreach (string l in File.ReadAllLines (onelist)) {
+			string line = l.Replace (" ", "").Replace ("\t", "");
+			if (!line.StartsWith ("#")) {
+				if (excludelist != null && excludelist.Contains (line))
+					continue;
+
+				if (string.IsNullOrEmpty (line))
+					continue;
+				
+				string dir = Path.GetDirectoryName (line);
+				string name = Path.GetFileName (line);
+				string [] expanded = Directory.GetFiles (Path.Combine (Environment.CurrentDirectory, dir), name);
+				foreach (string file in expanded) {
+					if (!list.Contains (file)) {
+						list.Add (file);
+					}
+				}
+			} else {
+				Parse (line.Substring ("#include".Length));
+			}
+		}
+	}
 }
 
-list=""
-filelist=":"
-excludelist=""
-separator=":"
-readlist "$excludefile"
-
-excludelist="$list"
-list=""
-filelist=":"
-separator="
-"
-readlist "$includefile"
-echo "$list" | sort | uniq
+EOF
+
+# check if $0.exe exists, or if $0 is newer than $0.exe
+if test ! -e $0.exe -o $0 -nt $0.exe; then
+	# echo compiling...
+	gmcs $0.cs -target:exe -out:$0.exe -debug+
+fi
+mono --debug $0.exe "$@" | sort
+# leave exe for next time the build requires us to avoid recompiling
