Index: class/System.Windows/Makefile.am
===================================================================
--- class/System.Windows/Makefile.am	(revision 156201)
+++ class/System.Windows/Makefile.am	(working copy)
@@ -54,7 +54,6 @@ system_windows_sources =							\
 	$(srcdir)/../Consts.cs							\
 	$(srcdir)/Microsoft.Internal/IManagedFrameworkInternalHelper.cs		\
 	$(srcdir)/Microsoft.Internal/TextBoxView.cs				\
-	$(srcdir)/Mono/A11yHelper.cs						\
 	$(srcdir)/Mono/ApplicationLauncher.cs					\
 	$(srcdir)/Mono/DispatcherTimer.cs					\
 	$(srcdir)/Mono/DoubleKeyedDictionary.cs					\
Index: class/System.Windows/Mono/A11yHelper.cs
===================================================================
deleted file mode 100644
--- class/System.Windows/Mono/A11yHelper.cs	(revision 156201)
+++ /dev/null	(working copy)
@@ -1,117 +0,0 @@
-//
-// A11yHelper.cs
-//
-// Contact:
-//   Mono-A11Y List (mono-a11y@forge.novell.com)
-//   Moonlight List (moonlight-list@lists.ximian.com)
-//
-// Copyright 2009 Novell, Inc.
-//
-// Permission is hereby granted, free of charge, to any person obtaining
-// a copy of this software and associated documentation files (the
-// "Software"), to deal in the Software without restriction, including
-// without limitation the rights to use, copy, modify, merge, publish,
-// distribute, sublicense, and/or sell copies of the Software, and to
-// permit persons to whom the Software is furnished to do so, subject to
-// the following conditions:
-// 
-// The above copyright notice and this permission notice shall be
-// included in all copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-//
-
-using System;
-using System.IO;
-using System.Reflection;
-
-namespace Mono {
-
-	internal static class A11yHelper {
-		
-		private const string BRIDGE_ASM_NAME = "MoonAtkBridge.dll";
-		private const string BRIDGE_FULL_NAME = "Moonlight.AtkBridge.AutomationBridge";
-
-		internal static void Initialize ()
-		{
-			string current_assembly_location = Assembly.GetExecutingAssembly ().Location;
-			
-			//please keep this lookup pattern in sync with the one in security.c (security_enable_coreclr() method)
-			int pos = current_assembly_location.IndexOf ("moonlight@novell");
-			if (pos < 0)
-				return;
-
-			string load_location = Path.Combine (current_assembly_location.Substring (0, pos), "moonlight-a11y@novell.com");
-			if (!Directory.Exists (load_location))
-				return;
-
-			load_location = Path.Combine (Path.Combine (load_location, "components"), BRIDGE_ASM_NAME);
-
-			Assembly bridge_asm;
-			try {
-				bridge_asm = Assembly.LoadFrom (load_location);
-			} catch {
-				return;
-			}
-
-			bridge_type = bridge_asm.GetType (BRIDGE_FULL_NAME);
-			if (bridge_type == null) {
-				Console.Error.WriteLine (String.Format ("Could not find type {0} in assembly {1}", BRIDGE_FULL_NAME, BRIDGE_ASM_NAME));
-				return;
-			}
-
-			automation_bridge = bridge_type.GetMethod (
-				"CreateAutomationBridge",
-				BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.InvokeMethod)
-				.Invoke (null, null);
-
-			accessibility_enabled = (bool) bridge_type.GetMethod (
-				"IsAccessibilityEnabled",
-				BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.InvokeMethod)
-				.Invoke (null, null);
-		}
-
-		internal static void Shutdown ()
-		{
-			if (bridge_type == null)
-				return;
-
-			var shutdown_mi = bridge_type.GetMethod ("Shutdown",
-			        BindingFlags.Instance | BindingFlags.NonPublic
-				| BindingFlags.InvokeMethod);
-			if (shutdown_mi == null)
-				return;
-
-			shutdown_mi.Invoke (automation_bridge, null);
-		}
-		
-		private static Type bridge_type;
-		private static object automation_bridge;
-		private static bool accessibility_enabled = false;
-		private static IntPtr accessible;
-
-		public static bool AccessibilityEnabled {
-			get { return accessibility_enabled; }
-		}
-		
-		public static IntPtr GetAccessible ()
-		{
-			if (!accessibility_enabled || automation_bridge == null)
-				return IntPtr.Zero;
-
-			if (accessible == IntPtr.Zero)
-				accessible =  (IntPtr) bridge_type.GetMethod ("GetAccessibleHandle",
-				                                               BindingFlags.Instance | 
-				                                               BindingFlags.NonPublic | 
-				                                               BindingFlags.InvokeMethod)
-				                                               .Invoke (automation_bridge, null);
-			return accessible;
-		}
-	}
-}
Index: class/System.Windows/Mono/ApplicationLauncher.cs
===================================================================
--- class/System.Windows/Mono/ApplicationLauncher.cs	(revision 156201)
+++ class/System.Windows/Mono/ApplicationLauncher.cs	(working copy)
@@ -44,11 +44,6 @@ namespace Mono {
 	/// </summary>	
 	static class ApplicationLauncher {
 
-		static ApplicationLauncher ()
-		{
-			A11yHelper.Initialize ();
-		}
-
 		/// <summary>
 		///   Creates a new Loader for a XAML file.
 		/// </summary>
@@ -77,8 +72,6 @@ namespace Mono {
 		/// </summary>
 		public static void DestroyApplication (IntPtr plugin)
 		{
-			A11yHelper.Shutdown ();
-
 			if (Application.Current != null)
 				Application.Current.Terminate ();
 		}
Index: class/System.Windows/System.Windows.Automation.Peers/AutomationSingleton.cs
===================================================================
--- class/System.Windows/System.Windows.Automation.Peers/AutomationSingleton.cs	(revision 156201)
+++ class/System.Windows/System.Windows.Automation.Peers/AutomationSingleton.cs	(working copy)
@@ -28,8 +28,9 @@
 
 using System;
 using System.Reflection;
-using System.Collections.Generic;
+using System.Windows.Interop;
 using System.Windows.Automation;
+using System.Collections.Generic;
 using System.Windows.Automation.Provider;
 
 namespace System.Windows.Automation.Peers {
@@ -51,7 +52,9 @@ namespace System.Windows.Automation.Peers {
 				if (forceAccessibilityEnabled)
 					return true;
 
-				return Mono.A11yHelper.AccessibilityEnabled;
+				return Mono.NativeMethods.accessibility_bridge_is_accessibility_enabled (
+					Mono.NativeMethods.plugin_instance_get_accessibility_bridge (PluginHost.Handle)
+				);
 			}
 		}
 
Index: class/tuning/SecurityAttributes/automatic/System.Windows.auto.sc
===================================================================
--- class/tuning/SecurityAttributes/automatic/System.Windows.auto.sc	(revision 156201)
+++ class/tuning/SecurityAttributes/automatic/System.Windows.auto.sc	(working copy)
@@ -1,5 +1,5 @@
 # [SecurityCritical] needed to execute code inside 'System.Windows, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'.
-# 424 methods needs to be decorated.
+# 426 methods needs to be decorated.
 
 # p/invoke declaration
 +SC-M: Mono.Kind Mono.NativeMethods::collection_get_element_type(System.IntPtr)
@@ -14,6 +14,9 @@
 +SC-M: Mono.Kind Mono.NativeMethods::types_register_type(System.IntPtr,System.String,System.String,System.IntPtr,Mono.Kind,System.Boolean,System.Boolean,Mono.Kind[],System.Int32)
 
 # p/invoke declaration
++SC-M: System.Boolean Mono.NativeMethods::accessibility_bridge_is_accessibility_enabled(System.IntPtr)
+
+# p/invoke declaration
 +SC-M: System.Boolean Mono.NativeMethods::application_install_with_error_(System.IntPtr,Mono.MoonError&,System.Boolean)
 
 # p/invoke declaration
@@ -563,6 +566,9 @@
 +SC-M: System.IntPtr Mono.NativeMethods::plugin_instance_evaluate(System.IntPtr,System.String)
 
 # p/invoke declaration
++SC-M: System.IntPtr Mono.NativeMethods::plugin_instance_get_accessibility_bridge(System.IntPtr)
+
+# p/invoke declaration
 +SC-M: System.IntPtr Mono.NativeMethods::plugin_instance_get_browser_host(System.IntPtr)
 
 # p/invoke declaration
Index: class/tuning/SecurityAttributes/automatic/System.Windows.auto.ssc
===================================================================
--- class/tuning/SecurityAttributes/automatic/System.Windows.auto.ssc	(revision 156201)
+++ class/tuning/SecurityAttributes/automatic/System.Windows.auto.ssc	(working copy)
@@ -1,5 +1,5 @@
 # [SecuritySafeCritical] needed inside System.Windows to call all [SecurityCritical] methods
-# 548 methods
+# 549 methods
 
 +SSC-M: System.Void Mono.Events::SafeAction(System.Action)
 +SSC-M: System.Object Mono.NativeDependencyObjectHelper::GetValue(Mono.INativeDependencyObjectWrapper,System.Windows.DependencyProperty)
@@ -272,6 +272,7 @@
 +SSC-M: System.Boolean System.Windows.Application::get_IsCurrentSet()
 +SSC-M: System.Void System.Windows.Application::set_RootVisual(System.Windows.UIElement)
 +SSC-M: System.Reflection.Assembly System.Windows.AssemblyPart::Load(System.IO.Stream)
++SSC-M: System.Boolean System.Windows.Automation.Peers.AutomationSingleton::get_AccessibilityEnabled()
 +SSC-M: System.Boolean System.Windows.CheckAndDownloadUpdateCompletedEventArgs::get_UpdateAvailable()
 +SSC-M: System.Exception System.Windows.CheckAndDownloadUpdateCompletedEventArgs::get_Error()
 +SSC-M: System.Void System.Windows.Controls.ContentControl::content_changed_callback(System.IntPtr,System.IntPtr,System.IntPtr)
Index: m4/various.m4
===================================================================
--- m4/various.m4	(revision 156201)
+++ m4/various.m4	(working copy)
@@ -1,6 +1,6 @@
 AC_DEFUN([MOONLIGHT_CHECK_GTK],
 [
-	PKG_CHECK_MODULES(GTK, gtk+-2.0 gthread-2.0)
+	PKG_CHECK_MODULES(GTK, gtk+-2.0 gthread-2.0 atk)
 ])
 
 AC_DEFUN([MOONLIGHT_CHECK_GLIB], 
Index: plugin/Makefile.am
===================================================================
--- plugin/Makefile.am	(revision 156201)
+++ plugin/Makefile.am	(working copy)
@@ -55,6 +55,8 @@ libmoonplugin_la_SOURCES = \
 	plugin.h			\
 	plugin-accessibility.cpp	\
 	plugin-accessibility.h		\
+	plugin-accessibility-bridge.cpp	\
+	plugin-accessibility-bridge.h	\
 	plugin-downloader.cpp		\
 	plugin-downloader.h		\
 	plugin-entry.cpp 		\
Index: plugin/moz-sdk/npapi.h
===================================================================
--- plugin/moz-sdk/npapi.h	(revision 156201)
+++ plugin/moz-sdk/npapi.h	(working copy)
@@ -334,9 +334,17 @@ typedef enum {
   /* Checks if the plugin is interested in receiving the http body of
    * all http requests (including failed ones, http status != 200).
    */
-  NPPVpluginWantsAllNetworkStreams = 18,
+  NPPVpluginWantsAllNetworkStreams = 18
 
-  NPPVcursor = 19
+#ifdef MOZ_X11
+  /* Get a native accessible for the plugin on Linux.
+   * This is expected to be an AtkObject.
+   * Introduced in Gecko 1.9.2.4.
+   */
+  , NPPVpluginNativeAccessibleAtkPlugId = 19
+#endif
+
+  , NPPVcursor = 9999
 
 #ifdef XP_MACOSX
   /* Used for negotiating drawing models */
Index: plugin/plugin-accessibility-bridge.cpp
===================================================================
new file mode 100644
--- plugin/plugin-accessibility-bridge.h	(revision 0)
+++ plugin/plugin-accessibility-bridge.h	(revision 0)
@@ -0,0 +1,92 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
+/*
+ * plugin-accessibility-bridge.h: Glue between Moonlight.AtkBridge and NPAPI.
+ *
+ * Contact:
+ *   Moonlight Accessibility List (mono-a11y@forge.novell.com)
+ *
+ * Copyright 2010 Novell, Inc. (http://www.novell.com)
+ *
+ * See the LICENSE file included with the distribution for details.
+ *
+ */
+
+#ifndef MOON_PLUGIN_ACCESSIBILITY_BRIDGE
+#define MOON_PLUGIN_ACCESSIBILITY_BRIDGE
+
+#if !INCLUDED_MONO_HEADERS
+typedef struct _MonoAssembly MonoAssembly;
+typedef struct _MonoClass MonoClass;
+typedef struct _MonoDomain MonoDomain;
+typedef struct _MonoImage MonoImage;
+typedef struct _MonoMethod MonoMethod;
+typedef struct _MonoObject MonoObject;
+typedef struct _MonoProperty MonoProperty;
+#endif
+
+#include <config.h>
+
+#ifdef PAL_GTK_WINDOWING
+#include <atk/atk.h>
+#endif
+
+class AccessibilityBridge {
+public:
+	AccessibilityBridge ();
+
+	void Initialize ();
+	void Shutdown ();
+
+	/* @GenerateCBinding,GeneratePInvoke */
+	bool IsAccessibilityEnabled ();
+
+#if PAL_GTK_WINDOWING
+	AtkObject* GetRootAccessible ();
+#endif
+
+private:
+#if PAL_GTK_WINDOWING
+	static void StartAtkBridge ();
+	static void ShutdownAtkBridge ();
+#endif
+
+	bool is_accessibility_enabled;
+	MonoAssembly* bridge_asm;
+	MonoClass* automation_bridge_class;
+	MonoObject* automation_bridge;
+};
+
+
+#if PAL_GTK_WINDOWING
+
+G_BEGIN_DECLS
+
+#define MOON_TYPE_ATK_ROOT		(moon_atk_root_get_type ())
+#define MOON_ATK_ROOT(obj)		(G_TYPE_CHECK_INSTANCE_CAST ((obj), MOON_TYPE_ATK_ROOT, MoonAtkRoot))
+#define MOON_IS_ATK_ROOT(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), MOON_TYPE_ATK_ROOT))
+#define MOON_ATK_ROOT_CLASS(klass)	(G_TYPE_CHECK_CLASS_CAST ((klass), MOON_TYPE_ATK_ROOT, MoonAtkRootClass))
+#define MOON_IS_ATK_ROOT_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), MOON_TYPE_ATK_ROOT))
+#define MOON_ATK_ROOT_GET_CLASS(obj)	(G_TYPE_INSTANCE_GET_CLASS ((obj), MOON_TYPE_ATK_ROOT, MoonAtkRootClass))
+
+typedef struct _MoonAtkRoot		MoonAtkRoot;
+typedef struct _MoonAtkRootClass	MoonAtkRootClass;
+
+struct _MoonAtkRoot
+{
+	AtkPlug parent;
+};
+
+struct _MoonAtkRootClass
+{
+	AtkPlugClass parent_class;
+};
+
+GType moon_atk_root_get_type (void);
+
+AtkObject* moon_atk_root_new ();
+
+G_END_DECLS
+
+#endif /* PAL_GTK_WINDOWING */
+
+#endif /* MOON_PLUGIN_ACCESSIBILITY_BRIDGE */
--- plugin/plugin-accessibility-bridge.cpp	(revision 0)
+++ plugin/plugin-accessibility-bridge.cpp	(revision 0)
@@ -0,0 +1,302 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
+/*
+ * plugin-accessibility-bridge.h: Glue between Moonlight.AtkBridge and NPAPI.
+ *
+ * Contact:
+ *   Moonlight Accessibility List (mono-a11y@forge.novell.com)
+ *
+ * Copyright 2010 Novell, Inc. (http://www.novell.com)
+ *
+ * See the LICENSE file included with the distribution for details.
+*
+ */
+
+#define INCLUDED_MONO_HEADERS 1
+
+#include <mono/metadata/assembly.h>
+#include <mono/metadata/object.h>
+#include <mono/metadata/class.h>
+#include <mono/metadata/appdomain.h>
+#include <dlfcn.h>
+
+#include "plugin-accessibility-bridge.h"
+#include "plugin.h"
+
+#if PAL_GTK_WINDOWING
+void *atk_bridge_module = NULL;
+AtkObject *accessible_root = NULL;
+#endif
+
+static int moon_atk_root_get_n_children (AtkObject *obj);
+static AtkObject* moon_atk_root_get_parent (AtkObject *obj);
+static AtkObject* moon_atk_root_ref_child (AtkObject *obj, gint i);
+typedef void (*module_init_func) (void);
+
+static void* get_atk_bridge_module ();
+
+// Unfortunately, we need to hardcode the GTK+ module paths, as there
+// is no method, using pkg-config or otherwise, that returns them.
+static const char *GTK_MODULE_PATHS [] = {
+	"/usr/lib64/gtk-2.0/modules",
+	"/usr/lib/gtk-2.0/modules",
+	"/usr/lib64/gtk-2.0/modules/at-spi-dbus/modules",
+	"/usr/lib/gtk-2.0/modules/at-spi-dbus/modules",
+	NULL
+};
+
+static void*
+get_atk_bridge_module ()
+{
+	gchar* path = NULL;
+	gchar* atk_bridge_path = NULL;
+	void* atk_bridge = NULL;
+
+	for (int i = 0; GTK_MODULE_PATHS [i] != NULL; i++) {
+		path = g_module_build_path (GTK_MODULE_PATHS [i],
+					    "atk-bridge");
+		if (g_file_test (path, G_FILE_TEST_EXISTS)) {
+			atk_bridge_path = path;
+			break;
+		}
+
+		g_free (path);
+	}
+
+	if (atk_bridge_path) {
+		atk_bridge = dlopen (atk_bridge_path, RTLD_LAZY);
+		g_free (atk_bridge_path);
+	}
+
+	return atk_bridge;
+}
+
+G_DEFINE_TYPE (MoonAtkRoot, moon_atk_root, ATK_TYPE_OBJECT)
+
+static void
+moon_atk_root_class_init (MoonAtkRootClass *klass)
+{
+	AtkObjectClass *object_class = ATK_OBJECT_CLASS (klass);
+	object_class->get_n_children = moon_atk_root_get_n_children;
+	object_class->ref_child = moon_atk_root_ref_child;
+	object_class->get_parent = moon_atk_root_get_parent;
+}
+
+static void
+moon_atk_root_init (MoonAtkRoot *root)
+{
+}
+
+AtkObject*
+moon_atk_root_new (void)
+{
+	return (AtkObject*) g_object_new (MOON_TYPE_ATK_ROOT, NULL);
+}
+
+static int
+moon_atk_root_get_n_children (AtkObject *obj)
+{
+	if (!plugin_instances)
+		return 0;
+	return g_slist_length (plugin_instances);
+}
+
+static AtkObject*
+moon_atk_root_get_parent (AtkObject *obj)
+{
+	return NULL;
+}
+
+static AtkObject*
+moon_atk_root_ref_child (AtkObject *obj, gint i)
+{
+	g_return_val_if_fail (plugin_instances, NULL);
+
+	PluginInstance* instance;
+
+	instance = (PluginInstance*) g_slist_nth (plugin_instances, i);
+	g_return_val_if_fail (instance, NULL);
+
+	return instance->GetRootAccessible ();
+}
+
+
+AccessibilityBridge::AccessibilityBridge ()
+{
+	char* plugin_dir;
+	char* search;
+	char* extensions_dir;
+	char* filename;
+
+	MonoMethod* accessibility_enabled;
+	MonoImage* image;
+	MonoObject* ret;
+
+	is_accessibility_enabled = FALSE;
+	bridge_asm = NULL;
+	automation_bridge_class = NULL;
+	automation_bridge = NULL;
+
+	// Build a path to MoonAtkBridge.dll
+	plugin_dir = g_strdup (get_plugin_dir ());
+
+	search = strstr (plugin_dir, "moonlight@novell.com");
+	extensions_dir = g_strndup (plugin_dir, search - plugin_dir);
+
+	filename = g_build_filename (
+		extensions_dir,
+		"moonlight-a11y@novell.com",
+		"components",
+		"MoonAtkBridge.dll",
+		NULL
+	);
+
+	g_free (extensions_dir);
+	g_free (plugin_dir);
+
+	bridge_asm = mono_assembly_open (filename, NULL);
+	if (!bridge_asm)
+		return;
+
+	image = mono_assembly_get_image (bridge_asm);
+	g_return_if_fail (image);
+
+	automation_bridge_class
+		= mono_class_from_name (image, "Moonlight.AtkBridge",
+		                        "AutomationBridge");
+	g_return_if_fail (automation_bridge_class);
+
+	accessibility_enabled
+		= mono_class_get_method_from_name (automation_bridge_class,
+		                                   "IsAccessibilityEnabled", 0);
+	g_return_if_fail (accessibility_enabled);
+
+	ret = mono_runtime_invoke (accessibility_enabled, NULL, NULL, NULL);
+	if (!ret) {
+		is_accessibility_enabled = FALSE;
+		return;
+	}
+
+	is_accessibility_enabled
+		= (bool) (*(MonoBoolean *) mono_object_unbox (ret));
+}
+
+bool
+AccessibilityBridge::IsAccessibilityEnabled ()
+{
+	return is_accessibility_enabled;
+}
+
+void
+AccessibilityBridge::Shutdown ()
+{
+	if (!is_accessibility_enabled)
+		return;
+
+	MonoMethod* shutdown;
+
+	shutdown = mono_class_get_method_from_name (automation_bridge_class,
+	                                            "Shutdown", 0);
+	if (shutdown)
+		mono_runtime_invoke (shutdown, automation_bridge, NULL, NULL);
+}
+
+void
+AccessibilityBridge::Initialize ()
+{
+	if (!is_accessibility_enabled)
+		return;
+
+	automation_bridge
+		= mono_object_new (mono_domain_get (), automation_bridge_class);
+	mono_runtime_object_init (automation_bridge);
+
+	g_return_if_fail (automation_bridge);
+
+#if PAL_GTK_WINDOWING
+	atk_bridge_module = get_atk_bridge_module ();
+
+	AccessibilityBridge::StartAtkBridge ();
+#endif
+}
+
+#if PAL_GTK_WINDOWING
+
+AtkObject*
+AccessibilityBridge::GetRootAccessible ()
+{
+	if (!is_accessibility_enabled)
+		return NULL;
+
+	MonoMethod* get_accessible;
+	MonoObject *root;
+	MonoClassField* m_value_field;
+	AtkObject* handle;
+
+	g_return_val_if_fail (automation_bridge, NULL);
+
+	get_accessible
+		= mono_class_get_method_from_name (automation_bridge_class,
+		                                   "GetAccessible", 0);
+	g_return_val_if_fail (get_accessible, NULL);
+
+	root = mono_runtime_invoke (get_accessible,
+	                            automation_bridge, NULL, NULL);
+	if (root == NULL)
+		return NULL;
+
+	m_value_field = mono_class_get_field_from_name (mono_get_intptr_class (),
+	                                                "m_value");
+	g_return_val_if_fail (m_value_field, NULL);
+
+	mono_field_get_value (root, m_value_field, &handle);
+	g_return_val_if_fail (handle, NULL);
+
+	return handle;
+}
+
+void
+AccessibilityBridge::StartAtkBridge ()
+{
+	const gchar *at_bridge_val;
+	bool bridge_disabled = false;
+
+	at_bridge_val = g_getenv ("NO_AT_BRIDGE");
+
+	// If $BROWSER disabled the atk-bridge, temporarily enable it for
+	// ourselves
+	if (at_bridge_val
+	    && g_strcmp0 (at_bridge_val, "1") == 0) {
+		bridge_disabled = true;
+		g_setenv ("NO_AT_BRIDGE", "0", true);
+	}
+
+	// Load and initialize the bridge
+	module_init_func gnome_accessibility_module_init = NULL;
+
+	if (atk_bridge_module) {
+		gnome_accessibility_module_init = (module_init_func) dlsym (
+			atk_bridge_module, "gnome_accessibility_module_init");
+	}
+
+	if (gnome_accessibility_module_init)
+		gnome_accessibility_module_init ();
+
+	// Leave things as we found them
+	if (bridge_disabled)
+		g_setenv ("NO_AT_BRIDGE", "1", true);
+}
+
+void
+AccessibilityBridge::ShutdownAtkBridge ()
+{
+	if (!atk_bridge_module)
+		return;
+
+	module_init_func gnome_accessibility_module_shutdown = NULL;
+	gnome_accessibility_module_shutdown = (module_init_func) dlsym (
+		atk_bridge_module, "gnome_accessibility_module_shutdown");
+	if (gnome_accessibility_module_shutdown)
+		gnome_accessibility_module_shutdown ();
+}
+
+#endif /* PAL_GTK_WINDOWING */
Index: plugin/plugin-accessibility-bridge.h
===================================================================
new file mode 100644
Index: plugin/plugin.h
===================================================================
--- plugin/plugin.h	(revision 156201)
+++ plugin/plugin.h	(working copy)
@@ -14,6 +14,7 @@
 #ifndef MOON_PLUGIN
 #define MOON_PLUGIN
 
+#include "plugin-accessibility-bridge.h"
 #include "moonlight.h"
 
 class MoonlightScriptControlObject;
@@ -28,6 +29,7 @@ typedef void callback_dom_event (gpointer context, char *name, int client_x, int
 				 int key_code, int char_code,
 				 gpointer domEvent);
 
+
 class PluginInstance
 {
  private:
@@ -42,7 +44,14 @@ class PluginInstance
 
 	void Initialize (int argc, char * argn[], char * argv[]);
 	void Shutdown ();
-	
+
+#if PAL_GTK_WINDOWING
+	AtkObject* GetRootAccessible ();
+#endif
+
+	/* @GenerateCBinding,GeneratePInvoke */
+	AccessibilityBridge* GetAccessibilityBridge ();
+
 	// Mozilla plugin related methods
 	NPError GetValue (NPPVariable variable, void *result);
 	NPError SetValue (NPNVariable variable, void *value);
@@ -267,6 +276,8 @@ private:
 	static void splashscreen_error_tickcall (EventObject *data);
 	
 	EVENTHANDLER (PluginInstance, AppDomainUnloadedEvent, Deployment, EventArgs);
+
+	AccessibilityBridge *accessibility_bridge;
 };
 
 extern GSList *plugin_instances;
Index: plugin/plugin.cpp
===================================================================
--- plugin/plugin.cpp	(revision 156201)
+++ plugin/plugin.cpp	(working copy)
@@ -144,6 +144,8 @@ PluginInstance::PluginInstance (NPP instance, guint16 mode)
 	}
 
 	plugin_instances = g_slist_append (plugin_instances, instance);
+
+	accessibility_bridge = new AccessibilityBridge ();
 	
 	/* back pointer to us */
 	instance->pdata = this;
@@ -271,6 +273,8 @@ PluginInstance::Shutdown ()
 	
 	Deployment::SetCurrent (deployment);
 
+	accessibility_bridge->Shutdown ();
+
 	// Destroy the XAP application
 	DestroyApplication ();
 
@@ -625,6 +629,22 @@ PluginInstance::TryLoadBridge (const char *prefix)
 	printf ("Using the %s bridge\n", prefix);
 }
 
+#if PAL_GTK_WINDOWING
+AtkObject*
+PluginInstance::GetRootAccessible ()
+{
+	Deployment::SetCurrent (deployment);
+
+	return accessibility_bridge->GetRootAccessible ();
+}
+#endif
+
+AccessibilityBridge*
+PluginInstance::GetAccessibilityBridge ()
+{
+	return accessibility_bridge;
+}
+
 NPError
 PluginInstance::GetValue (NPPVariable variable, void *result)
 {
@@ -637,6 +657,18 @@ PluginInstance::GetValue (NPPVariable variable, void *result)
 	case NPPVpluginScriptableNPObject:
 		*((NPObject**) result) = GetRootObject ();
 		break;
+#if PAL_GTK_WINDOWING
+	case NPPVpluginNativeAccessibleAtkPlugId:
+		AtkObject* root;
+		root = GetRootAccessible ();
+
+		if (ATK_IS_PLUG (root)) {
+			*((char **)result) = atk_plug_get_id (ATK_PLUG (root));
+		} else {
+			g_warning ("Root Accessible is not an instance of AtkPlug, so it cannot be embedded.");
+		}
+		break;
+#endif
 	default:
 		err = NPERR_INVALID_PARAM;
 		break;
@@ -2024,6 +2056,8 @@ PluginInstance::CreatePluginDeployment ()
 		return false;
 	}
 
+	accessibility_bridge->Initialize ();
+
 	return true;
 }
 
