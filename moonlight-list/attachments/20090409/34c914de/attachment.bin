diff --git class/System.Windows/System.Windows.Automation.Peers/FrameworkElementAutomationPeer.cs class/System.Windows/System.Windows.Automation.Peers/FrameworkElementAutomationPeer.cs
index 25f3a23..6cd7441 100644
--- class/System.Windows/System.Windows.Automation.Peers/FrameworkElementAutomationPeer.cs
+++ class/System.Windows/System.Windows.Automation.Peers/FrameworkElementAutomationPeer.cs
@@ -24,18 +24,21 @@
 //
 
 using System;
-using System.Windows;
 using System.Collections.Generic;
+using System.Windows;
+using System.Windows.Automation;
+using System.Windows.Controls;
 
 namespace System.Windows.Automation.Peers {
 
-	[MonoTODO]
 	public class FrameworkElementAutomationPeer : AutomationPeer {
 
 		private UIElement owner;
 
 		public FrameworkElementAutomationPeer (FrameworkElement owner)
 		{
+			if (owner == null)
+				throw new NullReferenceException ("owner");
 			this.owner = owner;
 		}
 
@@ -45,22 +48,26 @@ namespace System.Windows.Automation.Peers {
 
 		protected override string GetNameCore ()
 		{
-			return String.Empty;
+			return Owner.GetValue (AutomationProperties.NameProperty) as string ?? string.Empty;
 		}
 
 		protected override string GetItemTypeCore ()
 		{
-			throw new NotImplementedException ();
+			return Owner.GetValue (AutomationProperties.ItemTypeProperty) as string ?? string.Empty;
 		}
 
 		protected override AutomationPeer GetLabeledByCore ()
 		{
-			return null;
+			UIElement labeledBy = Owner.GetValue (AutomationProperties.LabeledByProperty) as UIElement;
+			if (labeledBy != null)
+				return FrameworkElementAutomationPeer.CreatePeerForElement (labeledBy);
+			else
+				return null;
 		}
 
 		protected override List<AutomationPeer> GetChildrenCore ()
 		{
-			throw new NotImplementedException ();
+			return null;
 		}
 
 		public override object GetPattern (PatternInterface pattern)
@@ -77,62 +84,64 @@ namespace System.Windows.Automation.Peers {
 		
 		protected override string GetAcceleratorKeyCore ()
 		{
-			throw new NotImplementedException ();
+			return Owner.GetValue (AutomationProperties.AcceleratorKeyProperty) as string ?? string.Empty;
 		}
 		
 		protected override string GetAccessKeyCore ()
 		{
-			throw new NotImplementedException ();
+			return Owner.GetValue (AutomationProperties.AccessKeyProperty) as string ?? string.Empty;
 		}
 		
 		protected override AutomationControlType GetAutomationControlTypeCore ()
 		{
-			throw new NotImplementedException ();
+			return AutomationControlType.Custom;
 		}
 		
 		protected override string GetAutomationIdCore ()
 		{
-			throw new NotImplementedException ();
+			return Owner.GetValue (AutomationProperties.AutomationIdProperty) as string ?? string.Empty;
 		}
 		
 		protected override Rect GetBoundingRectangleCore ()
 		{
-			throw new NotImplementedException ();
+			return new Rect (0, 0, 0, 0);
 		}
 		
 		protected override string GetClassNameCore ()
 		{
-			throw new NotImplementedException ();
+			return Owner.GetValue (AutomationProperties.NameProperty) as string ?? string.Empty;
 		}
 		
 		protected override Point GetClickablePointCore ()
 		{
-			throw new NotImplementedException ();
+			return new Point (0, 0);
 		}
 		
 		protected override string GetHelpTextCore ()
 		{
-			throw new NotImplementedException ();
+			return Owner.GetValue (AutomationProperties.HelpTextProperty) as string ?? string.Empty;
 		}
 		
 		protected override string GetItemStatusCore ()
 		{
-			throw new NotImplementedException ();
+			return Owner.GetValue (AutomationProperties.ItemStatusProperty) as string ?? string.Empty;
 		}
 		
 		protected override string GetLocalizedControlTypeCore ()
 		{
-			throw new NotImplementedException ();
+			// LAMESPEC: http://msdn.microsoft.com/en-us/library/ms743581.aspx
+			// "CamelCase" literal values should be "camel case", not "camelcase"
+			return GetAutomationControlType ().ToString ().ToLower ();
 		}
 		
 		protected override AutomationOrientation GetOrientationCore ()
 		{
-			throw new NotImplementedException ();
+			return AutomationOrientation.None;
 		}
 		
 		protected override bool HasKeyboardFocusCore ()
 		{
-			throw new NotImplementedException ();
+			return false;
 		}
 		
 		protected override bool IsContentElementCore ()
@@ -147,7 +156,7 @@ namespace System.Windows.Automation.Peers {
 		
 		protected override bool IsEnabledCore ()
 		{
-			throw new NotImplementedException ();
+			return true;
 		}
 		
 		protected override bool IsKeyboardFocusableCore ()
@@ -157,22 +166,25 @@ namespace System.Windows.Automation.Peers {
 		
 		protected override bool IsOffscreenCore ()
 		{
-			throw new NotImplementedException ();
+			return false;
 		}
 		
 		protected override bool IsPasswordCore ()
 		{
-			throw new NotImplementedException ();
+			return false;
 		}
 		
 		protected override bool IsRequiredForFormCore ()
 		{
-			throw new NotImplementedException ();
+			bool? isRequired = (bool?) Owner.GetValue (AutomationProperties.IsRequiredForFormProperty);
+			return isRequired.HasValue ? isRequired.Value : false;
 		}
 		
 		protected override void SetFocusCore ()
 		{
-			throw new NotImplementedException ();
+			Control ownerAsControl = Owner as Control;
+			if (ownerAsControl != null)
+				ownerAsControl.Focus ();
 		}
 		
 		public static AutomationPeer CreatePeerForElement (UIElement element)
diff --git test/2.0/moon-unit/System.Windows.Automation.Peers/AutomationControlTypeTest.cs test/2.0/moon-unit/System.Windows.Automation.Peers/AutomationControlTypeTest.cs
index b3564c2..d73165f 100644
--- test/2.0/moon-unit/System.Windows.Automation.Peers/AutomationControlTypeTest.cs
+++ test/2.0/moon-unit/System.Windows.Automation.Peers/AutomationControlTypeTest.cs
@@ -28,7 +28,9 @@
 
 using System;
 using System.Collections.Generic;
+using System.Windows;
 using System.Windows.Automation.Peers;
+using System.Windows.Controls;
 
 using Mono.Moonlight.UnitTesting;
 using Microsoft.VisualStudio.TestTools.UnitTesting;
@@ -81,5 +83,84 @@ namespace MoonTest.System.Windows.Automation.Peers {
 			Assert.AreEqual (37, (int) AutomationControlType.TitleBar, "AutomationControlType.TitleBar");
 			Assert.AreEqual (38, (int) AutomationControlType.Separator, "AutomationControlType.Separator");
 		}
+
+		[TestMethod]
+		public void LiteralValues ()
+		{
+			TestLiteralValue (AutomationControlType.Button, "button");
+			TestLiteralValue (AutomationControlType.Calendar, "calendar");
+			TestLiteralValue (AutomationControlType.CheckBox, "checkbox");
+			TestLiteralValue (AutomationControlType.ComboBox, "combobox");
+			TestLiteralValue (AutomationControlType.Edit, "edit");
+			TestLiteralValue (AutomationControlType.Hyperlink, "hyperlink");
+			TestLiteralValue (AutomationControlType.Image, "image");
+			TestLiteralValue (AutomationControlType.ListItem, "listitem");
+			TestLiteralValue (AutomationControlType.List, "list");
+			TestLiteralValue (AutomationControlType.Menu, "menu");
+			TestLiteralValue (AutomationControlType.MenuBar, "menubar");
+			TestLiteralValue (AutomationControlType.MenuItem, "menuitem");
+			TestLiteralValue (AutomationControlType.ProgressBar, "progressbar");
+			TestLiteralValue (AutomationControlType.RadioButton, "radiobutton");
+			TestLiteralValue (AutomationControlType.ScrollBar, "scrollbar");
+			TestLiteralValue (AutomationControlType.Slider, "slider");
+			TestLiteralValue (AutomationControlType.Spinner, "spinner");
+			TestLiteralValue (AutomationControlType.StatusBar, "statusbar");
+			TestLiteralValue (AutomationControlType.Tab, "tab");
+			TestLiteralValue (AutomationControlType.Text, "text");
+			TestLiteralValue (AutomationControlType.ToolBar, "toolbar");
+			TestLiteralValue (AutomationControlType.ToolTip, "tooltip");
+			TestLiteralValue (AutomationControlType.Tree, "tree");
+			TestLiteralValue (AutomationControlType.TreeItem, "treeitem");
+			TestLiteralValue (AutomationControlType.Custom, "custom");
+			TestLiteralValue (AutomationControlType.Group, "group");
+			TestLiteralValue (AutomationControlType.Thumb, "thumb");
+			TestLiteralValue (AutomationControlType.DataGrid, "datagrid");
+			TestLiteralValue (AutomationControlType.DataItem, "dataitem");
+			TestLiteralValue (AutomationControlType.SplitButton, "splitbutton");
+			TestLiteralValue (AutomationControlType.Window, "window");
+			TestLiteralValue (AutomationControlType.Pane, "pane");
+			TestLiteralValue (AutomationControlType.Header, "header");
+			TestLiteralValue (AutomationControlType.HeaderItem, "headeritem");
+			TestLiteralValue (AutomationControlType.Table, "table");
+			TestLiteralValue (AutomationControlType.TitleBar, "titlebar");
+			TestLiteralValue (AutomationControlType.Separator, "separator");
+		}
+
+		public class ConcreteFrameworkElement : FrameworkElement {
+			
+			protected override AutomationPeer OnCreateAutomationPeer ()
+			{
+				return new ConcreteFrameworkElementAutomationPeer (this);
+			}
+		}
+
+		public class ConcreteFrameworkElementAutomationPeer : FrameworkElementAutomationPeer {
+
+			public ConcreteFrameworkElementAutomationPeer (ConcreteFrameworkElement fe)
+				: base (fe)
+			{
+			}
+
+			protected override AutomationControlType GetAutomationControlTypeCore ()
+			{
+				return ControlType;
+			}
+
+			public AutomationControlType ControlType {
+				private get;
+				set;
+			}
+		}
+
+		private void TestLiteralValue (AutomationControlType controlType, string localizedValue)
+		{
+
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			ConcreteFrameworkElementAutomationPeer peer 
+				= FrameworkElementAutomationPeer.CreatePeerForElement (fe) as ConcreteFrameworkElementAutomationPeer;
+			peer.ControlType = controlType;
+			Assert.AreEqual (localizedValue, peer.GetLocalizedControlType (), string.Format ("Literal value: '{0}'", localizedValue));
+		}
+
 	}
 }
diff --git test/2.0/moon-unit/System.Windows.Automation.Peers/ButtonBaseAutomationPeerTest.cs test/2.0/moon-unit/System.Windows.Automation.Peers/ButtonBaseAutomationPeerTest.cs
index 6a45a11..8ba433d 100644
--- test/2.0/moon-unit/System.Windows.Automation.Peers/ButtonBaseAutomationPeerTest.cs
+++ test/2.0/moon-unit/System.Windows.Automation.Peers/ButtonBaseAutomationPeerTest.cs
@@ -52,7 +52,6 @@ namespace MoonTest.System.Windows.Automation.Peers {
 		}
 
 		[TestMethod]
-		[MoonlightBug]
 		public void Null ()
 		{
 			Assert.Throws<NullReferenceException> (delegate {
diff --git test/2.0/moon-unit/System.Windows.Automation.Peers/FrameworkElementAutomationPeerTest.cs test/2.0/moon-unit/System.Windows.Automation.Peers/FrameworkElementAutomationPeerTest.cs
index bc30bca..83780d9 100644
--- test/2.0/moon-unit/System.Windows.Automation.Peers/FrameworkElementAutomationPeerTest.cs
+++ test/2.0/moon-unit/System.Windows.Automation.Peers/FrameworkElementAutomationPeerTest.cs
@@ -27,7 +27,9 @@
 //
 
 using System;
+using System.Collections.Generic;
 using System.Windows;
+using System.Windows.Automation;
 using System.Windows.Automation.Peers;
 using System.Windows.Automation.Provider;
 using System.Windows.Controls;
@@ -49,10 +51,14 @@ namespace MoonTest.System.Windows.Automation.Peers {
 		}
 
 		public class ConcreteFrameworkElement : FrameworkElement {
+			
+			protected override AutomationPeer OnCreateAutomationPeer ()
+			{
+				return new FrameworkElementAutomationPeerPoker (this);
+			}
 		}
 
 		[TestMethod]
-		[MoonlightBug]
 		public void Null ()
 		{
 			Assert.Throws<NullReferenceException> (delegate {
@@ -111,6 +117,420 @@ namespace MoonTest.System.Windows.Automation.Peers {
 			{
 				return base.IsControlElementCore ();
 			}
+
+			public string GetAcceleratorKeyCore_ ()
+			{
+				return base.GetAcceleratorKeyCore ();
+			}
+
+			public string GetAccessKeyCore_ ()
+			{
+				return base.GetAccessKeyCore ();
+			}
+
+			public AutomationControlType GetAutomationControlTypeCore_()
+			{
+				return base.GetAutomationControlTypeCore ();
+			}
+
+			public string GetAutomationIdCore_ ()
+			{
+				return base.GetAutomationIdCore ();
+			}
+
+			public Rect GetBoundingRectangleCore_ ()
+			{
+				return base.GetBoundingRectangleCore ();
+			}
+
+			public List<AutomationPeer> GetChildrenCore_ ()
+			{
+				return base.GetChildrenCore ();
+			}
+
+			public Point GetClickablePointCore_ ()
+			{
+				return base.GetClickablePointCore ();
+			}
+
+			public string GetHelpTextCore_ ()
+			{
+				return base.GetHelpTextCore ();
+			}
+
+			public string GetItemStatusCore_ ()
+			{
+				return base.GetItemStatusCore ();
+			}
+
+			public string GetItemTypeCore_ ()
+			{
+				return base.GetItemTypeCore ();
+			}
+
+			public string GetLocalizedControlTypeCore_ ()
+			{
+				return base.GetLocalizedControlTypeCore ();
+			}
+
+			public AutomationOrientation GetOrientationCore_ ()
+			{
+				return base.GetOrientationCore ();
+			}
+
+			public bool HasKeyboardFocusCore_ ()
+			{
+				return base.HasKeyboardFocusCore ();
+			}
+
+			public bool IsEnabledCore_ ()
+			{
+				return base.IsEnabledCore ();
+			}
+
+			public bool IsKeyboardFocusableCore_ ()
+			{
+				return base.IsKeyboardFocusableCore ();
+			}
+
+			public bool IsOffscreenCore_ ()
+			{
+				return base.IsOffscreenCore ();
+			}
+
+			public bool IsPasswordCore_ ()
+			{
+				return base.IsPasswordCore ();
+			}
+
+			public bool IsRequiredForFormCore_ ()
+			{
+				return base.IsRequiredForFormCore ();
+			}
+
+			public string GetClassNameCore_ ()
+			{
+				return base.GetClassNameCore ();
+			}
+		}
+
+		[TestMethod]
+		public void GetAcceleratorKey ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (string.Empty, feap.GetAcceleratorKey (), "GetAcceleratorKey");
+			Assert.AreEqual (string.Empty, feap.GetAcceleratorKeyCore_ (), "GetAcceleratorKeyCore");
+		}
+
+		[TestMethod]
+		public void GetAcceleratorKey_AttachedProperty ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (string.Empty, feap.GetAcceleratorKey (), "GetAcceleratorKey #0");
+			Assert.AreEqual (string.Empty, feap.GetAcceleratorKeyCore_ (), "GetAcceleratorKeyCore #0");
+
+			string acceleratorKey = "CTRL+C";
+
+			fe.SetValue (AutomationProperties.AcceleratorKeyProperty, acceleratorKey);
+			Assert.AreEqual (acceleratorKey, feap.GetAcceleratorKey (), "GetAcceleratorKey #1");
+			Assert.AreEqual (acceleratorKey, feap.GetAcceleratorKeyCore_ (), "GetAcceleratorKeyCore #1");
+
+			fe.SetValue (AutomationProperties.AcceleratorKeyProperty, null);
+			Assert.AreEqual (string.Empty, feap.GetAcceleratorKey (), "GetAcceleratorKey #2 YY");
+			Assert.AreEqual (string.Empty, feap.GetAcceleratorKeyCore_ (), "GetAcceleratorKeyCore #2 YY");
+		}
+
+		[TestMethod]
+		public void GetClassNameCore ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (string.Empty, feap.GetClassName (), "GetClassNameCore");
+			Assert.AreEqual (string.Empty, feap.GetClassNameCore_ (), "GetClassNameCoreCore");
+
+			feap = FrameworkElementAutomationPeer.CreatePeerForElement (fe) as FrameworkElementAutomationPeerPoker;
+			Assert.AreEqual (string.Empty, feap.GetClassName(), "GetClassNameCore");
+			Assert.AreEqual (string.Empty, feap.GetClassNameCore_(), "GetClassNameCoreCore");
+		}
+
+		[TestMethod]
+		public void GetAccessKey ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (string.Empty, feap.GetAccessKey (), "GetAccessKey");
+			Assert.AreEqual (string.Empty, feap.GetAccessKeyCore_ (), "GetAccessKeyCore");
+		}
+
+		[TestMethod]
+		public void GetAccessKey_AttachedProperty ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (string.Empty, feap.GetAccessKey (), "GetAccessKey");
+			Assert.AreEqual (string.Empty, feap.GetAccessKeyCore_ (), "GetAccessKeyCore");
+
+			string accessKey = "ALT+C";
+
+			fe.SetValue (AutomationProperties.AccessKeyProperty, accessKey);
+			Assert.AreEqual (accessKey, feap.GetAccessKey (), "GetAccessKey #1");
+			Assert.AreEqual (accessKey, feap.GetAccessKeyCore_ (), "GetAccessKeyCore #1");
+
+			fe.SetValue (AutomationProperties.AccessKeyProperty, null);
+			Assert.AreEqual (string.Empty, feap.GetAccessKey (), "GetAccessKey #2");
+			Assert.AreEqual (string.Empty, feap.GetAccessKeyCore_ (), "GetAccessKeyCore #2");
+		}
+
+		[TestMethod]
+		public void GetAutomationControlType ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker(fe);
+			Assert.AreEqual (AutomationControlType.Custom, feap.GetAutomationControlType (), "GetAutomationControlType");
+			Assert.AreEqual (AutomationControlType.Custom, feap.GetAutomationControlTypeCore_ (), "GetAutomationControlTypeCore");
+		}
+
+		[TestMethod]
+		public void GetAutomationId ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (string.Empty, feap.GetAutomationId (), "GetAutomationId");
+			Assert.AreEqual (string.Empty, feap.GetAutomationIdCore_ (), "GetAutomationIdCore");
+		}
+
+		[TestMethod]
+		public void GetAutomationId_AttachedProperty()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker(fe);
+			Assert.AreEqual (string.Empty, feap.GetAutomationId (), "GetAutomationId");
+			Assert.AreEqual (string.Empty, feap.GetAutomationIdCore_(), "GetAutomationIdCore");
+
+			string automationId = "MyAttachedAutomationId";
+
+			fe.SetValue(AutomationProperties.AutomationIdProperty, automationId);
+			Assert.AreEqual (automationId, feap.GetAutomationId (), "GetAutomationId #1");
+			Assert.AreEqual (automationId, feap.GetAutomationIdCore_(), "GetAutomationIdCore #1");
+
+			fe.SetValue (AutomationProperties.AutomationIdProperty, null);
+			Assert.AreEqual (string.Empty, feap.GetAutomationId (), "GetAutomationId #2");
+			Assert.AreEqual (string.Empty, feap.GetAutomationIdCore_ (), "GetAutomationIdCore #2");
+		}
+
+		[TestMethod]
+		public void GetBoundingRectangle ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Rect boundingRectangle = feap.GetBoundingRectangle ();
+			Assert.AreEqual (0, boundingRectangle.X, "GetBoundingRectangle X");
+			Assert.AreEqual (0, boundingRectangle.Y, "GetBoundingRectangle Y");
+			Assert.AreEqual (0, boundingRectangle.Width, "GetBoundingRectangle Width");
+			Assert.AreEqual (0, boundingRectangle.Height, "GetBoundingRectangle Height");
+
+			boundingRectangle = feap.GetBoundingRectangleCore_ ();
+			Assert.AreEqual (0, boundingRectangle.X, "GetBoundingRectangleCore X");
+			Assert.AreEqual (0, boundingRectangle.Y, "GetBoundingRectangleCore Y");
+			Assert.AreEqual (0, boundingRectangle.Width, "GetBoundingRectangleCore Width");
+			Assert.AreEqual (0, boundingRectangle.Height, "GetBoundingRectangleCore Height");
+
+			Assert.AreNotSame (Rect.Empty, boundingRectangle, "GetBoundingRectangleCore Isempty");
+		}
+
+		[TestMethod]
+		public void GetChildren ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (null, feap.GetChildren (), "GetChildren");
+			Assert.AreEqual (null, feap.GetChildrenCore_ (), "GetChildrenCore");
+		}
+
+		[TestMethod]
+		public void GetClickablePoint ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (0, feap.GetClickablePoint ().X, "GetClickablePoint X");
+			Assert.AreEqual (0, feap.GetClickablePoint ().Y, "GetClickablePoint Y");
+			Assert.AreEqual (0, feap.GetClickablePointCore_ ().X, "GetClickablePointCore X");
+			Assert.AreEqual (0, feap.GetClickablePointCore_ ().Y, "GetClickablePointCore Y");
+		}
+
+		[TestMethod]
+		public void GetHelpText ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (string.Empty, feap.GetHelpText (), "GetHelpText");
+			Assert.AreEqual (string.Empty, feap.GetHelpTextCore_ (), "GetHelpTextCore");
+		}
+
+		[TestMethod]
+		public void GetHelpText_AttachedProperty ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (string.Empty, feap.GetHelpText (), "GetHelpText");
+			Assert.AreEqual (string.Empty, feap.GetHelpTextCore_ (), "GetHelpTextCore");
+
+			string helpText = "My Help Text property";
+
+			fe.SetValue(AutomationProperties.HelpTextProperty, helpText);
+			Assert.AreEqual (helpText, feap.GetHelpText (), "GetHelpText #1");
+			Assert.AreEqual (helpText, feap.GetHelpTextCore_ (), "GetHelpTextCore #1");
+
+			fe.SetValue (AutomationProperties.HelpTextProperty, null);
+			Assert.AreEqual (string.Empty, feap.GetHelpText (), "GetHelpText #2");
+			Assert.AreEqual (string.Empty, feap.GetHelpTextCore_ (), "GetHelpTextCore #2");
+		}
+		
+		[TestMethod]
+		public void GetItemStatus ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (string.Empty, feap.GetItemStatus (), "GetItemStatus");
+			Assert.AreEqual (string.Empty, feap.GetItemStatusCore_ (), "GetItemStatusCore");
+		}
+
+		[TestMethod]
+		public void GetItemStatus_AttachedProperty()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (string.Empty, feap.GetItemStatus (), "GetItemStatus");
+			Assert.AreEqual (string.Empty, feap.GetItemStatusCore_ (), "GetItemStatusCore");
+
+			string itemStatus = "My Item Status";
+
+			fe.SetValue (AutomationProperties.ItemStatusProperty, itemStatus);
+			Assert.AreEqual (itemStatus, feap.GetItemStatus (), "GetItemStatus #1");
+			Assert.AreEqual (itemStatus, feap.GetItemStatusCore_ (), "GetItemStatusCore #1");
+
+			fe.SetValue (AutomationProperties.ItemStatusProperty, null);
+			Assert.AreEqual (string.Empty, feap.GetItemStatus (), "GetItemStatus #2");
+			Assert.AreEqual (string.Empty, feap.GetItemStatusCore_ (), "GetItemStatusCore #2");
+		}
+
+		[TestMethod]
+		public void GetItemType ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (string.Empty, feap.GetItemType (), "GetItemType");
+			Assert.AreEqual (string.Empty, feap.GetItemTypeCore_ (), "GetItemTypeCore");
+		}
+
+		[TestMethod]
+		public void GetItemType_AttachedProperty()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (string.Empty, feap.GetItemType (), "GetItemType");
+			Assert.AreEqual (string.Empty, feap.GetItemTypeCore_ (), "GetItemTypeCore");
+
+			string itemType = "My Item Type";
+
+			fe.SetValue (AutomationProperties.ItemTypeProperty, itemType);
+			Assert.AreEqual (itemType, feap.GetItemType (), "GetItemType #1");
+			Assert.AreEqual (itemType, feap.GetItemTypeCore_ (), "GetItemTypeCore #1");
+
+			fe.SetValue (AutomationProperties.ItemTypeProperty, null);
+			Assert.AreEqual (string.Empty, feap.GetItemType (), "GetItemType #2");
+			Assert.AreEqual (string.Empty, feap.GetItemTypeCore_ (), "GetItemTypeCore #2");
+		}
+
+		[TestMethod]
+		public void GetLocalizedControlType ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual ("custom", feap.GetLocalizedControlType (), "GetLocalizedControlType");
+			Assert.AreEqual ("custom", feap.GetLocalizedControlTypeCore_ (), "GetLocalizedControlTypeCore");
+		}
+
+		[TestMethod]
+		public void GetOrientation ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (AutomationOrientation.None, feap.GetOrientation (), "GetOrientation");
+			Assert.AreEqual (AutomationOrientation.None, feap.GetOrientationCore_ (), "GetOrientationCore");
+		}
+
+		[TestMethod]
+		public void HasKeyboardFocus ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.IsFalse (feap.HasKeyboardFocus (), "HasKeyboardFocus");
+			Assert.IsFalse (feap.HasKeyboardFocusCore_ (), "HasKeyboardFocusCore");
+		}
+
+		[TestMethod]
+		public void IsKeyboardFocusable ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.IsFalse (feap.IsKeyboardFocusable (), "IsKeyboardFocusable");
+			Assert.IsFalse (feap.IsKeyboardFocusableCore_ (), "IsKeyboardFocusableCore");
+		}
+
+		[TestMethod]
+		public void IsEnabled ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.IsTrue (feap.IsEnabled (), "IsEnabled");
+			Assert.IsTrue (feap.IsEnabledCore_ (), "IsEnabledCore");
+		}
+
+		[TestMethod]
+		public void IsOffScreen ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.IsFalse (feap.IsOffscreen (), "IsOffScreen");
+			Assert.IsFalse (feap.IsOffscreenCore_ (), "IsOffScreenCore");
+		}
+
+		[TestMethod]
+		public void IsPassword ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.IsFalse (feap.IsPassword (), "IsPassword");
+			Assert.IsFalse (feap.IsPasswordCore_ (), "IsPasswordCore");
+		}
+
+		[TestMethod]
+		public void IsRequiredForForm ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.IsFalse (feap.IsRequiredForForm (), "IsRequiredForForm");
+			Assert.IsFalse (feap.IsRequiredForFormCore_ (), "IsRequiredForFormCore");
+		}
+
+		[TestMethod]
+		public void IsRequiredForForm_AttachedProperty ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.IsFalse (feap.IsRequiredForForm (), "IsRequiredForForm");
+			Assert.IsFalse (feap.IsRequiredForFormCore_ (), "IsRequiredForFormCore");
+
+			fe.SetValue (AutomationProperties.IsRequiredForFormProperty, true);
+			Assert.IsTrue (feap.IsRequiredForForm (), "IsRequiredForForm #1");
+			Assert.IsTrue (feap.IsRequiredForFormCore_ (), "IsRequiredForFormCore #1");
+
+			fe.SetValue (AutomationProperties.IsRequiredForFormProperty, false);
+			Assert.IsFalse (feap.IsRequiredForForm (), "IsRequiredForForm #2");
+			Assert.IsFalse (feap.IsRequiredForFormCore_ (), "IsRequiredForFormCore #2");
 		}
 
 		[TestMethod]
@@ -123,6 +543,25 @@ namespace MoonTest.System.Windows.Automation.Peers {
 		}
 
 		[TestMethod]
+		public void GetName_AttachedProperty()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap = new FrameworkElementAutomationPeerPoker (fe);
+			Assert.AreEqual (string.Empty, feap.GetName (), "GetName");
+			Assert.AreEqual (string.Empty, feap.GetNameCore_ (), "GetNameCore");
+
+			string name = "Attached Name";
+
+			fe.SetValue (AutomationProperties.NameProperty, name);
+			Assert.AreEqual (name, feap.GetName (), "GetName #1");
+			Assert.AreEqual (name, feap.GetNameCore_ (), "GetNameCore #1");
+
+			fe.SetValue (AutomationProperties.NameProperty, null);
+			Assert.AreEqual (string.Empty, feap.GetName (), "GetName #2");
+			Assert.AreEqual (string.Empty, feap.GetNameCore_ (), "GetNameCore #2");
+		}
+
+		[TestMethod]
 		public void GetLabeledBy ()
 		{
 			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
@@ -132,6 +571,28 @@ namespace MoonTest.System.Windows.Automation.Peers {
 		}
 
 		[TestMethod]
+		public void GetLabeledBy_AttachedProperty ()
+		{
+			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker feap
+				= FrameworkElementAutomationPeer.CreatePeerForElement (fe) as FrameworkElementAutomationPeerPoker;
+			Assert.IsNull (feap.GetLabeledBy (), "GetLabeledBy");
+			Assert.IsNull (feap.GetLabeledByCore_ (), "GetLabeledByCore");
+
+			ConcreteFrameworkElement labeledBy = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker labeledByPeer
+				= FrameworkElementAutomationPeer.CreatePeerForElement (labeledBy) as FrameworkElementAutomationPeerPoker;
+
+			fe.SetValue (AutomationProperties.LabeledByProperty, labeledBy);
+			Assert.AreSame (labeledByPeer, feap.GetLabeledBy (), "GetLabeledBy #1 -");
+			Assert.AreSame (labeledByPeer, feap.GetLabeledByCore_ (), "GetLabeledByCore #1 -");
+
+			fe.SetValue (AutomationProperties.LabeledByProperty, null);
+			Assert.IsNull (feap.GetLabeledBy (), "GetLabeledBy #2");
+			Assert.IsNull (feap.GetLabeledByCore_ (), "GetLabeledByCore #2");
+		}
+
+		[TestMethod]
 		public void IsContentElement ()
 		{
 			ConcreteFrameworkElement fe = new ConcreteFrameworkElement ();
@@ -167,15 +628,18 @@ namespace MoonTest.System.Windows.Automation.Peers {
 			AutomationPeer peer2 = FrameworkElementAutomationPeer.CreatePeerForElement (b);
 			Assert.AreNotSame (peer1, peer2, "#2");
 		}
-//		// Uncomment when we implement ButtonAutomationPeer
-//		[TestMethod]
-//		public void CreatePeer3 ()
-//		{
-//			Button b = new Button ();
-//			ButtonAutomationPeer peer1 = new ButtonAutomationPeer (b);
-//			AutomationPeer peer2 = FrameworkElementAutomationPeer.CreatePeerForElement (b);
-//			Assert.AreNotSame (peer1, peer2, "#2");
-//		}
+		
+		[TestMethod]
+		public void CreatePeer3()
+		{
+			ConcreteFrameworkElement element = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeerPoker peer = new FrameworkElementAutomationPeerPoker (element);
+			AutomationPeer realPeer = FrameworkElementAutomationPeer.CreatePeerForElement (element);
+			Assert.AreNotSame (peer, realPeer, "#0");
+
+			AutomationPeer anotherRealPeer = FrameworkElementAutomationPeer.CreatePeerForElement(element);
+			Assert.AreSame (anotherRealPeer, realPeer, "#1");
+		}
 
 		[TestMethod]
 		public void FindPeer ()
@@ -193,5 +657,14 @@ namespace MoonTest.System.Windows.Automation.Peers {
 			peer2 = FrameworkElementAutomationPeer.FromElement (b);
 			Assert.AreSame (peer1, peer2, "#4");
 		}
+
+		[TestMethod]
+		public void Owner ()
+		{
+			ConcreteFrameworkElement element = new ConcreteFrameworkElement ();
+			FrameworkElementAutomationPeer realPeer 
+				= FrameworkElementAutomationPeer.CreatePeerForElement (element) as FrameworkElementAutomationPeer;
+			Assert.AreSame (element, realPeer.Owner, "#0");
+		}
 	}
 }
diff --git test/2.0/moon-unit/System.Windows.Automation.Peers/ItemAutomationPeerTest.cs test/2.0/moon-unit/System.Windows.Automation.Peers/ItemAutomationPeerTest.cs
index 9958c9e..cc3718a 100644
--- test/2.0/moon-unit/System.Windows.Automation.Peers/ItemAutomationPeerTest.cs
+++ test/2.0/moon-unit/System.Windows.Automation.Peers/ItemAutomationPeerTest.cs
@@ -68,7 +68,6 @@ namespace MoonTest.System.Windows.Automation.Peers {
 		}
 
 		[TestMethod]
-		[MoonlightBug]
 		public void Null ()
 		{
 			Assert.Throws<NullReferenceException> (delegate {
diff --git test/2.0/moon-unit/System.Windows.Automation.Peers/ItemsControlAutomationPeerTest.cs test/2.0/moon-unit/System.Windows.Automation.Peers/ItemsControlAutomationPeerTest.cs
index f7e9f08..eecf874 100644
--- test/2.0/moon-unit/System.Windows.Automation.Peers/ItemsControlAutomationPeerTest.cs
+++ test/2.0/moon-unit/System.Windows.Automation.Peers/ItemsControlAutomationPeerTest.cs
@@ -55,7 +55,6 @@ namespace MoonTest.System.Windows.Automation.Peers {
 		}
 
 		[TestMethod]
-		[MoonlightBug]
 		public void Null ()
 		{
 			Assert.Throws<NullReferenceException> (delegate {
diff --git test/2.0/moon-unit/System.Windows.Automation.Peers/RangeBaseAutomationPeerTest.cs test/2.0/moon-unit/System.Windows.Automation.Peers/RangeBaseAutomationPeerTest.cs
index 169d818..a17be40 100644
--- test/2.0/moon-unit/System.Windows.Automation.Peers/RangeBaseAutomationPeerTest.cs
+++ test/2.0/moon-unit/System.Windows.Automation.Peers/RangeBaseAutomationPeerTest.cs
@@ -40,7 +40,6 @@ namespace MoonTest.System.Windows.Automation.Peers {
 	public class RangeBaseAutomationPeerTest {
 
 		[TestMethod]
-		[MoonlightBug]
 		public void Null ()
 		{
 			Assert.Throws<NullReferenceException> (delegate {
diff --git test/2.0/moon-unit/System.Windows.Automation.Peers/RepeatButtonAutomationPeerTest.cs test/2.0/moon-unit/System.Windows.Automation.Peers/RepeatButtonAutomationPeerTest.cs
index b69fe4f..98d3ace 100644
--- test/2.0/moon-unit/System.Windows.Automation.Peers/RepeatButtonAutomationPeerTest.cs
+++ test/2.0/moon-unit/System.Windows.Automation.Peers/RepeatButtonAutomationPeerTest.cs
@@ -40,7 +40,6 @@ namespace MoonTest.System.Windows.Automation.Peers {
 	public class RepeatButtonAutomationPeerTest {
 
 		[TestMethod]
-		[MoonlightBug]
 		public void Null ()
 		{
 			Assert.Throws<NullReferenceException> (delegate {
diff --git test/2.0/moon-unit/System.Windows.Automation.Peers/SliderAutomationPeerTest.cs test/2.0/moon-unit/System.Windows.Automation.Peers/SliderAutomationPeerTest.cs
index 548dd5d..e81c65d 100644
--- test/2.0/moon-unit/System.Windows.Automation.Peers/SliderAutomationPeerTest.cs
+++ test/2.0/moon-unit/System.Windows.Automation.Peers/SliderAutomationPeerTest.cs
@@ -41,7 +41,6 @@ namespace MoonTest.System.Windows.Automation.Peers {
 	public class SliderAutomationPeerTest {
 
 		[TestMethod]
-		[MoonlightBug]
 		public void Null ()
 		{
 			Assert.Throws<NullReferenceException> (delegate {
diff --git test/2.0/moon-unit/System.Windows.Automation.Peers/TextBlockAutomationPeerTest.cs test/2.0/moon-unit/System.Windows.Automation.Peers/TextBlockAutomationPeerTest.cs
index 096ef51..e0cd3b3 100644
--- test/2.0/moon-unit/System.Windows.Automation.Peers/TextBlockAutomationPeerTest.cs
+++ test/2.0/moon-unit/System.Windows.Automation.Peers/TextBlockAutomationPeerTest.cs
@@ -67,7 +67,6 @@ namespace MoonTest.System.Windows.Automation.Peers {
 		}
 
 		[TestMethod]
-		[MoonlightBug]
 		public void Null ()
 		{
 			Assert.Throws<NullReferenceException> (delegate {
diff --git test/2.0/moon-unit/System.Windows.Automation.Peers/ThumbAutomationPeerTest.cs test/2.0/moon-unit/System.Windows.Automation.Peers/ThumbAutomationPeerTest.cs
index 18eeb74..8f76ccc 100644
--- test/2.0/moon-unit/System.Windows.Automation.Peers/ThumbAutomationPeerTest.cs
+++ test/2.0/moon-unit/System.Windows.Automation.Peers/ThumbAutomationPeerTest.cs
@@ -39,7 +39,6 @@ namespace MoonTest.System.Windows.Automation.Peers {
 	public class ThumbAutomationPeerTest {
 
 		[TestMethod]
-		[MoonlightBug]
 		public void Null ()
 		{
 			Assert.Throws<NullReferenceException> (delegate {
