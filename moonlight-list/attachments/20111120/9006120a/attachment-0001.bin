diff --git a/m4/mozilla.m4 b/m4/mozilla.m4
index 2b312e2..77d0aa3 100644
--- a/m4/mozilla.m4
+++ b/m4/mozilla.m4
@@ -16,7 +16,7 @@ AC_DEFUN([MOONLIGHT_CHECK_MOZILLA],
 		[], [with_ff4=yes])
 
 	if test x$with_ff4 = xyes -a x$browser_support = xyes; then
-		FF4_MODULES="libxul >= 2.0 mozilla-plugin >= 2.0 mozilla-js >= 2.0"
+		FF4_MODULES="libxul >= 2.0 mozilla-plugin >= 2.0 mozjs185"
 
 		PKG_CHECK_EXISTS($FF4_MODULES,
 			[with_ff4=yes],
diff --git a/src/pipeline-ffmpeg.cpp b/src/pipeline-ffmpeg.cpp
index cfef31e..1991b3f 100644
--- a/src/pipeline-ffmpeg.cpp
+++ b/src/pipeline-ffmpeg.cpp
@@ -141,7 +141,7 @@ FfmpegDecoder::OpenDecoderAsyncInternal ()
 		VideoStream *vs = (VideoStream*) stream;
 		context->width = vs->GetWidth ();
 		context->height = vs->GetHeight ();
-		context->codec_type = CODEC_TYPE_VIDEO;
+		context->codec_type = AVMEDIA_TYPE_VIDEO;
 		if (!strcmp (vs->GetCodec (), "h264")) {
 			/* h264 apparently supports a 444/422 color space too, but it won't work with SL (which will only decode 420)
 			 * ffmpeg doesn't seem to support 444/422 either, so it's not testable really
@@ -156,7 +156,7 @@ FfmpegDecoder::OpenDecoderAsyncInternal ()
 		context->channels = as->GetChannels ();
 		context->bit_rate = as->GetBitRate ();
 		context->block_align = as->GetBlockAlign ();
-		context->codec_type = CODEC_TYPE_AUDIO;
+		context->codec_type = AVMEDIA_TYPE_AUDIO;
 		audio_buffer = (guint8*) av_mallocz (AUDIO_BUFFER_SIZE);
 	} else {
 		ReportErrorOccurred ("Invalid stream type in FfmpegDecoder");
@@ -861,8 +861,8 @@ FfmpegDemuxer::Open ()
 
 	/* Count the streams that we will actually use */
 	for (unsigned int i = 0; i < format_context->nb_streams; i++) {
-		if (format_context->streams [i]->codec->codec_type == CODEC_TYPE_VIDEO ||
-			(format_context->streams [i]->codec->codec_type == CODEC_TYPE_AUDIO)) {
+		if (format_context->streams [i]->codec->codec_type == AVMEDIA_TYPE_VIDEO ||
+			(format_context->streams [i]->codec->codec_type == AVMEDIA_TYPE_AUDIO)) {
 			number_of_streams++;
 		}
 	}
@@ -877,7 +877,7 @@ FfmpegDemuxer::Open ()
 		AVCodecContext *codec_context = format_context->streams [i]->codec;
 		ffmpeg_to_moon_index [i] = -1;
 
-		if (codec_context->codec_type == CODEC_TYPE_VIDEO) {
+		if (codec_context->codec_type == AVMEDIA_TYPE_VIDEO) {
 			VideoStream *video = new VideoStream (media);
 
 			video->SetWidth (codec_context->width);
@@ -887,7 +887,7 @@ FfmpegDemuxer::Open ()
 			video->SetPtsPerFrame (PTS_PER_MILLISECOND * 1000ULL * format_context->streams [i]->time_base.num / format_context->streams [i]->time_base.den);
 
 			stream = video;
-		} else if (codec_context->codec_type == CODEC_TYPE_AUDIO) {
+		} else if (codec_context->codec_type == AVMEDIA_TYPE_AUDIO) {
 			AudioStream* audio = new AudioStream (media);
 
 			audio->SetChannels (codec_context->channels);
@@ -980,7 +980,7 @@ FfmpegDemuxer::GetFrame (IMediaStream *stream)
 		}
 
 		frame->AddState (MediaFrameDemuxed);
-		if (packet.flags & PKT_FLAG_KEY)
+		if (packet.flags & AV_PKT_FLAG_KEY)
 			frame->AddState (MediaFrameKeyFrame);
 
 		av_free_packet (&packet);

