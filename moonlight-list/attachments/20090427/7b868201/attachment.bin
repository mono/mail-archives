Index: src/cbinding.h
===================================================================
--- src/cbinding.h	(revision 132775)
+++ src/cbinding.h	(working copy)
@@ -226,9 +226,6 @@
  * CollectionChangedEventArgs
  **/
 /* @GeneratePInvoke */
-CollectionChangedEventArgs *collection_changed_event_args_new (void);
-
-/* @GeneratePInvoke */
 CollectionChangedAction collection_changed_event_args_get_changed_action (CollectionChangedEventArgs *instance);
 
 /* @GeneratePInvoke */
@@ -240,18 +237,6 @@
 /* @GeneratePInvoke */
 Value *collection_changed_event_args_get_old_item (CollectionChangedEventArgs *instance);
 
-/* @GeneratePInvoke */
-void collection_changed_event_args_set_changed_action (CollectionChangedEventArgs *instance, CollectionChangedAction action);
-
-/* @GeneratePInvoke */
-void collection_changed_event_args_set_index (CollectionChangedEventArgs *instance, int index);
-
-/* @GeneratePInvoke */
-void collection_changed_event_args_set_new_item (CollectionChangedEventArgs *instance, Value *item);
-
-/* @GeneratePInvoke */
-void collection_changed_event_args_set_old_item (CollectionChangedEventArgs *instance, Value *item);
-
 /**
  * CollectionIterator
  **/
Index: src/eventargs.h
===================================================================
--- src/eventargs.h	(revision 132775)
+++ src/eventargs.h	(working copy)
@@ -64,30 +64,25 @@
 /* @Namespace=None */
 class CollectionChangedEventArgs : public EventArgs {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
 	CollectionChangedEventArgs ();
 
 	CollectionChangedEventArgs (CollectionChangedAction action, Value *new_value, Value *old_value, int index);
 	
-	/* @GenerateCBinding,GeneratePInvoke */
 	void SetChangedAction (CollectionChangedAction action);
 	
 	/* @GenerateCBinding,GeneratePInvoke */
 	CollectionChangedAction GetChangedAction ();
 	
-	/* @GenerateCBinding,GeneratePInvoke */
 	void SetNewItem (Value *item);
 	
 	/* @GenerateCBinding,GeneratePInvoke */
 	Value *GetNewItem ();
 	
-	/* @GenerateCBinding,GeneratePInvoke */
 	void SetOldItem (Value *item);
 	
 	/* @GenerateCBinding,GeneratePInvoke */
 	Value *GetOldItem ();
 	
-	/* @GenerateCBinding,GeneratePInvoke */
 	void SetIndex (int index);
 	
 	/* @GenerateCBinding,GeneratePInvoke */
Index: src/collection.cpp
===================================================================
--- src/collection.cpp	(revision 132775)
+++ src/collection.cpp	(working copy)
@@ -83,6 +83,9 @@
 bool
 Collection::Clear ()
 {
+	if (GetObjectType () == Type::INLINE_COLLECTION)
+		printf ("InlineCollection::Clear (%p)\n", this);
+	
 	EmitChanged (CollectionChangedActionClearing, NULL, NULL, -1);
 
 	guint len = array->len;
Index: src/type-generated.cpp
===================================================================
--- src/type-generated.cpp	(revision 132775)
+++ src/type-generated.cpp	(working copy)
@@ -222,7 +222,7 @@
 	types [(int) Type::CLOCKGROUP] = new Type (Type::CLOCKGROUP, Type::CLOCK, false, "ClockGroup", "CLOCKGROUP", 0, 4, NULL, NULL, NULL);
 	types [(int) Type::CODECDOWNLOADER] = new Type (Type::CODECDOWNLOADER, Type::EVENTOBJECT, false, "CodecDownloader", "CODECDOWNLOADER", 0, 1, NULL, NULL, NULL);
 	types [(int) Type::COLLECTION] = new Type (Type::COLLECTION, Type::DEPENDENCY_OBJECT, false, "Collection", "COLLECTION", 2, 3, Collection_Events, NULL, NULL);
-	types [(int) Type::COLLECTIONCHANGEDEVENTARGS] = new Type (Type::COLLECTIONCHANGEDEVENTARGS, Type::EVENTARGS, false, "CollectionChangedEventArgs", "COLLECTIONCHANGEDEVENTARGS", 0, 1, NULL, (create_inst_func *) collection_changed_event_args_new, NULL);
+	types [(int) Type::COLLECTIONCHANGEDEVENTARGS] = new Type (Type::COLLECTIONCHANGEDEVENTARGS, Type::EVENTARGS, false, "CollectionChangedEventArgs", "COLLECTIONCHANGEDEVENTARGS", 0, 1, NULL, NULL, NULL);
 	types [(int) Type::COLLECTIONITEMCHANGEDEVENTARGS] = new Type (Type::COLLECTIONITEMCHANGEDEVENTARGS, Type::EVENTARGS, false, "CollectionItemChangedEventArgs", "COLLECTIONITEMCHANGEDEVENTARGS", 0, 1, NULL, NULL, NULL);
 	types [(int) Type::COLOR] = new Type (Type::COLOR, Type::OBJECT, true, "Color", "COLOR", 0, 0, NULL, NULL, NULL);
 	types [(int) Type::COLORANIMATION] = new Type (Type::COLORANIMATION, Type::ANIMATION, false, "ColorAnimation", "COLORANIMATION", 0, 2, NULL, (create_inst_func *) color_animation_new, NULL);
Index: src/cbinding.cpp
===================================================================
--- src/cbinding.cpp	(revision 132775)
+++ src/cbinding.cpp	(working copy)
@@ -397,13 +397,6 @@
 /**
  * CollectionChangedEventArgs
  **/
-CollectionChangedEventArgs *
-collection_changed_event_args_new (void)
-{
-	return new CollectionChangedEventArgs ();
-}
-
-
 CollectionChangedAction
 collection_changed_event_args_get_changed_action (CollectionChangedEventArgs *instance)
 {
@@ -446,46 +439,6 @@
 }
 
 
-void
-collection_changed_event_args_set_changed_action (CollectionChangedEventArgs *instance, CollectionChangedAction action)
-{
-	if (instance == NULL)
-		return;
-	
-	instance->SetChangedAction (action);
-}
-
-
-void
-collection_changed_event_args_set_index (CollectionChangedEventArgs *instance, int index)
-{
-	if (instance == NULL)
-		return;
-	
-	instance->SetIndex (index);
-}
-
-
-void
-collection_changed_event_args_set_new_item (CollectionChangedEventArgs *instance, Value *item)
-{
-	if (instance == NULL)
-		return;
-	
-	instance->SetNewItem (item);
-}
-
-
-void
-collection_changed_event_args_set_old_item (CollectionChangedEventArgs *instance, Value *item)
-{
-	if (instance == NULL)
-		return;
-	
-	instance->SetOldItem (item);
-}
-
-
 /**
  * CollectionIterator
  **/
Index: tools/generators/Generator.cs
===================================================================
--- tools/generators/Generator.cs	(revision 132775)
+++ tools/generators/Generator.cs	(working copy)
@@ -1904,6 +1904,7 @@
 		Helper.WriteWarningGenerated (text);
 		text.AppendLine ("using System;");
 		text.AppendLine ("using System.Windows;");
+		text.AppendLine ("using System.Collections.Specialized;");
 		text.AppendLine ("using System.Runtime.InteropServices;");
 		text.AppendLine ("");
 		text.AppendLine ("namespace Mono {");
Index: tools/generators/TypeReference.cs
===================================================================
--- tools/generators/TypeReference.cs	(revision 132775)
+++ tools/generators/TypeReference.cs	(working copy)
@@ -109,6 +109,9 @@
 			case "guint64":
 				managed_type = "ulong";
 				break;
+			case "CollectionChangedAction":
+				managed_type = "NativeCollectionChangedAction";
+				break;
 			case "ManagedStreamCallbacks*":
 				IsRef = true;
 				managed_type = "ManagedStreamCallbacks";
Index: class/tuning/SecurityAttributes/automatic/System.auto.ssc
===================================================================
--- class/tuning/SecurityAttributes/automatic/System.auto.ssc	(revision 132775)
+++ class/tuning/SecurityAttributes/automatic/System.auto.ssc	(working copy)
@@ -1,4 +1,5 @@
 # [SecuritySafeCritical] needed inside System to call all [SecurityCritical] methods
-# 1 methods
+# 2 methods
 
 +SSC-M: System.Threading.SynchronizationContext System.ComponentModel.AsyncOperationManager::get_SynchronizationContext()
++SSC-M: System.Reflection.Emit.DynamicMethod System.Text.RegularExpressions.CILCompiler::CreateEvalMethod(System.Byte[],System.Int32)
Index: class/tuning/SecurityAttributes/automatic/System.Net.auto.sc
===================================================================
--- class/tuning/SecurityAttributes/automatic/System.Net.auto.sc	(revision 132775)
+++ class/tuning/SecurityAttributes/automatic/System.Net.auto.sc	(working copy)
@@ -1,6 +1,30 @@
 # [SecurityCritical] needed to execute code inside 'System.Net, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'.
-# 1 methods needs to be decorated.
+# 9 methods needs to be decorated.
 
 # p/invoke declaration
++SC-M: System.Int32 System.Net.NetworkInformation.LinuxNetworkInterface::getifaddrs(System.IntPtr&)
+
+# p/invoke declaration
++SC-M: System.Int32 System.Net.NetworkInformation.LinuxNetworkInterface::if_nametoindex(System.String)
+
+# p/invoke declaration
++SC-M: System.Int32 System.Net.NetworkInformation.Win32_FIXED_INFO::GetNetworkParams(System.Byte[],System.Int32&)
+
+# p/invoke declaration
++SC-M: System.Int32 System.Net.NetworkInformation.Win32IPv4InterfaceProperties::GetPerAdapterInfo(System.Int32,System.Net.NetworkInformation.Win32_IP_PER_ADAPTER_INFO,System.Int32&)
+
+# p/invoke declaration
++SC-M: System.Int32 System.Net.NetworkInformation.Win32NetworkInterface2::GetAdaptersAddresses(System.UInt32,System.UInt32,System.IntPtr,System.Byte[],System.Int32&)
+
+# p/invoke declaration
++SC-M: System.Int32 System.Net.NetworkInformation.Win32NetworkInterface2::GetAdaptersInfo(System.Byte[],System.Int32&)
+
+# p/invoke declaration
++SC-M: System.Int32 System.Net.NetworkInformation.Win32NetworkInterface2::GetIfEntry(System.Net.NetworkInformation.Win32_MIB_IFROW&)
+
+# p/invoke declaration
 +SC-M: System.UInt32 System.Net.WebClient::g_timeout_add(System.UInt32,System.Net.WebClient/GSourceFunc,System.IntPtr)
 
+# p/invoke declaration
++SC-M: System.Void System.Net.NetworkInformation.LinuxNetworkInterface::freeifaddrs(System.IntPtr)
+
Index: class/tuning/SecurityAttributes/automatic/mscorlib.auto.sc
===================================================================
--- class/tuning/SecurityAttributes/automatic/mscorlib.auto.sc	(revision 132775)
+++ class/tuning/SecurityAttributes/automatic/mscorlib.auto.sc	(working copy)
@@ -1,5 +1,5 @@
 # [SecurityCritical] needed to execute code inside 'mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'.
-# 132 methods needs to be decorated.
+# 147 methods needs to be decorated.
 
 # [VISIBLE] overrides 'System.Boolean System.Runtime.InteropServices.CriticalHandle::get_IsInvalid()'.
 +SC-M: System.Boolean Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid::get_IsInvalid()
@@ -58,6 +58,51 @@
 # using 'System.Byte*' as a parameter type
 +SC-M: System.Byte[] System.BitConverter::GetBytes(System.Byte*,System.Int32)
 
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegCloseKey(System.IntPtr)
+
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegConnectRegistry(System.String,System.IntPtr,System.IntPtr&)
+
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegCreateKey(System.IntPtr,System.String,System.IntPtr&)
+
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegDeleteKey(System.IntPtr,System.String)
+
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegDeleteValue(System.IntPtr,System.String)
+
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegEnumKey(System.IntPtr,System.Int32,System.Text.StringBuilder,System.Int32)
+
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegEnumValue(System.IntPtr,System.Int32,System.Text.StringBuilder,System.Int32&,System.IntPtr,Microsoft.Win32.RegistryValueKind&,System.IntPtr,System.IntPtr)
+
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegFlushKey(System.IntPtr)
+
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegOpenKeyEx(System.IntPtr,System.String,System.IntPtr,System.Int32,System.IntPtr&)
+
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegQueryValueEx(System.IntPtr,System.String,System.IntPtr,Microsoft.Win32.RegistryValueKind&,System.Byte[],System.Int32&)
+
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegQueryValueEx(System.IntPtr,System.String,System.IntPtr,Microsoft.Win32.RegistryValueKind&,System.Int32&,System.Int32&)
+
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegQueryValueEx(System.IntPtr,System.String,System.IntPtr,Microsoft.Win32.RegistryValueKind&,System.IntPtr,System.Int32&)
+
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegSetValueEx(System.IntPtr,System.String,System.IntPtr,Microsoft.Win32.RegistryValueKind,System.Byte[],System.Int32)
+
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegSetValueEx(System.IntPtr,System.String,System.IntPtr,Microsoft.Win32.RegistryValueKind,System.Int32&,System.Int32)
+
+# p/invoke declaration
++SC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::RegSetValueEx(System.IntPtr,System.String,System.IntPtr,Microsoft.Win32.RegistryValueKind,System.String,System.Int32)
+
 # localloc
 +SC-M: System.Int32 Mono.Globalization.Unicode.SimpleCollator::Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
 
Index: class/tuning/SecurityAttributes/automatic/System.Windows.auto.sc
===================================================================
--- class/tuning/SecurityAttributes/automatic/System.Windows.auto.sc	(revision 132775)
+++ class/tuning/SecurityAttributes/automatic/System.Windows.auto.sc	(working copy)
@@ -1,5 +1,5 @@
 # [SecurityCritical] needed to execute code inside 'System.Windows, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'.
-# 479 methods needs to be decorated.
+# 476 methods needs to be decorated.
 
 # p/invoke declaration
 +SC-M: Mono.Kind Mono.NativeMethods::collection_get_element_type(System.IntPtr)
@@ -137,6 +137,9 @@
 +SC-M: System.Boolean Mono.NativeMethods::value_from_str_with_typename(System.String,System.String,System.String,System.IntPtr&)
 
 # p/invoke declaration
++SC-M: System.Collections.Specialized.NativeCollectionChangedAction Mono.NativeMethods::collection_changed_event_args_get_changed_action(System.IntPtr)
+
+# p/invoke declaration
 +SC-M: System.Double Mono.NativeMethods::back_ease_ease_in_core(System.IntPtr,System.Double)
 
 # p/invoke declaration
@@ -326,9 +329,6 @@
 +SC-M: System.IntPtr Mono.NativeMethods::collection_changed_event_args_get_old_item(System.IntPtr)
 
 # p/invoke declaration
-+SC-M: System.IntPtr Mono.NativeMethods::collection_changed_event_args_new()
-
-# p/invoke declaration
 +SC-M: System.IntPtr Mono.NativeMethods::collection_get_iterator(System.IntPtr)
 
 # p/invoke declaration
@@ -1052,15 +1052,6 @@
 +SC-M: System.Void Mono.NativeMethods::bitmap_source_set_bitmap_data(System.IntPtr,System.IntPtr)
 
 # p/invoke declaration
-+SC-M: System.Void Mono.NativeMethods::collection_changed_event_args_set_index(System.IntPtr,System.Int32)
-
-# p/invoke declaration
-+SC-M: System.Void Mono.NativeMethods::collection_changed_event_args_set_new_item(System.IntPtr,Mono.Value&)
-
-# p/invoke declaration
-+SC-M: System.Void Mono.NativeMethods::collection_changed_event_args_set_old_item(System.IntPtr,Mono.Value&)
-
-# p/invoke declaration
 +SC-M: System.Void Mono.NativeMethods::collection_iterator_destroy(System.IntPtr)
 
 # p/invoke declaration
Index: class/tuning/SecurityAttributes/automatic/System.Net.auto.ssc
===================================================================
--- class/tuning/SecurityAttributes/automatic/System.Net.auto.ssc	(revision 132775)
+++ class/tuning/SecurityAttributes/automatic/System.Net.auto.ssc	(working copy)
@@ -1,6 +1,28 @@
 # [SecuritySafeCritical] needed inside System.Net to call all [SecurityCritical] methods
-# 4 methods
+# 26 methods
 
++SSC-M: System.Net.NetworkInformation.IPAddressInformationCollection System.Net.NetworkInformation.IPAddressInformationImplCollection::Win32FromAnycast(System.IntPtr)
++SSC-M: System.Void System.Net.NetworkInformation.LinuxIPInterfaceProperties::ParseResolvConf()
++SSC-M: System.Boolean System.Net.NetworkInformation.LinuxIPv4InterfaceProperties::get_IsForwardingEnabled()
++SSC-M: System.Int32 System.Net.NetworkInformation.LinuxIPv4InterfaceProperties::get_Mtu()
++SSC-M: System.Int32 System.Net.NetworkInformation.LinuxNetworkInterface::IfNameToIndex(System.String)
++SSC-M: System.Net.NetworkInformation.NetworkInterface[] System.Net.NetworkInformation.LinuxNetworkInterface::ImplGetAllNetworkInterfaces()
++SSC-M: System.Void System.Net.NetworkInformation.LinuxNetworkInterface::SetLinkLayerInfo(System.Int32,System.Byte[],System.Net.NetworkInformation.NetworkInterfaceType)
++SSC-M: System.Net.NetworkInformation.OperationalStatus System.Net.NetworkInformation.LinuxNetworkInterface::get_OperationalStatus()
++SSC-M: System.Boolean System.Net.NetworkInformation.LinuxNetworkInterface::get_SupportsMulticast()
++SSC-M: System.Net.NetworkInformation.MulticastIPAddressInformationCollection System.Net.NetworkInformation.MulticastIPAddressInformationImplCollection::Win32FromMulticast(System.IntPtr)
++SSC-M: System.String System.Net.NetworkInformation.NetworkInterface::ReadLine(System.String)
++SSC-M: System.Net.NetworkInformation.UnicastIPAddressInformationCollection System.Net.NetworkInformation.UnicastIPAddressInformationImplCollection::Win32FromUnicast(System.Int32,System.IntPtr)
++SSC-M: System.Net.NetworkInformation.Win32_FIXED_INFO System.Net.NetworkInformation.Win32_FIXED_INFO::GetInstance()
++SSC-M: System.Net.IPAddress System.Net.NetworkInformation.Win32_SOCKET_ADDRESS::GetIPAddress()
++SSC-M: System.Void System.Net.NetworkInformation.Win32GatewayIPAddressInformationCollection::AddSubsequently(System.IntPtr)
++SSC-M: System.Net.NetworkInformation.Win32IPAddressCollection System.Net.NetworkInformation.Win32IPAddressCollection::FromDnsServer(System.IntPtr)
++SSC-M: System.Void System.Net.NetworkInformation.Win32IPAddressCollection::AddSubsequentlyString(System.IntPtr)
++SSC-M: System.Void System.Net.NetworkInformation.Win32IPv4InterfaceProperties::.ctor(System.Net.NetworkInformation.Win32_IP_ADAPTER_INFO,System.Net.NetworkInformation.Win32_MIB_IFROW)
++SSC-M: System.Void System.Net.NetworkInformation.Win32NetworkInterface2::.ctor(System.Net.NetworkInformation.Win32_IP_ADAPTER_ADDRESSES)
++SSC-M: System.Net.NetworkInformation.Win32_IP_ADAPTER_INFO[] System.Net.NetworkInformation.Win32NetworkInterface2::GetAdaptersInfo()
++SSC-M: System.Net.NetworkInformation.Win32_IP_ADAPTER_ADDRESSES[] System.Net.NetworkInformation.Win32NetworkInterface2::GetAdaptersAddresses()
++SSC-M: System.Net.IPAddress System.Net.NetworkInformation.Win32UnicastIPAddressInformation::get_IPv4Mask()
 +SSC-M: System.Void System.Net.WebClient::.ctor()
 +SSC-M: System.Void System.Net.WebClient::OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)
 +SSC-M: System.Void System.Net.WebClient::OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)
Index: class/tuning/SecurityAttributes/automatic/mscorlib.auto.ssc
===================================================================
--- class/tuning/SecurityAttributes/automatic/mscorlib.auto.ssc	(revision 132775)
+++ class/tuning/SecurityAttributes/automatic/mscorlib.auto.ssc	(working copy)
@@ -1,6 +1,29 @@
 # [SecuritySafeCritical] needed inside mscorlib to call all [SecurityCritical] methods
-# 203 methods
+# 228 methods
 
++SSC-M: System.Void Microsoft.Win32.KeyHandler::.ctor(Microsoft.Win32.RegistryKey,System.String)
++SSC-M: System.Void Microsoft.Win32.KeyHandler::Load()
++SSC-M: Microsoft.Win32.RegistryKey Microsoft.Win32.KeyHandler::Probe(Microsoft.Win32.RegistryKey,System.String,System.Boolean)
++SSC-M: System.Void Microsoft.Win32.KeyHandler::Save()
++SSC-M: System.String Microsoft.Win32.KeyHandler::get_UserStore()
++SSC-M: System.Int32 Microsoft.Win32.UnixRegistryApi::SubKeyCount(Microsoft.Win32.RegistryKey)
++SSC-M: System.Void Microsoft.Win32.UnixRegistryApi::DeleteKey(Microsoft.Win32.RegistryKey,System.String,System.Boolean)
++SSC-M: System.String[] Microsoft.Win32.UnixRegistryApi::GetSubKeyNames(Microsoft.Win32.RegistryKey)
++SSC-M: System.Object Microsoft.Win32.Win32RegistryApi::GetValue(Microsoft.Win32.RegistryKey,System.String,System.Object,Microsoft.Win32.RegistryValueOptions)
++SSC-M: System.Void Microsoft.Win32.Win32RegistryApi::SetValue(Microsoft.Win32.RegistryKey,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
++SSC-M: System.Void Microsoft.Win32.Win32RegistryApi::SetValue(Microsoft.Win32.RegistryKey,System.String,System.Object)
++SSC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::GetBinaryValue(Microsoft.Win32.RegistryKey,System.String,Microsoft.Win32.RegistryValueKind,System.Byte[]&,System.Int32)
++SSC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::SubKeyCount(Microsoft.Win32.RegistryKey)
++SSC-M: System.Int32 Microsoft.Win32.Win32RegistryApi::ValueCount(Microsoft.Win32.RegistryKey)
++SSC-M: Microsoft.Win32.RegistryKey Microsoft.Win32.Win32RegistryApi::OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)
++SSC-M: Microsoft.Win32.RegistryKey Microsoft.Win32.Win32RegistryApi::OpenSubKey(Microsoft.Win32.RegistryKey,System.String,System.Boolean)
++SSC-M: System.Void Microsoft.Win32.Win32RegistryApi::Flush(Microsoft.Win32.RegistryKey)
++SSC-M: System.Void Microsoft.Win32.Win32RegistryApi::Close(Microsoft.Win32.RegistryKey)
++SSC-M: Microsoft.Win32.RegistryKey Microsoft.Win32.Win32RegistryApi::CreateSubKey(Microsoft.Win32.RegistryKey,System.String)
++SSC-M: System.Void Microsoft.Win32.Win32RegistryApi::DeleteKey(Microsoft.Win32.RegistryKey,System.String,System.Boolean)
++SSC-M: System.Void Microsoft.Win32.Win32RegistryApi::DeleteValue(Microsoft.Win32.RegistryKey,System.String,System.Boolean)
++SSC-M: System.String[] Microsoft.Win32.Win32RegistryApi::GetSubKeyNames(Microsoft.Win32.RegistryKey)
++SSC-M: System.String[] Microsoft.Win32.Win32RegistryApi::GetValueNames(Microsoft.Win32.RegistryKey)
 +SSC-M: System.Void Mono.Globalization.Unicode.MSCompatUnicodeTable::.cctor()
 +SSC-M: System.Void Mono.Globalization.Unicode.MSCompatUnicodeTable::BuildTailoringTables(System.Globalization.CultureInfo,Mono.Globalization.Unicode.TailoringInfo,Mono.Globalization.Unicode.Contraction[]&,Mono.Globalization.Unicode.Level2Map[]&)
 +SSC-M: System.Void Mono.Globalization.Unicode.MSCompatUnicodeTable::FillCJKCore(System.String,Mono.Globalization.Unicode.CodePointIndexer&,System.Byte*&,System.Byte*&,Mono.Globalization.Unicode.CodePointIndexer&,System.Byte*&)
@@ -73,7 +96,9 @@
 +SSC-M: System.String System.Diagnostics.StackTrace::ToString()
 +SSC-M: System.Boolean System.Double::Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Boolean,System.Double&,System.Exception&)
 +SSC-M: System.String System.Environment::get_StackTrace()
++SSC-M: System.String System.Environment::get_SystemDirectory()
 +SSC-M: System.String System.Environment::ReadXdgUserDir(System.String,System.String,System.String,System.String)
++SSC-M: System.String System.Environment::get_GacPath()
 +SSC-M: System.String System.Exception::get_Source()
 +SSC-M: System.String System.Exception::get_StackTrace()
 +SSC-M: System.Reflection.MethodBase System.Exception::get_TargetSite()
Index: class/tuning/SecurityAttributes/automatic/System.Windows.auto.ssc
===================================================================
--- class/tuning/SecurityAttributes/automatic/System.Windows.auto.ssc	(revision 132775)
+++ class/tuning/SecurityAttributes/automatic/System.Windows.auto.ssc	(working copy)
@@ -1,5 +1,5 @@
 # [SecuritySafeCritical] needed inside System.Windows to call all [SecurityCritical] methods
-# 466 methods
+# 467 methods
 
 +SSC-M: System.Void Microsoft.Internal.TextBoxView::.ctor()
 +SSC-M: Mono.Xaml.ManagedXamlLoader Mono.ApplicationLauncher::CreateXamlLoader(System.IntPtr,System.IntPtr,System.IntPtr,System.String,System.String)
@@ -402,6 +402,7 @@
 +SSC-M: System.Collections.Generic.IEnumerable`1<System.Windows.UIElement> System.Windows.Media.VisualTreeHelper::FindElementsInHostCoordinates(System.Windows.Point,System.Windows.UIElement)
 +SSC-M: System.Collections.Generic.IEnumerable`1<System.Windows.UIElement> System.Windows.Media.VisualTreeHelper::FindElementsInHostCoordinates(System.Windows.Rect,System.Windows.UIElement)
 +SSC-M: System.Collections.IEnumerator System.Windows.PresentationFrameworkCollection`1::System.Collections.IEnumerable.GetEnumerator()
++SSC-M: System.Void System.Windows.PresentationFrameworkCollection`1::collection_changed_cb(System.IntPtr,System.IntPtr,System.IntPtr)
 +SSC-M: System.Int32 System.Windows.PresentationFrameworkCollection`1::get_Count()
 +SSC-M: System.Collections.Generic.IEnumerator`1<T> System.Windows.PresentationFrameworkCollection`1::GetEnumerator()
 +SSC-M: System.Void System.Windows.PresentationFrameworkCollection`1::ClearImpl()
Index: class/System.Windows/System.Collections.Specialized/NativeCollectionChangedAction.cs
===================================================================
--- class/System.Windows/System.Collections.Specialized/NativeCollectionChangedAction.cs	(revision 0)
+++ class/System.Windows/System.Collections.Specialized/NativeCollectionChangedAction.cs	(revision 0)
@@ -0,0 +1,37 @@
+//
+// NotifyCollectionChangedAction.cs
+//
+// Contact:
+//   Moonlight List (moonlight-list@lists.ximian.com)
+//
+// Copyright 2008 Novell, Inc.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+namespace System.Collections.Specialized {
+	internal enum NativeCollectionChangedAction {
+		Add,
+		Remove,
+		Replace,
+		Clearing,
+		Cleared
+	}
+}
Index: class/System.Windows/System.Windows.Controls/ItemsControl.cs
===================================================================
--- class/System.Windows/System.Windows.Controls/ItemsControl.cs	(revision 132775)
+++ class/System.Windows/System.Windows.Controls/ItemsControl.cs	(working copy)
@@ -101,7 +101,7 @@
 
 				items = new ItemCollection ();
 				items.SetReadOnly();
-				items.ItemsChanged += delegate (object o, NotifyCollectionChangedEventArgs e) {
+				items.CollectionChanged += delegate (object o, NotifyCollectionChangedEventArgs e) {
 					InvokeItemsChanged (e);
 				};
 
@@ -280,7 +280,7 @@
 				if (items == null) {
 					items = new ItemCollection ();
 					itemsIsDataBound = false;
-					items.ItemsChanged += delegate (object o, NotifyCollectionChangedEventArgs e) {
+					items.CollectionChanged += delegate (object o, NotifyCollectionChangedEventArgs e) {
 						InvokeItemsChanged (e);
 					};
 				}
Index: class/System.Windows/Mono/GeneratedPInvokes.cs
===================================================================
--- class/System.Windows/Mono/GeneratedPInvokes.cs	(revision 132775)
+++ class/System.Windows/Mono/GeneratedPInvokes.cs	(working copy)
@@ -4,6 +4,7 @@
 
 using System;
 using System.Windows;
+using System.Collections.Specialized;
 using System.Runtime.InteropServices;
 
 namespace Mono {
@@ -357,13 +358,8 @@
 		}
 
 		[DllImport ("moon")]
-		// CollectionChangedEventArgs *collection_changed_event_args_new ();
-		public extern static IntPtr collection_changed_event_args_new ();
-
-		// This method contains types the generator didn't know about. Fix the generator (find the method 'GetManagedType' in TypeReference.cs and add the missing case) and try again.
-		// [DllImport ("moon")]
 		// CollectionChangedAction collection_changed_event_args_get_changed_action (CollectionChangedEventArgs *instance);
-		// public extern static /* Unknown: 'CollectionChangedAction' */ collection_changed_event_args_get_changed_action (IntPtr instance);
+		public extern static NativeCollectionChangedAction collection_changed_event_args_get_changed_action (IntPtr instance);
 
 		[DllImport ("moon")]
 		// int collection_changed_event_args_get_index (CollectionChangedEventArgs *instance);
@@ -377,24 +373,7 @@
 		// Value *collection_changed_event_args_get_old_item (CollectionChangedEventArgs *instance);
 		public extern static IntPtr collection_changed_event_args_get_old_item (IntPtr instance);
 
-		// This method contains types the generator didn't know about. Fix the generator (find the method 'GetManagedType' in TypeReference.cs and add the missing case) and try again.
-		// [DllImport ("moon")]
-		// void collection_changed_event_args_set_changed_action (CollectionChangedEventArgs *instance, CollectionChangedAction action);
-		// public extern static void collection_changed_event_args_set_changed_action (IntPtr instance, /* Unknown: 'CollectionChangedAction' */ action);
-
 		[DllImport ("moon")]
-		// void collection_changed_event_args_set_index (CollectionChangedEventArgs *instance, int index);
-		public extern static void collection_changed_event_args_set_index (IntPtr instance, int index);
-
-		[DllImport ("moon")]
-		// void collection_changed_event_args_set_new_item (CollectionChangedEventArgs *instance, Value *item);
-		public extern static void collection_changed_event_args_set_new_item (IntPtr instance, ref Value item);
-
-		[DllImport ("moon")]
-		// void collection_changed_event_args_set_old_item (CollectionChangedEventArgs *instance, Value *item);
-		public extern static void collection_changed_event_args_set_old_item (IntPtr instance, ref Value item);
-
-		[DllImport ("moon")]
 		// void collection_iterator_destroy (CollectionIterator *iterator);
 		public extern static void collection_iterator_destroy (IntPtr iterator);
 
Index: class/System.Windows/System.Windows.Controls.Primitives/Selector.cs
===================================================================
--- class/System.Windows/System.Windows.Controls.Primitives/Selector.cs	(revision 132775)
+++ class/System.Windows/System.Windows.Controls.Primitives/Selector.cs	(working copy)
@@ -52,7 +52,7 @@
 
 		internal Selector ()
 		{
-			Items.ItemsChanged += (o, e) => OnItemsChanged (e);
+			Items.CollectionChanged += (o, e) => OnItemsChanged (e);
 		}
 
 		internal bool IsSelectionActive {
Index: class/System.Windows/Makefile.am
===================================================================
--- class/System.Windows/Makefile.am	(revision 132775)
+++ class/System.Windows/Makefile.am	(working copy)
@@ -69,6 +69,7 @@
 	$(srcdir)/System.ComponentModel/DesignerProperties.cs			\
 	$(srcdir)/System.Collections.ObjectModel/ObservableCollection_T.cs	\
 	$(srcdir)/System.Collections.Specialized/INotifyCollectionChanged.cs	\
+	$(srcdir)/System.Collections.Specialized/NativeCollectionChangedAction.cs \
 	$(srcdir)/System.Collections.Specialized/NotifyCollectionChangedAction.cs \
 	$(srcdir)/System.Collections.Specialized/NotifyCollectionChangedEventArgs.cs \
 	$(srcdir)/System.Collections.Specialized/NotifyCollectionChangedEventHandler.cs \
Index: class/System.Windows/System.Windows/PresentationFrameworkCollection.cs
===================================================================
--- class/System.Windows/System.Windows/PresentationFrameworkCollection.cs	(revision 132775)
+++ class/System.Windows/System.Windows/PresentationFrameworkCollection.cs	(working copy)
@@ -42,7 +42,7 @@
 		
 		int IList.Add (object value)
 		{
-			Add ((T)value);
+			Add ((T) value);
 			return Count;
 		}
 		
@@ -128,7 +128,66 @@
 		{
 			return IndexOfImpl (value);
 		}
-
+		
+		static UnmanagedEventHandler collection_changed = Events.CreateSafeHandler (collection_changed_cb);
+		static object CollectionChangedEvent = new object ();
+		
+		void InvokeCollectionChanged (NotifyCollectionChangedEventArgs args)
+		{
+			NotifyCollectionChangedEventHandler h = (NotifyCollectionChangedEventHandler) EventList [CollectionChangedEvent];
+			
+			if (h != null)
+				h (this, args);
+		}
+		
+		static void collection_changed_cb (IntPtr target, IntPtr calldata, IntPtr closure)
+		{
+			PresentationFrameworkCollection<T> collection = (PresentationFrameworkCollection<T>) Helper.ObjectFromIntPtr (closure);
+			NativeCollectionChangedAction action = NativeMethods.collection_changed_event_args_get_changed_action (calldata);
+			NotifyCollectionChangedEventArgs args = null;
+			object old_item, new_item;
+			int index;
+			
+			switch (action) {
+			case NativeCollectionChangedAction.Add:
+				new_item = Value.ToObject (typeof (T), NativeMethods.collection_changed_event_args_get_new_item (calldata));
+				index = NativeMethods.collection_changed_event_args_get_index (calldata);
+				
+				args = new NotifyCollectionChangedEventArgs (NotifyCollectionChangedAction.Add, new_item, index);
+				break;
+			case NativeCollectionChangedAction.Remove:
+				old_item = Value.ToObject (typeof (T), NativeMethods.collection_changed_event_args_get_old_item (calldata));
+				index = NativeMethods.collection_changed_event_args_get_index (calldata);
+				
+				args = new NotifyCollectionChangedEventArgs (NotifyCollectionChangedAction.Remove, old_item, index);
+				break;
+			case NativeCollectionChangedAction.Replace:
+				new_item = Value.ToObject (typeof (T), NativeMethods.collection_changed_event_args_get_new_item (calldata));
+				old_item = Value.ToObject (typeof (T), NativeMethods.collection_changed_event_args_get_old_item (calldata));
+				index = NativeMethods.collection_changed_event_args_get_index (calldata);
+				
+				args = new NotifyCollectionChangedEventArgs (NotifyCollectionChangedAction.Replace, new_item, old_item, index);
+				break;
+			case NativeCollectionChangedAction.Clearing:
+				// don't propogate this one to managed land...
+				return;
+			case NativeCollectionChangedAction.Cleared:
+				args = new NotifyCollectionChangedEventArgs (NotifyCollectionChangedAction.Reset);
+				break;
+			}
+			
+			collection.InvokeCollectionChanged (args);
+		}
+		
+		public event NotifyCollectionChangedEventHandler CollectionChanged {
+			add {
+				RegisterEvent (CollectionChangedEvent, "Changed", collection_changed, value);
+			}
+			remove {
+				UnregisterEvent (CollectionChangedEvent, "Changed", collection_changed, value);           				
+			}
+		}
+		
 		// most types that inherits from this throws ArgumentNullException when
 		// null value are used - except for ItemCollection
 		internal virtual bool NullCheck (NotifyCollectionChangedAction action, T value)
@@ -138,25 +197,7 @@
 				throw new ArgumentNullException ();
 			return result;
 		}
-
-		internal event NotifyCollectionChangedEventHandler ItemsChanged;
-
-		internal void Notify (NotifyCollectionChangedAction action, T value, int index)
-		{
-			NotifyCollectionChangedEventHandler handler = ItemsChanged;
-			if (handler != null) {
-				handler (this, new NotifyCollectionChangedEventArgs (action, value, index));
-			}
-		}
-
-		internal void Notify (NotifyCollectionChangedAction action, T new_value, T old_value, int index)
-		{
-			NotifyCollectionChangedEventHandler handler = ItemsChanged;
-			if (handler != null) {
-				handler (this, new NotifyCollectionChangedEventArgs (action, new_value, old_value, index));
-			}
-		}
-
+		
 		//
 		// ICollection members
 		//
@@ -363,11 +404,6 @@
 		internal void ClearImpl ()
 		{
 			NativeMethods.collection_clear (native);
-
-			NotifyCollectionChangedEventHandler handler = ItemsChanged;
-			if (handler != null) {
-				handler (this, new NotifyCollectionChangedEventArgs (NotifyCollectionChangedAction.Reset));
-			}
 		}
 
 		internal void AddImpl (T value)
@@ -378,8 +414,6 @@
 			Value v = Value.FromObject (value, false);
 			int index = NativeMethods.collection_add (native, ref v);
 			NativeMethods.value_free_value (ref v);
-
-			Notify (NotifyCollectionChangedAction.Add, value, index);
 		}
 
 		internal void InsertImpl (int index, T value)
@@ -392,8 +426,6 @@
 			Value v = Value.FromObject (value, false);
 			NativeMethods.collection_insert (native, index, ref v);
 			NativeMethods.value_free_value (ref v);
-
-			Notify (NotifyCollectionChangedAction.Add, value, index);
 		}
 
 		internal bool RemoveImpl (T value)
@@ -405,16 +437,13 @@
 			if (index == -1)
 				return false;
 
-			NativeMethods.collection_remove_at (native, index);
-			Notify (NotifyCollectionChangedAction.Remove, value, index);
-			return true;
+			return NativeMethods.collection_remove_at (native, index);
 		}
 
 		internal void RemoveAtImpl (int index)
 		{
 			T value = GetItemImpl (index);
 			NativeMethods.collection_remove_at (native, index);
-			Notify (NotifyCollectionChangedAction.Remove, value, index);
 		}
 
 		internal T GetItemImpl (int index)
@@ -431,8 +460,6 @@
 			Value v = Value.FromObject (value, false);
 			NativeMethods.collection_set_value_at (native, index, ref v);
 			NativeMethods.value_free_value (ref v);
-
-			Notify (NotifyCollectionChangedAction.Replace, value, old, index);
 		}
 
 		internal virtual int IndexOfImpl (T value)
