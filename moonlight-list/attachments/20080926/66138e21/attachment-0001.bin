Index: audio.cpp
===================================================================
--- audio.cpp	(revision 114169)
+++ audio.cpp	(working copy)
@@ -21,10 +21,6 @@
 #include "runtime.h"
 #include "debug.h"
 
-#define LOG_AUDIO(...)// printf (__VA_ARGS__);
-// This one prints out spew on every sample
-#define LOG_AUDIO_EX(...)// printf (__VA_ARGS__);
-
 /*
  * AudioFrameNode
  */
Index: yuv-converter.cpp
===================================================================
--- yuv-converter.cpp	(revision 114169)
+++ yuv-converter.cpp	(working copy)
@@ -14,6 +14,7 @@
 
 #include <glib.h>
 #include <unistd.h>
+#include <stdlib.h>
 
 #include "yuv-converter.h"
 
Index: debug.h
===================================================================
--- debug.h	(revision 114169)
+++ debug.h	(working copy)
@@ -19,6 +19,8 @@
 #include <stdlib.h>
 #include <string.h>
 
+#include "runtime.h"
+
 #define MAX_STACK_FRAMES 30
 
 char* get_stack_trace_prefix (const char* prefix);
@@ -32,7 +34,50 @@
 void print_gdb_trace ();
 G_END_DECLS
 
+#define LOG_ALSA(...)				if (debug_flags & RUNTIME_DEBUG_ALSA) printf (__VA_ARGS__);
+#define LOG_ALSA_EX(...)			if (debug_flags & RUNTIME_DEBUG_ALSA_EX) printf (__VA_ARGS__);
+#define LOG_AUDIO(...)				if (debug_flags & RUNTIME_DEBUG_AUDIO) printf (__VA_ARGS__);
+#define LOG_AUDIO_EX(...)			if (debug_flags & RUNTIME_DEBUG_AUDIO_EX) printf (__VA_ARGS__);
+#define LOG_PULSE(...)				if (debug_flags & RUNTIME_DEBUG_PULSE) printf (__VA_ARGS__);
+#define LOG_PULSE_EX(...)			if (debug_flags & RUNTIME_DEBUG_PULSE_EX) printf (__VA_ARGS__);
+#define LOG_HTTPSTREAMING(...)			if (debug_flags & RUNTIME_DEBUG_HTTPSTREAMING) printf (__VA_ARGS__);
+#define LOG_MARKERS(...)			if (debug_flags & RUNTIME_DEBUG_MARKERS) printf (__VA_ARGS__);
+#define LOG_MARKERS_EX(...)			if (debug_flags & RUNTIME_DEBUG_MARKERS_EX)printf (__VA_ARGS__);
+#define LOG_MMS(...)				if (debug_flags & RUNTIME_DEBUG_MMS)printf (__VA_ARGS__);
+#define LOG_MEDIAPLAYER(...)			if (debug_flags & RUNTIME_DEBUG_MEDIAPLAYER) printf (__VA_ARGS__);
+#define LOG_MEDIAPLAYER_EX(...)			if (debug_flags & RUNTIME_DEBUG_MEDIAPLAYER_EX) printf (__VA_ARGS__);
+#define LOG_PIPELINE(...)			if (debug_flags & RUNTIME_DEBUG_PIPELINE) printf (__VA_ARGS__);
+#define LOG_PIPELINE_ERROR(...)			if (debug_flags & RUNTIME_DEBUG_PIPELINE_ERROR) printf (__VA_ARGS__);
+#define LOG_PIPELINE_ERROR_CONDITIONAL(x, ...)	if (x && debug_flags & PIPELINE_ERROR) printf (__VA_ARGS__);
+#define LOG_FRAMEREADERLOOP(...)		if (debug_flags & RUNTIME_DEBUG_FRAMEREADERLOOP) printf (__VA_ARGS__);
+#define LOG_FFMPEG(...)				if (debug_flags & RUNTIME_DEBUG_FFMPEG) printf(__VA_ARGS__);
+#define LOG_UI(...)				if (debug_flags & RUNTIME_DEBUG_UI) printf (__VA_ARGS__);
+#define LOG_CODECS(...)				if (debug_flags & RUNTIME_DEBUG_CODECS) printf (__VA_ARGS__);
+
+#else
+
+#define LOG_ALSA(...)
+#define LOG_ALSA_EX(...)
+#define LOG_AUDIO(...)
+#define LOG_AUDIO_EX(...)
+#define LOG_PULSE(...)
+#define LOG_PULSE_EX(...)
+#define LOG_HTTPSTREAMING(...) 
+#define LOG_MARKERS(...)
+#define LOG_MARKERS_EX(...)
+#define LOG_MMS(...)
+#define LOG_MEDIAPLAYER(...)
+#define LOG_MEDIAPLAYER_EX(...)
+#define LOG_PIPELINE(...)
+#define LOG_PIPELINE_ERROR(...)
+#define LOG_PIPELINE_ERROR_CONDITIONAL(x, ...)
+#define LOG_FRAMEREADERLOOP(...)
+#define LOG_FFMPEG(...)
+#define LOG_UI(...)
+#define LOG_CODECS(...)
+
 #endif
 
+
 #endif
 
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 114170)
+++ ChangeLog	(working copy)
@@ -1,3 +1,23 @@
+2008-09-26  Fernando Herrera  <fherrera@novell.com>
+
+	* runtime.h:
+	* runtime.cpp: Parse MOONLIGHT_DEBUG env variable if
+	  --with-debug=yes
+	* debug.h: 
+	* debug.cpp: define conditional debugging output depending on 
+	  MOONLIGHT_DEBUG
+	* audio-alsa.cpp:
+	* audio-pulse.cpp:
+	* audio.cpp:
+	* http-streaming.cpp:
+	* media.cpp:
+	* mms-downloader.cpp:
+	* mplayer.cpp:
+	* pipeline-ffmpeg.cpp:
+	* pipeline-ui.cpp: 
+	* pipeline.cpp: include debug.h. Add some includes for stdlib.h
+	  that were been pulled from debug.h when --with-debug=yes. 
+
 2008-09-25  Jeffrey Stedfast  <fejj@novell.com>
 
 	* runtime.cpp (Surface::ShowFullScreenMessage): Don't use
Index: pipeline-ui.cpp
===================================================================
--- pipeline-ui.cpp	(revision 114169)
+++ pipeline-ui.cpp	(working copy)
@@ -20,6 +20,7 @@
 #include "downloader.h"
 #include "utils.h"
 #include "pipeline.h"
+#include "debug.h"
 
 #define EULA_URL "http://anonsvn.mono-project.com/viewvc/trunk/moon/LICENSE?revision=112447"
 #define CODEC_URL "http://localhost:8080/libmscodecs.so"
@@ -28,8 +29,6 @@
 //#define EULA_URL "http://download.banshee-project.org/banshee/banshee-1-1.3.1.changes"
 //#define CODEC_URL "http://kirk.provo.novell.com/dist/install/SLES-11-Beta1/SLES-11-DVD-x86_64-Beta1-mini.iso"
 
-#define LOG_UI(...)// printf (__VA_ARGS__);
-
 bool CodecDownloader::running = false;
 
 CodecDownloader::CodecDownloader (Surface *surf)
Index: audio-pulse.cpp
===================================================================
--- audio-pulse.cpp	(revision 114169)
+++ audio-pulse.cpp	(working copy)
@@ -16,11 +16,8 @@
 
 #include "audio-pulse.h"
 #include "runtime.h"
+#include "debug.h"
 
-#define LOG_PULSE(...)// printf (__VA_ARGS__);
-// This one prints out spew on every sample
-#define LOG_PULSE_EX(...)// printf (__VA_ARGS__);
-
 // stream.h
 typedef pa_stream*            (dyn_pa_stream_new)                    (pa_context *c, const char *name, const pa_sample_spec *ss, const pa_channel_map *map);
 typedef void                  (dyn_pa_stream_set_state_callback)     (pa_stream *s, pa_stream_notify_cb_t cb, void *userdata);
Index: http-streaming.cpp
===================================================================
--- http-streaming.cpp	(revision 114169)
+++ http-streaming.cpp	(working copy)
@@ -13,10 +13,10 @@
 #include <config.h>
 #include <string.h>
 
+#include "debug.h"
+
 #include "http-streaming.h"
 
-#define LOG_HTTPSTREAMING(...) // printf (__VA_ARGS__);
-
 static const char * features [] = {"broadcast", "last", "live", "playlist", "reliable", "seekable", "skipbackwards", "skipforward", "stridable", NULL};
 
 HttpStreamingFeatures
Index: audio-alsa.cpp
===================================================================
--- audio-alsa.cpp	(revision 114169)
+++ audio-alsa.cpp	(working copy)
@@ -17,10 +17,8 @@
 #include "audio-alsa.h"
 #include "runtime.h"
 #include "clock.h"
+#include "debug.h"
 
-#define LOG_ALSA(...)// printf (__VA_ARGS__);
-// This one prints out spew on every sample
-#define LOG_ALSA_EX(...)// printf (__VA_ARGS__);
 
 typedef int               (dyn_snd_pcm_open)                           (snd_pcm_t **pcm, const char *name, snd_pcm_stream_t stream, int mode);
 typedef int               (dyn_snd_pcm_close)                          (snd_pcm_t *pcm);
@@ -455,7 +453,7 @@
 	if (!PreparePcm (&available_samples))
 		return false;
 	
-	LOG_ALSA_EX ("AlsaSource::WriteMmap (): entering play loop, avail: %lld, sample size: %i\n", (gint64) avail, (int) period_size);
+	LOG_ALSA_EX ("AlsaSource::WriteMmap (): entering play loop, avail: %lld, sample size: %i\n", (gint64) available_samples, (int) period_size);
 	
 	frames = available_samples;
 	
@@ -468,7 +466,7 @@
 		started = false;
 	}
 	
-	LOG_ALSA_EX ("AlsaSource::WriteMmap (): can write %lu frames, pending_samples: %lu, avail: %lu\n", frames, pending_samples, available_samples);
+	LOG_ALSA_EX ("AlsaSource::WriteMmap (): can write %lu frames, avail: %lu\n", frames, available_samples);
 	
 	for (guint32 channel = 0; channel < channels; channel++) {
 		data [channel] = (AudioData *) g_malloc (sizeof (AudioData));
Index: runtime.h
===================================================================
--- runtime.h	(revision 114169)
+++ runtime.h	(working copy)
@@ -15,6 +15,7 @@
 #define __RUNTIME_H__
 
 #include <glib.h>
+#include <config.h>
 
 G_BEGIN_DECLS
 
@@ -75,10 +76,36 @@
 	RUNTIME_INIT_CODECS_DEBUG           = 1 << 25,
 };
 
+#if DEBUG
+enum RuntimeDebugFlags {
+	RUNTIME_DEBUG_ALSA		= 1 << 0,
+	RUNTIME_DEBUG_ALSA_EX		= 1 << 1,
+	RUNTIME_DEBUG_AUDIO		= 1 << 2,
+	RUNTIME_DEBUG_AUDIO_EX		= 1 << 3,
+	RUNTIME_DEBUG_PULSE		= 1 << 4,
+	RUNTIME_DEBUG_PULSE_EX		= 1 << 5,
+	RUNTIME_DEBUG_HTTPSTREAMING	= 1 << 6,
+	RUNTIME_DEBUG_MARKERS		= 1 << 7,
+	RUNTIME_DEBUG_MARKERS_EX	= 1 << 8,
+	RUNTIME_DEBUG_MMS		= 1 << 9,
+	RUNTIME_DEBUG_MEDIAPLAYER	= 1 << 10,
+	RUNTIME_DEBUG_MEDIAPLAYER_EX	= 1 << 11,
+	RUNTIME_DEBUG_PIPELINE		= 1 << 12,
+	RUNTIME_DEBUG_PIPELINE_ERROR	= 1 << 13,
+	RUNTIME_DEBUG_FRAMEREADERLOOP	= 1 << 14,
+	RUNTIME_DEBUG_FFMPEG		= 1 << 15,
+	RUNTIME_DEBUG_UI		= 1 << 16,
+	RUNTIME_DEBUG_CODECS		= 1 << 17
+};
+#endif
+
 #define RUNTIME_INIT_DESKTOP (RUNTIME_INIT_PANGO_TEXT_LAYOUT | RUNTIME_INIT_RENDER_FRONT_TO_BACK | RUNTIME_INIT_USE_UPDATE_POSITION | RUNTIME_INIT_USE_SHAPE_CACHE | RUNTIME_INIT_USE_IDLE_HINT | RUNTIME_INIT_USE_BACKEND_XLIB)
 #define RUNTIME_INIT_BROWSER (RUNTIME_INIT_RENDER_FRONT_TO_BACK | RUNTIME_INIT_USE_UPDATE_POSITION | RUNTIME_INIT_USE_SHAPE_CACHE | RUNTIME_INIT_ALLOW_WINDOWLESS | RUNTIME_INIT_USE_IDLE_HINT | RUNTIME_INIT_USE_BACKEND_XLIB)
 
 extern guint32 moonlight_flags;
+#if DEBUG
+extern guint32 debug_flags;
+#endif
 
 class TimeManager;
 class Surface;
Index: pipeline-ffmpeg.cpp
===================================================================
--- pipeline-ffmpeg.cpp	(revision 114169)
+++ pipeline-ffmpeg.cpp	(working copy)
@@ -18,6 +18,7 @@
 
 #include <glib.h>
 #include <unistd.h>
+#include <stdlib.h>
 #include <pthread.h>
 
 #include "pipeline-ffmpeg.h"
@@ -25,8 +26,6 @@
 #include "mp3.h"
 #include "debug.h"
 
-#define LOG_FFMPEG(...)// printf(__VA_ARGS__);
-
 bool ffmpeg_initialized = false;
 bool ffmpeg_registered = false;
 
Index: mplayer.cpp
===================================================================
--- mplayer.cpp	(revision 114169)
+++ mplayer.cpp	(working copy)
@@ -15,6 +15,7 @@
 #endif
 
 #include <glib.h>
+#include <stdlib.h>
 
 #include "clock.h"
 #include "mplayer.h"
@@ -22,19 +23,11 @@
 #include "runtime.h"
 #include "list.h"
 #include "media.h"
+#include "debug.h"
 
 #define DEBUG_ADVANCEFRAME 0
-#define LOG_MEDIAPLAYER(...)// printf (__VA_ARGS__);
 
-// This one prints out spew on every frame
-//#define VERBOSE_DEBUG
-#ifdef VERBOSE_DEBUG
-#define LOG_MEDIAPLAYER_EX(...) printf (__VA_ARGS__);
-#else
-#define LOG_MEDIAPLAYER_EX(...)
-#endif
 
-
 /*
  * Packet
  */
@@ -143,10 +136,10 @@
 	IMediaStream *stream = frame ? frame->stream : NULL;
 	
 	LOG_MEDIAPLAYER_EX ("MediaPlayer::FrameCallback (closure=%p)\n"
-			    "\tstate: %d, frame: %p, pts: %llu = %llu, type: %s\n"
+			    "\tstate: %d, frame: %p, pts: %llu = %llu,\n"
 			    "\taudio packets: ?, video packets: %d\n",
 			    closure, player->state, closure->frame, frame ? frame->pts : 0,
-			    frame ? MilliSeconds_FromPts (frame->pts) : 0, media_type_name[stream->GetType ()],
+			    frame ? MilliSeconds_FromPts (frame->pts) : 0, 
 			    player->video.queue.Length ());
 	
 	if (player->GetBit (MediaPlayer::Seeking)) {
Index: runtime.cpp
===================================================================
--- runtime.cpp	(revision 114169)
+++ runtime.cpp	(working copy)
@@ -71,13 +71,18 @@
 static bool inited = false;
 static bool g_type_inited = false;
 guint32 moonlight_flags = 0;
+#if DEBUG
+guint32 debug_flags = 0;
+#endif
 static GList* surface_list = NULL;
 
-static struct {
-	const char *override;
+struct env_options {
+	const char *name;
 	guint32 flag;
 	bool set;
-} overrides[] = {
+};
+
+static struct env_options overrides[] = {
 	{ "ms-codecs=no",      RUNTIME_INIT_DISABLE_MS_CODECS,     true  },
 	{ "ms-codecs=yes",     RUNTIME_INIT_DISABLE_MS_CODECS,     false },
 	{ "ffmpeg-codecs=no",  RUNTIME_INIT_DISABLE_FFMPEG_CODECS, true  },
@@ -117,9 +122,36 @@
 	{ "backend=image",     RUNTIME_INIT_USE_BACKEND_XLIB,      false },
 	{ "keepmedia=no",      RUNTIME_INIT_KEEP_MEDIA,            false },
 	{ "keepmedia=yes",     RUNTIME_INIT_KEEP_MEDIA,            true  },
-	{ "codecs=debug",      RUNTIME_INIT_CODECS_DEBUG,          true  },
+	{ NULL, 0, false }
 };
 
+#if DEBUG
+static struct env_options debugs[] = {
+        { "alsa",		RUNTIME_DEBUG_ALSA, 		true },
+        { "alsa-ex",		RUNTIME_DEBUG_ALSA_EX, 		true },
+        { "audio",		RUNTIME_DEBUG_AUDIO, 		true },
+        { "audio-ex",		RUNTIME_DEBUG_AUDIO_EX, 	true },
+        { "pulse",		RUNTIME_DEBUG_PULSE, 		true },
+        { "pulse-ex",		RUNTIME_DEBUG_PULSE_EX, 	true },
+        { "httpstreaming",	RUNTIME_DEBUG_HTTPSTREAMING, 	true },
+        { "markers",		RUNTIME_DEBUG_MARKERS, 		true },
+        { "markers-ex",		RUNTIME_DEBUG_MARKERS_EX, 	true },
+        { "mms",		RUNTIME_DEBUG_MMS, 		true },
+        { "mediaplayer",	RUNTIME_DEBUG_MEDIAPLAYER, 	true },
+        { "mediaplayer-ex",	RUNTIME_DEBUG_MEDIAPLAYER_EX, 	true },
+        { "pipeline",		RUNTIME_DEBUG_PIPELINE, 	true },
+        { "pipeline-error",	RUNTIME_DEBUG_PIPELINE_ERROR, 	true },
+        { "framereaderloop",	RUNTIME_DEBUG_FRAMEREADERLOOP, 	true },
+        { "ui",			RUNTIME_DEBUG_UI, 		true },
+        { "ffmpeg",		RUNTIME_DEBUG_FFMPEG, 		true },
+        { "codecs",		RUNTIME_DEBUG_CODECS, 		true },
+	{ NULL, 0, false }
+};
+#endif
+
+
+	
+
 #define RENDER_EXPOSE (moonlight_flags & RUNTIME_INIT_SHOW_EXPOSE)
 
 
@@ -1936,28 +1968,13 @@
 	active_window->Invalidate ();
 }
 
-
-void
-runtime_init (guint32 flags)
+static gint32
+get_flags (const char *envname, struct env_options options[])
 {
+	gint32 flags = 0;
 	const char *env;
-	
-	if (inited)
-		return;
-	
-	if (cairo_version () < CAIRO_VERSION_ENCODE(1,4,0)) {
-		printf ("*** WARNING ***\n");
-		printf ("*** Cairo versions < 1.4.0 should not be used for Moon.\n");
-		printf ("*** Moon was configured to use Cairo version %d.%d.%d, but\n",
-			CAIRO_VERSION_MAJOR, CAIRO_VERSION_MINOR, CAIRO_VERSION_MICRO);
-		printf ("*** is being run against version %s.\n", cairo_version_string ());
-		printf ("*** Proceed at your own risk\n");
-	}
-	
-	flags |= RUNTIME_INIT_SHOW_FPS;
-	
-	// Allow the user to override the flags via his/her environment
-	if ((env = g_getenv ("MOONLIGHT_OVERRIDES"))) {
+
+	if (envname && (env = g_getenv (envname))) {
 		const char *flag = env;
 		const char *inptr;
 		size_t n;
@@ -1973,15 +1990,15 @@
 				inptr++;
 			
 			n = (inptr - flag);
-			for (i = 0; i < G_N_ELEMENTS (overrides); i++) {
-				if (n != strlen (overrides[i].override))
+			for (i = 0; options[i].name != NULL; i++) {
+				if (n != strlen (options[i].name))
 					continue;
 				
-				if (!strncmp (overrides[i].override, flag, n)) {
-					if (!overrides[i].set)
-						flags &= ~overrides[i].flag;
+				if (!strncmp (options[i].name, flag, n)) {
+					if (!options[i].set)
+						flags &= ~options[i].flag;
 					else
-						flags |= overrides[i].flag;
+						flags |= options[i].flag;
 				}
 			}
 			
@@ -1991,7 +2008,34 @@
 			flag = inptr;
 		}
 	}
+
+	return flags;
+}
+
+void
+runtime_init (guint32 flags)
+{
+	if (inited)
+		return;
 	
+	if (cairo_version () < CAIRO_VERSION_ENCODE(1,4,0)) {
+		printf ("*** WARNING ***\n");
+		printf ("*** Cairo versions < 1.4.0 should not be used for Moon.\n");
+		printf ("*** Moon was configured to use Cairo version %d.%d.%d, but\n",
+			CAIRO_VERSION_MAJOR, CAIRO_VERSION_MINOR, CAIRO_VERSION_MICRO);
+		printf ("*** is being run against version %s.\n", cairo_version_string ());
+		printf ("*** Proceed at your own risk\n");
+	}
+	
+	flags |= RUNTIME_INIT_SHOW_FPS;
+	
+	// Allow the user to override the flags via his/her environment
+	flags |= get_flags ("MOONLIGHT_OVERRIDES", overrides);
+#if DEBUG
+	debug_flags = get_flags ("MOONLIGHT_DEBUG", debugs);
+#endif
+
+	
 #if OBJECT_TRACKING
 	if (EventObject::objects_created == EventObject::objects_destroyed) {
 		printf ("Runtime created (no leaked objects so far).\n");
Index: pipeline.cpp
===================================================================
--- pipeline.cpp	(revision 114169)
+++ pipeline.cpp	(working copy)
@@ -36,11 +36,6 @@
 #include "mms-downloader.h"
 #include "pipeline-ui.h"
 
-#define LOG_PIPELINE(...)// printf (__VA_ARGS__);
-#define LOG_PIPELINE_ERROR(...) printf (__VA_ARGS__);
-#define LOG_PIPELINE_ERROR_CONDITIONAL(x, ...) if (x) printf (__VA_ARGS__);
-#define LOG_FRAMEREADERLOOP(...)// printf (__VA_ARGS__);
-
 bool Media::registering_ms_codecs = false;
 bool Media::registered_ms_codecs = false;
 
@@ -69,13 +64,13 @@
 			reg = (register_codec) dlsym (dl, functions [i]);
 			if (reg != NULL) {
 				(*reg) (MOONLIGHT_CODEC_ABI_VERSION);
-			} else if (moonlight_flags & RUNTIME_INIT_CODECS_DEBUG) {
-				printf ("Moonlight: Cannot find %s in %s.\n", functions [i], libmscodecs_path);
+			} else {
+				LOG_CODECS ("Moonlight: Cannot find %s in %s.\n", functions [i], libmscodecs_path);
 			}
 		}		
 		registered_ms_codecs = true;
-	} else if (moonlight_flags & RUNTIME_INIT_CODECS_DEBUG) {
-		printf ("Moonlight: Cannot load %s: %s\n", libmscodecs_path, dlerror ());
+	} else {
+		LOG_CODECS ("Moonlight: Cannot load %s: %s\n", libmscodecs_path, dlerror ());
 	}
 	g_free (libmscodecs_path);
 
@@ -3038,7 +3033,7 @@
 	guint32 img_stride = (img_width * 3 + 3) & ~3; // in bytes
 	guint32 img_i, img_h, img_w;
 	
-	LOG_PIPELINE ("offset: %i, size: %i, width: 0x%x = %i, height: 0x%x = %i, stride: %i\n", img_offset, img_size, img_width, img_width, img_height, img_height, img_stride);
+	LOG_PIPELINE ("offset: %i, width: 0x%x = %i, height: 0x%x = %i, stride: %i\n", img_offset, img_width, img_width, img_height, img_height, img_stride);
 	
 	// create the buffer for our image
 	logo_size = dest_height * dest_width * 4;
Index: mms-downloader.cpp
===================================================================
--- mms-downloader.cpp	(revision 114169)
+++ mms-downloader.cpp	(working copy)
@@ -19,9 +19,8 @@
 
 #include "clock.h"
 #include "mms-downloader.h"
+#include "debug.h"
 
-#define LOG_MMS(...) //printf (__VA_ARGS__);
-
 static inline bool
 is_valid_mms_header (MmsHeader *header)
 {
Index: media.cpp
===================================================================
--- media.cpp	(revision 114169)
+++ media.cpp	(working copy)
@@ -14,6 +14,7 @@
 #include <config.h>
 #endif
 
+#include <unistd.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
@@ -26,6 +27,7 @@
 #include "geometry.h"
 #include "pipeline.h"
 #include "pipeline-ui.h"
+#include "debug.h"
 
 #define d(x)
 #define e(x)
@@ -411,9 +413,6 @@
 	markers->unref ();
 }
 
-#define LOG_MARKERS(...)// printf (__VA_ARGS__);
-#define LOG_MARKERS_EX(...) //printf (__VA_ARGS__);
-
 void
 MediaElement::CheckMarkers (guint64 from, guint64 to)
 {
Index: debug.cpp
===================================================================
--- debug.cpp	(revision 114169)
+++ debug.cpp	(working copy)
@@ -8,6 +8,7 @@
  */
 
 #include "config.h"
+#include "runtime.h"
 #include "debug.h"
  
 #if DEBUG
