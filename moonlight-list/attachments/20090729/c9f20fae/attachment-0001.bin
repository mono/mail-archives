Index: src/security.c
===================================================================
--- src/security.c	(revision 139022)
+++ src/security.c	(working copy)
@@ -16,6 +16,7 @@
 #if MONO_ENABLE_CORECLR_SECURITY
 
 static struct stat platform_stat;
+static struct stat platform_a11y_stat;
 
 const static char* platform_code_assemblies [] = {
 	"mscorlib.dll",
@@ -34,12 +35,34 @@
 #endif
 };
 
+void
+a11y_stat_init (char *platform_dir)
+{
+	//please keep this lookup pattern in sync with the one in A11yHelper.cs (Initiailize() method)
+	const char* moonlight_at_novell = g_strrstr (platform_dir, "moonlight@novell.com");
+	if (moonlight_at_novell != NULL) {
+		const char* after = g_strdup ("moonlight-a11y@novell.com/components");
+		const char* before = g_strndup (platform_dir, 
+		                                strlen (platform_dir) - strlen (moonlight_at_novell));
+		const char* platform_a11y_dir = g_strconcat (before, after, NULL);
+
+		memset (&platform_a11y_stat, 0, sizeof (platform_a11y_stat));
+		stat (platform_a11y_dir, &platform_a11y_stat);
+		g_free (platform_a11y_dir);
+		g_free (before);
+		g_free (after);
+		moonlight_at_novell = NULL;
+	}
+}
+
 static gboolean
 determine_platform_image (const char *image_name)
 {
 	struct stat info;
 	gchar *dir, *name;
 	unsigned int i;
+	struct stat the_platform_stat = platform_stat;
+	gboolean a11y = FALSE;
 
 	if (!image_name)
 		return FALSE;
@@ -51,20 +74,35 @@
 		return FALSE;
 	}
 
+	name = g_path_get_basename (image_name);
+	if (!name) {
+		g_free (dir);
+		return FALSE;
+	}
+	
+#if MOON_A11Y_INTERNAL_HACK_ENABLED
+	if (g_ascii_strcasecmp (name, "MoonAtkBridge.dll") == 0) {
+		the_platform_stat = platform_a11y_stat;
+		a11y = TRUE;
+	}
+#endif
+
 	/* we avoid comparing strings, e.g. /opt/mono/lib/moon versus /opt/mono//lib/moon */
-	if ((platform_stat.st_mode != info.st_mode) ||
-		(platform_stat.st_ino != info.st_ino) ||
-		(platform_stat.st_dev != info.st_dev)) {
+	if ((the_platform_stat.st_mode != info.st_mode) ||
+		(the_platform_stat.st_ino != info.st_ino) ||
+		(the_platform_stat.st_dev != info.st_dev)) {
 		g_free (dir);
+		g_free (name);
 		return FALSE;
 	}
 	g_free (dir);
 
+	if (a11y == TRUE){
+		g_free (name);
+		return TRUE;
+	}
+
 	/* we know the names of every platform assembly, because we ship them */
-	name = g_path_get_basename (image_name);
-	if (!name)
-		return FALSE;
-
 	for (i = 0; i < G_N_ELEMENTS (platform_code_assemblies); i++) {
 		if (g_ascii_strcasecmp (name, platform_code_assemblies [i]) == 0) {
 			g_free (name);
@@ -88,7 +126,13 @@
 			   "you're doing!");
 	} else if (g_path_is_absolute (platform_dir)) {
 		memset (&platform_stat, 0, sizeof (platform_stat));
+
 		if (stat (platform_dir, &platform_stat) == 0) {
+
+#if MOON_A11Y_INTERNAL_HACK_ENABLED
+			a11y_stat_init (platform_dir);
+#endif
+
 			mono_security_enable_core_clr ();
 			mono_security_set_core_clr_platform_callback (determine_platform_image);
 		}
Index: configure.ac
===================================================================
--- configure.ac	(revision 139022)
+++ configure.ac	(working copy)
@@ -106,6 +106,14 @@
 LOADER_LIBS="$GLIB_LIBS"
 AC_SUBST(LOADER_LIBS)
 
+# this hack will be dropped once we get this working:
+# http://www.mono-project.com/Moonlight/SecurityStatus#Assembly_Loading
+if test "x$MOON_A11Y_INTERNAL_HACK" = "x1"; then
+       AC_DEFINE([MOON_A11Y_INTERNAL_HACK_ENABLED], [1],
+                 [Whether Mono A11y is enabled for now])
+fi
+AM_CONDITIONAL(MOON_A11Y_INTERNAL_HACK,test x$MOON_A11Y_INTERNAL_HACK = x1)
+
 if test x$with_ff3 = xyes; then
    MOZILLA_CFLAGS=$FF3_CFLAGS
 else
Index: class/tuning/SecurityAttributes/overrides/System.Windows.manual
===================================================================
--- class/tuning/SecurityAttributes/overrides/System.Windows.manual	(revision 139022)
+++ class/tuning/SecurityAttributes/overrides/System.Windows.manual	(working copy)
@@ -8,3 +8,9 @@
 
 # this method reflects into GCHandle to avoid creating an exception every time we try a invalid handle
 +SC-M: System.Boolean Mono.Helper::GCHandleInDomain(System.IntPtr)
+
+# this method is called by the embedding API from moon
++SSC-M: System.IntPtr Mono.A11yHelper::GetAccessible()
+# this is called by the initialization of System.Windows assembly
++SSC-M: System.Void Mono.A11yHelper::Initialize()
+
Index: class/System.Windows/Assembly/AssemblyInfo.cs
===================================================================
--- class/System.Windows/Assembly/AssemblyInfo.cs	(revision 139022)
+++ class/System.Windows/Assembly/AssemblyInfo.cs	(working copy)
@@ -101,3 +101,6 @@
 [assembly: InternalsVisibleTo ("System.Windows.Browser, PublicKey=002400000480000094000000060200000024000052534131000400000100010079159977d2d03a8e6bea7a2e74e8d1afcc93e8851974952bb480a12c9134474d04062447c37e0e68c080536fcf3c3fbe2ff9c979ce998475e506e8ce82dd5b0f350dc10e93bf2eeecf874b24770c5081dbea7447fddafa277b22de47d6ffea449674a4f9fccf84d15069089380284dbdd35f46cdff12a1bd78e4ef0065d016df")]
 [assembly: InternalsVisibleTo ("Moonlight.Gtk, PublicKey=002400000480000094000000060200000024000052534131000400001100000005E62DA51722818A2ADC73D5CE64289260012A442031582E808F5C290EF155F10AB93441F92A7A59736D3481245ED4E0E864F5E1ACCADD217D53EE0263E6E3852FE94AB6B708984C6C69BA79F40A0896E1FFF820B7C55D4968C8F41CAE2AABC136B16B8AF83D013946CE190BC03C2A6C8DE8C0CB135ED656F46BF9A2D03E8188")]
 #endif
+#if MOON_A11Y_INTERNAL_HACK
+[assembly: InternalsVisibleTo ("MoonAtkBridge, PublicKey=00240000048000009400000006020000002400005253413100040000110000004bb98b1af6c1df0df8c02c380e116b7a7f0c8c827aecfccddc6e29b7c754cd608b49dfcef4df9699ad182e50f66afa4e68dabc7b6aeeec0aa4719a5f8e0aae8c193080a706adc3443a8356b1f254142034995532ac176398e12a30f6a74a119a89ac47672c9ae24d7e90de686557166e3b873cd707884431a0451d9d6f7fe795")]
+#endif
Index: class/System.Windows/System.Windows.mdp
===================================================================
--- class/System.Windows/System.Windows.mdp	(revision 139022)
+++ class/System.Windows/System.Windows.mdp	(working copy)
@@ -19,6 +19,7 @@
     <File name="System.Windows/DependencyObject.g.cs" subtype="Code" buildaction="Compile" />
     <File name="Assembly/MonoTODOAttribute.cs" subtype="Code" buildaction="Compile" />
     <File name="Assembly/AssemblyInfo.cs" subtype="Code" buildaction="Compile" />
+    <File name="Mono/A11yHelper.cs" subtype="Code" buildaction="Compile" />
     <File name="Mono/DispatcherTimer.cs" subtype="Code" buildaction="Compile" />
     <File name="Mono/EventHandlerList.cs" subtype="Code" buildaction="Compile" />
     <File name="Mono/Events.cs" subtype="Code" buildaction="Compile" />
Index: class/System.Windows/Mono/A11yHelper.cs
===================================================================
--- class/System.Windows/Mono/A11yHelper.cs	(revision 0)
+++ class/System.Windows/Mono/A11yHelper.cs	(revision 0)
@@ -0,0 +1,101 @@
+//
+// A11yHelper.cs
+//
+// Contact:
+//   Mono-A11Y List (mono-a11y@forge.novell.com)
+//   Moonlight List (moonlight-list@lists.ximian.com)
+//
+// Copyright 2009 Novell, Inc.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.IO;
+using System.Reflection;
+
+namespace Mono {
+
+	internal static class A11yHelper {
+		
+		private const string BRIDGE_ASM_NAME = "MoonAtkBridge.dll";
+		private const string BRIDGE_FULL_NAME = "Moonlight.AtkBridge.AutomationBridge";
+
+		internal static void Initialize ()
+		{
+#if MOON_A11Y_INTERNAL_HACK
+			string current_assembly_location = Assembly.GetExecutingAssembly ().Location;
+			
+			//please keep this lookup pattern in sync with the one in security.c (security_enable_coreclr() method)
+			int pos = current_assembly_location.IndexOf ("moonlight@novell");
+			if (pos < 0)
+				return;
+
+			string load_location = Path.Combine (current_assembly_location.Substring (0, pos), "moonlight-a11y@novell.com");
+			if (!Directory.Exists (load_location))
+				return;
+
+			load_location = Path.Combine (Path.Combine (load_location, "components"), BRIDGE_ASM_NAME);
+
+			Assembly bridge_asm;
+			try {
+				bridge_asm = Assembly.LoadFrom (load_location);
+			} catch (Exception e) {
+				return;
+			}
+
+			bridge_type = bridge_asm.GetType (BRIDGE_FULL_NAME);
+			if (bridge_type == null) {
+				Console.Error.WriteLine (String.Format ("Could not find type {0} in assembly {1}", BRIDGE_FULL_NAME, BRIDGE_ASM_NAME));
+				return;
+			}
+
+			automation_bridge = bridge_type.GetMethod (
+				"CreateAutomationBridge",
+				BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.InvokeMethod)
+				.Invoke (null, null);
+
+			accessibility_enabled = (bool) bridge_type.GetMethod (
+				"IsAccessibilityEnabled",
+				BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.InvokeMethod)
+				.Invoke (null, null);
+		}
+		
+		private static Type bridge_type;
+		private static object automation_bridge;
+		private static bool accessibility_enabled = false;
+		private static IntPtr accessible;
+		
+		public static IntPtr GetAccessible ()
+		{
+			if (!accessibility_enabled || automation_bridge == null)
+				return IntPtr.Zero;
+
+			if (accessible == IntPtr.Zero)
+				accessible =  (IntPtr) bridge_type.GetMethod ("GetAccessibleHandle",
+				                                               BindingFlags.Instance | 
+				                                               BindingFlags.NonPublic | 
+				                                               BindingFlags.InvokeMethod)
+				                                               .Invoke (automation_bridge, null);
+			return accessible;
+#endif
+		}
+	}
+}
Index: class/System.Windows/Mono/ApplicationLauncher.cs
===================================================================
--- class/System.Windows/Mono/ApplicationLauncher.cs	(revision 139022)
+++ class/System.Windows/Mono/ApplicationLauncher.cs	(working copy)
@@ -44,6 +44,11 @@
 	/// </summary>	
 	class ApplicationLauncher {
 
+		static ApplicationLauncher ()
+		{
+			A11yHelper.Initialize ();
+		}
+
 		/// <summary>
 		///   Creates a new Loader for a XAML file.
 		/// </summary>
Index: class/System.Windows/Makefile.am
===================================================================
--- class/System.Windows/Makefile.am	(revision 139022)
+++ class/System.Windows/Makefile.am	(working copy)
@@ -19,6 +19,12 @@
 
 CSCFLAGS = /codepage:65001 -d:SANITY -d:NET_1_1 -d:NET_2_0 -d:MOONLIGHT -debug+ -noconfig -r:System -r:System.Core -r:System.Xml -d:AGCLR -unsafe
 
+## this hack will be dropped once we get this working:
+## http://www.mono-project.com/Moonlight/SecurityStatus#Assembly_Loading
+if MOON_A11Y_INTERNAL_HACK
+CSCFLAGS += -define:MOON_A11Y_INTERNAL_HACK
+endif
+
 GMCS = gmcs $(CSCFLAGS) -lib:../lib/moonlight -d:NET_3_0
 SMCS = MONO_PATH="../lib/2.1:$$MONO_PATH" mono --runtime=moonlight --security=temporary-smcs-hack ../lib/2.1/smcs.exe -r:System.Net $(CSCFLAGS)
 GACUTIL = gacutil /gacdir $(DESTDIR)$(prefix)/lib /root $(DESTDIR)$(prefix)/lib
@@ -38,6 +44,7 @@
 	$(srcdir)/MS.Internal/Dummy.cs	\
 	$(srcdir)/System.Windows.Hosting/Dummy.cs	\
 	$(srcdir)/System.IO/SimpleUnmanagedMemoryStream.cs			\
+	$(srcdir)/Mono/A11yHelper.cs						\
 	$(srcdir)/Mono/ApplicationLauncher.cs					\
 	$(srcdir)/Mono/DispatcherTimer.cs					\
 	$(srcdir)/Mono/EasingFunctionWrapper.cs					\
