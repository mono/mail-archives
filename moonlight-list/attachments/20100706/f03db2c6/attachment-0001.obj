diff --git a/class/System.Windows/Mono/ApplicationLauncher.cs b/class/System.Windows/Mono/ApplicationLauncher.cs
index b7c187f..fc92565 100644
--- a/class/System.Windows/Mono/ApplicationLauncher.cs
+++ b/class/System.Windows/Mono/ApplicationLauncher.cs
@@ -50,6 +50,22 @@ namespace Mono {
 		}
 
 		/// <summary>
+		///   Ensures that a managed peer has been created for a given native dependencyobject.
+		/// </summary>
+		public static void EnsureManagedPeer (IntPtr forDO)
+		{
+			var o = NativeDependencyObjectHelper.Lookup (forDO);
+			if (o == null) {
+				o = NativeDependencyObjectHelper.FromIntPtr (forDO);
+#if DEBUG_REF
+				Console.WriteLine ("Creating managed peer {0}/{1} for {2:X}", o.GetHashCode(), o.GetType(), forDO);
+#endif
+				// this next line is just to keep mcs from giving us a warning about "o" being unused
+				GC.SuppressFinalize (o);
+			}
+		}
+		
+		/// <summary>
 		///   Creates a new Loader for a XAML file.
 		/// </summary>
 		public static ManagedXamlLoader CreateXamlLoader (IntPtr native_loader, IntPtr plugin, IntPtr surface, string resourceBase, string filename, string contents)
diff --git a/class/System.Windows/Mono/EventObjectToggleRef.cs b/class/System.Windows/Mono/EventObjectToggleRef.cs
index 0b3dd5c..d314ea5 100644
--- a/class/System.Windows/Mono/EventObjectToggleRef.cs
+++ b/class/System.Windows/Mono/EventObjectToggleRef.cs
@@ -57,7 +57,7 @@ namespace Mono
 		static void RefToggled (IntPtr obj, bool isLastRef)
 		{
 			try {
-				EventObjectToggleRef tref = null;
+				EventObjectToggleRef tref;
 				NativeDependencyObjectHelper.objects.TryGetValue (obj, out tref);
 				if (tref != null)
 					tref.Toggle (isLastRef);
diff --git a/class/System.Windows/Mono/Events.cs b/class/System.Windows/Mono/Events.cs
index 3d2e70f..57ea64a 100644
--- a/class/System.Windows/Mono/Events.cs
+++ b/class/System.Windows/Mono/Events.cs
@@ -137,8 +137,8 @@ namespace Mono {
 		{
 			return SafeDispatcher ( (sender, calldata, closure)
 						=> { object o = NativeDependencyObjectHelper.FromIntPtr (closure);
-						     handler (o,
-							      NativeDependencyObjectHelper.FromIntPtr (calldata) as RoutedEventArgs ?? new RoutedEventArgs (calldata, false)); } );
+						     handler (o, null ); } );
+			//			NativeDependencyObjectHelper.FromIntPtr (calldata) as RoutedEventArgs ?? new RoutedEventArgs (calldata, false)); } );
 		}
 
 		public static UnmanagedEventHandler CreateKeyEventHandlerDispatcher (KeyEventHandler handler)
diff --git a/class/System.Windows/Mono/INativeEventObjectWrapper.cs b/class/System.Windows/Mono/INativeEventObjectWrapper.cs
index e576b27..aa67044 100644
--- a/class/System.Windows/Mono/INativeEventObjectWrapper.cs
+++ b/class/System.Windows/Mono/INativeEventObjectWrapper.cs
@@ -33,5 +33,8 @@ namespace Mono {
 	internal interface INativeEventObjectWrapper {
 		IntPtr NativeHandle { get; set; }
 		Kind GetKind ();
+
+		void AddStrongRef (IntPtr referent, string name);
+		void ClearStrongRef (IntPtr referent, string name);
 	}
 }
\ No newline at end of file
diff --git a/class/System.Windows/Mono/NativeDependencyObjectHelper.cs b/class/System.Windows/Mono/NativeDependencyObjectHelper.cs
index 4631cb4..d0d73a5 100644
--- a/class/System.Windows/Mono/NativeDependencyObjectHelper.cs
+++ b/class/System.Windows/Mono/NativeDependencyObjectHelper.cs
@@ -49,6 +49,28 @@ using System.Linq.Expressions;
 namespace Mono {
 
 	internal static class NativeDependencyObjectHelper {
+
+		public static StrongRefCallback add_strong_ref = new StrongRefCallback (AddStrongRef);
+		public static StrongRefCallback clear_strong_ref = new StrongRefCallback (ClearStrongRef);
+
+		static void AddStrongRef (IntPtr referer, IntPtr referent, string name)
+		{
+			INativeEventObjectWrapper wrapper = NativeDependencyObjectHelper.Lookup (referer);
+			if (wrapper == null)
+				return;
+
+			wrapper.AddStrongRef (referent, name);
+		}
+
+		static void ClearStrongRef (IntPtr referer, IntPtr referent, string name)
+		{
+			INativeEventObjectWrapper wrapper = NativeDependencyObjectHelper.Lookup (referer);
+			if (wrapper == null)
+				return;
+
+			wrapper.ClearStrongRef (referent, name);
+		}
+
 #region "helpers for the INativeDependencyObjectWrapper interface"
 		public static object GetValue (INativeDependencyObjectWrapper wrapper, DependencyProperty dp)
 		{
@@ -176,7 +198,7 @@ namespace Mono {
 			lock (objects) {
 				if (objects.ContainsKey (native)) {
 	#if DEBUG
-					throw new ExecutionEngineException ("multiple mappings registered for the same unmanaged peer");
+					throw new ExecutionEngineException (string.Format ("multiple mappings registered for the same unmanaged peer."));
 	#endif
 					Console.WriteLine ("multiple mappings registered for the same unmanaged peer 0x{0:x}, type = {1}", native, wrapper.GetType());
 					Console.WriteLine (Environment.StackTrace);
@@ -184,6 +206,13 @@ namespace Mono {
 				}
 				
 				tref = new EventObjectToggleRef (wrapper);
+
+#if DEBUG_REF
+				Console.WriteLine ("adding native mapping from {0} to {1}/{2}", native, wrapper.GetHashCode(), wrapper.GetType());
+				if (wrapper is Application)
+					Console.WriteLine (Environment.StackTrace);
+#endif
+
 				objects[native] = tref;
 			}
 			tref.Initialize ();
@@ -198,10 +227,14 @@ namespace Mono {
 			
 			if (native == IntPtr.Zero)
 				return;
-			
+
 			lock (objects) {
-				if (objects.TryGetValue (native, out tref))
+				if (objects.TryGetValue (native, out tref)) {
+#if DEBUG_REF
+					Console.WriteLine ("freeing native mapping for {0} - {1}/{2}", native, wrapper.GetHashCode(), wrapper.GetType());
+#endif
 					objects.Remove (native);
+				}
 			}
 			if (tref != null)
 				tref.Free ();
@@ -284,6 +317,7 @@ namespace Mono {
 			case Kind.BORDER: return new Border (raw, false);
 			case Kind.CANVAS: return new Canvas (raw, false);
 			case Kind.CIRCLEEASE: return new CircleEase (raw, false);
+			case Kind.COLLECTIONCHANGEDEVENTARGS: return new InternalCollectionChangedEventArgs (raw, false);
 			case Kind.COLORANIMATION: return new ColorAnimation (raw, false);
 			case Kind.COLORANIMATIONUSINGKEYFRAMES: return new ColorAnimationUsingKeyFrames (raw, false);
 			case Kind.COLORKEYFRAME_COLLECTION: return new ColorKeyFrameCollection (raw, false);
diff --git a/class/System.Windows/Mono/NativeMethods.cs b/class/System.Windows/Mono/NativeMethods.cs
index bb579d8..014f4be 100644
--- a/class/System.Windows/Mono/NativeMethods.cs
+++ b/class/System.Windows/Mono/NativeMethods.cs
@@ -53,6 +53,7 @@ namespace Mono {
 		NoPolicy
 	}
 
+	internal delegate void StrongRefCallback (IntPtr referer, IntPtr referent, string name);
 	internal delegate Size MeasureOverrideCallback (Size availableSize);
 	internal delegate Size ArrangeOverrideCallback (Size finalSize);
 	internal delegate void LoadedCallback (IntPtr fwe_ptr);
diff --git a/class/System.Windows/Mono/Surface.cs b/class/System.Windows/Mono/Surface.cs
index 8a00a22..72d9b95 100644
--- a/class/System.Windows/Mono/Surface.cs
+++ b/class/System.Windows/Mono/Surface.cs
@@ -60,6 +60,13 @@ namespace Mono
 		public Surface (IntPtr native, bool dropref)
 		{
 			this.Native = native;
+
+			strongRefs = new Dictionary<IntPtr,INativeEventObjectWrapper> ();
+
+			NativeMethods.event_object_set_strong_ref_callbacks (native,
+									     NativeDependencyObjectHelper.add_strong_ref,
+									     NativeDependencyObjectHelper.clear_strong_ref);
+
 			if (dropref)
 				NativeMethods.event_object_unref (native);
 		}
@@ -73,9 +80,36 @@ namespace Mono
 			get { return Native; }
 			set { Native = value; }
 		}
+
+		Dictionary<IntPtr,INativeEventObjectWrapper> strongRefs;
+
+		void INativeEventObjectWrapper.AddStrongRef (IntPtr referent, string name)
+		{
+			if (strongRefs.ContainsKey (referent))
+				return;
+
+			var o = NativeDependencyObjectHelper.FromIntPtr (referent);
+			if (o != null) {
+#if DEBUG_REF
+				Console.WriteLine ("Adding ref from {0}/{1} to {2}/{3}", GetHashCode(), this, o.GetHashCode(), o);
+#endif
+				strongRefs.Add (referent, o);
+			}
+		}
+
+		void INativeEventObjectWrapper.ClearStrongRef (IntPtr referent, string name)
+		{
+#if DEBUG_REF
+			var o = NativeDependencyObjectHelper.FromIntPtr (referent);
+			Console.WriteLine ("Clearing ref from {0}/{1} to {2}/{3}", GetHashCode(), this, o.GetHashCode(), o);
+#endif
+			strongRefs.Remove (referent);
+		}
 		
 		internal void Free ()
 		{
+			NativeMethods.event_object_set_strong_ref_callbacks (native, null, null);
+
 			if (free_mapping) {
 				free_mapping = false;
 				NativeDependencyObjectHelper.FreeNativeMapping (this);
diff --git a/class/System.Windows/Mono/ToggleRef.cs b/class/System.Windows/Mono/ToggleRef.cs
index cd7ddb8..89effb1 100644
--- a/class/System.Windows/Mono/ToggleRef.cs
+++ b/class/System.Windows/Mono/ToggleRef.cs
@@ -92,16 +92,33 @@ namespace Mono
 			gch.Free ();
 		}
 
+		[StructLayout(LayoutKind.Explicit)]
+		struct Foo {
+			[FieldOffset(0)] public IntPtr intptr;
+			[FieldOffset(0)] public object o;
+		}
+
 		protected void Toggle (bool isLastRef)
 		{
 			WeakReference weak = reference as WeakReference;
 			if (!isLastRef) {
-				if (weak != null && weak.IsAlive)
+				if (weak != null && weak.IsAlive) {
 					reference = weak.Target;
+#if DEBUG_REF
+					Console.WriteLine ("Toggling weak to strong for {0}/{1}", reference.GetHashCode (), reference);
+#endif
+				}
 			}
 			else {
-				if (weak == null)
+				if (weak == null) {
+					Foo foo1, foo2;
+					foo1.o = this;
+					foo2.o = reference;
+#if DEBUG_REF
+					Console.WriteLine ("Toggling strong to weak for {0}/{1} MonoObject* = {2}/{3}", reference.GetHashCode (), reference, foo1.intptr, foo2.intptr);
+#endif
 					reference = new WeakReference (reference);
+				}
 			}
 		}
 
diff --git a/class/System.Windows/System.Windows.Documents/TextPointer.cs b/class/System.Windows/System.Windows.Documents/TextPointer.cs
index 705681e..8a62557 100644
--- a/class/System.Windows/System.Windows.Documents/TextPointer.cs
+++ b/class/System.Windows/System.Windows.Documents/TextPointer.cs
@@ -80,6 +80,16 @@ namespace System.Windows.Documents {
 		{
 			return Kind.TEXTPOINTER;
 		}
+
+		void INativeEventObjectWrapper.AddStrongRef (IntPtr referent, string name)
+		{
+			throw new Exception ();
+		}
+
+		void INativeEventObjectWrapper.ClearStrongRef (IntPtr referent, string name)
+		{
+			throw new Exception ();
+		}
 		
 		public bool IsAtInsertionPosition {
 			get; private set;
diff --git a/class/System.Windows/System.Windows.Documents/TextSelection.cs b/class/System.Windows/System.Windows.Documents/TextSelection.cs
index d147a01..904d4d3 100644
--- a/class/System.Windows/System.Windows.Documents/TextSelection.cs
+++ b/class/System.Windows/System.Windows.Documents/TextSelection.cs
@@ -80,6 +80,16 @@ namespace System.Windows.Documents {
 			set { NativeHandle = value; }
 		}
 
+		void INativeEventObjectWrapper.AddStrongRef (IntPtr referent, string name)
+		{
+			throw new Exception ();
+		}
+
+		void INativeEventObjectWrapper.ClearStrongRef (IntPtr referent, string name)
+		{
+			throw new Exception ();
+		}
+
 		object INativeDependencyObjectWrapper.GetValue (DependencyProperty dp)
 		{
 			return NativeDependencyObjectHelper.GetValue (this, dp);
diff --git a/class/System.Windows/System.Windows.Media/CaptureImageCompletedEventArgs.cs b/class/System.Windows/System.Windows.Media/CaptureImageCompletedEventArgs.cs
index d15c784..a8a5883 100644
--- a/class/System.Windows/System.Windows.Media/CaptureImageCompletedEventArgs.cs
+++ b/class/System.Windows/System.Windows.Media/CaptureImageCompletedEventArgs.cs
@@ -99,6 +99,16 @@ namespace System.Windows.Media {
                         set { NativeHandle = value; }
                 }
 
+		void INativeEventObjectWrapper.AddStrongRef (IntPtr referent, string name)
+		{
+			throw new Exception ();
+		}
+
+		void INativeEventObjectWrapper.ClearStrongRef (IntPtr referent, string name)
+		{
+			throw new Exception ();
+		}
+
                 Kind INativeEventObjectWrapper.GetKind ()
                 {
                         return Kind.SENDCOMPLETEDEVENTARGS;
diff --git a/class/System.Windows/System.Windows.Messaging/LocalMessageReceiver.cs b/class/System.Windows/System.Windows.Messaging/LocalMessageReceiver.cs
index 8bbf1c3..ec91dc5 100644
--- a/class/System.Windows/System.Windows.Messaging/LocalMessageReceiver.cs
+++ b/class/System.Windows/System.Windows.Messaging/LocalMessageReceiver.cs
@@ -140,6 +140,16 @@ namespace System.Windows.Messaging {
 			set { NativeHandle = value; }
 		}
 
+		void INativeEventObjectWrapper.AddStrongRef (IntPtr referent, string name)
+		{
+			throw new Exception ();
+		}
+
+		void INativeEventObjectWrapper.ClearStrongRef (IntPtr referent, string name)
+		{
+			throw new Exception ();
+		}
+
 		object INativeDependencyObjectWrapper.GetValue (DependencyProperty dp)
 		{
 			return NativeDependencyObjectHelper.GetValue (this, dp);
diff --git a/class/System.Windows/System.Windows.Messaging/LocalMessageSender.cs b/class/System.Windows/System.Windows.Messaging/LocalMessageSender.cs
index 8e0ba5b..8f4177d 100644
--- a/class/System.Windows/System.Windows.Messaging/LocalMessageSender.cs
+++ b/class/System.Windows/System.Windows.Messaging/LocalMessageSender.cs
@@ -118,6 +118,16 @@ namespace System.Windows.Messaging {
 			set { NativeHandle = value; }
 		}
 
+		void INativeEventObjectWrapper.AddStrongRef (IntPtr referent, string name)
+		{
+			throw new Exception ();
+		}
+
+		void INativeEventObjectWrapper.ClearStrongRef (IntPtr referent, string name)
+		{
+			throw new Exception ();
+		}
+
 		object INativeDependencyObjectWrapper.GetValue (DependencyProperty dp)
 		{
 			return NativeDependencyObjectHelper.GetValue (this, dp);
diff --git a/class/System.Windows/System.Windows.Messaging/MessageReceivedEventArgs.cs b/class/System.Windows/System.Windows.Messaging/MessageReceivedEventArgs.cs
index d5a767d..38d3f09 100644
--- a/class/System.Windows/System.Windows.Messaging/MessageReceivedEventArgs.cs
+++ b/class/System.Windows/System.Windows.Messaging/MessageReceivedEventArgs.cs
@@ -101,6 +101,16 @@ namespace System.Windows.Messaging {
 		{
 			return Kind.MESSAGERECEIVEDEVENTARGS;
 		}
+
+		void INativeEventObjectWrapper.AddStrongRef (IntPtr referent, string name)
+		{
+			throw new Exception ();
+		}
+
+		void INativeEventObjectWrapper.ClearStrongRef (IntPtr referent, string name)
+		{
+			throw new Exception ();
+		}
 #endregion
 	}
 
diff --git a/class/System.Windows/System.Windows.Messaging/SendCompletedEventArgs.cs b/class/System.Windows/System.Windows.Messaging/SendCompletedEventArgs.cs
index ee6a238..49b3e2d 100644
--- a/class/System.Windows/System.Windows.Messaging/SendCompletedEventArgs.cs
+++ b/class/System.Windows/System.Windows.Messaging/SendCompletedEventArgs.cs
@@ -102,6 +102,16 @@ namespace System.Windows.Messaging {
 		{
 			return Kind.SENDCOMPLETEDEVENTARGS;
 		}
+
+		void INativeEventObjectWrapper.AddStrongRef (IntPtr referent, string name)
+		{
+			throw new Exception ();
+		}
+
+		void INativeEventObjectWrapper.ClearStrongRef (IntPtr referent, string name)
+		{
+			throw new Exception ();
+		}
 #endregion
 
 	}
diff --git a/class/System.Windows/System.Windows/Application.cs b/class/System.Windows/System.Windows/Application.cs
index 43a75af..6c2096a 100644
--- a/class/System.Windows/System.Windows/Application.cs
+++ b/class/System.Windows/System.Windows/Application.cs
@@ -75,6 +75,12 @@ namespace System.Windows {
 			if (dropref)
 				NativeMethods.event_object_unref (raw);
 
+			strongRefs = new Dictionary<IntPtr,INativeEventObjectWrapper> ();
+
+			NativeMethods.event_object_set_strong_ref_callbacks (NativeHandle,
+									     NativeDependencyObjectHelper.add_strong_ref,
+									     NativeDependencyObjectHelper.clear_strong_ref);
+
 			get_default_style = new GetDefaultStyleCallback (get_default_style_cb_safe);
 			convert_setter_values = new ConvertSetterValuesCallback (convert_setter_values_cb_safe);
 			convert_keyframe_value = new ConvertKeyframeValueCallback (convert_keyframe_value_cb_safe);
@@ -151,6 +157,8 @@ namespace System.Windows {
 
 		internal void Free ()
 		{
+			NativeMethods.event_object_set_strong_ref_callbacks (NativeHandle, null, null);
+
 			if (free_mapping) {
 				free_mapping = false;
 				NativeDependencyObjectHelper.FreeNativeMapping (this);
@@ -808,6 +816,32 @@ namespace System.Windows {
 			set { NativeHandle = value; }
 		}
 
+		Dictionary<IntPtr,INativeEventObjectWrapper> strongRefs;
+
+		void INativeEventObjectWrapper.AddStrongRef (IntPtr referent, string name)
+		{
+			if (strongRefs.ContainsKey (referent))
+				return;
+
+			var o = NativeDependencyObjectHelper.FromIntPtr (referent);
+			if (o != null) {
+#if DEBUG_REF
+				Console.WriteLine ("Adding ref from {0}/{1} to {2}/{3}", GetHashCode(), this, o.GetHashCode(), o);
+#endif
+				strongRefs.Add (referent, o);
+			}
+		}
+
+		void INativeEventObjectWrapper.ClearStrongRef (IntPtr referent, string name)
+		{
+#if DEBUG_REF
+			var o = NativeDependencyObjectHelper.FromIntPtr (referent);
+			Console.WriteLine ("Clearing ref from {0}/{1} to {2}/{3}", GetHashCode(), this, o.GetHashCode(), o);
+			Console.WriteLine (Environment.StackTrace);
+#endif
+			strongRefs.Remove (referent);
+		}
+
 		object INativeDependencyObjectWrapper.GetValue (DependencyProperty dp)
 		{
 			return NativeDependencyObjectHelper.GetValue (this, dp);
diff --git a/class/System.Windows/System.Windows/DependencyObject.cs b/class/System.Windows/System.Windows/DependencyObject.cs
index 9a77b65..a1aa509 100644
--- a/class/System.Windows/System.Windows/DependencyObject.cs
+++ b/class/System.Windows/System.Windows/DependencyObject.cs
@@ -115,6 +115,10 @@ namespace System.Windows {
 		{
 			native = raw;
 			expressions = new Dictionary<DependencyProperty, Expression> ();
+			strongRefs = new Dictionary<IntPtr,INativeEventObjectWrapper> ();
+			NativeMethods.event_object_set_strong_ref_callbacks (native,
+									     NativeDependencyObjectHelper.add_strong_ref,
+									     NativeDependencyObjectHelper.clear_strong_ref);
 			NativeMethods.event_object_set_object_type (native, GetKind ());
 			// Objects created on the managed side have a normal managed lifetime,
 			// so drop the native ref hold
@@ -122,17 +126,56 @@ namespace System.Windows {
 				NativeMethods.event_object_unref (native);
 		}
 
+		Dictionary<IntPtr,INativeEventObjectWrapper> strongRefs;
+
+		void INativeEventObjectWrapper.AddStrongRef (IntPtr referent, string name)
+		{
+			AddStrongRef (referent, name);
+		}
+
+		internal virtual void AddStrongRef (IntPtr referent, string name)
+		{
+			if (strongRefs.ContainsKey (referent))
+				return;
+
+			var o = NativeDependencyObjectHelper.FromIntPtr (referent);
+			if (o != null) {
+#if DEBUG_REF
+				Console.WriteLine ("Adding ref from {0}/{1} to {2}/{3}", GetHashCode(), this, o.GetHashCode(), o);
+#endif
+				strongRefs.Add (referent, o);
+			}
+		}
+
+		void INativeEventObjectWrapper.ClearStrongRef (IntPtr referent, string name)
+		{
+			ClearStrongRef (referent, name);
+		}
+
+		internal virtual void ClearStrongRef (IntPtr referent, string name)
+		{
+#if DEBUG_REF
+			var o = NativeDependencyObjectHelper.FromIntPtr (referent);
+			Console.WriteLine ("Clearing ref from {0}/{1} to {2}/{3}", GetHashCode(), this, o.GetHashCode(), o);
+#endif
+			strongRefs.Remove (referent);
+		}
+
 		internal void Free ()
 		{
 			UnregisterAllEvents ();
 
+			NativeMethods.event_object_set_strong_ref_callbacks (native, null, null);
+
 			if (free_mapping)
 				NativeDependencyObjectHelper.FreeNativeMapping (this);
 		}
 
+		protected bool should_free_in_finalizer = true;
 		~DependencyObject ()
 		{
-			Free ();
+			if (should_free_in_finalizer)
+				Free ();
 		}
 
 		internal void AddPropertyChangedHandler (DependencyProperty property, UnmanagedPropertyChangeHandler handler)
diff --git a/class/System.Windows/System.Windows/DependencyObject.g.cs b/class/System.Windows/System.Windows/DependencyObject.g.cs
index 63e67a4..bc59761 100644
--- a/class/System.Windows/System.Windows/DependencyObject.g.cs
+++ b/class/System.Windows/System.Windows/DependencyObject.g.cs
@@ -126,7 +126,10 @@ namespace System.Windows {
 	}
 
 	partial class PresentationFrameworkCollection<T> {
-		internal PresentationFrameworkCollection (IntPtr raw, bool dropref) : base (raw, dropref) {}
+		internal PresentationFrameworkCollection (IntPtr raw, bool dropref) : base (raw, dropref)
+		{
+			Initialize ();
+		}
 	}
 
 	partial class ResourceDictionary {
diff --git a/class/System.Windows/System.Windows/Deployment.cs b/class/System.Windows/System.Windows/Deployment.cs
index 5dc10e8..5573298 100644
--- a/class/System.Windows/System.Windows/Deployment.cs
+++ b/class/System.Windows/System.Windows/Deployment.cs
@@ -50,25 +50,40 @@ namespace System.Windows {
 		
 		static List<Action> shutdown_actions = new List<Action> ();
 		static bool is_shutting_down;
+
+		~Deployment ()
+		{
+			Console.WriteLine ("In ~Deployment");
+			if (!NativeMethods.deployment_is_safe_to_die (native)) {
+#if DEBUG
+				Console.WriteLine ("Deployment not ready to die, re-registering it for finalization");
+#endif
+				should_free_in_finalizer = false;
+				GC.ReRegisterForFinalize (this);
+			}
+			else
+				should_free_in_finalizer = true;
+		}
+
+		internal override void AddStrongRef (IntPtr referent, string name)
+		{
+			if (name == "Surface")
+				Surface = NativeDependencyObjectHelper.FromIntPtr (referent) as Surface;
+			else
+				base.AddStrongRef (referent, name);
+
+		}
+
+		internal override void ClearStrongRef (IntPtr referent, string name)
+		{
+			if (name == "Surface")
+				Surface = null;
+			else
+				base.ClearStrongRef (referent, name);
+		}
 		
-		/* thread-safe */
 		internal Surface Surface {
-			get {
-				/* we need to use the thread-safe version of Deployment::GetSurface since this property
-				 * may get called from several threads. */
-				IntPtr surface = NativeMethods.deployment_get_surface_reffed (this.native);
-				Surface result;
-				
-				if (surface == IntPtr.Zero)
-					return null;
-				
-				result = NativeDependencyObjectHelper.FromIntPtr (surface) as Surface;
-				
-				/* we got a reffed surface, release that ref now that we'll have a managed ref */
-				NativeMethods.event_object_unref (surface);
-				
-				return result;
-			}
+			get; private set;
 		}
 		
 		internal static bool IsShuttingDown {
@@ -510,7 +525,9 @@ namespace System.Windows {
 		// which means we need to report errors to the plugin, since it won't get it from calling managed code
 		internal bool CreateApplication ()
 		{
+			Console.WriteLine ("Setting application to null");
 			SetCurrentApplication (null);
+			Console.WriteLine ("Done setting application to null");
 
 			if (EntryAssembly == null) {
 				EmitError (2103, "Could not find the entry point assembly") ;
@@ -556,7 +573,9 @@ namespace System.Windows {
 				return false;
 			}
 
+			Console.WriteLine ("Setting new application");
 			SetCurrentApplication (instance);
+			Console.WriteLine ("done setting new application");
 
 			StartupEventArgs args = new StartupEventArgs();
 			instance.OnStartup (args);
diff --git a/class/System.Windows/System.Windows/PresentationFrameworkCollection.cs b/class/System.Windows/System.Windows/PresentationFrameworkCollection.cs
index d0d87a7..806d875 100644
--- a/class/System.Windows/System.Windows/PresentationFrameworkCollection.cs
+++ b/class/System.Windows/System.Windows/PresentationFrameworkCollection.cs
@@ -37,16 +37,115 @@ using System.Collections.Specialized;
 
 namespace System.Windows {
 
+	internal enum CollectionChangedAction {
+		Add,
+		Remove,
+		Replace,
+		Clearing,
+		Cleared,
+	}
+
+	internal class InternalCollectionChangedEventArgs : RoutedEventArgs {
+
+		internal InternalCollectionChangedEventArgs (IntPtr raw, bool drop_ref) : base (raw, drop_ref)
+		{
+		}
+
+		internal InternalCollectionChangedEventArgs (IntPtr raw) : this (raw, false)
+		{
+		}
+
+		public CollectionChangedAction ChangedAction {
+			get {
+				return NativeMethods.collection_changed_event_args_get_changed_action (NativeHandle);
+			}
+		}
+
+		public object GetNewItem (Type t)
+		{
+			return Value.ToObject (t, NativeMethods.collection_changed_event_args_get_new_item (NativeHandle));
+		}
+
+		public int Index {
+			get {
+				return NativeMethods.collection_changed_event_args_get_index (NativeHandle);
+			}
+		}
+	}
+
+
 	public abstract partial class PresentationFrameworkCollection<T> : DependencyObject, IList<T>, IList {
 		const bool BoxValueTypes = false;
 
 		public static readonly System.Windows.DependencyProperty CountProperty =
 			DependencyProperty.Lookup (Kind.COLLECTION, "Count", typeof (double)); // <- double is not a typo
-		
+
+		List<T> managedList;
+
+		static UnmanagedEventHandler collection_changed = Events.SafeDispatcher (
+			 (IntPtr target, IntPtr calldata, IntPtr closure) => {
+				 var args = NativeDependencyObjectHelper.Lookup (calldata) as InternalCollectionChangedEventArgs;
+				 if (args == null)
+					 args = new InternalCollectionChangedEventArgs (calldata);
+				 ((PresentationFrameworkCollection<T>) NativeDependencyObjectHelper.FromIntPtr (closure)).InternalCollectionChanged (args);
+			 });
+
+		void InternalCollectionChanged (InternalCollectionChangedEventArgs args)
+		{
+			switch (args.ChangedAction) {
+			case CollectionChangedAction.Add:
+#if DEBUG_REF
+				Console.WriteLine ("collection {0}/{1} adding ref to {2}/{3}", GetHashCode(), this, ((T)args.GetNewItem(typeof (T))).GetHashCode(), ((T)args.GetNewItem(typeof (T))));
+#endif
+				if (args.Index == managedList.Count)
+					managedList.Add (((T)args.GetNewItem(typeof (T))));
+				else
+					managedList.Insert (args.Index, (T)args.GetNewItem(typeof (T)));
+				break;
+			case CollectionChangedAction.Remove:
+#if DEBUG_REF
+				Console.WriteLine ("collection {0}/{1} removing ref to {2}/{3}", GetHashCode(), this, managedList[args.Index].GetHashCode(), managedList[args.Index]);
+#endif
+				managedList.RemoveAt (args.Index);
+				break;
+			case CollectionChangedAction.Replace:
+#if DEBUG_REF
+				Console.WriteLine ("collection {0}/{1} replacing ref from {2}/{3} to {4}/{5}", GetHashCode(), this, managedList[args.Index].GetHashCode(), managedList[args.Index], ((T)args.GetNewItem(typeof (T))), ((T)args.GetNewItem(typeof (T))).GetHashCode());
+#endif
+				managedList[args.Index] = ((T)args.GetNewItem(typeof (T)));
+				break;
+			case CollectionChangedAction.Clearing:
+				// nothing to do
+				break;
+			case CollectionChangedAction.Cleared:
+#if DEBUG_REF
+				foreach (var o in managedList)
+					Console.WriteLine (" collection {0}/{1} removing ref to {2}/{3}", GetHashCode(), this, o.GetHashCode(), o);
+#endif
+				managedList.Clear();
+				break;
+			}
+		}
+
+		void Initialize ()
+		{
+			// set up our managed list and populate it
+			// from the unmanaged list if there is
+			// anything in it
+			managedList = new List<T>();
+			int c = Count;
+			for (int i = 0; i < c; i ++) {
+				managedList.Add (this[i]);
+			}
+
+			// set up a handler to track changes to the unmanaged list
+			Events.AddHandler (this, EventIds.Collection_ChangedEvent, collection_changed);
+		}
+
 		int IList.Add (object value)
 		{
 			Add ((T)value);
-			return Count;
+			return managedList.Count;
 		}
 		
 		void IList.Remove (object value)
@@ -60,7 +159,7 @@ namespace System.Windows {
 		}
 
 		object IList.this [int index] {
-			get { return this[index]; }
+			get { return managedList[index]; }
 			set { this[index] = (T)value; }
 		}
 
@@ -74,40 +173,33 @@ namespace System.Windows {
 			return IndexOf ((T) value);
 		}
 		
-		
 		public void Clear ()
 		{
-			if (IsReadOnly)
-				throw new InvalidOperationException ("the collection is readonly");
-
+			ReadOnlyCheck ();
 			ClearImpl ();
 		}
 		
 		public void RemoveAt (int index)
 		{
-			if (IsReadOnly)
-				throw new InvalidOperationException ("the collection is readonly");
+			ReadOnlyCheck ();
 			RemoveAtImpl (index);
 		}
 
 		public void Add (T value)
 		{
-			if (IsReadOnly)
-				throw new InvalidOperationException ("the collection is readonly");
+			ReadOnlyCheck ();
 			AddImpl (value);
 		}
 		
 		public void Insert (int index, T value)
 		{
-			if (IsReadOnly)
-				throw new InvalidOperationException ("the collection is readonly");
+			ReadOnlyCheck ();
 			InsertImpl (index, value);
 		}
 		
 		public bool Remove (T value)
 		{
-			if (IsReadOnly)
-				throw new InvalidOperationException ("the collection is readonly");
+			ReadOnlyCheck ();
 			return RemoveImpl (value);
 		}
 		
@@ -116,8 +208,7 @@ namespace System.Windows {
 				return GetItemImpl (index);
 			}
 			set {
-				if (IsReadOnly)
-					throw new InvalidOperationException ("the collection is readonly");
+				ReadOnlyCheck ();
 				SetItemImpl (index, value);
 			}
 		}
@@ -132,6 +223,12 @@ namespace System.Windows {
 			return IndexOfImpl (value);
 		}
 
+		private void ReadOnlyCheck ()
+		{
+			if (IsReadOnly)
+				throw new InvalidOperationException ("the collection is readonly");
+		}
+
 		// most types that inherits from this throws ArgumentNullException when
 		// null value are used - except for ItemCollection
 		internal virtual bool NullCheck (NotifyCollectionChangedAction action, T value)
@@ -195,12 +292,10 @@ namespace System.Windows {
 		
 		internal sealed class CollectionIterator : IEnumerator, IDisposable {
 			IntPtr native_iter;
-			Type type;
 			
-			public CollectionIterator(Type type, IntPtr native_iter)
+			public CollectionIterator(IntPtr native_iter)
 			{
 				this.native_iter = native_iter;
-				this.type = type;
 			}
 			
 			public bool MoveNext ()
@@ -223,7 +318,7 @@ namespace System.Windows {
 					if (val == IntPtr.Zero)
 						return null;
 					
-					return Value.ToObject (type, val);
+					return Value.ToObject (typeof (T), val);
 				}
 			}
 			
@@ -315,7 +410,7 @@ namespace System.Windows {
 		
 		IEnumerator IEnumerable.GetEnumerator ()
 		{
-			return new CollectionIterator (typeof (T), NativeMethods.collection_get_iterator (native));
+			return new CollectionIterator (NativeMethods.collection_get_iterator (native));
 		}
 		
 		public bool IsFixedSize {
diff --git a/class/System.Windows/System.Windows/RoutedEventArgs.cs b/class/System.Windows/System.Windows/RoutedEventArgs.cs
index 2ceff9f..ee53f53 100644
--- a/class/System.Windows/System.Windows/RoutedEventArgs.cs
+++ b/class/System.Windows/System.Windows/RoutedEventArgs.cs
@@ -24,6 +24,7 @@
 //
 
 using Mono;
+using System.Collections.Generic;
 
 namespace System.Windows {
 
@@ -56,16 +57,47 @@ namespace System.Windows {
 		{
 			return NativeMethods.event_object_get_object_type (_native);
 		}
+
+		Dictionary<IntPtr,INativeEventObjectWrapper> strongRefs;
+
+		void INativeEventObjectWrapper.AddStrongRef (IntPtr referent, string name)
+		{
+			if (strongRefs.ContainsKey (referent))
+				return;
+
+			var o = NativeDependencyObjectHelper.FromIntPtr (referent);
+			if (o != null) {
+#if DEBUG_REF
+				Console.WriteLine ("Adding ref from {0}/{1} to {2}/{3}", GetHashCode(), this, o.GetHashCode(), o);
+#endif
+				strongRefs.Add (referent, o);
+			}
+		}
+
+		void INativeEventObjectWrapper.ClearStrongRef (IntPtr referent, string name)
+		{
+#if DEBUG_REF
+			var o = NativeDependencyObjectHelper.FromIntPtr (referent);
+			Console.WriteLine ("Clearing ref from {0}/{1} to {2}/{3}", GetHashCode(), this, o.GetHashCode(), o);
+#endif
+			strongRefs.Remove (referent);
+		}
 		
 		internal RoutedEventArgs (IntPtr raw, bool dropref)
 		{
 			NativeHandle = raw;
+			strongRefs = new Dictionary<IntPtr,INativeEventObjectWrapper> ();
+			NativeMethods.event_object_set_strong_ref_callbacks (raw,
+									     NativeDependencyObjectHelper.add_strong_ref,
+									     NativeDependencyObjectHelper.clear_strong_ref);
 			if (dropref)
 				NativeMethods.event_object_unref (raw);
 		}
 		
 		internal void Free ()
 		{
+			NativeMethods.event_object_set_strong_ref_callbacks (NativeHandle, null, null);
+
 			if (free_mapping) {
 				free_mapping = false;
 				NativeDependencyObjectHelper.FreeNativeMapping (this);
diff --git a/class/tuning/SecurityAttributes/automatic/System.Windows.auto.sc b/class/tuning/SecurityAttributes/automatic/System.Windows.auto.sc
index 4111538..8608a83 100644
--- a/class/tuning/SecurityAttributes/automatic/System.Windows.auto.sc
+++ b/class/tuning/SecurityAttributes/automatic/System.Windows.auto.sc
@@ -1,5 +1,5 @@
 # [SecurityCritical] needed to execute code inside 'System.Windows, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'.
-# 475 methods needs to be decorated.
+# 479 methods needs to be decorated.
 
 # p/invoke declaration
 +SC-M: Mono.Kind Mono.NativeMethods::collection_get_element_type(System.IntPtr)
@@ -443,6 +443,9 @@
 +SC-M: System.IntPtr Mono.NativeMethods::control_get_template_child(System.IntPtr,System.String)
 
 # p/invoke declaration
++SC-M: System.IntPtr Mono.NativeMethods::control_get_template_root(System.IntPtr)
+
+# p/invoke declaration
 +SC-M: System.IntPtr Mono.NativeMethods::dependency_object_find_name(System.IntPtr,System.String,Mono.Kind&)
 
 # p/invoke declaration
@@ -896,6 +899,9 @@
 +SC-M: System.Void Mono.NativeMethods::capture_source_stop(System.IntPtr)
 
 # p/invoke declaration
++SC-M: System.Void Mono.NativeMethods::collection_changed_event_args_set_changed_action(System.IntPtr,System.Windows.CollectionChangedAction)
+
+# p/invoke declaration
 +SC-M: System.Void Mono.NativeMethods::collection_changed_event_args_set_index(System.IntPtr,System.Int32)
 
 # p/invoke declaration
@@ -974,6 +980,9 @@
 +SC-M: System.Void Mono.NativeMethods::event_object_set_object_type(System.IntPtr,Mono.Kind)
 
 # p/invoke declaration
++SC-M: System.Void Mono.NativeMethods::event_object_set_strong_ref_callbacks(System.IntPtr,Mono.StrongRefCallback,Mono.StrongRefCallback)
+
+# p/invoke declaration
 +SC-M: System.Void Mono.NativeMethods::event_object_unref(System.IntPtr)
 
 # p/invoke declaration
@@ -1390,6 +1399,9 @@
 # implements 'System.Void Mono.INativeEventObjectWrapper::set_NativeHandle(System.IntPtr)'.
 +SC-M: System.Void System.Windows.RoutedEventArgs::set_NativeHandle(System.IntPtr)
 
+# p/invoke declaration
++SC-M: System.Windows.CollectionChangedAction Mono.NativeMethods::collection_changed_event_args_get_changed_action(System.IntPtr)
+
 # using 'Mono.Xaml.XamlCallbackData*' as a parameter type
 +SC-M: System.Windows.DependencyProperty Mono.Xaml.ManagedXamlLoader::DependencyPropertyFromString(Mono.Xaml.XamlCallbackData*,System.Object,Mono.Value*,System.String)
 
diff --git a/class/tuning/SecurityAttributes/automatic/System.Windows.auto.ssc b/class/tuning/SecurityAttributes/automatic/System.Windows.auto.ssc
index a3d7fb8..2e7f17d 100644
--- a/class/tuning/SecurityAttributes/automatic/System.Windows.auto.ssc
+++ b/class/tuning/SecurityAttributes/automatic/System.Windows.auto.ssc
@@ -1,5 +1,5 @@
 # [SecuritySafeCritical] needed inside System.Windows to call all [SecurityCritical] methods
-# 611 methods
+# 615 methods
 
 +SSC-M: System.Void Mono.Events::SafeAction(System.Action)
 +SSC-M: System.Exception Mono.Events::SendCompletedEventArgsGetError(System.IntPtr)
@@ -551,6 +551,7 @@
 +SSC-M: System.String System.Windows.Messaging.SendCompletedEventArgs::get_ReceiverName()
 +SSC-M: System.String System.Windows.Messaging.SendCompletedEventArgs::get_Response()
 +SSC-M: System.Collections.IEnumerator System.Windows.PresentationFrameworkCollection`1::System.Collections.IEnumerable.GetEnumerator()
++SSC-M: System.Void System.Windows.PresentationFrameworkCollection`1::Initialize()
 +SSC-M: System.Int32 System.Windows.PresentationFrameworkCollection`1::get_Count()
 +SSC-M: System.Collections.Generic.IEnumerator`1<T> System.Windows.PresentationFrameworkCollection`1::GetEnumerator()
 +SSC-M: System.Void System.Windows.PresentationFrameworkCollection`1::ClearImpl()
@@ -561,6 +562,9 @@
 +SSC-M: T System.Windows.PresentationFrameworkCollection`1::GetItemImpl(System.Int32)
 +SSC-M: System.Void System.Windows.PresentationFrameworkCollection`1::SetItemImpl(System.Int32,T,System.Boolean)
 +SSC-M: System.Int32 System.Windows.PresentationFrameworkCollection`1::IndexOfImpl(T,System.Boolean)
++SSC-M: System.Windows.CollectionChangedAction System.Windows.PresentationFrameworkCollection`1/InternalCollectionChangedEventArgs::get_ChangedAction()
++SSC-M: T System.Windows.PresentationFrameworkCollection`1/InternalCollectionChangedEventArgs::get_NewItem()
++SSC-M: System.Int32 System.Windows.PresentationFrameworkCollection`1/InternalCollectionChangedEventArgs::get_Index()
 +SSC-M: System.Boolean System.Windows.ResourceDictionary::System.Collections.Generic.IDictionary<object,object>.TryGetValue(System.Object,System.Object&)
 +SSC-M: System.Int32 System.Windows.ResourceDictionary::get_Count()
 +SSC-M: System.Object System.Windows.ResourceDictionary::get_Item(System.Object)
diff --git a/class/tuning/SecurityAttributes/automatic/mscorlib.auto.sc b/class/tuning/SecurityAttributes/automatic/mscorlib.auto.sc
index 4630003..fe3925b 100644
--- a/class/tuning/SecurityAttributes/automatic/mscorlib.auto.sc
+++ b/class/tuning/SecurityAttributes/automatic/mscorlib.auto.sc
@@ -1,5 +1,5 @@
 # [SecurityCritical] needed to execute code inside 'mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'.
-# 448 methods needs to be decorated.
+# 432 methods needs to be decorated.
 
 # internal call
 +SC-M: System.AppDomain System.AppDomain::getCurDomain()
@@ -208,9 +208,6 @@
 # internal call
 +SC-M: System.Byte[] System.Reflection.Emit.CustomAttributeBuilder::GetBlob(System.Reflection.Assembly,System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])
 
-# overrides 'System.Byte[] System.Reflection.Module::ResolveSignature(System.Int32)'.
-+SC-M: System.Byte[] System.Reflection.Emit.ModuleBuilder::ResolveSignature(System.Int32)
-
 # internal call
 +SC-M: System.Byte[] System.Reflection.Emit.SignatureHelper::get_signature_field()
 
@@ -218,12 +215,6 @@
 +SC-M: System.Byte[] System.Reflection.Emit.SignatureHelper::get_signature_local()
 
 # internal call
-+SC-M: System.Byte[] System.Reflection.Module::ResolveSignature(System.IntPtr,System.Int32,System.Reflection.ResolveTokenError&)
-
-# overrides 'System.Byte[] System.Reflection.Module::ResolveSignature(System.Int32)'.
-+SC-M: System.Byte[] System.Reflection.MonoModule::ResolveSignature(System.Int32)
-
-# internal call
 +SC-M: System.Byte[] System.Threading.Thread::ByteArrayToCurrentDomain(System.Byte[])
 
 # internal call
@@ -289,15 +280,9 @@
 # internal call
 +SC-M: System.Globalization.CultureInfo System.Threading.Thread::GetCachedCurrentUICulture(System.Threading.InternalThread)
 
-# overrides 'System.Guid System.Reflection.Module::get_ModuleVersionId()'.
-+SC-M: System.Guid System.Reflection.Emit.ModuleBuilder::get_ModuleVersionId()
-
 # overrides 'System.Guid System.Reflection.Module::GetModuleVersionId()'.
 +SC-M: System.Guid System.Reflection.Emit.ModuleBuilder::GetModuleVersionId()
 
-# overrides 'System.Guid System.Reflection.Module::get_ModuleVersionId()'.
-+SC-M: System.Guid System.Reflection.MonoModule::get_ModuleVersionId()
-
 # localloc
 +SC-M: System.Int32 Mono.Globalization.Unicode.SimpleCollator::Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
 
@@ -395,12 +380,6 @@
 +SC-M: System.Int32 System.Reflection.Module::get_MetadataToken(System.Reflection.Module)
 
 # internal call
-+SC-M: System.Int32 System.Reflection.Module::GetMDStreamVersion(System.IntPtr)
-
-# overrides 'System.Int32 System.Reflection.Module::get_MDStreamVersion()'.
-+SC-M: System.Int32 System.Reflection.MonoModule::get_MDStreamVersion()
-
-# internal call
 +SC-M: System.Int32 System.Reflection.ParameterInfo::GetMetadataToken()
 
 # internal call
@@ -530,9 +509,6 @@
 +SC-M: System.IntPtr System.Reflection.Assembly::GetManifestResourceInternal(System.String,System.Int32&,System.Reflection.Module&)
 
 # internal call
-+SC-M: System.IntPtr System.Reflection.Module::ResolveFieldToken(System.IntPtr,System.Int32,System.IntPtr[],System.IntPtr[],System.Reflection.ResolveTokenError&)
-
-# internal call
 +SC-M: System.IntPtr System.Reflection.Module::ResolveMethodToken(System.IntPtr,System.Int32,System.IntPtr[],System.IntPtr[],System.Reflection.ResolveTokenError&)
 
 # internal call
@@ -724,15 +700,9 @@
 # internal call
 +SC-M: System.Reflection.EventInfo[] System.MonoType::GetEvents_internal(System.Reflection.BindingFlags,System.Type)
 
-# overrides 'System.Reflection.FieldInfo System.Reflection.Module::ResolveField(System.Int32,System.Type[],System.Type[])'.
-+SC-M: System.Reflection.FieldInfo System.Reflection.Emit.ModuleBuilder::ResolveField(System.Int32,System.Type[],System.Type[])
-
 # internal call
 +SC-M: System.Reflection.FieldInfo System.Reflection.FieldInfo::internal_from_handle_type(System.IntPtr,System.IntPtr)
 
-# overrides 'System.Reflection.FieldInfo System.Reflection.Module::ResolveField(System.Int32,System.Type[],System.Type[])'.
-+SC-M: System.Reflection.FieldInfo System.Reflection.MonoModule::ResolveField(System.Int32,System.Type[],System.Type[])
-
 # internal call
 +SC-M: System.Reflection.FieldInfo[] System.MonoType::GetFields_internal(System.Reflection.BindingFlags,System.Type)
 
@@ -748,15 +718,6 @@
 # Promoting interface member to [SecurityCritical] because of 'System.Reflection.ManifestResourceInfo System.Reflection.Assembly::GetManifestResourceInfo(System.String)'.
 +SC-M: System.Reflection.ManifestResourceInfo System.Runtime.InteropServices._Assembly::GetManifestResourceInfo(System.String)
 
-# overrides 'System.Reflection.MemberInfo System.Reflection.Module::ResolveMember(System.Int32,System.Type[],System.Type[])'.
-+SC-M: System.Reflection.MemberInfo System.Reflection.Emit.ModuleBuilder::ResolveMember(System.Int32,System.Type[],System.Type[])
-
-# internal call
-+SC-M: System.Reflection.MemberInfo System.Reflection.Module::ResolveMemberToken(System.IntPtr,System.Int32,System.IntPtr[],System.IntPtr[],System.Reflection.ResolveTokenError&)
-
-# overrides 'System.Reflection.MemberInfo System.Reflection.Module::ResolveMember(System.Int32,System.Type[],System.Type[])'.
-+SC-M: System.Reflection.MemberInfo System.Reflection.MonoModule::ResolveMember(System.Int32,System.Type[],System.Type[])
-
 # implements 'System.Reflection.MethodBase System.Runtime.InteropServices._Exception::get_TargetSite()'.
 +SC-M: System.Reflection.MethodBase System.Exception::get_TargetSite()
 
@@ -910,9 +871,6 @@
 # internal call
 +SC-M: System.String System.Reflection.MonoMethod::get_name(System.Reflection.MethodBase)
 
-# overrides 'System.String System.Reflection.Module::get_FullyQualifiedName()'.
-+SC-M: System.String System.Reflection.MonoModule::get_FullyQualifiedName()
-
 # Promoting interface member to [SecurityCritical] because of 'System.String System.Reflection.Assembly::get_CodeBase()'.
 +SC-M: System.String System.Runtime.InteropServices._Assembly::get_CodeBase()
 
@@ -1190,9 +1148,6 @@
 +SC-M: System.Void System.Reflection.Emit.TypeBuilder::setup_internal_class(System.Reflection.Emit.TypeBuilder)
 
 # internal call
-+SC-M: System.Void System.Reflection.Module::GetPEKind(System.IntPtr,System.Reflection.PortableExecutableKinds&,System.Reflection.ImageFileMachine&)
-
-# internal call
 +SC-M: System.Void System.Reflection.MonoEventInfo::get_event_info(System.Reflection.MonoEvent,System.Reflection.MonoEventInfo&)
 
 # internal call
@@ -1207,9 +1162,6 @@
 # internal call
 +SC-M: System.Void System.Reflection.MonoMethodInfo::get_method_info(System.IntPtr,System.Reflection.MonoMethodInfo&)
 
-# overrides 'System.Void System.Reflection.Module::GetPEKind(System.Reflection.PortableExecutableKinds&,System.Reflection.ImageFileMachine&)'.
-+SC-M: System.Void System.Reflection.MonoModule::GetPEKind(System.Reflection.PortableExecutableKinds&,System.Reflection.ImageFileMachine&)
-
 # internal call
 +SC-M: System.Void System.Reflection.MonoPropertyInfo::get_property_info(System.Reflection.MonoProperty,System.Reflection.MonoPropertyInfo&,System.Reflection.PInfo)
 
diff --git a/class/tuning/SecurityAttributes/automatic/mscorlib.auto.ssc b/class/tuning/SecurityAttributes/automatic/mscorlib.auto.ssc
index d4ee71e..cb95265 100644
--- a/class/tuning/SecurityAttributes/automatic/mscorlib.auto.ssc
+++ b/class/tuning/SecurityAttributes/automatic/mscorlib.auto.ssc
@@ -1,5 +1,5 @@
 # [SecuritySafeCritical] needed inside mscorlib to call all [SecurityCritical] methods
-# 457 methods
+# 452 methods
 
 +SSC-M: System.Void Mono.Globalization.Unicode.MSCompatUnicodeTable::.cctor()
 +SSC-M: System.Void Mono.Globalization.Unicode.SimpleCollator::.cctor()
@@ -225,10 +225,10 @@
 +SSC-M: System.Reflection.Assembly System.Reflection.Assembly::GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version,System.Boolean)
 +SSC-M: System.Reflection.Assembly System.Reflection.Assembly::Load(System.String)
 +SSC-M: System.Reflection.Module System.Reflection.Assembly::GetManifestModule()
++SSC-M: System.Type System.Reflection.Assembly::GetType(System.String,System.Boolean,System.Boolean)
++SSC-M: System.Reflection.AssemblyName[] System.Reflection.Assembly::GetReferencedAssemblies()
 +SSC-M: System.Void System.Reflection.AssemblyName::.ctor(System.String)
 +SSC-M: System.Reflection.Emit.ModuleBuilder System.Reflection.Emit.AssemblyBuilder::DefineDynamicModule(System.String,System.String,System.Boolean,System.Boolean)
-+SSC-M: System.Type System.Reflection.Emit.AssemblyBuilder::GetType(System.String,System.Boolean,System.Boolean)
-+SSC-M: System.Reflection.AssemblyName[] System.Reflection.Emit.AssemblyBuilder::GetReferencedAssemblies()
 +SSC-M: System.Boolean System.Reflection.Emit.CustomAttributeBuilder::IsValidType(System.Type)
 +SSC-M: System.Void System.Reflection.Emit.CustomAttributeBuilder::Initialize(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])
 +SSC-M: System.Type System.Reflection.Emit.DerivedType::get_UnderlyingSystemType()
@@ -243,9 +243,6 @@
 +SSC-M: System.Int32 System.Reflection.Emit.ModuleBuilder::GetToken(System.Reflection.MemberInfo)
 +SSC-M: System.Int32 System.Reflection.Emit.ModuleBuilder::GetToken(System.Reflection.MethodInfo,System.Type[])
 +SSC-M: System.Int32 System.Reflection.Emit.ModuleBuilder::GetToken(System.Reflection.Emit.SignatureHelper)
-+SSC-M: System.Reflection.MethodBase System.Reflection.Emit.ModuleBuilder::ResolveMethod(System.Int32,System.Type[],System.Type[])
-+SSC-M: System.String System.Reflection.Emit.ModuleBuilder::ResolveString(System.Int32)
-+SSC-M: System.Type System.Reflection.Emit.ModuleBuilder::ResolveType(System.Int32,System.Type[],System.Type[])
 +SSC-M: System.Byte[] System.Reflection.Emit.SignatureHelper::GetSignature()
 +SSC-M: System.Void System.Reflection.Emit.TypeBuilder::.ctor(System.Reflection.Emit.ModuleBuilder,System.Reflection.TypeAttributes,System.Int32)
 +SSC-M: System.Void System.Reflection.Emit.TypeBuilder::.ctor(System.Reflection.Emit.ModuleBuilder,System.String,System.Reflection.TypeAttributes,System.Type,System.Type[],System.Reflection.Emit.PackingSize,System.Int32,System.Type)
@@ -261,8 +258,12 @@
 +SSC-M: System.Reflection.MethodBase System.Reflection.MethodBase::GetMethodFromIntPtr(System.IntPtr,System.IntPtr)
 +SSC-M: System.Reflection.MethodBase System.Reflection.MethodBase::GetMethodFromHandle(System.RuntimeMethodHandle)
 +SSC-M: System.Reflection.MethodBase System.Reflection.MethodBase::GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
-+SSC-M: System.Type System.Reflection.MonoAssembly::GetType(System.String,System.Boolean,System.Boolean)
-+SSC-M: System.Reflection.AssemblyName[] System.Reflection.MonoAssembly::GetReferencedAssemblies()
++SSC-M: System.Int32 System.Reflection.Module::get_MetadataToken()
++SSC-M: System.Type System.Reflection.Module::GetType(System.String,System.Boolean,System.Boolean)
++SSC-M: System.Reflection.MethodBase System.Reflection.Module::ResolveMethod(System.Int32,System.Type[],System.Type[])
++SSC-M: System.String System.Reflection.Module::ResolveString(System.Int32)
++SSC-M: System.Type System.Reflection.Module::ResolveType(System.Int32,System.Type[],System.Type[])
++SSC-M: System.Type[] System.Reflection.Module::GetTypes()
 +SSC-M: System.Object System.Reflection.MonoCMethod::Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
 +SSC-M: System.String System.Reflection.MonoCMethod::get_Name()
 +SSC-M: System.Reflection.MonoEventInfo System.Reflection.MonoEventInfo::GetEventInfo(System.Reflection.MonoEvent)
@@ -287,12 +288,6 @@
 +SSC-M: System.Reflection.MonoMethodInfo System.Reflection.MonoMethodInfo::GetMethodInfo(System.IntPtr)
 +SSC-M: System.Reflection.ParameterInfo[] System.Reflection.MonoMethodInfo::GetParametersInfo(System.IntPtr,System.Reflection.MemberInfo)
 +SSC-M: System.Reflection.ParameterInfo System.Reflection.MonoMethodInfo::GetReturnParameterInfo(System.Reflection.MonoMethod)
-+SSC-M: System.Int32 System.Reflection.MonoModule::get_MetadataToken()
-+SSC-M: System.Type System.Reflection.MonoModule::GetType(System.String,System.Boolean,System.Boolean)
-+SSC-M: System.Reflection.MethodBase System.Reflection.MonoModule::ResolveMethod(System.Int32,System.Type[],System.Type[])
-+SSC-M: System.String System.Reflection.MonoModule::ResolveString(System.Int32)
-+SSC-M: System.Type System.Reflection.MonoModule::ResolveType(System.Int32,System.Type[],System.Type[])
-+SSC-M: System.Type[] System.Reflection.MonoModule::GetTypes()
 +SSC-M: System.Void System.Reflection.MonoProperty::CachePropertyInfo(System.Reflection.PInfo)
 +SSC-M: System.Object System.Reflection.MonoProperty::GetConstantValue()
 +SSC-M: System.Object System.Reflection.MonoProperty::GetRawConstantValue()
diff --git a/generators/Generator.cs b/generators/Generator.cs
index 5a78e69..6dcae9d 100644
--- a/generators/Generator.cs
+++ b/generators/Generator.cs
@@ -31,6 +31,7 @@ class Generator {
 		GenerateKindCs ();
 
 		GenerateTypeStaticCpp (info);
+		GenerateFactories (info);
 		GenerateCBindings (info);
 		GeneratePInvokes (info);
 		GenerateTypes_G (info);
@@ -2232,6 +2233,8 @@ class Generator {
 		impl.AppendLine ("#include <stdlib.h>");
 		impl.AppendLine ();
 		impl.AppendLine ("#include \"cbinding.h\"");
+		if (!dir.Contains ("plugin"))
+			impl.AppendLine ("#include \"factory.h\"");
 		impl.AppendLine ();
 		headers.Sort ();
 		foreach (string h in headers) {
@@ -2283,6 +2286,136 @@ class Generator {
 		GenerateCBindings (info, plugin_dir);
 	}
 
+	public static void GenerateFactories (GlobalInfo info)
+	{
+		string base_dir = Environment.CurrentDirectory;
+		string dir = Path.Combine (base_dir, "src/");
+
+		List<MethodInfo> methods;
+		StringBuilder header = new StringBuilder ();
+		List <string> headers = new List<string> ();
+
+		methods = info.AllCtors;
+
+		Helper.WriteWarningGenerated (header);;
+
+		header.AppendLine ("#ifndef __MOONLIGHT_FACTORY_H__");
+		header.AppendLine ("#define __MOONLIGHT_FACTORY_H__");
+		header.AppendLine ();
+		header.AppendLine ("#include <glib.h>");
+		header.AppendLine ("#include <cairo.h>");
+		header.AppendLine ();
+
+		foreach (MemberInfo method in methods) {
+			string h;
+
+			if (string.IsNullOrEmpty (method.Header))
+				continue;
+			if (!method.Header.StartsWith (dir))
+				continue;
+
+			h = method.Header.Substring (dir.Length);
+
+			if (!headers.Contains (h) &&
+			    h != "pipeline-ui.h" &&
+			    h != "pipeline-nocodec-ui.h" &&
+			    !h.Contains ("pal/")) {
+				headers.Add (h);
+			}
+		}
+		headers.Sort ();
+		foreach (string h in headers) {
+			header.Append ("#include \"");
+			header.Append (h);
+			header.AppendLine ("\"");
+		}
+
+		header.AppendLine ();
+		header.AppendLine ("class MoonUnmanagedFactory {");
+		header.AppendLine ("public:");
+		header.AppendLine ();
+
+		foreach (MemberInfo member in methods) {
+			MethodInfo method = (MethodInfo) member;
+
+			if (!method.Header.StartsWith (dir))
+				continue;
+
+			if (method.CMethod.IsConstructor) {
+				TypeInfo type = method.ParentType;
+				bool emit = false;
+				bool ensure = false;
+
+				do {
+					if (type.Name == "EventObject") {
+						emit = true;
+						break;
+					}
+					else if (type.Name == "DependencyObject") {
+						emit = true;
+						ensure = true;
+						break;
+					}
+
+					MemberInfo m = null;
+					if (type.Base != null && type.Base.Value != null && info.Children.TryGetValue (type.Base.Value, out m))
+						type = (TypeInfo) m;
+					else
+						break;
+				} while (type != null);
+
+				if (emit && !method.Annotations.ContainsKey ("SkipFactories")) {
+					WriteFactoryHeaderMethod (method.CMethod, method, header, info, ensure);
+
+					header.AppendLine ();
+				}
+			}
+		}
+
+		header.AppendLine ("};");
+		header.AppendLine ();
+		header.AppendLine ("class MoonManagedFactory {");
+		header.AppendLine ("public:");
+		header.AppendLine ();
+
+		foreach (MemberInfo member in methods) {
+			MethodInfo method = (MethodInfo) member;
+
+			if (!method.Header.StartsWith (dir))
+				continue;
+
+			if (method.CMethod.IsConstructor) {
+				TypeInfo type = method.ParentType;
+				bool emit = false;
+
+				do {
+					if (type.Name == "EventObject") {
+						emit = true;
+						break;
+					}
+
+					MemberInfo m = null;
+					if (type.Base != null && type.Base.Value != null && info.Children.TryGetValue (type.Base.Value, out m))
+						type = (TypeInfo) m;
+					else
+						break;
+				} while (type != null);
+
+				if (emit && !method.Annotations.ContainsKey ("SkipFactories")) {
+					WriteFactoryHeaderMethod (method.CMethod, method, header, info, false);
+
+					header.AppendLine ();
+				}
+			}
+		}
+
+		header.AppendLine ("};");
+		header.AppendLine ();
+		header.AppendLine ("#endif");
+
+		Helper.WriteAllText (Path.Combine (dir, "factory.h"), header.ToString ());
+	}
+
 	static void WriteHeaderMethod (MethodInfo cmethod, MethodInfo cppmethod, StringBuilder text, GlobalInfo info)
 	{
 		Log.WriteLine ("Writing header: {0}::{1} (Version: '{2}', GenerateManaged: {3})",
@@ -2324,7 +2457,28 @@ class Generator {
 		text.AppendLine ("{");
 
 		if (is_ctor) {
-			text.Append ("\treturn new ");
+			TypeInfo type = cppmethod.ParentType;
+			bool use_factory = false;
+
+			if (!cppmethod.Annotations.ContainsKey ("SkipFactories")) {
+				do {
+					if (type.Name == "EventObject") {
+						use_factory = true;
+						break;
+					}
+
+					MemberInfo m = null;
+					if (type.Base != null && type.Base.Value != null && info.Children.TryGetValue (type.Base.Value, out m))
+						type = (TypeInfo) m;
+					else
+						break;
+				} while (type != null);
+			}
+
+			if (use_factory)
+				text.Append ("\treturn MoonManagedFactory::Create");
+			else
+				text.Append ("\treturn new ");
 			text.Append (cmethod.Parent.Name);
 			cmethod.Parameters.Write (text, SignatureType.NativeC, true);
 			text.AppendLine (";");
@@ -2382,6 +2536,22 @@ class Generator {
 		text.AppendLine ("}");
 	}
 
+	static void WriteFactoryHeaderMethod (MethodInfo cmethod, MethodInfo cppmethod, StringBuilder text, GlobalInfo info, bool ensure)
+	{
+		text.Append ("\t static ");
+		cmethod.ReturnType.Write (text, SignatureType.NativeC, info);
+		text.AppendFormat ("Create{0}", cmethod.Parent.Name);
+		cmethod.Parameters.Write (text, SignatureType.NativeC, false);
+		text.Append (" { ");
+		text.AppendFormat ("{0}* o = new {0}", cmethod.Parent.Name);
+		cmethod.Parameters.Write (text, SignatureType.NativeC, true);
+		text.Append ("; ");
+		if (ensure)
+			text.Append ("o->EnsureManagedPeer (); ");
+		text.Append ("return o;");
+		text.AppendLine (" }");
+	}
+
 	static void GenerateTypeStaticCpp (GlobalInfo all)
 	{
 		string header;
@@ -2395,6 +2565,7 @@ class Generator {
 		text.AppendLine ();
 		text.AppendLine ("#include <stdlib.h>");
 
+		headers.Add ("factory.h");
 		headers.Add ("cbinding.h");
 		foreach (TypeInfo t in all.Children.SortedTypesByKind) {
 			if (t.C_Constructor == string.Empty || t.C_Constructor == null || !t.GenerateCBindingCtor) {
@@ -2528,7 +2699,11 @@ class Generator {
 							type.Interfaces.Count,
 							interfaces,
 							type.DefaultCtorVisible || type.IsValueType || type.IsEnum ? "true" : "false",
-							(type.C_Constructor != null && type.GenerateCBindingCtor) ? string.Concat ("(create_inst_func *) ", type.C_Constructor) : "NULL",
+							((type.C_Constructor != null && type.GenerateCBindingCtor)
+							 ? (type.ConstructorSkipsFactories
+							    ? string.Concat ("(create_inst_func *) ", type.C_Constructor)
+							    : string.Concat ("(create_inst_func *) MoonUnmanagedFactory::Create", type.Name))
+							 : "NULL"),
 							type.ContentProperty != null ? string.Concat ("\"", type.ContentProperty, "\"") : "NULL"
 							)
 					 );
@@ -2933,6 +3108,7 @@ class Generator {
 	{
 		files.Remove (Path.Combine (srcdir, "authors.h"));
 		files.Remove (Path.Combine (srcdir, "cbinding.h"));
+		files.Remove (Path.Combine (srcdir, "factory.h"));
 		files.Remove (Path.Combine (srcdir, "ptr.h"));
 		files.Remove (Path.Combine (plugindir, "plugin-domevents.h"));
 	}
diff --git a/generators/GlobalInfo.cs b/generators/GlobalInfo.cs
index ad294ca..066e403 100644
--- a/generators/GlobalInfo.cs
+++ b/generators/GlobalInfo.cs
@@ -20,6 +20,7 @@ class GlobalInfo : MemberInfo {
 	private List<FieldInfo> dependency_properties;
 	private List<MethodInfo> cppmethods_to_bind;
 	private List<MethodInfo> jsmethods_to_bind;
+	private List<MethodInfo> all_ctors;
 	private List<TypeInfo> dependency_objects;
 
 	/// <value>
@@ -190,6 +191,33 @@ class GlobalInfo : MemberInfo {
 		}
 	}
 
+	public List<MethodInfo> AllCtors {
+		get {
+			if (all_ctors == null) {
+				all_ctors = new List<MethodInfo> ();
+				foreach (MemberInfo member1 in Children.Values) {
+					TypeInfo type = member1 as TypeInfo;
+					if (type == null)
+						continue;
+
+					foreach (MemberInfo member2 in type.Children.Values) {
+						MethodInfo method = member2 as MethodInfo;
+						if (method == null)
+							continue;
+						if (method.Parent == null) {
+							Console.WriteLine ("The method {0} in type {1} does not have its parent set.", method.Name, type.Name);
+							continue;
+						}
+						if (!method.IsConstructor)
+							continue;
+						all_ctors.Add (method);
+					}
+				}
+				all_ctors.Sort (new Members.MembersSortedByFullName <MethodInfo> ());
+			}
+			return all_ctors;
+		}
+	}
 
 	public List<MethodInfo> CPPMethodsToBind {
 		get {
diff --git a/generators/TypeInfo.cs b/generators/TypeInfo.cs
index 2f49d05..fea57b8 100644
--- a/generators/TypeInfo.cs
+++ b/generators/TypeInfo.cs
@@ -175,6 +175,27 @@ class TypeInfo : MemberInfo {
 		}
 	}
 
+	public bool ConstructorSkipsFactories {
+		get {
+			foreach (MemberInfo member in Children.Values) {
+				MethodInfo method = member as MethodInfo;
+
+				if (method == null)
+					continue;
+
+				if (!method.IsConstructor)
+					continue;
+
+				if (method.Parameters.Count != 0)
+					continue;
+
+				if (method.Annotations.ContainsKey ("SkipFactories"))
+					return true;
+			}
+			return false;
+		}
+	}
+
 	public string C_Constructor {
 		get {
 			if (IsEnum || IsAbstract)
diff --git a/generators/TypeReference.cs b/generators/TypeReference.cs
index da6ce2c..a5bc13c 100644
--- a/generators/TypeReference.cs
+++ b/generators/TypeReference.cs
@@ -197,6 +197,9 @@ class TypeReference {
 					managed_type = "Value";
 				}
 				break;
+			case "CollectionChangedAction":
+				managed_type = "CollectionChangedAction";
+				break;
 			case "MoonMessageBoxResult":
 				managed_type = "MessageBoxResult";
 				break;
@@ -245,6 +248,9 @@ class TypeReference {
 			case "SetValueCallback":
 				managed_type = "Mono.SetValueCallback";
 				break;
+			case "StrongRefCallback":
+				managed_type = "Mono.StrongRefCallback";
+				break;
 			case "CloseDemuxerCallback":
 			case "GetDiagnosticAsyncCallback":
 			case "GetFrameAsyncCallback":
diff --git a/plugin/plugin.cpp b/plugin/plugin.cpp
index bd5c5a1..4df78ba 100644
--- a/plugin/plugin.cpp
+++ b/plugin/plugin.cpp
@@ -738,7 +738,7 @@ PluginInstance::CreateWindow ()
 	}
 
 	surface = new Surface (moon_window);
-	deployment->SetSurface (surface);
+	//	deployment->SetSurface (surface);
 	moon_window->SetSurface (surface);
 	if (bridge)
 		bridge->SetSurface (surface);
@@ -1085,6 +1085,9 @@ PluginInstance::LoadXAML ()
 		return false;
 	}
 
+	deployment->EnsureManagedPeer (surface);
+	deployment->SetSurface (surface);
+
 	xaml_loader->LoadVM ();
 
 	MoonlightScriptControlObject *root = GetRootObject ();
@@ -1133,7 +1136,13 @@ PluginInstance::LoadXAP (const char *url, const char *fname)
 	Deployment::GetCurrent ()->Reinitialize ();
 	GetDeployment()->SetXapLocation (url);
 	GetDeployment()->SetXapFilename (fname);
-	return GetDeployment ()->InitializeManagedDeployment (this, culture, uiCulture);
+
+	bool rv = GetDeployment ()->InitializeManagedDeployment (this, culture, uiCulture);
+
+	deployment->EnsureManagedPeer (surface);
+	deployment->SetSurface (surface);
+
+	return rv;
 }
 
 void
@@ -1997,6 +2006,7 @@ PluginInstance::CreatePluginDeployment ()
 
 	if (!deployment->InitializeAppDomain ()) {
 		g_warning ("Moonlight: Couldn't initialize the AppDomain");
+		unref ();
 		return false;
 	}
 
diff --git a/src/animation.cpp b/src/animation.cpp
index 0e5b580..2668daa 100644
--- a/src/animation.cpp
+++ b/src/animation.cpp
@@ -390,7 +390,6 @@ Animation::GetNaturalDurationCore (Clock* clock)
 
 
 /* storyboard */
-
 Storyboard::Storyboard ()
 {
 	SetObjectType (Type::STORYBOARD);
@@ -937,6 +936,8 @@ KeySpline::KeySpline (Point controlPoint1, Point controlPoint2)
 	quadraticsArray = NULL;
 	SetControlPoint1 (&controlPoint1);
 	SetControlPoint2 (&controlPoint2);
+
+	EnsureManagedPeer ();
 }
 
 KeySpline::KeySpline (double x1, double y1,
@@ -951,6 +952,8 @@ KeySpline::KeySpline (double x1, double y1,
 
 	SetControlPoint1 (&p1);
 	SetControlPoint2 (&p2);
+
+	EnsureManagedPeer ();
 }
 
 KeySpline::~KeySpline ()
@@ -1181,7 +1184,6 @@ DoubleKeyFrame::~DoubleKeyFrame ()
 ColorKeyFrame::ColorKeyFrame ()
 {
 	SetObjectType (Type::COLORKEYFRAME);
-	static Color c = Color (0, 0, 0, 1);
 }
 
 ColorKeyFrame::~ColorKeyFrame ()
@@ -1253,7 +1255,6 @@ DiscretePointKeyFrame::InterpolateValue (Value *baseValue, double keyFrameProgre
 		return new Value (*baseValue->AsPoint());
 }
 
-
 LinearDoubleKeyFrame::LinearDoubleKeyFrame ()
 {
 	SetObjectType(Type::LINEARDOUBLEKEYFRAME);
@@ -1330,7 +1331,6 @@ SplineDoubleKeyFrame::InterpolateValue (Value *baseValue, double keyFrameProgres
 	return new Value (LERP (start, end, splineProgress));
 }
 
-
 SplineColorKeyFrame::SplineColorKeyFrame ()
 {
 	SetObjectType (Type::SPLINECOLORKEYFRAME);
@@ -1591,7 +1591,6 @@ generic_keyframe_validator (KeyFrameCollection *col)
 	return true;
 }
 
-
 DoubleAnimationUsingKeyFrames::DoubleAnimationUsingKeyFrames ()
 {
 	SetObjectType (Type::DOUBLEANIMATIONUSINGKEYFRAMES);
@@ -1700,7 +1699,7 @@ DoubleAnimationUsingKeyFrames::Validate ()
 	return generic_keyframe_validator (GetKeyFrames ());
 }
 
-ColorAnimationUsingKeyFrames::ColorAnimationUsingKeyFrames()
+ColorAnimationUsingKeyFrames::ColorAnimationUsingKeyFrames ()
 {
 	SetObjectType (Type::COLORANIMATIONUSINGKEYFRAMES);
 }
@@ -1805,7 +1804,7 @@ ColorAnimationUsingKeyFrames::Validate ()
 	return generic_keyframe_validator (GetKeyFrames ());
 }
 
-PointAnimationUsingKeyFrames::PointAnimationUsingKeyFrames()
+PointAnimationUsingKeyFrames::PointAnimationUsingKeyFrames ()
 {
 	SetObjectType (Type::POINTANIMATIONUSINGKEYFRAMES);
 }
diff --git a/src/animation.h b/src/animation.h
index 3767c4f..3b4bd3a 100644
--- a/src/animation.h
+++ b/src/animation.h
@@ -31,10 +31,9 @@
 /* @Namespace=System.Windows.Media.Animation */
 class KeySpline : public DependencyObject {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	KeySpline ();
-	
+	/* @SkipFactories */
 	KeySpline (Point controlPoint1, Point controlPoint2);
+	/* @SkipFactories */
 	KeySpline (double x1, double y1, double x2, double y2);
 
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
@@ -54,8 +53,13 @@ public:
 	void SetControlPoint2 (Point *controlPoint2);
 	
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	KeySpline ();
+	
 	virtual ~KeySpline ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 
 private:
 	moon_quadratic *quadraticsArray;
@@ -169,9 +173,6 @@ public:
 	/* @PropertyType=EasingFunctionBase,ManagedPropertyType=IEasingFunction,GenerateAccessors */
 	const static int EasingFunctionProperty;
 
-	/* @GenerateCBinding,GeneratePInvoke */
-	DoubleAnimation ();
-	
 	virtual Type::Kind GetValueKind () { return Type::DOUBLE; };
 
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
@@ -199,8 +200,14 @@ public:
 	void SetEasingFunction (EasingFunctionBase* value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	DoubleAnimation ();
+	
 	virtual ~DoubleAnimation () {}
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 private:
 	double *doubleToCached;
 	double *doubleFromCached;
@@ -224,9 +231,6 @@ class ColorAnimation : public Animation {
 	/* @PropertyType=EasingFunctionBase,ManagedPropertyType=IEasingFunction,GenerateAccessors */
 	const static int EasingFunctionProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	ColorAnimation ();
-	
 	virtual Type::Kind GetValueKind () { return Type::COLOR; };
 
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
@@ -254,8 +258,14 @@ class ColorAnimation : public Animation {
 	void SetEasingFunction (EasingFunctionBase* value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	ColorAnimation ();
+
 	virtual ~ColorAnimation () {}
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 private:
 	Color *colorToCached;
 	Color *colorFromCached;
@@ -278,9 +288,6 @@ public:
 	/* @PropertyType=EasingFunctionBase,ManagedPropertyType=IEasingFunction,GenerateAccessors */
 	const static int EasingFunctionProperty;
 	
- 	/* @GenerateCBinding,GeneratePInvoke */
- 	PointAnimation ();
- 	
 	virtual Type::Kind GetValueKind () { return Type::POINT; };
 
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
@@ -308,8 +315,14 @@ public:
 	void SetEasingFunction (EasingFunctionBase* value);
 
 protected:
+ 	/* @GenerateCBinding,GeneratePInvoke */
+ 	PointAnimation ();
+ 	
 	virtual ~PointAnimation ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 private:
 	Point *pointToCached;
 	Point *pointFromCached;
@@ -338,6 +351,7 @@ public:
 
 protected:
 	virtual ~KeyFrame ();
+	/* @SkipFactories */
 	KeyFrame ();
 };
 
@@ -347,9 +361,6 @@ public:
 	GPtrArray *sorted_list;
 	bool resolved;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	KeyFrameCollection ();
-	
 	virtual Type::Kind GetElementType() { return Type::KEYFRAME; }
 	
 	virtual bool Clear ();
@@ -362,55 +373,73 @@ protected:
 	virtual bool AddedToCollection (Value *value, MoonError *error);
 	virtual void RemovedFromCollection (Value *value);
 	
+	/* @GenerateCBinding,GeneratePInvoke */
+	KeyFrameCollection ();
+	
 	virtual ~KeyFrameCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
 class ColorKeyFrameCollection : public KeyFrameCollection {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	ColorKeyFrameCollection ();
-	
 	virtual Type::Kind GetElementType() { return Type::COLORKEYFRAME; }
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	ColorKeyFrameCollection ();
+	
 	virtual ~ColorKeyFrameCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
 class DoubleKeyFrameCollection : public KeyFrameCollection {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	DoubleKeyFrameCollection ();
-	
 	virtual Type::Kind GetElementType() { return Type::DOUBLEKEYFRAME; }
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	DoubleKeyFrameCollection ();
+	
 	virtual ~DoubleKeyFrameCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
 class PointKeyFrameCollection : public KeyFrameCollection {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	PointKeyFrameCollection ();
-	
 	virtual Type::Kind GetElementType() { return Type::POINTKEYFRAME; }
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	PointKeyFrameCollection ();
+
 	virtual ~PointKeyFrameCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Version=2,Namespace=System.Windows.Media.Animation */
 class ObjectKeyFrameCollection : public KeyFrameCollection {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	ObjectKeyFrameCollection ();
-
 	virtual Type::Kind GetElementType() { return Type::OBJECTKEYFRAME; }
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	ObjectKeyFrameCollection ();
+
 	virtual ~ObjectKeyFrameCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
@@ -421,9 +450,6 @@ public:
 	/* @PropertyType=KeyTime,DefaultValue=KeyTime(KeyTime::UNIFORM),ManagedPropertyType=KeyTime,GenerateAccessors */
 	const static int KeyTimeProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	DoubleKeyFrame ();
-	
 	//
 	// Property Accessors
 	//
@@ -435,7 +461,13 @@ public:
 	virtual void SetKeyTime (KeyTime *keytime);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	DoubleKeyFrame ();
+	
 	virtual ~DoubleKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
@@ -446,9 +478,6 @@ public:
 	/* @PropertyType=KeyTime,DefaultValue=KeyTime(KeyTime::UNIFORM),ManagedPropertyType=KeyTime,GenerateAccessors */
 	const static int KeyTimeProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	ColorKeyFrame ();
-	
 	//
 	// Property Accessors
 	//
@@ -461,15 +490,18 @@ public:
 	virtual void SetKeyTime (KeyTime *keytime);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	ColorKeyFrame ();
+	
 	virtual ~ColorKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Version=2,Namespace=System.Windows.Media.Animation */
 class ObjectKeyFrame : public KeyFrame /* The managed class derives directly from DependencyObject */ {
 public:
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	ObjectKeyFrame ();
-	
 	/* @PropertyType=object,GenerateAccessors,GenerateManagedAccessors=false,ManagedFieldAccess=Internal */
 	const static int ConvertedValueProperty;
 	/* @PropertyType=object,ManagedPropertyType=object */
@@ -486,7 +518,13 @@ public:
 	virtual void SetKeyTime (KeyTime *keytime);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	ObjectKeyFrame ();
+	
 	virtual ~ObjectKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
@@ -497,9 +535,6 @@ public:
 	/* @PropertyType=KeyTime,DefaultValue=KeyTime(KeyTime::UNIFORM),ManagedPropertyType=KeyTime,GenerateAccessors */
 	const static int KeyTimeProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	PointKeyFrame ();
-	
 	//
 	// Property Accessors
 	//
@@ -512,7 +547,13 @@ public:
 	virtual void SetKeyTime (KeyTime *keytime);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	PointKeyFrame ();
+	
 	virtual ~PointKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 
@@ -520,13 +561,16 @@ protected:
 /* @Namespace=System.Windows.Media.Animation */
 class DiscreteDoubleKeyFrame : public DoubleKeyFrame {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	DiscreteDoubleKeyFrame ();
-	
 	virtual Value *InterpolateValue (Value *baseValue, double keyFrameProgress);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	DiscreteDoubleKeyFrame ();
+	
 	virtual ~DiscreteDoubleKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 
@@ -535,51 +579,63 @@ protected:
 /* @Namespace=System.Windows.Media.Animation */
 class DiscreteColorKeyFrame : public ColorKeyFrame {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	DiscreteColorKeyFrame ();
-	
 	virtual Value *InterpolateValue (Value *baseValue, double keyFrameProgress);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	DiscreteColorKeyFrame ();
+	
 	virtual ~DiscreteColorKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 
 /* @Version=2,Namespace=System.Windows.Media.Animation */
 class DiscreteObjectKeyFrame : public ObjectKeyFrame {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	DiscreteObjectKeyFrame ();
-	
 	virtual Value *InterpolateValue (Value *baseValue, double keyFrameProgress);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	DiscreteObjectKeyFrame ();
+	
 	virtual ~DiscreteObjectKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
 class DiscretePointKeyFrame : public PointKeyFrame {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	DiscretePointKeyFrame ();
-	
 	virtual Value *InterpolateValue (Value *baseValue, double keyFrameProgress);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	DiscretePointKeyFrame ();
+	
 	virtual ~DiscretePointKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 
 /* @Namespace=System.Windows.Media.Animation */
 class LinearDoubleKeyFrame : public DoubleKeyFrame {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	LinearDoubleKeyFrame ();
-	
 	virtual Value *InterpolateValue (Value *baseValue, double keyFrameProgress);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	LinearDoubleKeyFrame ();
+	
 	virtual ~LinearDoubleKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 
@@ -587,13 +643,16 @@ protected:
 /* @Namespace=System.Windows.Media.Animation */
 class LinearColorKeyFrame : public ColorKeyFrame {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	LinearColorKeyFrame ();
-	
 	virtual Value *InterpolateValue (Value *baseValue, double keyFrameProgress);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	LinearColorKeyFrame ();
+	
 	virtual ~LinearColorKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 
@@ -601,13 +660,16 @@ protected:
 /* @Namespace=System.Windows.Media.Animation */
 class LinearPointKeyFrame : public PointKeyFrame {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	LinearPointKeyFrame ();
-	
 	virtual Value *InterpolateValue (Value *baseValue, double keyFrameProgress);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	LinearPointKeyFrame ();
+	
 	virtual ~LinearPointKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 
@@ -618,9 +680,6 @@ public:
  	/* @PropertyType=KeySpline,AutoCreateValue,GenerateAccessors */
 	const static int KeySplineProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	SplineDoubleKeyFrame ();
-	
 	virtual Value *InterpolateValue (Value *baseValue, double keyFrameProgress);
 	
 	//
@@ -630,7 +689,13 @@ public:
 	void SetKeySpline (KeySpline* value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	SplineDoubleKeyFrame ();
+	
 	virtual ~SplineDoubleKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 
@@ -641,9 +706,6 @@ public:
  	/* @PropertyType=KeySpline,AutoCreateValue,GenerateAccessors */
 	const static int KeySplineProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	SplineColorKeyFrame ();
-	
 	virtual Value *InterpolateValue (Value *baseValue, double keyFrameProgress);
 	
 	//
@@ -653,7 +715,13 @@ public:
 	void SetKeySpline (KeySpline* value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	SplineColorKeyFrame ();
+	
 	virtual ~SplineColorKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 
@@ -664,9 +732,6 @@ public:
  	/* @PropertyType=KeySpline,AutoCreateValue,GenerateAccessors */
 	const static int KeySplineProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	SplinePointKeyFrame ();
-
 	virtual Value *InterpolateValue (Value *baseValue, double keyFrameProgress);
 	
 	//
@@ -676,7 +741,13 @@ public:
 	void SetKeySpline (KeySpline* value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	SplinePointKeyFrame ();
+
 	virtual ~SplinePointKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
@@ -685,9 +756,6 @@ public:
  	/* @PropertyType=EasingFunctionBase,ManagedPropertyType=IEasingFunction,GenerateAccessors */
 	const static int EasingFunctionProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	EasingColorKeyFrame ();
-
 	virtual Value *InterpolateValue (Value *baseValue, double keyFrameProgress);
 	
 	//
@@ -697,7 +765,13 @@ public:
 	void SetEasingFunction (EasingFunctionBase* value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	EasingColorKeyFrame ();
+
 	virtual ~EasingColorKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
@@ -706,9 +780,6 @@ public:
  	/* @PropertyType=EasingFunctionBase,ManagedPropertyType=IEasingFunction,GenerateAccessors */
 	const static int EasingFunctionProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	EasingDoubleKeyFrame ();
-
 	virtual Value *InterpolateValue (Value *baseValue, double keyFrameProgress);
 	
 	//
@@ -718,7 +789,13 @@ public:
 	void SetEasingFunction (EasingFunctionBase* value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	EasingDoubleKeyFrame ();
+
 	virtual ~EasingDoubleKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
@@ -727,9 +804,6 @@ public:
  	/* @PropertyType=EasingFunctionBase,ManagedPropertyType=IEasingFunction,GenerateAccessors */
 	const static int EasingFunctionProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	EasingPointKeyFrame ();
-
 	virtual Value *InterpolateValue (Value *baseValue, double keyFrameProgress);
 	
 	//
@@ -739,7 +813,13 @@ public:
 	void SetEasingFunction (EasingFunctionBase* value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	EasingPointKeyFrame ();
+
 	virtual ~EasingPointKeyFrame ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
@@ -749,9 +829,6 @@ public:
  	/* @PropertyType=DoubleKeyFrameCollection,AutoCreateValue,ManagedFieldAccess=Internal,ManagedSetterAccess=Internal,GenerateAccessors */
 	const static int KeyFramesProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	DoubleAnimationUsingKeyFrames ();
-	
 	void AddKeyFrame (DoubleKeyFrame *frame);
 	void RemoveKeyFrame (DoubleKeyFrame *frame);
 	
@@ -770,7 +847,13 @@ public:
 	void SetKeyFrames (DoubleKeyFrameCollection* value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	DoubleAnimationUsingKeyFrames ();
+	
 	virtual ~DoubleAnimationUsingKeyFrames ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
@@ -780,9 +863,6 @@ public:
  	/* @PropertyType=ColorKeyFrameCollection,AutoCreateValue,ManagedFieldAccess=Internal,ManagedSetterAccess=Internal,GenerateAccessors */
 	const static int KeyFramesProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	ColorAnimationUsingKeyFrames ();
-	
 	void AddKeyFrame (ColorKeyFrame *frame);
 	void RemoveKeyFrame (ColorKeyFrame *frame);
 	
@@ -801,7 +881,13 @@ public:
 	void SetKeyFrames (ColorKeyFrameCollection* value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	ColorAnimationUsingKeyFrames ();
+	
 	virtual ~ColorAnimationUsingKeyFrames ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Version=2 */
@@ -812,9 +898,6 @@ public:
  	/* @PropertyType=ObjectKeyFrameCollection,ManagedFieldAccess=Internal,ManagedSetterAccess=Internal,GenerateAccessors,AutoCreateValue */
 	const static int KeyFramesProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	ObjectAnimationUsingKeyFrames ();
-
 	void AddKeyFrame (ObjectKeyFrame *frame);
 	void RemoveKeyFrame (ObjectKeyFrame *frame);
 
@@ -833,7 +916,13 @@ public:
 	virtual Type::Kind GetValueKind () { return Type::INVALID; };
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	ObjectAnimationUsingKeyFrames ();
+
 	virtual ~ObjectAnimationUsingKeyFrames ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
@@ -843,9 +932,6 @@ public:
  	/* @PropertyType=PointKeyFrameCollection,AutoCreateValue,ManagedFieldAccess=Internal,ManagedSetterAccess=Internal,GenerateAccessors */
 	const static int KeyFramesProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	PointAnimationUsingKeyFrames ();
-	
 	void AddKeyFrame (PointKeyFrame *frame);
 	void RemoveKeyFrame (PointKeyFrame *frame);
 	
@@ -864,7 +950,13 @@ public:
 	void SetKeyFrames (PointKeyFrameCollection* value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	PointAnimationUsingKeyFrames ();
+	
 	virtual ~PointAnimationUsingKeyFrames ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
@@ -877,9 +969,6 @@ public:
 	const static int TargetPropertyProperty;
 	
 	/* @GenerateCBinding,GeneratePInvoke */
-	Storyboard ();
-	
-	/* @GenerateCBinding,GeneratePInvoke */
 	bool BeginWithError (MoonError *error);
 
 	/* @GenerateCBinding,GeneratePInvoke */
@@ -915,8 +1004,13 @@ public:
 	static PropertyPath *GetTargetProperty (DependencyObject *o);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	Storyboard ();
+	
 	virtual ~Storyboard ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 private:
 	bool HookupAnimationsRecurse (Clock *clock,
 				      DependencyObject *targetObject, PropertyPath *targetPropertyPath,
@@ -931,9 +1025,6 @@ public:
  	/* @PropertyType=Storyboard,GenerateAccessors */
 	const static int StoryboardProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	BeginStoryboard ();
-	
 	virtual void Fire ();
 	
 	//
@@ -943,7 +1034,13 @@ public:
 	Storyboard *GetStoryboard ();
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	BeginStoryboard ();
+	
 	virtual ~BeginStoryboard ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 // internal WPF class gleaned from stack traces
diff --git a/src/application.cpp b/src/application.cpp
index d2bc42a..1508096 100644
--- a/src/application.cpp
+++ b/src/application.cpp
@@ -27,7 +27,7 @@
 Application::Application ()
 {
 	SetObjectType (Type::APPLICATION);
-	
+
 	install_state = InstallStateUnknown;
 	resource_root = NULL;
 	
diff --git a/src/application.h b/src/application.h
index 638c170..8f19b7c 100644
--- a/src/application.h
+++ b/src/application.h
@@ -40,9 +40,6 @@ public:
 	const static int ResourcesProperty;
 
 	/* @GenerateCBinding,GeneratePInvoke */
-	Application ();
-	
-	/* @GenerateCBinding,GeneratePInvoke */
 	void RegisterCallbacks (GetDefaultStyleCallback get_default_style_cb, ConvertSetterValuesCallback convert_setter_values_cb, GetResourceCallback get_resource_cb, ConvertKeyframeValueCallback convert_keyframe_callback);
 	
 	Style *GetDefaultStyle (ManagedTypeInfo *key);
@@ -89,8 +86,13 @@ public:
 	const static int CheckAndDownloadUpdateCompletedEvent;
 	
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	Application ();
+	
 	virtual ~Application ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 private:
 	GetDefaultStyleCallback get_default_style_cb;
 	ConvertSetterValuesCallback convert_setter_values_cb;
diff --git a/src/audio-alsa.h b/src/audio-alsa.h
index fae4c7c..ebd19ff 100644
--- a/src/audio-alsa.h
+++ b/src/audio-alsa.h
@@ -68,7 +68,8 @@ class AlsaSource : public AudioSource {
  public:
 	pollfd *udfs;
 	int ndfs;
-	
+
+	/* @SkipFactories */
 	AlsaSource (AlsaPlayer *player, MediaPlayer *mplayer, AudioStream *stream);
 		
 	// Pushes data onto the pcm device if the
diff --git a/src/audio-pulse.h b/src/audio-pulse.h
index 28fee93..b676233 100644
--- a/src/audio-pulse.h
+++ b/src/audio-pulse.h
@@ -58,6 +58,7 @@ class PulseSource: public AudioSource {
 	virtual void CloseInternal ();
 
  public:
+	/* @SkipFactories */
 	PulseSource (PulsePlayer *player, MediaPlayer *mplayer, AudioStream *stream);
 };
 
diff --git a/src/audio.h b/src/audio.h
index 5ec4c34..dfc7c3b 100644
--- a/src/audio.h
+++ b/src/audio.h
@@ -103,6 +103,7 @@ class AudioSource : public EventObject {
 #endif
 
  protected:
+	/* @SkipFactories */
 	AudioSource (Type::Kind type, AudioPlayer *player, MediaPlayer *mplayer, AudioStream *stream);
 	virtual ~AudioSource ();
 		
diff --git a/src/bitmapcache.cpp b/src/bitmapcache.cpp
index 106ea38..0452e7d 100644
--- a/src/bitmapcache.cpp
+++ b/src/bitmapcache.cpp
@@ -16,7 +16,6 @@
 
 #include "bitmapcache.h"
 
-
 CacheMode::CacheMode ()
 {
 	SetObjectType (Type::CACHEMODE);
diff --git a/src/bitmapcache.h b/src/bitmapcache.h
index d81e3c9..e0c1f7f 100644
--- a/src/bitmapcache.h
+++ b/src/bitmapcache.h
@@ -19,20 +19,19 @@
 
 /* @Namespace=System.Windows.Media */
 class CacheMode : public DependencyObject {
-public:
+protected:
 	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
 	CacheMode ();
 
-protected:
 	virtual ~CacheMode ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media */
 class BitmapCache : public CacheMode {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	BitmapCache ();
-
 	/* @PropertyType=double,DefaultValue=1.0,Validator=DoubleGreaterThanZeroValidator,GenerateAccessors */
 	const static int RenderAtScaleProperty;
 
@@ -40,7 +39,13 @@ public:
 	void SetRenderAtScale (double scale);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	BitmapCache ();
+
 	virtual ~BitmapCache ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 #endif /* __MOONLIGHT_BITMAPCACHE_H__ */
diff --git a/src/bitmapimage.cpp b/src/bitmapimage.cpp
index 9531e8a..f6966a6 100644
--- a/src/bitmapimage.cpp
+++ b/src/bitmapimage.cpp
@@ -23,6 +23,7 @@
 #include "runtime.h"
 #include "uri.h"
 #include "debug.h"
+#include "factory.h"
 
 #ifdef WORDS_BIGENDIAN
 #define set_pixel_bgra(pixel,index,b,g,r,a) \
@@ -446,7 +447,7 @@ BitmapImage::PixmapComplete ()
 		loader = NULL;
 
 		if (HasHandlers (ImageOpenedEvent))
-			Emit (ImageOpenedEvent, new RoutedEventArgs ());
+			Emit (ImageOpenedEvent, MoonUnmanagedFactory::CreateRoutedEventArgs ());
 
 		return;
 	}
diff --git a/src/bitmapimage.h b/src/bitmapimage.h
index 4dbf7d4..f51bdc5 100644
--- a/src/bitmapimage.h
+++ b/src/bitmapimage.h
@@ -31,11 +31,15 @@ class BitmapImage : public BitmapSource {
 	DownloaderAccessPolicy policy;
 
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	BitmapImage ();
+
 	virtual ~BitmapImage ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	BitmapImage ();
 	virtual void Dispose ();
 
 	/* @PropertyType=Uri,AlwaysChange,GenerateAccessors,DefaultValue=Uri() */
diff --git a/src/bitmapsource.h b/src/bitmapsource.h
index 047ba17..e8e2cb5 100644
--- a/src/bitmapsource.h
+++ b/src/bitmapsource.h
@@ -28,12 +28,15 @@ class BitmapSource : public ImageSource {
  protected:
 	cairo_surface_t *image_surface;
 
-	virtual ~BitmapSource ();
-
- public:
 	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
 	BitmapSource ();
 
+	virtual ~BitmapSource ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
+ public:
 	/* @PropertyType=gint32,DefaultValue=0,ManagedSetterAccess=Internal,GenerateAccessors,Validator=IntGreaterThanZeroValidator */
 	const static int PixelWidthProperty;
 	/* @PropertyType=gint32,DefaultValue=0,ManagedSetterAccess=Internal,GenerateAccessors,Validator=IntGreaterThanZeroValidator */
diff --git a/src/border.h b/src/border.h
index 4ea5d29..6e71846 100644
--- a/src/border.h
+++ b/src/border.h
@@ -23,7 +23,13 @@
 /* @Namespace=System.Windows.Controls */
 class Border : public FrameworkElement {
 protected:
+ 	/* @GenerateCBinding,GeneratePInvoke */
+	Border ();
+	
 	virtual ~Border () { };
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
 public:
 	/* @PropertyType=Brush,GenerateAccessors */
@@ -39,9 +45,6 @@ public:
 	/* @PropertyType=Thickness,DefaultValue=Thickness(0),GenerateAccessors,Validator=BorderThicknessValidator */
 	const static int PaddingProperty;
 	
- 	/* @GenerateCBinding,GeneratePInvoke */
-	Border ();
-	
 	virtual bool IsLayoutContainer () { return true; }
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
 	virtual void OnSubPropertyChanged (DependencyProperty *prop, DependencyObject *obj, PropertyChangedEventArgs *subobj_args);
diff --git a/src/brush.cpp b/src/brush.cpp
index 8d528d6..a357501 100644
--- a/src/brush.cpp
+++ b/src/brush.cpp
@@ -25,6 +25,7 @@
 #include "bitmapimage.h"
 #include "uri.h"
 #include "capture.h"
+#include "factory.h"
 
 //
 // SL-Cairo convertion and helper routines
@@ -61,9 +62,9 @@ brush_matrix_invert (cairo_matrix_t *matrix)
 //
 
 Value *
-Brush::CreateDefaultMatrixTransform (Type::Kind type, DependencyProperty *property)
+Brush::CreateDefaultMatrixTransform (Type::Kind type, DependencyProperty *property, DependencyObject *forObj)
 {
-	return Value::CreateUnrefPtr (new MatrixTransform ());
+	return Value::CreateUnrefPtr (MoonUnmanagedFactory::CreateMatrixTransform ());
 }
 
 void
@@ -140,6 +141,8 @@ SolidColorBrush::SolidColorBrush (const char *color)
 	Color *c = color_from_str (color);
 	SetColor (c);
 	delete c;
+
+	EnsureManagedPeer ();
 }
 
 void
@@ -555,9 +558,9 @@ ImageBrush::Dispose ()
 }
 
 Value *
-ImageBrush::CreateDefaultImageSource (Type::Kind kind, DependencyProperty *property)
+ImageBrush::CreateDefaultImageSource (Type::Kind kind, DependencyProperty *property, DependencyObject *forObj)
 {
-	return Value::CreateUnrefPtr (new BitmapImage ());
+	return Value::CreateUnrefPtr (MoonUnmanagedFactory::CreateBitmapImage ());
 }
 
 void
@@ -639,7 +642,7 @@ ImageBrush::SetSource (Downloader *downloader, const char *PartName)
 	BitmapImage *source = (BitmapImage *) GetImageSource ();
 
 	if (source == NULL) {
-		source = new BitmapImage ();
+		source = MoonUnmanagedFactory::CreateBitmapImage ();
 		SetImageSource (source);
 	}
 
@@ -968,12 +971,12 @@ VideoBrush::~VideoBrush ()
 		if (source->Is (Type::MEDIAELEMENT)) {
 			source->RemovePropertyChangeListener (this);
 			source->RemoveHandler (MediaElement::MediaInvalidatedEvent, update_brush, this);
-			source->unref ();
+			MOON_CLEAR_FIELD (source);
 		}
 		else /* Is (Type::CAPTURESOURCE) */ {
 			source->RemoveHandler (CaptureSource::SampleReadyEvent, update_brush, this);
 			source->RemoveHandler (CaptureSource::FormatChangedEvent, video_format_changed, this);
-			source->unref ();
+			MOON_CLEAR_FIELD (source);
 		}
 	}
 
@@ -1084,8 +1087,7 @@ VideoBrush::SetupBrushFromMediaElement (cairo_t *cr, const Rect &area)
 			media = (MediaElement *) obj;
 			media->AddHandler (MediaElement::MediaInvalidatedEvent, update_brush, this);
 			mplayer = media->GetMediaPlayer ();
-			obj->ref ();
-			source = obj;
+			MOON_SET_FIELD (source, obj);
 		} else if (obj == NULL) {
 			printf ("could not find element `%s'\n", name);
 		} else {
@@ -1145,16 +1147,14 @@ VideoBrush::OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error)
 				source->RemoveHandler (CaptureSource::SampleReadyEvent, update_brush, this);
 				source->RemoveHandler (CaptureSource::FormatChangedEvent, video_format_changed, this);
 			}
-
-			source->unref ();
-			source = NULL;
+			
+			MOON_CLEAR_FIELD (source);
 		}
 		
 		if (name && (obj = FindName (name)) && obj->Is (Type::MEDIAELEMENT)) {
-			obj->AddPropertyChangeListener (this);
-			source = obj;
+			MOON_SET_FIELD (source, obj);
+			source->AddPropertyChangeListener (this);
 			source->AddHandler (MediaElement::MediaInvalidatedEvent, update_brush, this);
-			obj->ref ();
 		} else {
 			// Note: This may have failed because the parser hasn't set the
 			// toplevel element yet, we'll try again in SetupBrush()
@@ -1193,27 +1193,25 @@ VideoBrush::SetSource (DependencyObject *source)
 			this->source->RemoveHandler (CaptureSource::FormatChangedEvent, video_format_changed, this);
 		}
 
-		this->source->unref ();
-		this->source = NULL;
+		MOON_CLEAR_FIELD (this->source);
 	}
 
 	if (source) {
 		if (source->Is (Type::MEDIAELEMENT)) {
-			source->ref ();
-			source->AddHandler (MediaElement::MediaInvalidatedEvent, update_brush, this);
+			MOON_SET_FIELD (this->source, source);
 
 			SetSourceName ("");
 
-			this->source = source;
+			this->source->AddHandler (MediaElement::MediaInvalidatedEvent, update_brush, this);
 		}
 		else if (source->Is (Type::CAPTURESOURCE)) {
-			source->ref ();
-			source->AddHandler (CaptureSource::SampleReadyEvent, update_brush, this);
-			source->AddHandler (CaptureSource::FormatChangedEvent, video_format_changed, this);
+
+			MOON_SET_FIELD (this->source, source);
 
 			SetSourceName ("");
 
-			this->source = source;
+			this->source->AddHandler (CaptureSource::SampleReadyEvent, update_brush, this);
+			this->source->AddHandler (CaptureSource::FormatChangedEvent, video_format_changed, this);
 		}
 		else {
 			g_warning ("invalid object of type '%s' passed to VideoBrush::SetSource", source->GetTypeName());
diff --git a/src/brush.h b/src/brush.h
index b13c224..a9558c1 100644
--- a/src/brush.h
+++ b/src/brush.h
@@ -25,9 +25,17 @@ class MediaElement;
 /* @Namespace=System.Windows.Media */
 class Brush : public DependencyObject {
  protected:
-	virtual ~Brush () {}
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	Brush (): DependencyObject (Type::BRUSH) { }
+
+	/* @SkipFactories */
 	Brush (Type::Kind object_type) : DependencyObject (object_type) { }
 
+	virtual ~Brush () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=double,DefaultValue=1.0,GenerateAccessors */
 	const static int OpacityProperty;
@@ -41,9 +49,6 @@ class Brush : public DependencyObject {
 	/* @PropertyType=bool,Access=Internal */
 	const static int ChangedProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	Brush (): DependencyObject (Type::BRUSH) { }
-	
 	virtual void SetupBrush (cairo_t *cr, const Rect &area);
 
 	virtual void OnSubPropertyChanged (DependencyProperty *prop, DependencyObject *obj, PropertyChangedEventArgs *subobj_args);
@@ -71,21 +76,26 @@ class Brush : public DependencyObject {
 	void SetTransform (Transform *transform);
 	Transform *GetTransform ();
 	
-	static Value *CreateDefaultMatrixTransform (Type::Kind kind, DependencyProperty *property);
+	static Value *CreateDefaultMatrixTransform (Type::Kind kind, DependencyProperty *property, DependencyObject *forObj);
 };
 
 
 /* @Namespace=System.Windows.Media */
 class SolidColorBrush : public Brush {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	SolidColorBrush ();
+
 	virtual ~SolidColorBrush () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
 	/* @PropertyType=Color,DefaultValue=Color (0x00000000),GenerateAccessors */
 	const static int ColorProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	SolidColorBrush ();
+	/* @SkipFactories */
 	SolidColorBrush (const char *color);
 	
 	virtual void SetupBrush (cairo_t *cr, const Rect &area);
@@ -103,12 +113,15 @@ class SolidColorBrush : public Brush {
 /* @Namespace=System.Windows.Media */
 class GradientStopCollection : public DependencyObjectCollection {
  protected:
-	virtual ~GradientStopCollection ();
-
- public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	GradientStopCollection ();
 
+	virtual ~GradientStopCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
+ public:
 	virtual Type::Kind GetElementType() { return Type::GRADIENTSTOP; }
 };
 
@@ -116,7 +129,13 @@ class GradientStopCollection : public DependencyObjectCollection {
 /* @Namespace=System.Windows.Media */
 class GradientStop : public DependencyObject {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	GradientStop ();
+	
 	virtual ~GradientStop ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
 	/* @PropertyType=Color,DefaultValue=Color (0x00000000),GenerateAccessors */
@@ -124,9 +143,6 @@ class GradientStop : public DependencyObject {
 	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors */
 	const static int OffsetProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	GradientStop ();
-	
 	//
 	// Property Accessors
 	//
@@ -143,8 +159,14 @@ class GradientStop : public DependencyObject {
 /* @ContentProperty="GradientStops" */
 class GradientBrush : public Brush {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	GradientBrush ();
+	
 	virtual ~GradientBrush ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=ColorInterpolationMode,DefaultValue=ColorInterpolationModeSRgbLinearInterpolation,GenerateAccessors */
 	const static int ColorInterpolationModeProperty;
@@ -155,9 +177,6 @@ class GradientBrush : public Brush {
 	/* @PropertyType=GradientSpreadMethod,DefaultValue=GradientSpreadMethodPad,GenerateAccessors */
 	const static int SpreadMethodProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	GradientBrush ();
-	
 	virtual void OnCollectionItemChanged (Collection *col, DependencyObject *obj, PropertyChangedEventArgs *args);
 	virtual void OnCollectionChanged (Collection *col, CollectionChangedEventArgs *args);
 	virtual void SetupGradient (cairo_pattern_t *pattern, const Rect &area, bool single = false);
@@ -184,17 +203,20 @@ class GradientBrush : public Brush {
 /* @Namespace=System.Windows.Media */
 class LinearGradientBrush : public GradientBrush {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	LinearGradientBrush ();
+
 	virtual ~LinearGradientBrush ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=Point,DefaultValue=Point(1\,1),GenerateAccessors */
 	const static int EndPointProperty;
 	/* @PropertyType=Point,DefaultValue=Point(),GenerateAccessors */
 	const static int StartPointProperty;
 
-	/* @GenerateCBinding,GeneratePInvoke */
-	LinearGradientBrush ();
-
 	virtual void SetupBrush (cairo_t *cr, const Rect &area);
 	
 	//
@@ -211,8 +233,14 @@ class LinearGradientBrush : public GradientBrush {
 /* @Namespace=System.Windows.Media */
 class RadialGradientBrush : public GradientBrush {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	RadialGradientBrush ();
+	
 	virtual ~RadialGradientBrush ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=Point,DefaultValue=Point (0.5\, 0.5),GenerateAccessors */
 	const static int CenterProperty;
@@ -223,9 +251,6 @@ class RadialGradientBrush : public GradientBrush {
 	/* @PropertyType=double,DefaultValue=0.5,GenerateAccessors */
 	const static int RadiusYProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	RadialGradientBrush ();
-	
 	virtual void SetupBrush (cairo_t *cr, const Rect &area);
 	
 	//
@@ -248,10 +273,17 @@ class RadialGradientBrush : public GradientBrush {
 /* @Namespace=System.Windows.Media */
 class TileBrush : public Brush {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	TileBrush () : Brush (Type::TILEBRUSH) {}
+
 	virtual ~TileBrush ();
 
+	/* @SkipFactories */
 	TileBrush (Type::Kind object_type) : Brush (object_type) { }
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=AlignmentX,DefaultValue=AlignmentXCenter,GenerateAccessors */
 	const static int AlignmentXProperty;
@@ -260,8 +292,6 @@ class TileBrush : public Brush {
 	/* @PropertyType=Stretch,DefaultValue=StretchFill,GenerateAccessors */
 	const static int StretchProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	TileBrush () : Brush (Type::TILEBRUSH) {}
 	virtual void Fill (cairo_t *cr, bool preserve);
 	virtual void Stroke (cairo_t *cr, bool preserve);
 	
@@ -281,22 +311,27 @@ class TileBrush : public Brush {
 /* @Namespace=System.Windows.Media */
 class ImplicitInputBrush : public Brush {
 protected:
-	virtual ~ImplicitInputBrush () {}
-
-public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	ImplicitInputBrush () : Brush (Type::IMPLICITINPUTBRUSH) { }
+
+	virtual ~ImplicitInputBrush () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Controls */
 class HtmlBrush : public TileBrush {
 protected:
-	virtual ~HtmlBrush () {}
-
-public:
 	/* @GeneratePInvoke,GenerateCBinding */
 	HtmlBrush () : TileBrush (Type::HTMLBRUSH) { }
 
+	virtual ~HtmlBrush () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
+public:
 	/* @PropertyType=string,DefaultValue=\"\" */
 	const static int SourceNameProperty;
 };
@@ -315,8 +350,14 @@ private:
 	static void source_pixel_data_changed (EventObject *sender, EventArgs *calldata, gpointer closure);
 
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	ImageBrush ();
+
 	virtual ~ImageBrush ();
 	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=double,DefaultValue=0.0,ManagedAccess=Private,GenerateAccessors */
 	const static int DownloadProgressProperty;
@@ -330,8 +371,6 @@ private:
 	/* @DelegateType=EventHandler<RoutedEventArgs> */
 	const static int ImageOpenedEvent;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	ImageBrush ();
 	virtual void Dispose ();
 	
 	void SetSource (Downloader *downloader, const char *PartName);
@@ -349,7 +388,7 @@ private:
 	void SetImageSource (ImageSource *source);
 	ImageSource *GetImageSource ();
 
-	static Value *CreateDefaultImageSource (Type::Kind kind, DependencyProperty *property);
+	static Value *CreateDefaultImageSource (Type::Kind kind, DependencyProperty *property, DependencyObject *forObj);
 };
 
 cairo_surface_t *image_brush_create_similar     (cairo_t *cr, int width, int height);
@@ -370,15 +409,18 @@ class VideoBrush : public TileBrush {
 	VideoFormat *video_format;
 
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	VideoBrush ();
+	
 	virtual ~VideoBrush ();
 	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+	
  public:
 	/* @PropertyType=string,DefaultValue=\"\",GenerateAccessors */
 	const static int SourceNameProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	VideoBrush ();
-	
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
 	virtual void OnSubPropertyChanged (DependencyProperty *prop, DependencyObject *obj, PropertyChangedEventArgs *subobj_args);
 	virtual void SetupBrush (cairo_t *cr, const Rect &area);
@@ -409,15 +451,18 @@ class VisualBrush : public TileBrush {
 	static void update_brush (EventObject *, EventArgs *, gpointer closure);
 
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	VisualBrush ();
+
 	virtual ~VisualBrush ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=UIElement,GenerateAccessors */
 	const static int VisualProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	VisualBrush ();
-	
 	virtual void SetupBrush (cairo_t *cr, const Rect &area);
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
 
@@ -436,13 +481,17 @@ class WebBrowserBrush : public TileBrush {
 	/* @PropertyType=string,DefaultValue=\"\",GenerateAccessors */
 	const static int SourceNameProperty;
 
-	/* @GenerateCBinding,GeneratePInvoke */
-	WebBrowserBrush () { SetObjectType (Type::WEBBROWSERBRUSH); }
-
 	void SetSourceName (const char *name);
 	const char * GetSourceName ();
+
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	WebBrowserBrush () { SetObjectType (Type::WEBBROWSERBRUSH); }
+
 	virtual ~WebBrowserBrush () { }
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 G_BEGIN_DECLS
diff --git a/src/canvas.h b/src/canvas.h
index 24c5784..390a532 100644
--- a/src/canvas.h
+++ b/src/canvas.h
@@ -28,7 +28,13 @@ class Canvas : public Panel {
 	Rect coverage_bounds;
 
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	Canvas ();
+	
 	virtual ~Canvas () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
  	/* @PropertyType=double,DefaultValue=0.0,Attached,GenerateAccessors */
@@ -40,9 +46,6 @@ class Canvas : public Panel {
 	/* @PropertyType=double,DefaultValue=0.0,Attached,GenerateAccessors,ManagedFieldAccess=Internal */
 	const static int ZProperty;
 
-	/* @GenerateCBinding,GeneratePInvoke */
-	Canvas ();
-	
 	virtual Size MeasureOverride (Size availableSize);
 	virtual Size ArrangeOverride (Size availableSize);
 	virtual bool IsLayoutContainer ();
diff --git a/src/capture.cpp b/src/capture.cpp
index 17ff80a..15e8a5e 100644
--- a/src/capture.cpp
+++ b/src/capture.cpp
@@ -15,6 +15,7 @@
 #include "deployment.h"
 #include "writeablebitmap.h"
 #include "bitmapimage.h"
+#include "factory.h"
 
 #define d(x)
 
@@ -236,7 +237,7 @@ CaptureSource::CaptureImageReportSample (gint64 sampleTime, gint64 frameDuration
 	d(printf ("CaptureSource::CaptureImageReportSample (%lld, %lld, %d\n", (long long) sampleTime, (long long) frameDuration, sampleDataLength));
 
 	if (HasHandlers (CaptureSource::CaptureImageCompletedEvent)) {
-		BitmapImage *source = new BitmapImage ();
+		BitmapImage *source = MoonUnmanagedFactory::CreateBitmapImage ();
 		source->SetPixelWidth (capture_format->width);
 		source->SetPixelHeight (capture_format->height);
 
@@ -319,7 +320,7 @@ AudioCaptureDevice::SetPalDevice (MoonCaptureDevice *device)
 
 	MoonAudioCaptureDevice *audio_device = (MoonAudioCaptureDevice*)device;
 
-	AudioFormatCollection *col = new AudioFormatCollection ();
+	AudioFormatCollection *col = MoonUnmanagedFactory::CreateAudioFormatCollection ();
 
 	int num_formats;
 	MoonAudioFormat **formats = audio_device->GetSupportedFormats (&num_formats);
@@ -353,7 +354,6 @@ VideoCaptureDevice::VideoCaptureDevice ()
 	SetObjectType (Type::VIDEOCAPTUREDEVICE);
 }
 
-
 VideoCaptureDevice::~VideoCaptureDevice ()
 {
 }
@@ -365,7 +365,7 @@ VideoCaptureDevice::SetPalDevice (MoonCaptureDevice *device)
 
 	MoonVideoCaptureDevice *video_device = (MoonVideoCaptureDevice*)device;
 
-	VideoFormatCollection *col = new VideoFormatCollection ();
+	VideoFormatCollection *col = MoonUnmanagedFactory::CreateVideoFormatCollection ();
 
 	int num_formats;
 	MoonVideoFormat **formats = video_device->GetSupportedFormats (&num_formats);
diff --git a/src/capture.h b/src/capture.h
index 6f726ec..8a59900 100644
--- a/src/capture.h
+++ b/src/capture.h
@@ -114,13 +114,7 @@ private:
        
 /* @Namespace=System.Windows.Media */
 class CaptureSource : public DependencyObject {
-protected:
-	virtual ~CaptureSource ();
-
 public:
-	/* @GeneratePInvoke,GenerateCBinding */
-	CaptureSource ();
-
 	/* @PropertyType=AudioCaptureDevice,GenerateAccessors */
 	const static int AudioCaptureDeviceProperty;
 
@@ -170,6 +164,15 @@ public:
 	/* @ManagedAccess=Internal */
 	const static int CaptureStoppedEvent;
 
+protected:
+	/* @GeneratePInvoke,GenerateCBinding */
+	CaptureSource ();
+
+	virtual ~CaptureSource ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 private:
 	static void ReportSampleCallback (gint64 sampleTime, gint64 frameDuration, guint8 *sampleData, int sampleDataLength, gpointer data);
 	void ReportSample (gint64 sampleTime, gint64 frameDuration, guint8 *sampleData, int sampleDataLength);
@@ -197,9 +200,6 @@ private:
 /* @Namespace=System.Windows.Media */
 class CaptureDevice : public DependencyObject {
 public:
-	/* @ManagedAccess=Internal,GeneratePInvoke,GenerateCBinding */
-	CaptureDevice ();
-
 	/* @PropertyType=string,GenerateAccessors */
 	const static int FriendlyNameProperty;
 
@@ -219,8 +219,14 @@ public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	virtual void SetPalDevice (MoonCaptureDevice *device) { pal_device = device; }
 protected:
+	/* @ManagedAccess=Internal,GeneratePInvoke,GenerateCBinding */
+	CaptureDevice ();
+
 	virtual ~CaptureDevice () {}
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 private:
 	MoonCaptureDevice* pal_device;
 };
@@ -228,24 +234,21 @@ private:
 /* @Namespace=System.Windows.Media */
 class AudioFormatCollection : public Collection {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	AudioFormatCollection ()
-	{
-		SetObjectType (Type::AUDIOFORMAT_COLLECTION);
-	}
-
 	virtual Type::Kind GetElementType () { return Type::AUDIOFORMAT; }
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	AudioFormatCollection () { SetObjectType (Type::AUDIOFORMAT_COLLECTION); }
+
 	virtual ~AudioFormatCollection () { }
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media */
 class AudioCaptureDevice : public CaptureDevice {
 public:
-	/* @ManagedAccess=Internal,GeneratePInvoke,GenerateCBinding */
-	AudioCaptureDevice ();
-
 	/* @PropertyType=gint32,GenerateAccessors */
 	const static int AudioFrameSizeProperty;
 
@@ -270,30 +273,33 @@ public:
 	void Stop ();
 
 protected:
+	/* @ManagedAccess=Internal,GeneratePInvoke,GenerateCBinding */
+	AudioCaptureDevice ();
+
 	virtual ~AudioCaptureDevice ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media */
 class VideoFormatCollection : public Collection {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	VideoFormatCollection ()
-	{
-		SetObjectType (Type::VIDEOFORMAT_COLLECTION);
-	}
-
 	virtual Type::Kind GetElementType () { return Type::VIDEOFORMAT; }
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	VideoFormatCollection () { SetObjectType (Type::VIDEOFORMAT_COLLECTION); }
+
 	virtual ~VideoFormatCollection () { }
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media */
 class VideoCaptureDevice : public CaptureDevice {
 public:
-	/* @ManagedAccess=Internal,GeneratePInvoke,GenerateCBinding */
-	VideoCaptureDevice ();
-
 	/* @PropertyType=VideoFormatCollection,ManagedPropertyType=PresentationFrameworkCollection<VideoFormat>,ManagedFieldAccess=Private,GenerateManagedAccessors=false,GenerateAccessors */
 	const static int SupportedFormatsProperty;
 
@@ -316,8 +322,14 @@ public:
 	void Stop ();
 
 protected:
+	/* @ManagedAccess=Internal,GeneratePInvoke,GenerateCBinding */
+	VideoCaptureDevice ();
+
 	virtual ~VideoCaptureDevice ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 private:
 
 	Collection *supported_formats;
diff --git a/src/collection.cpp b/src/collection.cpp
index 47a5db9..171f0ed 100644
--- a/src/collection.cpp
+++ b/src/collection.cpp
@@ -195,7 +195,7 @@ Collection::InsertWithError (int index, Value *value, MoonError *error)
 		index = count;
 	
 	added = new Value (*value);
-	
+
 	if (AddedToCollection (added, error)) {
 		g_ptr_array_insert (array, index, added);
 	
@@ -205,8 +205,13 @@ Collection::InsertWithError (int index, Value *value, MoonError *error)
 
 		EmitChanged (CollectionChangedActionAdd, added_copy, NULL, index);
 
+		if (Type::IsSubclassOf (GetDeployment(), GetElementType (), Type::DEPENDENCY_OBJECT)) {
+			added->AsDependencyObject()->unref();
+			added->SetNeedUnref (false);
+		}
+
 		delete added_copy;
-	
+
 		return true;
 	}
 	else {
@@ -329,7 +334,12 @@ Collection::SetValueAtWithError (int index, Value *value, MoonError *error)
 		RemovedFromCollection (removed);
 	
 		EmitChanged (CollectionChangedActionReplace, added, removed, index);
-	
+
+		if (Type::IsSubclassOf (GetDeployment (), GetElementType (), Type::DEPENDENCY_OBJECT)) {
+			added->AsDependencyObject()->unref();
+			added->SetNeedUnref (false);
+		}
+
 		delete removed;
 
 		return true;
@@ -475,7 +485,7 @@ DependencyObjectCollection::UnregisterAllNamesRootedAt (NameScope *from_ns)
 	DependencyObject *obj;
 	Value *value;
 	
-	Types *types = Deployment::GetCurrent ()->GetTypes ();
+	Types *types = GetDeployment()->GetTypes ();
 	for (guint i = 0; i < array->len; i++) {
 		value = (Value *) array->pdata[i];
 		obj = value->AsDependencyObject (types);
@@ -491,7 +501,7 @@ DependencyObjectCollection::RegisterAllNamesRootedAt (NameScope *to_ns, MoonErro
 	DependencyObject *obj;
 	Value *value;
 	
-	Types *types = Deployment::GetCurrent ()->GetTypes ();
+	Types *types = GetDeployment()->GetTypes ();
 	for (guint i = 0; i < array->len; i++) {
 		if (error->number)
 			break;
@@ -525,7 +535,7 @@ InlineCollection::Equals (InlineCollection *inlines)
 	if (inlines->array->len != array->len)
 		return false;
 
-	Types *types = Deployment::GetCurrent ()->GetTypes ();
+	Types *types = GetDeployment()->GetTypes ();
 	for (guint i = 0; i < array->len; i++) {
 		run1 = ((Value *) inlines->array->pdata[i])->AsInline (types);
 		run0 = ((Value *) array->pdata[i])->AsInline (types);
@@ -577,7 +587,7 @@ UIElementCollection::ResortByZIndex ()
 	if (array->len == 0)
 		return;
 	
-	Types *types = Deployment::GetCurrent ()->GetTypes ();
+	Types *types = GetDeployment()->GetTypes ();
 	for (guint i = 0; i < array->len; i++) 
 		z_sorted->pdata[i] = ((Value *) array->pdata[i])->AsUIElement (types);
 	
@@ -738,7 +748,7 @@ MultiScaleSubImageCollection::ResortByZIndex ()
 	if (array->len == 0)
 		return;
 	
-	Types *types = Deployment::GetCurrent ()->GetTypes ();
+	Types *types = GetDeployment()->GetTypes ();
 	for (guint i = 0; i < array->len; i++)
 		z_sorted->pdata[i] = ((Value *) array->pdata[i])->AsMultiScaleSubImage (types);
 	
diff --git a/src/collection.h b/src/collection.h
index 8b54016..d14a0db 100644
--- a/src/collection.h
+++ b/src/collection.h
@@ -27,6 +27,7 @@ class CollectionIterator;
 //
 /* @Namespace=System.Windows */
 /* @ManagedName=PresentationFrameworkCollection`1 */
+/* @CallInitialize */
 /* @ManagedDependencyProperties=Manual */
 /* @ManagedEvents=Manual */
 class Collection : public DependencyObject {
@@ -103,6 +104,7 @@ protected:
 
 	virtual void CloneCore (Types *types, DependencyObject* fromObj);
 
+	/* @SkipFactories */
 	Collection ();
 	virtual ~Collection ();
 	virtual void Dispose ();
@@ -113,9 +115,6 @@ protected:
 /* @ManagedName=DependencyObjectCollection`1 */
 class DependencyObjectCollection : public Collection {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	DependencyObjectCollection ();
-	
 	virtual Type::Kind GetElementType () { return Type::DEPENDENCY_OBJECT; }
 	
 	virtual void SetIsAttached (bool value);
@@ -128,35 +127,47 @@ protected:
 	virtual bool AddedToCollection (Value *value, MoonError *error);
 	virtual void RemovedFromCollection (Value *value);
 	
+	/* @GenerateCBinding,GeneratePInvoke */
+	DependencyObjectCollection ();
+	
 	virtual ~DependencyObjectCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media */
 class DoubleCollection : public Collection {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	DoubleCollection ();
-	
 	virtual Type::Kind GetElementType () { return Type::DOUBLE; }
 
 	static DoubleCollection* FromStr (const char *str);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	DoubleCollection ();
+	
 	virtual ~DoubleCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media */
 class PointCollection : public Collection {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	PointCollection ();
-	
 	virtual Type::Kind GetElementType () { return Type::POINT; }
 
 	static PointCollection* FromStr (const char *str);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	PointCollection ();
+
 	virtual ~PointCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 class CollectionIterator {
@@ -222,24 +233,30 @@ protected:
 /* @Namespace=System.Windows */
 class TriggerCollection : public DependencyObjectCollection {
  protected:
-	virtual ~TriggerCollection ();
-	
- public:
 	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
 	TriggerCollection ();
 	
+	virtual ~TriggerCollection ();
+	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
+ public:
 	virtual Type::Kind GetElementType () { return Type::EVENTTRIGGER; }
 };
 
 /* @Namespace=System.Windows */
 class TriggerActionCollection : public DependencyObjectCollection {
  protected:
-	virtual ~TriggerActionCollection ();
-
- public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	TriggerActionCollection ();
 	
+	virtual ~TriggerActionCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
+ public:
 	/* this may seem wrong, but it's what the TriggerActionCollection mandates */
 	virtual Type::Kind GetElementType () { return Type::BEGINSTORYBOARD; }
 };
@@ -247,12 +264,15 @@ class TriggerActionCollection : public DependencyObjectCollection {
 /* @Namespace=System.Windows.Documents */
 class InlineCollection : public DependencyObjectCollection {
  protected:
-	virtual ~InlineCollection ();
-	
- public:
 	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
 	InlineCollection ();
+
+	virtual ~InlineCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
+ public:
 	virtual Type::Kind GetElementType () { return Type::INLINE; }
 	
 	bool Equals (InlineCollection *inlines);
@@ -261,14 +281,17 @@ class InlineCollection : public DependencyObjectCollection {
 /* @Namespace=System.Windows.Controls */
 class UIElementCollection : public DependencyObjectCollection {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
+	UIElementCollection ();
+
 	virtual ~UIElementCollection ();
 	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	GPtrArray *z_sorted;
 	
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
-	UIElementCollection ();
-	
 	virtual Type::Kind GetElementType () { return Type::UIELEMENT; }
 	
 	virtual bool Clear ();
@@ -279,12 +302,15 @@ class UIElementCollection : public DependencyObjectCollection {
 /* @Namespace=System.Windows.Controls */
 class ItemCollection : public Collection {
  protected:
-	virtual ~ItemCollection ();
-	
- public:
 	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
 	ItemCollection ();
 	
+	virtual ~ItemCollection ();
+	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
+ public:
 	virtual Type::Kind GetElementType () { return Type::OBJECT; }
 };
 
@@ -293,9 +319,6 @@ class MultiScaleSubImageCollection : public DependencyObjectCollection {
 public:
 	GPtrArray *z_sorted;
 
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
-	MultiScaleSubImageCollection ();
-	
 	virtual Type::Kind GetElementType () { return Type::MULTISCALESUBIMAGE; }
 
 	virtual bool Clear ();
@@ -303,7 +326,13 @@ public:
 	void ResortByZIndex ();
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
+	MultiScaleSubImageCollection ();
+	
 	virtual ~MultiScaleSubImageCollection ();
+	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Controls */
@@ -311,21 +340,28 @@ class HitTestCollection : public UIElementCollection {
  protected:
 	virtual bool AddedToCollection (Value *value, MoonError *error) { return true; }
 	virtual void RemovedFromCollection (Value *value) {}
-	virtual ~HitTestCollection () {}
- public:
+
 	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
 	HitTestCollection ();
+
+	virtual ~HitTestCollection () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows */
 class ResourceDictionaryCollection : public DependencyObjectCollection {
  protected:
-	virtual ~ResourceDictionaryCollection ();
-
- public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	ResourceDictionaryCollection ();
 	
+	virtual ~ResourceDictionaryCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
+ public:
 	virtual Type::Kind GetElementType () { return Type::RESOURCE_DICTIONARY; }
 };
 
@@ -333,24 +369,30 @@ class ResourceDictionaryCollection : public DependencyObjectCollection {
 /* @ManagedName=TextElementCollection`1 */
 class TextElementCollection : public DependencyObjectCollection {
 protected:
-	virtual ~TextElementCollection () {}
- 
-public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	TextElementCollection ();
 
+	virtual ~TextElementCollection () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+ 
+public:
 	virtual Type::Kind GetElementType () { return Type::TEXTELEMENT; }
 };
 
 /* @Namespace=System.Windows.Documents */
 class BlockCollection : public TextElementCollection {
 protected:
-	virtual ~BlockCollection () {}
- 
-public:
 	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
 	BlockCollection ();
  
+	virtual ~BlockCollection () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+ 
+public:
 	virtual Type::Kind GetElementType () { return Type::BLOCK; }
 };
 
diff --git a/src/contentcontrol.cpp b/src/contentcontrol.cpp
index 0557c64..61abcce 100644
--- a/src/contentcontrol.cpp
+++ b/src/contentcontrol.cpp
@@ -80,10 +80,7 @@ ContentControl::OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *er
 		//}
 		
 		if (clearTemplate && GetSubtreeObject ()) {
-			UIElement *sub = (UIElement *) GetSubtreeObject ();
-			sub->ref ();
-			ElementRemoved (sub);
-			sub->unref ();
+			ElementRemoved ((UIElement *) GetSubtreeObject ());
 		}
 
 		if (HasHandlers (ContentControl::ContentControlChangedEvent))
diff --git a/src/contentcontrol.h b/src/contentcontrol.h
index f25b413..106a03f 100644
--- a/src/contentcontrol.h
+++ b/src/contentcontrol.h
@@ -39,17 +39,20 @@ class ContentControlChangedEventArgs : public EventArgs {
 /* @CallInitialize */
 class ContentControl : public Control {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	ContentControl ();
+	
 	virtual ~ContentControl ();
 	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
  	/* @PropertyType=object,Validator=ContentControlContentValidator */
 	const static int ContentProperty;
  	/* @PropertyType=DataTemplate,GenerateAccessors */
 	const static int ContentTemplateProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	ContentControl ();
-	
 	virtual UIElement *GetDefaultTemplate ();
 	
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
diff --git a/src/control.cpp b/src/control.cpp
index b4bb69b..eb00eb1 100644
--- a/src/control.cpp
+++ b/src/control.cpp
@@ -156,8 +156,7 @@ Control::Dispose ()
 {
 	if (template_root != NULL) {
 		template_root->SetParent (NULL, NULL);
-		template_root->unref ();
-		template_root = NULL;
+		MOON_CLEAR_FIELD (template_root);
 	}
 	FrameworkElement::Dispose ();
 }
@@ -213,10 +212,9 @@ Control::DoApplyTemplateWithError (MoonError *error)
 	// and it is cleared when ElementRemoved is called.
 	if (template_root != root && template_root != NULL) {
 		template_root->SetParent (NULL, NULL);
-		template_root->unref ();
+		MOON_CLEAR_FIELD (template_root);
 	}
-	template_root = (UIElement *)root;
-	template_root->ref ();
+	MOON_SET_FIELD (template_root, (UIElement *)root);
 
 	ElementAdded (template_root);
 
@@ -249,9 +247,8 @@ Control::ElementRemoved (UIElement *item)
 	MoonError e;
 	if (template_root != NULL) {
 		template_root->SetParent (NULL, &e);
-		template_root->unref ();
+		MOON_CLEAR_FIELD (template_root);
 	}
-	template_root = NULL;
 	item->SetParent (NULL, &e);
 	FrameworkElement::ElementRemoved (item);
 }
diff --git a/src/control.h b/src/control.h
index 56b230c..ee11ceb 100644
--- a/src/control.h
+++ b/src/control.h
@@ -36,9 +36,6 @@
 /* @CallInitialize */
 class Control : public FrameworkElement {
 public:
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	Control ();
-
 	virtual bool CanCaptureMouse () { return GetIsEnabled (); }
 	virtual bool CanFindElement () { return GetIsEnabled (); }
 	virtual void FindElementsInHostCoordinates (cairo_t *cr, Point p, List *uielement_list);
@@ -64,6 +61,7 @@ public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	DependencyObject *GetTemplateChild (const char *name);
 
+	/* @GenerateCBinding,GeneratePInvoke */
 	UIElement *GetTemplateRoot () { return template_root; }
 
 	//
@@ -174,7 +172,13 @@ public:
 	
 	bool enabled_parent;
 protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	Control ();
+
 	virtual ~Control ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
 private:
 	bool default_style_applied;
diff --git a/src/deepzoomimagetilesource.cpp b/src/deepzoomimagetilesource.cpp
index 66810f9..1bc4218 100644
--- a/src/deepzoomimagetilesource.cpp
+++ b/src/deepzoomimagetilesource.cpp
@@ -146,6 +146,8 @@ DeepZoomImageTileSource::DeepZoomImageTileSource (Uri *uri, bool nested)
 	this->nested = nested;
 	if (uri)
 		SetUriSource (uri);
+
+	EnsureManagedPeer ();
 }
 
 DeepZoomImageTileSource::~DeepZoomImageTileSource ()
diff --git a/src/deepzoomimagetilesource.h b/src/deepzoomimagetilesource.h
index 41be259..39f031d 100644
--- a/src/deepzoomimagetilesource.h
+++ b/src/deepzoomimagetilesource.h
@@ -50,15 +50,20 @@ class DeepZoomImageTileSource : public MultiScaleTileSource {
 	Cancellable *get_resource_aborter;
 
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	DeepZoomImageTileSource ();
+
 	virtual ~DeepZoomImageTileSource ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	GList *subimages;
 	bool IsCollection () { return isCollection;}
 	int GetMaxLevel () { return maxLevel;}
 
-	/* @GenerateCBinding,GeneratePInvoke */
-	DeepZoomImageTileSource ();
+	/* @SkipFactories */
 	DeepZoomImageTileSource (Uri *uri, bool nested = false);
 
 	void Download ();
diff --git a/src/dependencyobject.cpp b/src/dependencyobject.cpp
index f9c288a..1e08297 100644
--- a/src/dependencyobject.cpp
+++ b/src/dependencyobject.cpp
@@ -184,12 +184,15 @@ EventObject::Initialize (Deployment *depl, Type::Kind type)
 
 	object_type = type;
 	deployment = depl;
-	if (deployment != NULL && this != deployment)
+	if (deployment != NULL && this != deployment) {
 		deployment->ref ();
+	}
 	flags = g_atomic_int_exchange_and_add (&current_id, 1);
 	refcount = 1;
 	events = NULL;
 	toggleNotifyListener = NULL;
+	addStrongRef = NULL;
+	clearStrongRef = NULL;
 
 #if OBJECT_TRACKING
 	switch (object_type) {
@@ -239,8 +242,13 @@ EventObject::~EventObject()
 	// We can't unref the deployment in Dispose, it breaks
 	// object tracking.
 	if (deployment && this != deployment) {
-		deployment->unref ();
-		deployment = NULL;
+		if (clearStrongRef) {
+			MOON_CLEAR_FIELD (deployment);
+		}
+		else {
+			deployment->unref ();
+			deployment = NULL;
+		}
 	}
 }
 
@@ -256,6 +264,26 @@ EventObject::SetIsAttached (bool attached)
 }
 
 void
+EventObject::SetStrongRefCallbacks (StrongRefCallback add_strong_ref,
+				    StrongRefCallback clear_strong_ref)
+{
+	this->addStrongRef = add_strong_ref;
+	this->clearStrongRef = clear_strong_ref;
+}
+
+void
+EventObject::EnsureManagedPeer ()
+{
+	deployment->EnsureManagedPeer (this);
+	if (this != deployment) {
+		Deployment *d = deployment;
+		MOON_SET_FIELD_NO_WEAKREF (deployment, d);
+		d->unref ();
+	}
+}
+
+
+void
 EventObject::AddTickCall (TickCallHandler handler, EventObject *data)
 {
 	AddTickCallInternal (handler, data);
@@ -394,8 +422,9 @@ EventObject::ref ()
 		g_warning ("Ref was called on an object with a refcount of 0.\n");
 
 	} else if (v == 1 && toggleNotifyListener) {
-		if (moonlight_flags & RUNTIME_INIT_ENABLE_TOGGLEREFS)
+		if (moonlight_flags & RUNTIME_INIT_ENABLE_TOGGLEREFS) {
 			toggleNotifyListener->Invoke (false);
+		}
 	}
 
 	OBJECT_TRACK ("Ref", GetTypeName ());
@@ -408,8 +437,8 @@ EventObject::unref ()
 	// TODO: do we need some sort of gcc foo (volatile variables, memory barries)
 	// to ensure that gcc does not optimize the fetches below away
 	ToggleNotifyListener *toggle_listener = this->toggleNotifyListener;
-#if OBJECT_TRACKING
 	Deployment *depl = this->deployment ? this->deployment : Deployment::GetCurrent ();
+#if OBJECT_TRACKING
 	const char *type_name = depl == NULL ? NULL : Type::Find (depl, GetObjectType ())->GetName ();
 #endif	
 
@@ -454,8 +483,10 @@ EventObject::unref ()
 		// we know that toggle_listener hasn't been freed, since if it exists, it will have a ref to us which would prevent our destruction
 		// note that the instance field might point to garbage after decreasing the refcount above, so we access the local variable we 
 		// retrieved before decreasing the refcount.
-		if (moonlight_flags & RUNTIME_INIT_ENABLE_TOGGLEREFS)
-			toggle_listener->Invoke (true);
+		if (moonlight_flags & RUNTIME_INIT_ENABLE_TOGGLEREFS) {
+			if (!depl->IsShuttingDown())
+				toggle_listener->Invoke (true);
+		}
 	}
 
 #if SANITY
@@ -1366,9 +1397,9 @@ unregister_depobj_values (gpointer  key,
 	//DependencyProperty *prop = (DependencyProperty*)key;
 	Value *v = (Value*)value;
 
-	if (v != NULL && v->Is (this_obj->GetDeployment (), Type::DEPENDENCY_OBJECT) && v->AsDependencyObject() != NULL) {
+	if (v != NULL && v->Is (this_obj->GetDeployment (), Type::DEPENDENCY_OBJECT) && v->AsDependencyObject(this_obj->GetDeployment()->GetTypes()) != NULL) {
 		//printf ("unregistering from property %s\n", prop->name);
-		DependencyObject *obj = v->AsDependencyObject ();
+		DependencyObject *obj = v->AsDependencyObject (this_obj->GetDeployment()->GetTypes());
 		obj->RemovePropertyChangeListener (this_obj);
 		obj->SetParent (NULL, NULL);
 	}
@@ -1570,6 +1601,8 @@ DependencyObject::SetValueWithErrorImpl (DependencyProperty *property, Value *va
 	}
 
 	if (!equal) {
+		Deployment *deployment = GetDeployment ();
+
 		if (current_value)
 			current_value = new Value (*current_value);
 
@@ -1581,19 +1614,38 @@ DependencyObject::SetValueWithErrorImpl (DependencyProperty *property, Value *va
 		if (property->IsAutoCreated ())
 			autocreate->ClearValue (property);
 		
-		if (value && (!property->IsAutoCreated () || !value->Is (GetDeployment (), Type::DEPENDENCY_OBJECT) || value->AsDependencyObject () != NULL))
+		if (value && (!property->IsAutoCreated () || !value->Is (deployment, Type::DEPENDENCY_OBJECT) || value->AsDependencyObject () != NULL))
 			new_value = new Value (*value);
 		else
 			new_value = NULL;
 		
 		// replace it with the new value
-		if (new_value)
+		if (new_value) {
+			if (addStrongRef && new_value->Is (deployment, Type::EVENTOBJECT)) {
+				EventObject *eo = new_value->AsEventObject();
+				if (eo && eo->addStrongRef) {
+					addStrongRef (this, eo, "");
+					new_value->SetNeedUnref (false);
+				}
+			}
 			g_hash_table_insert (local_values, property, new_value);
+		}
 		
 		ProviderValueChanged (PropertyPrecedence_LocalValue, property, current_value, new_value, true, true, true, error);
 		
-		if (current_value)
+		if (current_value) {
+			if (clearStrongRef && current_value->Is (deployment, Type::EVENTOBJECT)) {
+				EventObject *eo = current_value->AsEventObject();
+				if (eo && eo->addStrongRef) {
+					eo->ref();
+					clearStrongRef (this, eo, "");
+					current_value->SetNeedUnref (true);
+				}
+
+			}
+
 			delete current_value;
+		}
 	}
 
 	return true;
@@ -2205,9 +2257,11 @@ DependencyObject::dispose_value (gpointer key, gpointer value, gpointer data)
 	if (Value::IsNull (v))
 		return TRUE;
 
+	Deployment *deployment = _this->GetDeployment();
+	Types *types = deployment->GetTypes();
 	// detach from the existing value
-	if (v->Is (_this->GetDeployment (), Type::DEPENDENCY_OBJECT)){
-		DependencyObject *dob = v->AsDependencyObject();
+	if (v->Is (deployment, Type::DEPENDENCY_OBJECT)){
+		DependencyObject *dob = v->AsDependencyObject(types);
 		
 		if (dob != NULL) {
 			if (_this == dob->GetParent()) {
@@ -2416,9 +2470,10 @@ DependencyObject::clone_local_value (DependencyProperty *key, Value *value, gpoi
 void
 DependencyObject::clone_autocreated_value (DependencyProperty *key, Value *value, gpointer data)
 {
-	Deployment *deployment = Deployment::GetCurrent ();
 	CloneClosure *closure = (CloneClosure*)data;
 
+	Deployment *deployment = closure->old_do->GetDeployment();
+
 	Value *old_value = closure->old_do->GetValue (key, PropertyPrecedence_AutoCreate);
 
 	// this should create the new object
diff --git a/src/dependencyobject.h b/src/dependencyobject.h
index 97ada57..653ea29 100644
--- a/src/dependencyobject.h
+++ b/src/dependencyobject.h
@@ -15,6 +15,7 @@
 //#define PROPERTY_LOOKUP_DIAGNOSTICS 1
 
 #include <glib.h>
+#include <stdio.h>
 
 #include "provider.h"
 #include "dependencyproperty.h"
@@ -22,6 +23,43 @@
 #include "enums.h"
 #include "list.h"
 
+#define MOON_SET_FIELD(f,v) MOON_SET_FIELD_NAMED(f,"",v)
+#define MOON_SET_FIELD_NO_WEAKREF(f,v) MOON_SET_FIELD_NAMED_NO_WEAKREF(f,"",v)
+#define MOON_SET_FIELD_UNREF(f,v) MOON_SET_FIELD_NAMED_UNREF(f,"",v)
+#define MOON_CLEAR_FIELD(f) MOON_CLEAR_FIELD_NAMED(f,"")
+
+
+#define MOON_SET_FIELD_NAMED(f,n,v) do {				\
+		f = v;							\
+		if (f && addStrongRef) {				\
+			addStrongRef (this, f, n);			\
+			f->AddHandler (EventObject::DestroyedEvent, EventObject::ClearWeakRef, &f); \
+		}							\
+	} while (0);
+
+#define MOON_SET_FIELD_NAMED_NO_WEAKREF(f,n,v) do {			\
+		f = v;							\
+		if (f && addStrongRef)					\
+			addStrongRef (this, f, n);			\
+	} while (0);
+
+#define MOON_SET_FIELD_NAMED_UNREF(f,n,v) do {				\
+		f = v;							\
+		if (f && addStrongRef) {				\
+			addStrongRef (this, f, n);			\
+			f->AddHandler (EventObject::DestroyedEvent, EventObject::ClearWeakRef, &f); \
+			f->unref ();					\
+		}							\
+	} while (0);
+
+#define MOON_CLEAR_FIELD_NAMED(f,n) do {				\
+		if (f && clearStrongRef) {				\
+			f->RemoveHandler (EventObject::DestroyedEvent, EventObject::ClearWeakRef, &f); \
+			clearStrongRef (this, f, n);			\
+			f = NULL;					\
+		}							\
+	} while (0);
+
 #define EVENTHANDLER(type, event, objtype, argtype)	\
 	static void event##Callback (EventObject *sender, EventArgs *calldata, gpointer closure)	\
 	{	\
@@ -44,6 +82,8 @@ typedef bool (* EventHandlerPredicate) (EventHandler cb_handler, gpointer cb_dat
 
 typedef void (* HandlerMethod) (EventObject *object, EventHandler handler, gpointer handler_data, gpointer closure);
 
+typedef void (* StrongRefCallback) (EventObject *referer, EventObject *referent, const char *name);
+
 class EventLists;
 
 
@@ -170,6 +210,12 @@ public:
 	void SetObjectType (Type::Kind value) { object_type = value; }
 
 	/* @GenerateCBinding,GeneratePInvoke */
+	void SetStrongRefCallbacks (StrongRefCallback add_strong_ref,
+				    StrongRefCallback clear_strong_ref);
+
+	virtual void EnsureManagedPeer ();
+
+	/* @GenerateCBinding,GeneratePInvoke */
 	Type::Kind GetObjectType () { return object_type; }
 
 	const static int MentorChangedEvent;
@@ -212,12 +258,20 @@ public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	void RemoveToggleRefNotifier ();
 
+	StrongRefCallback addStrongRef;
+	StrongRefCallback clearStrongRef;
+
 protected:
 	virtual ~EventObject ();
+	/* @SkipFactories */
 	EventObject ();
+	/* @SkipFactories */
 	EventObject (Type::Kind type);
+	/* @SkipFactories */
 	EventObject (Type::Kind type, bool multi_threaded_safe);
+	/* @SkipFactories */
 	EventObject (Deployment *deployment);
+	/* @SkipFactories */
 	EventObject (Deployment *deployment, Type::Kind type);
 	
 	// To enable scenarios like Emit ("Event", new EventArgs ())
@@ -238,6 +292,16 @@ protected:
 	 * in ref () about reffing an object with a refcount of 0 (and trust that the warning means
 	 * something really bad has happened) */
 	void Resurrect ();
+
+	static void ClearWeakRef (EventObject *sender, EventArgs *args, gpointer closure)
+	{
+#if DEBUG
+		printf ("Clearing weakref to %p/%s\n", sender, sender->GetTypeName());
+#endif
+		EventObject **eo_ptr = (EventObject**)closure;
+		*eo_ptr = NULL;
+	}
+
 private:
 	void AddTickCallInternal (TickCallHandler handler, EventObject *data = NULL);
 	void Initialize (Deployment *deployment, Type::Kind type);
@@ -247,6 +311,7 @@ private:
 		
 	EventLists *events;
 	Deployment *deployment;
+	bool unref_deployment;
 	gint32 refcount;
 	gint32 flags; // Don't define as Flags, we need to keep this reliably at 32 bits.
 
@@ -257,8 +322,6 @@ private:
 /* @Namespace=System.Windows */
 class DependencyObject : public EventObject {
 public:
- 	/* @GenerateCBinding,GeneratePInvoke */
-	DependencyObject ();
 	virtual void Dispose ();
 
 	void Freeze ();
@@ -432,12 +495,15 @@ public:
 	// state will be set.
 	void SetIsBeingParsed (bool v) { is_being_parsed = v; }
 	bool IsBeingParsed () { return is_being_parsed; }
-	
+
 protected:
+ 	/* @GenerateCBinding,GeneratePInvoke */
+	DependencyObject ();
+
 	virtual ~DependencyObject ();
 	DependencyObject (Deployment *deployment, Type::Kind object_type = Type::DEPENDENCY_OBJECT);
 	DependencyObject (Type::Kind object_type);
-	
+
 	//
 	// Returns true if a value is valid.  If the value is invalid return false.
 	// If error is non NULL and the value is not valid, error will be given an error code and error message that should be
@@ -458,6 +524,9 @@ protected:
 	PropertyValueProvider *providers[PropertyPrecedence_Count];
 	static gboolean dispose_value (gpointer key, gpointer value, gpointer data);
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 private:
 	void DetachTemplateOwnerDestroyed ();
 	void DetachMentorDestroyed ();
diff --git a/src/dependencyproperty.cpp b/src/dependencyproperty.cpp
index 979d620..f1744a1 100644
--- a/src/dependencyproperty.cpp
+++ b/src/dependencyproperty.cpp
@@ -78,6 +78,12 @@ DependencyProperty::Dispose ()
 Value *
 DependencyProperty::GetDefaultValue (Type::Kind kind)
 {
+	return GetDefaultValue (kind, NULL);
+}
+
+Value *
+DependencyProperty::GetDefaultValue (Type::Kind kind, DependencyObject *forObj)
+{
 	if (default_value_overrides) {
 		Value *value = (Value *) g_hash_table_lookup (default_value_overrides, GINT_TO_POINTER (kind));
 		if (value)
@@ -93,7 +99,7 @@ DependencyProperty::GetDefaultValue (Type::Kind kind)
 	}
 
 	if (autocreator) {
-		return autocreator (kind, this);
+		return autocreator (kind, this, forObj);
 	} else {
 		return default_value ? new Value (*default_value) : NULL;
 	}
diff --git a/src/dependencyproperty.h b/src/dependencyproperty.h
index 306981f..97c4491 100644
--- a/src/dependencyproperty.h
+++ b/src/dependencyproperty.h
@@ -22,7 +22,7 @@ class PropertyChangedEventArgs;
 class MoonError;
 
 typedef	bool ValueValidator (DependencyObject *instance, DependencyProperty *property, Value *value, MoonError *error);
-typedef Value* AutoCreator  (Type::Kind type, DependencyProperty *property);
+typedef Value* AutoCreator  (Type::Kind type, DependencyProperty *property, DependencyObject *forObj);
 
 /* @CBindingRequisite */
 typedef void (* PropertyChangeHandler) (DependencyObject *sender, PropertyChangedEventArgs *args, MoonError *error, gpointer closure);
@@ -68,6 +68,7 @@ class DependencyProperty {
 
 	/* @GenerateCBinding,GeneratePInvoke */
 	Value *GetDefaultValue (Type::Kind kind);
+	Value *GetDefaultValue (Type::Kind kind, DependencyObject *forObj);
 	void AddDefaultValueOverride (Type::Kind kind, Value *value);
 
 	bool Validate (DependencyObject *instance, Value *value, MoonError *error);
diff --git a/src/deployment.cpp b/src/deployment.cpp
index 7c178a9..5f319ec 100644
--- a/src/deployment.cpp
+++ b/src/deployment.cpp
@@ -28,6 +28,7 @@ G_END_DECLS
 #include <mono/metadata/assembly.h>
 #include <mono/metadata/appdomain.h>
 
+#include "factory.h"
 #include "downloader.h"
 #include "deployment.h"
 #include "timemanager.h"
@@ -179,7 +180,7 @@ Deployment::Initialize (const char *platform_dir, bool create_root_domain)
 		Deployment::desktop_deployment = new Deployment (root_domain);
 		Deployment::SetCurrent (Deployment::desktop_deployment);
 
-		Application *desktop_app = new Application ();
+		Application *desktop_app = MoonUnmanagedFactory::CreateApplication ();
 		desktop_deployment->SetCurrentApplication (desktop_app);
 #if MONO_ENABLE_APP_DOMAIN_CONTROL
 	}
@@ -191,19 +192,12 @@ Deployment::Initialize (const char *platform_dir, bool create_root_domain)
 void
 Deployment::SetSurface (Surface *surface)
 {
-	Surface *old;
-	
 	VERIFY_MAIN_THREAD;
 	
 	surface_mutex.Lock ();
-	old = this->surface;
-	this->surface = surface;
-	if (this->surface)
-		this->surface->ref ();
+	MOON_CLEAR_FIELD_NAMED (this->surface, "Surface");
+	MOON_SET_FIELD_NAMED (this->surface, "Surface", surface);
 	surface_mutex.Unlock ();
-	
-	if (old)
-		old->unref (); /* unref with the mutex unlocked */
 }
 
 Surface *
@@ -509,6 +503,32 @@ Deployment::ManagedExceptionToErrorEventArgs (MonoObject *exc)
 	return new ErrorEventArgs (RuntimeError, MoonError (MoonError::EXCEPTION, errorCode, message));
 }
 
+void
+Deployment::EnsureManagedPeer ()
+{
+	EnsureManagedPeer (this);
+}
+
+void
+Deployment::EnsureManagedPeer (EventObject *forObj)
+{
+	MonoObject *loader;
+	MonoObject *exc = NULL;
+	
+	if (moon_ensure_managed_peer == NULL)
+		return;
+
+	void *params [1];
+
+	Deployment::SetCurrent (this);
+
+	params [0] = &forObj;
+	loader = mono_runtime_invoke (moon_ensure_managed_peer, NULL, params, &exc);
+
+	if (exc)
+		surface->EmitError (ManagedExceptionToErrorEventArgs (exc));
+}
+
 gpointer
 Deployment::CreateManagedXamlLoader (gpointer plugin_instance, XamlLoader* native_loader, const char *resourceBase, const char *file, const char *str)
 {
@@ -594,11 +614,12 @@ Deployment::InitializeAppDomain ()
 		}
 		
 		moon_load_xaml  = MonoGetMethodFromName (app_launcher, "CreateXamlLoader", -1);
+		moon_ensure_managed_peer  = MonoGetMethodFromName (app_launcher, "EnsureManagedPeer", -1);
 		moon_initialize_deployment_xap   = MonoGetMethodFromName (app_launcher, "InitializeDeployment", 4);
 		moon_initialize_deployment_xaml   = MonoGetMethodFromName (app_launcher, "InitializeDeployment", 2);
 		moon_destroy_application = MonoGetMethodFromName (app_launcher, "DestroyApplication", -1);
 
-		if (moon_load_xaml == NULL || moon_initialize_deployment_xap == NULL || moon_initialize_deployment_xaml == NULL || moon_destroy_application == NULL) {
+		if (moon_load_xaml == NULL || moon_ensure_managed_peer == NULL || moon_initialize_deployment_xap == NULL || moon_initialize_deployment_xaml == NULL || moon_destroy_application == NULL) {
 			g_warning ("Lookup of ApplicationLauncher methods failed.");
 			result = false;
 		}
@@ -784,6 +805,9 @@ Deployment::~Deployment()
 	printf ("at Deployment::dtor time, there were %lld property lookups\n", provider_property_lookups);
 #endif
 
+	if (this == Deployment::GetCurrent())
+		Deployment::SetCurrent(NULL);
+
 	deployment_count--;
 }
 
@@ -904,7 +928,7 @@ void
 Deployment::Reinitialize ()
 {
 	http_requests.Clear (true);
-	AssemblyPartCollection * parts = new AssemblyPartCollection ();
+	AssemblyPartCollection * parts = MoonUnmanagedFactory::CreateAssemblyPartCollection ();
 	SetParts (parts);
 	parts->unref ();
 #if DEBUG
@@ -920,16 +944,36 @@ Deployment::IsShuttingDown ()
 	return is_shutting_down;
 }
 
+bool
+Deployment::IsSafeToDie ()
+{
+#if OBJECT_TRACKING
+	bool ok;
+
+	pthread_mutex_lock (&objects_alive_mutex);
+
+	ok = !objects_alive || g_hash_table_size (objects_alive) == 0;
+
+	pthread_mutex_unlock (&objects_alive_mutex);
+
+	return ok;
+#else
+	return true;
+#endif
+}
+
+static int leak_iter;
+
 void
 Deployment::Dispose ()
 {
 	LOG_DEPLOYMENT ("Deployment::Dispose (): %p\n", this);
-	
+
+	Deployment::SetCurrent (this);
+
 	surface_mutex.Lock ();
-	if (surface) {
-		surface->unref ();
-		surface = NULL;
-	}
+	if (surface)
+		MOON_CLEAR_FIELD_NAMED (surface, "Surface");
 	surface_mutex.Unlock ();
 
 #if EVENT_ARG_REUSE
@@ -946,12 +990,21 @@ Deployment::Dispose ()
 		g_hash_table_destroy (interned_strings);
 	interned_strings = NULL;
 
-	DependencyObject::Dispose ();
+	leak_iter = 0;
+	while (leak_iter != 20) {
+		mono_gc_collect (1);
+		printf ("mono_gc_invoke_finalizers = %d\n", mono_gc_invoke_finalizers ());
+		mono_gc_collect (1);
+		g_main_iteration (TRUE);
+		leak_iter ++;
+	}
+
 #if OBJECT_TRACKING
 	printf ("Deployment disposing, with %i leaked EventObjects.\n", objects_created - objects_destroyed);
 	if (objects_created != objects_destroyed)
 		ReportLeaks ();
 #endif
+	DependencyObject::Dispose ();
 }
 
 void
@@ -1015,8 +1068,7 @@ Deployment::Shutdown ()
 	
 	if (current_app != NULL) {
 		current_app->Dispose ();
-		current_app->unref ();
-		current_app = NULL;
+		MOON_CLEAR_FIELD (current_app);
 	}
 
 	StringNode *node;
@@ -1210,7 +1262,7 @@ Deployment::ShutdownManaged ()
 		
 		/* Clear out the domain ptr to detect any illegal uses asap */
 		/* CHECK: do we need to call mono_domain_free? */
-		domain = NULL;
+		//domain = NULL;
 
 		if (exc) {
 			shutdown_state = ShutdownFailed;
@@ -1288,9 +1340,10 @@ Deployment::proxy_loaded_event (EventObject *sender, EventArgs *arg, gpointer cl
 // 		lclosure->obj->OnLoaded ();
 
 	if (lclosure->handler) {
-		RoutedEventArgs *rea = new RoutedEventArgs (lclosure->obj);
-		lclosure->handler (lclosure->obj, rea, lclosure->handler_data);
-		rea->unref ();
+		// RoutedEventArgs *rea = MoonUnmanagedFactory::CreateRoutedEventArgs ();
+		// rea->SetSource (lclosure->obj);
+		lclosure->handler (lclosure->obj, /*rea*/NULL, lclosure->handler_data);
+		// rea->unref ();
 	}
 	
 	deployment->RemoveHandler (Deployment::LoadedEvent, proxy_loaded_event, lclosure);
@@ -1392,13 +1445,8 @@ Deployment::SetCurrentApplication (Application* value)
 	if (current_app == value)
 		return;
 
-	if (current_app)
-		current_app->unref ();
-
-	current_app = value;
-
-	if (current_app)
-	  current_app->ref ();
+	MOON_CLEAR_FIELD (current_app);
+	MOON_SET_FIELD (current_app, value);
 }
 
 void
@@ -1523,8 +1571,8 @@ Deployment::DrainUnrefs (gpointer context)
 	Deployment::SetCurrent (deployment);
 	deployment->DrainUnrefs ();
 	deployment->unref ();
-	Deployment::SetCurrent (NULL);
-	return false;
+	//Deployment::SetCurrent (NULL);
+	return FALSE;
 }
 
 void
diff --git a/src/deployment.h b/src/deployment.h
index 96ca9cf..5da81ab 100644
--- a/src/deployment.h
+++ b/src/deployment.h
@@ -37,33 +37,41 @@ public:
  	/* @PropertyType=string,DefaultValue=\"\" */
 	const static int SourceProperty;
 	
+protected:
 	/* @GenerateCBinding,GeneratePInvoke */
 	AssemblyPart ();
 
-protected:
 	virtual ~AssemblyPart ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows */
 class AssemblyPartCollection : public DependencyObjectCollection {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	AssemblyPartCollection ();
-
 	virtual Type::Kind GetElementType () { return Type::ASSEMBLYPART; }
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	AssemblyPartCollection ();
+
 	virtual ~AssemblyPartCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows */
 class ExternalPart : public DependencyObject {
-public:
+protected:
 	/* @GenerateCBinding,GeneratePInvoke */
 	ExternalPart ();
 
-protected:
 	virtual ~ExternalPart ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows */
@@ -75,31 +83,34 @@ public:
 	void SetSource (Uri *value);
 	Uri* GetSource ();
 
+protected:
 	/* @GenerateCBinding,GeneratePInvoke */
 	ExtensionPart ();
 
-protected:
 	virtual ~ExtensionPart ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows */
 class ExternalPartCollection : public DependencyObjectCollection {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	ExternalPartCollection ();
-
 	virtual Type::Kind GetElementType () { return Type::EXTERNALPART; }
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	ExternalPartCollection ();
+
 	virtual ~ExternalPartCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows */
 class WindowSettings : public DependencyObject {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	WindowSettings ();
-
 	/* @PropertyType=string,DefaultValue=\"\",GenerateAccessors,ManagedSetterAccess=Private,Validator=NonNullOnlyDuringInitializationValidator */
 	const static int TitleProperty;	
 	/* @PropertyType=double,DefaultValue=600.0,GenerateAccessors,ManagedSetterAccess=Private,Validator=OnlyDuringInitializationValidator */
@@ -137,16 +148,19 @@ public:
 	void SetWindowStyle (WindowStyle style);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	WindowSettings ();
+
 	virtual ~WindowSettings ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows */
 /* @ContentProperty=Source */
 class Icon : public DependencyObject {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	Icon ();
-
 	/* @PropertyType=Uri,DefaultValue=Uri(),ManagedSetterAccess=Internal,GenerateAccessors,Validator=OnlyDuringInitializationValidator */
 	const static int SourceProperty;
 	/* @PropertyType=Size,DefaultValue=Size(),ManagedSetterAccess=Internal,GenerateAccessors,Validator=OnlyDuringInitializationValidator */
@@ -159,27 +173,33 @@ public:
 	void SetSize (Size *size);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	Icon ();
+
 	virtual ~Icon ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows */
 class IconCollection : public DependencyObjectCollection {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	IconCollection ();
-	
 	virtual Type::Kind GetElementType () { return Type::ICON; }
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	IconCollection ();
+	
 	virtual ~IconCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows */
 class OutOfBrowserSettings : public DependencyObject {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	OutOfBrowserSettings ();
-
 	/* @PropertyType=string,DefaultValue=\"\",ManagedSetterAccess=Internal,GenerateAccessors,Validator=NonNullOnlyDuringInitializationValidator */
 	const static int BlurbProperty;
 	/* @PropertyType=string,DefaultValue=\"\",ManagedSetterAccess=Internal,GenerateAccessors,Validator=NonNullOnlyDuringInitializationValidator */
@@ -217,7 +237,13 @@ public:
 	void SetSecuritySettings (SecuritySettings *value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	OutOfBrowserSettings ();
+
 	virtual ~OutOfBrowserSettings ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows */
@@ -238,9 +264,6 @@ public:
  	/* @PropertyType=string,ManagedSetterAccess=Internal,GenerateAccessors,Validator=OnlyDuringInitializationValidator */
 	const static int RuntimeVersionProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	Deployment ();
-	
 	bool InitializeManagedDeployment (gpointer plugin_instance, const char *culture, const char *uiculture);
 	bool InitializeAppDomain ();
 
@@ -325,6 +348,9 @@ public:
 	void DestroyManagedXamlLoader (gpointer xaml_loader);
 	void DestroyManagedApplication (gpointer plugin_instance);
 
+	virtual void EnsureManagedPeer ();
+	void EnsureManagedPeer (EventObject *forObj);
+
 	void PostLoaded ();
 	void EmitLoaded ();
 	void AddAllLoadedHandlers (UIElement *el, bool only_unemitted);
@@ -356,6 +382,9 @@ public:
 	void Shutdown (); /* main thread only */
 	bool IsShuttingDown (); /* main thread only */
 
+	/* @GenerateCBinding,GeneratePInvoke */
+	bool IsSafeToDie ();
+
 	void TrackPath (char *path);
 
 	static gint32 GetDeploymentCount (); /* returns the number of deployments currently alive */
@@ -392,6 +421,10 @@ public:
 	void UnregisterHttpRequest (HttpRequest *request);
 	void AbortAllHttpRequests ();
 
+	/* @GenerateCBinding,GeneratePInvoke */
+	Deployment ();
+	
+
 protected:
 	virtual ~Deployment ();
 
@@ -411,6 +444,7 @@ private:
 		UnloadDomain = 2,
 		DisposeDeployment = 3
 	};
+	/* @SkipFactories */
 	Deployment (MonoDomain *domain);
 	void InnerConstructor ();
 
@@ -470,6 +504,7 @@ private:
 
 	// Methods
 	MonoMethod   *moon_load_xaml;
+	MonoMethod   *moon_ensure_managed_peer;
 	MonoMethod   *moon_initialize_deployment_xap;
 	MonoMethod   *moon_initialize_deployment_xaml;
 	MonoMethod   *moon_destroy_application;
diff --git a/src/downloader.cpp b/src/downloader.cpp
index 54eb567..34094be 100644
--- a/src/downloader.cpp
+++ b/src/downloader.cpp
@@ -25,6 +25,7 @@
 #include "utils.h"
 #include "debug.h"
 #include "uri.h"
+#include "factory.h"
 
 //
 // Downloader
@@ -508,8 +509,9 @@ Downloader::SendInternal ()
 	if (failed_msg != NULL) {
 		if (HasHandlers (DownloadFailedEvent)) {
 			// Consumer is re-sending a request which failed.
-			Emit (DownloadFailedEvent, new ErrorEventArgs (DownloadError,
-								       MoonError (MoonError::EXCEPTION, 4001, failed_msg)));
+			Emit (DownloadFailedEvent,
+			      new ErrorEventArgs (DownloadError,
+						  MoonError (MoonError::EXCEPTION, 4001, failed_msg)));
 		}
 		return;
 	}
@@ -594,8 +596,9 @@ Downloader::NotifyFailed (const char *msg)
 	// For some reason the status is 0, not updated on errors?
 	
 	if (HasHandlers (DownloadFailedEvent))
-		Emit (DownloadFailedEvent, new ErrorEventArgs (DownloadError,
-							       MoonError (MoonError::EXCEPTION, 4001, msg)));
+		Emit (DownloadFailedEvent,
+		      new ErrorEventArgs (DownloadError,
+					  MoonError (MoonError::EXCEPTION, 4001, msg)));
 	
 	failed_msg = g_strdup (msg);
 }
diff --git a/src/easing.h b/src/easing.h
index e6ab665..7ab8244 100644
--- a/src/easing.h
+++ b/src/easing.h
@@ -21,9 +21,6 @@ typedef double (*EasingFunction) (double normalizedTime);
 /* @CallInitialize */
 class EasingFunctionBase : public DependencyObject {
 public:
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	EasingFunctionBase ();
-
 	/* @PropertyType=EasingMode,DefaultValue=EasingModeOut,GenerateAccessors */
 	const static int EasingModeProperty;
 
@@ -39,8 +36,14 @@ public:
 	void SetEasingFunction (EasingFunction value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	EasingFunctionBase ();
+
 	virtual ~EasingFunctionBase ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 private:
 	EasingFunction easing_function_callback;
 };
@@ -49,9 +52,6 @@ private:
 class BackEase : public EasingFunctionBase
 {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	BackEase ();
-
 	/* @PropertyType=double,DefaultValue=1.0,GenerateAccessors */
 	const static int AmplitudeProperty;
 	
@@ -61,16 +61,19 @@ public:
 	void SetAmplitude (double value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	BackEase ();
+
 	virtual ~BackEase();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
 class BounceEase : public EasingFunctionBase
 {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	BounceEase ();
-
 	/* @PropertyType=gint32,DefaultValue=3,GenerateAccessors */
 	const static int BouncesProperty;
 	/* @PropertyType=double,DefaultValue=2.0,GenerateAccessors */
@@ -85,42 +88,51 @@ public:
 	void SetBounciness (double value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	BounceEase ();
+
 	virtual ~BounceEase();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
 class CircleEase : public EasingFunctionBase
 {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	CircleEase ();
-	
 	virtual double EaseInCore (double normalizedTime);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	CircleEase ();
+	
 	virtual ~CircleEase ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
 class CubicEase : public EasingFunctionBase
 {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	CubicEase ();
-	
 	virtual double EaseInCore (double normalizedTime);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	CubicEase ();
+	
 	virtual ~CubicEase ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
 class ElasticEase : public EasingFunctionBase
 {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	ElasticEase ();
-
 	/* @PropertyType=gint32,DefaultValue=3,GenerateAccessors */
 	const static int OscillationsProperty;
 	/* @PropertyType=double,DefaultValue=3.0,GenerateAccessors */
@@ -135,16 +147,19 @@ public:
 	void SetSpringiness (double value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	ElasticEase ();
+
 	virtual ~ElasticEase();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
 class ExponentialEase : public EasingFunctionBase
 {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	ExponentialEase ();
-
 	/* @PropertyType=double,DefaultValue=2.0,GenerateAccessors */
 	const static int ExponentProperty;
 	
@@ -154,16 +169,19 @@ public:
 	void SetExponent (double value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	ExponentialEase ();
+
 	virtual ~ExponentialEase();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
 class PowerEase : public EasingFunctionBase
 {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	PowerEase ();
-
 	/* @PropertyType=double,DefaultValue=2.0,GenerateAccessors */
 	const static int PowerProperty;
 	
@@ -173,59 +191,77 @@ public:
 	void SetPower (double value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	PowerEase ();
+
 	virtual ~PowerEase();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
 class QuadraticEase : public EasingFunctionBase
 {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	QuadraticEase ();
-	
 	virtual double EaseInCore (double normalizedTime);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	QuadraticEase ();
+	
 	virtual ~QuadraticEase ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
 class QuarticEase : public EasingFunctionBase
 {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	QuarticEase ();
-	
 	virtual double EaseInCore (double normalizedTime);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	QuarticEase ();
+	
 	virtual ~QuarticEase ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
 class QuinticEase : public EasingFunctionBase
 {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	QuinticEase ();
-	
 	virtual double EaseInCore (double normalizedTime);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	QuinticEase ();
+	
 	virtual ~QuinticEase ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Media.Animation */
 class SineEase : public EasingFunctionBase
 {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	SineEase ();
-	
 	virtual double EaseInCore (double normalizedTime);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	SineEase ();
+	
 	virtual ~SineEase ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 #endif /* __MOON_EASING_H__ */
diff --git a/src/effect.h b/src/effect.h
index d6160cb..12e1b0b 100644
--- a/src/effect.h
+++ b/src/effect.h
@@ -86,9 +86,6 @@ typedef struct _d3d_dcl_instruction {
 /* @Namespace=System.Windows.Media.Effects */
 class Effect : public DependencyObject {
 public:
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	Effect ();
-
 	//
 	// Bounds
 	//
@@ -110,8 +107,14 @@ public:
 				     double          *matrix);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	Effect ();
+
 	virtual ~Effect () {}
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 	pipe_texture_t *GetShaderTexture (cairo_surface_t *surface);
 	pipe_surface_t *GetShaderSurface (cairo_surface_t *surface);
 	double         *GetShaderMatrix (cairo_surface_t *surface);
@@ -157,9 +160,6 @@ protected:
 /* @Namespace=System.Windows.Media.Effects */
 class BlurEffect : public Effect {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	BlurEffect ();
-
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
 
 	/* @PropertyType=double,DefaultValue=5.0,GenerateAccessors */
@@ -190,7 +190,14 @@ public:
 	void UpdateShader ();
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	BlurEffect ();
+
 	virtual ~BlurEffect ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 	void Clear ();
 	void MaybeUpdateFilter ();
 
@@ -211,9 +218,6 @@ protected:
 /* @Namespace=System.Windows.Media.Effects */
 class DropShadowEffect : public Effect {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	DropShadowEffect ();
-
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
 
 	/* @PropertyType=double,DefaultValue=5.0,GenerateAccessors */
@@ -264,7 +268,14 @@ public:
 	void UpdateShader ();
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	DropShadowEffect ();
+
 	virtual ~DropShadowEffect ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 	void Clear ();
 	void MaybeUpdateFilter ();
 
@@ -286,9 +297,6 @@ protected:
 /* @Namespace=System.Windows.Media.Effects */
 class PixelShader : public DependencyObject {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	PixelShader ();
-
 	/* @PropertyType=Uri,DefaultValue=Uri(),GenerateAccessors */
 	const static int UriSourceProperty;
 
@@ -324,8 +332,14 @@ public:
 			    d3d_dcl_instruction_t *value);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	PixelShader ();
+
 	virtual ~PixelShader ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 private:
 	guint32 *tokens;
 	unsigned int ntokens;
@@ -334,9 +348,6 @@ private:
 /* @Namespace=System.Windows.Media.Effects */
 class ShaderEffect : public Effect {
 public:
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	ShaderEffect ();
-
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
 
 	/* @PropertyType=PixelShader,ManagedFieldAccess=Protected,ManagedAccess=Protected,GenerateAccessors */
@@ -398,7 +409,14 @@ public:
 	void ShaderError (const char *format, ...);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	ShaderEffect ();
+
 	virtual ~ShaderEffect () { Clear (); }
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 	void Clear ();
 
 	pipe_buffer_t *GetShaderConstantBuffer (float **ptr);
diff --git a/src/eventargs.cpp b/src/eventargs.cpp
index 14064b2..d845968 100644
--- a/src/eventargs.cpp
+++ b/src/eventargs.cpp
@@ -86,6 +86,8 @@ CollectionChangedEventArgs::CollectionChangedEventArgs (CollectionChangedAction
 	this->new_item = new_item;
 	this->old_item = old_item;
 	this->index = index;
+
+	EnsureManagedPeer ();
 }
 
 CollectionChangedEventArgs::~CollectionChangedEventArgs ()
@@ -171,10 +173,10 @@ DownloadProgressEventArgs::GetProgress ()
 RoutedEventArgs::RoutedEventArgs (DependencyObject *source)
 	: EventArgs (Type::ROUTEDEVENTARGS)
 {
-	if (source)
-		source->ref ();
-	
-	this->source = source;
+	EnsureManagedPeer ();
+
+	MOON_SET_FIELD (this->source, source);
+
 	handled = false;
 }
 
@@ -194,16 +196,14 @@ RoutedEventArgs::RoutedEventArgs (Type::Kind kind)
 
 RoutedEventArgs::RoutedEventArgs (DependencyObject *source, Type::Kind kind)
 {
-	if (source)
-		source->ref ();
-	this->source = source;
+	EnsureManagedPeer ();
+	MOON_SET_FIELD (this->source, source);
 	handled = false;
 }
 
 RoutedEventArgs::~RoutedEventArgs ()
 {
-	if (source)
-		source->unref ();
+	MOON_CLEAR_FIELD (source);
 }
 
 void
@@ -227,11 +227,8 @@ RoutedEventArgs::GetSource ()
 void
 RoutedEventArgs::SetSource (DependencyObject *el)
 {
-	if (source)
-		source->unref();
-	source = el;
-	if (source)
-		source->ref();
+	MOON_CLEAR_FIELD (source);
+	MOON_SET_FIELD (source, el);
 }
 
 LogReadyRoutedEventArgs::LogReadyRoutedEventArgs ()
@@ -245,6 +242,7 @@ MouseEventArgs::MouseEventArgs (MoonMouseEvent *event)
 	: RoutedEventArgs (Type::MOUSEEVENTARGS)
 {
 	this->event = (MoonMouseEvent*)event->Clone();
+	EnsureManagedPeer ();
 }
 
 MouseEventArgs::MouseEventArgs (Type::Kind kind, MoonMouseEvent *event)
@@ -329,6 +327,7 @@ MouseButtonEventArgs::MouseButtonEventArgs ()
 MouseButtonEventArgs::MouseButtonEventArgs (MoonButtonEvent *event)
 	: MouseEventArgs (Type::MOUSEBUTTONEVENTARGS, event)
 {
+	EnsureManagedPeer ();
 }
 
 MouseButtonEventArgs::~MouseButtonEventArgs ()
@@ -343,6 +342,7 @@ MouseWheelEventArgs::MouseWheelEventArgs ()
 MouseWheelEventArgs::MouseWheelEventArgs (MoonScrollWheelEvent *event)
 	: MouseEventArgs (Type::MOUSEWHEELEVENTARGS, event)
 {
+	EnsureManagedPeer ();
 }
 
 MouseWheelEventArgs::~MouseWheelEventArgs ()
@@ -360,6 +360,8 @@ KeyEventArgs::KeyEventArgs (MoonKeyEvent *event)
 	: RoutedEventArgs (Type::KEYEVENTARGS)
 {
 	this->event = (MoonKeyEvent*)event->Clone ();
+
+	EnsureManagedPeer ();
 }
 
 KeyEventArgs::KeyEventArgs ()
@@ -507,14 +509,14 @@ CaptureImageCompletedEventArgs::CaptureImageCompletedEventArgs (MoonError *error
 	this->error = error ? new MoonError (*error) : NULL;
 	this->source = source;
 	if (source)
-		source->ref ();
+		addStrongRef (this, source, "Source");
 }
 
 CaptureImageCompletedEventArgs::~CaptureImageCompletedEventArgs ()
 {
 	delete error;
 	if (source)
-		source->unref ();
+		clearStrongRef (this, source, "Source");
 }
 
 //
@@ -548,15 +550,12 @@ ParserErrorEventArgs::~ParserErrorEventArgs ()
 TimelineMarkerRoutedEventArgs::TimelineMarkerRoutedEventArgs (TimelineMarker *marker)
 	: RoutedEventArgs (Type::TIMELINEMARKERROUTEDEVENTARGS)
 {
-	this->marker = marker;
-	if (marker)
-		marker->ref ();
+	MOON_SET_FIELD_NAMED (this->marker, "Marker", marker);
 }
 
 TimelineMarkerRoutedEventArgs::~TimelineMarkerRoutedEventArgs ()
 {
-	if (marker)
-		marker->unref ();
+	MOON_CLEAR_FIELD_NAMED (marker, "Marker");
 }
 
 
diff --git a/src/eventargs.h b/src/eventargs.h
index ce1cad3..834c0b9 100644
--- a/src/eventargs.h
+++ b/src/eventargs.h
@@ -36,14 +36,14 @@ public:
 
 protected:
 	virtual ~EventArgs ();
+	/* @SkipFactories */
 	EventArgs (Type::Kind type);
 };
 
 /* @Namespace=None */
 class PropertyChangedEventArgs : public EventArgs {
 public:
-	PropertyChangedEventArgs (DependencyProperty *p, int pid, Value *ov, Value *nv) : obj (p), id (pid), old_value(ov), new_value (nv
-) { }
+	PropertyChangedEventArgs (DependencyProperty *p, int pid, Value *ov, Value *nv) : obj (p), id (pid), old_value(ov), new_value (nv) { }
 
 	PropertyChangedEventArgs () : obj (NULL), id (0), old_value(NULL), new_value (NULL) { }
 
@@ -97,9 +97,10 @@ enum CollectionChangedAction {
 /* @Namespace=None */
 class CollectionChangedEventArgs : public EventArgs {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
+	/* @GenerateCBinding,GeneratePInvoke,SkipTypeConstructor */
 	CollectionChangedEventArgs ();
 
+	/* @SkipFactories */
 	CollectionChangedEventArgs (CollectionChangedAction action, Value *new_value, Value *old_value, int index);
 	
 	/* @GenerateCBinding,GeneratePInvoke */
@@ -197,11 +198,6 @@ class DownloadProgressEventArgs : public EventArgs {
 /* @Namespace=None */
 class RoutedEventArgs : public EventArgs {
 public:
- 	/* @GenerateCBinding,GeneratePInvoke */
-	RoutedEventArgs ();
-	
-	RoutedEventArgs (DependencyObject *source);
-	
 	/* @GenerateCBinding,GeneratePInvoke */
 	DependencyObject *GetSource ();
 	
@@ -214,11 +210,24 @@ public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	bool GetHandled ();
 
+	/* @SkipFactories */
+	RoutedEventArgs (DependencyObject *source);
+
 protected:
-	virtual ~RoutedEventArgs ();
+ 	/* @GenerateCBinding,GeneratePInvoke */
+	RoutedEventArgs ();
+
+	/* @SkipFactories */
 	RoutedEventArgs (DependencyObject *source, Type::Kind kind);
+
+	/* @SkipFactories */
 	RoutedEventArgs (Type::Kind kind);
-	
+
+	virtual ~RoutedEventArgs ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 private:
 	DependencyObject *source;
 	bool handled;
@@ -227,8 +236,7 @@ private:
 /* @Namespace=None */
 class KeyEventArgs : public RoutedEventArgs {
 public:
- 	/* @GenerateCBinding,GeneratePInvoke */
-	KeyEventArgs ();
+ 	/* @SkipFactories */
 	KeyEventArgs (MoonKeyEvent *event);
 	
 	/* @GenerateCBinding,GeneratePInvoke */
@@ -239,7 +247,13 @@ public:
 	
 	MoonKeyEvent *GetEvent () { return event; }
 protected:
+ 	/* @GenerateCBinding,GeneratePInvoke */
+	KeyEventArgs ();
+
 	virtual ~KeyEventArgs ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
 private:
 	MoonKeyEvent *event;
@@ -248,8 +262,7 @@ private:
 /* @Namespace=None */
 class MouseEventArgs : public RoutedEventArgs {
 public:
- 	/* @GenerateCBinding,GeneratePInvoke */
-	MouseEventArgs ();
+	/* @SkipFactories */
 	MouseEventArgs (MoonMouseEvent *event);
 	
 	MoonMouseEvent *GetEvent () { return event; }
@@ -264,8 +277,16 @@ public:
 	StylusPointCollection *GetStylusPoints (UIElement *ink_presenter);
 	
 protected:
-	virtual ~MouseEventArgs ();
+ 	/* @GenerateCBinding,GeneratePInvoke */
+	MouseEventArgs ();
+
+	/* @SkipFactories */
 	MouseEventArgs (Type::Kind kind, MoonMouseEvent *event);
+
+	virtual ~MouseEventArgs ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
 private:
 	MoonMouseEvent *event;
@@ -274,11 +295,17 @@ private:
 /* @Namespace=None */
 class LogReadyRoutedEventArgs : public RoutedEventArgs {
 public:
+	const char *GetLog () { return log; }
+	LogSource GetLogSource () { return log_source; }
+
+protected:
 	/* @GenerateCBinding,GeneratePInvoke */
 	LogReadyRoutedEventArgs ();
 	
-	const char *GetLog () { return log; }
-	LogSource GetLogSource () { return log_source; }
+	virtual ~LogReadyRoutedEventArgs () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 
 private:
 	const char *log;
@@ -290,6 +317,8 @@ class MouseButtonEventArgs : public MouseEventArgs {
 public:
  	/* @GenerateCBinding,GeneratePInvoke */
 	MouseButtonEventArgs ();
+
+	/* @SkipFactories */
 	MouseButtonEventArgs (MoonButtonEvent *event);
 
 protected:
@@ -301,6 +330,8 @@ class MouseWheelEventArgs : public MouseEventArgs {
 public:
  	/* @GenerateCBinding,GeneratePInvoke */
 	MouseWheelEventArgs ();
+
+	/* @SkipFactories */
 	MouseWheelEventArgs (MoonScrollWheelEvent *event);
 	
 	/* @GenerateCBinding,GeneratePInvoke */
@@ -322,10 +353,13 @@ private:
 
 protected:
 	virtual ~ErrorEventArgs ();
-	ErrorEventArgs (Type::Kind kind, ErrorEventArgsType type, const MoonError error);
-	
+
 public:
+	/* @SkipFactories */
+	ErrorEventArgs (Type::Kind kind, ErrorEventArgsType type, const MoonError error);
+	/* @SkipFactories */
 	ErrorEventArgs (ErrorEventArgsType type, MoonError error);
+	/* @SkipFactories */
 	ErrorEventArgs (ErrorEventArgsType type, MoonError error, int extended_code, const char *extended_msg);
 
 	/* @GenerateCBinding,GeneratePInvoke */
diff --git a/src/frameworkelement.cpp b/src/frameworkelement.cpp
index 715939b..46e3af6 100644
--- a/src/frameworkelement.cpp
+++ b/src/frameworkelement.cpp
@@ -27,6 +27,7 @@
 #include "effect.h"
 #include "projection.h"
 #include "canvas.h"
+#include "factory.h"
 
 #define MAX_LAYOUT_PASSES 250
 
@@ -732,7 +733,7 @@ FrameworkElement::Arrange (Rect finalRect)
 	if (((!toplevel && element != element.Intersection (layout_clip)) || constrainedResponse != response) && !Is (Type::CANVAS) && ((parent && !parent->Is (Type::CANVAS)) || IsContainer ())) {
 		Size framework_clip = ApplySizeConstraints (Size (INFINITY, INFINITY));
 		layout_clip = layout_clip.Intersection (Rect (0, 0, framework_clip.width, framework_clip.height));
-		RectangleGeometry *rectangle = new RectangleGeometry ();
+		RectangleGeometry *rectangle = MoonUnmanagedFactory::CreateRectangleGeometry ();
 		rectangle->SetRect (&layout_clip);
 		LayoutInformation::SetLayoutClip (this, rectangle);
 		rectangle->unref ();
diff --git a/src/geometry.cpp b/src/geometry.cpp
index ca0d80d..07e121c 100644
--- a/src/geometry.cpp
+++ b/src/geometry.cpp
@@ -385,6 +385,8 @@ PathGeometry::PathGeometry (moon_path *pml)
 {
 	SetObjectType (Type::PATHGEOMETRY);
 	path = pml;
+
+	EnsureManagedPeer ();
 }
 
 void
diff --git a/src/geometry.h b/src/geometry.h
index 3769464..62b5733 100644
--- a/src/geometry.h
+++ b/src/geometry.h
@@ -47,16 +47,18 @@ class Geometry : public DependencyObject {
 
 	Rect local_bounds;
 	
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
+	Geometry ();
+
 	virtual ~Geometry ();
 	virtual Rect ComputePathBounds ();
-	
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
  public:
  	/* @PropertyType=Transform,GenerateAccessors */
 	const static int TransformProperty;
 
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
-	Geometry ();
-
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
 	virtual void OnSubPropertyChanged (DependencyProperty *prop, DependencyObject *obj, PropertyChangedEventArgs *subprop_args);
 
@@ -90,11 +92,14 @@ class Geometry : public DependencyObject {
 /* @Namespace=System.Windows.Media */
 class GeometryCollection : public DependencyObjectCollection {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	GeometryCollection ();
+
 	virtual ~GeometryCollection ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
  public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	GeometryCollection ();
 
 	virtual Type::Kind GetElementType () { return Type::GEOMETRY; }
 };
@@ -107,18 +112,20 @@ class GeometryCollection : public DependencyObjectCollection {
 /* @Namespace=System.Windows.Media */
 class GeometryGroup : public Geometry {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	GeometryGroup ();
+
 	virtual ~GeometryGroup ();
 	virtual Rect ComputePathBounds ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
  public:
  	/* @PropertyType=FillRule,DefaultValue=FillRuleEvenOdd,GenerateAccessors */
 	const static int FillRuleProperty;
  	/* @PropertyType=GeometryCollection,AutoCreateValue,HiddenDefaultValue,GenerateAccessors */
 	const static int ChildrenProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	GeometryGroup ();
-	
 	virtual void OnCollectionItemChanged (Collection *col, DependencyObject *obj, PropertyChangedEventArgs *args);
 	virtual void OnCollectionChanged (Collection *col, CollectionChangedEventArgs *args);
 	
@@ -143,8 +150,14 @@ class EllipseGeometry : public Geometry {
  protected:
 	virtual void Build ();
 	
+	/* @GenerateCBinding,GeneratePInvoke */
+	EllipseGeometry ();
+	
 	virtual ~EllipseGeometry ();
 	virtual Rect ComputePathBounds ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
  	/* @PropertyType=Point,DefaultValue=Point(),GenerateAccessors */
@@ -154,9 +167,6 @@ class EllipseGeometry : public Geometry {
  	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors */
 	const static int RadiusYProperty;
 
-	/* @GenerateCBinding,GeneratePInvoke */
-	EllipseGeometry ();
-	
 	//
 	// Property Accessors
 	//
@@ -179,8 +189,14 @@ class LineGeometry : public Geometry {
  protected:
 	virtual void Build ();
 	
+	/* @GenerateCBinding,GeneratePInvoke */
+	LineGeometry ();
+	
 	virtual ~LineGeometry ();
 	virtual Rect ComputePathBounds ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
  	/* @PropertyType=Point,DefaultValue=Point(),GenerateAccessors */
@@ -188,9 +204,6 @@ class LineGeometry : public Geometry {
  	/* @PropertyType=Point,DefaultValue=Point(),GenerateAccessors */
 	const static int StartPointProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	LineGeometry ();
-	
 	//
 	// Property Accessors
 	//
@@ -227,17 +240,22 @@ class PathGeometry : public Geometry {
  protected:
 	virtual void Build ();
 	
+	/* @GenerateCBinding,GeneratePInvoke */
+	PathGeometry ();
+
 	virtual ~PathGeometry ();
 	virtual Rect ComputePathBounds ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
  	/* @PropertyType=FillRule,DefaultValue=FillRuleEvenOdd,GenerateAccessors */
 	const static int FillRuleProperty;
  	/* @PropertyType=PathFigureCollection,AutoCreateValue,HiddenDefaultValue,GenerateAccessors */
 	const static int FiguresProperty;
-	
-	/* @GenerateCBinding,GeneratePInvoke */
-	PathGeometry ();
+
+	/* @SkipFactories */
 	PathGeometry (moon_path *pml_path);
 
 	virtual void OnCollectionItemChanged (Collection *col, DependencyObject *obj, PropertyChangedEventArgs *args);
@@ -265,8 +283,14 @@ class RectangleGeometry : public Geometry {
  protected:
 	virtual void Build ();
 	
+	/* @GenerateCBinding,GeneratePInvoke */
+	RectangleGeometry ();
+	
 	virtual ~RectangleGeometry ();
 	virtual Rect ComputePathBounds ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
  	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors */
@@ -276,9 +300,6 @@ class RectangleGeometry : public Geometry {
  	/* @PropertyType=Rect,DefaultValue=Rect(),GenerateAccessors */
 	const static int RectProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	RectangleGeometry ();
-	
 	//
 	// Property Accesors
 	//
@@ -299,12 +320,15 @@ class RectangleGeometry : public Geometry {
 /* @Namespace=System.Windows.Media */
 class PathSegmentCollection : public DependencyObjectCollection {
  protected:
-	virtual ~PathSegmentCollection ();
-
- public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	PathSegmentCollection ();
 	
+	virtual ~PathSegmentCollection ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
+ public:
 	virtual Type::Kind GetElementType () { return Type::PATHSEGMENT; }
 };
 
@@ -316,7 +340,13 @@ class PathSegmentCollection : public DependencyObjectCollection {
 /* @Namespace=System.Windows.Media */
 class PathFigure : public DependencyObject {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	PathFigure ();
+	
 	virtual ~PathFigure ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
  	/* @PropertyType=bool,DefaultValue=false,GenerateAccessors */
@@ -330,9 +360,6 @@ class PathFigure : public DependencyObject {
 	
 	moon_path *path;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	PathFigure ();
-	
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
 	virtual void OnCollectionItemChanged (Collection *col, DependencyObject *obj, PropertyChangedEventArgs *args);
 	virtual void OnCollectionChanged (Collection *col, CollectionChangedEventArgs *args);
@@ -366,12 +393,15 @@ class PathSegment : public DependencyObject {
  protected:
 	virtual void Build ();
 	
-	virtual ~PathSegment ();
-	
- public:
 	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
 	PathSegment ();
+
+	virtual ~PathSegment ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
+ public:
 	virtual void Append (moon_path *path);
 	virtual int GetPathSize () { return 0; }
 };
@@ -383,8 +413,14 @@ class PathSegment : public DependencyObject {
 /* @Namespace=System.Windows.Media */
 class ArcSegment : public PathSegment {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	ArcSegment ();
+	
 	virtual ~ArcSegment ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
  	/* @PropertyType=bool,DefaultValue=false,GenerateAccessors */
 	const static int IsLargeArcProperty;
@@ -397,9 +433,6 @@ class ArcSegment : public PathSegment {
  	/* @PropertyType=SweepDirection,DefaultValue=SweepDirectionCounterclockwise,GenerateAccessors */
 	const static int SweepDirectionProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	ArcSegment ();
-	
 	virtual int GetPathSize () { return 4 * MOON_PATH_CURVE_TO_LENGTH; } // non-optimal size, depends on angle
 	
 	virtual void Append (moon_path *path);
@@ -430,8 +463,14 @@ class ArcSegment : public PathSegment {
 /* @Namespace=System.Windows.Media */
 class BezierSegment : public PathSegment {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	BezierSegment ();
+	
 	virtual ~BezierSegment ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
  	/* @PropertyType=Point,DefaultValue=Point(),GenerateAccessors */
 	const static int Point1Property;
@@ -440,9 +479,6 @@ class BezierSegment : public PathSegment {
  	/* @PropertyType=Point,DefaultValue=Point(),GenerateAccessors */
 	const static int Point3Property;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	BezierSegment ();
-	
 	virtual int GetPathSize () { return MOON_PATH_CURVE_TO_LENGTH; }
 	
 	virtual void Append (moon_path *path);
@@ -467,15 +503,17 @@ class BezierSegment : public PathSegment {
 /* @Namespace=System.Windows.Media */
 class LineSegment : public PathSegment {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	LineSegment ();
+	
 	virtual ~LineSegment ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
  public:
  	/* @PropertyType=Point,DefaultValue=Point(),GenerateAccessors */
 	const static int PointProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	LineSegment ();
-	
 	virtual int GetPathSize () { return MOON_PATH_LINE_TO_LENGTH; }
 	
 	virtual void Append (moon_path *path);
@@ -494,17 +532,20 @@ class LineSegment : public PathSegment {
 /* @Namespace=System.Windows.Media */
 class PolyBezierSegment : public PathSegment {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	PolyBezierSegment ();
+
 	virtual ~PolyBezierSegment ();
 	
 	PointCollection *GetPoints ();
-	
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
  	/* @PropertyType=PointCollection,AutoCreateValue,HiddenDefaultValue,GenerateAccessors */
 	const static int PointsProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	PolyBezierSegment ();
-
 	virtual int GetPathSize ();
 	
 	virtual void Append (moon_path *path);
@@ -523,17 +564,20 @@ class PolyBezierSegment : public PathSegment {
 /* @Namespace=System.Windows.Media */
 class PolyLineSegment : public PathSegment {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	PolyLineSegment ();
+
 	virtual ~PolyLineSegment ();
 	
 	PointCollection *GetPoints ();
-	
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
  	/* @PropertyType=PointCollection,AutoCreateValue,HiddenDefaultValue,GenerateAccessors */
 	const static int PointsProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	PolyLineSegment ();
-
 	virtual int GetPathSize ();
 	
 	virtual void Append (moon_path *path);
@@ -551,17 +595,20 @@ class PolyLineSegment : public PathSegment {
 /* @Namespace=System.Windows.Media */
 class PolyQuadraticBezierSegment : public PathSegment {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	PolyQuadraticBezierSegment ();
+
 	virtual ~PolyQuadraticBezierSegment ();
 	
 	PointCollection *GetPoints ();
 	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
  	/* @PropertyType=PointCollection,AutoCreateValue,HiddenDefaultValue,GenerateAccessors */
 	const static int PointsProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	PolyQuadraticBezierSegment ();
-
 	virtual int GetPathSize ();
 
 	virtual void Append (moon_path *path);
@@ -579,17 +626,20 @@ class PolyQuadraticBezierSegment : public PathSegment {
 /* @Namespace=System.Windows.Media */
 class QuadraticBezierSegment : public PathSegment {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	QuadraticBezierSegment ();
+	
 	virtual ~QuadraticBezierSegment ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
  	/* @PropertyType=Point,DefaultValue=Point(),GenerateAccessors */
 	const static int Point1Property;
  	/* @PropertyType=Point,DefaultValue=Point(),GenerateAccessors */
 	const static int Point2Property;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	QuadraticBezierSegment ();
-	
 	virtual int GetPathSize () { return MOON_PATH_CURVE_TO_LENGTH; }
 	
 	virtual void Append (moon_path *path);
diff --git a/src/grid.h b/src/grid.h
index 6885fa6..92d5bbb 100644
--- a/src/grid.h
+++ b/src/grid.h
@@ -46,7 +46,13 @@ struct GridLength {
 /* @Namespace=System.Windows.Controls */
 class ColumnDefinition : public DependencyObject {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	ColumnDefinition ();
+	
 	virtual ~ColumnDefinition ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
  	/* @PropertyType=double,DefaultValue=INFINITY,GenerateAccessors */
@@ -58,9 +64,6 @@ class ColumnDefinition : public DependencyObject {
  	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors,ManagedSetterAccess=Private,ManagedFieldAccess=Private */
 	const static int ActualWidthProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	ColumnDefinition ();
-	
 	// property accessors
 	double GetActualWidth ();
 	void SetActualWidth (double value);
@@ -78,8 +81,14 @@ class ColumnDefinition : public DependencyObject {
 /* @Namespace=System.Windows.Controls */
 class RowDefinition : public DependencyObject {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	RowDefinition ();
+
 	virtual ~RowDefinition ();
 	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
  	/* @PropertyType=GridLength,DefaultValue=GridLength (1.0\, GridUnitTypeStar),GenerateAccessors */
 	const static int HeightProperty;
@@ -90,9 +99,6 @@ class RowDefinition : public DependencyObject {
  	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors,ManagedSetterAccess=Private,ManagedFieldAccess=Private */
 	const static int ActualHeightProperty;
 
-	/* @GenerateCBinding,GeneratePInvoke */
-	RowDefinition ();
-
 	// property accessors
 	double GetActualHeight ();
 	void SetActualHeight (double value);
@@ -110,14 +116,17 @@ class RowDefinition : public DependencyObject {
 /* @Namespace=System.Windows.Controls */
 class ColumnDefinitionCollection : public DependencyObjectCollection {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
+	ColumnDefinitionCollection ();
+
 	virtual ~ColumnDefinitionCollection ();
 	
 	virtual bool AddedToCollection (Value *value, MoonError *error);
 	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+	
  public:
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
-	ColumnDefinitionCollection ();
-
 	virtual Type::Kind GetElementType () { return Type::COLUMNDEFINITION; }
 };
 
@@ -125,14 +134,17 @@ class ColumnDefinitionCollection : public DependencyObjectCollection {
 /* @Namespace=System.Windows.Controls */
 class RowDefinitionCollection : public DependencyObjectCollection {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
+	RowDefinitionCollection ();
+	
 	virtual ~RowDefinitionCollection ();
 	
 	virtual bool AddedToCollection (Value *value, MoonError *error);
 	
- public:
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
-	RowDefinitionCollection ();
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
+ public:
 	virtual Type::Kind GetElementType () { return Type::ROWDEFINITION; }
 };
 
@@ -172,8 +184,14 @@ class Grid : public Panel {
 	void RestoreMeasureResults ();
 
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	Grid ();
+	
 	virtual ~Grid ();
 	virtual void PostRender (List *ctx, Region *region, bool skip_children);
+	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 
  public:
  	/* @PropertyType=gint32,DefaultValue=0,Attached,GenerateAccessors,Validator=PositiveIntValidator */
@@ -197,9 +215,6 @@ class Grid : public Panel {
  	/* @PropertyType=bool,DefaultValue=false,GenerateAccessors */
 	const static int ShowGridLinesProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	Grid ();
-	
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
 	virtual void OnCollectionChanged (Collection *col, CollectionChangedEventArgs *args);
 	virtual void OnCollectionItemChanged (Collection *col, DependencyObject *obj, PropertyChangedEventArgs *args);
diff --git a/src/layoutinformation.cpp b/src/layoutinformation.cpp
index 2f39dde..38ec56d 100644
--- a/src/layoutinformation.cpp
+++ b/src/layoutinformation.cpp
@@ -11,6 +11,7 @@
 #include "geometry.h"
 #include "rect.h"
 #include "point.h"
+#include "factory.h"
 
 Geometry *
 LayoutInformation::GetCompositeClip (FrameworkElement *item)
@@ -43,7 +44,7 @@ LayoutInformation::GetCompositeClip (FrameworkElement *item)
 	if (isinf (composite.width) || isinf (composite.height))
 		return NULL;
 
-	RectangleGeometry *geom = new RectangleGeometry ();
+	RectangleGeometry *geom = MoonUnmanagedFactory::CreateRectangleGeometry ();
 	geom->SetRect (&composite);
 
 	return geom;
diff --git a/src/media.cpp b/src/media.cpp
index 02a3df8..6684679 100644
--- a/src/media.cpp
+++ b/src/media.cpp
@@ -30,6 +30,7 @@
 #include "timeline.h"
 #include "debug.h"
 #include "deployment.h"
+#include "factory.h"
 
 /*
  * MediaBase
@@ -348,7 +349,7 @@ Image::SetSourceInternal (Downloader *downloader, char *PartName)
 	// to create one here if required.
 	BitmapImage *source = (BitmapImage *) GetSource ();
 	if (!source) {
-		source = new BitmapImage ();
+		source = MoonUnmanagedFactory::CreateBitmapImage ();
 		SetSource (source);
 	}
 	MediaBase::SetSourceInternal (downloader, PartName);
@@ -625,7 +626,7 @@ Image::OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error)
 			source->AddHandler (BitmapImage::ImageFailedEvent, image_failed, this);
 			
 			if (bitmap->GetPixelWidth () > 0 && bitmap->GetPixelHeight () > 0) {
-				RoutedEventArgs *args = new RoutedEventArgs ();
+				RoutedEventArgs *args = MoonUnmanagedFactory::CreateRoutedEventArgs ();
 				ImageOpened (args);
 				args->unref ();
 			}
@@ -687,10 +688,10 @@ Image::InsideObject (cairo_t *cr, double x, double y)
 }
 
 Value *
-Image::CreateDefaultImageSource (Type::Kind kind, DependencyProperty *property)
+Image::CreateDefaultImageSource (Type::Kind kind, DependencyProperty *property, DependencyObject *forObj)
 {
 	if (kind == Type::BITMAPIMAGE)
-		return Value::CreateUnrefPtr (new BitmapImage ());
+		return Value::CreateUnrefPtr (MoonUnmanagedFactory::CreateBitmapImage ());
 	return NULL;
 }
 
diff --git a/src/media.h b/src/media.h
index 31ff0d9..0cbfa5e 100644
--- a/src/media.h
+++ b/src/media.h
@@ -22,7 +22,6 @@
 #include "downloader.h"
 #include "bitmapsource.h"
 
-
 /* @Namespace=System.Windows.Media */
 class MediaAttribute : public DependencyObject {
  protected:
@@ -179,7 +178,7 @@ class Image : public MediaBase {
 	
  	/* @GenerateCBinding,GeneratePInvoke */
 	Image ();
-	
+
 	virtual void Render (cairo_t *cr, Region *region, bool path_only = false);
 	
 	virtual void SetSourceInternal (Downloader *downloader, char *PartName);
@@ -207,7 +206,7 @@ class Image : public MediaBase {
 	void SetStretch (Stretch stretch);
 	Stretch GetStretch ();
 
-	static Value *CreateDefaultImageSource (Type::Kind kind, DependencyProperty *property);
+	static Value *CreateDefaultImageSource (Type::Kind kind, DependencyProperty *property, DependencyObject *forObj);
 };
 
 #endif /* __MEDIA_H__ */
diff --git a/src/mediaelement.cpp b/src/mediaelement.cpp
index d6ac98f..7182e53 100644
--- a/src/mediaelement.cpp
+++ b/src/mediaelement.cpp
@@ -25,6 +25,7 @@
 #include "mediaplayer.h"
 #include "timeline.h"
 #include "timemanager.h"
+#include "factory.h"
 
 /*
  * TimelineMarkerNode
@@ -1040,7 +1041,7 @@ MediaElement::OpenCompletedHandler (PlaylistRoot *playlist, EventArgs *args)
 		progress = MAX (progress, GetDownloadProgress ());
 		progress = MIN (progress + 0.00000001, 1.0);
 		SetDownloadProgress (progress);
-		Emit (MediaOpenedEvent, new RoutedEventArgs ());
+		Emit (MediaOpenedEvent, MoonUnmanagedFactory::CreateRoutedEventArgs ());
 		Emit (DownloadProgressChangedEvent);
 	}
 }
diff --git a/src/mediaelement.h b/src/mediaelement.h
index c705cc2..ae3f287 100644
--- a/src/mediaelement.h
+++ b/src/mediaelement.h
@@ -134,6 +134,7 @@ class MediaElement : public FrameworkElement {
  public:
  	/* @GenerateCBinding,GeneratePInvoke */
 	MediaElement ();
+
 	virtual void Dispose ();
 	
 	// properties
diff --git a/src/multiscaleimage.cpp b/src/multiscaleimage.cpp
index 2bc6c09..9fae899 100644
--- a/src/multiscaleimage.cpp
+++ b/src/multiscaleimage.cpp
@@ -31,6 +31,7 @@
 #include "multiscalesubimage.h"
 #include "bitmapimage.h"
 #include "ptr.h"
+#include "factory.h"
 
 #if LOGGING
 #include "clock.h"
@@ -474,7 +475,7 @@ MultiScaleImage::HandleDzParsed ()
 		MultiScaleSubImage *si;
 		for (i = 0; (si = (MultiScaleSubImage*)g_list_nth_data (dsource->subimages, i)); i++) {
 			if (!subs)
-				SetValue (MultiScaleImage::SubImagesProperty, new MultiScaleSubImageCollection ());
+				SetValue (MultiScaleImage::SubImagesProperty, MoonUnmanagedFactory::CreateMultiScaleSubImageCollection ());
 
 			subs->Add (si);
 		}
@@ -641,7 +642,7 @@ MultiScaleImage::GetFreeBitmapImageContext ()
 	if (g_list_length (bitmapimages) < num_dl) {
 		ctx = new BitmapImageContext ();
 		ctx->state = BitmapImageFree;
-		ctx->bitmapimage = new BitmapImage ();
+		ctx->bitmapimage = MoonUnmanagedFactory::CreateBitmapImage ();
 		ctx->bitmapimage->AddHandler (ctx->bitmapimage->ImageOpenedEvent, tile_available, this);
 		ctx->bitmapimage->AddHandler (ctx->bitmapimage->ImageFailedEvent, tile_failed, this);
 		bitmapimages = g_list_append (bitmapimages, ctx);
@@ -712,10 +713,10 @@ MultiScaleImage::Render (cairo_t *cr, Region *region, bool path_only)
 		cairo_surface_set_user_data (surface, &height_key, new int (ctx->bitmapimage->GetPixelHeight ()), g_free);
 
 		if (!fadein_sb) {
-			fadein_sb = new Storyboard ();
+			fadein_sb = MoonUnmanagedFactory::CreateStoryboard();
 			fadein_sb->SetManualTarget (this);
 			fadein_sb->SetTargetProperty (fadein_sb, new PropertyPath ("(MultiScaleImage.TileFade)"));
-			fadein_animation = new DoubleAnimation ();
+			fadein_animation = MoonUnmanagedFactory::CreateDoubleAnimation ();
 			fadein_animation->SetDuration (Duration (source->GetTileBlendTime ()));
 			TimelineCollection *tlc = new TimelineCollection ();
 			tlc->Add (static_cast<DoubleAnimation*> (fadein_animation));
@@ -1409,14 +1410,14 @@ MultiScaleImage::SetInternalViewportWidth (double value)
 	}
 
 	if (!zoom_sb) {
-		zoom_sb = new Storyboard ();
+		zoom_sb = MoonUnmanagedFactory::CreateStoryboard ();
 		zoom_sb->SetManualTarget (this);
 		zoom_sb->SetTargetProperty (zoom_sb, new PropertyPath ("(MultiScaleImage.InternalViewportWidth)"));
 		zoom_sb->AddHandler (Storyboard::CompletedEvent, zoom_finished, this);
-		zoom_animation = new DoubleAnimationUsingKeyFrames ();
+		zoom_animation = MoonUnmanagedFactory::CreateDoubleAnimationUsingKeyFrames ();
 		zoom_animation->SetDuration (Duration::FromSeconds (4));
-		zoom_animation->SetKeyFrames (DOPtr<DoubleKeyFrameCollection> (new DoubleKeyFrameCollection ()));
-		DOPtr<SplineDoubleKeyFrame> keyframe (new SplineDoubleKeyFrame ());
+		zoom_animation->SetKeyFrames (DOPtr<DoubleKeyFrameCollection> (MoonUnmanagedFactory::CreateDoubleKeyFrameCollection ()));
+		DOPtr<SplineDoubleKeyFrame> keyframe (MoonUnmanagedFactory::CreateSplineDoubleKeyFrame ());
 		keyframe->SetKeySpline (DOPtr<KeySpline> (new KeySpline (.05, .5, 0, 1.0)));
 		keyframe->SetKeyTime (KeyTime::FromPercent (1.0));
 		zoom_animation->GetKeyFrames ()->Add (static_cast<SplineDoubleKeyFrame*>(keyframe));
@@ -1452,14 +1453,14 @@ MultiScaleImage::SetInternalViewportOrigin (Point* value)
 	}
 
 	if (!pan_sb) {
-		pan_sb = new Storyboard ();
+		pan_sb = MoonUnmanagedFactory::CreateStoryboard ();
 		pan_sb->SetManualTarget (this);
 		pan_sb->SetTargetProperty (pan_sb, new PropertyPath ("(MultiScaleImage.InternalViewportOrigin)"));
 		pan_sb->AddHandler (Storyboard::CompletedEvent, pan_finished, this);
-		pan_animation = new PointAnimationUsingKeyFrames ();
+		pan_animation = MoonUnmanagedFactory::CreatePointAnimationUsingKeyFrames ();
 		pan_animation->SetDuration (Duration::FromSeconds (4));
-		pan_animation->SetKeyFrames (DOPtr<PointKeyFrameCollection> (new PointKeyFrameCollection ()));
-		SplinePointKeyFrame *keyframe = new SplinePointKeyFrame ();
+		pan_animation->SetKeyFrames (DOPtr<PointKeyFrameCollection> (MoonUnmanagedFactory::CreatePointKeyFrameCollection ()));
+		SplinePointKeyFrame *keyframe = MoonUnmanagedFactory::CreateSplinePointKeyFrame ();
 		keyframe->SetKeySpline (DOPtr<KeySpline> (new KeySpline (.05, .5, 0, 1.0)));
 		keyframe->SetKeyTime (KeyTime::FromPercent (1.0));
 		pan_animation->GetKeyFrames ()->Add (keyframe);
diff --git a/src/multiscalesubimage.cpp b/src/multiscalesubimage.cpp
index 219ba89..ad3fed4 100644
--- a/src/multiscalesubimage.cpp
+++ b/src/multiscalesubimage.cpp
@@ -46,6 +46,7 @@ MultiScaleSubImage::MultiScaleSubImage (const Uri *parent_uri, MultiScaleTileSou
 	delete original_uri;
 	LOG_MSI (" to %s\n", source_uri->ToString());
 
+	EnsureManagedPeer ();
 }
 
 double
diff --git a/src/multiscalesubimage.h b/src/multiscalesubimage.h
index 3ff2796..236332e 100644
--- a/src/multiscalesubimage.h
+++ b/src/multiscalesubimage.h
@@ -28,8 +28,14 @@ class MultiScaleSubImage : public DependencyObject {
 	double GetViewportHeight ();
 
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	MultiScaleSubImage ();
+
 	virtual ~MultiScaleSubImage () {}
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=double,DefaultValue=1.0,Version=2.0,ReadOnly,GenerateGetter */
 	const static int AspectRatioProperty;
@@ -43,8 +49,7 @@ class MultiScaleSubImage : public DependencyObject {
 	const static int ZIndexProperty;
 
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	MultiScaleSubImage ();
+	/* @SkipFactories */
 	MultiScaleSubImage (const Uri* parent_uri, MultiScaleTileSource *source, int id, int n);
 
 	double GetAspectRatio ();
diff --git a/src/namescope.h b/src/namescope.h
index 88c37de..b19dd85 100644
--- a/src/namescope.h
+++ b/src/namescope.h
@@ -37,7 +37,6 @@ class NameScope : public EventObject {
  	/* @PropertyType=NameScope,Attached,GenerateAccessors */
 	const static int NameScopeProperty;
 	
-	/* @GenerateCBinding*/
 	NameScope ();
 
 	virtual void Dispose ();
diff --git a/src/network-curl.h b/src/network-curl.h
index f7fb3ea..dcb2ec0 100644
--- a/src/network-curl.h
+++ b/src/network-curl.h
@@ -38,6 +38,7 @@ typedef void ( * CallHandler ) ( CallData * object ) ;
 
 class Closure : public EventObject {
 public:
+	/* @SkipFactories */
 	Closure (CurlHttpHandler *value)
 		: bridge (value)
 	{
@@ -62,6 +63,7 @@ class CurlHttpHandler : public HttpHandler {
 	Queue* handles;
 	GList *calls;
 
+	/* @SkipFactories */
 	CurlHttpHandler ();
 	virtual ~CurlHttpHandler ();
 
@@ -121,6 +123,7 @@ class CurlDownloaderRequest : public HttpRequest {
  public:
 	bool aborting;
 
+	/* @SkipFactories */
 	CurlDownloaderRequest (CurlHttpHandler *bridge, HttpRequest::Options options);
 	~CurlDownloaderRequest ();
 	virtual void AbortImpl ();
@@ -166,6 +169,7 @@ class CurlDownloaderResponse : public HttpResponse {
 	bool aborted;
 
  public:
+	/* @SkipFactories */
 	CurlDownloaderResponse (CurlHttpHandler *bridge,
 	    CurlDownloaderRequest *request);
 
@@ -194,6 +198,7 @@ class CurlDownloaderResponse : public HttpResponse {
 
 class ResponseClosure : public EventObject {
 public:
+	/* @SkipFactories */
 	ResponseClosure (CurlDownloaderResponse *value)
 		: res (value)
 	{
@@ -206,4 +211,4 @@ public:
 
 #endif /* __MOON_NETWORK_CURL__ */
 
-#endif /* HAVE_CURL */
\ No newline at end of file
+#endif /* HAVE_CURL */
diff --git a/src/network.h b/src/network.h
index e59f39c..5719dc3 100644
--- a/src/network.h
+++ b/src/network.h
@@ -149,6 +149,7 @@ public:
 	const static int WriteEvent;
 
 protected:
+	/* @SkipFactories */
 	HttpRequest (Type::Kind type, HttpHandler *handler, Options options);
 	virtual ~HttpRequest ();
 
@@ -235,6 +236,7 @@ private:
 	char *response_status_text;
 
 protected:
+	/* @SkipFactories */
 	HttpResponse (Type::Kind type, HttpRequest *request);
 	virtual ~HttpResponse () {}
 
@@ -270,6 +272,7 @@ private:
 	char *download_dir;
 
 protected:
+	/* @SkipFactories */
 	HttpHandler (Type::Kind type);
 
 public:
diff --git a/src/panel.cpp b/src/panel.cpp
index da66e9f..3c81050 100644
--- a/src/panel.cpp
+++ b/src/panel.cpp
@@ -20,19 +20,27 @@
 #include "deployment.h"
 #include "effect.h"
 #include "projection.h"
+#include "factory.h"
 
 Panel::Panel ()
 {
 	SetObjectType (Type::PANEL);
 	mouse_over = NULL;
-
-	SetSubtreeObject (GetChildren());
 }
 
 Panel::~Panel()
 {
 }
 
+Value *
+Panel::CreateChildren (Type::Kind kind, DependencyProperty *property, DependencyObject *forObj)
+{
+	UIElementCollection *col = MoonUnmanagedFactory::CreateUIElementCollection ();
+	if (forObj)
+		((Panel*)forObj)->SetSubtreeObject (col);
+	return Value::CreateUnrefPtr (col);
+}
+
 #define DEBUG_BOUNDS 0
 #define CAIRO_CLIP 0
 
diff --git a/src/panel.h b/src/panel.h
index 56ea5f9..a62b2b9 100644
--- a/src/panel.h
+++ b/src/panel.h
@@ -30,7 +30,7 @@ class Panel : public FrameworkElement {
  public:
  	/* @PropertyType=Brush,GenerateAccessors */
 	const static int BackgroundProperty;
- 	/* @PropertyType=UIElementCollection,AutoCreateValue,ManagedFieldAccess=Internal,ManagedSetterAccess=Internal,GenerateAccessors */
+ 	/* @PropertyType=UIElementCollection,AutoCreateValue,AutoCreator=Panel::CreateChildren,ManagedFieldAccess=Internal,ManagedSetterAccess=Internal,GenerateAccessors */
 	const static int ChildrenProperty;
 	/* @PropertyType=bool,DefaultValue=false,ManagedSetterAccess=Internal,GenerateAccessors */
 	const static int IsItemsHostProperty;
@@ -75,6 +75,9 @@ class Panel : public FrameworkElement {
 	
 	void SetIsItemsHost (bool value);
 	bool GetIsItemsHost ();
+
+	// Autocreator for the Children property
+	static Value *CreateChildren (Type::Kind kind, DependencyProperty *property, DependencyObject *forObj);
 };
 
 #endif /* __MOON_PANEL_H__ */
diff --git a/src/pipeline-asf.cpp b/src/pipeline-asf.cpp
index fa26d90..91027de 100644
--- a/src/pipeline-asf.cpp
+++ b/src/pipeline-asf.cpp
@@ -19,6 +19,7 @@
 #include "playlist.h"
 #include "clock.h"
 #include "timesource.h"
+#include "factory.h"
 
 // according to http://msdn.microsoft.com/en-us/library/cc307965(VS.85).aspx the maximum size is 10 MB
 #define ASF_OBJECT_MAX_SIZE (10 * 1024 * 1024)
diff --git a/src/pipeline-ffmpeg.h b/src/pipeline-ffmpeg.h
index ac94e0f..d55bce0 100644
--- a/src/pipeline-ffmpeg.h
+++ b/src/pipeline-ffmpeg.h
@@ -96,6 +96,7 @@ protected:
 	virtual void SwitchMediaStreamAsyncInternal (IMediaStream *stream);
 
 public:
+	/* @SkipFactories */
 	FfmpegDemuxer (Media *media, IMediaSource *source, MemoryBuffer *initial_buffer);
 	virtual void Dispose ();
 
@@ -130,6 +131,7 @@ protected:
 	virtual void OpenDecoderAsyncInternal ();
 	
 public:
+	/* @SkipFactories */
 	FfmpegDecoder (Media* media, IMediaStream* stream);
 	virtual void Dispose ();	
 	virtual void Cleanup (MediaFrame* frame);
diff --git a/src/pipeline-nocodec-ui.h b/src/pipeline-nocodec-ui.h
index 286630f..9bfc0f9 100644
--- a/src/pipeline-nocodec-ui.h
+++ b/src/pipeline-nocodec-ui.h
@@ -47,6 +47,7 @@ private:
 	void Close (); // Closes the window and unrefs ourself
 	void Show ();// Shows the codec installation ui and refs ourself
 	
+	/* @SkipFactories */
 	CodecDownloader (Surface *surface);
 	virtual ~CodecDownloader ();
 
diff --git a/src/pipeline.cpp b/src/pipeline.cpp
index 0b99a3e..abd6823 100644
--- a/src/pipeline.cpp
+++ b/src/pipeline.cpp
@@ -37,6 +37,7 @@
 #include "deployment.h"
 #include "timesource.h"
 #include "pipeline-mp4.h"
+#include "factory.h"
 
 /*
  * Media
@@ -995,8 +996,8 @@ Media::SelectDemuxerAsync (MediaReadClosure *closure)
 			}
 			char *msg = g_strdup_printf ("No demuxers registered to handle the media source '%s'.", source_name);
 			ReportErrorOccurred (new ErrorEventArgs (MediaError,
-								 MoonError (MoonError::EXCEPTION, 3001, "AG_E_INVALID_FILE_FORMAT"),
-								 MEDIA_UNKNOWN_CODEC, msg));
+											 MoonError (MoonError::EXCEPTION, 3001, "AG_E_INVALID_FILE_FORMAT"),
+											 MEDIA_UNKNOWN_CODEC, msg));
 			g_free (msg);
 			g_free (source_name);
 			return false;
@@ -1097,7 +1098,7 @@ Media::SelectDecodersAsync ()
 		
 		if (decoder == NULL) {
 			ReportErrorOccurred (new ErrorEventArgs (MediaError,
-								 MoonError (MoonError::EXCEPTION, 3001, "AG_E_INVALID_FILE_FORMAT")));
+											 MoonError (MoonError::EXCEPTION, 3001, "AG_E_INVALID_FILE_FORMAT")));
 			return false;
 		}
 		
diff --git a/src/pipeline.h b/src/pipeline.h
index b72aaa7..dfe7f43 100644
--- a/src/pipeline.h
+++ b/src/pipeline.h
@@ -153,6 +153,7 @@ private:
 	
 protected:
 	virtual ~MediaClosure () {}
+	/* @SkipFactories */
 	MediaClosure (Type::Kind object_type, Media *media, MediaCallback *callback, EventObject *context);
 	
 public:
@@ -917,7 +918,9 @@ private:
 protected:
 	IMediaSource *source;
 	
+	/* @SkipFactories */
 	IMediaDemuxer (Type::Kind kind, Media *media, IMediaSource *source);
+	/* @SkipFactories */
 	IMediaDemuxer (Type::Kind kind, Media *media);
 	
 	virtual ~IMediaDemuxer () {}
@@ -1040,6 +1043,7 @@ protected:
 	virtual void InputEnded () { };
 	
 public:
+	/* @SkipFactories */
 	IMediaDecoder (Type::Kind kind, Media *media, IMediaStream *stream);
 	virtual void Dispose ();
 	
@@ -1085,6 +1089,7 @@ public:
 	MoonPixelFormat input_format;
 	VideoStream *stream;
 	
+	/* @SkipFactories */
 	IImageConverter (Type::Kind kind, Media *media, VideoStream *stream);
 	
 	/* Opens the converter. If false is returned, ReportErrorOccurred must have been called */
@@ -1120,6 +1125,7 @@ protected:
 	void ReadFD (FILE *read_fd, MediaReadClosure *closure);
 	
 public:
+	/* @SkipFactories */
 	IMediaSource (Type::Kind kind, Media *media);
 	virtual void Dispose ();
 	
diff --git a/src/playlist.cpp b/src/playlist.cpp
index 5dce5cb..5c4aa80 100644
--- a/src/playlist.cpp
+++ b/src/playlist.cpp
@@ -22,7 +22,7 @@
 #include "debug.h"
 #include "media.h"
 #include "mediaplayer.h"
-
+#include "factory.h"
 
 /*
  * PlaylistParserInternal
diff --git a/src/playlist.h b/src/playlist.h
index d389f4e..0c195fe 100644
--- a/src/playlist.h
+++ b/src/playlist.h
@@ -103,7 +103,9 @@ private:
 	void OpenMediaPlayer ();
 	
 protected:
+	/* @SkipFactories */
 	PlaylistEntry (Type::Kind kind);
+	/* @SkipFactories */
 	PlaylistEntry (Type::Kind kind, Playlist *parent);
 	virtual ~PlaylistEntry () {}
 
@@ -224,6 +226,7 @@ private:
 	void MergeWith (PlaylistEntry *entry);
 
 protected:
+	/* @SkipFactories */
 	Playlist (Type::Kind kind);
 	virtual ~Playlist () {}
 
diff --git a/src/popup.h b/src/popup.h
index 5186ee2..9ffa762 100644
--- a/src/popup.h
+++ b/src/popup.h
@@ -32,6 +32,7 @@ class Popup : public FrameworkElement {
 	
 	/* @GenerateCBinding,GeneratePInvoke */
 	Popup ();
+
 	virtual void Dispose ();
 
 	//
diff --git a/src/projection.cpp b/src/projection.cpp
index 26a29a2..42685cf 100644
--- a/src/projection.cpp
+++ b/src/projection.cpp
@@ -52,6 +52,8 @@ Matrix3D::Matrix3D (double *m)
 	SetOffsetY (m[13]);
 	SetOffsetZ (m[14]);
 	SetM44 (m[15]);
+
+	EnsureManagedPeer ();
 }
 
 void
diff --git a/src/projection.h b/src/projection.h
index e375834..a7ce0bd 100644
--- a/src/projection.h
+++ b/src/projection.h
@@ -64,6 +64,7 @@ public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	Matrix3D ();
 
+	/* @SkipFactories */
 	Matrix3D (double *m);
 	
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
diff --git a/src/provider.cpp b/src/provider.cpp
index 16361c4..a1d0c1b 100644
--- a/src/provider.cpp
+++ b/src/provider.cpp
@@ -169,7 +169,7 @@ InheritedPropertyValueProvider::GetPropertyValue (DependencyProperty *property)
 
 	int parentPropertyId = -1;
 
-	Types *types =  Deployment::GetCurrent()->GetTypes();
+	Types *types =  obj->GetDeployment()->GetTypes();
 
 #define INHERIT_CT_C(p) \
 	G_STMT_START {							\
@@ -597,11 +597,11 @@ AutoCreatePropertyValueProvider::GetPropertyValue (DependencyProperty *property)
 	if ((value = (Value *) g_hash_table_lookup (auto_values, property)))
 		return value;
 	
-	if (!(value = property->GetDefaultValue (obj->GetObjectType ())))
+	if (!(value = property->GetDefaultValue (obj->GetObjectType (), obj)))
 		return NULL;
 
+	Deployment *deployment = obj->GetDeployment();
 #if SANITY
-	Deployment *deployment = Deployment::GetCurrent ();
 	if (!value->Is(deployment, property->GetPropertyType()))
 		g_warning ("autocreated value for property '%s' (type=%s) is of incompatible type %s\n",
 			   property->GetName(),
@@ -609,6 +609,15 @@ AutoCreatePropertyValueProvider::GetPropertyValue (DependencyProperty *property)
 			   Type::Find (deployment, value->GetKind())->GetName());
 #endif
 
+	if (value->Is (deployment, Type::EVENTOBJECT)) {
+		EventObject *eo = value->AsEventObject ();
+		if (eo && eo->addStrongRef) {
+			obj->addStrongRef (obj, eo, "");
+			value->SetNeedUnref (false);
+			eo->unref ();
+		}
+	}
+
 	g_hash_table_insert (auto_values, property, value);
 	
 	MoonError error;
@@ -630,9 +639,11 @@ AutoCreatePropertyValueProvider::ClearValue (DependencyProperty *property)
 }
 
 Value* 
-AutoCreators::default_autocreator (Type::Kind kind, DependencyProperty *property)
+AutoCreators::default_autocreator (Type::Kind kind, DependencyProperty *property, DependencyObject *forObj)
 {
-	Type *type = Type::Find (Deployment::GetCurrent (), property->GetPropertyType ());
+	Deployment *deployment = forObj ? forObj->GetDeployment() : Deployment::GetCurrent();
+
+	Type *type = Type::Find (deployment, property->GetPropertyType ());
 	if (!type)
 		return NULL;
 
@@ -643,18 +654,18 @@ AutoCreators::default_autocreator (Type::Kind kind, DependencyProperty *property
 #define XAP_FONT_SIZE     11.0
 
 Value *
-AutoCreators::CreateDefaultFontSize (Type::Kind kind, DependencyProperty *property)
+AutoCreators::CreateDefaultFontSize (Type::Kind kind, DependencyProperty *property, DependencyObject *forObj)
 {
-	Deployment *deployment;
+	Deployment *deployment = forObj ? forObj->GetDeployment() : Deployment::GetCurrent();
 	
-	if ((deployment = Deployment::GetCurrent ()) && deployment->IsLoadedFromXap ())
+	if (deployment && deployment->IsLoadedFromXap ())
 		return new Value (XAP_FONT_SIZE);
 	
 	return new Value (XAML_FONT_SIZE);
 }
 
 Value *
-AutoCreators::CreateBlackBrush (Type::Kind kind, DependencyProperty *property)
+AutoCreators::CreateBlackBrush (Type::Kind kind, DependencyProperty *property, DependencyObject *forObj)
 {
 	SolidColorBrush *brush = new SolidColorBrush ("black");
 	brush->Freeze ();
diff --git a/src/provider.h b/src/provider.h
index c850428..0386cc5 100644
--- a/src/provider.h
+++ b/src/provider.h
@@ -118,7 +118,7 @@ private:
 							    Type::Kind descendantKind);
 };
 
-typedef Value* AutoCreator  (Type::Kind kind, DependencyProperty *property);
+typedef Value* AutoCreator  (Type::Kind kind, DependencyProperty *property, DependencyObject *forObj);
 
 class AutoCreators {
 public:
diff --git a/src/richtextbox.cpp b/src/richtextbox.cpp
index fc53cd1..6594629 100644
--- a/src/richtextbox.cpp
+++ b/src/richtextbox.cpp
@@ -23,6 +23,7 @@
 #include "border.h"
 #include "window.h"
 #include "panel.h"
+#include "factory.h"
 
 
 //
@@ -253,7 +254,7 @@ RichTextBox::RichTextBox ()
 	
 	AddHandler (UIElement::MouseLeftButtonMultiClickEvent, RichTextBox::mouse_left_button_multi_click, this);
 	
-	rootSection = new Section();
+	rootSection = MoonUnmanagedFactory::CreateSection();
 
 	// FIXME: we should not be doing this... should the selection be autocreated?
 	SetSelection (new TextSelection());
@@ -477,7 +478,7 @@ RichTextBox::BatchPop ()
 void
 RichTextBox::EmitSelectionChanged ()
 {
-	EmitAsync (RichTextBox::SelectionChangedEvent, new RoutedEventArgs ());
+	EmitAsync (RichTextBox::SelectionChangedEvent, MoonUnmanagedFactory::CreateRoutedEventArgs ());
 }
 
 void
@@ -1111,7 +1112,7 @@ RichTextBox::OnApplyTemplate ()
 	}
 	
 	// Create our view control
-	view = new RichTextBoxView ();
+	view = MoonUnmanagedFactory::CreateRichTextBoxView ();
 	
 	view->SetEnableCursor (!is_read_only);
 	view->SetTextBox (this);
diff --git a/src/richtextbox.h b/src/richtextbox.h
index faea5c3..87a5472 100644
--- a/src/richtextbox.h
+++ b/src/richtextbox.h
@@ -270,6 +270,12 @@ class RichTextBox : public Control {
 	const static int ModelChangedEvent;
 	
 	virtual ~RichTextBox ();
+
+	/* @GeneratePInvoke,GenerateCBinding */
+	RichTextBox ();
+	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
 	/* @PropertyType=bool,DefaultValue=false,GenerateAccessors */
@@ -295,9 +301,6 @@ class RichTextBox : public Control {
 	/* @PropertyType=string,GenerateAccessors */
 	const static int XamlProperty;
 	
-	/* @GeneratePInvoke,GenerateCBinding */
-	RichTextBox ();
-	
 	//
 	// Overrides
 	//
@@ -440,12 +443,15 @@ class RichTextBoxView : public FrameworkElement {
 	void Paint (cairo_t *cr);
 	
  protected:
-	virtual ~RichTextBoxView ();
-	
- public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	RichTextBoxView ();
 	
+	virtual ~RichTextBoxView ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+	
+ public:
 	//
 	// Overrides
 	//
diff --git a/src/runtime.cpp b/src/runtime.cpp
index 435fa08..28e1c74 100644
--- a/src/runtime.cpp
+++ b/src/runtime.cpp
@@ -13,6 +13,22 @@
 
 #include <config.h>
 
+#define INCLUDED_MONO_HEADERS 1
+
+#include <glib.h>
+#include <mono/mini/jit.h>
+#include <mono/metadata/appdomain.h>
+#include <mono/metadata/assembly.h>
+#include <mono/metadata/debug-helpers.h>
+G_BEGIN_DECLS
+/* because this header sucks */
+#include <mono/metadata/mono-debug.h>
+G_END_DECLS
+#include <mono/metadata/mono-config.h>
+#include <mono/metadata/threads.h>
+#include <mono/metadata/mono-gc.h>
+
+
 #include <stdlib.h>
 #include <string.h>
 #include <malloc.h>
@@ -42,6 +58,7 @@
 #include "drm.h"
 #include "utils.h"
 #include "timemanager.h"
+#include "factory.h"
 
 #include "contentcontrol.h"
 #include "usercontrol.h"
@@ -333,7 +350,9 @@ runtime_flags_set_show_fps (gboolean flag)
 Surface::Surface (MoonWindow *window)
 	: EventObject (Type::SURFACE)
 {
-	GetDeployment ()->SetSurface (this);
+	//	GetDeployment ()->SetSurface (this);
+
+	// EnsureManagedPeer ();
 
 	main_thread = pthread_self ();
 	main_thread_inited = true;
@@ -355,7 +374,7 @@ Surface::Surface (MoonWindow *window)
 		g_warning ("Surfaces cannot be initialized with fullscreen windows.");
 	window->SetSurface (this);
 	
-	layers = new HitTestCollection ();
+	layers = NULL;
 	toplevel = NULL;
 	input_list = new List ();
 	captured = NULL;
@@ -416,13 +435,13 @@ Surface::~Surface ()
 	time_manager->RemoveHandler (TimeManager::UpdateInputEvent, update_input_cb, this);
 		
 	if (toplevel) {
+		// FIXME remove destroyed handler
 		toplevel->SetIsAttached (false);
-		toplevel->unref ();
 	}
 	
 #if DEBUG
 	if (debug_selected_element) {
-		debug_selected_element->unref ();
+		// FIXME remove destroyed handler
 		debug_selected_element = NULL;
 	}
 #endif
@@ -447,7 +466,8 @@ Surface::~Surface ()
 	delete up_dirty;
 	delete down_dirty;
 	
-	layers->unref ();
+	// FIXME remove destroyed handler
+	// layers->unref ();
 	
 	surface_list = g_list_remove (surface_list, this);
 }
@@ -598,7 +618,7 @@ Surface::Attach (UIElement *element)
 		time_manager->RemoveHandler (TimeManager::UpdateInputEvent, update_input_cb, this);
 		time_manager->Stop ();
 		int maxframerate = time_manager->GetMaximumRefreshRate ();
-		toplevel->unref ();
+		MOON_CLEAR_FIELD(toplevel);
 		time_manager_mutex.Lock ();
 		time_manager->unref ();
 		time_manager = new TimeManager ();
@@ -618,7 +638,6 @@ Surface::Attach (UIElement *element)
 		if (active_window)
 			active_window->Invalidate();
 
-		toplevel = NULL;
 		return;
 	}
 
@@ -627,14 +646,11 @@ Surface::Attach (UIElement *element)
 		return;
 	}
 
-	UIElement *new_toplevel = element;
-	new_toplevel->ref ();
-
 	// make sure we have a namescope at the toplevel so that names
 	// can be registered/resolved properly.
-	if (NameScope::GetNameScope (new_toplevel) == NULL) {
+	if (NameScope::GetNameScope (element) == NULL) {
 		NameScope *ns = new NameScope ();
-		NameScope::SetNameScope (new_toplevel, ns);
+		NameScope::SetNameScope (element, ns);
 		ns->unref ();
 	}
 
@@ -645,7 +661,7 @@ Surface::Attach (UIElement *element)
 	if (zombie)
 		return;
 
-	toplevel = new_toplevel;
+	MOON_SET_FIELD(toplevel, element);
 
 	this->ref ();
 	toplevel->AddHandler (UIElement::LoadedEvent, toplevel_loaded, this, (GDestroyNotify)event_object_unref);
@@ -724,6 +740,9 @@ Surface::ToplevelLoaded (UIElement *element)
 void
 Surface::AttachLayer (UIElement *layer)
 {
+	if (layers == NULL)
+		MOON_SET_FIELD_UNREF(layers, MoonUnmanagedFactory::CreateHitTestCollection ());
+
 	if (layer == toplevel)
 		layers->Insert (0, Value(layer));
 	else
@@ -739,6 +758,9 @@ Surface::AttachLayer (UIElement *layer)
 void
 Surface::DetachLayer (UIElement *layer)
 {
+	if (layers == NULL)
+		MOON_SET_FIELD_UNREF(layers, MoonUnmanagedFactory::CreateHitTestCollection ());
+
 	// if the layer contained the last UIElement receiving mouse input, clear the input list.
 	if (!input_list->IsEmpty() && ((UIElementNode*)input_list->Last())->uielement == layer) {
 		delete input_list;
@@ -762,10 +784,10 @@ Surface::DetachLayer (UIElement *layer)
 
 	// XXX should we also clear out the focus_changed_events list?
 
-	layers->Remove (Value (layer));
 	layer->SetIsAttached (false);
 	if (active_window)
 		Invalidate (layer->GetBounds ());
+	layers->Remove (Value (layer));
 }
 
 void
@@ -1096,7 +1118,7 @@ Surface::SetUserInitiatedEvent (bool value)
 bool
 Surface::IsTopLevel (UIElement* top)
 {
-	if (top == NULL)
+	if (top == NULL || layers == NULL)
 		return false;
 
 	bool ret = top == full_screen_message;
@@ -1662,11 +1684,11 @@ Surface::CreateArgsForEvent (int event_id, MoonEvent *event)
 	if (event_id ==UIElement::InvalidatedEvent
 	    || event_id ==UIElement::GotFocusEvent
 	    || event_id ==UIElement::LostFocusEvent)
-		return new RoutedEventArgs ();
+		return MoonUnmanagedFactory::CreateRoutedEventArgs ();
 	else if (event_id == UIElement::MouseLeaveEvent
 		 || event_id ==UIElement::MouseMoveEvent
 		 || event_id ==UIElement::MouseEnterEvent)
-		return new MouseEventArgs((MoonMouseEvent*)event);
+		return new MouseEventArgs ((MoonMouseEvent*)event);
 	else if (event_id ==UIElement::MouseLeftButtonMultiClickEvent
 		 || event_id ==UIElement::MouseLeftButtonDownEvent
 		 || event_id ==UIElement::MouseLeftButtonUpEvent
@@ -1677,7 +1699,7 @@ Surface::CreateArgsForEvent (int event_id, MoonEvent *event)
 		return new MouseWheelEventArgs((MoonScrollWheelEvent*)event);
 	else if (event_id == UIElement::KeyDownEvent
 		 || event_id == UIElement::KeyUpEvent)
-		return new KeyEventArgs((MoonKeyEvent*)event);
+		return new KeyEventArgs ((MoonKeyEvent*)event);
 	else {
 		g_warning ("Unknown event id %d\n", event_id);
 		return new EventArgs();
diff --git a/src/runtime.h b/src/runtime.h
index 9d4e1f0..aa5d118 100644
--- a/src/runtime.h
+++ b/src/runtime.h
@@ -177,7 +177,7 @@ typedef void (* MoonlightExposeHandoffFunc) (Surface *surface, TimeSpan time, vo
 /* @Namespace=None,ManagedEvents=Manual */
 class Surface : public EventObject {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
+	/* @GenerateCBinding,GeneratePInvoke,SkipFactories */
 	Surface (MoonWindow *window);
 	virtual void Dispose ();
 	
diff --git a/src/security.h b/src/security.h
index 1ed8b56..7f929a3 100644
--- a/src/security.h
+++ b/src/security.h
@@ -26,7 +26,7 @@ protected:
 
 public:
 	/* @GeneratePInvoke,GenerateCBinding */
-	SecuritySettings () {}
+	SecuritySettings () { SetObjectType (Type::SECURITYSETTINGS); }
 
 	/* @PropertyType=ElevatedPermissions,DefaultValue=ElevatedPermissionsNone,GenerateAccessors,ManagedSetterAccess=Private,Validator=OnlyDuringInitializationValidator */
 	const static int ElevatedPermissionsProperty;
diff --git a/src/shape.cpp b/src/shape.cpp
index d46be9a..8631614 100644
--- a/src/shape.cpp
+++ b/src/shape.cpp
@@ -22,6 +22,7 @@
 #include "utils.h"
 #include "ptr.h"
 #include "deployment.h"
+#include "factory.h"
 
 //
 // SL-Cairo convertion and helper routines
@@ -121,7 +122,7 @@ Shape::GetGeometryTransform ()
 {
 	Matrix *matrix = new Matrix (&stretch_transform);
 	
-	MatrixTransform *transform = new MatrixTransform ();
+	MatrixTransform *transform = MoonUnmanagedFactory::CreateMatrixTransform ();
 
 	transform->SetValue (MatrixTransform::MatrixProperty, matrix);
 	matrix->unref ();
diff --git a/src/size.cpp b/src/size.cpp
index d0842ce..b2850fa 100644
--- a/src/size.cpp
+++ b/src/size.cpp
@@ -39,6 +39,8 @@ SizeChangedEventArgs::SizeChangedEventArgs (Size prev_size, Size new_size)
 	SetObjectType(Type::SIZECHANGEDEVENTARGS);
 	this->prev_size = prev_size;
 	this->new_size = new_size;
+
+	EnsureManagedPeer ();
 }
 
 void
diff --git a/src/size.h b/src/size.h
index 65da459..e6101fc 100644
--- a/src/size.h
+++ b/src/size.h
@@ -90,11 +90,18 @@ struct Size {
 class SizeChangedEventArgs : public RoutedEventArgs {
 	Size prev_size;
 	Size new_size;
-	
-public:
+
+protected:
 	/* @GenerateCBinding,GeneratePInvoke */
 	SizeChangedEventArgs ();
+
+	virtual ~SizeChangedEventArgs () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
+public:
+	/* @SkipFactories */
 	SizeChangedEventArgs (Size prev_size, Size new_size);
 	
 	Size GetPrevSize () { return prev_size; }
diff --git a/src/stylus.h b/src/stylus.h
index f7e0c28..8a4d730 100644
--- a/src/stylus.h
+++ b/src/stylus.h
@@ -89,7 +89,7 @@ class UnmanagedStylusPoint : public StylusPoint {
 	
  public:
 	/* @GenerateCBinding,GeneratePInvoke */
-	UnmanagedStylusPoint () {  SetObjectType (Type::UNMANAGEDSTYLUSPOINT); }
+	UnmanagedStylusPoint () { SetObjectType (Type::UNMANAGEDSTYLUSPOINT); }
 };
 
 /* @Namespace=System.Windows.Input */
@@ -263,7 +263,6 @@ class Stroke : public DependencyObject {
 	
 	/* @GenerateCBinding,GeneratePInvoke */
 	Stroke ();
-
 	/* @GenerateCBinding,GeneratePInvoke */
 	bool HitTest (StylusPointCollection *stylusPoints);
 	
diff --git a/src/template.h b/src/template.h
index 9a732fc..0ff3fc9 100644
--- a/src/template.h
+++ b/src/template.h
@@ -25,8 +25,6 @@ class XamlContext;
 /* @Namespace=System.Windows */
 class FrameworkTemplate : public DependencyObject {
 public:
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	FrameworkTemplate ();
 	virtual void Dispose ();
 
 	/* @GenerateCBinding,GeneratePInvoke */
@@ -36,11 +34,17 @@ public:
 	void SetXamlBuffer (XamlContext *context, const char *buffer);
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	FrameworkTemplate ();
+
 	virtual ~FrameworkTemplate () {}
 
 	char *xaml_buffer;
 	XamlContext *xaml_context;
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 private:
 	EVENTHANDLER (FrameworkTemplate, ShuttingDownEvent, Deployment, EventArgs);
 	void ClearXamlBuffer ();
@@ -54,12 +58,15 @@ class ControlTemplate : public FrameworkTemplate {
 public:
 	/* @PropertyType=ManagedTypeInfo,ManagedPropertyType=System.Type,Access=Internal,ManagedAccessorAccess=Public,ManagedFieldAccess=Private */
 	const static int TargetTypeProperty;
-	
+
+protected:
 	/* @GenerateCBinding,GeneratePInvoke */
 	ControlTemplate ();
 
-protected:
 	virtual ~ControlTemplate () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 //
@@ -68,13 +75,16 @@ protected:
 /* @Namespace=System.Windows */
 class DataTemplate : public FrameworkTemplate {
 public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	DataTemplate ();
-
 	/* This method always returns a reffed object */
 	virtual DependencyObject *GetVisualTreeWithError (FrameworkElement *templateBindingSource, MoonError *error);
 protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	DataTemplate ();
+
 	virtual ~DataTemplate () {}
+	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 #endif /* __MOON_TEMPLATE_H__ */
diff --git a/src/textblock.cpp b/src/textblock.cpp
index 07f8050..eb7fc59 100644
--- a/src/textblock.cpp
+++ b/src/textblock.cpp
@@ -29,6 +29,7 @@
 #include "debug.h"
 #include "enums.h"
 #include "uri.h"
+#include "factory.h"
 
 // Unicode Line Separator (\u2028)
 static const char utf8_linebreak[3] = { 0xe2, 0x80, 0xa8 };
@@ -512,7 +513,7 @@ TextBlock::SetTextInternal (const char *text)
 		
 		if (run == NULL) {
 			inlines->Clear ();
-			run = new Run ();
+			run = MoonUnmanagedFactory::CreateRun ();
 			run->SetAutogenerated (true);
 			inlines->Add (run);
 			run->unref ();
diff --git a/src/textbox.cpp b/src/textbox.cpp
index 9775665..eab7a52 100644
--- a/src/textbox.cpp
+++ b/src/textbox.cpp
@@ -29,6 +29,7 @@
 #include "panel.h"
 #include "utils.h"
 #include "uri.h"
+#include "factory.h"
 
 #include "window.h"
 
@@ -2224,7 +2225,7 @@ TextBoxBase::OnApplyTemplate ()
 		return;
 	}
 	
-	view = new TextBoxView ();
+	view = MoonUnmanagedFactory::CreateTextBoxView ();
 	
 	view->SetEnableCursor (!is_read_only);
 	view->SetTextBox (this);
@@ -2469,13 +2470,13 @@ TextBox::TextBox ()
 void
 TextBox::EmitSelectionChanged ()
 {
-	EmitAsync (TextBox::SelectionChangedEvent, new RoutedEventArgs ());
+	EmitAsync (TextBox::SelectionChangedEvent, MoonUnmanagedFactory::CreateRoutedEventArgs ());
 }
 
 void
 TextBox::EmitTextChanged ()
 {
-	EmitAsync (TextBox::TextChangedEvent, new TextChangedEventArgs ());
+	EmitAsync (TextBox::TextChangedEvent, MoonUnmanagedFactory::CreateTextChangedEventArgs ());
 }
 
 void
@@ -2886,7 +2887,7 @@ PasswordBox::CursorPrevWord (int cursor)
 void
 PasswordBox::EmitTextChanged ()
 {
-	EmitAsync (PasswordBox::PasswordChangedEvent, new RoutedEventArgs ());
+	EmitAsync (PasswordBox::PasswordChangedEvent, MoonUnmanagedFactory::CreateRoutedEventArgs ());
 }
 
 void
diff --git a/src/textbox.h b/src/textbox.h
index 40a82ac..12b493b 100644
--- a/src/textbox.h
+++ b/src/textbox.h
@@ -46,7 +46,7 @@ class CursorPositionChangedEventArgs : public EventArgs {
 	virtual ~CursorPositionChangedEventArgs () { }
 	
  public:
-	/* @GenerateCBinding,GeneratePInvoke */
+	/* @SkipFactories */
 	CursorPositionChangedEventArgs ()
 	{
 		SetObjectType (Type::CURSORPOSITIONCHANGEDEVENTARGS);
@@ -55,6 +55,7 @@ class CursorPositionChangedEventArgs : public EventArgs {
 		this->y = 0.0;
 	}
 	
+	/* @SkipFactories */
 	CursorPositionChangedEventArgs (double height, double x, double y)
 	{
 		SetObjectType (Type::CURSORPOSITIONCHANGEDEVENTARGS);
@@ -244,6 +245,7 @@ class TextBoxBase : public Control, public ITextAttributes {
 	virtual ~TextBoxBase ();
 	
  public:
+	/* @SkipFactories */
 	TextBoxBase () { }
 	
 	//
@@ -348,7 +350,13 @@ class TextBox : public TextBoxBase {
 	virtual void SetSelectionStart (int start);
 	virtual void SetSelectionLength (int length);
 	
+	/* @GenerateCBinding,GeneratePInvoke */
+	TextBox ();
+	
 	virtual ~TextBox () { }
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
 	/* @PropertyType=bool,DefaultValue=false,GenerateAccessors */
@@ -386,9 +394,6 @@ class TextBox : public TextBoxBase {
 	/* @PropertyType=object,GenerateAccessors,Browsable=Never */
 	const static int WatermarkProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	TextBox ();
-	
 	//
 	// Overrides
 	//
@@ -496,7 +501,13 @@ class PasswordBox : public TextBoxBase {
 	virtual void SetSelectionLength (int length);
 	virtual int GetSelectionLength ();
 	
+	/* @GenerateCBinding,GeneratePInvoke */
+	PasswordBox ();
+	
 	virtual ~PasswordBox ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
 	/* @PropertyType=Brush,GenerateAccessors */
@@ -520,9 +531,6 @@ class PasswordBox : public TextBoxBase {
 	/* @PropertyType=gint32,DefaultValue=0,ManagedAccess=Internal,GenerateAccessors,Validator=PositiveIntValidator */
 	const static int SelectionStartProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	PasswordBox ();
-	
 	//
 	// Overrides
 	//
@@ -606,11 +614,15 @@ class TextBoxView : public FrameworkElement {
 	void Paint (cairo_t *cr);
 	
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	TextBoxView ();
+
 	virtual ~TextBoxView ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
-	/* @GenerateCBinding,GeneratePInvoke */
-	TextBoxView ();
 	
 	//
 	// Overrides
diff --git a/src/textelement.h b/src/textelement.h
index 4e8bbb8..ef72097 100644
--- a/src/textelement.h
+++ b/src/textelement.h
@@ -49,8 +49,14 @@ class TextElement : public DependencyObject, public ITextAttributes {
 	static void downloader_complete (EventObject *sender, EventArgs *calldata, gpointer closure);
 	
  protected:
+	/* @GeneratePInvoke,GenerateCBinding,ManagedAccess=Protected */
+	TextElement ();
+	
 	virtual ~TextElement ();
 	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=FontFamily,DefaultValue=FontFamily(TEXTBLOCK_FONT_FAMILY),GenerateAccessors */
 	const static int FontFamilyProperty;
@@ -69,9 +75,6 @@ class TextElement : public DependencyObject, public ITextAttributes {
 	/* @PropertyType=TextDecorations,ManagedPropertyType=TextDecorationCollection,GenerateAccessors */
 	const static int TextDecorationsProperty;
 	
-	/* @GeneratePInvoke,GenerateCBinding,ManagedAccess=Protected */
-	TextElement ();
-	
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
 	virtual void OnSubPropertyChanged (DependencyProperty *prop, DependencyObject *obj, PropertyChangedEventArgs *subobj_args);
 	
@@ -128,16 +131,19 @@ class Inline : public TextElement {
 	bool autogen;
 	
  protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	Inline ();
+
 	virtual ~Inline () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
 	// internal properties to inherit the FontSource between inlines and textblocks
 	/* @PropertyType=FontSource,GenerateManagedDP=false,GenerateAccessors */
 	const static int FontSourceProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	Inline ();
-	
 	virtual bool PermitsMultipleParents () { return false; }
 	
 	void SetFontSource (FontSource *source);
@@ -158,18 +164,26 @@ class Inline : public TextElement {
 /* @Namespace=System.Windows.Documents */
 class LineBreak : public Inline {
  protected:
-	virtual ~LineBreak () {}
-	
- public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	LineBreak ();
+
+	virtual ~LineBreak () {}
+	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @ContentProperty="Text" */
 /* @Namespace=System.Windows.Documents */
 class Run : public Inline {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	Run ();
+	
 	virtual ~Run () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
 	/* @PropertyType=FlowDirection,DefaultValue=FlowDirectionLeftToRight,GenerateAccessors */
@@ -177,9 +191,6 @@ class Run : public Inline {
 	/* @PropertyType=string,ManagedFieldAccess=Internal,GenerateAccessors */
 	const static int TextProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	Run ();
-	
 	virtual bool Equals (Inline *item);
 	
 	//
@@ -206,15 +217,18 @@ class Run : public Inline {
 /* @Namespace=System.Windows.Documents */
 class Block : public TextElement {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	Block ();
+
 	virtual ~Block () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
 	/* @PropertyType=TextAlignment,DefaultValue=TextAlignmentLeft,GenerateAccessors */
 	const static int TextAlignmentProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	Block ();
-	
 	//
 	// Property Accessors
 	//
@@ -226,15 +240,18 @@ class Block : public TextElement {
 /* @ContentProperty=Inlines */
 class Paragraph : public Block {
  protected:
+	/* @GeneratePInvoke,GenerateCBinding */
+	Paragraph ();
+	
 	virtual ~Paragraph () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
 	/* @PropertyType=InlineCollection,AutoCreateValue,GenerateAccessors,ManagedSetterAccess=Private,ManagedFieldAccess=Internal */
 	const static int InlinesProperty;
 	
-	/* @GeneratePInvoke,GenerateCBinding */
-	Paragraph ();
-	
 	//
 	// Property Accessors
 	//
@@ -246,17 +263,20 @@ class Paragraph : public Block {
 /* @ContentProperty=Blocks */
 class Section : public Block {
  protected:
+	/* @GeneratePInvoke,GenerateCBinding */
+	Section ();
+	
 	virtual ~Section () {}
 	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=BlockCollection,AutoCreateValue,GenerateAccessors,ManagedSetterAccess=Private,ManagedFieldAccess=Internal*/
 	const static int BlocksProperty;
 	/* @PropertyType=bool,DefaultValue=true,GenerateAccessors,ManagedFieldAccess=Internal */
 	const static int HasTrailingParagraphBreakOnPasteProperty;
 	
-	/* @GeneratePInvoke,GenerateCBinding */
-	Section ();
-	
 	//
 	// Property Accessors
 	//
@@ -271,15 +291,18 @@ class Section : public Block {
 /* @ContentProperty=Inlines */
 class Span : public Inline {
  protected:
+	/* @GeneratePInvoke,GenerateCBinding */
+	Span ();
+
 	virtual ~Span () {}
 	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=InlineCollection,AutoCreateValue,GenerateAccessors,ManagedFieldAccess=Internal */
 	const static int InlinesProperty;
 	
-	/* @GeneratePInvoke,GenerateCBinding */
-	Span ();
-	
 	//
 	// Property Accessors
 	//
@@ -290,37 +313,49 @@ class Span : public Inline {
 /* @Namespace=System.Windows.Documents */
 class Bold : public Span {
  protected:
-	virtual ~Bold () {}
-	
- public:
 	/* @GeneratePInvoke,GenerateCBinding */
 	Bold ();
+
+	virtual ~Bold () {}
+	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Documents */
 class Italic : public Span {
  protected:
-	virtual ~Italic () {}
-	
- public:
 	/* @GeneratePInvoke,GenerateCBinding */
 	Italic ();
+	
+	virtual ~Italic () {}
+	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Documents */
 class Underline : public Span {
  protected:
-	virtual ~Underline () {}
-	
- public:
 	/* @GeneratePInvoke,GenerateCBinding */
 	Underline ();
+
+	virtual ~Underline () {}
+	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 /* @Namespace=System.Windows.Documents */
 class Hyperlink : public Span {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	Hyperlink ();
+	
 	virtual ~Hyperlink () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
 	/* @PropertyType=object */
@@ -336,9 +371,6 @@ class Hyperlink : public Span {
 	/* @PropertyType=string,DefaultValue=\"\" */
 	const static int TargetNameProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	Hyperlink ();
-	
 	//
 	// Property Accessors
 	//
@@ -353,15 +385,18 @@ class Hyperlink : public Span {
 /* @ContentProperty=Child */
 class InlineUIContainer : public Inline {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	InlineUIContainer ();
+	
 	virtual ~InlineUIContainer () {}
 	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+	
  public:
 	/* @PropertyType=UIElement,GenerateAccessors,ManagedFieldAccess=Internal */
 	const static int ChildProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	InlineUIContainer ();
-	
 	//
 	// Property Accessors
 	//
diff --git a/src/timeline.h b/src/timeline.h
index 0a78e42..af9e32a 100644
--- a/src/timeline.h
+++ b/src/timeline.h
@@ -108,7 +108,7 @@ class TimelineCollection : public DependencyObjectCollection {
 public:
  	/* @GenerateCBinding,GeneratePInvoke */
 	TimelineCollection ();
-	
+
 	virtual Type::Kind GetElementType() { return Type::TIMELINE; }
 
 protected:
@@ -169,7 +169,7 @@ public:
 	
  	/* @GenerateCBinding,GeneratePInvoke */
 	TimelineMarker ();
-	
+
 	//
 	// Property Accessors
 	//
@@ -191,9 +191,6 @@ protected:
 /* @ManagedEvents=Manual */
 class DispatcherTimer : public Timeline {
 public:
-	/* @GenerateCBinding,GeneratePInvoke,MainThread,Version=2 */
-	DispatcherTimer ();
-
 	/* @GenerateCBinding,GeneratePInvoke,Version=2 */
 	void Start ();
 
@@ -208,8 +205,16 @@ public:
 	virtual void TeardownClock ();
 
 protected:
+	/* @GenerateCBinding,GeneratePInvoke,MainThread,Version=2 */
+	DispatcherTimer ();
+
+	virtual ~DispatcherTimer() {}
+
 	virtual void OnClockCompleted ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
 private:
 	bool stopped;
 	bool started;
diff --git a/src/transform.h b/src/transform.h
index 238f6fa..f3a7372 100644
--- a/src/transform.h
+++ b/src/transform.h
@@ -24,17 +24,21 @@ class GeneralTransform : public DependencyObject {
 	cairo_matrix_t _matrix;
 	bool need_update;
 	
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
+	GeneralTransform () : DependencyObject (Type::GENERALTRANSFORM), need_update (true) { }
+	
 	virtual ~GeneralTransform () {};
 	
 	virtual void UpdateTransform ();
 	void MaybeUpdateTransform ();
-	
+
+	/* @SkipFactories */
 	GeneralTransform (Type::Kind object_type) : DependencyObject (object_type), need_update (true) { }
 
- public:
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Protected */
-	GeneralTransform () : DependencyObject (Type::GENERALTRANSFORM), need_update (true) { }
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
+ public:
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
 	
 	virtual void GetTransform (cairo_matrix_t *value);
@@ -52,21 +56,31 @@ class GeneralTransform : public DependencyObject {
 /* @Namespace=System.Windows.Media */
 class Transform : public GeneralTransform {
 protected:
+	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
+	Transform () : GeneralTransform (Type::TRANSFORM) { }
+
 	virtual ~Transform () {}
 
+	/* @SkipFactories */
 	Transform (Type::Kind object_type) : GeneralTransform (object_type) { }
-public:
-	/* @GenerateCBinding,GeneratePInvoke,ManagedAccess=Internal */
-	Transform () : GeneralTransform (Type::TRANSFORM) { }
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 };
 
 
 /* @Namespace=System.Windows.Media */
 class RotateTransform : public Transform {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	RotateTransform () { SetObjectType (Type::ROTATETRANSFORM); }
+
 	virtual ~RotateTransform () {}
 	virtual void UpdateTransform ();
 	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors */
 	const static int AngleProperty;
@@ -75,9 +89,6 @@ class RotateTransform : public Transform {
 	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors */
 	const static int CenterYProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	RotateTransform () { SetObjectType (Type::ROTATETRANSFORM); }
-	
 	//
 	// Property Accessors
 	//
@@ -94,12 +105,15 @@ class RotateTransform : public Transform {
 /* @Namespace=System.Windows.Media */
 class CompositeTransform : public Transform {
 protected:
-	virtual ~CompositeTransform () {}
-
-public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	CompositeTransform ();
 
+	virtual ~CompositeTransform () {}
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
+public:
 	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors */
 	const static int CenterXProperty;
 	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors */
@@ -154,8 +168,14 @@ public:
 /* @Namespace=System.Windows.Media */
 class TranslateTransform : public Transform {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	TranslateTransform () { SetObjectType (Type::TRANSLATETRANSFORM); }
+
 	virtual ~TranslateTransform () { }
 	virtual void UpdateTransform ();
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
 	
  public:
 	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors */
@@ -163,9 +183,6 @@ class TranslateTransform : public Transform {
 	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors */
 	const static int YProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	TranslateTransform () { SetObjectType (Type::TRANSLATETRANSFORM); }
-	
 	//
 	// Property Accessors
 	//
@@ -180,9 +197,15 @@ class TranslateTransform : public Transform {
 /* @Namespace=System.Windows.Media */
 class ScaleTransform : public Transform {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	ScaleTransform () { SetObjectType (Type::SCALETRANSFORM); }
+	
 	virtual ~ScaleTransform () {}
 	virtual void UpdateTransform ();
 
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors */
 	const static int CenterXProperty;
@@ -193,9 +216,6 @@ class ScaleTransform : public Transform {
 	/* @PropertyType=double,DefaultValue=1.0,GenerateAccessors */
 	const static int ScaleYProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	ScaleTransform () { SetObjectType (Type::SCALETRANSFORM); }
-	
 	//
 	// Property Accessors
 	//
@@ -216,9 +236,15 @@ class ScaleTransform : public Transform {
 /* @Namespace=System.Windows.Media */
 class SkewTransform : public Transform {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	SkewTransform () { SetObjectType (Type::SKEWTRANSFORM); }
+
 	virtual ~SkewTransform () {}
 	virtual void UpdateTransform ();
 	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors */
 	const static int AngleXProperty;
@@ -229,9 +255,6 @@ class SkewTransform : public Transform {
 	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors */
 	const static int CenterYProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	SkewTransform () { SetObjectType (Type::SKEWTRANSFORM); }
-	
 	//
 	// Property Accessors
 	//
@@ -257,7 +280,7 @@ class Matrix : public DependencyObject {
 	
  protected:
 	virtual ~Matrix () {}
-	
+
  public:
 	/* @PropertyType=double,DefaultValue=1.0,GenerateAccessors */
 	const static int M11Property;
@@ -271,9 +294,11 @@ class Matrix : public DependencyObject {
 	const static int OffsetXProperty;
 	/* @PropertyType=double,DefaultValue=0.0,GenerateAccessors */
 	const static int OffsetYProperty;
-	
-	/* @GenerateCBinding,GeneratePInvoke */
+
+	/* @GenerateCBinding,GeneratePInvoke,SkipFactories */
 	Matrix ();
+
+	/* @SkipFactories */
 	Matrix (cairo_matrix_t *m);
 	
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
@@ -321,17 +346,20 @@ class UnmanagedMatrix : public Matrix {
 /* @Namespace=System.Windows.Media */
 class MatrixTransform : public Transform {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	MatrixTransform () { SetObjectType (Type::MATRIXTRANSFORM); }
+	
 	virtual ~MatrixTransform () {}
 	
 	virtual void UpdateTransform ();
-	
+
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
  public:
 	/* @PropertyType=Matrix,AutoCreateValue,GenerateAccessors */
 	const static int MatrixProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	MatrixTransform () { SetObjectType (Type::MATRIXTRANSFORM); }
-	
 	virtual void OnSubPropertyChanged (DependencyProperty *prop, DependencyObject *obj, PropertyChangedEventArgs *subobj_args);
 	
 	//
@@ -345,12 +373,15 @@ class MatrixTransform : public Transform {
 /* @Namespace=System.Windows.Media */
 class TransformCollection : public DependencyObjectCollection {
  protected:
-	virtual ~TransformCollection () {}
-	
- public:
 	/* @GenerateCBinding,GeneratePInvoke */
 	TransformCollection () { SetObjectType (Type::TRANSFORM_COLLECTION); }
 	
+	virtual ~TransformCollection () {}
+	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+
+ public:
 	virtual Type::Kind GetElementType () { return Type::TRANSFORM; }
 };
 
@@ -359,17 +390,20 @@ class TransformCollection : public DependencyObjectCollection {
 /* @Namespace=System.Windows.Media */
 class TransformGroup : public Transform {
  protected:
+	/* @GenerateCBinding,GeneratePInvoke */
+	TransformGroup () : Transform (Type::TRANSFORMGROUP) { }
+	
 	virtual ~TransformGroup () {}
 	
 	virtual void UpdateTransform ();
 	
+	friend class MoonUnmanagedFactory;
+	friend class MoonManagedFactory;
+	
  public:
 	/* @PropertyType=TransformCollection,AutoCreateValue,HiddenDefaultValue,GenerateAccessors */
 	const static int ChildrenProperty;
 	
-	/* @GenerateCBinding,GeneratePInvoke */
-	TransformGroup () : Transform (Type::TRANSFORMGROUP) { }
-	
 	virtual void OnCollectionItemChanged (Collection *col, DependencyObject *obj, PropertyChangedEventArgs *args);
 	virtual void OnCollectionChanged (Collection *col, CollectionChangedEventArgs *args);
 	virtual void OnPropertyChanged (PropertyChangedEventArgs *args, MoonError *error);
diff --git a/src/type.h.in b/src/type.h.in
index f7ef7f0..2ca4c8d 100644
--- a/src/type.h.in
+++ b/src/type.h.in
@@ -120,7 +120,6 @@ private:
 	void RegisterNativeProperties ();
 	
 public:
-	/* @GenerateCBinding,GeneratePInvoke,Version=2.0 */
 	Types ();
 	~Types ();
 
diff --git a/src/uielement.cpp b/src/uielement.cpp
index 1f68213..d878a0e 100644
--- a/src/uielement.cpp
+++ b/src/uielement.cpp
@@ -32,6 +32,7 @@
 #include "provider.h"
 #include "effect.h"
 #include "projection.h"
+#include "factory.h"
 
 cairo_user_data_key_t uielement_xform_key;
 
@@ -86,12 +87,15 @@ UIElement::IsSubtreeLoaded (UIElement *element)
 void
 UIElement::Dispose()
 {
-	TriggerCollection *triggers = GetTriggers ();
+	Value *v = GetValueNoAutoCreate (TriggersProperty);
+	if (v && !v->IsNull) {
+		TriggerCollection *triggers = v->AsTriggerCollection ();
 	
-	if (triggers != NULL) {
-		int triggers_count = triggers->GetCount ();
-		for (int i = 0; i < triggers_count; i++)
-			triggers->GetValueAt (i)->AsEventTrigger ()->RemoveTarget (this);
+		if (triggers != NULL) {
+			int triggers_count = triggers->GetCount ();
+			for (int i = 0; i < triggers_count; i++)
+				triggers->GetValueAt (i)->AsEventTrigger ()->RemoveTarget (this);
+		}
 	}
 	
 	if (!IsDisposed ()) {
@@ -99,11 +103,8 @@ UIElement::Dispose()
 		while (UIElement *child = walker.Step ())
 			child->SetVisualParent (NULL);
 	}
-	
-	if (subtree_object) {
-		subtree_object->unref ();
-		subtree_object = NULL;
-	}
+
+	MOON_CLEAR_FIELD (subtree_object);
 
 	DependencyObject::Dispose();
 }
@@ -539,15 +540,12 @@ void
 UIElement::SetSubtreeObject (DependencyObject *value)
 {
 	if (subtree_object == value)
-	  return;
-
-	if (subtree_object)
-	  subtree_object->unref ();
+		return;
 
-	subtree_object = value;
+	MOON_CLEAR_FIELD (subtree_object);
 
-	if (subtree_object)
-	  subtree_object->ref ();
+	if (value != NULL)
+		MOON_SET_FIELD (subtree_object, value);
 }
 
 static bool
@@ -1132,7 +1130,7 @@ bool
 UIElement::EmitLostMouseCapture ()
 {
 	if (HasHandlers (LostMouseCaptureEvent)) {
-		MouseEventArgs *e = new MouseEventArgs ();
+		MouseEventArgs *e = MoonUnmanagedFactory::CreateMouseEventArgs ();
 		e->SetSource (this);
 		return Emit (LostMouseCaptureEvent, e);
 	}
@@ -1712,7 +1710,7 @@ UIElement::GetTransformToUIElementWithError (UIElement *to_element, MoonError *e
 
 	Matrix *matrix  = new Matrix (&result);
 
-	MatrixTransform *transform = new MatrixTransform ();
+	MatrixTransform *transform = MoonUnmanagedFactory::CreateMatrixTransform ();
 	transform->SetValue (MatrixTransform::MatrixProperty, matrix);
 	matrix->unref ();
 
diff --git a/src/uielement.h b/src/uielement.h
index 084b0f2..bbc98b8 100644
--- a/src/uielement.h
+++ b/src/uielement.h
@@ -43,6 +43,7 @@ typedef bool (*VisualTreeVisitor)(UIElement *el, gpointer data);
 /* @Namespace=System.Windows */
 class UIElement : public DependencyObject {
 public:
+	/* @SkipFactories */
 	UIElement ();
 	virtual void Dispose ();
 	
diff --git a/src/value.cpp b/src/value.cpp
index 8b3770a..594ad40 100644
--- a/src/value.cpp
+++ b/src/value.cpp
@@ -46,6 +46,9 @@
 
 static const int NullFlag = 1;
 static const int GCHandleFlag = 1 << 1;
+static const int NoUnrefFlag = 1 << 2;
+
+static const int EqualityMask = NullFlag | GCHandleFlag;
 
 Value*
 Value::CreateUnrefPtr (EventObject* dob)
@@ -90,6 +93,21 @@ Value::GetKind ()
 }
 
 bool
+Value::GetNeedUnref ()
+{
+	return (padding & NoUnrefFlag) == 0;
+}
+
+void
+Value::SetNeedUnref (bool needUnref)
+{
+	if (needUnref)
+		padding &= ~NoUnrefFlag;
+	else
+		padding |= NoUnrefFlag;
+}
+
+bool
 Value::GetIsManaged ()
 {
 	return (padding & GCHandleFlag) == GCHandleFlag;
@@ -668,7 +686,7 @@ Value::FreeValue ()
 		ManagedTypeInfo::Free (u.type_info);
 		break;
 	default:
-		if (Is (Deployment::GetCurrent (), Type::EVENTOBJECT) && u.dependency_object) {
+		if (Is (Deployment::GetCurrent (), Type::EVENTOBJECT) && u.dependency_object && GetNeedUnref ()) {
 			LOG_VALUE ("unref Value [%p] %s\n", this, GetName());
 			u.dependency_object->unref ();
 		}
@@ -742,7 +760,7 @@ Value::operator== (const Value &v) const
 	if (k != v.k)
 		return false;
 	
-	if (padding != v.padding)
+	if ((padding & EqualityMask) != (v.padding & EqualityMask))
 		return false;
 
 	if ((padding & GCHandleFlag) == GCHandleFlag) {
diff --git a/src/value.h.in b/src/value.h.in
index ddf8397..b968b7f 100644
--- a/src/value.h.in
+++ b/src/value.h.in
@@ -126,6 +126,9 @@ public:
 	bool GetIsNull ();
 	void SetIsNull (bool isNull);
 
+	bool GetNeedUnref ();
+	void SetNeedUnref (bool needUnref);
+
 	bool operator!= (const Value &v) const;
 	bool operator== (const Value &v) const;
 
diff --git a/src/xaml.cpp b/src/xaml.cpp
index eff6628..243fbab 100644
--- a/src/xaml.cpp
+++ b/src/xaml.cpp
@@ -55,6 +55,7 @@
 #include "managedtypeinfo.h"
 #include "bitmapcache.h"
 #include "usercontrol.h"
+#include "factory.h"
 
 class XamlElementInfo;
 class XamlElementInstance;
@@ -3668,7 +3669,7 @@ value_from_str_with_parser (XamlParserInfo *p, Type::Kind type, const char *prop
 		if (c == NULL)
 			break;
 
-		SolidColorBrush *scb = new SolidColorBrush ();
+		SolidColorBrush *scb = MoonUnmanagedFactory::CreateSolidColorBrush ();
 		
 		scb->SetColor (c);
 		delete c;
@@ -3709,7 +3710,7 @@ value_from_str_with_parser (XamlParserInfo *p, Type::Kind type, const char *prop
 	}
 	case Type::CACHEMODE: {
 		if (!strcmp (s, "BitmapCache")) {
-			BitmapCache *bc = new BitmapCache ();
+			BitmapCache *bc = MoonUnmanagedFactory::CreateBitmapCache ();
 			*v = Value::CreateUnrefPtr (bc);
 			*v_set = true;
 		}
@@ -3729,7 +3730,7 @@ value_from_str_with_parser (XamlParserInfo *p, Type::Kind type, const char *prop
 	case Type::DOUBLE_COLLECTION: {
 		DoubleCollection *doubles = DoubleCollection::FromStr (s);
 		if (!doubles) {
-			*v = Value::CreateUnrefPtr (new DoubleCollection ());
+			*v = Value::CreateUnrefPtr (MoonUnmanagedFactory::CreateDoubleCollection ());
 			*v_set = true;
 			break;
 		}
@@ -3741,7 +3742,7 @@ value_from_str_with_parser (XamlParserInfo *p, Type::Kind type, const char *prop
 	case Type::POINT_COLLECTION: {
 		PointCollection *points = PointCollection::FromStr (s);
 		if (!points) {
-			*v = Value::CreateUnrefPtr (new PointCollection ());
+			*v = Value::CreateUnrefPtr (MoonUnmanagedFactory::CreatePointCollection ());
 			*v_set = true;
 			break;
 		}
@@ -3758,8 +3759,8 @@ value_from_str_with_parser (XamlParserInfo *p, Type::Kind type, const char *prop
 		if (!mv)
 			break;
 
-		TransformGroup *tg = new TransformGroup ();
-		MatrixTransform *t = new MatrixTransform ();
+		TransformGroup *tg = MoonUnmanagedFactory::CreateTransformGroup ();
+		MatrixTransform *t = MoonUnmanagedFactory::CreateMatrixTransform ();
 		t->SetValue (MatrixTransform::MatrixProperty, Value (mv));
 
 		tg->GetChildren()->Add (t);
@@ -3789,7 +3790,7 @@ value_from_str_with_parser (XamlParserInfo *p, Type::Kind type, const char *prop
 		if (!mv)
 			break;
 
-		MatrixTransform *t = new MatrixTransform ();
+		MatrixTransform *t = MoonUnmanagedFactory::CreateMatrixTransform ();
 		t->SetValue (MatrixTransform::MatrixProperty, Value (mv));
 
 		*v = new Value (t);
@@ -3897,7 +3898,7 @@ value_from_str_with_parser (XamlParserInfo *p, Type::Kind type, const char *prop
 		if (!uri.Parse (s))
 			break;
 
-		BitmapImage *bi = new BitmapImage ();
+		BitmapImage *bi = MoonUnmanagedFactory::CreateBitmapImage ();
 
 		bi->SetUriSource (&uri);
 
@@ -4090,11 +4091,11 @@ XamlElementInstance::TrySetContentProperty (XamlParserInfo *p, const char *value
 				g_strchug (p->cdata->str);
 		}
 
-		Run *run = new Run ();
+		Run *run = MoonUnmanagedFactory::CreateRun ();
 		run->SetText (p->cdata->str);
 		
 		if (!inlines) {
-			inlines = new InlineCollection ();
+			inlines = MoonUnmanagedFactory::CreateInlineCollection ();
 			textblock->SetInlines (inlines);
 			inlines->unref ();
 		}
diff --git a/test/2.0/HelloWorld/Page.xaml b/test/2.0/HelloWorld/Page.xaml
index 5c9cea1..209a171 100644
--- a/test/2.0/HelloWorld/Page.xaml
+++ b/test/2.0/HelloWorld/Page.xaml
@@ -3,5 +3,5 @@
 	     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
 	     Width="400" Height="300">
 
-	     <TextBlock Text="Hello"/>
+	     <Button Content="Hello"/>
 </UserControl>
diff --git a/test/effect-test.cpp b/test/effect-test.cpp
index bda3ddb..9242676 100644
--- a/test/effect-test.cpp
+++ b/test/effect-test.cpp
@@ -4,6 +4,7 @@
 #include <gtk/gtk.h>
 #include "runtime.h"
 #include "effect.h"
+#include "factory.h"
 
 class CustomEffect : public ShaderEffect {};
 
@@ -38,7 +39,7 @@ main (int argc, char **argv)
 					    width, height);
 
 	effect = new CustomEffect ();
-	shader = new PixelShader ();
+	shader = MoonUnmanagedFactory::CreatePixelShader ();
 
 	shader->SetTokensFromPath (argv[1]);
 	effect->SetPixelShader (shader);