Index: Test/System.Data/DataSetInferXmlSchemaTest.cs
===================================================================
--- Test/System.Data/DataSetInferXmlSchemaTest.cs	(revision 72737)
+++ Test/System.Data/DataSetInferXmlSchemaTest.cs	(working copy)
@@ -324,9 +324,17 @@
 			DataSet ds = GetDataSet (xml11, null);
 			AssertDataSet ("ds", ds, "NewDataSet", 1, 0);
 			DataTable dt = ds.Tables [0];
+#if NET_2_0
+			AssertDataTable ("dt", dt, "root", 1, 0, 0, 0, 0, 0);
+#else
 			AssertDataTable ("dt", dt, "root", 2, 0, 0, 0, 0, 0);
+#endif
 			AssertDataColumn ("element", dt.Columns [0], "child_after_significant_space", true, false, 0, 1, "child_after_significant_space", MappingType.Element, typeof (string), DBNull.Value, String.Empty, -1, String.Empty, 0, String.Empty, false, false);
+#if NET_2_0
+			Assert.AreEqual (1, dt.Columns.Count, "xml:space is not threated as column");
+#else
 			AssertDataColumn ("xml:space", dt.Columns [1], "space", true, false, 0, 1, "space", MappingType.Attribute, typeof (string), DBNull.Value, String.Empty, -1, "http://www.w3.org/XML/1998/namespace", 1, "xml", false, false);
+#endif
 		}
 
 		[Test]
Index: Test/System.Data/DataSetReadXmlTest.cs
===================================================================
--- Test/System.Data/DataSetReadXmlTest.cs	(revision 72737)
+++ Test/System.Data/DataSetReadXmlTest.cs	(working copy)
@@ -669,9 +669,6 @@
 		}
 
 		[Test] // bug #80045
-#if NET_2_0
-		[Category ("NotWorking")]
-#endif
 		public void ColumnOrder ()
 		{
 			string xml = "<?xml version=\"1.0\" standalone=\"yes\"?>" +
@@ -712,7 +709,9 @@
 		}
 
 		[Test] // bug #80048
+#if NET_1_1
 		[Category ("NotWorking")]
+#endif
 		public void XmlSpace ()
 		{
 			string xml = "<?xml version=\"1.0\" standalone=\"yes\"?>" +
Index: System.Data/XmlDiffLoader.cs
===================================================================
--- System.Data/XmlDiffLoader.cs	(revision 72737)
+++ System.Data/XmlDiffLoader.cs	(working copy)
@@ -229,6 +229,9 @@
 			do {
 				switch (reader.NamespaceURI) {
 				case XmlConstants.XmlnsNS:
+#if NET_2_0
+				case XmlConstants.XmlNS:
+#endif
 				case XmlConstants.DiffgrNamespace:
 				case XmlConstants.MsdataNamespace:
 				case XmlConstants.MspropNamespace:
Index: System.Data/XmlDataReader.cs
===================================================================
--- System.Data/XmlDataReader.cs	(revision 72737)
+++ System.Data/XmlDataReader.cs	(working copy)
@@ -193,7 +193,11 @@
 			// Consume attributes
 			if (reader.MoveToFirstAttribute ()) {
 				do {
-					if (reader.NamespaceURI == XmlConstants.XmlnsNS)
+					if (reader.NamespaceURI == XmlConstants.XmlnsNS
+#if NET_2_0
+					|| reader.NamespaceURI == XmlConstants.XmlNS
+#endif
+						)
 						continue;
 					ReadElementAttribute (row);
 				} while (reader.MoveToNextAttribute ());
Index: System.Data/XmlConstants.cs
===================================================================
--- System.Data/XmlConstants.cs	(revision 72737)
+++ System.Data/XmlConstants.cs	(working copy)
@@ -49,6 +49,9 @@
 	public const string SchemaNamespace = "http://www.w3.org/2001/XMLSchema";
 	
 	public const string XmlnsNS = "http://www.w3.org/2000/xmlns/";
+#if NET_2_0
+	public const string XmlNS = "http://www.w3.org/XML/1998/namespace";
+#endif
 	
 	//xs elements and values 
 	//TODO - these must exist somwhere else???
Index: System.Data/XmlDataInferenceLoader.cs
===================================================================
--- System.Data/XmlDataInferenceLoader.cs	(revision 72737)
+++ System.Data/XmlDataInferenceLoader.cs	(working copy)
@@ -76,6 +76,9 @@
 		public DataColumn SimpleContent;
 		public DataColumn PrimaryKey;
 		public DataColumn ReferenceKey;
+#if NET_2_0
+		public int lastElementIndex = -1;
+#endif
 
 		// Parent TableMapping
 		public TableMapping ParentTable;
@@ -255,6 +258,9 @@
 			if (col != null) {
 				if (col.ColumnMapping != MappingType.Element)
 					throw new DataException (String.Format ("Column {0} is already mapped to {1}.", localName, col.ColumnMapping));
+#if NET_2_0
+				table.lastElementIndex = table.Elements.IndexOf (col);
+#endif
 				return;
 			}
 			if (table.ChildTables [localName] != null)
@@ -266,7 +272,11 @@
 			col = new DataColumn (localName, typeof (string));
 			col.Namespace = el.NamespaceURI;
 			col.Prefix = el.Prefix;
+#if NET_2_0
+			table.Elements.Insert (++table.lastElementIndex, col);
+#else
 			table.Elements.Add (col);
+#endif
 		}
 
 		private void CheckExtraneousElementColumn (TableMapping parentTable, XmlElement el)
@@ -347,7 +357,11 @@
 			bool isElementRepeated = false;
 
 			foreach (XmlAttribute attr in el.Attributes) {
-				if (attr.NamespaceURI == XmlConstants.XmlnsNS)
+				if (attr.NamespaceURI == XmlConstants.XmlnsNS
+#if NET_2_0
+					|| attr.NamespaceURI == XmlConstants.XmlNS
+#endif
+					)
 					continue;
 				if (ignoredNamespaces != null &&
 					ignoredNamespaces.Contains (attr.NamespaceURI))
@@ -485,7 +499,11 @@
 			}
 
 			foreach (XmlAttribute attr in el.Attributes) {
-				if (attr.NamespaceURI == XmlConstants.XmlnsNS)
+				if (attr.NamespaceURI == XmlConstants.XmlnsNS 
+#if NET_2_0
+					|| attr.NamespaceURI == XmlConstants.XmlNS
+#endif
+					)
 					continue;
 				if (ignoredNamespaces != null && ignoredNamespaces.Contains (attr.NamespaceURI))
 					continue;
@@ -524,7 +542,11 @@
 			ArrayList ignoredNamespaces)
 		{
 			foreach (XmlAttribute attr in top.Attributes) {
-				if (attr.NamespaceURI == XmlConstants.XmlnsNS)
+				if (attr.NamespaceURI == XmlConstants.XmlnsNS
+#if NET_2_0
+					|| attr.NamespaceURI == XmlConstants.XmlNS
+#endif
+					)
 					continue;
 				if (ignoredNamespaces != null &&
 					ignoredNamespaces.Contains (attr.NamespaceURI))
@@ -551,7 +573,11 @@
 		private bool IsPossibleColumnElement (XmlElement el)
 		{
 			foreach (XmlAttribute attr in el.Attributes) {
-				if (attr.NamespaceURI == XmlConstants.XmlnsNS)
+				if (attr.NamespaceURI == XmlConstants.XmlnsNS
+#if NET_2_0
+					|| attr.NamespaceURI == XmlConstants.XmlNS
+#endif
+					)
 					continue;
 				return false;
 			}
