Index: System.Web.Configuration_2.0/ChangeLog
===================================================================
--- System.Web.Configuration_2.0/ChangeLog	(revision 72112)
+++ System.Web.Configuration_2.0/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2007-02-02  Marek Habersack  <grendello@gmail.com>
+
+	* TagPrefixCollection.cs: Add the CollectionType parameter.
+	Get rid of unnecessary interface references in the class declaration.
+	GetElementKey should return Source which should be unique, unlike TagPrefix.
+
 2007-01-04  Konstantin Triger <kostat@mainsoft.com>
 
 	* ProfileSection.cs: Ensure enabled = true by default; cleanup.
Index: System.Web.Configuration_2.0/TagPrefixCollection.cs
===================================================================
--- System.Web.Configuration_2.0/TagPrefixCollection.cs	(revision 72112)
+++ System.Web.Configuration_2.0/TagPrefixCollection.cs	(working copy)
@@ -36,8 +36,8 @@
 
 namespace System.Web.Configuration
 {
-	[ConfigurationCollection (typeof (TagPrefixInfo))]
-	public sealed class TagPrefixCollection : ConfigurationElementCollection, ICollection, IEnumerable
+	[ConfigurationCollection (typeof (TagPrefixInfo), CollectionType = ConfigurationElementCollectionType.AddRemoveClearMap)]
+	public sealed class TagPrefixCollection : ConfigurationElementCollection
 	{
 		static ConfigurationPropertyCollection properties;
 
@@ -67,7 +67,7 @@
 
 		protected override object GetElementKey (ConfigurationElement element)
 		{
-			return ((TagPrefixInfo)element).TagPrefix;
+			return ((TagPrefixInfo)element).Source;
 		}
 
 		public void Remove (TagPrefixInfo tagPrefixInformation)
Index: System.Web/ChangeLog
===================================================================
--- System.Web/ChangeLog	(revision 72112)
+++ System.Web/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2007-02-02  Marek Habersack  <grendello@gmail.com>
+
+	* HttpApplicationFactory.cs: make code a bit more compact.
+
 2007-01-30  Vladimir Krasnov  <vladimirk@mainsoft.com>
 
 	* HttpResponse.cs: fixed TARGET_J2EE part of Redirect for portlet
Index: System.Web/HttpApplicationFactory.cs
===================================================================
--- System.Web/HttpApplicationFactory.cs	(revision 72112)
+++ System.Web/HttpApplicationFactory.cs	(working copy)
@@ -351,12 +351,14 @@
 				try {
 #endif
 					string physical_app_path = context.Request.PhysicalApplicationPath;
-					string app_file;
+					string app_file = null;
 				
 					app_file = Path.Combine (physical_app_path, "Global.asax");
-					if (!File.Exists (app_file))
+					if (!File.Exists (app_file)) {
 						app_file = Path.Combine (physical_app_path, "global.asax");
-
+						if (!File.Exists (app_file))
+							app_file = null;
+					}
 			
 #if !NET_2_0
 					WebConfigurationSettings.Init (context);
@@ -375,7 +377,7 @@
 					acc.Compile ();
 #endif
 
-					if (File.Exists (app_file)) {
+					if (app_file != null) {
 #if TARGET_J2EE
 						app_type = System.Web.J2EE.PageMapper.GetObjectType(app_file);
 #else
@@ -390,10 +392,7 @@
 						app_state = new HttpApplicationState ();
 					}
 
-					app_file = "Global.asax";
-					if (!File.Exists(Path.Combine(physical_app_path, app_file)))
-						app_file =  "global.asax";
-
+					if (app_file != null)
 					WatchLocationForRestart(app_file);
 					    
 					if (File.Exists(Path.Combine(physical_app_path, "Web.config")))
Index: System.Web.UI/ChangeLog
===================================================================
--- System.Web.UI/ChangeLog	(revision 72159)
+++ System.Web.UI/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2007-02-02  Marek Habersack  <grendello@gmail.com>
+
+	* TemplateParser.cs: Do not register controls here.
+
 2007-02-02  Adar Wesley <adarw@mainsoft.com>
 
 	* Control.cs: Changed UniqueId implementation to have '$' and not ':'
Index: System.Web.UI/TemplateParser.cs
===================================================================
--- System.Web.UI/TemplateParser.cs	(revision 72159)
+++ System.Web.UI/TemplateParser.cs	(working copy)
@@ -153,24 +153,6 @@
 			foreach (NamespaceInfo nsi in namespaces)
 				imports.Add (nsi.Namespace);
 		}
-		
-		internal void RegisterConfigControls ()
-		{
-			PagesSection pages = WebConfigurationManager.GetSection ("system.web/pages") as PagesSection;
-			if (pages == null)
-				return;
-
-			TagPrefixCollection controls = pages.Controls;
-			if (controls == null || controls.Count == 0)
-				return;
-
-			foreach (TagPrefixInfo tpi in controls) {
-				if (!String.IsNullOrEmpty (tpi.TagName))
-					RegisterCustomControl (tpi.TagPrefix, tpi.TagName, tpi.Source);
-				else if (!String.IsNullOrEmpty (tpi.Namespace))
-					RegisterNamespace (tpi.TagPrefix, tpi.Namespace, tpi.Assembly);
-			}
-		}
 #endif
 		
 		internal void RegisterCustomControl (string tagPrefix, string tagName, string src)
Index: System.Web.Compilation/AspComponentFoundry.cs
===================================================================
--- System.Web.Compilation/AspComponentFoundry.cs	(revision 72112)
+++ System.Web.Compilation/AspComponentFoundry.cs	(working copy)
@@ -32,6 +32,13 @@
 using System.IO;
 using System.Reflection;
 
+#if NET_2_0
+using System.Collections.Generic;
+using System.Web;
+using System.Web.Configuration;
+using System.Web.UI;
+#endif
+
 namespace System.Web.Compilation
 {
 	internal class AspComponentFoundry
@@ -50,6 +57,10 @@
 			Assembly sw = typeof (AspComponentFoundry).Assembly;
 			RegisterFoundry ("asp", sw, "System.Web.UI.WebControls");
 			RegisterFoundry ("", "object", typeof (System.Web.UI.ObjectTag));
+
+#if NET_2_0
+			RegisterConfigControls ();
+#endif
 		}
 
 		public Type GetComponentType (string foundryName, string tag)
@@ -77,6 +88,62 @@
 			InternalRegister (foundryName, foundry);
 		}
 
+#if NET_2_0
+		public void RegisterFoundry (string foundryName,
+					     string tagName,
+					     string source)
+		{
+			TagNameFoundry foundry = new TagNameFoundry (tagName, source);
+			InternalRegister (foundryName, foundry);
+		}
+		
+		// Look up the controls/namespaces defined in the config
+		// file(s), resolve the assemblies but do not compile the types.
+		void RegisterConfigControls ()
+		{
+			PagesSection pages = WebConfigurationManager.GetSection ("system.web/pages") as PagesSection;
+                        if (pages == null)
+                                return;
+
+                        TagPrefixCollection controls = pages.Controls;
+                        if (controls == null || controls.Count == 0)
+                                return;
+
+			Dictionary <string, Assembly> assemblyCache = new Dictionary <string, Assembly> ();
+                        foreach (TagPrefixInfo tpi in controls) {
+                                if (!String.IsNullOrEmpty (tpi.TagName))
+                                        RegisterFoundry (tpi.TagPrefix, tpi.TagName, tpi.Source);
+                                else if (!String.IsNullOrEmpty (tpi.Namespace))
+					RegisterFoundry (tpi.TagPrefix, GetAssemblyByName (assemblyCache, tpi.Assembly), tpi.Namespace);
+                        }
+		}
+
+		Assembly GetAssemblyByName (Dictionary <string, Assembly> cache, string name)
+		{
+			if (cache.ContainsKey (name))
+				return cache [name];
+
+			Assembly assembly = null;
+			Exception error = null;
+			if (name.IndexOf (',') != -1) {
+				try {
+					assembly = Assembly.Load (name);
+				} catch (Exception e) { error = e; }
+			}
+
+			if (assembly == null) {
+				try {
+					assembly = Assembly.LoadWithPartialName (name);
+				} catch (Exception e) { error = e; }
+			}
+			
+			if (assembly == null)
+				throw new HttpException ("Assembly " + name + " not found", error);
+
+			return assembly;
+		}
+#endif
+		
 		void InternalRegister (string foundryName, Foundry foundry)
 		{
 			object f = foundries [foundryName];
@@ -109,6 +176,16 @@
 			string tagName;
 			Type type;
 
+#if NET_2_0
+			string source;
+
+			public TagNameFoundry (string tagName, string source)
+			{
+				this.tagName = tagName;
+				this.source = source;
+			}
+#endif
+			
 			public TagNameFoundry (string tagName, Type type)
 			{
 				this.tagName = tagName;
@@ -120,7 +197,40 @@
 				if (0 != String.Compare (componentName, tagName, true))
 					return null;
 				
+				return LoadType ();
+			}
+
+			Type LoadType ()
+			{
+#if NET_2_0
+				if (type != null)
+					return type;
+
+				HttpContext context = HttpContext.Current;
+				string vpath;
+				string realpath;
+				
+				if (VirtualPathUtility.IsAppRelative (source)) {
+					vpath = source;
+					realpath = context.Request.MapPath (source);
+				} else {
+					vpath = VirtualPathUtility.ToAppRelative (source);
+					realpath = source;
+				}
+				
+				if ((type = CachingCompiler.GetTypeFromCache (realpath)) != null)
 				return type;
+				
+				ArrayList other_deps = new ArrayList ();
+                                type = UserControlParser.GetCompiledType (vpath, realpath, other_deps, context);
+				if (type != null) {
+					AspGenerator.AddTypeToCache (other_deps, realpath, type);
+					WebConfigurationManager.ExtraAssemblies.Add (type.Assembly.Location);
+				}
+				return type;
+#else
+				return type;
+#endif
 			}
 
 			public string TagName {
Index: System.Web.Compilation/ChangeLog
===================================================================
--- System.Web.Compilation/ChangeLog	(revision 72112)
+++ System.Web.Compilation/ChangeLog	(working copy)
@@ -1,3 +1,11 @@
+2007-02-02  Marek Habersack  <grendello@gmail.com>
+
+	* AspGenerator.cs: Move the cache insert code to a separate method, for
+	use from other places.
+
+	* AspComponentFoundry.cs: Register controls mentioned in web.config, but
+	defer their compilation to the moment when they are actually requested.
+
 2007-01-22  Marek Habersack  <grendello@gmail.com>
 
 	* ThemeDirectoryCompiler.cs: Make sure the code works for empty themes.
Index: System.Web.Compilation/AspGenerator.cs
===================================================================
--- System.Web.Compilation/AspGenerator.cs	(revision 72112)
+++ System.Web.Compilation/AspGenerator.cs	(working copy)
@@ -269,6 +269,12 @@
 			Parse (Path.GetFullPath (tparser.InputFile));
 		}
 
+		internal static void AddTypeToCache (ArrayList dependencies, string inputFile, Type type)
+		{
+			CacheDependency cd = new CacheDependency ((string[])dependencies.ToArray (typeof (string)));
+			HttpRuntime.Cache.InsertPrivate ("@@Type" + inputFile, type, cd);
+		}
+		
 		public Type GetCompiledType ()
 		{
 			Type type = (Type) HttpRuntime.Cache.Get ("@@Type" + tparser.InputFile);
@@ -277,18 +283,12 @@
 			}
 
 			isApplication = tparser.DefaultDirectiveName == "application";
-#if NET_2_0
-			tparser.RegisterConfigControls ();
-#endif
 			Parse ();
 
 			BaseCompiler compiler = GetCompilerFromType ();
 
 			type = compiler.GetCompiledType ();
-			CacheDependency cd = new CacheDependency ((string[])
-							tparser.Dependencies.ToArray (typeof (string)));
-
-			HttpRuntime.Cache.InsertPrivate ("@@Type" + tparser.InputFile, type, cd);
+			AddTypeToCache (tparser.Dependencies, tparser.InputFile, type);
 			return type;
 		}
 
