Index: System.Web.Compilation/AppResourcesCompiler.cs
===================================================================
--- System.Web.Compilation/AppResourcesCompiler.cs	(revision 72462)
+++ System.Web.Compilation/AppResourcesCompiler.cs	(working copy)
@@ -86,6 +86,7 @@
 									     "App_GlobalResources",
 									     "dll",
 									     OnCreateRandomFile) as string;
+
 			if (assemblyPath == null)
 				throw new ApplicationException ("Failed to create global resources assembly");
 			
@@ -365,6 +366,7 @@
 				classname = nsname;
 				nsname = "Resources";
 			} else {
+				if (!nsname.StartsWith ("Resources", StringComparison.InvariantCulture))
 				nsname = String.Format ("Resources.{0}", nsname);
 				classname = classname.Substring(1);
 			}
@@ -526,7 +528,7 @@
 		{
 			string path = arfi.Info.FullName;
 			string resource = Path.Combine (TempDirectory,
-							Path.GetFileNameWithoutExtension (path) + ".resources");
+							"Resources." + Path.GetFileNameWithoutExtension (path) + ".resources");
 			FileStream source = null, destination = null;
 			IResourceReader reader = null;
 			ResourceWriter writer = null;
Index: System.Web.Compilation/ResourceExpressionBuilder.cs
===================================================================
--- System.Web.Compilation/ResourceExpressionBuilder.cs	(revision 72462)
+++ System.Web.Compilation/ResourceExpressionBuilder.cs	(working copy)
@@ -48,7 +48,7 @@
 		public override object EvaluateExpression (object target, BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)
 		{
 			ResourceExpressionFields fields = parsedData as ResourceExpressionFields;
-			return HttpContext.GetGlobalResourceObject (fields.ClassKey, fields.ResourceKey);
+			return HttpContext.GetGlobalResourceObject ("Resources." + fields.ClassKey, fields.ResourceKey);
 		}
 
 		public override CodeExpression GetCodeExpression (BoundPropertyEntry entry, object parsedData, ExpressionBuilderContext context)
@@ -57,7 +57,7 @@
 			return new CodeMethodInvokeExpression (
 				new CodeThisReferenceExpression (),
 				"GetGlobalResourceObject",
-				new CodeExpression [] { new CodePrimitiveExpression (fields.ClassKey),
+				new CodeExpression [] { new CodePrimitiveExpression ("Resources." + fields.ClassKey),
 							new CodePrimitiveExpression (fields.ResourceKey) });
 		}
 
