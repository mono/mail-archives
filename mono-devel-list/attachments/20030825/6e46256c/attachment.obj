using System;
using System.Collections;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;



namespace Bug
{
	[Serializable]
	public class TestMember : ISerializable
	{
		public string Value1;
		public string Value2;
			
		public TestMember(string value1, string value2)
		{
			Value1 = value1;
			Value2 = value2;
		}
		
		protected TestMember(SerializationInfo info, StreamingContext context)
		{
			Console.WriteLine("Deserializing TestMember...");
			
			Value1 = info.GetString("Value1");
			Value2 = info.GetString("Value2");
			
			Console.WriteLine("Deserialized TestMember: Value1={0}, Value2={1}", Value1, Value2);
		}
		
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Console.WriteLine("Serializing TestMember: Value1={0}, Value2={1} ...", Value1, Value2);
			
			info.AddValue("Value1", Value1);
			info.AddValue("Value2", Value2);
			
			Console.WriteLine("TestMember serialized.");
		}
	}
	
	[Serializable]
	public class TestCollection : ISerializable
	{
		private ArrayList _members = new ArrayList();
			
		public TestCollection()
		{}
		
		public void Add(TestMember item)
		{
			_members.Add(item);
		}
		
		public int Count
		{
			get
			{
				return _members.Count;
			}
		}
		
		public TestMember this[int index]
		{
			get { return _members[index] as TestMember; }
		}
		
		
		protected TestCollection(SerializationInfo info, StreamingContext context)
		{
			string		key;
			TestMember	member;
			
			Console.WriteLine("Deserializing TestCollection...");
			
			int cnt = info.GetInt32("Count");
			
			for ( int i = 0; i < cnt; i++ )
			{
				key = "Member" + i.ToString();
				member = (TestMember)info.GetValue(key, typeof(TestMember));
		
				Console.WriteLine("{0} - New deserialized member: Value1={1}, Value2={2} ...", i, member.Value1, member.Value2);
				_members.Add(member);
			}
			
			Console.WriteLine("Deserialized TestCollection.");
		}
		
		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
		{
			Console.WriteLine("Serializing TestCollection...");
			
			info.AddValue("Count", _members.Count);
			
			int i = 0;
			string key;
			
			foreach ( TestMember member in _members )
			{
				key = "Member" + i.ToString();
				
				Console.WriteLine("{0} - Adding member: Value1={1}, Value2={2} ...", i, member.Value1, member.Value2);
				info.AddValue(key, member, typeof(TestMember));
				
				i++;
			}
			
			Console.WriteLine("TestCollection serialized.");
		}
	}
	
	public class MainClass
	{
		public static void Main()
		{
			try
			{
				TestCollection coll = new TestCollection();
				TestCollection coll2;
				BinaryFormatter bf = new BinaryFormatter();
			
				coll.Add(new TestMember("member1", "test1"));
				coll.Add(new TestMember("member2", "test2"));
				coll.Add(new TestMember("member3", "test3"));
				
				using ( MemoryStream memStream = new MemoryStream() )
				{
					Console.WriteLine("========== Serialization ==========");
					bf.Serialize(memStream, coll);
					
					memStream.Flush();
					memStream.Seek(0, SeekOrigin.Begin);
					
					Console.WriteLine("========== Deserialization ==========");
					
					coll2 = (TestCollection)bf.Deserialize(memStream);
					
					Console.WriteLine("========== Result ==========");
					
					for ( int i = 0; i < coll2.Count; i++ )
					{
						Console.WriteLine("{0}: Value1={1}, Value2={2}", i, coll2[i].Value1, coll2[i].Value2);
					}
				}
				
			}
			catch ( Exception ex )
			{
				Console.WriteLine("Exception caught: {0}", ex);
			}
		}
	}

}