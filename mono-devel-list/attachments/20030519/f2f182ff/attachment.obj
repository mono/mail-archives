Index: mono/io-layer/atomic.c
===================================================================
RCS file: /mono/mono/mono/io-layer/atomic.c,v
retrieving revision 1.4
diff -u -p -r1.4 atomic.c
--- mono/io-layer/atomic.c	8 Jun 2002 17:57:49 -0000	1.4
+++ mono/io-layer/atomic.c	19 May 2003 23:40:31 -0000
@@ -15,7 +15,9 @@
 #include "mono/io-layer/wapi.h"
 
 #ifndef WAPI_ATOMIC_ASM
+#ifdef __GNUC__
 #warning "Atomic functions are not atomic!"
+#endif
 
 static pthread_mutex_t spin;
 static mono_once_t spin_once=MONO_ONCE_INIT;
Index: mono/metadata/debug-mono-symfile.c
===================================================================
RCS file: /mono/mono/mono/metadata/debug-mono-symfile.c,v
retrieving revision 1.53
diff -u -p -r1.53 debug-mono-symfile.c
--- mono/metadata/debug-mono-symfile.c	4 May 2003 12:24:27 -0000	1.53
+++ mono/metadata/debug-mono-symfile.c	19 May 2003 23:40:31 -0000
@@ -54,13 +54,15 @@ load_symfile (MonoDebugHandle *handle, M
 	if (!ptr)
 		return FALSE;
 
-	magic = *((guint64 *) ptr)++;
+	magic = *((guint64 *) ptr);
+	ptr += sizeof(guint64);
 	if (magic != MONO_SYMBOL_FILE_MAGIC) {
 		g_warning ("Symbol file %s has is not a mono symbol file", handle->image_file);
 		return FALSE;
 	}
 
-	version = *((guint32 *) ptr)++;
+	version = *((guint32 *) ptr);
+	ptr += sizeof(guint32);
 	if (version != MONO_SYMBOL_FILE_VERSION) {
 		g_warning ("Symbol file %s has incorrect version "
 			   "(expected %d, got %ld)", handle->image_file,
@@ -162,8 +164,8 @@ mono_debug_close_mono_symbol_file (MonoS
 static gchar *
 read_string (const char *ptr)
 {
-	int len = *((guint32 *) ptr)++;
-
+	int len = *((guint32 *) ptr);
+	ptr += sizeof(guint32);
 	return g_filename_from_utf8 (ptr, len, NULL, NULL, NULL);
 }
 
Index: mono/metadata/decimal.c
===================================================================
RCS file: /mono/mono/mono/metadata/decimal.c,v
retrieving revision 1.11
diff -u -p -r1.11 decimal.c
--- mono/metadata/decimal.c	17 Jan 2003 23:06:38 -0000	1.11
+++ mono/metadata/decimal.c	19 May 2003 23:40:32 -0000
@@ -21,7 +21,11 @@
 #include <math.h>
 
 /* needed for building microsoft dll */
+#ifdef __GNUC__
 #define DECINLINE __inline
+#else
+#define DECINLINE
+#endif
 
 #define LIT_GUINT32(x) x
 #define LIT_GUINT64(x) x##L
Index: mono/metadata/marshal.c
===================================================================
RCS file: /mono/mono/mono/metadata/marshal.c,v
retrieving revision 1.98
diff -u -p -r1.98 marshal.c
--- mono/metadata/marshal.c	12 May 2003 16:01:05 -0000	1.98
+++ mono/metadata/marshal.c	19 May 2003 23:40:32 -0000
@@ -1316,6 +1316,8 @@ mono_remoting_wrapper (MonoMethod *metho
 		int count = sig->param_count;
 #ifdef _MSC_VER
 		gpointer* mparams = (gpointer*) _alloca(count*sizeof(gpointer));
+#elif !defined(__GNUC__)
+		gpointer* mparams = (gpointer*) alloca(count*sizeof(gpointer));
 #else
 		gpointer mparams[count];
 #endif
Index: mono/metadata/metadata.c
===================================================================
RCS file: /mono/mono/mono/metadata/metadata.c,v
retrieving revision 1.118
diff -u -p -r1.118 metadata.c
--- mono/metadata/metadata.c	26 Apr 2003 17:33:21 -0000	1.118
+++ mono/metadata/metadata.c	19 May 2003 23:40:32 -0000
@@ -1201,7 +1201,7 @@ mono_metadata_parse_type (MonoImage *m, 
 		while (mono_metadata_parse_custom_mod (m, NULL, tmp_ptr, &tmp_ptr))
 			count++;
 		if (count) {
-			type = g_malloc0 (sizeof (MonoType) + (count - MONO_ZERO_LEN_ARRAY) * sizeof (MonoCustomMod));
+			type = g_malloc0 (sizeof (MonoType) + ((gint32)count - MONO_ZERO_LEN_ARRAY) * sizeof (MonoCustomMod));
 			type->num_mods = count;
 			if (count > 64)
 				g_warning ("got more than 64 modifiers in type");
@@ -1292,7 +1292,7 @@ mono_metadata_signature_alloc (MonoImage
 	MonoMethodSignature *sig;
 
 	/* later we want to allocate signatures with mempools */
-	sig = g_malloc0 (sizeof (MonoMethodSignature) + (nparams - MONO_ZERO_LEN_ARRAY) * sizeof (MonoType*));
+	sig = g_malloc0 (sizeof (MonoMethodSignature) + ((gint32)nparams - MONO_ZERO_LEN_ARRAY) * sizeof (MonoType*));
 	sig->param_count = nparams;
 
 	return sig;
@@ -2109,7 +2109,8 @@ mono_metadata_packing_from_typedef (Mono
 }
 
 #ifndef __GNUC__
-#define __alignof__(a) sizeof(a)
+/*#define __alignof__(a) sizeof(a)*/
+#define __alignof__(type) G_STRUCT_OFFSET(struct { char c; type x; }, x)
 #endif
 
 /*
Index: mono/metadata/monitor.c
===================================================================
RCS file: /mono/mono/mono/metadata/monitor.c,v
retrieving revision 1.1
diff -u -p -r1.1 monitor.c
--- mono/metadata/monitor.c	11 Feb 2003 15:10:40 -0000	1.1
+++ mono/metadata/monitor.c	19 May 2003 23:40:32 -0000
@@ -315,7 +315,7 @@ void ves_icall_System_Threading_Monitor_
 {
 	MONO_ARCH_SAVE_REGS;
 
-	return(mono_monitor_exit (obj));
+	mono_monitor_exit (obj);
 }
 
 gboolean ves_icall_System_Threading_Monitor_Monitor_test_owner(MonoObject *obj)
Index: mono/metadata/mono-debug-debugger.c
===================================================================
RCS file: /mono/mono/mono/metadata/mono-debug-debugger.c,v
retrieving revision 1.8
diff -u -p -r1.8 mono-debug-debugger.c
--- mono/metadata/mono-debug-debugger.c	4 May 2003 16:17:43 -0000	1.8
+++ mono/metadata/mono-debug-debugger.c	19 May 2003 23:40:32 -0000
@@ -352,7 +352,8 @@ allocate_type_entry (MonoDebuggerSymbolT
 		retval = table->type_table_offset;
 		table->type_table_offset += size + 4;
 		data = ((guint8 *) table->current_type_table) + retval - table->type_table_start;
-		*((gint32 *) data)++ = size;
+		*(gint32 *) data = size;
+		data += sizeof(gint32);
 		*ptr = data;
 		return retval;
 	}
@@ -397,41 +398,49 @@ write_simple_type (MonoDebuggerSymbolTab
 	case MONO_TYPE_BOOLEAN:
 	case MONO_TYPE_I1:
 	case MONO_TYPE_U1:
-		*((gint32 *) ptr)++ = 1;
+		*((gint32 *) ptr) = 1;
+		ptr += sizeof(gint32);
 		break;
 
 	case MONO_TYPE_CHAR:
 	case MONO_TYPE_I2:
 	case MONO_TYPE_U2:
-		*((gint32 *) ptr)++ = 2;
+		*((gint32 *) ptr) = 2;
+		ptr += sizeof(gint32);
 		break;
 
 	case MONO_TYPE_I4:
 	case MONO_TYPE_U4:
 	case MONO_TYPE_R4:
-		*((gint32 *) ptr)++ = 4;
+		*((gint32 *) ptr) = 4;
+		ptr += sizeof(gint32);
 		break;
 
 	case MONO_TYPE_I8:
 	case MONO_TYPE_U8:
 	case MONO_TYPE_R8:
-		*((gint32 *) ptr)++ = 8;
+		*((gint32 *) ptr) = 8;
+		ptr += sizeof(gint32);
 		break;
 
 	case MONO_TYPE_I:
 	case MONO_TYPE_U:
-		*((gint32 *) ptr)++ = sizeof (void *);
+		*((gint32 *) ptr) = sizeof (void *);
+		ptr += sizeof(gint32);
 		break;
 
 	case MONO_TYPE_VOID:
-		*((gint32 *) ptr)++ = 0;
+		*((gint32 *) ptr) = 0;
+		ptr += sizeof(gint32);
 		break;
 
 	case MONO_TYPE_STRING: {
 		MonoString string;
 
-		*((gint32 *) ptr)++ = -8;
-		*((guint32 *) ptr)++ = sizeof (MonoString);
+		*((gint32 *) ptr) = -8;
+		ptr += sizeof(gint32);
+		*((guint32 *) ptr) = sizeof (MonoString);
+		ptr += sizeof(guint32);
 		*ptr++ = 1;
 		*ptr++ = (guint8*)&string.length - (guint8*)&string;
 		*ptr++ = sizeof (string.length);
@@ -576,13 +585,16 @@ write_type (MonoDebuggerSymbolTable *tab
 	case MONO_TYPE_SZARRAY: {
 		MonoArray array;
 
-		*((gint32 *) ptr)++ = -size;
-		*((guint32 *) ptr)++ = sizeof (MonoArray);
+		*((gint32 *) ptr) = -size;
+		ptr += sizeof(gint32);
+		*((guint32 *) ptr) = sizeof (MonoArray);
+		ptr += sizeof(guint32);
 		*ptr++ = 2;
 		*ptr++ = (guint8*)&array.max_length - (guint8*)&array;
 		*ptr++ = sizeof (array.max_length);
 		*ptr++ = (guint8*)&array.vector - (guint8*)&array;
-		*((guint32 *) ptr)++ = write_type (table, type->data.type);
+		*((guint32 *) ptr) = write_type (table, type->data.type);
+		ptr += sizeof(guint32);
 		break;
 	}
 
@@ -590,8 +602,10 @@ write_type (MonoDebuggerSymbolTable *tab
 		MonoArray array;
 		MonoArrayBounds bounds;
 
-		*((gint32 *) ptr)++ = -size;
-		*((guint32 *) ptr)++ = sizeof (MonoArray);
+		*((gint32 *) ptr) = -size;
+		ptr += sizeof(gint32);
+		*((guint32 *) ptr) = sizeof (MonoArray);
+		ptr += sizeof(guint32);
 		*ptr++ = 3;
 		*ptr++ = (guint8*)&array.max_length - (guint8*)&array;
 		*ptr++ = sizeof (array.max_length);
@@ -603,7 +617,8 @@ write_type (MonoDebuggerSymbolTable *tab
 		*ptr++ = sizeof (bounds.lower_bound);
 		*ptr++ = (guint8*)&bounds.length - (guint8*)&bounds;
 		*ptr++ = sizeof (bounds.length);
-		*((guint32 *) ptr)++ = write_type (table, type->data.array->type);
+		*((guint32 *) ptr) = write_type (table, type->data.array->type);
+		ptr += sizeof(guint32);
 		break;
 	}
 
@@ -613,41 +628,55 @@ write_type (MonoDebuggerSymbolTable *tab
 		int i, j;
 
 		if (klass->init_pending) {
-			*((gint32 *) ptr)++ = -1;
+			*((gint32 *) ptr) = -1;
+			ptr += sizeof(gint32);
 			break;
 		}
 
 		g_hash_table_insert (class_table, klass, GUINT_TO_POINTER (offset));
 
 		if (klass->enumtype) {
-			*((gint32 *) ptr)++ = -size;
-			*((guint32 *) ptr)++ = sizeof (MonoObject);
+			*((gint32 *) ptr) = -size;
+			ptr += sizeof(gint32);
+			*((guint32 *) ptr) = sizeof (MonoObject);
+			ptr += sizeof(guint32);
 			*ptr++ = 4;
-			*((guint32 *) ptr)++ = write_type (table, klass->enum_basetype);
+			*((guint32 *) ptr) = write_type (table, klass->enum_basetype);
+			ptr += sizeof(guint32);
 			break;
 		}
 
-		*((gint32 *) ptr)++ = -size;
+		*((gint32 *) ptr) = -size;
+		ptr += sizeof(guint32);
 
-		*((guint32 *) ptr)++ = klass->instance_size + base_offset;
+		*((guint32 *) ptr) = klass->instance_size + base_offset;
+		ptr += sizeof(guint32);
 		if (type->type == MONO_TYPE_OBJECT)
 			*ptr++ = 7;
 		else
 			*ptr++ = kind == MONO_TYPE_CLASS ? 6 : 5;
 		*ptr++ = kind == MONO_TYPE_CLASS;
-		*((guint32 *) ptr)++ = num_fields;
-		*((guint32 *) ptr)++ = num_fields * (4 + sizeof (gpointer));
-		*((guint32 *) ptr)++ = num_properties;
-		*((guint32 *) ptr)++ = num_properties * 3 * sizeof (gpointer);
-		*((guint32 *) ptr)++ = num_methods;
-		*((guint32 *) ptr)++ = num_methods * (4 + 2 * sizeof (gpointer)) +
+		*((guint32 *) ptr) = num_fields;
+		ptr += sizeof(guint32);
+		*((guint32 *) ptr) = num_fields * (4 + sizeof (gpointer));
+		ptr += sizeof(guint32);
+		*((guint32 *) ptr) = num_properties;
+		ptr += sizeof(guint32);
+		*((guint32 *) ptr) = num_properties * 3 * sizeof (gpointer);
+		ptr += sizeof(guint32);
+		*((guint32 *) ptr) = num_methods;
+		ptr += sizeof(guint32);
+		*((guint32 *) ptr) = num_methods * (4 + 2 * sizeof (gpointer)) +
 			num_params * sizeof (gpointer);
+		ptr += sizeof(guint32);
 		for (i = 0; i < klass->field.count; i++) {
 			if (klass->fields [i].type->attrs & FIELD_ATTRIBUTE_STATIC)
 				continue;
 
-			*((guint32 *) ptr)++ = klass->fields [i].offset + base_offset;
-			*((guint32 *) ptr)++ = write_type (table, klass->fields [i].type);
+			*((guint32 *) ptr) = klass->fields [i].offset + base_offset;
+			ptr += sizeof(guint32);
+			*((guint32 *) ptr) = write_type (table, klass->fields [i].type);
+			ptr += sizeof(guint32);
 		}
 
 		for (i = 0; i < klass->property.count; i++) {
@@ -655,34 +684,44 @@ write_type (MonoDebuggerSymbolTable *tab
 				continue;
 
 			if (klass->properties [i].get)
-				*((guint32 *) ptr)++ = write_type
+				*((guint32 *) ptr) = write_type
 					(table, klass->properties [i].get->signature->ret);
 			else
-				*((guint32 *) ptr)++ = 0;
-			*((gpointer *) ptr)++ = klass->properties [i].get;
-			*((gpointer *) ptr)++ = klass->properties [i].set;
+				*((guint32 *) ptr) = 0;
+			ptr += sizeof(guint32);
+			*((gpointer *) ptr) = klass->properties [i].get;
+			ptr += sizeof(gpointer);
+			*((gpointer *) ptr) = klass->properties [i].set;
+			ptr += sizeof(gpointer);
 		}
 
 		for (i = 0; i < methods->len; i++) {
 			MonoMethod *method = g_ptr_array_index (methods, i);
 
-			*((gpointer *) ptr)++ = method;
+			*((gpointer *) ptr) = method;
+			ptr += sizeof(gpointer);
 			if ((method->signature->ret) && (method->signature->ret->type != MONO_TYPE_VOID))
-				*((guint32 *) ptr)++ = write_type (table, method->signature->ret);
+				*((guint32 *) ptr) = write_type (table, method->signature->ret);
 			else
-				*((guint32 *) ptr)++ = 0;
-			*((guint32 *) ptr)++ = method->signature->param_count;
+				*((guint32 *) ptr) = 0;
+			ptr += sizeof(guint32);
+			*((guint32 *) ptr) = method->signature->param_count;
+			ptr += sizeof(guint32);
 			for (j = 0; j < method->signature->param_count; j++)
-				*((guint32 *) ptr)++ = write_type (table, method->signature->params [j]);
+			{
+				*((guint32 *) ptr) = write_type (table, method->signature->params [j]);
+				ptr += sizeof(guint32);
+			}
 		}
 
 		g_ptr_array_free (methods, FALSE);
 
 		if (kind == MONO_TYPE_CLASS) {
 			if (klass->parent)
-				*((guint32 *) ptr)++ = write_type (table, &klass->parent->this_arg);
+				*((guint32 *) ptr) = write_type (table, &klass->parent->this_arg);
 			else
-				*((guint32 *) ptr)++ = 0;
+				*((guint32 *) ptr) = 0;
+			ptr += sizeof(guint32);		
 		}
 
 		break;
@@ -691,7 +730,8 @@ write_type (MonoDebuggerSymbolTable *tab
 	default:
 		g_message (G_STRLOC ": %p - %x,%x,%x", type, type->attrs, kind, type->byref);
 
-		*((gint32 *) ptr)++ = -1;
+		*((gint32 *) ptr) = -1;
+		ptr += sizeof(gint32);
 		break;
 	}
 
Index: mono/metadata/mono-debug.c
===================================================================
RCS file: /mono/mono/mono/metadata/mono-debug.c,v
retrieving revision 1.7
diff -u -p -r1.7 mono-debug.c
--- mono/metadata/mono-debug.c	4 May 2003 16:39:04 -0000	1.7
+++ mono/metadata/mono-debug.c	19 May 2003 23:40:32 -0000
@@ -223,7 +223,10 @@ lookup_method_func (gpointer key, gpoint
 static MonoDebugMethodInfo *
 _mono_debug_lookup_method (MonoMethod *method)
 {
-	struct LookupMethodData data = { NULL, method };
+	struct LookupMethodData data;
+
+	data.minfo = NULL;
+	data.method = method;
 
 	if (!mono_debug_handles)
 		return NULL;
Index: mono/metadata/object.h
===================================================================
RCS file: /mono/mono/mono/metadata/object.h,v
retrieving revision 1.91
diff -u -p -r1.91 object.h
--- mono/metadata/object.h	13 May 2003 14:50:08 -0000	1.91
+++ mono/metadata/object.h	19 May 2003 23:40:32 -0000
@@ -5,6 +5,7 @@
 #include <mono/metadata/threads-types.h>
 
 #if 1
+#ifdef __GNUC__
 #define mono_assert(expr) 	           G_STMT_START{		  \
      if (!(expr))							  \
        {								  \
@@ -25,6 +26,28 @@
      g_free (msg);                                                        \
      mono_raise_exception (ex);                                           \
 }G_STMT_END
+#else /* not GNUC */
+#define mono_assert(expr) 	           G_STMT_START{		  \
+     if (!(expr))							  \
+       {								  \
+              	MonoException *ex;                                        \
+                char *msg = g_strdup_printf ("file %s: line %d: "         \
+                "assertion failed: (%s)", __FILE__, __LINE__,             \
+                #expr);							  \
+		ex = mono_get_exception_execution_engine (msg);           \
+		g_free (msg);                                             \
+                mono_raise_exception (ex);                                \
+       };				}G_STMT_END
+
+#define mono_assert_not_reached() 	          G_STMT_START{		  \
+     MonoException *ex;                                                   \
+     char *msg = g_strdup_printf ("file %s: line %d): "                   \
+     "should not be reached", __FILE__, __LINE__);			  \
+     ex = mono_get_exception_execution_engine (msg);                      \
+     g_free (msg);                                                        \
+     mono_raise_exception (ex);                                           \
+}G_STMT_END
+#endif
 #else
 #define mono_assert(expr) g_assert(expr)
 #define mono_assert_not_reached() g_assert_not_reached() 
Index: mono/metadata/process.c
===================================================================
RCS file: /mono/mono/mono/metadata/process.c,v
retrieving revision 1.10
diff -u -p -r1.10 process.c
--- mono/metadata/process.c	13 Mar 2003 19:15:22 -0000	1.10
+++ mono/metadata/process.c	19 May 2003 23:40:33 -0000
@@ -189,11 +189,14 @@ typedef struct {
 static gpointer process_get_versioninfo_block (gpointer data,
 					       version_data *block)
 {
-	block->data_len=*(((guint16 *)data)++);
-	block->value_len=*(((guint16 *)data)++);
+	block->data_len=*((guint16 *)data);
+	data = (char *)data + sizeof(guint16);
+	block->value_len=*((guint16 *)data);
+	data = (char *)data + sizeof(guint16);
 
 	/* No idea what the type is supposed to indicate */
-	block->type=*(((guint16 *)data)++);
+	block->type=*((guint16 *)data);
+	data = (char *)data + sizeof(guint16);
 	block->key=((gunichar2 *)data);
 
 	/* skip over the key (including the terminator) */
@@ -546,7 +549,8 @@ static void process_get_fileversion (Mon
 		return;
 	}
 
-	ffi=(((VS_FIXEDFILEINFO *)data_ptr)++);
+	ffi=((VS_FIXEDFILEINFO *)data_ptr);
+	data_ptr = (char *)data_ptr + sizeof(VS_FIXEDFILEINFO);
 	if((ffi->dwSignature!=VS_FFI_SIGNATURE) ||
 	   (ffi->dwStrucVersion!=VS_FFI_STRUCVERSION)) {
 #ifdef DEBUG
Index: mono/metadata/rand.c
===================================================================
RCS file: /mono/mono/mono/metadata/rand.c,v
retrieving revision 1.6
diff -u -p -r1.6 rand.c
--- mono/metadata/rand.c	9 May 2003 22:40:32 -0000	1.6
+++ mono/metadata/rand.c	19 May 2003 23:40:33 -0000
@@ -105,7 +105,7 @@ ves_icall_System_Security_Cryptography_R
 
 /* This needs to change when I do the Win32 support... */
 #else
-#ifndef _MSC_VER
+#ifdef __GNUC__
 #warning "No Entropy Source Found"
 #endif
 void ves_icall_System_Security_Cryptography_RNGCryptoServiceProvider_InternalGetBytes(MonoObject *self, MonoArray *arry)
Index: mono/metadata/reflection.c
===================================================================
RCS file: /mono/mono/mono/metadata/reflection.c,v
retrieving revision 1.173
diff -u -p -r1.173 reflection.c
--- mono/metadata/reflection.c	19 May 2003 12:23:52 -0000	1.173
+++ mono/metadata/reflection.c	19 May 2003 23:40:33 -0000
@@ -2126,13 +2126,13 @@ build_compressed_metadata (MonoDynamicAs
 	struct StreamDesc {
 		const char *name;
 		MonoDynamicStream *stream;
-	} stream_desc [] = {
-		{"#~", &assembly->tstream},
-		{"#Strings", &assembly->sheap},
-		{"#US", &assembly->us},
-		{"#Blob", &assembly->blob},
-		{"#GUID", &assembly->guid}
-	};
+	} stream_desc [5];
+
+	stream_desc[0].name  = "#~"; stream_desc[0].stream = &assembly->tstream;
+	stream_desc[1].name  = "#Strings"; stream_desc[1].stream = &assembly->sheap;
+	stream_desc[2].name  = "#US"; stream_desc[2].stream = &assembly->us;
+	stream_desc[3].name  = "#Blob"; stream_desc[3].stream = &assembly->blob;
+	stream_desc[4].name  = "#GUID"; stream_desc[4].stream = &assembly->guid;
 	
 	/* tables that are sorted */
 	sorted_mask = ((guint64)1 << MONO_TABLE_CONSTANT) | ((guint64)1 << MONO_TABLE_FIELDMARSHAL)
Index: mono/metadata/socket-io.c
===================================================================
RCS file: /mono/mono/mono/metadata/socket-io.c,v
retrieving revision 1.35
diff -u -p -r1.35 socket-io.c
--- mono/metadata/socket-io.c	14 May 2003 12:58:17 -0000	1.35
+++ mono/metadata/socket-io.c	19 May 2003 23:40:33 -0000
@@ -1294,6 +1294,7 @@ void ves_icall_System_Net_Sockets_Socket
 			ret=setsockopt(sock, system_level, system_name,
 				       &linger, valsize);
 			break;
+#ifndef __hpux
 		case SocketOptionName_AddMembership:
 		case SocketOptionName_DropMembership:
 		{
@@ -1332,6 +1333,7 @@ void ves_icall_System_Net_Sockets_Socket
 					  &mreq, sizeof (mreq));
 			break;
 		}
+#endif
 		default:
 			/* Throw an exception */
 			mono_raise_exception(get_socket_exception(WSAEINVAL));
