Index: System/Math.cs
===================================================================
--- System/Math.cs	(revision 61722)
+++ System/Math.cs	(working copy)
@@ -421,6 +421,21 @@
 				return Round (value, digits);
 			throw new NotImplementedException ();
 		}
+
+		public static double Truncate (double d)
+		{
+			if (d > 0D)
+				return Floor (d);
+			else if (d < 0D)
+				return Ceiling (d);
+			else
+				return d;
+		}
+
+		public static decimal Truncate (decimal d)
+		{
+			return Decimal.Truncate (d);
+		}
 #endif
 
 		public static int Sign (decimal value)
Index: Test/System/MathTest.cs
===================================================================
--- Test/System/MathTest.cs	(revision 61722)
+++ Test/System/MathTest.cs	(working copy)
@@ -706,6 +706,44 @@
 		Assert(Double.MinValue == Math.Round(Double.MinValue));
 	}
 
+#if NET_2_0
+	public void TestDoubleTruncate ()
+	{
+		double a = 1.2D;
+		double b = 2.8D;
+		double c = 0D;
+
+		AssertEquals ("Should truncate to 1", Math.Truncate (a), 1D);
+		AssertEquals ("Should truncate to 2", Math.Truncate (b), 2D);
+
+		AssertEquals ("Should truncate to -1", Math.Truncate (a * -1D), -1D);
+		AssertEquals ("Should truncate to -2", Math.Truncate (b * -1D), -2D);
+
+		AssertEquals ("Should return 0", Math.Truncate (c), 0D);
+
+		Assert (Double.MaxValue == Math.Round (Double.MaxValue));
+		Assert (Double.MinValue == Math.Round (Double.MinValue));
+	}
+
+	public void TestDecimalTruncate ()
+	{
+		decimal a = 1.2M;
+		decimal b = 2.8M;
+		decimal c = 0M;
+
+		AssertEquals ("Should truncate to 1", Math.Truncate (a), 1M);
+		AssertEquals ("Should truncate to 2", Math.Truncate (b), 2M);
+
+		AssertEquals ("Should truncate to -1", Math.Truncate (a * -1M), -1M);
+		AssertEquals ("Should truncate to -2", Math.Truncate (b * -1M), -2M);
+
+		AssertEquals ("Should return 0", Math.Truncate (c), 0M);
+
+		Assert (Decimal.MaxValue == Math.Truncate (Decimal.MaxValue));
+		Assert (Decimal.MaxValue == Math.Truncate (Decimal.MaxValue));
+	}
+#endif
+
 	public void TestDoubleRound2() {
 		double a = 3.45D;
 		double b = 3.46D;
