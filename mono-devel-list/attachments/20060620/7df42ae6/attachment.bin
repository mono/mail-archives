Index: System.Data/ChangeLog
===================================================================
--- System.Data/ChangeLog	(revision 61878)
+++ System.Data/ChangeLog	(working copy)
@@ -1,3 +1,20 @@
+2006-06-20  Chris Toshok  <toshok@ximian.com>
+
+	* DataView.cs: the PropertyDescriptorCollection returned by
+	ITyepdList.GetItemProperties should include the child relations of
+	our table, in order to match MS's behavior.
+
+	Also, make a couple of small changes so that the events are fired
+	in the same sequence as MS.
+
+	* DataViewManager.cs: ICollection.Count property is always 1.
+
+	* DataRow.cs: Don't call EndEdit after setting the value of a
+	column.  The old code caused new rows to be committed by the
+	DataGrid when the user moved the cursor between columns, which
+	isn't MS behavior.
+
+
 2006-06-15  Senganal T  <tsenganal@novell.com>
 
 	* DataTable.cs :
Index: System.Data/DataView.cs
===================================================================
--- System.Data/DataView.cs	(revision 61878)
+++ System.Data/DataView.cs	(working copy)
@@ -390,8 +390,9 @@
 			if (add) {
 				try {
 					dataTable.Rows.Add(_lastAdded);
-					//OnListChanged(new ListChangedEventArgs(ListChangedType.ItemAdded, Count - 1, -1));
 					_lastAdded = null;
+					UpdateIndex (true);
+					OnListChanged(new ListChangedEventArgs(ListChangedType.ItemAdded, Count - 1, -1));
 				}
 				catch(Exception e) {
 					_lastAdded = dr;
@@ -401,7 +402,7 @@
 			else {
 				_lastAdded.CancelEdit();
 				_lastAdded = null;
-				UpdateIndex ();
+				UpdateIndex (true);
 				OnListChanged(new ListChangedEventArgs(ListChangedType.ItemDeleted, Count, -1));
 			}
 		}
@@ -845,20 +846,29 @@
 		PropertyDescriptorCollection ITypedList.GetItemProperties (PropertyDescriptor[] listAccessors) 
 		{
 			// FIXME: use listAccessors somehow
-			DataColumnPropertyDescriptor [] descriptors = 
-				new DataColumnPropertyDescriptor [dataTable.Columns.Count];
+			PropertyDescriptor [] descriptors = 
+				new PropertyDescriptor [dataTable.Columns.Count + dataTable.ChildRelations.Count];
 
-			DataColumnPropertyDescriptor descriptor;
-			DataColumn dataColumn;
+			int d = 0;
 			for (int col = 0; col < dataTable.Columns.Count; col ++) {
-				dataColumn = dataTable.Columns[col];
+				DataColumn dataColumn = dataTable.Columns[col];
+				DataColumnPropertyDescriptor descriptor;
+
 				descriptor = new DataColumnPropertyDescriptor(
 					dataColumn.ColumnName, col, null);
 				descriptor.SetComponentType (typeof (System.Data.DataRowView));
 				descriptor.SetPropertyType (dataColumn.DataType);
 				descriptor.SetReadOnly (dataColumn.ReadOnly);
-				descriptors [col] = descriptor;
+				descriptors [d++] = descriptor;
 			}
+			for (int rel = 0; rel < dataTable.ChildRelations.Count; rel ++) {
+				DataRelation dataRelation = dataTable.ChildRelations[rel];
+				DataRelationPropertyDescriptor descriptor;
+
+				descriptor = new DataRelationPropertyDescriptor(dataRelation);
+				descriptors [d++] = descriptor;
+			}
+
 			return new PropertyDescriptorCollection (descriptors);
 		}
 
Index: System.Data/DataViewManager.cs
===================================================================
--- System.Data/DataViewManager.cs	(revision 61878)
+++ System.Data/DataViewManager.cs	(working copy)
@@ -109,7 +109,7 @@
 		}
 
 		int ICollection.Count {
-			get { return settings.Count; }
+			get { return 1; }
 		}
 
 		bool ICollection.IsSynchronized {
Index: System.Data/DataRow.cs
===================================================================
--- System.Data/DataRow.cs	(revision 61878)
+++ System.Data/DataRow.cs	(working copy)
@@ -187,9 +187,6 @@
 				
 				column[Proposed] = value;
 				_table.ChangedDataColumn (this, column, value);
-				if (!orginalEditing) {
-					EndEdit ();
-				}
 			}
 		}
 
Index: Test/System.Data/ChangeLog
===================================================================
--- Test/System.Data/ChangeLog	(revision 61878)
+++ Test/System.Data/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2006-06-20  Chris Toshok  <toshok@ximian.com>
+
+	* DataViewTest.cs: a couple of checks to test the Old/Index values
+	in the listChangedArgs both after AddNew and CancelEdit.
+
 2006-06-15  Senganal T <tsenganal@novell.com>
 
 	* DataTableTest2.cs :
Index: Test/System.Data/DataViewTest.cs
===================================================================
--- Test/System.Data/DataViewTest.cs	(revision 61878)
+++ Test/System.Data/DataViewTest.cs	(working copy)
@@ -345,14 +345,20 @@
 			dataView.AllowNew = true;
 			DataRowView drv = dataView.AddNew ();
 			AssertEquals ("test#01",ListChangedType.ItemAdded,listChangedArgs.ListChangedType);
-			AssertEquals ("test#02",drv["itemName"],dataView [dataView.Count - 1]["itemName"]);
+			AssertEquals ("test#02",-1,listChangedArgs.OldIndex);
+			AssertEquals ("test#03",5,listChangedArgs.NewIndex);
+			AssertEquals ("test#04",drv["itemName"],dataView [dataView.Count - 1]["itemName"]);
 			listChangedArgs = null;
 			drv["itemId"] = "item " + 1001;
 			drv["itemName"] = "name " + rndm.Next();
 			drv["itemPrice"] = "Rs. " + (rndm.Next() % 1000);
 			drv["itemCategory"] = "Cat " + ((rndm.Next() % 10) + 1);
 			// Actually no events are arisen when items are set.
-			AssertNull ("test#03", listChangedArgs);
+			AssertNull ("test#05", listChangedArgs);
+			drv.CancelEdit ();
+			AssertEquals ("test#06",ListChangedType.ItemDeleted,listChangedArgs.ListChangedType);
+			AssertEquals ("test#07",-1,listChangedArgs.OldIndex);
+			AssertEquals ("test#08",5,listChangedArgs.NewIndex);
 		}
 
 		[Test]
