Index: BStrWrapper.cs
===================================================================
--- BStrWrapper.cs	(revision 0)
+++ BStrWrapper.cs	(revision 0)
@@ -0,0 +1,26 @@
+//
+// System.Runtime.InteropServices.BStrWrapper
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+
+namespace System.Runtime.InteropServices
+{
+	public sealed class BStrWrapper
+	{
+		string _value;
+
+		public BStrWrapper (string value)
+		{
+			_value = value;
+		}
+
+		public string WrappedObject { get { return _value; } }
+	}
+}
+#endif
\ No newline at end of file
Index: _MemberInfo.cs
===================================================================
--- _MemberInfo.cs	(revision 0)
+++ _MemberInfo.cs	(revision 0)
@@ -0,0 +1,43 @@
+//
+// System.Runtime.InteropServices._MemberInfo interface
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+using System.Reflection;
+
+namespace System.Runtime.InteropServices
+{
+	[CLSCompliant (false)]
+	[InterfaceType (ComInterfaceType.InterfaceIsDual)]
+	[Guid ("f7102fa9-cabb-3a74-a6da-b4567ef1b079")]
+	public interface _MemberInfo
+	{
+		bool Equals (object obj);
+
+		object[] GetCustomAttributes (bool inherit);
+
+		object[] GetCustomAttributes (Type attributeType, bool inherit);
+
+		int GetHashCode ();
+
+		Type GetType ();
+		
+		bool IsDefined (Type attributeType, bool inherit);
+
+		string ToString ();
+
+		Type DeclaringType {get;}
+
+		MemberTypes MemberType {get;}
+
+		string Name {get;}
+
+		Type ReflectedType {get;}
+	}
+}
+#endif
\ No newline at end of file
Index: DefaultCharSetAttribute.cs
===================================================================
--- DefaultCharSetAttribute.cs	(revision 0)
+++ DefaultCharSetAttribute.cs	(revision 0)
@@ -0,0 +1,28 @@
+//
+// System.Runtime.InteropServices.DefaultCharSetAttribute
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+using System.Runtime.ConstrainedExecution;
+using System.Runtime.Serialization;
+
+namespace System.Runtime.InteropServices
+{
+	public class DefaultCharSetAttribute : Attribute
+	{
+		CharSet _set;
+
+		public DefaultCharSetAttribute (CharSet charSet)
+		{
+			_set = charSet;
+		}
+
+		public CharSet CharSet { get { return _set; } }
+	}
+}
+#endif
\ No newline at end of file
Index: ComObjectInUseException.cs
===================================================================
--- ComObjectInUseException.cs	(revision 0)
+++ ComObjectInUseException.cs	(revision 0)
@@ -0,0 +1,39 @@
+//
+// System.Runtime.InteropServices.ComObjectInUseException
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+using System.Runtime.Serialization;
+
+namespace System.Runtime.InteropServices
+{
+	public class ComObjectInUseException : SystemException
+	{
+		private const int ErrorCode = -2146233046;
+
+		public ComObjectInUseException () : base ()
+		{
+			HResult = ErrorCode;
+		}
+
+		public ComObjectInUseException (string message) : base (message)
+		{
+			HResult = ErrorCode;
+		}
+
+		protected ComObjectInUseException (SerializationInfo info, StreamingContext context) : base (info, context)
+		{
+		}
+
+		public ComObjectInUseException (string message, Exception inner) : base (message, inner)
+		{
+			HResult = ErrorCode;
+		}
+	}
+}
+#endif
\ No newline at end of file
Index: CriticalHandle.cs
===================================================================
--- CriticalHandle.cs	(revision 0)
+++ CriticalHandle.cs	(revision 0)
@@ -0,0 +1,72 @@
+//
+// System.Runtime.InteropServices.CriticalHandle
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+using System.Runtime.ConstrainedExecution;
+using System.Runtime.Serialization;
+
+namespace System.Runtime.InteropServices
+{
+	public abstract class CriticalHandle : CriticalFinalizerObject, IDisposable
+	{
+		protected IntPtr handle;
+		bool _disposed = false;
+
+		protected CriticalHandle (IntPtr invalidHandleValue)
+		{
+			handle = invalidHandleValue;
+		}
+
+		~CriticalHandle ()
+		{
+			Dispose ();
+		}
+
+		public void Close ()
+		{
+			Dispose ();
+		}
+
+		public void Dispose ()
+		{
+			if (_disposed)
+				return;
+
+			_disposed = true;
+			if (IsInvalid)
+				return;
+
+			if (ReleaseHandle ()) {
+				GC.SuppressFinalize (this);
+			} else {
+				// Failed in release...
+			}
+		}
+
+		protected abstract bool ReleaseHandle ();
+
+		protected void SetHandle (IntPtr handle)
+		{
+			this.handle = handle;
+			_disposed = false;
+		}
+
+		public void SetHandleAsInvalid()
+		{
+			_disposed = true;
+		}
+
+		public bool IsClosed {
+			get { return _disposed; }
+		}
+
+		public abstract bool IsInvalid {get;}
+	}
+}
+#endif
\ No newline at end of file
Index: _Type.cs
===================================================================
--- _Type.cs	(revision 0)
+++ _Type.cs	(revision 0)
@@ -0,0 +1,238 @@
+//
+// System.Runtime.InteropServices._Type interface
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+using System.Globalization;
+using System.Reflection;
+
+namespace System.Runtime.InteropServices
+{
+	[CLSCompliant (false)]
+	[InterfaceType (ComInterfaceType.InterfaceIsDual)]
+	[Guid ("BCA8B44D-AAD6-3A86-8AB7-03349F4F2DA2")]
+	public interface _Type
+	{
+		bool Equals (object o);
+
+		bool Equals (Type o);
+
+		Type[] FindInterfaces (TypeFilter filter, object filterCriteria);
+
+		MemberInfo[] FindMembers (MemberTypes memberType, BindingFlags bindingAttr, MemberFilter filter, object filterCriteria);
+
+		int GetArrayRank ();
+
+		ConstructorInfo GetConstructor (Type[] types);
+
+		ConstructorInfo GetConstructor (BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
+
+		ConstructorInfo GetConstructor (BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
+
+		ConstructorInfo[] GetConstructors ();
+
+		ConstructorInfo[] GetConstructors (BindingFlags bindingAttr);
+
+		object[] GetCustomAttributes (bool inherit);
+
+		object[] GetCustomAttributes (Type attributeType, bool inherit);
+
+		MemberInfo[] GetDefaultMembers ();
+
+		Type GetElementType ();
+
+		EventInfo GetEvent (string name);
+
+		EventInfo GetEvent (string name, BindingFlags bindingAttr);
+
+		EventInfo[] GetEvents ();
+
+		EventInfo[] GetEvents (BindingFlags bindingAttr);
+
+		FieldInfo GetField (string name);
+
+		FieldInfo GetField (string name, BindingFlags bindingAttr);
+
+		FieldInfo[] GetFields ();
+
+		FieldInfo[] GetFields (BindingFlags bindingAttr);
+
+		int GetHashCode ();
+
+		Type GetInterface (string name);
+
+		Type GetInterface (string name, bool ignoreCase);
+
+		InterfaceMapping GetInterfaceMap (Type interfaceType);
+
+		Type[] GetInterfaces ();
+
+		MemberInfo[] GetMember (string name);
+
+		MemberInfo[] GetMember (string name, MemberTypes type, BindingFlags bindingAttr);
+
+		MemberInfo[] GetMember (string name, BindingFlags bindingAttr);
+
+		MemberInfo[] GetMembers ();
+
+		MemberInfo[] GetMembers (BindingFlags bindingAttr);
+
+		MethodInfo GetMethod (string name);
+
+		MethodInfo GetMethod (string name, BindingFlags bindingAttr);
+
+		MethodInfo GetMethod (string name, Type[] types);
+
+		MethodInfo GetMethod (string name, Type[] types, ParameterModifier[] modifiers);
+
+		MethodInfo GetMethod (string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
+
+		MethodInfo GetMethod (string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
+
+		MethodInfo[] GetMethods ();
+
+		MethodInfo[] GetMethods (BindingFlags bindingAttr);
+
+		Type GetNestedType (string name);
+
+		Type GetNestedType (string name, BindingFlags bindingAttr);
+
+		Type[] GetNestedTypes ();
+
+		Type[] GetNestedTypes (BindingFlags bindingAttr);
+
+		PropertyInfo[] GetProperties ();
+
+		PropertyInfo[] GetProperties (BindingFlags bindingAttr);
+
+		PropertyInfo GetProperty (string name);
+
+		PropertyInfo GetProperty (string name, BindingFlags bindingAttr);
+
+		PropertyInfo GetProperty (string name, Type returnType);
+
+		PropertyInfo GetProperty (string name, Type[] types);
+
+		PropertyInfo GetProperty (string name, Type returnType, Type[] types);
+
+		PropertyInfo GetProperty (string name, Type returnType, Type[] types, ParameterModifier[] modifiers);
+
+		PropertyInfo GetProperty (string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
+
+		Type GetType ();
+
+		object InvokeMember (string name, BindingFlags invokeAttr, Binder binder, object target, object[] args);
+
+		object InvokeMember (string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, CultureInfo culture);
+
+		object InvokeMember (string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters);
+
+		bool IsAssignableFrom (Type c);
+
+		bool IsDefined (Type attributeType, bool inherit);
+
+		bool IsInstanceOfType (object o);
+
+		bool IsSubclassOf (Type c);
+
+		string ToString ();
+
+		Assembly Assembly {get;}
+
+		string AssemblyQualifiedName {get;}
+
+		TypeAttributes Attributes {get;}
+
+		Type BaseType {get;}
+
+		Type DeclaringType {get;}
+
+		string FullName {get;}
+
+		Guid GUID {get;}
+
+		bool HasElementType {get;}
+
+		bool IsAbstract {get;}
+
+		bool IsAnsiClass {get;}
+
+		bool IsArray {get;}
+
+		bool IsAutoClass {get;}
+
+		bool IsAutoLayout {get;}
+
+		bool IsByRef {get;}
+
+		bool IsClass {get;}
+
+		bool IsCOMObject {get;}
+
+		bool IsContextful {get;}
+
+		bool IsEnum {get;}
+
+		bool IsExplicitLayout {get;}
+
+		bool IsImport {get;}
+
+		bool IsInterface {get;}
+
+		bool IsLayoutSequential {get;}
+
+		bool IsMarshalByRef {get;}
+
+		bool IsNestedAssembly {get;}
+
+		bool IsNestedFamANDAssem {get;}
+
+		bool IsNestedFamily {get;}
+
+		bool IsNestedFamORAssem {get;}
+
+		bool IsNestedPrivate {get;}
+
+		bool IsNestedPublic {get;}
+
+		bool IsNotPublic {get;}
+
+		bool IsPointer {get;}
+
+		bool IsPrimitive {get;}
+
+		bool IsPublic {get;}
+
+		bool IsSealed {get;}
+
+		bool IsSerializable {get;}
+
+		bool IsSpecialName {get;}
+
+		bool IsUnicodeClass {get;}
+
+		bool IsValueType {get;}
+
+		MemberTypes MemberType {get;}
+
+		Module Module {get;}
+
+		string Name {get;}
+
+		string Namespace {get;}
+
+		Type ReflectedType {get;}
+
+		RuntimeTypeHandle TypeHandle {get;}
+
+		ConstructorInfo TypeInitializer {get;}
+
+		Type UnderlyingSystemType {get;}
+	}
+}
+#endif
\ No newline at end of file
Index: ComDefaultInterfaceAttribute.cs
===================================================================
--- ComDefaultInterfaceAttribute.cs	(revision 0)
+++ ComDefaultInterfaceAttribute.cs	(revision 0)
@@ -0,0 +1,26 @@
+//
+// System.Runtime.InteropServices.ComDefaultInterfaceAttribute
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+
+namespace System.Runtime.InteropServices
+{
+	public sealed class ComDefaultInterfaceAttribute : Attribute
+	{
+		Type _type;
+
+		public ComDefaultInterfaceAttribute (Type defaultInterface)
+		{
+			_type = defaultInterface;
+		}
+
+		public Type Value { get { return _type; }}
+	}
+}
+#endif
\ No newline at end of file
Index: _MethodInfo.cs
===================================================================
--- _MethodInfo.cs	(revision 0)
+++ _MethodInfo.cs	(revision 0)
@@ -0,0 +1,90 @@
+//
+// System.Runtime.InteropServices._MethodInfo interface
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+using System.Globalization;
+using System.Reflection;
+
+namespace System.Runtime.InteropServices
+{
+	[CLSCompliant (false)]
+	[InterfaceType (ComInterfaceType.InterfaceIsDual)]
+	[Guid ("FFCC1B5D-ECB8-38DD-9B01-3DC8ABC2AA5F")]
+	public interface _MethodInfo
+	{
+		bool Equals (object obj);
+
+		MethodInfo GetBaseDefinition();
+		
+		object[] GetCustomAttributes (bool inherit);
+		
+		object[] GetCustomAttributes (Type attributeType, bool inherit);
+		
+		int GetHashCode ();
+
+		MethodImplAttributes GetMethodImplementationFlags ();
+		
+		ParameterInfo[] GetParameters ();
+		
+		Type GetType ();
+
+		object Invoke (object obj, object[] parameters);
+		
+		object Invoke (object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
+		
+		bool IsDefined(Type attributeType, bool inherit);
+		
+		string ToString ();
+
+		MethodAttributes Attributes {get;}
+
+		CallingConventions CallingConvention {get;}
+
+		Type DeclaringType {get;}
+
+		bool IsAbstract {get;}
+
+		bool IsAssembly {get;}
+
+		bool IsConstructor {get;}
+
+		bool IsFamily {get;}
+
+		bool IsFamilyAndAssembly {get;}
+
+		bool IsFamilyOrAssembly {get;}
+
+		bool IsFinal {get;}
+
+		bool IsHideBySig {get;}
+
+		bool IsPrivate {get;}
+
+		bool IsPublic {get;}
+
+		bool IsSpecialName {get;}
+
+		bool IsStatic {get;}
+
+		bool IsVirtual {get;}
+
+		MemberTypes MemberType {get;}
+
+		RuntimeMethodHandle MethodHandle {get;}
+
+		string Name {get;}
+
+		Type ReflectedType {get;}
+
+		Type ReturnType {get;}
+
+		ICustomAttributeProvider ReturnTypeCustomAttributes {get;}
+	}
+}
+#endif
\ No newline at end of file
Index: _PropertyInfo.cs
===================================================================
--- _PropertyInfo.cs	(revision 0)
+++ _PropertyInfo.cs	(revision 0)
@@ -0,0 +1,76 @@
+//
+// System.Runtime.InteropServices._PropertyInfo interface
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+using System.Globalization;
+using System.Reflection;
+
+namespace System.Runtime.InteropServices
+{
+	[CLSCompliant (false)]
+	[InterfaceType (ComInterfaceType.InterfaceIsDual)]
+	[Guid ("F59ED4E4-E68F-3218-BD77-061AA82824BF")]
+	public interface _PropertyInfo
+	{
+		bool Equals (object obj);
+
+		MethodInfo[] GetAccessors ();
+
+		MethodInfo[] GetAccessors (bool nonPublic);
+
+		object[] GetCustomAttributes (bool inherit);
+
+		object[] GetCustomAttributes (Type attributeType, bool inherit);
+
+		MethodInfo GetGetMethod ();
+
+		MethodInfo GetGetMethod (bool nonPublic);
+
+		int GetHashCode ();
+
+		ParameterInfo[] GetIndexParameters ();
+
+		MethodInfo GetSetMethod ();
+
+		MethodInfo GetSetMethod (bool nonPublic);
+
+		Type GetType ();
+
+		object GetValue (object obj, object[] index);
+
+		object GetValue (object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
+
+		bool IsDefined (Type attributeType, bool inherit);
+
+		void SetValue (object obj, object value, object[] index);
+
+		void SetValue (object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture);
+		
+		string ToString ();
+
+		PropertyAttributes Attributes {get;}
+
+		bool CanRead {get;}
+
+		bool CanWrite {get;}
+
+		Type DeclaringType {get;}
+
+		bool IsSpecialName {get;}
+
+		MemberTypes MemberType {get;}
+
+		string Name {get;}
+
+		Type PropertyType {get;}
+
+		Type ReflectedType {get;}
+	}
+}
+#endif
\ No newline at end of file
Index: _ConstructorInfo.cs
===================================================================
--- _ConstructorInfo.cs	(revision 0)
+++ _ConstructorInfo.cs	(revision 0)
@@ -0,0 +1,88 @@
+//
+// System.Runtime.InteropServices._ConstructorInfo interface
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+using System.Globalization;
+using System.Reflection;
+
+namespace System.Runtime.InteropServices
+{
+	[CLSCompliant (false)]
+	[InterfaceType (ComInterfaceType.InterfaceIsDual)]
+	[Guid ("E9A19478-9646-3679-9B10-8411AE1FD57D")]
+	public interface _ConstructorInfo
+	{
+		bool Equals (object obj);
+
+		object[] GetCustomAttributes (bool inherit);
+
+		object[] GetCustomAttributes (Type attributeType, bool inherit);
+
+		int GetHashCode ();
+
+		MethodImplAttributes GetMethodImplementationFlags ();
+
+		ParameterInfo[] GetParameters ();
+
+		Type GetType ();
+
+		object Invoke (object[] parameters);
+
+		object Invoke (object obj, object[] parameters);
+
+		object Invoke (BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
+
+		object Invoke (object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
+
+		bool IsDefined (Type attributeType, bool inherit);
+
+		string ToString ();
+
+		MethodAttributes Attributes {get;}
+
+		CallingConventions CallingConvention {get;}
+
+		Type DeclaringType {get;}
+
+		bool IsAbstract {get;}
+
+		bool IsAssembly {get;}
+
+		bool IsConstructor {get;}
+
+		bool IsFamily {get;}
+
+		bool IsFamilyAndAssembly {get;}
+
+		bool IsFamilyOrAssembly {get;}
+
+		bool IsFinal {get;}
+
+		bool IsHideBySig {get;}
+
+		bool IsPrivate {get;}
+
+		bool IsPublic {get;}
+
+		bool IsSpecialName {get;}
+
+		bool IsStatic {get;}
+
+		bool IsVirtual {get;}
+
+		MemberTypes MemberType {get;}
+
+		RuntimeMethodHandle MethodHandle {get;}
+
+		string Name {get;}
+
+		Type ReflectedType {get;}
+	}
+}
+#endif
\ No newline at end of file
Index: RegistrationClassContext.cs
===================================================================
--- RegistrationClassContext.cs	(revision 0)
+++ RegistrationClassContext.cs	(revision 0)
@@ -0,0 +1,37 @@
+//
+// System.Runtime.InteropServices.RegistrationClassContext
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+
+namespace System.Runtime.InteropServices
+{
+	[ComVisible (false)]
+	public enum RegistrationClassContext
+	{
+		DisableActivateAsActivator = 32768,
+		EnableActivateAsActivator = 65536,
+		EnableCodeDownload = 8192,
+		FromDefaultContext = 131072,
+		InprocHandler = 2,
+		InprocHandler16 = 32,
+		InprocServer = 1,
+		InprocServer16 = 8,
+		LocalServer = 4,
+		NoCodeDownload = 1024,
+		NoCustomMarshal = 4096,
+		NoFailureLog = 16384,
+		RemoteServer = 16,
+		Reserved1 = 64,
+		Reserved2 = 128,
+		Reserved3 = 256,
+		Reserved4 = 512,
+		Reserved5 = 2048
+	}
+}
+#endif
\ No newline at end of file
Index: RegistrationConnectionType.cs
===================================================================
--- RegistrationConnectionType.cs	(revision 0)
+++ RegistrationConnectionType.cs	(revision 0)
@@ -0,0 +1,24 @@
+//
+// System.Runtime.InteropServices.RegistrationConnectionType
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+
+namespace System.Runtime.InteropServices
+{
+	[ComVisible (false)]
+	public enum RegistrationConnectionType
+	{
+		MultipleUse = 1,
+		MultiSeparate = 2,
+		SingleUse = 0,
+		Surrogate = 8,
+		Suspended = 4
+	}
+}
+#endif
\ No newline at end of file
Index: ExposeAsClassToComAttribute.cs
===================================================================
--- ExposeAsClassToComAttribute.cs	(revision 0)
+++ ExposeAsClassToComAttribute.cs	(revision 0)
@@ -0,0 +1,21 @@
+//
+// System.Runtime.InteropServices.ExposeAsClassToComAttribute
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+
+namespace System.Runtime.InteropServices
+{
+	public class ExposeAsClassToComAttribute : Attribute
+	{
+		public ExposeAsClassToComAttribute ()
+		{
+		}
+	}
+}
+#endif
\ No newline at end of file
Index: _MethodBase.cs
===================================================================
--- _MethodBase.cs	(revision 0)
+++ _MethodBase.cs	(revision 0)
@@ -0,0 +1,84 @@
+//
+// System.Runtime.InteropServices._MethodBase interface
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+using System.Globalization;
+using System.Reflection;
+
+namespace System.Runtime.InteropServices
+{
+	[CLSCompliant (false)]
+	[InterfaceType (ComInterfaceType.InterfaceIsDual)]
+	[Guid ("6240837A-707F-3181-8E98-A36AE086766B")]
+	public interface _MethodBase
+	{
+		bool Equals (object obj);
+		
+		object[] GetCustomAttributes (bool inherit);
+		
+		object[] GetCustomAttributes (Type attributeType, bool inherit);
+		
+		int GetHashCode ();
+
+		MethodImplAttributes GetMethodImplementationFlags ();
+		
+		ParameterInfo[] GetParameters ();
+		
+		Type GetType ();
+
+		object Invoke (object obj, object[] parameters);
+		
+		object Invoke (object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture);
+		
+		bool IsDefined(Type attributeType, bool inherit);
+		
+		string ToString ();
+
+		MethodAttributes Attributes {get;}
+
+		CallingConventions CallingConvention {get;}
+
+		Type DeclaringType {get;}
+
+		bool IsAbstract {get;}
+
+		bool IsAssembly {get;}
+
+		bool IsConstructor {get;}
+
+		bool IsFamily {get;}
+
+		bool IsFamilyAndAssembly {get;}
+
+		bool IsFamilyOrAssembly {get;}
+
+		bool IsFinal {get;}
+
+		bool IsHideBySig {get;}
+
+		bool IsPrivate {get;}
+
+		bool IsPublic {get;}
+
+		bool IsSpecialName {get;}
+
+		bool IsStatic {get;}
+
+		bool IsVirtual {get;}
+
+		MemberTypes MemberType {get;}
+
+		RuntimeMethodHandle MethodHandle {get;}
+
+		string Name {get;}
+
+		Type ReflectedType {get;}
+	}
+}
+#endif
\ No newline at end of file
Index: _EventInfo.cs
===================================================================
--- _EventInfo.cs	(revision 0)
+++ _EventInfo.cs	(revision 0)
@@ -0,0 +1,67 @@
+//
+// System.Runtime.InteropServices._EventInfo interface
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+using System.Reflection;
+
+namespace System.Runtime.InteropServices
+{
+	[CLSCompliant (false)]
+	[InterfaceType (ComInterfaceType.InterfaceIsDual)]
+	[Guid ("9DE59C64-D889-35A1-B897-587D74469E5B")]
+	public interface _EventInfo
+	{
+		void AddEventHandler (object target, Delegate handler);
+
+		bool Equals (object obj);
+
+		MethodInfo GetAddMethod ();
+
+		MethodInfo GetAddMethod (bool nonPublic);
+
+		object[] GetCustomAttributes (bool inherit);
+
+		object[] GetCustomAttributes (Type attributeType, bool inherit);
+
+		int GetHashCode ();
+
+		MethodInfo GetRaiseMethod ();
+
+		MethodInfo GetRaiseMethod (bool nonPublic);
+
+		MethodInfo GetRemoveMethod ();
+
+		MethodInfo GetRemoveMethod (bool nonPublic);
+
+		Type GetType ();
+
+		bool IsDefined (Type attributeType, bool inherit);
+
+		void RemoveEventHandler (object target, Delegate handler);
+
+		string ToString ();
+
+		EventAttributes Attributes {get;}
+
+		Type DeclaringType {get;}
+
+		Type EventHandlerType {get;}
+
+		bool IsMulticast {get;}
+
+		bool IsSpecialName {get;}
+
+		MemberTypes MemberType {get;}
+
+		string Name {get;}
+
+		Type ReflectedType {get;}
+	}
+}
+#endif
\ No newline at end of file
Index: _FieldInfo.cs
===================================================================
--- _FieldInfo.cs	(revision 0)
+++ _FieldInfo.cs	(revision 0)
@@ -0,0 +1,84 @@
+//
+// System.Runtime.InteropServices._FieldInfo interface
+//
+// Author:
+//   Kazuki Oikawa  (kazuki@panicode.com)
+//
+
+#if NET_2_0
+
+using System;
+using System.Globalization;
+using System.Reflection;
+
+namespace System.Runtime.InteropServices
+{
+	[CLSCompliant (false)]
+	[InterfaceType (ComInterfaceType.InterfaceIsDual)]
+	[Guid ("8A7C1442-A9FB-366B-80D8-4939FFA6DBE0")]
+	public interface _FieldInfo
+	{
+		bool Equals (object obj);
+
+		object[] GetCustomAttributes (bool inherit);
+
+		object[] GetCustomAttributes (Type attributeType, bool inherit);
+
+		int GetHashCode ();
+
+		Type GetType ();
+
+		object GetValue (object obj);
+
+		object GetValueDirect (TypedReference obj);
+
+		bool IsDefined (Type attributeType, bool inherit);
+
+		void SetValue (object obj, object value);
+
+		void SetValue (object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture);
+
+		void SetValueDirect (TypedReference obj, object value);
+
+		string ToString ();
+
+		FieldAttributes Attributes {get;}
+
+		Type DeclaringType {get;}
+
+		RuntimeFieldHandle FieldHandle {get;}
+
+		Type FieldType {get;}
+
+		bool IsAssembly {get;}
+
+		bool IsFamily {get;}
+
+		bool IsFamilyAndAssembly {get;}
+
+		bool IsFamilyOrAssembly {get;}
+
+		bool IsInitOnly {get;}
+
+		bool IsLiteral {get;}
+
+		bool IsNotSerialized {get;}
+
+		bool IsPinvokeImpl {get;}
+
+		bool IsPrivate {get;}
+
+		bool IsPublic {get;}
+
+		bool IsSpecialName {get;}
+
+		bool IsStatic {get;}
+
+		MemberTypes MemberType {get;}
+
+		string Name {get;}
+
+		Type ReflectedType {get;}
+	}
+}
+#endif
\ No newline at end of file