Index: BitArray.cs
===================================================================
--- BitArray.cs	(revision 40962)
+++ BitArray.cs	(working copy)
@@ -35,8 +35,8 @@
 namespace System.Collections {
 	[Serializable]
 	public sealed class BitArray : ICollection, ICloneable {
-		int [] _array;
-		int _length;
+		int [] m_array;
+		int m_length;
 		int _version = 0;
 
 #region Constructors
@@ -45,10 +45,10 @@
 			if (bits == null)
 				throw new ArgumentNullException ("bits");
 
-			_length = bits._length;
-			_array = new int [(_length + 31) / 32];
+			m_length = bits.m_length;
+			m_array = new int [(m_length + 31) / 32];
 
-			Array.Copy(bits._array, _array, _array.Length);
+			Array.Copy(bits.m_array, m_array, m_array.Length);
 		}
 
 		public BitArray (bool [] values)
@@ -56,8 +56,8 @@
 			if (values == null)
 				throw new ArgumentNullException ("values");
 	    
-			_length = values.Length;
-			_array = new int [(_length + 31) / 32];
+			m_length = values.Length;
+			m_array = new int [(m_length + 31) / 32];
 			
 			for (int i = 0; i < values.Length; i++)
 				this [i] = values [i];
@@ -68,8 +68,8 @@
 			if (bytes == null)
 				throw new ArgumentNullException ("bytes");
 
-			_length = bytes.Length * 8;
-			_array = new int [(_length + 31) / 32];
+			m_length = bytes.Length * 8;
+			m_array = new int [(m_length + 31) / 32];
 
 			for (int i = 0; i < bytes.Length; i++)
 				setByte (i, bytes [i]);
@@ -81,9 +81,9 @@
 				throw new ArgumentNullException ("values");
 						
 			int arrlen = values.Length;
-			_length = arrlen*32;
-			_array = new int [arrlen];
-			Array.Copy (values, _array, arrlen);
+			m_length = arrlen*32;
+			m_array = new int [arrlen];
+			Array.Copy (values, m_array, arrlen);
 		}
 		
 		public BitArray (int length)
@@ -91,22 +91,22 @@
 			if (length < 0)
 				throw new ArgumentOutOfRangeException ("length");
 			
-			_length = length;
-			_array = new int [(_length + 31) / 32];
+			m_length = length;
+			m_array = new int [(m_length + 31) / 32];
 		}
 
 		public BitArray (int length, bool defaultValue) : this (length)
 		{
 			if (defaultValue) {
-				for (int i = 0; i < _array.Length; i++)
-				_array[i] = ~0;
+				for (int i = 0; i < m_array.Length; i++)
+				m_array[i] = ~0;
 			}
 		}
 		
 		private BitArray (int [] array, int length)
 		{
-			_array = array;
-			_length = length;
+			m_array = array;
+			m_length = length;
 		}
 #endregion
 #region Utility Methods
@@ -116,7 +116,7 @@
 			int index = byteIndex / 4;
 			int shift = (byteIndex % 4) * 8;
 			
-			int theByte = _array [index] & (0xff << shift);
+			int theByte = m_array [index] & (0xff << shift);
 			
 			return (byte)((theByte >> shift) & 0xff);
 		}
@@ -127,9 +127,9 @@
 			int shift = (byteIndex % 4) * 8;
 			
 			// clear the byte
-			_array [index] &= ~(0xff << shift);
+			m_array [index] &= ~(0xff << shift);
 			// or in the new byte
-			_array [index] |= value << shift;
+			m_array [index] |= value << shift;
 			
 			_version++;
 		}
@@ -138,13 +138,13 @@
 		{
 			if (operand == null)
 				throw new ArgumentNullException ();
-			if (operand._length != _length)
+			if (operand.m_length != m_length)
 				throw new ArgumentException ();
 		}
 #endregion
 
 		public int Count {
-			get { return _length; }
+			get { return m_length; }
 		}
 		
 		public bool IsReadOnly {
@@ -161,21 +161,21 @@
 		}
 		
 		public int Length {
-			get { return _length; }
+			get { return m_length; }
 			set {
 				if (value < 0)
 					throw new ArgumentOutOfRangeException ();
 				
 				int newLen = value;
-				if (_length != newLen) {
+				if (m_length != newLen) {
 					int numints = (newLen + 31) / 32;
 					int [] newArr = new int [numints];
-					int copylen = (numints > _array.Length) ? _array.Length : numints;
-					Array.Copy (_array, newArr, copylen);
+					int copylen = (numints > m_array.Length) ? m_array.Length : numints;
+					Array.Copy (m_array, newArr, copylen);
 					
 					// set the internal state
-					_array = newArr;
-					_length = newLen;
+					m_array = newArr;
+					m_length = newLen;
 					_version++;
 				}
 			}
@@ -207,17 +207,17 @@
 			// in each case, check to make sure enough space in array
 			
 			if (array is bool []) {
-				if (array.Length - index < _length)
+				if (array.Length - index < m_length)
 					 throw new ArgumentException ();
 				
 				bool [] barray = (bool []) array;
 				
 				// Copy the bits into the array
-				for (int i = 0; i < _length; i++)
+				for (int i = 0; i < m_length; i++)
 					barray[index + i] = this [i];
 				
 			} else if (array is byte []) {
-				int numbytes = (_length + 7) / 8;
+				int numbytes = (m_length + 7) / 8;
 				
 				if ((array.Length - index) < numbytes)
 					 throw new ArgumentException ();
@@ -229,7 +229,7 @@
 				
 			} else if (array is int []) {
 				
-				Array.Copy (_array, 0, array, index, (_length + 31) / 32);
+				Array.Copy (m_array, 0, array, index, (m_length + 31) / 32);
 				
 			} else {
 				throw new ArgumentException ("array", "Unsupported type");
@@ -238,9 +238,9 @@
 
 		public BitArray Not ()
 		{
-			int ints = (_length + 31) / 32;
+			int ints = (m_length + 31) / 32;
 			for (int i = 0; i < ints; i++)
-				_array [i] = ~_array [i];
+				m_array [i] = ~m_array [i];
 			
 			_version++;
 			return this;
@@ -250,9 +250,9 @@
 		{
 			checkOperand (value);
 			
-			int ints = (_length + 31) / 32;
+			int ints = (m_length + 31) / 32;
 			for (int i = 0; i < ints; i++)
-				_array [i] &= value._array [i];
+				m_array [i] &= value.m_array [i];
 			
 			_version++;
 			return this;
@@ -262,9 +262,9 @@
 		{
 			checkOperand (value);
 
-			int ints = (_length + 31) / 32;
+			int ints = (m_length + 31) / 32;
 			for (int i = 0; i < ints; i++)
-				_array [i] |= value._array [i];
+				m_array [i] |= value.m_array [i];
 			
 			_version++;
 			return this;
@@ -274,9 +274,9 @@
 		{
 			checkOperand (value);
 
-			int ints = (_length + 31) / 32;
+			int ints = (m_length + 31) / 32;
 			for (int i = 0; i < ints; i++)
-				_array [i] ^= value._array [i];
+				m_array [i] ^= value.m_array [i];
 
 			_version++;
 			return this;
@@ -284,21 +284,21 @@
 		
 		public bool Get (int index)
 		{
-			if (index < 0 || index >= _length)
+			if (index < 0 || index >= m_length)
 				throw new ArgumentOutOfRangeException ();
 			
-			return (_array [index / 32] & (1 << (index % 32))) != 0;
+			return (m_array [index / 32] & (1 << (index % 32))) != 0;
 		}
 		
 		public void Set (int index, bool value)
 		{
-			if (index < 0 || index >= _length)
+			if (index < 0 || index >= m_length)
 				throw new ArgumentOutOfRangeException ();
 			
 			if (value)
-				_array [index / 32] |=  (1 << (index % 32));
+				m_array [index / 32] |=  (1 << (index % 32));
 			else
-				_array [index / 32] &= ~(1 << (index % 32));
+				m_array [index / 32] &= ~(1 << (index % 32));
 		
 			_version++;
 		}
@@ -306,11 +306,11 @@
 		public void SetAll (bool value)
 		{
 			if (value) {
-				for (int i = 0; i < _array.Length; i++)
-					_array[i] = ~0;
+				for (int i = 0; i < m_array.Length; i++)
+					m_array[i] = ~0;
 			}
 			else
-				Array.Clear (_array, 0, _array.Length);
+				Array.Clear (m_array, 0, m_array.Length);
 
 			_version++;
 		}
@@ -334,7 +334,7 @@
 			{
 				_index = -1;
 				_bitArray = ba;
-				_max = ba._length;
+				_max = ba.m_length;
 				_version = ba._version;
 			}
 
