Index: Comparer.cs
===================================================================
--- Comparer.cs	(revision 40962)
+++ Comparer.cs	(working copy)
@@ -29,11 +29,15 @@
 //
 
 using System.Globalization;
+using System.Runtime.Serialization;
 
 namespace System.Collections
 {
 	[Serializable]
 	public sealed class Comparer : IComparer
+#if NET_2_0
+		, ISerializable
+#endif
 	{
 		public static readonly Comparer Default = new Comparer ();
 #if NET_1_1
@@ -43,13 +47,26 @@
 #endif
 		static readonly Comparer DefaultInvariant = new Comparer (CultureInfo.InvariantCulture);
 
-		CultureInfo _culture;
+		CompareInfo _compareInfo;
 
 		private Comparer ()
 		{
 			//LAMESPEC: This seems to be encoded at runtime while CaseInsensitiveComparer does at creation
 		}
 
+#if NET_2_0
+		private Comparer (SerializationInfo info, StreamingContext context)
+		{
+			SerializationInfoEnumerator enumerator = info.GetEnumerator ();
+			while (enumerator.MoveNext ()) {
+				if (enumerator.Name == "CompareInfo") {
+					_compareInfo = enumerator.Value as CompareInfo;
+					break;
+				}
+			}
+		}
+#endif
+
 #if NET_1_1
 		public
 #else
@@ -60,7 +77,7 @@
 			if (culture == null)
 				throw new ArgumentNullException ("culture");
 
-			_culture = culture;
+			_compareInfo = culture.CompareInfo;
 		}
 
 
@@ -74,11 +91,11 @@
 			else if (b == null)
 				return 1;
 
-			if (_culture != null) {
+			if (_compareInfo != null) {
 				string sa = a as string;
 				string sb = b as string;
 				if (sa != null && sb != null)
-					return _culture.CompareInfo.Compare (sa, sb);
+					return _compareInfo.Compare (sa, sb);
 			}
 
 			if (a is IComparable)
@@ -87,6 +104,16 @@
 				return -(b as IComparable).CompareTo (a);
 
 			throw new ArgumentException (Locale.GetText ("Neither a nor b Comparable."));
-		}
-	}
+		}
+
+#if NET_2_0
+		void System.Runtime.Serialization.ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
+		{
+			if (info == null) {
+				throw new ArgumentNullException ("info");
+			}
+			info.AddValue ("CompareInfo", _compareInfo);
+		}
+#endif
+	}
 }