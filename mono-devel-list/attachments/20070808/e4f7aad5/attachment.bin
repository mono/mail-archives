Index: class.c
===================================================================
--- class.c	(revision 83682)
+++ class.c	(working copy)
@@ -3497,12 +3497,13 @@
 }
 
 /**
+ * mono_type_retrieve_from_typespec
  * @image: context where the image is created
  * @type_spec:  typespec token
  * @context: the generic context used to evaluate generic instantiations in
  */
 static MonoClass *
-mono_class_create_from_typespec (MonoImage *image, guint32 type_spec, MonoGenericContext *context)
+mono_type_retrieve_from_typespec (MonoImage *image, guint32 type_spec, MonoGenericContext *context)
 {
 	MonoType *t = mono_type_create_from_typespec (image, type_spec);
 	if (!t)
@@ -3512,7 +3513,7 @@
 		if (inflated)
 			t = inflated;
 	}
-	return mono_class_from_mono_type (t);
+	return t;
 }
 
 /**
@@ -4089,6 +4090,43 @@
 	return class;
 }
 
+
+/**
+ * mono_type_get_full:
+ * @image: the image where the type resides
+ * @type_token: the token for the type
+ * @context: the generic context used to evaluate generic instantiations in
+ *
+ * This functions exists to fullfill the fact that sometimes it's desirable to have access to the 
+ * 
+ * Returns: the MonoType that represents @type_token in @image
+ */
+MonoType *
+mono_type_get_full (MonoImage *image, guint32 type_token, MonoGenericContext *context)
+{
+	MonoType *type = NULL;
+
+	//FIXME: this will not fix the very issue for which mono_type_get_full exists -but how to do it then?
+	if (image->dynamic)
+		return mono_class_get_type (mono_lookup_dynamic_token (image, type_token));
+
+	if ((type_token & 0xff000000) != MONO_TOKEN_TYPE_SPEC) {
+		MonoClass *class = mono_class_get_full (image, type_token, context);
+		return class ? mono_class_get_type (class) : NULL;
+	}
+
+	type = mono_type_retrieve_from_typespec (image, type_token, context);
+
+	if (!type) {
+		char *name = mono_class_name_from_token (image, type_token);
+		char *assembly = mono_assembly_name_from_token (image, type_token);
+		mono_loader_set_error_type_load (name, assembly);
+	}
+
+	return type;
+}
+
+
 MonoClass *
 mono_class_get (MonoImage *image, guint32 type_token)
 {
@@ -4639,15 +4677,15 @@
 	case MONO_TOKEN_TYPE_DEF:
 	case MONO_TOKEN_TYPE_REF:
 	case MONO_TOKEN_TYPE_SPEC: {
-		MonoClass *class;
+		MonoType *type;
 		if (handle_class)
 			*handle_class = mono_defaults.typehandle_class;
-		class = mono_class_get_full (image, token, context);
-		if (!class)
+		type = mono_type_get_full (image, token, context);
+		if (!type)
 			return NULL;
-		mono_class_init (class);
+		mono_class_init (mono_class_from_mono_type (type));
 		/* We return a MonoType* as handle */
-		return &class->byval_arg;
+		return type;
 	}
 	case MONO_TOKEN_FIELD_DEF: {
 		MonoClass *class;
Index: class.h
===================================================================
--- class.h	(revision 83682)
+++ class.h	(working copy)
@@ -264,6 +264,9 @@
 gboolean
 mono_method_can_access_method (MonoMethod *method, MonoMethod *called);
 
+MonoType *
+mono_type_get_full        (MonoImage *image, guint32 type_token, MonoGenericContext *context);
+
 G_END_DECLS
 
 #endif /* _MONO_CLI_CLASS_H_ */