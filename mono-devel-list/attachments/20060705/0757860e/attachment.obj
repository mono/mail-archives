Index: Test/System.Web.UI.WebControls/TemplateFieldTest.cs
===================================================================
--- Test/System.Web.UI.WebControls/TemplateFieldTest.cs	(revision 62233)
+++ Test/System.Web.UI.WebControls/TemplateFieldTest.cs	(working copy)
@@ -27,7 +27,6 @@
 // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 
 
-#if NET_2_0
 
 
 using System;
@@ -51,38 +50,31 @@
 	{
 		// View state Stuff
 		public PokerTemplateField ()
-			: base ()
-		{
+			: base () {
 			TrackViewState ();
 		}
 
-		public object SaveState ()
-		{
+		public object SaveState () {
 			return SaveViewState ();
 		}
 
-		public void LoadState (object o)
-		{
+		public void LoadState (object o) {
 			LoadViewState (o);
 		}
 
-		public StateBag StateBag
-		{
+		public StateBag StateBag {
 			get { return base.ViewState; }
 		}
 
-		public Control control ()
-		{
+		public Control control () {
 			return base.Control;
 		}
 
-		public void DoCopyProperties (DataControlField newField)
-		{
+		public void DoCopyProperties (DataControlField newField) {
 			base.CopyProperties (newField);
 		}
 
-		public DataControlField DoCreateField ()
-		{
+		public DataControlField DoCreateField () {
 			return base.CreateField ();
 		}
 	}
@@ -91,8 +83,7 @@
 	public class TemplateFieldTest
 	{
 		[Test]
-		public void TemplateField_DefaultProperty ()
-		{
+		public void TemplateField_DefaultProperty () {
 			TemplateField field = new TemplateField ();
 			Assert.AreEqual (null, field.AlternatingItemTemplate, "AlternatingItemTemplate");
 			Assert.AreEqual (true, field.ConvertEmptyStringToNull, "ConvertEmptyStringToNull");
@@ -104,20 +95,19 @@
 		}
 
 		[Test]
-		public void TemplateField_AssignProperty ()
-		{
-			PokerTemplateField field = new PokerTemplateField();
+		public void TemplateField_AssignProperty () {
+			PokerTemplateField field = new PokerTemplateField ();
 			field.AlternatingItemTemplate = new Ibutton ();
 			Assert.IsNotNull (field.AlternatingItemTemplate, "AlternatingItemTemplateAssigned");
-			Assert.AreEqual (typeof(Ibutton), field.AlternatingItemTemplate.GetType (), "AlternatingItemTemplateType");
+			Assert.AreEqual (typeof (Ibutton), field.AlternatingItemTemplate.GetType (), "AlternatingItemTemplateType");
 			field.ConvertEmptyStringToNull = false;
-		        Assert.AreEqual (false, field.ConvertEmptyStringToNull, "ConvertEmptyStringToNull");
+			Assert.AreEqual (false, field.ConvertEmptyStringToNull, "ConvertEmptyStringToNull");
 			field.EditItemTemplate = new IImage ();
-			Assert.IsNotNull(field.EditItemTemplate, "EditItemTemplateAssigning");
-			Assert.AreEqual (typeof(IImage),field.EditItemTemplate.GetType(),"EditItemTemplateType");
-			field.FooterTemplate = new Ibutton();
+			Assert.IsNotNull (field.EditItemTemplate, "EditItemTemplateAssigning");
+			Assert.AreEqual (typeof (IImage), field.EditItemTemplate.GetType (), "EditItemTemplateType");
+			field.FooterTemplate = new Ibutton ();
 			Assert.IsNotNull (field.FooterTemplate, "FooterTemplateAssigning");
-			Assert.AreEqual (typeof (Ibutton), field.FooterTemplate.GetType(), "FooterTemplateType");
+			Assert.AreEqual (typeof (Ibutton), field.FooterTemplate.GetType (), "FooterTemplateType");
 			field.HeaderTemplate = new IImage ();
 			Assert.IsNotNull (field.HeaderTemplate, "HeaderTemplateAssigning");
 			Assert.AreEqual (typeof (IImage), field.HeaderTemplate.GetType (), "HeaderTemplateType");
@@ -126,60 +116,144 @@
 			Assert.AreEqual (typeof (Ibutton), field.InsertItemTemplate.GetType (), "InsertItemTemplateType");
 			field.ItemTemplate = new IImage ();
 			Assert.IsNotNull (field.ItemTemplate, "ItemTemplateAssigning");
-			Assert.AreEqual (typeof(IImage), field.ItemTemplate.GetType(), "ItemTemplateType");
+			Assert.AreEqual (typeof (IImage), field.ItemTemplate.GetType (), "ItemTemplateType");
 		}
 
 		[Test]
-		public void TemplateField_ExtractValuesFromCell ()
-		{
+		public void TemplateField_ExtractValuesFromCell () {
 			TemplateField field = new TemplateField ();
 			OrderedDictionary dictionrary = new OrderedDictionary ();
-			DataControlFieldCell cell = new DataControlFieldCell(null);	
-			field.ExtractValuesFromCell(dictionrary,cell,DataControlRowState.Normal,true);
-			Assert.AreEqual (0, dictionrary.Count,"ExtractValuesFromCellNoTemplates");
+			DataControlFieldCell cell = new DataControlFieldCell (null);
+			field.ExtractValuesFromCell (dictionrary, cell, DataControlRowState.Normal, true);
+			Assert.AreEqual (0, dictionrary.Count, "ExtractValuesFromCellNoTemplates");
 			// This is testing only base functionality and flow with no exceptions
 			// The rest functionality will tested on integration test
 		}
 
 		[Test]
-		[Category ("NotWorking")]
-		public void TemplateField_InitializeCell ()
-		{
+		[ExpectedException(typeof(NullReferenceException))]
+		public void TemplateField_InitializeCell_Null () {
 			PokerTemplateField field = new PokerTemplateField ();
-			DataControlFieldCell cell = new DataControlFieldCell(null);
+			field.InitializeCell (null, DataControlCellType.DataCell, DataControlRowState.Normal, 0);
+		}
+
+		[Test]
+		public void TemplateField_InitializeCell () {
+			PokerTemplateField field = new PokerTemplateField ();
+			DataControlFieldCell cell = new DataControlFieldCell (null);
 			field.InitializeCell (cell, DataControlCellType.DataCell, DataControlRowState.Normal, 0);
 			Assert.AreEqual ("&nbsp;", cell.Text, "InitializeCellEmpty");
 			field.ItemTemplate = new IImage ("test");
 			field.InitializeCell (cell, DataControlCellType.DataCell, DataControlRowState.Normal, 0);
 			Assert.AreEqual ("", cell.Text, "InitializeCellWithItemTemplate");
 			Assert.AreEqual (1, cell.Controls.Count, "InitializeCellWithItemTemplate#1");
-			Assert.AreEqual ("test", ((IImage) cell.Controls[0]).ImageUrl, "InitializeCellWithItemTemplate#2");
-			cell.Controls.Clear ();
-			field.HeaderTemplate = new Ibutton ("test");
-			field.InitializeCell (cell, DataControlCellType.Header, DataControlRowState.Normal, 0);
-			Assert.AreEqual ("", cell.Text, "InitializeCellWithTemplate");
-			Assert.AreEqual (1, cell.Controls.Count, "InitializeCellItemTemplate");
-			Assert.AreEqual ("test", ((Ibutton) cell.Controls[0]).Text, "ItemTemplateProperty");
-			cell.Controls.Clear ();
+			Assert.AreEqual ("test", ((IImage) cell.Controls [0]).ImageUrl, "InitializeCellWithItemTemplate#2");
+		}
+
+		[Test]
+		public void TemplateField_FooterTemplate () {
+			PokerTemplateField field = new PokerTemplateField ();
+			DataControlFieldCell cell = new DataControlFieldCell (null);
+			cell.Text = "text";
+			field.InitializeCell (cell, DataControlCellType.Footer, DataControlRowState.Normal, 0);
+			Assert.AreEqual ("&nbsp;", cell.Text, "#1");
+			Assert.AreEqual (0, cell.Controls.Count, "#2");
 			field.FooterTemplate = new Ibutton ("test");
 			field.InitializeCell (cell, DataControlCellType.Footer, DataControlRowState.Normal, 0);
-			Assert.AreEqual ("", cell.Text, "InitializeCellWithFooterTemplate#1");
-			Assert.AreEqual (1, cell.Controls.Count, "InitializeCellFooterTemplate#2");
-			Assert.AreEqual ("test", ((Ibutton) cell.Controls[0]).Text, "ItemTemplateFooterProperty");
+			Assert.AreEqual ("", cell.Text, "#3");
+			Assert.AreEqual (1, cell.Controls.Count, "#4");
+			Assert.AreEqual ("test", ((Ibutton) cell.Controls [0]).Text, "#5");
 		}
 
+
 		[Test]
+		public void TemplateField_HeaderTemplate () {
+			PokerTemplateField field = new PokerTemplateField ();
+			DataControlFieldCell cell = new DataControlFieldCell (null);
+			cell.Text = "text";
+			field.InitializeCell (cell, DataControlCellType.Header, DataControlRowState.Normal, 0);
+			Assert.AreEqual ("&nbsp;", cell.Text, "#1");
+			Assert.AreEqual (0, cell.Controls.Count, "#2");
+			field.HeaderTemplate = new Ibutton ("test");
+			field.InitializeCell (cell, DataControlCellType.Header, DataControlRowState.Normal, 0);
+			Assert.AreEqual ("", cell.Text, "#3");
+			Assert.AreEqual (1, cell.Controls.Count, "#4");
+			Assert.AreEqual ("test", ((Ibutton) cell.Controls [0]).Text, "#5");
+		}
+
+		[Test]
+		public void TemplateField_EditItemTemplate () {
+			PokerTemplateField field = new PokerTemplateField ();
+			DataControlFieldCell cell = new DataControlFieldCell (null);
+			field.ItemTemplate = new Ibutton ("test");
+			field.InitializeCell (cell, DataControlCellType.DataCell, DataControlRowState.Edit, 0);
+			Assert.AreEqual ("test", ((Ibutton) cell.Controls [0]).Text, "#1");
+			cell = new DataControlFieldCell (null);
+			field.EditItemTemplate = new Ibutton ("edit");
+			field.InitializeCell (cell, DataControlCellType.DataCell, DataControlRowState.Edit, 0);
+			Assert.AreEqual ("edit", ((Ibutton) cell.Controls [0]).Text, "#2");
+			cell = new DataControlFieldCell (null);
+			field.InitializeCell (cell, DataControlCellType.DataCell, DataControlRowState.Alternate, 0);
+			Assert.AreEqual ("test", ((Ibutton) cell.Controls [0]).Text, "#3");
+			cell = new DataControlFieldCell (null);
+			field.ItemTemplate = null;
+			field.InitializeCell (cell, DataControlCellType.DataCell, DataControlRowState.Alternate, 0);
+			Assert.IsTrue (cell.Controls.Count == 0, "#4");
+			Assert.AreEqual ("&nbsp;", cell.Text, "#5");
+		}
+
+		[Test]
+		public void TemplateField_InsertItemTemplate () {
+			PokerTemplateField field = new PokerTemplateField ();
+			DataControlFieldCell cell = new DataControlFieldCell (null);
+			field.ItemTemplate = new Ibutton ("test");
+			field.InitializeCell (cell, DataControlCellType.DataCell, DataControlRowState.Insert, 0);
+			Assert.AreEqual ("test", ((Ibutton) cell.Controls [0]).Text, "#1");
+			cell = new DataControlFieldCell (null);
+			field.InsertItemTemplate = new Ibutton ("insert");
+			field.InitializeCell (cell, DataControlCellType.DataCell, DataControlRowState.Insert, 0);
+			Assert.AreEqual ("insert", ((Ibutton) cell.Controls [0]).Text, "#2");
+			cell = new DataControlFieldCell (null);
+			field.InitializeCell (cell, DataControlCellType.DataCell, DataControlRowState.Alternate, 0);
+			Assert.AreEqual ("test", ((Ibutton) cell.Controls [0]).Text, "#3");
+			cell = new DataControlFieldCell (null);
+			field.ItemTemplate = null;
+			field.InitializeCell (cell, DataControlCellType.DataCell, DataControlRowState.Edit, 0);
+			Assert.IsTrue (cell.Controls.Count == 0, "#4");
+			Assert.AreEqual ("&nbsp;", cell.Text, "#5");
+		}
+
+		[Test]
+		public void TemplateField_AlternatingItemTemplate () {
+			PokerTemplateField field = new PokerTemplateField ();
+			DataControlFieldCell cell = new DataControlFieldCell (null);
+			field.ItemTemplate = new Ibutton ("test");
+			field.InitializeCell (cell, DataControlCellType.DataCell, DataControlRowState.Alternate, 0);
+			Assert.AreEqual ("test", ((Ibutton) cell.Controls [0]).Text, "#1");
+			cell = new DataControlFieldCell (null);
+			field.AlternatingItemTemplate = new Ibutton ("Alternate");
+			field.InitializeCell (cell, DataControlCellType.DataCell, DataControlRowState.Alternate, 0);
+			Assert.AreEqual ("Alternate", ((Ibutton) cell.Controls [0]).Text, "#2");
+			cell = new DataControlFieldCell (null);
+			field.InitializeCell (cell, DataControlCellType.DataCell, DataControlRowState.Insert, 0);
+			Assert.AreEqual ("test", ((Ibutton) cell.Controls [0]).Text, "#3");
+			cell = new DataControlFieldCell (null);
+			field.ItemTemplate = null;
+			field.InitializeCell (cell, DataControlCellType.DataCell, DataControlRowState.Edit, 0);
+			Assert.IsTrue (cell.Controls.Count == 0, "#4");
+			Assert.AreEqual ("&nbsp;", cell.Text, "#5");
+		}
+
+		[Test]
 		[ExpectedException (typeof (NotSupportedException))]
-		public void TemplateField_ValidateSupportsCallbackException ()
-		{
+		public void TemplateField_ValidateSupportsCallbackException () {
 			TemplateField field = new TemplateField ();
 			field.Initialize (false, new Control ());
 			field.ValidateSupportsCallback ();
 		}
 
 		[Test]
-		public void TemplateField_Copy()
-		{
+		public void TemplateField_Copy () {
 			PokerTemplateField field = new PokerTemplateField ();
 			TemplateField copy = new TemplateField ();
 			field.ConvertEmptyStringToNull = true;
@@ -200,8 +274,7 @@
 		}
 
 		[Test]
-		public void TemplateField_CreateField ()
-		{
+		public void TemplateField_CreateField () {
 			PokerTemplateField field = new PokerTemplateField ();
 			DataControlField newfield = field.DoCreateField ();
 			if (!(newfield is TemplateField)) {
@@ -213,18 +286,16 @@
 		// A simple Template class to wrap an image.
 		public class IImage : Image, ITemplate
 		{
-			public IImage ():base()
-			{
-				
+			public IImage ()
+				: base () {
+
 			}
 			public IImage (string text)
-				: base ()
-			{
+				: base () {
 				this.ImageUrl = text;
 			}
 
-			public void InstantiateIn (Control container)
-			{
+			public void InstantiateIn (Control container) {
 				container.Controls.Add (this);
 			}
 
@@ -232,21 +303,18 @@
 
 		private class Ibutton : Button, ITemplate
 		{
-			public Ibutton (): base ()
-			{
+			public Ibutton ()
+				: base () {
 			}
 
 			public Ibutton (string text)
-				: base ()
-			{
+				: base () {
 				this.Text = text;
 			}
 
-			void ITemplate.InstantiateIn (Control container)
-			{
+			void ITemplate.InstantiateIn (Control container) {
 				container.Controls.Add (this);
 			}
 		}
 	}
-}
-#endif
\ No newline at end of file
+}
\ No newline at end of file
Index: System.Web.UI.WebControls/DataControlField.cs
===================================================================
--- System.Web.UI.WebControls/DataControlField.cs	(revision 62233)
+++ System.Web.UI.WebControls/DataControlField.cs	(working copy)
@@ -90,9 +90,12 @@
 					else
 						cell.Controls.Add (new DataControlButton (control, HeaderText, HeaderImageUrl, string.Empty, string.Empty, true));
 				}
+				else
+					cell.Text = "&nbsp;";
 			}
 			else if (cellType == DataControlCellType.Footer) {
-				cell.Text = FooterText;
+				string footerText = FooterText;
+				cell.Text = (footerText.Length > 0) ? footerText : "&nbsp;";
 			}
 		}
 		
Index: System.Web.UI.WebControls/TemplateField.cs
===================================================================
--- System.Web.UI.WebControls/TemplateField.cs	(revision 62233)
+++ System.Web.UI.WebControls/TemplateField.cs	(working copy)
@@ -119,40 +119,37 @@
 		public override void InitializeCell (DataControlFieldCell cell,
 						     DataControlCellType cellType, DataControlRowState rowState, int rowIndex)
 		{
+			base.InitializeCell (cell, cellType, rowState, rowIndex);
 			if (cellType == DataControlCellType.Header) {
 				if (headerTemplate != null && ShowHeader) {
+					cell.Text = String.Empty;
 					headerTemplate.InstantiateIn (cell);
-					return;
 				}
 			} else if (cellType == DataControlCellType.Footer) {
 				if (footerTemplate != null) {
+					cell.Text = String.Empty;
 					footerTemplate.InstantiateIn (cell);
-					return;
 				}
 			} else {
-				if ((rowState & DataControlRowState.Insert) != 0) {
-					if (insertItemTemplate != null) {
-						insertItemTemplate.InstantiateIn (cell);
-						return;
-					}
+				cell.Text = String.Empty;
+				if ((rowState & DataControlRowState.Insert) != 0 &&
+						insertItemTemplate != null) {
+					insertItemTemplate.InstantiateIn (cell);
 				}
-				else if ((rowState & DataControlRowState.Edit) != 0) {
-					if (editItemTemplate != null) {
-						editItemTemplate.InstantiateIn (cell);
-						return;
-					}
+				else if ((rowState & DataControlRowState.Edit) != 0 &&
+						editItemTemplate != null) {
+					editItemTemplate.InstantiateIn (cell);
 				}
-				else if ((rowState & DataControlRowState.Alternate) != 0 && alternatingItemTemplate != null) {
+				else if ((rowState & DataControlRowState.Alternate) != 0 &&
+						alternatingItemTemplate != null) {
 					alternatingItemTemplate.InstantiateIn (cell);
-					return;
 				}
 				else if (itemTemplate != null) {
 					itemTemplate.InstantiateIn (cell);
-					return;
 				}
+				else
+					cell.Text = "&nbsp;";
 			}
-			
-			base.InitializeCell (cell, cellType, rowState, rowIndex);
 		}
 		
 		public override void ExtractValuesFromCell (IOrderedDictionary dictionary,
