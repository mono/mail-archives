Index: SqlConnection.cs
===================================================================
--- SqlConnection.cs	(revision 63071)
+++ SqlConnection.cs	(working copy)
@@ -963,6 +963,344 @@
 			}
 		}
 
+#if NET_2_0
+		internal void fillRestrictionTable(DataTable restrictionTable, String collectionName,
+						   String restrictionName, String parameterName,
+						   String restrictionDefault, Int32 restrictionNumber)
+		{
+			DataRow row = restrictionTable.NewRow();
+
+			row["CollectionName"] = collectionName;
+			row["RestrictionName"] = restrictionName;
+			row["ParameterName"] = parameterName;
+			row["RestrictionDefault"] = restrictionDefault;
+			row["RestrictionNumber"] = restrictionNumber;
+			restrictionTable.Rows.Add(row);
+		}
+
+		internal void fillGetSchemaTable(DataTable schemaTable, string collectionName,
+						 Int32 numberOfRestrictions, Int32 numberOfIdentifierParts)
+		{
+			DataRow row = schemaTable.NewRow();
+
+			row["CollectionName"] = collectionName;
+			row["NumberOfRestrictions"] = numberOfRestrictions;
+			row["NumberOfIdentifierParts"] = numberOfIdentifierParts;
+			schemaTable.Rows.Add(row);
+		}
+
+		internal DataTable InitGetSchemaTable ()
+		{
+			DataTable schemaTable = new DataTable("GetSchema");
+			schemaTable.Columns.Add ("CollectionName", typeof(String));
+			schemaTable.Columns.Add ("NumberOfRestrictions", typeof(Int32));
+			schemaTable.Columns.Add ("NumberOfIdentifierParts", typeof(Int32));
+
+			fillGetSchemaTable (schemaTable, "MetaDataCollections", 0, 0);
+			fillGetSchemaTable (schemaTable, "DataSourceInformation", 0, 0);
+			fillGetSchemaTable (schemaTable, "DataTypes", 0, 0);
+			fillGetSchemaTable (schemaTable, "Restrictions", 0, 0);
+
+			fillGetSchemaTable (schemaTable, "ReservedWords", 0, 0);
+			fillGetSchemaTable (schemaTable, "Users", 1, 1);
+			fillGetSchemaTable (schemaTable, "Databases", 1, 1);
+			fillGetSchemaTable (schemaTable, "Tables", 4, 3);
+
+			fillGetSchemaTable (schemaTable, "Columns", 4, 4);
+			fillGetSchemaTable (schemaTable, "Views", 3, 3);
+			fillGetSchemaTable (schemaTable, "ViewColumns", 4, 4);
+			fillGetSchemaTable (schemaTable, "ProcedureParameters", 4, 1);
+
+			fillGetSchemaTable (schemaTable, "Procedures", 4, 3);
+			fillGetSchemaTable (schemaTable, "ForeignKeys", 4, 3);
+			fillGetSchemaTable (schemaTable, "IndexColumns", 5, 4);
+			fillGetSchemaTable (schemaTable, "Indexes", 4, 3);
+
+			fillGetSchemaTable (schemaTable, "UserDefinedTypes", 2, 1);
+
+			return schemaTable;
+		}
+
+		public override DataTable GetSchema ()
+		{
+			return InitGetSchemaTable ();
+		}
+
+		public override DataTable GetSchema (String collectionName)
+		{
+			return GetSchema (collectionName, null);
+		}
+
+		public override DataTable GetSchema (String collectionName, string [] restrictionValues)
+		{
+			if (collectionName == null)
+				//LAMESPEC: In MS.NET, if collectionName is null, it throws ArgumentException.
+				throw new ArgumentException ();
+
+			int i;
+			SqlCommand command     = null;
+			SqlParameter parameter = null;
+			DataTable dataTable    = new DataTable ();
+			DataTable schemaTable  = InitGetSchemaTable ();
+			SqlDataAdapter dataAdapter = new SqlDataAdapter ();
+			int length = restrictionValues == null ? 0 : restrictionValues.Length;
+
+			string cName;
+			bool collectionfNameFound = false;
+			Int32 numberOfRestrictions = 0;
+
+			foreach (DataRow row in schemaTable.Rows) {
+				if (row["CollectionName"].ToString().ToUpper() == collectionName.ToUpper()) {
+					cName = row["CollectionName"].ToString ();
+					numberOfRestrictions = Convert.ToInt32 (row["NumberOfRestrictions"].ToString());
+					collectionfNameFound = true;
+				}
+			}
+
+			if (collectionfNameFound && length > numberOfRestrictions) {
+				throw new ArgumentException ("More restrictions were provided " +
+							     "than the requested schema ('" + cName + "') supports");
+			}
+
+			switch (collectionName.ToUpper())
+			{
+			case "DATABASES":
+				command = new SqlCommand ("select name as database_name, dbid, crdate as create_date " +
+							  "from master.sys.sysdatabases where (name = @Name or (@Name " +
+							  "is null))", this);
+				parameter = command.Parameters.Add ("@Name", SqlDbType.NVarChar, 4000);
+				break;
+			case "FOREIGNKEYS":
+				command = new SqlCommand ("select CONSTRAINT_CATALOG, CONSTRAINT_SCHEMA, CONSTRAINT_NAME, " +
+							  "TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, CONSTRAINT_TYPE, " +
+							  "IS_DEFERRABLE, INITIALLY_DEFERRED from " +
+							  "INFORMATION_SCHEMA.TABLE_CONSTRAINTS where (CONSTRAINT_CATALOG" +
+							  " = @Catalog or (@Catalog is null)) and (CONSTRAINT_SCHEMA = " +
+							  "@Owner or (@Owner is null)) and (TABLE_NAME = @Table or (" +
+							  "@Table is null)) and (CONSTRAINT_NAME = @Name or (@Name is null))" +
+							  " and CONSTRAINT_TYPE = 'FOREIGN KEY' order by CONSTRAINT_CATALOG," +
+							  " CONSTRAINT_SCHEMA, CONSTRAINT_NAME", this);
+				parameter = command.Parameters.Add ("@Catalog", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Owner", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Table", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Name", SqlDbType.NVarChar, 4000);
+				break;
+			case "INDEXES":
+				command = new SqlCommand ("select distinct db_name() as constraint_catalog, " +
+							  "constraint_schema = user_name (o.uid), " +
+							  "constraint_name = x.name, table_catalog = db_name (), " +
+							  "table_schema = user_name (o.uid), table_name = o.name, " +
+							  "index_name  = x.name from sysobjects o, sysindexes x, " +
+							  "sysindexkeys xk where o.type in ('U') and x.id = o.id and " +
+							  "o.id = xk.id and x.indid = xk.indid and xk.keyno = x.keycnt " +
+							  "and (db_name() = @Catalog or (@Catalog is null)) and " +
+							  "(user_name() = @Owner or (@Owner is null)) and (o.name = " +
+							  "@Table or (@Table is null)) and (x.name = @Name or (@Name is null))" +
+							  "order by table_name, index_name", this);
+				parameter = command.Parameters.Add ("@Catalog", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Owner", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Table", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Name", SqlDbType.NVarChar, 4000);
+				break;
+			case "INDEXCOLUMNS":
+				command = new SqlCommand ("select distinct db_name() as constraint_catalog, " +
+							  "constraint_schema = user_name (o.uid), constraint_name = x.name, " +
+							  "table_catalog = db_name (), table_schema = user_name (o.uid), " +
+							  "table_name = o.name, column_name = c.name, " +
+							  "ordinal_position = convert (int, xk.keyno), keyType = c.xtype, " +
+							  "index_name = x.name from sysobjects o, sysindexes x, syscolumns c, " +
+							  "sysindexkeys xk where o.type in ('U') and x.id = o.id and o.id = c.id " +
+							  "and o.id = xk.id and x.indid = xk.indid and c.colid = xk.colid " +
+							  "and xk.keyno <= x.keycnt and permissions (o.id, c.name) <> 0 " +
+							  "and (db_name() = @Catalog or (@Catalog is null)) and (user_name() " +
+							  "= @Owner or (@Owner is null)) and (o.name = @Table or (@Table is" +
+							  " null)) and (x.name = @ConstraintName or (@ConstraintName is null)) " +
+							  "and (c.name = @Column or (@Column is null)) order by table_name, " +
+							  "index_name", this);
+				parameter = command.Parameters.Add ("@Catalog", SqlDbType.NVarChar, 8);
+				parameter = command.Parameters.Add ("@Owner", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Table", SqlDbType.NVarChar, 13);
+				parameter = command.Parameters.Add ("@ConstraintName", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Column", SqlDbType.NVarChar, 4000);
+				break;
+			case "PROCEDURES":
+				command = new SqlCommand ("select SPECIFIC_CATALOG, SPECIFIC_SCHEMA, SPECIFIC_NAME, " +
+							  "ROUTINE_CATALOG, ROUTINE_SCHEMA, ROUTINE_NAME, ROUTINE_TYPE, " +
+							  "CREATED, LAST_ALTERED from INFORMATION_SCHEMA.ROUTINES where " +
+							  "(SPECIFIC_CATALOG = @Catalog or (@Catalog is null)) and " +
+							  "(SPECIFIC_SCHEMA = @Owner or (@Owner is null)) and (SPECIFIC_NAME" +
+							  " = @Name or (@Name is null)) and (ROUTINE_TYPE = @Type or (@Type " +
+							  "is null)) order by SPECIFIC_CATALOG, SPECIFIC_SCHEMA, SPECIFIC_NAME", this);
+				parameter = command.Parameters.Add ("@Catalog", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Owner", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Name", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Type", SqlDbType.NVarChar, 4000);
+				break;
+			case "PROCEDUREPARAMETERS":
+				command = new SqlCommand ("select SPECIFIC_CATALOG, SPECIFIC_SCHEMA, SPECIFIC_NAME, " +
+							  "ORDINAL_POSITION, PARAMETER_MODE, IS_RESULT, AS_LOCATOR, " +
+							  "PARAMETER_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, " +
+							  "CHARACTER_OCTET_LENGTH, COLLATION_CATALOG, COLLATION_SCHEMA, " +
+							  "COLLATION_NAME, CHARACTER_SET_CATALOG, CHARACTER_SET_SCHEMA, " +
+							  "CHARACTER_SET_NAME, NUMERIC_PRECISION, NUMERIC_PRECISION_RADIX, " +
+							  "NUMERIC_SCALE, DATETIME_PRECISION, INTERVAL_TYPE, " +
+							  "INTERVAL_PRECISION from INFORMATION_SCHEMA.PARAMETERS where " +
+							  "(SPECIFIC_CATALOG = @Catalog or (@Catalog is null)) and " +
+							  "(SPECIFIC_SCHEMA = @Owner or (@Owner is null)) and (SPECIFIC_NAME = " +
+							  "@Name or (@Name is null)) and (PARAMETER_NAME = @Parameter or (" +
+							  "@Parameter is null)) order by SPECIFIC_CATALOG, SPECIFIC_SCHEMA," +
+							  " SPECIFIC_NAME, PARAMETER_NAME", this);
+				parameter = command.Parameters.Add ("@Catalog", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Owner", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Name", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Parameter", SqlDbType.NVarChar, 4000);
+				break;
+			case "TABLES":
+				command = new SqlCommand ("select TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE " +
+							  "from INFORMATION_SCHEMA.TABLES where" +
+							  " (TABLE_CATALOG = @catalog or (@catalog is null)) and " +
+							  "(TABLE_SCHEMA = @owner or (@owner is null))and " +
+							  "(TABLE_NAME = @name or (@name is null)) and " +
+							  "(TABLE_TYPE = @table_type or (@table_type is null))", this);
+				parameter = command.Parameters.Add ("@catalog", SqlDbType.NVarChar, 8);
+				parameter = command.Parameters.Add ("@owner", SqlDbType.NVarChar, 3);
+				parameter = command.Parameters.Add ("@name", SqlDbType.NVarChar, 11);
+				parameter = command.Parameters.Add ("@table_type", SqlDbType.NVarChar, 10);
+				break;
+			case "COLUMNS":
+				command = new SqlCommand ("select TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, " +
+							  "ORDINAL_POSITION, COLUMN_DEFAULT, IS_NULLABLE, DATA_TYPE, " +
+							  "CHARACTER_MAXIMUM_LENGTH, CHARACTER_OCTET_LENGTH, " +
+							  "NUMERIC_PRECISION, NUMERIC_PRECISION_RADIX, NUMERIC_SCALE, " +
+							  "DATETIME_PRECISION, CHARACTER_SET_CATALOG, CHARACTER_SET_SCHEMA, " +
+							  "CHARACTER_SET_NAME, COLLATION_CATALOG from INFORMATION_SCHEMA.COLUMNS" +
+							  " where (TABLE_CATALOG = @Catalog or (@Catalog is null)) and (" +
+							  "TABLE_SCHEMA = @Owner or (@Owner is null)) and (TABLE_NAME = @table" +
+							  " or (@Table is null)) and (COLUMN_NAME = @column or (@Column is null" +
+							  ")) order by TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME", this);
+				parameter = command.Parameters.Add ("@Catalog", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Owner", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Table", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Column", SqlDbType.NVarChar, 4000);
+				break;
+			case "USERS":
+				command = new SqlCommand ("select uid, name as user_name, createdate, updatedate from sysusers" +
+							  " where (name = @Name or (@Name is null))", this);
+				parameter = command.Parameters.Add ("@Name", SqlDbType.NVarChar, 4000);
+				break;
+			case "VIEWS":
+				command = new SqlCommand ("select TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, CHECK_OPTION, " +
+							  "IS_UPDATABLE from INFORMATION_SCHEMA.VIEWS where (TABLE_CATALOG" +
+							  " = @Catalog or (@Catalog is null)) TABLE_SCHEMA = @Owner or " +
+							  "(@Owner is null)) and (TABLE_NAME = @table or (@Table is null))" +
+							  " order by TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME", this);
+				parameter = command.Parameters.Add ("@Catalog", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Owner", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Table", SqlDbType.NVarChar, 4000);
+				break;
+			case "VIEWCOLUMNS":
+				command = new SqlCommand ("select VIEW_CATALOG, VIEW_SCHEMA, VIEW_NAME, TABLE_CATALOG, " +
+							  "TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME from " +
+							  "INFORMATION_SCHEMA.VIEW_COLUMN_USAGE where (VIEW_CATALOG = " +
+							  "@Catalog (@Catalog is null)) and (VIEW_SCHEMA = @Owner (@Owner" +
+							  " is null)) and (VIEW_NAME = @Table or (@Table is null)) and " +
+							  "(COLUMN_NAME = @Column or (@Column is null)) order by " +
+							  "VIEW_CATALOG, VIEW_SCHEMA, VIEW_NAME", this);
+				parameter = command.Parameters.Add ("@Catalog", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Owner", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Table", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@Column", SqlDbType.NVarChar, 4000);
+				break;
+			case "USERDEFINEDTYPES":
+				command = new SqlCommand ("select assemblies.name as assembly_name, types.assembly_class " +
+							  "as udt_name, ASSEMBLYPROPERTY(assemblies.name, 'VersionMajor') " +
+							  "as version_major, ASSEMBLYPROPERTY(assemblies.name, 'VersionMinor') " +
+							  "as version_minor, ASSEMBLYPROPERTY(assemblies.name, 'VersionBuild') " +
+							  "as version_build, ASSEMBLYPROPERTY(assemblies.name, 'VersionRevision') " +
+							  "as version_revision, ASSEMBLYPROPERTY(assemblies.name, 'CultureInfo') " +
+							  "as culture_info, ASSEMBLYPROPERTY(assemblies.name, 'PublicKey') " +
+							  "as public_key, is_fixed_length, max_length, Create_Date, " +
+							  "Permission_set_desc from sys.assemblies as assemblies join " +
+							  "sys.assembly_types as types on assemblies.assembly_id = types.assembly_id" +
+							  " where (assemblies.name = @AssemblyName or (@AssemblyName is null)) and " +
+							  "(types.assembly_class = @UDTName or (@UDTName is null))",
+							  this);
+				parameter = command.Parameters.Add ("@AssemblyName", SqlDbType.NVarChar, 4000);
+				parameter = command.Parameters.Add ("@UDTName", SqlDbType.NVarChar, 4000);
+				break;
+			case "RESTRICTIONS":
+				DataTable restrictionTable = new DataTable ("Restrictions");
+				restrictionTable.Columns.Add ("CollectionName", typeof (String));
+				restrictionTable.Columns.Add ("RestrictionName", typeof(String));
+				restrictionTable.Columns.Add ("ParameterName", typeof(String));
+				restrictionTable.Columns.Add ("RestrictionDefault", typeof(String));
+				restrictionTable.Columns.Add ("RestrictionNumber", typeof(Int32));
+
+				fillRestrictionTable (restrictionTable, "Users", "User_Name", "@Name", "name", 1);
+				fillRestrictionTable (restrictionTable, "Databases", "Name", "@Name", "Name", 1);
+
+				fillRestrictionTable (restrictionTable, "Tables", "Catalog", "@Catalog", "TABLE_CATALOG", 1);
+				fillRestrictionTable (restrictionTable, "Tables", "Owner", "@Owner", "TABLE_SCHEMA", 2);
+				fillRestrictionTable (restrictionTable, "Tables", "Table", "@Name", "TABLE_NAME", 3);
+				fillRestrictionTable (restrictionTable, "Tables", "TableType", "@TableType", "TABLE_TYPE", 4);
+
+
+				fillRestrictionTable (restrictionTable, "Columns", "Catalog", "@Catalog", "TABLE_CATALOG", 1);
+				fillRestrictionTable (restrictionTable, "Columns", "Owner", "@Owner", "TABLE_SCHEMA", 2);
+				fillRestrictionTable (restrictionTable, "Columns", "Table", "@Table", "TABLE_NAME", 3);
+				fillRestrictionTable (restrictionTable, "Columns", "Column", "@Column", "COLUMN_NAME", 4);
+
+				fillRestrictionTable (restrictionTable, "Views", "Catalog", "@Catalog", "TABLE_CATALOG", 1);
+				fillRestrictionTable (restrictionTable, "Views", "Owner", "@Owner", "TABLE_SCHEMA", 2);
+				fillRestrictionTable (restrictionTable, "Views", "Table", "@Table", "TABLE_NAME", 3);
+
+				fillRestrictionTable (restrictionTable, "ViewColumns", "Catalog", "@Catalog", "VIEW_CATALOG", 1);
+				fillRestrictionTable (restrictionTable, "ViewColumns", "Owner", "@Owner", "VIEW_SCHEMA", 2);
+				fillRestrictionTable (restrictionTable, "ViewColumns", "Table", "@Table", "VIEW_NAME", 3);
+				fillRestrictionTable (restrictionTable, "ViewColumns", "Column", "@Column", "COLUMN_NAME", 4);
+
+				fillRestrictionTable (restrictionTable, "ProcedureParameters", "Catalog", "@Catalog", "SPECIFIC_CATALOG", 1);
+				fillRestrictionTable (restrictionTable, "ProcedureParameters", "Owner", "@Owner", "SPECIFIC_SCHEMA", 2);
+				fillRestrictionTable (restrictionTable, "ProcedureParameters", "Name", "@Name", "SPECIFIC_NAME", 3);
+				fillRestrictionTable (restrictionTable, "ProcedureParameters", "Parameter", "@Parameter", "PARAMETER_NAME", 4);
+
+				fillRestrictionTable (restrictionTable, "Procedures", "Catalog", "@Catalog", "SPECIFIC_CATALOG", 1);
+				fillRestrictionTable (restrictionTable, "Procedures", "Owner", "@Owner", "SPECIFIC_SCHEMA", 2);
+				fillRestrictionTable (restrictionTable, "Procedures", "Name", "@Name", "SPECIFIC_NAME", 3);
+				fillRestrictionTable (restrictionTable, "Procedures", "Type", "@Type", "ROUTINE_TYPE", 4);
+
+				fillRestrictionTable (restrictionTable, "IndexColumns", "Catalog", "@Catalog", "db_name()", 1);
+				fillRestrictionTable (restrictionTable, "IndexColumns", "Owner", "@Owner", "user_name()", 2);
+				fillRestrictionTable (restrictionTable, "IndexColumns", "Table", "@Table", "o.name", 3);
+				fillRestrictionTable (restrictionTable, "IndexColumns", "ConstraintName", "@ConstraintName", "x.name", 4);
+				fillRestrictionTable (restrictionTable, "IndexColumns", "Column", "@Column", "c.name", 5);
+
+				fillRestrictionTable (restrictionTable, "Indexes", "Catalog", "@Catalog", "db_name()", 1);
+				fillRestrictionTable (restrictionTable, "Indexes", "Owner", "@Owner", "user_name()", 2);
+				fillRestrictionTable (restrictionTable, "Indexes", "Table", "@Table", "o.name", 3);
+				fillRestrictionTable (restrictionTable, "Indexes", "Name", "@Name", "x.name", 4);
+
+				fillRestrictionTable (restrictionTable, "UserDefinedTypes", "assembly_name", "@AssemblyName", "assemblies.name", 1);
+				fillRestrictionTable (restrictionTable, "UserDefinedTypes", "udt_name", "@UDTName", "types.assembly_class", 2);
+
+				fillRestrictionTable (restrictionTable, "ForeignKeys", "Catalog", "@Catalog", "CONSTRAINT_CATALOG", 1);
+				fillRestrictionTable (restrictionTable, "ForeignKeys", "Owner", "@Owner", "CONSTRAINT_SCHEMA", 2);
+				fillRestrictionTable (restrictionTable, "ForeignKeys", "Table", "@Table", "TABLE_NAME", 3);
+				fillRestrictionTable (restrictionTable, "ForeignKeys", "Name", "@Name", "CONSTRAINT_NAME", 4);
+
+				return restrictionTable;
+			default:
+				throw new ArgumentException ("The requested collection ('" + collectionName + "') is not defined.");
+			}
+			for (i = 0; i < length; i++) {
+				parameter.Value = restrictionValues[i];
+			}
+			dataAdapter.SelectCommand = command;
+			dataAdapter.Fill (dataTable);
+			return dataTable;
+		}
+#endif // NET_2_0
+
 		#endregion // Methods
 
 #if NET_2_0
