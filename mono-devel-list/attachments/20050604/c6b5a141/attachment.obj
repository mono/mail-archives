Index: mcs/class/corlib/Mono/Runtime.cs
===================================================================
--- mcs/class/corlib/Mono/Runtime.cs	(revision 45395)
+++ mcs/class/corlib/Mono/Runtime.cs	(working copy)
@@ -41,6 +41,10 @@
 		{
 			mono_runtime_install_handlers ();
 		}
+
+		// Should not be removed intended for external use
+		[MethodImplAttribute (MethodImplOptions.InternalCall)]
+		internal static extern Version GetVersion ();
 	}
 	
 }
Index: mono/mono/metadata/icall.c
===================================================================
--- mono/mono/metadata/icall.c	(revision 45395)
+++ mono/mono/metadata/icall.c	(working copy)
@@ -64,6 +64,8 @@
 #endif
 #include "decimal.h"
 
+static MonoClass *System_Version = NULL;
+
 static MonoReflectionAssembly* ves_icall_System_Reflection_Assembly_GetCallingAssembly (void);
 
 
@@ -3478,7 +3480,6 @@
 static MonoObject*
 create_version (MonoDomain *domain, MonoAssemblyName *aname)
 {
-	static MonoClass *System_Version = NULL;
 	static MonoMethod *create_version = NULL;
 	MonoObject *result;
 	int major, minor, build, revision;
@@ -5875,6 +5876,34 @@
 	return mono_gchandle_is_in_domain (gchandle, mono_domain_get ());
 }
 
+static MonoObject*
+ves_icall_Mono_Runtime_GetVersion ()
+{
+	static MonoMethod *create_version = NULL;
+	MonoDomain *domain;
+	MonoObject *result;
+	gpointer args [1];
+
+	if (!System_Version) {
+		System_Version = mono_class_from_name (mono_defaults.corlib, "System", "Version");
+		g_assert (System_Version);
+	}
+
+	if (!create_version) {
+		MonoMethodDesc *desc = mono_method_desc_new (":.ctor(string)", FALSE);
+		create_version = mono_method_desc_search_in_class (desc, System_Version);
+		g_assert (create_version);
+		mono_method_desc_free (desc);
+	}
+
+	domain = mono_domain_get ();
+	args [0] = mono_string_new (domain, VERSION);
+	result = mono_object_new (domain, System_Version);
+	mono_runtime_invoke (create_version, result, args, NULL);
+
+	return result;
+}
+
 /* icall map */
 typedef struct {
 	const char *method;
@@ -5887,6 +5916,10 @@
 	const int size;
 } IcallMap;
 
+static const IcallEntry runtime_icalls [] = {
+	{"GetVersion", ves_icall_Mono_Runtime_GetVersion}
+};
+
 static const IcallEntry activator_icalls [] = {
 	{"CreateInstanceInternal", ves_icall_System_Activator_CreateInstanceInternal}
 };
@@ -6733,6 +6766,7 @@
 
 /* keep the entries all sorted */
 static const IcallMap icall_entries [] = {
+	{"Mono.Runtime", runtime_icalls, G_N_ELEMENTS (runtime_icalls)},
 	{"Mono.Security.Cryptography.KeyPairPersistence", keypair_icalls, G_N_ELEMENTS (keypair_icalls)},
 	{"System.Activator", activator_icalls, G_N_ELEMENTS (activator_icalls)},
 	{"System.AppDomain", appdomain_icalls, G_N_ELEMENTS (appdomain_icalls)},
