Index: mcs/class/corlib/Mono/Runtime.cs
===================================================================
--- mcs/class/corlib/Mono/Runtime.cs	(revision 45395)
+++ mcs/class/corlib/Mono/Runtime.cs	(working copy)
@@ -41,6 +41,10 @@
 		{
 			mono_runtime_install_handlers ();
 		}
+
+		// Should not be removed intended for external use
+		[MethodImplAttribute (MethodImplOptions.InternalCall)]
+		internal static extern Version GetVersion ();
 	}
 	
 }
Index: mono/mono/metadata/icall.c
===================================================================
--- mono/mono/metadata/icall.c	(revision 45395)
+++ mono/mono/metadata/icall.c	(working copy)
@@ -3476,12 +3476,11 @@
 }
 
 static MonoObject*
-create_version (MonoDomain *domain, MonoAssemblyName *aname)
+create_version (MonoDomain *domain, int major, int minor, int build, int revision)
 {
 	static MonoClass *System_Version = NULL;
 	static MonoMethod *create_version = NULL;
 	MonoObject *result;
-	int major, minor, build, revision;
 	gpointer args [4];
 	
 	if (!System_Version) {
@@ -3496,10 +3495,6 @@
 		mono_method_desc_free (desc);
 	}
 
-	major = aname->major;
-	minor = aname->minor;
-	build = aname->build;
-	revision = aname->revision;
 	args [0] = &major;
 	args [1] = &minor;
 	args [2] = &build;
@@ -3566,7 +3561,7 @@
 		aname->hashalg = assem->aname.hash_alg;
 		aname->flags = assem->aname.flags;
 		aname->versioncompat = 1; /* SameMachine (default) */
-		aname->version = create_version (domain, &assem->aname);
+		aname->version = create_version (domain, aname->major, aname->minor, aname->build, aname->revision);
 
 		if (create_culture) {
 			gpointer args [1];
@@ -3981,7 +3976,7 @@
 	aname->build = name->build;
 	aname->revision = name->revision;
 	aname->hashalg = name->hash_alg;
-	aname->version = create_version (domain, name);
+	aname->version = create_version (domain, aname->major, aname->minor, aname->build, aname->revision);
 	
 	codebase = g_filename_to_uri (absolute, NULL, NULL);
 	if (codebase) {
@@ -5875,6 +5870,12 @@
 	return mono_gchandle_is_in_domain (gchandle, mono_domain_get ());
 }
 
+static MonoObject*
+ves_icall_Mono_Runtime_GetVersion ()
+{
+	return create_version (mono_domain_get (), MAJOR_VERSION, MINOR_VERSION, BUILD_VERSION, REVISION_VERSION);
+}
+
 /* icall map */
 typedef struct {
 	const char *method;
@@ -5887,6 +5888,10 @@
 	const int size;
 } IcallMap;
 
+static const IcallEntry runtime_icalls [] = {
+	{"GetVersion", ves_icall_Mono_Runtime_GetVersion}
+};
+
 static const IcallEntry activator_icalls [] = {
 	{"CreateInstanceInternal", ves_icall_System_Activator_CreateInstanceInternal}
 };
@@ -6733,6 +6738,7 @@
 
 /* keep the entries all sorted */
 static const IcallMap icall_entries [] = {
+	{"Mono.Runtime", runtime_icalls, G_N_ELEMENTS (runtime_icalls)},
 	{"Mono.Security.Cryptography.KeyPairPersistence", keypair_icalls, G_N_ELEMENTS (keypair_icalls)},
 	{"System.Activator", activator_icalls, G_N_ELEMENTS (activator_icalls)},
 	{"System.AppDomain", appdomain_icalls, G_N_ELEMENTS (appdomain_icalls)},
Index: mono/configure.in
===================================================================
--- mono/configure.in	(revision 45395)
+++ mono/configure.in	(working copy)
@@ -5,8 +5,25 @@
 # The extra brackets are to foil regex-based scans.
 m4_ifdef([_A][M_PROG_TAR],[_A][M_SET_OPTION([tar-ustar])])
 
+MAJOR_VERSION=1
+MINOR_VERSION=1
+BUILD_VERSION=7
+REVISION_VERSION=99
+VERSION=$MAJOR_VERSION.$MINOR_VERSION.$BUILD_VERSION.$REVISION_VERSION
+
+AM_INIT_AUTOMAKE(mono,$VERSION)
+
+AC_SUBST(MAJOR_VERSION)
+AC_SUBST(MINOR_VERSION)
+AC_SUBST(BUILD_VERSION)
+AC_SUBST(REVISION_VERSION)
+
+AC_DEFINE_UNQUOTED(MAJOR_VERSION, $MAJOR_VERSION, [Major Version Number])
+AC_DEFINE_UNQUOTED(MINOR_VERSION, $MINOR_VERSION, [Minor Version Number])
+AC_DEFINE_UNQUOTED(BUILD_VERSION, $BUILD_VERSION, [Build Version Number])
+AC_DEFINE_UNQUOTED(REVISION_VERSION, $REVISION_VERSION, [Revision Version Number])
+
 AM_CONFIG_HEADER(config.h)
-AM_INIT_AUTOMAKE(mono,1.1.7.99)
 AM_MAINTAINER_MODE
 
 AC_PROG_LN_S
