Index: statement.cs
===================================================================
RCS file: /cvs/public/mcs/mcs/statement.cs,v
retrieving revision 1.176
diff -u -3 -p -r1.176 statement.cs
--- statement.cs	13 Mar 2003 22:20:42 -0000	1.176
+++ statement.cs	28 Mar 2003 19:08:01 -0000
@@ -5060,6 +5060,15 @@ namespace Mono.CSharp {
 					return false;
 			}
 
+			if ((mi.ReturnType == TypeManager.ienumerator_type) && (declaring == TypeManager.string_type))
+				//
+				// Do the same optimization as MS: skip the GetEnumerator
+				// returning an IEnumerator, and use the one returning a 
+				// CharEnumerator instead. This allows us to avoid the 
+				// try-finally block and the boxing.
+				//
+				return false;
+
 			//
 			// Ok, we can access it, now make sure that we can do something
 			// with this `GetEnumerator'
@@ -5068,9 +5077,11 @@ namespace Mono.CSharp {
 			if (mi.ReturnType == TypeManager.ienumerator_type ||
 			    TypeManager.ienumerator_type.IsAssignableFrom (mi.ReturnType) ||
 			    (!RootContext.StdLib && TypeManager.ImplementsInterface (mi.ReturnType, TypeManager.ienumerator_type))) {
-				hm.move_next = TypeManager.bool_movenext_void;
-				hm.get_current = TypeManager.object_getcurrent_void;
-				return true;
+				if (declaring != TypeManager.string_type) {
+					hm.move_next = TypeManager.bool_movenext_void;
+					hm.get_current = TypeManager.object_getcurrent_void;
+					return true;
+				}
 			}
 
 			//
@@ -5088,8 +5099,9 @@ namespace Mono.CSharp {
 
 			hm.element_type = hm.get_current.ReturnType;
 			hm.enumerator_type = return_type;
-			hm.is_disposable = TypeManager.ImplementsInterface (
-				hm.enumerator_type, TypeManager.idisposable_type);
+			hm.is_disposable = !hm.enumerator_type.IsSealed ||
+				TypeManager.ImplementsInterface (
+					hm.enumerator_type, TypeManager.idisposable_type);
 
 			return true;
 		}
