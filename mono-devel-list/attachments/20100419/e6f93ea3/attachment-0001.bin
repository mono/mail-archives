Index: mono/io-layer/collection.c
===================================================================
--- mono/io-layer/collection.c	(revision 155735)
+++ mono/io-layer/collection.c	(working copy)
@@ -58,7 +58,10 @@
         ret = pthread_attr_init (&attr);
         g_assert (ret == 0);
 
-#ifdef HAVE_PTHREAD_ATTR_SETSTACKSIZE
+/* Android implements pthread_attr_setstacksize(), but errors out when using
+ * PTHREAD_STACK_MIN: http://code.google.com/p/android/issues/detail?id=7808
+ */
+#if defined(HAVE_PTHREAD_ATTR_SETSTACKSIZE) && !defined(PLATFORM_ANDROID)
         if (set_stacksize == 0) {
 #if defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
 			ret = pthread_attr_setstacksize (&attr, 65536);
Index: mono/io-layer/ChangeLog
===================================================================
--- mono/io-layer/ChangeLog	(revision 155735)
+++ mono/io-layer/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2010-04-19  Jonathan Pryor  <jpryor@novell.com>
+
+	* collection.c, mono-mutex.c: Add Android support.
+
 2010-04-14  Zoltan Varga  <vargaz@gmail.com>
 
 	* collection.c (_wapi_collection_init): Set stack size on openbsd similarly to
Index: mono/io-layer/mono-mutex.c
===================================================================
--- mono/io-layer/mono-mutex.c	(revision 155735)
+++ mono/io-layer/mono-mutex.c	(working copy)
@@ -22,11 +22,24 @@
 
 
 #ifndef HAVE_PTHREAD_MUTEX_TIMEDLOCK
+/* Android does not implement pthread_mutex_timedlock(), but does provide an
+ * unusual declaration: http://code.google.com/p/android/issues/detail?id=7807
+ */
+#if defined(PLATFORM_ANDROID)
 int pthread_mutex_timedlock (pthread_mutex_t *mutex,
+			    struct timespec *timeout);
+#else
+int pthread_mutex_timedlock (pthread_mutex_t *mutex,
 			    const struct timespec *timeout);
+#endif
 
+#if defined(PLATFORM_ANDROID)
 int
+pthread_mutex_timedlock (pthread_mutex_t *mutex, struct timespec *timeout)
+#else
+int
 pthread_mutex_timedlock (pthread_mutex_t *mutex, const struct timespec *timeout)
+#endif
 {
 	struct timeval timenow;
 	struct timespec sleepytime;
Index: mono/mini/exceptions-arm.c
===================================================================
--- mono/mini/exceptions-arm.c	(revision 155735)
+++ mono/mini/exceptions-arm.c	(working copy)
@@ -12,7 +12,11 @@
 #include <glib.h>
 #include <signal.h>
 #include <string.h>
+#if defined(PLATFORM_ANDROID)
+#include <asm/sigcontext.h>
+#else
 #include <ucontext.h>
+#endif
 
 #include <mono/arch/arm/arm-codegen.h>
 #include <mono/metadata/appdomain.h>
Index: mono/mini/ChangeLog
===================================================================
--- mono/mini/ChangeLog	(revision 155735)
+++ mono/mini/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2010-04-19  Jonathan Pryor  <jpryor@novell.com>
+
+	* exceptions-arm.c: Add Android support for sigcontext structure.
+
 2010-04-16  Zoltan Varga  <vargaz@gmail.com>
 
 	* mini.c (mono_jit_compile_method_inner): Avoid calling
Index: configure.in
===================================================================
--- configure.in	(revision 155735)
+++ configure.in	(working copy)
@@ -169,7 +169,7 @@
 			CPPFLAGS="$CPPFLAGS -DUSE_MUNMAP"
 		fi
 		libmono_cflags="-D_REENTRANT"
-		libmono_ldflags="-lpthread"
+		AC_CHECK_LIB(pthread, pthread_self, libmono_ldflags="-lpthread",,)
 		libdl="-ldl"
 		libgc_threads=pthreads
 		AOT_SUPPORTED="yes"
@@ -2399,6 +2416,10 @@
 	fi
 ], [with_moonlight=no])
 
+AC_CHECK_HEADER([malloc.h], 
+		[AC_DEFINE([HAVE_USR_INCLUDE_MALLOC_H], [1], 
+			[Define to 1 if you have /usr/include/malloc.h.])],,)
+
 dnl
 dnl Consistency settings
 dnl
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 155735)
+++ ChangeLog	(working copy)
@@ -1,3 +1,13 @@
+2010-04-19  Jonathan Pryor  <jpryor@novell.com>
+
+	* configure.in: Use AC_CHECK_LIB() to check for pthread instead of
+	  just blindly linking to -lpthread, as Android includes pthread
+	  support within libc and doesn't provide a separate libpthread.
+	  Add header, structure member, and function checks as Android doesn't
+	  provide all the headers, structure members, and functions that a
+	  "full" Linux distro includes.  Android provides <malloc.h>, so check
+	  for it and define HAVE_USR_INCLUDE_MALLOC_H when present.
+
 2010-04-19  Zoltan Varga  <vargaz@gmail.com>
 
 	* configure.in: Add a --enable-minimal=normalization option to disable support
