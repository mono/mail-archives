? EnumConversion.diff
Index: EnumConverter.cs
===================================================================
RCS file: /mono/mcs/class/System/System.ComponentModel/EnumConverter.cs,v
retrieving revision 1.3
diff -u -r1.3 EnumConverter.cs
--- EnumConverter.cs	5 Jul 2003 12:57:43 -0000	1.3
+++ EnumConverter.cs	10 Sep 2003 14:51:05 -0000
@@ -57,13 +57,7 @@
 			if (val == null)
 				return base.ConvertFrom(context, culture, value);
 
-			string [] subValues = val.Split (new char [] {','});
-					
-			long longResult = 0;
-			foreach (string s in subValues)
-				longResult |= (long) Enum.Parse (type, s, true);
-
-			return Enum.ToObject (type, longResult);
+			return Enum.Parse (type, val, true);
 		}
 
 		public override bool IsValid (ITypeDescriptorContext context, object value)
Index: TypeDescriptor.cs
===================================================================
RCS file: /mono/mcs/class/System/System.ComponentModel/TypeDescriptor.cs,v
retrieving revision 1.13
diff -u -r1.13 TypeDescriptor.cs
--- TypeDescriptor.cs	16 Jul 2003 01:32:32 -0000	1.13
+++ TypeDescriptor.cs	10 Sep 2003 14:51:05 -0000
@@ -195,7 +195,6 @@
 				defaultConverters.Add (typeof (Array), typeof (ArrayConverter));
 				defaultConverters.Add (typeof (CultureInfo), typeof (CultureInfoConverter));
 				defaultConverters.Add (typeof (DateTime), typeof (DateTimeConverter));
-				defaultConverters.Add (typeof (Enum), typeof (EnumConverter));
 				defaultConverters.Add (typeof (Guid), typeof (GuidConverter));
 				defaultConverters.Add (typeof (TimeSpan), typeof (TimeSpanConverter));
 				defaultConverters.Add (typeof (ICollection), typeof (CollectionConverter));
@@ -208,38 +207,36 @@
 	
 	public static TypeConverter GetConverter (Type type)
 	{
-		Type t = DefaultConverters [type] as Type;
-		string converter_name = null;
-		if (t == null) {
-			object [] attrs = type.GetCustomAttributes (false);
-			foreach (object o in attrs){
-				if (o is TypeConverterAttribute){
-					TypeConverterAttribute tc = (TypeConverterAttribute) o;
-					converter_name = tc.ConverterTypeName;
-					break;
+		if (type.IsEnum) {
+			// EnumConverter needs to know the enum type
+			return new EnumConverter(type);
+		} else {
+			Type t = DefaultConverters [type] as Type;
+			string converter_name = null;
+			if (t == null) {
+				object [] attrs = type.GetCustomAttributes (false);
+				foreach (object o in attrs){
+					if (o is TypeConverterAttribute){
+						TypeConverterAttribute tc = (TypeConverterAttribute) o;
+						converter_name = tc.ConverterTypeName;
+						break;
+					}
 				}
-			}
-
-			if (converter_name == null && type.IsEnum) {
-				t = (Type) DefaultConverters [typeof (Enum)];
+			} else {
 				converter_name = t.FullName;
 			}
-
-		} else {
-			converter_name = t.FullName;
-		}
+	
+			if (converter_name == null)
+				return null;
+	
+			object converter = null;
+			try {
+				converter = Activator.CreateInstance (Type.GetType (converter_name));
+			} catch (Exception){
+			}
 		
-
-		if (converter_name == null)
-			return null;
-
-		object converter = null;
-		try {
-			converter = Activator.CreateInstance (Type.GetType (converter_name));
-		} catch (Exception){
+			return converter as TypeConverter;
 		}
-	
-		return converter as TypeConverter;
 	}
 
 	[MonoTODO]
