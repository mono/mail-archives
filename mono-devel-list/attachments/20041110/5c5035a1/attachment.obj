? sqlite.diff
Index: Sqlite.cs
===================================================================
RCS file: /cvs/public/mcs/class/Mono.Data.SqliteClient/Mono.Data.SqliteClient/Sqlite.cs,v
retrieving revision 1.1
diff -u -r1.1 Sqlite.cs
--- Sqlite.cs	30 Sep 2004 07:58:38 -0000	1.1
+++ Sqlite.cs	10 Nov 2004 18:41:24 -0000
@@ -105,30 +105,78 @@
 		#region PInvoke Functions
 		
 		[DllImport("sqlite")]
-		internal static extern IntPtr sqlite_open (string dbname, int db_mode, out string errstr);
+		internal static extern IntPtr sqlite_open (string dbname, int db_mode, out IntPtr errstr);
 
 		[DllImport("sqlite")]
 		internal static extern void sqlite_close (IntPtr sqlite_handle);
 
 		[DllImport("sqlite")]
-		internal unsafe static extern SqliteError sqlite_exec (IntPtr handle, string sql, SqliteCallbackFunction callback, IntPtr user_data, byte **errstr_ptr);
-
-		[DllImport("sqlite")]
 		internal static extern int sqlite_changes (IntPtr handle);
 
 		[DllImport("sqlite")]
 		internal static extern int sqlite_last_insert_rowid (IntPtr sqlite_handle);
 
 		[DllImport ("sqlite")]
-		internal unsafe static extern void sqliteFree (void *ptr);
+		internal static extern void sqliteFree (IntPtr ptr);
 		
-		#endregion
-		
-		#region Delegates
+		[DllImport ("sqlite")]
+		internal static extern SqliteError sqlite_compile (IntPtr sqlite_handle, string zSql, out IntPtr pzTail, out IntPtr pVm, out IntPtr errstr);
+
+		[DllImport ("sqlite")]
+		internal static extern SqliteError sqlite_step (IntPtr pVm, out int pN, out IntPtr pazValue, out IntPtr pazColName);
+
+		[DllImport ("sqlite")]
+		internal static extern SqliteError sqlite_finalize (IntPtr pVm, out IntPtr pzErrMsg);
+
+		[DllImport ("sqlite")]
+                internal static extern SqliteError sqlite_exec (IntPtr handle, string sql, IntPtr callback, IntPtr user_data, out IntPtr errstr_ptr);
 		
-		internal unsafe delegate int SqliteCallbackFunction (ref object o, int argc, sbyte **argv, sbyte **colnames);
+		[DllImport("sqlite3")]
+		internal static extern int sqlite3_open (string dbname, out IntPtr handle);
+
+		[DllImport("sqlite3")]
+		internal static extern void sqlite3_close (IntPtr sqlite_handle);
+
+		[DllImport("sqlite3")]
+		internal static extern string sqlite3_errmsg (IntPtr sqlite_handle);
+
+		[DllImport("sqlite3")]
+		internal static extern int sqlite3_changes (IntPtr handle);
+
+		[DllImport("sqlite3")]
+		internal static extern int sqlite3_last_insert_rowid (IntPtr sqlite_handle);
+
+		[DllImport ("sqlite3")]
+		internal static extern void sqlite3Free (IntPtr ptr);
 		
+		[DllImport ("sqlite3")]
+		internal static extern SqliteError sqlite3_prepare (IntPtr sqlite_handle, string zSql, int zSqllen, out IntPtr pVm, out IntPtr pzTail);
+
+		[DllImport ("sqlite3")]
+		internal static extern SqliteError sqlite3_step (IntPtr pVm);
+
+		[DllImport ("sqlite3")]
+		internal static extern SqliteError sqlite3_finalize (IntPtr pVm, out IntPtr pzErrMsg);
+
+		[DllImport ("sqlite3")]
+                internal static extern SqliteError sqlite3_exec (IntPtr handle, string sql, IntPtr callback, IntPtr user_data, out IntPtr errstr_ptr);
+	
+		[DllImport ("sqlite3")]
+		internal static extern IntPtr sqlite3_column_name (IntPtr pVm, int col);
+		[DllImport ("sqlite3")]
+		internal static extern IntPtr sqlite3_column_text (IntPtr pVm, int col);
+		[DllImport ("sqlite3")]
+		internal static extern IntPtr sqlite3_column_blob (IntPtr pVm, int col);
+		[DllImport ("sqlite3")]
+		internal static extern int sqlite3_column_bytes (IntPtr pVm, int col);
+		[DllImport ("sqlite3")]
+		internal static extern int sqlite3_column_count (IntPtr pVm);
+		[DllImport ("sqlite3")]
+		internal static extern int sqlite3_column_type (IntPtr pVm, int col);
+		[DllImport ("sqlite3")]
+		internal static extern Int64 sqlite3_column_int64 (IntPtr pVm, int col);
+		[DllImport ("sqlite3")]
+		internal static extern double sqlite3_column_double (IntPtr pVm, int col);
 		#endregion
-		
 	}
 }
Index: SqliteCommand.cs
===================================================================
RCS file: /cvs/public/mcs/class/Mono.Data.SqliteClient/Mono.Data.SqliteClient/SqliteCommand.cs,v
retrieving revision 1.6
diff -u -r1.6 SqliteCommand.cs
--- SqliteCommand.cs	30 Sep 2004 03:00:09 -0000	1.6
+++ SqliteCommand.cs	10 Nov 2004 18:41:24 -0000
@@ -143,7 +143,10 @@
 		
 		internal int NumChanges () 
 		{
-			return Sqlite.sqlite_changes(parent_conn.Handle);
+			if (parent_conn.Version == 3)
+				return Sqlite.sqlite3_changes(parent_conn.Handle);
+			else
+				return Sqlite.sqlite_changes(parent_conn.Handle);
 		}
 		
 		#endregion
@@ -210,47 +213,47 @@
 		public SqliteDataReader ExecuteReader (CommandBehavior behavior, bool want_results, out int rows_affected)
 		{
 			SqliteDataReader reader = null;
-			SqliteError err;
+			SqliteError err = SqliteError.OK;
+			IntPtr errMsg = IntPtr.Zero; 
 			
 			parent_conn.StartExec ();
 			
 			string msg = "";
-			unsafe {
-				byte *msg_result;
-				
-				try {
-					if (want_results) {
-						reader = new SqliteDataReader (this);
-						
-						err = Sqlite.sqlite_exec(parent_conn.Handle,
-												sql,
-												new Sqlite.SqliteCallbackFunction (reader.SqliteCallback),
-												IntPtr.Zero, &msg_result);
-						
-						reader.ReadingDone ();
-					} else {
-						err = Sqlite.sqlite_exec(parent_conn.Handle,
-												sql,
-												null,
-												IntPtr.Zero, &msg_result);
-					}
-				} finally {
-					parent_conn.EndExec ();
-				}
-				
-				if (msg_result != null) {
-					StringBuilder sb = new StringBuilder ();
-					
-					for (byte *y = msg_result; *y != 0; y++)
-						sb.Append ((char) *y);
-					msg = sb.ToString ();
-					
-					Sqlite.sqliteFree(msg_result);
+
+			try {
+				if (want_results) {
+					IntPtr pVm = IntPtr.Zero;
+					IntPtr pzTail = IntPtr.Zero;
+					if (parent_conn.Version == 3)
+						err = Sqlite.sqlite3_prepare (parent_conn.Handle, sql, sql.Length, out pVm, out pVm);
+					else
+						err = Sqlite.sqlite_compile (parent_conn.Handle, sql, out pzTail, out pVm, out errMsg);
+					if (err == SqliteError.OK)
+						reader = new SqliteDataReader (this, pVm, parent_conn.Version);
+					if (parent_conn.Version == 3)
+						err = Sqlite.sqlite3_finalize (pVm, out errMsg);
+					else
+						err = Sqlite.sqlite_finalize (pVm, out errMsg);
+				} else {
+					if (parent_conn.Version == 3)
+						err = Sqlite.sqlite3_exec (parent_conn.Handle, sql, IntPtr.Zero, IntPtr.Zero, out errMsg);
+					else
+						err = Sqlite.sqlite_exec (parent_conn.Handle, sql, IntPtr.Zero, IntPtr.Zero, out errMsg);
 				}
+			} finally {			
+				parent_conn.EndExec ();
 			}
-			
-			if (err != SqliteError.OK)
+
+			if (err != SqliteError.OK) {
+				if (errMsg != IntPtr.Zero) {
+					msg = Marshal.PtrToStringAuto (errMsg);
+					if (parent_conn.Version == 3)
+						Sqlite.sqlite3Free (errMsg);
+					else
+						Sqlite.sqliteFree (errMsg);
+				}
 				throw new ApplicationException ("Sqlite error " + msg);
+			}
 			
 			rows_affected = NumChanges ();
 			
@@ -259,7 +262,10 @@
 		
 		public int LastInsertRowID () 
 		{
-			return Sqlite.sqlite_last_insert_rowid(parent_conn.Handle);
+			if (parent_conn.Version == 3)
+				return Sqlite.sqlite3_last_insert_rowid(parent_conn.Handle);
+			else
+				return Sqlite.sqlite_last_insert_rowid(parent_conn.Handle);
 		}
 		
 		#endregion
Index: SqliteConnection.cs
===================================================================
RCS file: /cvs/public/mcs/class/Mono.Data.SqliteClient/Mono.Data.SqliteClient/SqliteConnection.cs,v
retrieving revision 1.5
diff -u -r1.5 SqliteConnection.cs
--- SqliteConnection.cs	30 Sep 2004 03:00:09 -0000	1.5
+++ SqliteConnection.cs	10 Nov 2004 18:41:24 -0000
@@ -42,6 +42,7 @@
 		private string conn_str;
 		private string db_file;
 		private int db_mode;
+		private int db_version;
 		private IntPtr sqlite_handle;
 		private ConnectionState state;
 		
@@ -53,6 +54,7 @@
 		{
 			db_file = null;
 			db_mode = 0644;
+			db_version = 2;
 			state = ConnectionState.Closed;
 			sqlite_handle = IntPtr.Zero;
 		}
@@ -88,13 +90,20 @@
 			get { return state; }
 		}
 		
+		internal int Version {
+			get { return db_version; }
+		}
+
 		internal IntPtr Handle {
 			get { return sqlite_handle; }
 		}
 		
 		public int LastInsertRowId {
 			get {
-				return Sqlite.sqlite_last_insert_rowid (Handle);
+				if (Version == 3)
+					return Sqlite.sqlite3_last_insert_rowid (Handle);
+				else
+					return Sqlite.sqlite_last_insert_rowid (Handle);
 			}
 		}
 		
@@ -139,6 +148,8 @@
 						}
 					} else if (token == "mode") {
 						db_mode = Convert.ToInt32 (tvalue);
+					} else if (token == "version") {
+						db_version = Convert.ToInt32 (tvalue);
 					}
 				}
 				
@@ -193,7 +204,10 @@
 			
 			state = ConnectionState.Closed;
 		
-			Sqlite.sqlite_close(sqlite_handle);
+			if (Version == 3)
+				Sqlite.sqlite3_close (sqlite_handle);
+			else 
+				Sqlite.sqlite_close(sqlite_handle);
 			sqlite_handle = IntPtr.Zero;
 		}
 		
@@ -222,11 +236,19 @@
 				return;
 			}
 			
-			string errmsg;
-			sqlite_handle = Sqlite.sqlite_open(db_file, db_mode, out errmsg);
-			
-			if (errmsg != null) {
-				throw new ApplicationException (errmsg);
+			IntPtr errmsg = IntPtr.Zero;
+			if (Version == 3) {
+				int err = Sqlite.sqlite3_open(db_file, out sqlite_handle);
+				if (err == (int)SqliteError.ERROR)
+					throw new ApplicationException (Sqlite.sqlite3_errmsg (sqlite_handle));
+			} else {
+				sqlite_handle = Sqlite.sqlite_open(db_file, db_mode, out errmsg);
+			
+				if (errmsg != IntPtr.Zero) {
+					string msg = Marshal.PtrToStringAuto (errmsg);
+					Sqlite.sqliteFree (errmsg);
+					throw new ApplicationException (msg);
+				}
 			}
 			state = ConnectionState.Open;
 		}
Index: SqliteDataReader.cs
===================================================================
RCS file: /cvs/public/mcs/class/Mono.Data.SqliteClient/Mono.Data.SqliteClient/SqliteDataReader.cs,v
retrieving revision 1.7
diff -u -r1.7 SqliteDataReader.cs
--- SqliteDataReader.cs	30 Sep 2004 03:00:09 -0000	1.7
+++ SqliteDataReader.cs	10 Nov 2004 18:41:25 -0000
@@ -55,7 +55,7 @@
 
 		#region Constructors and destructors
 		
-		internal SqliteDataReader (SqliteCommand cmd)
+		internal SqliteDataReader (SqliteCommand cmd, IntPtr pVm, int version)
 		{
 			command = cmd;
 			rows = new ArrayList ();
@@ -64,6 +64,8 @@
 			closed = false;
 			current_row = -1;
 			reading = true;
+			ReadpVm (pVm, version);
+			ReadingDone ();
 		}
 		
 		#endregion
@@ -98,29 +100,80 @@
 
 		#region Internal Methods
 		
-		internal unsafe int SqliteCallback (ref object o, int argc, sbyte **argv, sbyte **colnames)
+		internal void ReadpVm (IntPtr pVm, int version)
 		{
-			// cache names of columns if we need to
-			if (column_names.Count == 0) {
-				for (int i = 0; i < argc; i++) {
-					string col = new String (colnames[i]);
-					columns.Add (col);
-					column_names[col.ToLower ()] = i;
+			int pN = 0;
+			IntPtr pazValue = IntPtr.Zero;
+			IntPtr pazColName = IntPtr.Zero;
+			SqliteError res;
+			IntPtr errStr = IntPtr.Zero;
+			string msg = "";
+
+			while (true) {
+				if (version == 3) {
+					res = Sqlite.sqlite3_step (pVm);
+					pN = Sqlite.sqlite3_column_count (pVm);
+				} else
+					res = Sqlite.sqlite_step (pVm, out pN, out pazValue, out pazColName);
+				if (res == SqliteError.ERROR) {		
+					throw new ApplicationException ("Sqlite error");
 				}
-			}
-			
-			ArrayList data_row = new ArrayList (argc);
- 			for (int i = 0; i < argc; i++) {
-				if (argv[i] != ((sbyte *)0)) {
-					data_row.Add(new String (argv[i]));
-				} else {
-					data_row.Add(null);
+				if (res == SqliteError.DONE) {
+					break;
+				}
+				// We have some data; lets read it
+				if (column_names.Count == 0) {
+					for (int i = 0; i < pN; i++) {
+						string colName = "";
+						if (version == 2) {
+							IntPtr fieldPtr = (IntPtr)Marshal.ReadInt32 (pazColName, i*IntPtr.Size);
+							colName = Marshal.PtrToStringAuto (fieldPtr);
+						} else {
+							colName = Marshal.PtrToStringAuto (Sqlite.sqlite3_column_name (pVm, i));
+						}
+						columns.Add (colName);
+						column_names [colName] = i;
+					}
 				}
+				ArrayList data_row = new ArrayList (pN);
+				for (int i = 0; i < pN; i++) {
+					string colData = "";
+					if (version == 2) {
+						IntPtr fieldPtr = (IntPtr)Marshal.ReadInt32 (pazValue, i*IntPtr.Size);
+						colData = Marshal.PtrToStringAuto (fieldPtr);
+						data_row.Add (Marshal.PtrToStringAuto (fieldPtr));
+					} else {
+						switch (Sqlite.sqlite3_column_type (pVm, i)) {
+							case 1:
+								Int64 sqliteint64 = Sqlite.sqlite3_column_int64 (pVm, i);
+								data_row.Add (sqliteint64);
+								break;
+							case 2:
+								double sqlitedouble = Sqlite.sqlite3_column_double (pVm, i);
+								data_row.Add (sqlitedouble);
+								break;
+							case 3:
+								colData = Marshal.PtrToStringAuto (Sqlite.sqlite3_column_text (pVm, i));
+								data_row.Add (colData);
+								break;
+							case 4:
+								int blobbytes = Sqlite.sqlite3_column_bytes (pVm, i);
+								IntPtr blobptr = Sqlite.sqlite3_column_blob (pVm, i);
+								byte[] blob = new byte[blobbytes];
+								Marshal.Copy (blobptr, blob, 0, blobbytes);
+								data_row.Add (blob);
+								break;
+							case 5:
+								data_row.Add (null);
+								break;
+							default:
+								throw new ApplicationException ("FATAL: Unknown sqlite3_column_type");
+						}
+					}	
+				}
+				rows.Add (data_row);
 			}
-			rows.Add (data_row);
-			return 0;
 		}
-		
 		internal void ReadingDone ()
 		{
 			records_affected = command.NumChanges ();
