diff -ru mono-0.95-orig/mono/metadata/icall.c mono-0.95/mono/metadata/icall.c
--- mono-0.95-orig/mono/metadata/icall.c	2004-05-29 17:46:47.000000000 +0200
+++ mono-0.95/mono/metadata/icall.c	2004-06-02 09:58:19.359908034 +0200
@@ -4894,8 +4894,10 @@
 		return;
 	mono_lookup_pinvoke_call (method, &exc_class, &exc_arg);
 	if (exc_class) {
-		mono_raise_exception( 
-			mono_exception_from_name_msg (mono_defaults.corlib, "System", exc_class, exc_arg ) );
+		MonoException *exc = mono_exception_from_name_msg (mono_defaults.corlib, "System", exc_class, exc_arg );
+		if(getenv("MONO_DEBUG"))
+			g_free((gpointer)exc_arg);
+		mono_raise_exception (exc);
 	}
 	/* create the wrapper, too? */
 }
Only in mono-0.95/mono/metadata: icall.c.orig
diff -ru mono-0.95-orig/mono/metadata/loader.c mono-0.95/mono/metadata/loader.c
--- mono-0.95-orig/mono/metadata/loader.c	2004-05-27 06:03:09.000000000 +0200
+++ mono-0.95/mono/metadata/loader.c	2004-06-02 09:58:19.368906775 +0200
@@ -550,6 +550,57 @@
 
 static int wine_test_needed = 1;
 
+GModule *
+mono_module_open(const gchar *filename, GString *errors)
+{
+	GModule *module;
+
+	module = g_module_open (filename, G_MODULE_BIND_LAZY);
+    
+	if(errors) {
+		if( errors->len )
+			g_string_append (errors, " ==> ");
+    
+		g_string_append (errors, "Trying '");
+		g_string_append (errors, filename);
+		g_string_append (errors, "': ");
+		if( !module ) {
+			g_string_append (errors, g_module_error());
+		} else {
+			g_string_append (errors, "loaded.");
+		}
+	}
+
+	return module;
+}
+    
+gboolean
+mono_module_symbol(GModule *module, const gchar *symbolname, 
+		   gpointer *symbol, GString *errors)
+{
+	gboolean ret;
+
+	g_assert (symbol != NULL);
+
+	ret = g_module_symbol (module, symbolname, symbol); 
+    
+	if(errors) {
+		if( errors->len )
+			g_string_append (errors, " ==> ");
+    
+		g_string_append (errors, "Searching function '");
+		g_string_append (errors, symbolname);
+		g_string_append (errors, "': ");
+		if( !*symbol ) {
+			g_string_append (errors, g_module_error());
+		} else {
+			g_string_append (errors, "found.");
+		}
+	}
+
+	return ret;
+}
+
 gpointer
 mono_lookup_pinvoke_call (MonoMethod *method, const char **exc_class, const char **exc_arg)
 {
@@ -566,6 +617,7 @@
 	char *full_name, *file_name;
 	int i;
 	GModule *gmodule = NULL;
+	GString *errors = NULL;
 
 	g_assert (method->flags & METHOD_ATTRIBUTE_PINVOKE_IMPL);
 
@@ -598,6 +650,10 @@
 	}
 #endif
 	
+	// Enable detailed error reporting
+	if(getenv("MONO_DEBUG") && exc_class)
+		errors = g_string_new("");
+	
 	/*
 	 * Try loading the module using a variety of names
 	 */
@@ -617,18 +673,18 @@
 
 		if (!gmodule) {
 			full_name = g_module_build_path (NULL, file_name);
-			gmodule = g_module_open (full_name, G_MODULE_BIND_LAZY);
+			gmodule = mono_module_open (full_name, errors);
 			g_free (full_name);
 		}
 
 		if (!gmodule) {
 			full_name = g_module_build_path (".", file_name);
-			gmodule = g_module_open (full_name, G_MODULE_BIND_LAZY);
+			gmodule = mono_module_open (full_name, errors);
 			g_free (full_name);
 		}
 
 		if (!gmodule) {
-			gmodule=g_module_open (file_name, G_MODULE_BIND_LAZY);
+			gmodule = mono_module_open (file_name, errors);
 		}
 
 		g_free (file_name);
@@ -638,44 +694,43 @@
 	}
 
 	if (!gmodule) {
-		if (g_getenv ("MONO_DEBUG")) {
-			gchar *error = g_strdup (g_module_error ());
-			g_message ("Error loading '%s': %s\n", orig_scope, error);
-			g_free (error);
-		}
-
 		if (exc_class) {
 			*exc_class = "DllNotFoundException";
-			*exc_arg = orig_scope;
+			if (errors) {
+				*exc_arg = errors->str;
+				g_string_free (errors, FALSE);
+			}
+			else
+				*exc_arg = orig_scope;
 		}
 		return NULL;
 	}
 
 	if (piinfo->piflags & PINVOKE_ATTRIBUTE_NO_MANGLE) {
-		g_module_symbol (gmodule, import, &method->addr); 
+		mono_module_symbol (gmodule, import, &method->addr, errors); 
 	} else {
 		char *mangled_name;
 
 		switch (piinfo->piflags & PINVOKE_ATTRIBUTE_CHAR_SET_MASK) {
 		case PINVOKE_ATTRIBUTE_CHAR_SET_UNICODE:
 			mangled_name = g_strconcat (import, "W", NULL);
-			g_module_symbol (gmodule, mangled_name, &method->addr); 
+			mono_module_symbol (gmodule, mangled_name, &method->addr, errors); 
 			g_free (mangled_name);
 
 			if (!method->addr)
-				g_module_symbol (gmodule, import, &method->addr); 
+				mono_module_symbol (gmodule, import, &method->addr, errors); 
 			break;
 		case PINVOKE_ATTRIBUTE_CHAR_SET_AUTO:
-			g_module_symbol (gmodule, import, &method->addr); 
+			mono_module_symbol (gmodule, import, &method->addr, errors); 
 			break;
 		case PINVOKE_ATTRIBUTE_CHAR_SET_ANSI:
 		default:
 			mangled_name = g_strconcat (import, "A", NULL);
-			g_module_symbol (gmodule, mangled_name, &method->addr); 
+			mono_module_symbol (gmodule, mangled_name, &method->addr, errors); 
 			g_free (mangled_name);
 
 			if (!method->addr)
-				g_module_symbol (gmodule, import, &method->addr); 
+				mono_module_symbol (gmodule, import, &method->addr, errors); 
 			       
 			break;					
 		}
@@ -684,10 +739,19 @@
 	if (!method->addr) {
 		if (exc_class) {
 			*exc_class = "EntryPointNotFoundException";
-			*exc_arg = import;
+			if (errors) {
+				*exc_arg = errors->str;
+				g_string_free (errors, FALSE);
+			}
+			else
+				*exc_arg = import;
 		}
 		return NULL;
 	}
+
+	if( errors )
+		g_string_free (errors, TRUE);
+	
 	return method->addr;
 }
 
Only in mono-0.95/mono/metadata: loader.c.orig
diff -ru mono-0.95-orig/mono/metadata/loader.h mono-0.95/mono/metadata/loader.h
--- mono-0.95-orig/mono/metadata/loader.h	2004-05-16 23:29:47.000000000 +0200
+++ mono-0.95/mono/metadata/loader.h	2004-06-02 09:58:19.369906635 +0200
@@ -167,6 +167,13 @@
 void
 mono_dllmap_insert (MonoImage *assembly, const char *dll, const char *func, const char *tdll, const char *tfunc);
 
+GModule *
+mono_module_open(const char *filename, GString *errors);
+
+gboolean
+mono_module_symbol(GModule *module, const gchar *symbolname, 
+		   gpointer *symbol, GString *errors);
+
 gpointer
 mono_lookup_pinvoke_call (MonoMethod *method, const char **exc_class, const char **exc_arg);
 
