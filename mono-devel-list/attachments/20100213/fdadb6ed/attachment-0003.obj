Index: System.Web/Test/System.Web.Security/RolesTest.cs
===================================================================
--- System.Web/Test/System.Web.Security/RolesTest.cs	(revision 151686)
+++ System.Web/Test/System.Web.Security/RolesTest.cs	(working copy)
@@ -42,13 +42,20 @@
 namespace MonoTests.System.Web.Security {
 
 	[TestFixture]
-	public class RolesTest {
+	public class RolesTest : IsolatedWebHostingPerTest {
 
+		public override void OnSetupBeforeEachTest ()
+		{
+			// For this test-fixture, each test would provide its 
+			// own web configuration or fall back to a clean default
+			WebTest.CleanApp ();
+		}
+
 		[Test]
         [Category ("NotWorking")]
-		public void Enabled ()
+		public void StaticDefaults ()
 		{
-			Assert.IsFalse (Roles.Enabled, "Enabled");
+			Assert.IsFalse (Roles.Enabled);
 
 			Assert.IsFalse (Roles.CacheRolesInCookie, "CacheRolesInCookie");
 			Assert.AreEqual (".ASPXROLES", Roles.CookieName, "CookieName");
@@ -67,10 +74,65 @@
 			// - Providers
 		}
 
+#pragma warning disable 219
 		[Test]
+		public void Enabled ()
+		{
+			WebTest t;
+
+			// Tests involving no role-provider configuration
+			WebTest.SetupHosting (() => {
+				OnSetupHosting ();  // i.e., WebTest.CopyResources
+				WebTest.CopyBinary (global::System.Text.Encoding.UTF8.GetBytes (
+					@"<?xml version='1.0' encoding='utf-8'?><configuration />"), "Web.config");
+			});
+			t = new WebTest (new HandlerInvoker (() => {
+				Assert.IsFalse (Roles.Enabled, "#1A");
+				AssertThrows<ProviderException> (() => { var temp = Roles.Provider; }, "#1B");
+				AssertThrows<ProviderException> (() => { var temp = Roles.Providers; }, "#1C");
+			}));
+			t.Run ();
+			global::System.Diagnostics.Trace.WriteLineIf ((t.Response.StatusCode != global::System.Net.HttpStatusCode.OK), t.Response.Body);
+			Assert.AreEqual (global::System.Net.HttpStatusCode.OK, t.Response.StatusCode, "HttpStatusCode");
+
+			// Tests involving a role-provider that is configured but disabled
+			WebTest.SetupHosting (() => {
+				OnSetupHosting ();  // i.e., WebTest.CopyResources
+				WebTest.CopyBinary (GetWebConfigData<MonoTests.SystemWeb.Framework.TestRoleProvider> ("enabled='false'", null), "Web.config");
+			});
+			t = new WebTest (new HandlerInvoker (() => {
+				Assert.IsFalse (Roles.Enabled, "#2A");
+				AssertThrows<ProviderException> (() => { var temp = Roles.Provider; }, "#2B");
+				AssertThrows<ProviderException> (() => { var temp = Roles.Providers; }, "#2C");
+			}));
+			t.Run ();
+			global::System.Diagnostics.Trace.WriteLineIf ((t.Response.StatusCode != global::System.Net.HttpStatusCode.OK), t.Response.Body);
+			Assert.AreEqual (global::System.Net.HttpStatusCode.OK, t.Response.StatusCode, "HttpStatusCode");
+
+			// Tests involving a role-provider that is configured and enabled
+			WebTest.SetupHosting (() => {
+				OnSetupHosting ();  // i.e., WebTest.CopyResources
+				WebTest.CopyBinary (GetWebConfigData<MonoTests.SystemWeb.Framework.TestRoleProvider> ("enabled='true'", null), "Web.config");
+			});
+			t = new WebTest (new HandlerInvoker (() => {
+				Assert.IsTrue (Roles.Enabled, "#3A");
+				Assert.IsNotNull (Roles.Provider, "#3B");
+				Assert.IsNotNull (Roles.Providers, "#3C1");
+				Assert.AreEqual (1, Roles.Providers.Count, "#3C2");
+			}));
+			t.Run ();
+			global::System.Diagnostics.Trace.WriteLineIf ((t.Response.StatusCode != global::System.Net.HttpStatusCode.OK), t.Response.Body);
+			Assert.AreEqual (global::System.Net.HttpStatusCode.OK, t.Response.StatusCode, "HttpStatusCode");
+		}
+
+		[Test]
 		[Category ("NunitWeb")]
 		public void IsUserInRole ()
 		{
+			WebTest.SetupHosting (() => {
+				OnSetupHosting ();  // i.e., WebTest.CopyResources
+				WebTest.CopyBinary (GetWebConfigData<MonoTests.SystemWeb.Framework.TestRoleProvider> (null, null), "Web.config");
+			});
 			WebTest t = new WebTest (PageInvoker.CreateOnLoad ((Page p) => {
 						Assert.IsTrue (Roles.Enabled, "Enabled");
 						Assert.IsTrue (Roles.IsUserInRole ("true", "rolename"), "#1");
@@ -83,12 +145,151 @@
 						//       when roles are queried before the user is logged on
 						Assert.IsFalse (Roles.IsUserInRole (string.Empty, "rolename"), "#3a");
 						Assert.IsFalse (Roles.IsUserInRole ("rolename"), "#3b");
-					}));
+
+						AssertThrows<ArgumentNullException> (() => { var temp = Roles.IsUserInRole (null, "rolename"); }, "#4");
+			}));
 			t.Run ();
 			global::System.Diagnostics.Trace.WriteLineIf ((t.Response.StatusCode != global::System.Net.HttpStatusCode.OK), t.Response.Body);
 			Assert.AreEqual (global::System.Net.HttpStatusCode.OK, t.Response.StatusCode, "HttpStatusCode");
 		}
+
+		/// <remarks>
+		/// Provides functionality similar to Assert.Throws that is available on newer versions of NUnit.
+		/// </remarks>
+		private static T AssertThrows<T> (Action code, string message, params object [] args) where T : Exception
+		{
+			Exception actual = null;
+			try {
+				code ();
+			} catch (Exception exception) {
+				actual = exception;
+			}
+			Assert.That (actual, new NUnit.Framework.Constraints.ExactTypeConstraint (typeof (T)), message, args);
+			return (T) actual;
+		}
+#pragma warning restore 219
+
+		private static byte [] GetWebConfigData<T> (string roleManagerAttributes, string roleProviderAttributes) where T : RoleProvider
+		{
+			return global::System.Text.Encoding.UTF8.GetBytes (
+				@"<?xml version='1.0' encoding='utf-8'?>
+				<configuration>
+					<system.web>
+						<roleManager defaultProvider='TheRoleProvider' " +
+								(roleManagerAttributes ?? "enabled='true'") + @">
+							<providers>
+								<clear />
+								<add name='TheRoleProvider' type='" +
+									typeof (T).AssemblyQualifiedName + @"' " +
+									(roleProviderAttributes ?? string.Empty) + @" />
+							</providers>
+						</roleManager>
+					</system.web>
+				</configuration>");
+		}
 	}
+
+	public class IsolatedWebHostingPerFixture {
+
+		[TestFixtureSetUp]
+		public void SetupBeforeTestFixture ()
+		{
+			OnSetupBeforeTestFixture ();
+		}
+
+		public virtual void OnSetupBeforeTestFixture ()
+		{
+			WebTest.SetupHosting (OnSetupHosting);
+		}
+
+		public virtual void OnSetupHosting ()
+		{
+			WebTest.CopyResources ();
+		}
+
+		[SetUp]
+		public void SetupBeforeEachTest ()
+		{
+			OnSetupBeforeEachTest ();
+		}
+
+		public virtual void OnSetupBeforeEachTest ()
+		{
+		}
+
+		[TearDown]
+		public void CleanupAfterEachTest ()
+		{
+			OnCleanupAfterEachTest ();
+		}
+
+		public virtual void OnCleanupAfterEachTest ()
+		{
+		}
+
+		[TestFixtureTearDown]
+		public void CleanupAfterTestFixture ()
+		{
+			OnCleanupAfterTestFixture ();
+		}
+
+		public virtual void OnCleanupAfterTestFixture ()
+		{
+			WebTest.CleanApp ();
+		}
+	}
+
+	public class IsolatedWebHostingPerTest {
+
+		[TestFixtureSetUp]
+		public void SetupBeforeTestFixture ()
+		{
+			OnSetupBeforeTestFixture ();
+		}
+
+		public virtual void OnSetupBeforeTestFixture ()
+		{
+			WebTest.CleanApp ();
+		}
+
+		public virtual void OnSetupHosting ()
+		{
+			WebTest.CopyResources ();
+		}
+
+		[SetUp]
+		public void SetupBeforeEachTest ()
+		{
+			OnSetupBeforeEachTest ();
+		}
+
+		public virtual void OnSetupBeforeEachTest ()
+		{
+			WebTest.SetupHosting (OnSetupHosting);
+		}
+
+		[TearDown]
+		public void CleanupAfterEachTest ()
+		{
+			OnCleanupAfterEachTest ();
+		}
+
+		public virtual void OnCleanupAfterEachTest ()
+		{
+			WebTest.CleanApp ();
+		}
+
+		[TestFixtureTearDown]
+		public void CleanupAfterTestFixture ()
+		{
+			OnCleanupAfterTestFixture ();
+		}
+
+		public virtual void OnCleanupAfterTestFixture ()
+		{
+			WebTest.CleanApp ();
+		}
+	}
 }
 
 #endif
