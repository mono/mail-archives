Index: Test/System.Linq/EnumerableMoreTest.cs
===================================================================
--- Test/System.Linq/EnumerableMoreTest.cs	(revision 145894)
+++ Test/System.Linq/EnumerableMoreTest.cs	(working copy)
@@ -1,4 +1,4 @@
-﻿//
+//
 // EnumerableMoreTest.cs
 //
 // Author:
@@ -2160,7 +2160,8 @@
 			expected.Add ("5", new List<string> () { "55" });
 			expected.Add ("4", new List<string> () { "42", "41" });
 
-
+			Assert.AreEqual (expected.Count, ((IEnumerable<string>)data).ToLookup ((x => x [0].ToString ())).Count);
+			
 			// ToLookup<string,string> (Func<string, string>)
 			AssertAreSame (expected, ((IEnumerable<string>) data).ToLookup ((x => x [0].ToString ())));
 
@@ -2173,6 +2174,25 @@
 			// ToLookup<string,string,string> (Func<string, string>, Func<string, string>, IEqualityComparer<string>)
 			AssertAreSame (expected, ((IEnumerable<string>) data).ToLookup (x => x [0].ToString (), x => x, EqualityComparer<string>.Default));
 		}
+		
+		[Test]
+		public void ToLookupNullKeyTest ()
+		{
+			string[] strs = new string[] { "one", null, "two", null, "three" };
+			
+			int i = 0;
+			var l = strs.ToLookup (s => (s == null) ? null : "numbers", s => (s == null) ? (++i).ToString() : s);
+			
+			Assert.AreEqual (2, l.Count);
+			Assert.AreEqual (2, l [null].Count());
+			Assert.IsTrue (l [null].Contains ("1"));
+			Assert.IsTrue (l [null].Contains ("2"));
+			
+			Assert.AreEqual (3, l ["numbers"].Count());
+			Assert.IsTrue (l ["numbers"].Contains ("one"));
+			Assert.IsTrue (l ["numbers"].Contains ("two"));
+			Assert.IsTrue (l ["numbers"].Contains ("three"));
+		}
 
 		[Test]
 		public void DefaultIfEmptyArgumentNullTest ()

Index: Test/System.Linq/LookupTest.cs
===================================================================
--- Test/System.Linq/LookupTest.cs	(revision 145894)
+++ Test/System.Linq/LookupTest.cs	(working copy)
@@ -1,4 +1,4 @@
-﻿//
+//
 // LookupTest.cs
 //
 // Author:
@@ -68,6 +68,55 @@
 			Assert.AreEqual (0x00ff00, lookup ["GrEeN"].First ());
 			Assert.AreEqual (0x0000ff, lookup ["Blue"].First ());
 		}
+		
+		[Test]
+		public void LookupContains()
+		{
+			var lookup = new [] { "hi", "bye" }.ToLookup (c => c [0].ToString ());
+			
+			Assert.IsTrue (lookup.Contains ("h"));
+			Assert.IsFalse (lookup.Contains ("d"));
+			Assert.IsFalse (lookup.Contains (null));
+		}
+		
+		[Test]
+		public void LookupContainsNull()
+		{
+			var lookup = new [] { "hi", "bye", "42" }.ToLookup (c => (Char.IsNumber (c [0]) ? null : c [0].ToString ()));
+			
+			Assert.IsTrue (lookup.Contains ("h"));
+			Assert.IsTrue (lookup.Contains (null));
+			Assert.IsFalse (lookup.Contains ("d"));
+		}
+		
+		[Test]
+		public void LookupEnumeratorWithoutNull()
+		{
+			var lookup = new [] { "hi", "bye" }.ToLookup (c => c [0].ToString ());
+			
+			Assert.IsTrue (lookup.Any (g => g.Key == "h"));
+			Assert.IsTrue (lookup.Any (g => g.Key == "b"));
+			Assert.IsFalse (lookup.Any (g => g.Key == null));
+		}
+		
+		[Test]
+		public void LookupEnumeratorWithNull()
+		{
+			var lookup = new [] { "hi", "bye", "42" }.ToLookup (c => (Char.IsNumber (c [0]) ? null : c [0].ToString ()));
+			
+			Assert.IsTrue (lookup.Any (g => g.Key == "h"));
+			Assert.IsTrue (lookup.Any (g => g.Key == "b"));
+			Assert.IsTrue (lookup.Any (g => g.Key == null));
+		}
+		
+		[Test]
+		public void LookupNullKeyNone()
+		{
+			var lookup = new [] { "hi", "bye" }.ToLookup (c => c [0].ToString ());
+			
+			Assert.AreEqual (2, lookup.Count);
+			Assert.AreEqual (0, lookup [null].Count ());
+		}
 
 		[Test]
 		public void EmptyResult ()

Index: System.Linq/Enumerable.cs
===================================================================
--- System.Linq/Enumerable.cs	(revision 145894)
+++ System.Linq/Enumerable.cs	(working copy)
@@ -2166,14 +2166,20 @@
 		{
 			Check.SourceAndKeyElementSelectors (source, keySelector, elementSelector);
 
+			List<TElement> nullKeyElements = null;
+			
 			var dictionary = new Dictionary<TKey, List<TElement>> (comparer ?? EqualityComparer<TKey>.Default);
 			foreach (var element in source) {
 				var key = keySelector (element);
-				if (key == null)
-					throw new ArgumentNullException ("key");
 
 				List<TElement> list;
-				if (!dictionary.TryGetValue (key, out list)) {
+				
+				if (key == null) {
+					if (nullKeyElements == null)
+						nullKeyElements = new List<TElement> ();
+					
+					list = nullKeyElements;
+				} else if (!dictionary.TryGetValue (key, out list)) {
 					list = new List<TElement> ();
 					dictionary.Add (key, list);
 				}
@@ -2181,7 +2187,7 @@
 				list.Add (elementSelector (element));
 			}
 
-			return new Lookup<TKey, TElement> (dictionary);
+			return new Lookup<TKey, TElement> (dictionary, nullKeyElements);
 		}
 
 		#endregion

Index: System.Linq/Lookup.cs
===================================================================
--- System.Linq/Lookup.cs	(revision 145894)
+++ System.Linq/Lookup.cs	(working copy)
@@ -5,6 +5,7 @@
 //	Alejandro Serrano "Serras" (trupill@yahoo.es)
 //	Marek Safar  <marek.safar@gmail.com>
 //	Jb Evain  <jbevain@novell.com>
+// 	Eric Maupin  <me@ermau.com>
 //
 // Copyright (C) 2007 Novell, Inc (http://www.novell.com)
 //
@@ -37,48 +38,63 @@
 
 	public class Lookup<TKey, TElement> : IEnumerable<IGrouping<TKey, TElement>>, ILookup<TKey, TElement> {
 
+		IGrouping<TKey, TElement> nullGrouping;
 		Dictionary<TKey, IGrouping<TKey, TElement>> groups;
 
 		public int Count {
-			get { return groups.Count; }
+			get { return (nullGrouping == null) ? groups.Count : groups.Count + 1; }
 		}
 
 		public IEnumerable<TElement> this [TKey key] {
 			get {
-				IGrouping<TKey, TElement> group;
-				if (groups.TryGetValue (key, out group))
-					return group;
-
+				if (key == null && nullGrouping != null)
+					return nullGrouping;
+				else if (key != null) {
+					IGrouping<TKey, TElement> group;
+					if (groups.TryGetValue (key, out group))
+						return group;
+				}
+				
 				return new TElement [0];
 			}
 		}
 
-		internal Lookup (Dictionary<TKey, List<TElement>> lookup)
+		internal Lookup (Dictionary<TKey, List<TElement>> lookup, IEnumerable<TElement> nullKeyElements)
 		{
 			groups = new Dictionary<TKey, IGrouping<TKey, TElement>> (lookup.Comparer);
 			foreach (var slot in lookup)
 				groups.Add (slot.Key, new Grouping<TKey, TElement> (slot.Key, slot.Value));
+			
+			if (nullKeyElements != null)
+				nullGrouping = new Grouping<TKey, TElement> (default (TKey), nullKeyElements);
 		}
 
 		public IEnumerable<TResult> ApplyResultSelector<TResult> (Func<TKey, IEnumerable<TElement>, TResult> selector)
 		{
+			if (nullGrouping != null)
+				yield return selector (nullGrouping.Key, nullGrouping);
+			
 			foreach (var group in groups.Values)
 				yield return selector (group.Key, group);
 		}
 
 		public bool Contains (TKey key)
-		{
-			return groups.ContainsKey (key);
+		{	
+			return (key != null) ? groups.ContainsKey (key) : nullGrouping != null; 
 		}
 
 		public IEnumerator<IGrouping<TKey, TElement>> GetEnumerator ()
 		{
-			return groups.Values.GetEnumerator ();
+			if (nullGrouping != null)
+				yield return nullGrouping;
+			
+			foreach (var g in groups.Values)
+				yield return g;
 		}
 
 		IEnumerator IEnumerable.GetEnumerator ()
 		{
-			return groups.Values.GetEnumerator ();
+			return GetEnumerator ();
 		}
 	}
 }
