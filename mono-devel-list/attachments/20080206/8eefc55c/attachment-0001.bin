/* multithreading + signals - BAD 
 * Compile: gcc `pkg-config --cflags --libs glib-2.0` ms.c -o ms -lpthread
 */

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <time.h>
#include <glib.h>

#define MAX_HANDLERS 64
struct signal_info {
	int signum, count, read_fd, write_fd, have_handler;
	void* handler;
};

struct signal_info signals [MAX_HANDLERS];

static int count;

static void
default_handler (int signum)
{
	g_atomic_int_inc(&count);
	int i;
	for (i = 0; i < MAX_HANDLERS; ++i) {
		int fd;
		struct signal_info* h = &signals [i];
		if (h->signum != signum)
			continue;
		g_atomic_int_inc (&h->count);
		fd = h->write_fd;
		if (fd > 0) {
			char c = signum;
			write (fd, &c, 1);
		}
	}
}

#define MAX_SIGNALS 100000
#define SIGNAL_THREADS 10

static int kill_count;

static void*
my_thread ()
{
	int i;
	for (i = 0; i < MAX_SIGNALS / SIGNAL_THREADS; ++i) {
		g_atomic_int_inc (&kill_count);
#if KILL
		if (kill (getpid(), SIGHUP) != 0) {
			perror ("kill");
		}
#else
		raise (SIGHUP);
#endif
	}
	return NULL;
}

static void
init_signals ()
{
	int i;
	srand(time (NULL));
	for (i = 0; i < MAX_HANDLERS; ++i) {
		if ((rand() % 4) == 0)
			signals [i].signum = SIGHUP;
	}
}

int main ()
{
	int i, set;
	long sum;
	pthread_t threads[SIGNAL_THREADS];
	void* r;


	if (signal (SIGHUP, default_handler) == SIG_ERR) {
		perror ("signal");
		return 1;
	}
	init_signals ();
	for (i = 0; i < sizeof(threads)/sizeof(threads[0]); ++i)
		if (pthread_create (&threads[i], NULL, my_thread, NULL) != 0) {
			perror ("pthread_create");
			return 1;
		}
	for (i = 0; i < sizeof(threads)/sizeof(threads[0]); ++i)
		pthread_join (threads [i], &r);
	sum = 0;
	set = 0;
	for (i = 0; i < MAX_HANDLERS; ++i) {
		if (signals [i].signum) {
			sum += signals [i].count;
			++set;
		}
	}
	printf ("%li == %li? %i\n", (long) sum, (long)(MAX_SIGNALS*set), 
			(int) (sum == (MAX_SIGNALS*set)));
	printf (" kill count=%i\n", kill_count);
	printf ("total count=%i\n", count);
	return 0;
}

