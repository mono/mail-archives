// UnixSignal test

using System;
using System.Threading;
using Mono.Unix;
using Mono.Unix.Native;

class Test {
	public static void Main ()
	{
		CheckRaiseStorm ();
		CheckAddRemove ();
		CheckWaitAny ();
	}

	static readonly Signum[] signals = new Signum[] {
		Signum.SIGHUP, Signum.SIGINT, Signum.SIGTERM, Signum.SIGCONT,
	};

	static void Assert<T> (T actual, T expected)
	{
		if (!object.Equals (actual, expected))
			throw new InvalidOperationException (
					string.Format ("Assertion Failed: {0} != {1}", actual, expected));
	}

	const int StormCount = 100000;

	static void CheckRaiseStorm ()
	{
		UnixSignal[] usignals = CreateSignals (signals);
		Thread[] threads = new Thread[]{
			CreateRaiseStormThread (StormCount/4),
			CreateRaiseStormThread (StormCount/4),
			CreateRaiseStormThread (StormCount/4),
			CreateRaiseStormThread (StormCount/4),
		};
		foreach (var t in threads)
			t.Start ();
		foreach (var t in threads)
			t.Join ();
		AssertCount (usignals);
		CloseSignals (usignals);
	}

	static void AssertCount (UnixSignal[] usignals)
	{
		int sum = 0;
		foreach (var s in usignals)
			sum += s.Count;
		Assert (sum, StormCount);
	}

	static UnixSignal[] CreateSignals (Signum[] signals)
	{
		UnixSignal[] s = new UnixSignal [signals.Length];
		for (int i = 0; i < signals.Length; ++i)
			s [i] = new UnixSignal (signals [i]);
		return s;
	}

	static void CloseSignals (UnixSignal[] signals)
	{
		foreach (var s in signals)
			s.Close ();
	}

	static Thread CreateRaiseStormThread (int max)
	{
		return new Thread ( () => {
			Random r = new Random (Environment.TickCount);
			for (int i = 0; i < max; ++i) {
				int n = r.Next (0, signals.Length);
				Stdlib.raise (signals [n]);
			}
		});
	}

	static void CheckAddRemove ()
	{
		UnixSignal[] usignals = CreateSignals (signals);

		Thread[] threads = new Thread[]{
			CreateRaiseStormThread (StormCount),
			CreateSignalCreatorThread (),
		};

		foreach (var t in threads)
			t.Start ();
		foreach (var t in threads)
			t.Join ();

		AssertCount (usignals);
		CloseSignals (usignals);
	}

	static Thread CreateSignalCreatorThread ()
	{
		return new Thread ( () => {
			Random r = new Random (Environment.TickCount << 4);
			for (int i = 0; i < StormCount; ++i) {
				int n = r.Next (0, signals.Length);
				using (new UnixSignal (signals [n]))
				using (new UnixSignal (signals [(n+1)%signals.Length]))
				using (new UnixSignal (signals [(n+2)%signals.Length]))
				using (new UnixSignal (signals [(n+3)%signals.Length])) {
				}
			}
		});
	}

	static void CheckWaitAny ()
	{
		UnixSignal[] usignals = CreateSignals (signals);

		Thread[] threads = new Thread[]{
			CreateRaiseStormThread (StormCount),
			CreateSignalCreatorThread (),
			CreateWaitAnyThread (usignals [0], usignals [2]),
			CreateWaitAnyThread (usignals [1], usignals [3]),
			CreateWaitAnyThread (usignals [1], usignals [2]),
		};

		foreach (var t in threads)
			t.Start ();
		foreach (var t in threads)
			t.Join ();

		AssertCount (usignals);
		CloseSignals (usignals);
	}

	static Thread CreateWaitAnyThread (params UnixSignal[] usignals)
	{
		return new Thread ( () => {
			bool b = UnixSignal.WaitAny (usignals);
			Assert (b, true);
		});
	}
}
