#if NET_2_0
using System;
using System.Net.NetworkInformation;
using NUnit.Framework;

namespace MonoTests.System.Net.NetworkInformation
{
	[TestFixture]
	public class PhysicalAddressTest
	{
		[Test]
		public void CreatePhysicalAddress()
		{
			PhysicalAddress phys = new PhysicalAddress(new byte [] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 });

			bool created = false;
			try {
				phys = new PhysicalAddress(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07});
				created = true;
			}
			catch (Exception e) {}

			if (!created)
				Assert.Fail("MS.NET 2.0 Allows Physical Address to be created if array larger than normal.");

			created = false;
			try {
				phys = new PhysicalAddress(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05 });
				created = true;
			}
			catch (Exception e) {}

			if (!created)
				Assert.Fail("MS.NET 2.0 Allows Physical Address to be created if array smaller than normal.");
		}

		[Test]
		public void ParsePhysicalAddress()
		{
			try {
			PhysicalAddress phys = PhysicalAddress.Parse("010203040506");
			}
			catch (Exception e) {
				Assert.Fail("MS.NET 2.0 Parses without the dash separator");
			}

			bool created = false;
			try {
				PhysicalAddress phys = PhysicalAddress.Parse("01020304050");
				created = true;
			}
			catch (Exception e) { }

			if (created)
				Assert.Fail("MS.NET 2.0 Fails parse when too few characters");

			created = false;
			try {
				PhysicalAddress phys = PhysicalAddress.Parse("0102030405060");
				created = true;
			}
			catch (Exception e) { }

			if (created)
				Assert.Fail("MS.NET 2.0 Fails parse when too many characters");

			try {
				PhysicalAddress phys = PhysicalAddress.Parse("01-02-03-04-05-06");
			}
			catch (Exception e) {
				Assert.Fail("MS.NET 2.0 Parses with the dash separator");
			}

			created = false;
			try {
				PhysicalAddress phys = PhysicalAddress.Parse("01-02-03-04-05-0");
				created = true;
			}
			catch (Exception e) {}

			if (created)
				Assert.Fail("MS.NET 2.0 Fails parse when too few characters");

			created = false;
			try {
				PhysicalAddress phys = PhysicalAddress.Parse("01-02-03-04-05-060");
				created = true;
			}
			catch (Exception e) { }

			if (created)
				Assert.Fail("MS.NET 2.0 Fails parse when too many characters");
			
		}

		[Test]
		public void GetHashCode()
		{
			PhysicalAddress phys1 = new PhysicalAddress(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 });
			PhysicalAddress phys2 = new PhysicalAddress(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 });

			Assert.AreEqual(phys1.GetHashCode(), phys2.GetHashCode());
		}

		[Test]
		public void ToString()
		{
			PhysicalAddress phys1 = new PhysicalAddress(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 });
			string strTest = phys1.ToString();
			int index = strTest.IndexOfAny(new char [] { '-', ':', ' '});

			Assert.AreEqual(-1, index);
		}

		[Test]
		public void Equals()
		{
			PhysicalAddress phys1 = new PhysicalAddress(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 });
			PhysicalAddress phys2 = new PhysicalAddress(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 });

			Assert.IsTrue(phys1.Equals(phys2));

			phys1 = new PhysicalAddress(new byte[] { 0x06, 0x5, 0x04, 0x03, 0x02, 0x01 });
			phys2 = new PhysicalAddress(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 });

			Assert.IsTrue(!phys1.Equals(phys2));
		}

	}
}#endif