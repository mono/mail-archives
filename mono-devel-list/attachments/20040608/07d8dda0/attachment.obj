Index: ChangeLog
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.Reflection.Emit/ChangeLog,v
retrieving revision 1.236
diff -u -r1.236 ChangeLog
--- ChangeLog	8 Jun 2004 02:26:17 -0000	1.236
+++ ChangeLog	8 Jun 2004 19:27:00 -0000
@@ -1,3 +1,18 @@
+2004-06-08  Gert Driesen <drieseng@users.sourceforge.net>
+
+	* EnumBuilder.cs: implemented EnumBuilder as wrapper class for
+	TypeBuilder, meaning rely on TypeBuilder implementation as
+	an enum is just a special type.
+
+	* MethodBuilder.cs: move check to see if type has already up
+	to match MS.NET behaviour, fix GetHashCode (removed TODO)
+
+	* TypeBuilder.cs: removed code duplication as we do not need
+	to return methods/events/properties when type has not been
+	created, fixed Get* methods to return actual events/fields/... 
+	when type has been completed, implemented IsCOMObjectImpl, 
+	removed unnecessary FIXME's
+	
 2004-06-08  Martin Baulig  <martin@ximian.com>
 
 	* ILGenerator.cs (TokenGenerator.GetToken): Added overloaded
@@ -7,13 +22,6 @@
 	runtime.
 
 	* ModuleBuilder.cs (ModuleBuilder.getMethodToken): New interncall.
-
-2004-05-29  Gert Driesen (drieseng@users.sourceforge.net)
-
-	* AssemblyBuilder.cs: removed extra method, fixes public API
-	compatibility with MS.NET
-	* TypeBuilder.cs: removed extra method, fixes public API
-	compatibility with MS.NET
 
 2004-05-28  Jackson Harper  <jackson@ximian.com>
 
Index: EnumBuilder.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.Reflection.Emit/EnumBuilder.cs,v
retrieving revision 1.15
diff -u -r1.15 EnumBuilder.cs
--- EnumBuilder.cs	23 Apr 2004 04:36:13 -0000	1.15
+++ EnumBuilder.cs	8 Jun 2004 19:27:01 -0000
@@ -16,149 +16,199 @@
 
 namespace System.Reflection.Emit {
 	public sealed class EnumBuilder : Type {
-		CustomAttributeBuilder[] cattrs;
+		private CustomAttributeBuilder[] cattrs;
+		private TypeBuilder _tb;
+		private FieldBuilder _underlyingField;
+		private Type _underlyingType;
+
+		internal EnumBuilder (ModuleBuilder mb, string name, TypeAttributes visibility, Type underlyingType)
+		{
+			_tb = new TypeBuilder (mb, name, (visibility | TypeAttributes.Sealed), 
+				typeof(Enum), null, PackingSize.Unspecified, 0, null);
+			_underlyingType = underlyingType;
+			_underlyingField = _tb.DefineField ("value__", underlyingType,
+				(FieldAttributes.SpecialName | FieldAttributes.Private));
+		}
 
 		public override Assembly Assembly {
-			get { return null; }
+			get {
+				return _tb.Assembly;
+			}
 		}
+
 		public override string AssemblyQualifiedName {
-			get { return null; }
+			get {
+				return _tb.AssemblyQualifiedName;
+			}
 		}
+
 		public override Type BaseType {
-			get { return null; }
+			get {
+				return _tb.BaseType;
+			}
 		}
+
 		public override Type DeclaringType {
-			get { return null; }
+			get {
+				return _tb.DeclaringType;
+			}
 		}
+
 		public override string FullName {
-			get { return null; }
+			get {
+				return _tb.FullName;
+			}
 		}
+
 		public override Guid GUID {
-			get { return Guid.Empty; }
+			get {
+				return _tb.GUID;
+			}
 		}
+
 		public override Module Module {
-			get { return null; }
+			get {
+				return _tb.Module;
+			}
 		}
+
 		public override string Name {
-			get { return null; }
+			get {
+				return _tb.Name;
+			}
 		}
+
 		public override string Namespace {
-			get { return null; }
+			get { 
+				return _tb.Namespace;
+			}
 		}
+
 		public override Type ReflectedType {
-			get { return null; }
+			get {
+				return _tb.ReflectedType;
+			}
 		}
+
 		public override RuntimeTypeHandle TypeHandle {
-			get { return new RuntimeTypeHandle (); }
+			get {
+				return _tb.TypeHandle;
+			}
 		}
+
 		public TypeToken TypeToken {
-			get { return new TypeToken (); }
+			get {
+				return _tb.TypeToken;
+			}
 		}
+
 		public FieldBuilder UnderlyingField {
-			get { return null; }
-		}
-		public override Type UnderlyingSystemType {
-			get { return null; }
-		}
-/* no need to override
-		public override MemberTypes MemberType {
-			get {return MemberTypes.TypeInfo;}
+			get {
+				return _underlyingField;
+			}
 		}
-*/
 
-		internal EnumBuilder (ModuleBuilder mb, string name, TypeAttributes visibility, Type underlyingType)
-		{
+		public override Type UnderlyingSystemType {
+			get {
+				return _underlyingType;
+			}
 		}
 
 		public Type CreateType ()
 		{
-			return null;
+			return _tb.CreateType ();
 		}
 
 		public FieldBuilder DefineLiteral (string literalName, object literalValue)
 		{
-			return null;
+			FieldBuilder fieldBuilder = _tb.DefineField (literalName, 
+				_underlyingType, (FieldAttributes.Literal | 
+				(FieldAttributes.Static | FieldAttributes.Public)));
+			fieldBuilder.SetConstant (literalValue);
+			return fieldBuilder;
 		}
+
 		protected override TypeAttributes GetAttributeFlagsImpl ()
 		{
-			return (TypeAttributes)0;
+			return _tb.AttributesFlags;
 		}
 
 		protected override ConstructorInfo GetConstructorImpl (
 			BindingFlags bindingAttr, Binder binder, CallingConventions cc,
 			Type[] types, ParameterModifier[] modifiers)
 		{
-			return null;
+			return _tb.GetConstructor (bindingAttr, binder, cc, types, 
+				modifiers);
 		}
 
-		public override ConstructorInfo[] GetConstructors( BindingFlags bindingAttr)
+		public override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr)
 		{
-			return null;
+			return _tb.GetConstructors (bindingAttr);
 		}
 
 		public override object[] GetCustomAttributes(bool inherit)
 		{
-			return null;
+			return _tb.GetCustomAttributes (inherit);
 		}
 
 		public override object[] GetCustomAttributes(Type attributeType, bool inherit)
 		{
-			return null;
+			return _tb.GetCustomAttributes (attributeType, inherit);
 		}
 
 		public override Type GetElementType()
 		{
-			throw new NotSupportedException ();
+			return _tb.GetElementType ();
 		}
 
 		public override EventInfo GetEvent( string name, BindingFlags bindingAttr)
 		{
-			return null;
+			return _tb.GetEvent (name, bindingAttr);
 		}
 
 		public override EventInfo[] GetEvents()
 		{
-			return null;
+			return _tb.GetEvents ();
 		}
 
 		public override EventInfo[] GetEvents( BindingFlags bindingAttr)
 		{
-			return null;
+			return _tb.GetEvents (bindingAttr);
 		}
 
 		public override FieldInfo GetField( string name, BindingFlags bindingAttr)
 		{
-			return null;
+			return _tb.GetField (name, bindingAttr);
 		}
 
 		public override FieldInfo[] GetFields( BindingFlags bindingAttr)
 		{
-			return null;
+			return _tb.GetFields (bindingAttr);
 		}
 
-		public override Type GetInterface( string name, bool ignoreCase)
+		public override Type GetInterface (string name, bool ignoreCase)
 		{
-			return null;
+			return _tb.GetInterface (name, ignoreCase);
 		}
 
-		public override InterfaceMapping GetInterfaceMap( Type interfaceType)
+		public override InterfaceMapping GetInterfaceMap (Type interfaceType)
 		{
-			throw new NotImplementedException ();
+			return _tb.GetInterfaceMap (interfaceType);
 		}
 
 		public override Type[] GetInterfaces()
 		{
-			return null;
+			return _tb.GetInterfaces ();
 		}
 
-		public override MemberInfo[] GetMember( string name, MemberTypes type, BindingFlags bindingAttr)
+		public override MemberInfo[] GetMember (string name, MemberTypes type, BindingFlags bindingAttr)
 		{
-			return null;
+			return _tb.GetMember (name, type, bindingAttr);
 		}
 
-		public override MemberInfo[] GetMembers( BindingFlags bindingAttr)
+		public override MemberInfo[] GetMembers(BindingFlags bindingAttr)
 		{
-			return null;
+			return _tb.GetMembers (bindingAttr);
 		}
 
 		protected override MethodInfo GetMethodImpl (
@@ -166,28 +216,32 @@
 			CallingConventions callConvention, Type[] types,
 			ParameterModifier[] modifiers)
 		{
-			// FIXME
-			return null;
+			if (types == null) {
+				return _tb.GetMethod (name, bindingAttr);
+			}
+
+			return _tb.GetMethod (name, bindingAttr, binder, 
+				callConvention, types, modifiers);
 		}
-		
-		public override MethodInfo[] GetMethods( BindingFlags bindingAttr)
+
+		public override MethodInfo[] GetMethods (BindingFlags bindingAttr)
 		{
-			return null;
+			return _tb.GetMethods (bindingAttr);
 		}
 
-		public override Type GetNestedType( string name, BindingFlags bindingAttr)
+		public override Type GetNestedType (string name, BindingFlags bindingAttr)
 		{
-			return null;
+			return _tb.GetNestedType (name, bindingAttr);
 		}
 
-		public override Type[] GetNestedTypes( BindingFlags bindingAttr)
+		public override Type[] GetNestedTypes (BindingFlags bindingAttr)
 		{
-			return null;
+			return _tb.GetNestedTypes (bindingAttr);
 		}
 
-		public override PropertyInfo[] GetProperties( BindingFlags bindingAttr)
-			{
-			return null;
+		public override PropertyInfo[] GetProperties (BindingFlags bindingAttr)
+		{
+			return _tb.GetProperties (bindingAttr);
 		}
 
 		protected override PropertyInfo GetPropertyImpl (
@@ -195,12 +249,12 @@
 			Type returnType, Type[] types,
 			ParameterModifier[] modifiers)
 		{
-			return null;
+			throw CreateNotSupportedException ();
 		}
 
-		protected override bool HasElementTypeImpl()
-			{
-			throw new NotSupportedException ();
+		protected override bool HasElementTypeImpl ()
+		{
+			return _tb.HasElementType;
 		}
 
 		public override object InvokeMember (
@@ -209,7 +263,8 @@
 			ParameterModifier[] modifiers, CultureInfo culture,
 			string[] namedParameters)
 		{
-			return null;
+			return _tb.InvokeMember (name, invokeAttr, binder, target, 
+				args, modifiers, culture, namedParameters);
 		}
 
 		protected override bool IsArrayImpl()
@@ -236,18 +291,18 @@
 		{
 			return false;
 		}
-		
+
 		protected override bool IsValueTypeImpl()
 		{
 			return true;
 		}
 
-		public override bool IsDefined( Type attributeType, bool inherit)
+		public override bool IsDefined (Type attributeType, bool inherit)
 		{
-			return false;
+			return _tb.IsDefined (attributeType, inherit);
 		}
-		
-		public void SetCustomAttribute( CustomAttributeBuilder customBuilder)
+
+		public void SetCustomAttribute (CustomAttributeBuilder customBuilder)
 		{
 			if (cattrs != null) {
 				CustomAttributeBuilder[] new_array = new CustomAttributeBuilder [cattrs.Length + 1];
@@ -260,46 +315,57 @@
 			}
 		}
 
-		public void SetCustomAttribute( ConstructorInfo con, byte[] binaryAttribute)
+		public void SetCustomAttribute (ConstructorInfo con, byte[] binaryAttribute)
 		{
 			SetCustomAttribute (new CustomAttributeBuilder (con, binaryAttribute));
 		}
 
 #if NET_2_0 || BOOTSTRAP_NET_2_0
+		[MonoTODO]
 		public override Type[] GetGenericArguments ()
 		{
 			throw new NotImplementedException ();
 		}
 
+		[MonoTODO]
 		public override bool HasGenericArguments {
 			get {
 				throw new NotImplementedException ();
 			}
 		}
 
+		[MonoTODO]
 		public override bool ContainsGenericParameters {
 			get {
 				throw new NotImplementedException ();
 			}
 		}
 
+		[MonoTODO]
 		public override bool IsGenericParameter {
 			get {
 				throw new NotImplementedException ();
 			}
 		}
 
+		[MonoTODO]
 		public override int GenericParameterPosition {
 			get {
 				throw new NotImplementedException ();
 			}
 		}
 
+		[MonoTODO]
 		public override MethodInfo DeclaringMethod {
 			get {
 				throw new NotImplementedException ();
 			}
 		}
 #endif
+
+		private Exception CreateNotSupportedException ()
+		{
+			return new NotSupportedException ("The invoked member is not supported in a dynamic module.");
+		}
 	}
 }
Index: FieldBuilder.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.Reflection.Emit/FieldBuilder.cs,v
retrieving revision 1.14
diff -u -r1.14 FieldBuilder.cs
--- FieldBuilder.cs	21 Nov 2003 16:29:08 -0000	1.14
+++ FieldBuilder.cs	8 Jun 2004 19:27:01 -0000
@@ -43,49 +43,66 @@
 		}
 
 		public override FieldAttributes Attributes {
-			get {return attrs;}
+			get { return attrs; }
 		}
+
 		public override Type DeclaringType {
-			get {return typeb;}
+			get { return typeb; }
 		}
+
 		public override RuntimeFieldHandle FieldHandle {
-			get {return new RuntimeFieldHandle();}
+			get {
+				throw CreateNotSupportedException ();
+			}
 		}
+
 		public override Type FieldType {
-			get {return type;}
+			get { return type; }
 		}
+
 		public override string Name {
-			get {return name;}
+			get { return name; }
 		}
+
 		public override Type ReflectedType {
-			get {return typeb;}
+			get { return typeb; }
 		}
 
 		public override object[] GetCustomAttributes(bool inherit) {
-			return null;
+			throw CreateNotSupportedException ();
 		}
+
 		public override object[] GetCustomAttributes(Type attributeType, bool inherit) {
-			return null;
+			throw CreateNotSupportedException ();
 		}
+
 		public FieldToken GetToken() {
 			return new FieldToken (0x04000000 | table_idx);
 		}
+
 		public override object GetValue(object obj) {
-			return null;
+			throw CreateNotSupportedException ();
 		}
+
 		public override bool IsDefined( Type attributeType, bool inherit) {
-			return false;
+			throw CreateNotSupportedException ();
 		}
+
 		internal void SetRVAData (byte[] data) {
 			rva_data = (byte[])data.Clone ();
 		}
+
 		public void SetConstant( object defaultValue) {
+			RejectIfCreated ();
+
 			/*if (defaultValue.GetType() != type)
 				throw new ArgumentException ("Constant doesn't match field type");*/
 			def_value = defaultValue;
 		}
 
-		public void SetCustomAttribute( CustomAttributeBuilder customBuilder) {
+		public void SetCustomAttribute (CustomAttributeBuilder customBuilder) {
+			RejectIfCreated ();
+
 			string attrname = customBuilder.Ctor.ReflectedType.FullName;
 			if (attrname == "System.Runtime.InteropServices.FieldOffsetAttribute") {
 				byte[] data = customBuilder.Data;
@@ -115,20 +132,35 @@
 		}
 
 		public void SetCustomAttribute( ConstructorInfo con, byte[] binaryAttribute) {
+			RejectIfCreated ();
 			SetCustomAttribute (new CustomAttributeBuilder (con, binaryAttribute));
 		}
 
 		public void SetMarshal( UnmanagedMarshal unmanagedMarshal) {
+			RejectIfCreated ();
 			marshal_info = unmanagedMarshal;
 			attrs |= FieldAttributes.HasFieldMarshal;
 		}
 
 		public void SetOffset( int iOffset) {
+			RejectIfCreated ();
 			offset = iOffset;
 		}
+
 		public override void SetValue( object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture) {
+			throw CreateNotSupportedException ();
+		}
+
+		private Exception CreateNotSupportedException ()
+		{
+			return new NotSupportedException ("The invoked member is not supported in a dynamic module.");
 		}
 
+		private void RejectIfCreated ()
+		{
+			if (typeb.is_created)
+				throw new InvalidOperationException ("Unable to change after type has been created.");
+		}
 	}
 }
 
Index: MethodBuilder.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.Reflection.Emit/MethodBuilder.cs,v
retrieving revision 1.50
diff -u -r1.50 MethodBuilder.cs
--- MethodBuilder.cs	14 May 2004 11:23:29 -0000	1.50
+++ MethodBuilder.cs	8 Jun 2004 19:27:02 -0000
@@ -194,14 +194,14 @@
 		
 		public ParameterBuilder DefineParameter (int position, ParameterAttributes attributes, string strParamName)
 		{
+			RejectIfCreated ();
+			
 			//
 			// Extension: Mono allows position == 0 for the return attribute
 			//
 			if ((position < 0) || (position > parameters.Length))
 				throw new ArgumentOutOfRangeException ("position");
 
-			RejectIfCreated ();
-
 			ParameterBuilder pb = new ParameterBuilder (this, position, attributes, strParamName);
 			if (pinfo == null)
 				pinfo = new ParameterBuilder [parameters.Length + 1];
@@ -300,14 +300,13 @@
 			return base.Equals (obj);
 		}
 
-		[MonoTODO]
 		public override int GetHashCode ()
 		{
-			return base.GetHashCode ();
+			return name.GetHashCode ();
 		}
 
 		internal override int get_next_table_index (object obj, int table, bool inc) {
-		    return type.get_next_table_index (obj, table, inc);
+			return type.get_next_table_index (obj, table, inc);
 		}
 
 		internal void set_override (MethodInfo mdecl) {
Index: MethodRental.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.Reflection.Emit/MethodRental.cs,v
retrieving revision 1.2
diff -u -r1.2 MethodRental.cs
--- MethodRental.cs	10 May 2004 12:31:44 -0000	1.2
+++ MethodRental.cs	8 Jun 2004 19:27:02 -0000
@@ -21,6 +21,10 @@
 		public static void SwapMethodBody (Type cls, int methodtoken, 
 										   IntPtr rgIL, int methodSize, int flags)
 		{
+			if (methodSize <= 0 || methodSize >= 0x3f0000) {
+				throw new ArgumentException ("Data size must be > 0 and < 0x3f0000", "methodSize");
+			}
+
 			if (cls == null)
 				throw new ArgumentNullException ("cls");
 			if ((cls is TypeBuilder) && (! ((TypeBuilder)cls).is_created))
Index: TypeBuilder.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.Reflection.Emit/TypeBuilder.cs,v
retrieving revision 1.103
diff -u -r1.103 TypeBuilder.cs
--- TypeBuilder.cs	29 May 2004 07:50:08 -0000	1.103
+++ TypeBuilder.cs	8 Jun 2004 19:27:03 -0000
@@ -53,6 +53,12 @@
 
 	public const int UnspecifiedTypeSize = 0;
 
+		internal TypeAttributes AttributesFlags {
+			get {
+				return GetAttributeFlagsImpl ();
+			}
+		}
+
 		protected override TypeAttributes GetAttributeFlagsImpl () {
 			return attrs;
 		}
@@ -103,6 +109,7 @@
 			table_idx = mb.get_next_table_index (this, 0x02, true);
 			setup_internal_class (this);
 			fullname = GetFullName ();
+
 		}
 
 		public override Assembly Assembly {
@@ -111,7 +118,7 @@
 
 		public override string AssemblyQualifiedName {
 			get {
-				return fullname + ", " + Assembly.GetName().FullName;
+				return Assembly.CreateQualifiedName (Assembly.FullName, fullname);
 			}
 		}
 		public override Type BaseType {
@@ -119,7 +126,11 @@
 				return parent;
 			}
 		}
-		public override Type DeclaringType {get {return nesting_type;}}
+		public override Type DeclaringType {
+			get {
+				return nesting_type;
+			}
+		}
 
 /*		public override bool IsSubclassOf (Type c)
 		{
@@ -140,15 +151,23 @@
 		[MonoTODO]
 		public override Type UnderlyingSystemType {
 			get {
-				// This should return the type itself for non-enum types but 
-				// that breaks mcs.
-				if (fields != null) {
-					foreach (FieldBuilder f in fields) {
-						if ((f != null) && (f.Attributes & FieldAttributes.Static) == 0)
-							return f.FieldType;
+				if (created != null) {
+					return created.UnderlyingSystemType;
+				}
+
+				// for enum types, determine the underlying type 
+				// from the type of its fields
+				if (base.IsEnum) {
+					if (fields != null) {
+						foreach (FieldBuilder f in fields) {
+							if ((f != null) && (f.Attributes & FieldAttributes.Static) == 0)
+								return f.FieldType;
+						}
 					}
+					throw new InvalidOperationException ("Underlying type information on enumeration is not specified.");
 				}
-				throw new InvalidOperationException ("Underlying type information on enumeration is not specified.");
+				
+				return this;
 			}
 		}
 
@@ -168,7 +187,11 @@
 	
 		public override Guid GUID {
 			get {
-			    throw not_supported ();
+				if (created != null) {
+					return created.GUID;
+				}
+
+				throw not_supported ();
 			}
 		}
 
@@ -187,7 +210,9 @@
 		public int Size {
 			get { return class_size; }
 		}
-		public override Type ReflectedType {get {return nesting_type;}}
+		public override Type ReflectedType {
+			get { return nesting_type; } 
+		}
 
 		public void AddDeclarativeSecurity( SecurityAction action, PermissionSet pset) {
 			if (pset == null)
@@ -239,63 +264,48 @@
 			}
 		}
 
-		[MonoTODO]
 		protected override ConstructorInfo GetConstructorImpl (BindingFlags bindingAttr, Binder binder,
-								       CallingConventions callConvention, Type[] types,
-								       ParameterModifier[] modifiers)
+									CallingConventions callConvention, Type[] types,
+									ParameterModifier[] modifiers)
 		{
-			if (ctors == null)
-				return null;
-
-			ConstructorBuilder found = null;
-			int count = 0;
-			
-			foreach (ConstructorBuilder cb in ctors){
-				if (callConvention != CallingConventions.Any && cb.CallingConvention != callConvention)
-					continue;
-				found = cb;
-				count++;
+			if (created != null) {
+				return created.GetConstructor (bindingAttr, binder,
+					callConvention, types, modifiers);
 			}
 
-			if (count == 0)
-				return null;
-			if (types == null){
-				if (count > 1)
-					throw new AmbiguousMatchException ();
-				return found;
-			}
-			MethodBase[] match = new MethodBase [count];
-			if (count == 1)
-				match [0] = found;
-			else {
-				count = 0;
-				foreach (ConstructorInfo m in ctors) {
-					if (callConvention != CallingConventions.Any && m.CallingConvention != callConvention)
-						continue;
-					match [count++] = m;
-				}
-			}
-			if (binder == null)
-				binder = Binder.DefaultBinder;
-			return (ConstructorInfo)binder.SelectMethod (bindingAttr, match, types, modifiers);
+			throw not_supported ();
 		}
 
-		public override bool IsDefined( Type attributeType, bool inherit)
+		public override bool IsDefined (Type attributeType, bool inherit)
 		{
-			/*
-			 * MS throws NotSupported here, but we can't because some corlib
-			 * classes make calls to IsDefined.
-			 */
-			return MonoCustomAttrs.IsDefined (this, attributeType, inherit);
+			if (created != null) {
+				return MonoCustomAttrs.IsDefined (created, attributeType, inherit);
+			}
+
+			throw not_supported ();
 		}
-		
+
 		public override object[] GetCustomAttributes(bool inherit)
 		{
+			if (created != null) {
+				return MonoCustomAttrs.GetCustomAttributes (created, null, inherit);
+			}
+
 			throw not_supported ();
 		}
 		
 		public override object[] GetCustomAttributes(Type attributeType, bool inherit)
 		{
+			if (created != null) {
+				if (attributeType == null) {
+					throw new ArgumentNullException("attributeType");
+				}
+				attributeType = attributeType.UnderlyingSystemType;
+				if ((attributeType as MonoType) == null) {
+					throw new ArgumentException("Runtime type expected.", "attributeType");
+				}
+				return MonoCustomAttrs.GetCustomAttributes(created, attributeType, inherit);
+			}
 			throw not_supported ();
 		}
 
@@ -643,39 +653,11 @@
 
 		public override ConstructorInfo[] GetConstructors (BindingFlags bindingAttr)
 		{
-			if (ctors == null)
-				return new ConstructorInfo [0];
-			ArrayList l = new ArrayList ();
-			bool match;
-			MethodAttributes mattrs;
-			
-			foreach (ConstructorBuilder c in ctors) {
-				match = false;
-				mattrs = c.Attributes;
-				if ((mattrs & MethodAttributes.MemberAccessMask) == MethodAttributes.Public) {
-					if ((bindingAttr & BindingFlags.Public) != 0)
-						match = true;
-				} else {
-					if ((bindingAttr & BindingFlags.NonPublic) != 0)
-						match = true;
-				}
-				if (!match)
-					continue;
-				match = false;
-				if ((mattrs & MethodAttributes.Static) != 0) {
-					if ((bindingAttr & BindingFlags.Static) != 0)
-						match = true;
-				} else {
-					if ((bindingAttr & BindingFlags.Instance) != 0)
-						match = true;
-				}
-				if (!match)
-					continue;
-				l.Add (c);
+			if (created != null) {
+				return created.GetConstructors (bindingAttr);
 			}
-			ConstructorInfo[] result = new ConstructorInfo [l.Count];
-			l.CopyTo (result);
-			return result;
+
+			throw not_supported ();
 		}
 
 		public override Type GetElementType () { 
@@ -683,19 +665,27 @@
 		}
 
 		public override EventInfo GetEvent (string name, BindingFlags bindingAttr) {
+			if (created != null) {
+				return created.GetEvent (name, bindingAttr);
+			}
+
 			throw not_supported ();
 		}
 
-		/* Needed to keep signature compatibility with MS.NET */
-		public override EventInfo[] GetEvents ()
-		{
-			return GetEvents (DefaultBindingFlags);
+		public override EventInfo[] GetEvents () {
+			if (created != null) {
+				return created.GetEvents ();
+			}
+
+			throw not_supported ();
 		}
 
 		public override EventInfo[] GetEvents (BindingFlags bindingAttr) {
-			// FIXME: Under MS.NET, this throws a NotImplementedException
-			// But mcs calls this method. How can that be?
-			return new EventInfo [0];
+			if (created != null) {
+				return created.GetEvents (bindingAttr);
+			}
+
+			throw not_supported ();
 		}
 
 		// This is only used from MonoGenericInst.initialize().
@@ -746,86 +736,33 @@
 		}
 
 		public override FieldInfo GetField( string name, BindingFlags bindingAttr) {
-			if (fields == null)
-				return null;
-
-			bool match;
-			FieldAttributes mattrs;
-			
-			foreach (FieldInfo c in fields) {
-				if (c == null)
-					continue;
-				if (c.Name != name)
-					continue;
-				match = false;
-				mattrs = c.Attributes;
-				if ((mattrs & FieldAttributes.FieldAccessMask) == FieldAttributes.Public) {
-					if ((bindingAttr & BindingFlags.Public) != 0)
-						match = true;
-				} else {
-					if ((bindingAttr & BindingFlags.NonPublic) != 0)
-						match = true;
-				}
-				if (!match)
-					continue;
-				match = false;
-				if ((mattrs & FieldAttributes.Static) != 0) {
-					if ((bindingAttr & BindingFlags.Static) != 0)
-						match = true;
-				} else {
-					if ((bindingAttr & BindingFlags.Instance) != 0)
-						match = true;
-				}
-				if (!match)
-					continue;
-				return c;
+			if (created != null) {
+				return created.GetField (name, bindingAttr);
 			}
-			return null;
+
+			throw not_supported ();
 		}
 
 		public override FieldInfo[] GetFields (BindingFlags bindingAttr) {
-			if (fields == null)
-				return new FieldInfo [0];
-			ArrayList l = new ArrayList ();
-			bool match;
-			FieldAttributes mattrs;
-			
-			foreach (FieldInfo c in fields) {
-				if (c == null)
-					continue;
-				match = false;
-				mattrs = c.Attributes;
-				if ((mattrs & FieldAttributes.FieldAccessMask) == FieldAttributes.Public) {
-					if ((bindingAttr & BindingFlags.Public) != 0)
-						match = true;
-				} else {
-					if ((bindingAttr & BindingFlags.NonPublic) != 0)
-						match = true;
-				}
-				if (!match)
-					continue;
-				match = false;
-				if ((mattrs & FieldAttributes.Static) != 0) {
-					if ((bindingAttr & BindingFlags.Static) != 0)
-						match = true;
-				} else {
-					if ((bindingAttr & BindingFlags.Instance) != 0)
-						match = true;
-				}
-				if (!match)
-					continue;
-				l.Add (c);
+			if (created != null) {
+				return created.GetFields (bindingAttr);
 			}
-			FieldInfo[] result = new FieldInfo [l.Count];
-			l.CopyTo (result);
-			return result;
+
+			throw not_supported ();
 		}
 
 		public override Type GetInterface (string name, bool ignoreCase) {
+			if (created != null) {
+				return created.GetInterface (name, ignoreCase);
+			}
+
 			throw not_supported ();
 		}
 		
 		public override Type[] GetInterfaces () {
+			if (created != null) {
+				return created.GetInterfaces ();
+			}
 			if (interfaces != null) {
 				Type[] ret = new Type [interfaces.Length];
 				interfaces.CopyTo (ret, 0);
@@ -835,75 +772,26 @@
 			}
 		}
 
-		public override MemberInfo[] GetMember (string name, MemberTypes type,
-												BindingFlags bindingAttr) {
+		public override MemberInfo[] GetMember (string name, MemberTypes type, BindingFlags bindingAttr)
+		{
+			if (created != null) {
+				return created.GetMember (name, type, bindingAttr);
+			}
 			throw not_supported ();
 		}
 
 		public override MemberInfo[] GetMembers (BindingFlags bindingAttr) {
-			throw not_supported ();
-		}
-
-		private MethodInfo[] GetMethodsByName (string name, BindingFlags bindingAttr, bool ignoreCase, Type reflected_type) {
-			MethodInfo[] candidates;
-			if (((bindingAttr & BindingFlags.DeclaredOnly) == 0) && (parent != null)) {
-				MethodInfo[] parent_methods = parent.GetMethods (bindingAttr);
-				if (methods == null)
-					candidates = parent_methods;
-				else {
-					candidates = new MethodInfo [methods.Length + parent_methods.Length];
-					parent_methods.CopyTo (candidates, 0);
-					methods.CopyTo (candidates, parent_methods.Length);
-				}
+			if (created != null) {
+				return created.GetMembers (bindingAttr);
 			}
-			else
-				candidates = methods;
-					
-			if (candidates == null)
-				return new MethodInfo [0];
-
-			ArrayList l = new ArrayList ();
-			bool match;
-			MethodAttributes mattrs;
-
-			foreach (MethodInfo c in candidates) {
-				if (c == null)
-					continue;
-				if (name != null) {
-					if (String.Compare (c.Name, name, ignoreCase) != 0)
-						continue;
-				}
-				match = false;
-				mattrs = c.Attributes;
-				if ((mattrs & MethodAttributes.MemberAccessMask) == MethodAttributes.Public) {
-					if ((bindingAttr & BindingFlags.Public) != 0)
-						match = true;
-				} else {
-					if ((bindingAttr & BindingFlags.NonPublic) != 0)
-						match = true;
-				}
-				if (!match)
-					continue;
-				match = false;
-				if ((mattrs & MethodAttributes.Static) != 0) {
-					if ((bindingAttr & BindingFlags.Static) != 0)
-						match = true;
-				} else {
-					if ((bindingAttr & BindingFlags.Instance) != 0)
-						match = true;
-				}
-				if (!match)
-					continue;
-				l.Add (c);
-			}
-
-			MethodInfo[] result = new MethodInfo [l.Count];
-			l.CopyTo (result);
-			return result;
+			throw not_supported ();
 		}
 
 		public override MethodInfo[] GetMethods (BindingFlags bindingAttr) {
-			return GetMethodsByName (null, bindingAttr, false, this);
+			if (created != null) {
+				return created.GetMethods (bindingAttr);
+			}
+			throw not_supported ();
 		}
 
 		protected override MethodInfo GetMethodImpl (string name, BindingFlags bindingAttr,
@@ -911,120 +799,34 @@
 							     CallingConventions callConvention,
 							     Type[] types, ParameterModifier[] modifiers)
 		{
-			if (!is_created)
-				/* MS.Net throws this exception if the type is unfinished... */
-				throw not_supported ();
-
-			bool ignoreCase = ((bindingAttr & BindingFlags.IgnoreCase) != 0);
-			MethodInfo[] methods = GetMethodsByName (name, bindingAttr, ignoreCase, this);
-			MethodInfo found = null;
-			MethodBase[] match;
-			int typesLen = (types != null) ? types.Length : 0;
-			int count = 0;
-			
-			foreach (MethodInfo m in methods) {
-				// Under MS.NET, Standard|HasThis matches Standard...
-				if (callConvention != CallingConventions.Any && ((m.CallingConvention & callConvention) != callConvention))
-					continue;
-				found = m;
-				count++;
-			}
-
-			if (count == 0)
-				return null;
-			
-			if (count == 1 && typesLen == 0) 
-				return found;
-
-			match = new MethodBase [count];
-			if (count == 1)
-				match [0] = found;
-			else {
-				count = 0;
-				foreach (MethodInfo m in methods) {
-					if (callConvention != CallingConventions.Any && ((m.CallingConvention & callConvention) != callConvention))
-						continue;
-					match [count++] = m;
+			if (created != null) {
+				if (types == null) {
+					return created.GetMethod (name, bindingAttr);
 				}
+				return created.GetMethod (name, bindingAttr, binder, callConvention, types, modifiers);
 			}
-			
-			if (types == null) 
-				return (MethodInfo) Binder.FindMostDerivedMatch (match);
-
-			if (binder == null)
-				binder = Binder.DefaultBinder;
-			
-			return (MethodInfo)binder.SelectMethod (bindingAttr, match, types, modifiers);
+			throw not_supported ();
 		}
 
 		public override Type GetNestedType( string name, BindingFlags bindingAttr) {
+			if (created != null) {
+				return created.GetNestedType (name, bindingAttr);
+			}
 			throw not_supported ();
 		}
 
 		public override Type[] GetNestedTypes (BindingFlags bindingAttr) {
-			bool match;
-			ArrayList result = new ArrayList ();
-		
-			if (subtypes == null)
-				return Type.EmptyTypes;
-			foreach (TypeBuilder t in subtypes) {
-				match = false;
-				if ((t.attrs & TypeAttributes.VisibilityMask) == TypeAttributes.NestedPublic) {
-					if ((bindingAttr & BindingFlags.Public) != 0)
-						match = true;
-				} else {
-					if ((bindingAttr & BindingFlags.NonPublic) != 0)
-						match = true;
-				}
-				if (!match)
-					continue;
-				result.Add (t);
+			if (created != null) {
+				return created.GetNestedTypes (bindingAttr);
 			}
-			Type[] r = new Type [result.Count];
-			result.CopyTo (r);
-			return r;
+			throw not_supported ();
 		}
 
 		public override PropertyInfo[] GetProperties( BindingFlags bindingAttr) {
-			if (properties == null)
-				return new PropertyInfo [0];
-			ArrayList l = new ArrayList ();
-			bool match;
-			MethodAttributes mattrs;
-			MethodInfo accessor;
-			
-			foreach (PropertyInfo c in properties) {
-				match = false;
-				accessor = c.GetGetMethod (true);
-				if (accessor == null)
-					accessor = c.GetSetMethod (true);
-				if (accessor == null)
-					continue;
-				mattrs = accessor.Attributes;
-				if ((mattrs & MethodAttributes.MemberAccessMask) == MethodAttributes.Public) {
-					if ((bindingAttr & BindingFlags.Public) != 0)
-						match = true;
-				} else {
-					if ((bindingAttr & BindingFlags.NonPublic) != 0)
-						match = true;
-				}
-				if (!match)
-					continue;
-				match = false;
-				if ((mattrs & MethodAttributes.Static) != 0) {
-					if ((bindingAttr & BindingFlags.Static) != 0)
-						match = true;
-				} else {
-					if ((bindingAttr & BindingFlags.Instance) != 0)
-						match = true;
-				}
-				if (!match)
-					continue;
-				l.Add (c);
+			if (created != null) {
+				return created.GetProperties (bindingAttr);
 			}
-			PropertyInfo[] result = new PropertyInfo [l.Count];
-			l.CopyTo (result);
-			return result;
+			throw not_supported ();
 		}
 		
 		protected override PropertyInfo GetPropertyImpl( string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers) {
@@ -1032,42 +834,47 @@
 		}
 
 		protected override bool HasElementTypeImpl () {
-			// According to the MSDN docs, this is supported for TypeBuilders,
-			// but in reality, it is not
 			throw not_supported ();
-			//			return IsArrayImpl() || IsByRefImpl() || IsPointerImpl ();
 		}
 
 		public override object InvokeMember( string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, CultureInfo culture, string[] namedParameters) {
+			if (created != null) {
+				return created.InvokeMember (name, invokeAttr, binder, target, args, 
+					modifiers, culture, namedParameters);
+			}
 			throw not_supported ();
 		}
 
 		protected override bool IsArrayImpl ()
 		{
-			return Type.IsArrayImpl (this);
+			return false;
 		}
 
 		protected override bool IsByRefImpl () {
-			// FIXME
 			return false;
 		}
+
 		protected override bool IsCOMObjectImpl () {
+			if ((GetAttributeFlagsImpl () & TypeAttributes.Import) == TypeAttributes.Import) {
+				return true;
+			}
 			return false;
 		}
+
 		protected override bool IsPointerImpl () {
-			// FIXME
 			return false;
 		}
+
 		protected override bool IsPrimitiveImpl () {
-			// FIXME
 			return false;
 		}
+
 		protected override bool IsValueTypeImpl () {
 			return ((type_is_subtype_of (this, pmodule.assemblyb.corlib_value_type, false) || type_is_subtype_of (this, typeof(System.ValueType), false)) &&
 				this != pmodule.assemblyb.corlib_value_type &&
 				this != pmodule.assemblyb.corlib_enum_type);
 		}
-		
+
 		public override RuntimeTypeHandle TypeHandle { 
 			get { 
 				throw not_supported (); 
