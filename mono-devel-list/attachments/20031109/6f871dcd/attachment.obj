Index: DataColumn.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data/DataColumn.cs,v
retrieving revision 1.25
diff -u -w -r1.25 DataColumn.cs
--- DataColumn.cs	3 Nov 2003 12:35:50 -0000	1.25
+++ DataColumn.cs	9 Nov 2003 14:08:29 -0000
@@ -137,6 +137,8 @@
 							}
 						}
 						
+						if (nullsFound)
+							throw new DataException("Column '" + ColumnName + "' has null values in it.");
 						//TODO: Validate no null values exist
 						//do we also check different versions of the row??
 					}
Index: DataRow.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data/DataRow.cs,v
retrieving revision 1.44
diff -u -w -r1.44 DataRow.cs
--- DataRow.cs	9 Nov 2003 01:50:28 -0000	1.44
+++ DataRow.cs	9 Nov 2003 14:08:30 -0000
@@ -37,6 +37,7 @@
 		private DataRowState rowState;
 		internal int xmlRowID = 0;
 		internal bool _nullConstraintViolation;
+		private string _nullConstraintMessage;
 		private bool editing = false;
 		private bool _hasParentCollection;
 
@@ -181,12 +182,12 @@
 			get {
 				if (columnIndex < 0 || columnIndex > _table.Columns.Count)
 					throw new IndexOutOfRangeException ();
-				// Non-existent version
-				if (rowState == DataRowState.Detached && version == DataRowVersion.Current || !HasVersion (version))
-					throw new VersionNotFoundException (Locale.GetText ("There is no " + version.ToString () + " data to access."));
 				// Accessing deleted rows
 				if (rowState == DataRowState.Deleted && version != DataRowVersion.Original)
 					throw new DeletedRowInaccessibleException ("Deleted row information cannot be accessed through the row.");
+				// Non-existent version
+				if (rowState == DataRowState.Detached && version == DataRowVersion.Current || !HasVersion (version))
+					throw new VersionNotFoundException (Locale.GetText ("There is no " + version.ToString () + " data to access."));
 				switch (version) {
 				case DataRowVersion.Default:
 					if (editing || rowState == DataRowState.Detached)
@@ -210,6 +211,10 @@
 		[MonoTODO]
 		public object[] ItemArray {
 			get { 
+				// Accessing deleted rows
+				if (rowState == DataRowState.Deleted)
+					throw new DeletedRowInaccessibleException ("Deleted row information cannot be accessed through the row.");
+				
 				return current; 
 			}
 			set {
@@ -260,21 +265,12 @@
 				{
 					if (!col.AllowDBNull)
 					{
-						if (!this._table._duringDataLoad)
-						{
-							throw new NoNullAllowedException ();
-						}
-						else 
-						{
 							//Constraint violations during data load is raise in DataTable EndLoad
 							this._nullConstraintViolation = true;
-							
-						}
+						_nullConstraintMessage = "Column '" + col.ColumnName + "' does not allow nulls.";
 					}
 
 					newval= DBNull.Value;
-					
-				
 				}
 			}		
 			else if (v == DBNull.Value) 
@@ -282,17 +278,11 @@
 				
 				if (!col.AllowDBNull)
 				{
-					if (!this._table._duringDataLoad)
-					{
-						throw new NoNullAllowedException ();
-					}
-					else 
-					{
 						//Constraint violations during data load is raise in DataTable EndLoad
 						this._nullConstraintViolation = true;
-							
-					}
+					_nullConstraintMessage = "Column '" + col.ColumnName + "' does not allow nulls.";
 				}
+				
 				newval= DBNull.Value;
 			}
 			else 
@@ -349,6 +339,7 @@
 						v = Convert.ToUInt64 (v);
 						break;
 					default :
+								
 					switch(cType.ToString()) {
 						case "System.TimeSpan" :
 							v = (System.TimeSpan) v;
@@ -360,8 +351,9 @@
 							//v = (System.Object) v;
 							break;
 						default:
-							// FIXME: is exception correct?
+								if (!cType.IsArray)
 							throw new InvalidCastException("Type not supported.");
+								break;
 					}
 						break;
 				}
@@ -377,6 +369,7 @@
 			return newval;
 		}
 
+
 		/// <summary>
 		/// Gets or sets the custom error description for a row.
 		/// </summary>
@@ -640,9 +633,12 @@
 		[MonoTODO]
 		public void EndEdit () 
 		{
-			editing = false;
 			if (rowState == DataRowState.Detached)
+			{
+				editing = false;
 				return;
+			}
+
 			if (HasVersion (DataRowVersion.Proposed))
 			{
 				_table.ChangingDataRow(this, DataRowAction.Change);
@@ -653,11 +649,12 @@
 				//and ForeignKeys.
 				try
 				{
-					if (_table.DataSet == null || _table.DataSet.EnforceConstraints)
+					if ((_table.DataSet == null || _table.DataSet.EnforceConstraints) && !_table._duringDataLoad)
 						_table.Rows.ValidateDataRowInternal(this);
 				}
 				catch (Exception e)
 				{
+					editing = false;
 					proposed = null;
 					throw e;
 				}
@@ -665,6 +662,7 @@
 				CheckChildRows(DataRowAction.Change);
 				current = proposed;
 				proposed = null;
+				editing = false;
 				_table.ChangedDataRow(this, DataRowAction.Change);
 			}
 		}
@@ -1204,6 +1202,19 @@
 			}
 		}
 
+		internal void CheckNullConstraints()
+		{
+			if (_nullConstraintViolation)
+			{
+				for (int i = 0; i < proposed.Length; i++)
+				{
+					if (this[i] == DBNull.Value && !_table.Columns[i].AllowDBNull)
+						throw new NoNullAllowedException(_nullConstraintMessage);
+				}
+				_nullConstraintViolation = false;
+			}
+		}
+
 		#endregion // Methods
 	}
 
Index: DataRowCollection.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data/DataRowCollection.cs,v
retrieving revision 1.25
diff -u -w -r1.25 DataRowCollection.cs
--- DataRowCollection.cs	9 Nov 2003 01:50:28 -0000	1.25
+++ DataRowCollection.cs	9 Nov 2003 14:08:30 -0000
@@ -276,6 +276,8 @@
 		[MonoTODO]
 		internal void ValidateDataRowInternal(DataRow row)
 		{
+			//first check for null violations.
+			row.CheckNullConstraints();
 			//FIXME: this validates constraints in the order they appear
 			//in the collection. Most probably we need to do it in a 
 			//specific order like unique/primary keys first, then Foreignkeys, etc
Index: DataSet.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data/DataSet.cs,v
retrieving revision 1.48
diff -u -w -r1.48 DataSet.cs
--- DataSet.cs	3 Nov 2003 12:35:50 -0000	1.48
+++ DataSet.cs	9 Nov 2003 14:08:30 -0000
@@ -82,6 +82,14 @@
 				}
 
 				caseSensitive = value; 
+				if (!caseSensitive)
+				{
+					foreach (DataTable table in Tables)
+					{
+						foreach (Constraint c in table.Constraints)
+							c.AssertConstraint();
+					}
+				}
 			}
 		}
 
@@ -107,7 +115,20 @@
 		[DefaultValue (true)]
 		public bool EnforceConstraints {
 			get { return enforceConstraints; } 
-			set { enforceConstraints = value; }
+			set { 
+				if (value != enforceConstraints)
+				{
+					enforceConstraints = value; 
+					if (value)
+					{
+						foreach (DataTable table in Tables)
+						{
+							foreach (Constraint c in table.Constraints)
+								c.AssertConstraint();
+						}
+					}
+				}
+			}
 		}
 
 		[Browsable (false)]
@@ -791,12 +812,10 @@
 		#region ISupportInitialize methods
 		public void BeginInit ()
 		{
-			throw new NotImplementedException ();
 		}
 		
 		public void EndInit ()
 		{
-			throw new NotImplementedException ();
 		}
 		#endregion
 
Index: UniqueConstraint.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data/UniqueConstraint.cs,v
retrieving revision 1.18
diff -u -w -r1.18 UniqueConstraint.cs
--- UniqueConstraint.cs	5 Nov 2003 07:03:03 -0000	1.18
+++ UniqueConstraint.cs	9 Nov 2003 14:08:30 -0000
@@ -359,7 +359,9 @@
 			
 			//Unique?	
 			DataTable tbl = _dataTable;
-
+			bool ignoreCase = false;
+			if (_dataTable.DataSet != null)
+				ignoreCase = !_dataTable.DataSet.CaseSensitive;
 			//TODO: Investigate other ways of speeding up the validation work below.
 
 			//validate no duplicates exists.
@@ -371,14 +373,25 @@
 				DataRow[] rows = new DataRow [tbl.Rows.Count];
 				tbl.Rows.CopyTo (rows, 0);
 				
-				Array.Sort(rows, new RowsComparer(this));
+				Array.Sort(rows, new RowsComparer(this, ignoreCase));
+				
 				for (int i = 0 ; i < rows.Length - 1 ; i++) 
 				{
 					bool match = true;
 					// check if the values in the constraints columns are equal
 					for (int j = 0; j < _dataColumns.Length; j++)
 					{
-						if (!rows[i][_dataColumns[j]].Equals(rows[i + 1][_dataColumns[j]]))
+						if (_dataColumns[j].DataType == typeof(string))
+						{
+							string origVal = (string)rows[i][_dataColumns[j]];
+							string compVal = (string)rows[i + 1][_dataColumns[j]];
+							if (String.Compare(origVal, compVal, ignoreCase) != 0)
+							{
+								match = false;
+								break;
+							}
+						}
+						else if (!rows[i][_dataColumns[j]].Equals(rows[i + 1][_dataColumns[j]]))
 						{
 							match = false;
 							break;
@@ -420,6 +433,10 @@
 					rowVals[i] = row[_dataColumns[i], DataRowVersion.Current];
 			}
 			
+			bool ignoreCase = false;
+			if (_dataTable.DataSet != null)
+				ignoreCase = !_dataTable.DataSet.CaseSensitive;
+
 			foreach(DataRow compareRow in tbl.Rows)
 			{
 				if (compareRow.RowState != DataRowState.Deleted)
@@ -428,13 +445,21 @@
 					//skip if it is the same row to be validated
 					if(!row.Equals(compareRow))
 					{
-						//FIXME: should we compare to compareRow[DataRowVersion.Current]?
-						//FIXME: We need to compare to all columns the constraint is set to.
 						for (int i = 0; i < _dataColumns.Length; i++)
 						{
 							// if the values in the row are not equal to the values of
 							// the original row from the table we can move to the next row.
-							if(!rowVals[i].Equals( compareRow[_dataColumns[i]]))
+							if (_dataColumns[i].DataType == typeof(string))
+							{
+								string origVal = (string)rowVals[i];
+								string compVal = (string)compareRow[_dataColumns[i]];
+								if (String.Compare(origVal, compVal, ignoreCase) != 0)
+								{
+									isValid = true;
+									break;
+								}
+							}
+							else if (!rowVals[i].Equals( compareRow[_dataColumns[i]]))
 							{
 								isValid = true;
 								break;
@@ -467,15 +492,24 @@
 		}
 		
 		// generates a hash key for a given row based on the constraints columns.
-		internal int CalcHashValue(DataRow row)
+		internal int CalcHashValue(DataRow row, bool ignoreCase)
 		{
 			object o;
 			int retVal = 0;
+			CaseInsensitiveHashCodeProvider ciProvider = null;
+			if (ignoreCase)
+				ciProvider = new CaseInsensitiveHashCodeProvider(_dataTable.Locale);
 			for (int i = 0; i < _dataColumns.Length; i++)
 			{
 				o = row[_dataColumns[i]];
 				if (o != null)
+				{
+					if (ciProvider != null)
+						retVal += ciProvider.GetHashCode(o);
+					else
 					retVal += o.GetHashCode();
+
+				}
 			}
 			return retVal;
 		}
@@ -485,9 +519,11 @@
 		private class RowsComparer : IComparer
 		{
 			private UniqueConstraint _uc;
+			private bool _ignoreCase;
 			
-			public RowsComparer(UniqueConstraint uc)
+			public RowsComparer(UniqueConstraint uc, bool ignoreCase)
 			{
+				_ignoreCase = ignoreCase;
 				_uc = uc;
 			}
 
@@ -495,10 +531,14 @@
 			{
 				DataRow row1 = (DataRow) o1;
 				DataRow row2 = (DataRow) o2;
-				int val1 = _uc.CalcHashValue(row1);
-				int val2 = _uc.CalcHashValue(row2);
+				int val1 = _uc.CalcHashValue(row1, _ignoreCase);
+				int val2 = _uc.CalcHashValue(row2, _ignoreCase);
 				
-				return val1 - val2;
+				if (val1 > val2)
+					return 1;
+				if (val1 == val2)
+					return 0;
+				return -1;
 			}
 		}
 	}
