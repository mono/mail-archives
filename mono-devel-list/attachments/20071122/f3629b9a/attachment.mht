[From nobody Fri Feb  8 09:05:01 2008
Content-Type: multipart/mixed; boundary=&quot;=-ECRrK/uX4PPLCClLHBp4&quot;


--=-ECRrK/uX4PPLCClLHBp4
Content-Type: multipart/alternative; boundary=&quot;=-z0oNLV6fYh31VE0uVCp3&quot;


--=-z0oNLV6fYh31VE0uVCp3
Content-Type: text/plain
Content-Transfer-Encoding: 7bit

Hi everybody,
    
    Last year, we have added Prepared Statement to the SqlSessionHandler
(in order that bytea are send in a binary format for postgresql).
There's a problem each time you do a Prepare, a plan is allocated to
PostGreSQL... (in order to be reused later). In the current state,
prepared statement are never reused and never &quot;Deallocated&quot; (prepared
statement are deallocated when you close the connection)

With this patch, the statement are prepared the first time and reused
after. There's a big gain because the statement are compiled by the
database and cached only once... There's no leaks too anymore!

Please comment, review and commit (if it seems correct)

Thanks

    

--=-z0oNLV6fYh31VE0uVCp3
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 7bit

&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 TRANSITIONAL//EN&quot;&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
  &lt;META HTTP-EQUIV=&quot;Content-Type&quot; CONTENT=&quot;text/html; CHARSET=UTF-8&quot;&gt;
  &lt;META NAME=&quot;GENERATOR&quot; CONTENT=&quot;GtkHTML/3.16.1&quot;&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
Hi everybody,&lt;BR&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; Last year, we have added Prepared Statement to the SqlSessionHandler (in order that bytea are send in a binary format for postgresql). There's a problem each time you do a Prepare, a plan is allocated to PostGreSQL... (in order to be reused later). In the current state, prepared statement are never reused and never &amp;quot;Deallocated&amp;quot; (prepared statement are deallocated when you close the connection)&lt;BR&gt;
&lt;BR&gt;
With this patch, the statement are prepared the first time and reused after. There's a big gain because the statement are compiled by the database and cached only once... There's no leaks too anymore!&lt;BR&gt;
&lt;BR&gt;
Please comment, review and commit (if it seems correct)&lt;BR&gt;
&lt;BR&gt;
Thanks&lt;BR&gt;
&lt;BR&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;/BODY&gt;
&lt;/HTML&gt;

--=-z0oNLV6fYh31VE0uVCp3--

--=-ECRrK/uX4PPLCClLHBp4
Content-Disposition: attachment; filename=patch_sqlserverhandler
Content-Type: text/x-patch; name=patch_sqlserverhandler; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Index: System.Web.SessionState/SessionSQLServerHandler.cs
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
--- System.Web.SessionState/SessionSQLServerHandler.cs	(r=C3=A9vision 901=
26)
+++ System.Web.SessionState/SessionSQLServerHandler.cs	(copie de travail)
@@ -47,10 +47,14 @@
                =20
 		const string defaultParamPrefix =3D &quot;:&quot;;
 		string paramPrefix;
-		string selectCommand =3D &quot;SELECT timeout,staticobjectsdata,sessiondata=
 FROM ASPStateTempSessions WHERE SessionID =3D :SessionID AND Expires &gt; :=
Expires AND AppPath =3D :AppPath&quot;;
-		string insertCommand =3D &quot;INSERT INTO ASPStateTempSessions (SessionId,=
 AppPath, Created, expires, timeout, StaticObjectsData, SessionData)  VAL=
UES (:SessionID, :AppPath, :Created, :Expires, :Timeout, :StaticObjectsDa=
ta, :SessionData)&quot;;
-		string updateCommand =3D &quot;UPDATE ASPStateTempSessions SET expires =3D =
:Expires, timeout =3D :Timeout, SessionData =3D :SessionData WHERE Sessio=
nId =3D :SessionID&quot;;
-		string deleteCommand =3D &quot;DELETE FROM ASPStateTempSessions WHERE Sessi=
onId =3D :SessionID&quot;;
+		string selectCommandText =3D &quot;SELECT timeout,staticobjectsdata,session=
data FROM ASPStateTempSessions WHERE SessionID =3D :SessionID AND Expires=
 &gt; :Expires AND AppPath =3D :AppPath&quot;;
+		IDbCommand selectCommand =3D null;
+		string insertCommandText =3D &quot;INSERT INTO ASPStateTempSessions (Sessio=
nId, AppPath, Created, expires, timeout, StaticObjectsData, SessionData) =
 VALUES (:SessionID, :AppPath, :Created, :Expires, :Timeout, :StaticObjec=
tsData, :SessionData)&quot;;
+		IDbCommand insertCommand =3D null;
+		string updateCommandText =3D &quot;UPDATE ASPStateTempSessions SET expires =
=3D :Expires, timeout =3D :Timeout, SessionData =3D :SessionData WHERE Se=
ssionId =3D :SessionID&quot;;
+		IDbCommand updateCommand =3D null;
+		string deleteCommandText =3D &quot;DELETE FROM ASPStateTempSessions WHERE S=
essionId =3D :SessionID&quot;;
+		IDbCommand deleteCommand =3D null;
=20
 		public void Dispose ()
 		{
@@ -83,17 +87,17 @@
 			cnc =3D (IDbConnection) Activator.CreateInstance (cncType);
 			cnc.ConnectionString =3D cncString;
 			try {
-				cnc.Open ();
+				InitializeConnection ();
 			} catch (Exception exc) {
 				cnc =3D null;
 				throw exc;
 			}
=20
 			if (paramPrefix !=3D defaultParamPrefix) {
-				ReplaceParamPrefix (ref selectCommand);
-				ReplaceParamPrefix (ref insertCommand);
-				ReplaceParamPrefix (ref updateCommand);
-				ReplaceParamPrefix (ref deleteCommand);
+				ReplaceParamPrefix (ref selectCommandText);
+				ReplaceParamPrefix (ref insertCommandText);
+				ReplaceParamPrefix (ref updateCommandText);
+				ReplaceParamPrefix (ref deleteCommandText);
 			}
 		}
=20
@@ -174,14 +178,10 @@
=20
 		IDataReader GetReader (string id)
 		{
-			IDbCommand command =3D null;
-			command =3D cnc.CreateCommand();
-			command.CommandText =3D selectCommand;
-			command.Parameters.Add (CreateParam (command, DbType.String, &quot;Session=
ID&quot;, id));
-			command.Parameters.Add (CreateParam (command, DbType.DateTime, &quot;Expir=
es&quot;, DateTime.Now ));
-			command.Parameters.Add (CreateParam (command, DbType.String, &quot;AppPath=
&quot;, this.AppPath));
-			command.Prepare ();
-			return command.ExecuteReader ();
+			((IDataParameter)selectCommand.Parameters[&quot;SessionID&quot;]).Value =3D id;
+			((IDataParameter)selectCommand.Parameters[&quot;Expires&quot;]).Value =3D DateT=
ime.Now;
+			((IDataParameter)selectCommand.Parameters[&quot;AppPath&quot;]).Value =3D this.=
AppPath;
+			return selectCommand.ExecuteReader ();
 		}
=20
 		IDataReader GetReaderWithRetry (string id)
@@ -192,11 +192,11 @@
 			}
=20
 			try {
-				cnc.Close ();
+				DisposeConnection();
 			} catch {
 			}
=20
-			cnc.Open ();
+			InitializeConnection();
 			return GetReader (id);
 		}
=20
@@ -224,25 +224,14 @@
=20
 		void InsertSession (HttpSessionState session, int timeout)
 		{
-			IDbCommand command =3D cnc.CreateCommand ();
-			IDataParameterCollection param;
-
-			command.CommandText =3D insertCommand;
-		=09
-
-			param =3D command.Parameters;
-			param.Add (CreateParam (command, DbType.String, &quot;SessionID&quot;, session.=
SessionID));
-			param.Add (CreateParam (command, DbType.String, &quot;AppPath&quot;, this.AppPa=
th));
-			param.Add (CreateParam (command, DbType.DateTime, &quot;Created&quot;, DateTime=
.Now));
-			param.Add (CreateParam (command, DbType.DateTime, &quot;Expires&quot;, DateTime=
.Now.AddMinutes (timeout)));
-			param.Add (CreateParam (command, DbType.Int32, &quot;Timeout&quot;, timeout));
-			param.Add (CreateParam (command, DbType.Binary, &quot;StaticObjectsData&quot;,
-						   session.StaticObjects.ToByteArray ()));
-			param.Add (CreateParam (command, DbType.Binary, &quot;SessionData&quot;,
-						   session.SessionDictionary.ToByteArray ()));
-
-			command.Prepare ();
-			command.ExecuteNonQuery ();
+			((IDataParameter)insertCommand.Parameters[&quot;SessionID&quot;]).Value =3D ses=
sion.SessionID;
+			((IDataParameter)insertCommand.Parameters[&quot;AppPath&quot;]).Value =3D this.=
AppPath;
+			((IDataParameter)insertCommand.Parameters[&quot;Created&quot;]).Value =3D DateT=
ime.Now;
+			((IDataParameter)insertCommand.Parameters[&quot;Expires&quot;]).Value =3D DateT=
ime.Now.AddMinutes (timeout);
+			((IDataParameter)insertCommand.Parameters[&quot;Timeout&quot;]).Value =3D timeo=
ut;
+			((IDataParameter)insertCommand.Parameters[&quot;StaticObjectsData&quot;]).Value=
 =3D session.StaticObjects.ToByteArray ();
+			((IDataParameter)insertCommand.Parameters[&quot;SessionData&quot;]).Value =3D s=
ession.SessionDictionary.ToByteArray ();
+			insertCommand.ExecuteNonQuery ();
 		}
=20
 		void InsertSessionWithRetry (HttpSessionState session, int timeout)
@@ -254,30 +243,22 @@
 			}
=20
 			try {
-				cnc.Close ();
+				DisposeConnection ();
 			} catch {
 			}
=20
-			cnc.Open ();
+			InitializeConnection ();
 			InsertSession (session, timeout);
 		}
=20
 		void UpdateSession (string id, int timeout, SessionDictionary dict)
 		{
-			IDbCommand command =3D cnc.CreateCommand ();
-			IDataParameterCollection param;
-
-			command.CommandText =3D updateCommand;
-
-			param =3D command.Parameters;
-			param.Add (CreateParam (command, DbType.String, &quot;SessionID&quot;, id));
-			param.Add (CreateParam (command, DbType.DateTime, &quot;Expires&quot;, DateTime=
.Now.AddMinutes (timeout)));
-			param.Add (CreateParam (command, DbType.Int32, &quot;Timeout&quot;, timeout));
-			param.Add (CreateParam (command, DbType.Binary, &quot;SessionData&quot;,
-								dict.ToByteArray ()));
-
-			command.Prepare ();
-			command.ExecuteNonQuery ();
+			((IDataParameter)updateCommand.Parameters[&quot;SessionID&quot;]).Value =3D id;
+			((IDataParameter)updateCommand.Parameters[&quot;Expires&quot;]).Value =3D DateT=
ime.Now.AddMinutes (timeout);
+			((IDataParameter)updateCommand.Parameters[&quot;Timeout&quot;]).Value =3D timeo=
ut;
+			((IDataParameter)updateCommand.Parameters[&quot;SessionData&quot;]).Value =3D d=
ict.ToByteArray ();
+		=09
+			updateCommand.ExecuteNonQuery ();
 		}
=20
 		void UpdateSessionWithRetry (string id, int timeout, SessionDictionary=
 dict)
@@ -289,24 +270,19 @@
 			}
=20
 			try {
-				cnc.Close ();
+				DisposeConnection ();
 			} catch {
 			}
=20
-			cnc.Open ();
+			InitializeConnection ();
 			UpdateSession (id, timeout, dict);
 		}
=20
 		void DeleteSession (string id)
 		{
-			IDbCommand command =3D cnc.CreateCommand ();
-			IDataParameterCollection param;
-
-			command.CommandText =3D deleteCommand;
-			param =3D command.Parameters;
-			param.Add (CreateParam (command, DbType.String, &quot;SessionID&quot;, id));
-			command.Prepare ();
-			command.ExecuteNonQuery ();
+		=09
+			((IDataParameter)deleteCommand.Parameters[&quot;SessionID&quot;]).Value =3D id;
+			deleteCommand.ExecuteNonQuery ();
 		}
=20
 		void DeleteSessionWithRetry (string id)
@@ -318,14 +294,60 @@
 			}
=20
 			try {
-				cnc.Close ();
+				DisposeConnection ();
 			} catch {
 			}
=20
-			cnc.Open ();
+			InitializeConnection ();
 			DeleteSession (id);
 		}
=20
+		void InitializeConnection()
+		{
+			cnc.Open ();
+			selectCommand =3D cnc.CreateCommand ();
+			selectCommand.CommandText =3D selectCommandText;
+			selectCommand.Parameters.Add (CreateParam (selectCommand, DbType.Stri=
ng, &quot;SessionID&quot;, String.Empty));
+			selectCommand.Parameters.Add (CreateParam (selectCommand, DbType.Date=
Time, &quot;Expires&quot;, DateTime.MinValue ));
+			selectCommand.Parameters.Add (CreateParam (selectCommand, DbType.Stri=
ng, &quot;AppPath&quot;, String.Empty));
+			selectCommand.Prepare ();
+		=09
+			insertCommand =3D cnc.CreateCommand ();
+			insertCommand.CommandText =3D insertCommandText;
+			insertCommand.Parameters.Add (CreateParam (insertCommand, DbType.Stri=
ng, &quot;SessionID&quot;, String.Empty));
+			insertCommand.Parameters.Add (CreateParam (insertCommand, DbType.Stri=
ng, &quot;AppPath&quot;, String.Empty));
+			insertCommand.Parameters.Add (CreateParam (insertCommand, DbType.Date=
Time, &quot;Created&quot;, DateTime.MinValue));
+			insertCommand.Parameters.Add (CreateParam (insertCommand, DbType.Date=
Time, &quot;Expires&quot;, DateTime.MinValue));
+			insertCommand.Parameters.Add (CreateParam (insertCommand, DbType.Int3=
2, &quot;Timeout&quot;, 0));
+			insertCommand.Parameters.Add (CreateParam (insertCommand, DbType.Bina=
ry, &quot;StaticObjectsData&quot;,new byte[0] ));
+			insertCommand.Parameters.Add (CreateParam (insertCommand, DbType.Bina=
ry, &quot;SessionData&quot;,
+						   new byte[0]));
+			insertCommand.Prepare();
+		=09
+			updateCommand =3D cnc.CreateCommand ();
+			updateCommand.CommandText =3D updateCommandText;
+			updateCommand.Parameters.Add (CreateParam (updateCommand, DbType.Stri=
ng, &quot;SessionID&quot;, String.Empty));
+			updateCommand.Parameters.Add (CreateParam (updateCommand, DbType.Date=
Time, &quot;Expires&quot;, DateTime.MinValue));
+			updateCommand.Parameters.Add (CreateParam (updateCommand, DbType.Int3=
2, &quot;Timeout&quot;, 0));
+			updateCommand.Parameters.Add (CreateParam (updateCommand, DbType.Bina=
ry, &quot;SessionData&quot;,
+								new byte[0]));
+			updateCommand.Prepare();
+		=09
+			deleteCommand =3D cnc.CreateCommand ();
+			deleteCommand.CommandText =3D deleteCommandText;
+			deleteCommand.Parameters.Add (CreateParam (deleteCommand, DbType.Stri=
ng, &quot;SessionID&quot;, String.Empty));
+			deleteCommand.Prepare();
+		}
+	=09
+		void DisposeConnection()
+		{
+			selectCommand.Dispose();
+			insertCommand.Dispose();
+			updateCommand.Dispose();
+			deleteCommand.Dispose();
+			cnc.Close();
+		}
+	=09
 		private IDataParameter CreateParam (IDbCommand command, DbType type,
 				string name, object value)
 		{

--=-ECRrK/uX4PPLCClLHBp4--


]