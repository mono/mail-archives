Index: mono/metadata/Makefile.am
===================================================================
--- mono/metadata/Makefile.am	(revision 159039)
+++ mono/metadata/Makefile.am	(working copy)
@@ -1,3 +1,7 @@
+if SUPPORT_SGEN
+sgen_library = libmonoruntimesgen.la libmonoruntimesgen-static.la 
+endif
+
 if HOST_WIN32
 win32_sources = \
 	console-win32.c
@@ -34,7 +38,7 @@
 # libtool is not capable of creating static/shared versions of the same
 # convenience lib, so we have to do it ourselves
 #
-noinst_LTLIBRARIES = libmonoruntime.la libmonoruntime-static.la
+noinst_LTLIBRARIES = libmonoruntime.la libmonoruntime-static.la $(sgen_library)
 
 INCLUDES = -I$(top_srcdir) -I$(top_srcdir)/mono $(LIBGC_CFLAGS) $(GLIB_CFLAGS) -DMONO_BINDIR=\"$(bindir)/\" -DMONO_ASSEMBLIES=\"$(assembliesdir)\" -DMONO_CFG_DIR=\"$(confdir)\"
 
@@ -174,10 +178,19 @@
 	verify-internals.h	\
 	wrapper-types.h
 
+libmonoruntime_la_CFLAGS = $(BOEHM_DEFINES)
+
 libmonoruntime_static_la_SOURCES = $(libmonoruntime_la_SOURCES)
-
 libmonoruntime_static_la_LDFLAGS = -static
+libmonoruntime_static_la_CFLAGS = $(BOEHM_DEFINES)
 
+libmonoruntimesgen_la_SOURCES = $(libmonoruntime_la_SOURCES)
+libmonoruntimesgen_la_CFLAGS = $(SGEN_DEFINES)
+
+libmonoruntimesgen_static_la_SOURCES = $(libmonoruntime_la_SOURCES)
+libmonoruntimesgen_static_la_CFLAGS = $(SGEN_DEFINES)
+libmonoruntimesgen_static_la_LDFLAGS = -static
+
 libmonoruntimeincludedir = $(includedir)/mono-$(API_VER)/mono/metadata
 
 libmonoruntimeinclude_HEADERS = \
Index: mono/io-layer/Makefile.am
===================================================================
--- mono/io-layer/Makefile.am	(revision 159039)
+++ mono/io-layer/Makefile.am	(working copy)
@@ -1,5 +1,9 @@
-noinst_LTLIBRARIES = libwapi.la
+if SUPPORT_SGEN
+sgen_library = libwapisgen.la
+endif
 
+noinst_LTLIBRARIES = libwapi.la $(sgen_library)
+
 INCLUDES = \
 	$(GLIB_CFLAGS)		\
 	$(LIBGC_CFLAGS)		\
@@ -135,7 +139,13 @@
 libwapi_la_LIBADD = -lproc
 endif
 
+libwapi_la_CFLAGS = $(BOEHM_DEFINES)
 
+if SUPPORT_SGEN
+libwapisgen_la_SOURCES = $(libwapi_la_SOURCES)
+libwapisgen_la_CFLAGS = $(SGEN_DEFINES)
+endif
+
 EXTRA_DIST =	\
 	$(WINDOWS_SRC)	\
         $(HPPA_SRC) \
Index: mono/mini/cpu-x86.md
===================================================================
--- mono/mini/cpu-x86.md	(revision 159039)
+++ mono/mini/cpu-x86.md	(working copy)
@@ -68,7 +68,7 @@
 br: len:5
 seq_point: len:16
 
-int_beq: len:6 nacl:28
+int_beq: len:6
 int_bge: len:6
 int_bgt: len:6
 int_ble: len:6
Index: mono/mini/Makefile.am
===================================================================
--- mono/mini/Makefile.am	(revision 159039)
+++ mono/mini/Makefile.am	(working copy)
@@ -18,6 +18,12 @@
 	$(GLIB_LIBS)	\
 	$(libgc_libs)
 
+sgen_libs = \
+	$(monodir)/mono/metadata/libmonoruntimesgen.la	\
+	$(monodir)/mono/io-layer/libwapisgen.la	\
+	$(monodir)/mono/utils/libmonoutils.la \
+	$(GLIB_LIBS)
+
 static_libs=	\
 	$(monodir)/mono/metadata/libmonoruntime-static.la	\
 	$(monodir)/mono/io-layer/libwapi.la	\
@@ -25,6 +31,12 @@
 	$(GLIB_LIBS)	\
 	$(libgc_static_libs)
 
+sgen_libs = \
+	$(monodir)/mono/metadata/libmonoruntimesgen-static.la	\
+	$(monodir)/mono/io-layer/libwapisgen.la	\
+	$(monodir)/mono/utils/libmonoutils.la \
+	$(GLIB_LIBS)
+
 CLASS=$(mcs_topdir)/class/lib/net_2_0
 
 RUNTIME = MONO_PATH=$(CLASS) $(top_builddir)/runtime/mono-wrapper
@@ -35,7 +47,6 @@
 
 AM_CFLAGS = \
 	-I$(top_srcdir) 	\
-	$(LIBGC_CFLAGS)		\
 	$(GLIB_CFLAGS)		\
 	$(LLVM_CFLAGS)		\
 	$(PLATFORM_CFLAGS) $(ARCH_CFLAGS)
@@ -68,16 +79,22 @@
 
 if JIT_SUPPORTED
 
+if SUPPORT_SGEN
+sgen_binaries = mono-sgen
+sgen_libraries = libmono-sgen-2.0.la
+sgen_static_libraries = libmonosgen-static.la
+endif
+
 if HOST_WIN32
 bin_PROGRAMS = mono monow
 else
-bin_PROGRAMS = mono
+bin_PROGRAMS = mono $(sgen_binaries)
 endif
 
 noinst_PROGRAMS = genmdesc
 
-lib_LTLIBRARIES = libmono-2.0.la
-noinst_LTLIBRARIES = libmono-static.la
+lib_LTLIBRARIES = libmono-2.0.la $(sgen_libraries)
+noinst_LTLIBRARIES = libmono-static.la $(sgen_static_libraries)
 
 if MOONLIGHT
 noinst_LTLIBRARIES += libmono-moon.la
@@ -87,7 +104,11 @@
 
 mono_SOURCES = \
 	main.c
+mono_CFLAGS = $(BOEHM_DEFINES) $(LIBGC_CFLAGS) $(AM_CFLAGS)
 
+mono_sgen_SOURCES = $(mono_SOURCES)
+mono_sgen_CFLAGS = $(SGEN_DEFINES) $(AM_CFLAGS)
+
 # We build this after libmono was built so it contains the date when the final
 # link was done
 buildver.h: libmono-static.la
@@ -143,6 +164,7 @@
 monow_LDADD = $(mono_LDADD)
 monow_LDFLAGS = $(mono_LDFLAGS) -mwindows
 monow_SOURCES = $(mono_SOURCES)
+monow_CFLAGS  = $(BOEHM_DEFINES) $(LIBGC_CFLAGS) $(AM_CFLAGS)
 endif
 
 genmdesc_SOURCES = \
@@ -429,16 +451,29 @@
 endif
 
 libmono_2_0_la_SOURCES = $(common_sources) $(llvm_sources) $(arch_sources) $(os_sources)
+libmono_2_0_la_CFLAGS = $(BOEHM_DEFINES) $(LIBGC_CFLAGS) $(AM_CFLAGS)
 
+libmono_sgen_2_0_la_SOURCES = $(libmono_2_0_la_SOURCES)
+libmono_sgen_2_0_la_CFLAGS = $(SGEN_DEFINES) $(AM_CFLAGS)
+
 if MOONLIGHT
 libmono_moon_la_SOURCES = $(libmono_2_0_la_SOURCES)
+libmono_moon_la_CFLAGS = $(BOEHM_DEFINES) $(LIBGC_CFLAGS) $(AM_CFLAGS)
 endif
 
 libmono_static_la_SOURCES = $(libmono_2_0_la_SOURCES)
+libmono_static_la_CFLAGS = $(BOEHM_DEFINES) $(LIBGC_CFLAGS) $(AM_CFLAGS)
 nodist_libmono_static_la_SOURCES = $(nodist_libmono_la_SOURCES)
 libmono_static_la_LDFLAGS = -static
 libmono_static_la_LIBADD = $(static_libs) $(MONO_DTRACE_OBJECT)
 
+libmonosgen_static_la_SOURCES = $(libmono_2_0_la_SOURCES)
+libmonosgen_static_la_CFLAGS = $(SGEN_DEFINES) $(AM_CFLAGS)
+nodist_libmonosgen_static_la_SOURCES = $(nodist_libmono_la_SOURCES)
+libmonosgen_static_la_LDFLAGS = -static
+libmonosgen_static_la_LIBADD = $(static_libs) $(MONO_DTRACE_OBJECT)
+
+
 BURGSRC= $(common_BURGSRC) $(arch_BURGSRC)
 
 libmonoincludedir = $(includedir)/mono-$(API_VER)/mono/jit
Index: configure.in
===================================================================
--- configure.in	(revision 159039)
+++ configure.in	(working copy)
@@ -851,23 +851,23 @@
 			AC_MSG_ERROR("GC requested but header files not found! You may need to install them by hand.")
 		fi
 
-		AC_DEFINE(HAVE_BOEHM_GC, 1, [Have Boehm GC])
-		AC_SUBST(HAVE_BOEHM_GC)
 		LIBGC_LIBS="-lgc $libdl"
 		LIBGC_STATIC_LIBS="$LIBGC_LIBS"
 		libmono_ldflags="$libmono_ldflags -lgc"
 
+		BOEHM_DEFINES=""
+
 		# AC_CHECK_FUNCS does not work for some reason...
 		AC_CHECK_LIB(gc, GC_gcj_malloc, found_gcj_malloc="yes",,$libdl)
 		if test "x$found_gcj_malloc" = "xyes"; then
-			AC_DEFINE(HAVE_GC_GCJ_MALLOC, 1, [Have GC_gcj_malloc])
+		   	BOEHM_DEFINES="-DHAVE_GC_GCJ_MALLOC"
 			AC_DEFINE_UNQUOTED(USED_GC_NAME, "System Boehm (with typed GC)", [GC description])
 		else
 			AC_DEFINE_UNQUOTED(USED_GC_NAME, "System Boehm (no typed GC)", [GC description])
 		fi
 		AC_CHECK_LIB(gc, GC_enable, found_gc_enable="yes",,$libdl)
 		if test "x$found_gc_enable" = "xyes"; then
-			AC_DEFINE(HAVE_GC_ENABLE, 1, [Have 'GC_enable'])
+		   	BOEHM_DEFINES="-DHAVE_GC_ENABLE $BOEHM_DEFINES"
 		fi
 		;;
 
@@ -881,15 +881,7 @@
 		LIBGC_LIBS='$(top_builddir)/libgc/libmonogc.la'
 		LIBGC_STATIC_LIBS='$(top_builddir)/libgc/libmonogc-static.la'
 
-		AC_DEFINE(HAVE_BOEHM_GC, 1, [Have Boehm GC])
-		AC_SUBST(HAVE_BOEHM_GC)
-
-		AC_DEFINE(HAVE_GC_H, 1, [Have gc.h])
-		AC_DEFINE(USE_INCLUDED_LIBGC, 1, [Use included libgc])
-
-		# The included libgc contains GCJ support
-		AC_DEFINE(HAVE_GC_GCJ_MALLOC, 1, [Have GC_gcj_malloc])
-		AC_DEFINE(HAVE_GC_ENABLE, 1, [Have GC_enable])
+		BOEHM_DEFINES="-DHAVE_BOEHM_GC -DHAVE_GC_H -DUSE_INCLUDED_LIBGC -DHAVE_GC_GCJ_MALLOC -DHAVE_GC_ENABLE"
 		if test x$enable_parallel_mark = xyes; then
 			AC_DEFINE_UNQUOTED(USED_GC_NAME, "Included Boehm (with typed GC and Parallel Mark)", [GC description])
 		else
@@ -897,15 +889,15 @@
 		fi
 		;;
 
-	xsgen)
-		found_boehm=no
-		gc_headers=no
-		use_included_gc=no
-		AC_DEFINE(HAVE_SGEN_GC,1,[Using the simple generational GC.])
-		AC_DEFINE(HAVE_MOVING_COLLECTOR,1,[The GC can move objects.])
-		AC_DEFINE(HAVE_WRITE_BARRIERS,1,[The GC needs write barriers.])
-		AC_DEFINE_UNQUOTED(USED_GC_NAME, "Simple generational", [GC description])
-		;;
+dnl 	xsgen)
+dnl 		found_boehm=no
+dnl 		gc_headers=no
+dnl 		use_included_gc=no
+dnl 		AC_DEFINE(HAVE_SGEN_GC,1,[Using the simple generational GC.])
+dnl 		AC_DEFINE(HAVE_MOVING_COLLECTOR,1,[The GC can move objects.])
+dnl 		AC_DEFINE(HAVE_WRITE_BARRIERS,1,[The GC needs write barriers.])
+dnl 		AC_DEFINE_UNQUOTED(USED_GC_NAME, "Simple generational", [GC description])
+dnl 		;;
 
 	xnone)
 		AC_MSG_WARN("Compiling mono without GC.")
@@ -917,6 +909,12 @@
 		;;
 esac
 
+gc="sgen + $gc"
+SGEN_DEFINES="-DHAVE_SGEN_GC -DHAVE_MOVING_COLLECTOR -DHAVE_WRITE_BARRIERS"
+AC_SUBST(SGEN_DEFINES)
+AC_SUBST(BOEHM_DEFINES)
+AM_CONDITIONAL(SUPPORT_SGEN, true)
+
 AC_ARG_WITH(large-heap, [  --with-large-heap=yes,no       Enable support for GC heaps larger than 3GB (defaults to no)], [large_heap=$withval], [large_heap=no])
 if test "x$large_heap" = "xyes"; then
    echo "FOO"
@@ -2449,7 +2447,7 @@
 
 AC_MSG_CHECKING(if the Mono Debugger is supported on this platform)
 if test "x$mono_debugger_supported" = "xyes"; then
-	AC_DEFINE(MONO_DEBUGGER_SUPPORTED,1,[The Mono Debugger is supported on this platform])
+        BOEHM_DEFINES="$BOEHM_DEFINES -DMONO_DEBUGGER_SUPPORTED"
 fi
 AC_MSG_RESULT($mono_debugger_supported)
 AM_CONDITIONAL(MONO_DEBUGGER_SUPPORTED, test x$mono_debugger_supported = xyes)
@@ -2939,15 +2937,6 @@
    AC_MSG_WARN(Turning off static Mono is a risk, you might run into unexpected bugs)
 fi
 
-if test x$gc = xsgen; then
-        echo IMPORTANT:
-	echo IMPORTANT: You have selected an experimental, work-in-progress 
-	echo IMPORTANT: GC engine.  This GC engine is currently not supported
-	echo IMPORTANT: and is not yet ready for use.  
-	echo IMPORTANT:
-	echo IMPORTANT: There are known problems with it, use at your own risk.
-fi
-
 if test x$enable_llvm = xyes; then
    echo IMPORTANT:
    echo IMPORTANT: The LLVM Back End is experimental and has known problems.
