Index: debug-mono-symfile.c
===================================================================
--- debug-mono-symfile.c	(revision 39325)
+++ debug-mono-symfile.c	(working copy)
@@ -1,5 +1,7 @@
 #include <config.h>
 #include <stdlib.h>
+#include <stdio.h>
+#include <errno.h>
 #include <string.h>
 #include <signal.h>
 #include <sys/param.h>
@@ -20,6 +22,10 @@
 #include <fcntl.h>
 #include <unistd.h>
 
+#ifndef O_BINARY
+#define O_BINARY 0
+#endif
+
 #define RANGE_TABLE_CHUNK_SIZE		256
 #define CLASS_TABLE_CHUNK_SIZE		256
 #define TYPE_TABLE_PTR_CHUNK_SIZE	256
@@ -97,16 +103,26 @@
 mono_debug_open_mono_symbol_file (MonoDebugHandle *handle, gboolean create_symfile)
 {
 	MonoSymbolFile *symfile;
+	int f;
 
 	mono_loader_lock ();
 	symfile = g_new0 (MonoSymbolFile, 1);
 
 	symfile->filename = g_strdup_printf ("%s.mdb", mono_image_get_filename (handle->image));
 
-	if (!g_file_get_contents (symfile->filename, (gchar **) &symfile->raw_contents,
-				  &symfile->raw_contents_size, NULL))
-		symfile->raw_contents = NULL;
-
+	if ((f = open (symfile->filename, O_RDONLY | O_BINARY)) > 0) {
+		struct stat stat_buf;
+			
+		if (fstat (f, &stat_buf) < 0) {
+			g_warning ("stat of %s failed: %s", symfile->filename,  g_strerror (errno));
+		} else {	
+			symfile->raw_contents_size = stat_buf.st_size;
+			symfile->raw_contents = mono_raw_buffer_load (f, FALSE, 0, stat_buf.st_size);
+		}
+		
+		close (f);
+	}
+	
 	if (load_symfile (handle, symfile)) {
 		mono_loader_unlock ();
 		return symfile;
@@ -130,6 +146,9 @@
 	if (symfile->method_hash)
 		g_hash_table_destroy (symfile->method_hash);
 
+	if (symfile->raw_contents)
+		mono_raw_buffer_free (symfile->raw_contents);
+	
 	g_free (symfile);
 	mono_loader_unlock ();
 }
Index: profiler.c
===================================================================
--- profiler.c	(revision 39325)
+++ profiler.c	(working copy)
@@ -12,6 +12,7 @@
 #ifdef HAVE_BACKTRACE_SYMBOLS
 #include <execinfo.h>
 #endif
+#include <mono/os/gc_wrapper.h>
 
 static MonoProfiler * current_profiler = NULL;
 
@@ -46,6 +47,9 @@
 static MonoProfileThreadFunc   thread_start;
 static MonoProfileThreadFunc   thread_end;
 
+static MonoProfileGCFunc    on_gc;
+static MonoProfileGCHeapResizeFunc    heap_resize;
+
 static MonoProfileCoverageFilterFunc coverage_filter_cb;
 
 static MonoProfileFunc shutdown_callback;
@@ -162,8 +166,30 @@
 	class_start_unload = start_unload;
 	class_end_unload = end_unload;
 }
+static void
+mono_profiler_heap_resize (int new_size)
+{
+	if ((mono_profiler_events & MONO_PROFILE_GC) && heap_resize)
+		heap_resize (current_profiler, new_size);
+}
 
+static void
+mono_profiler_gc (int gc_num)
+{
+	if ((mono_profiler_events & MONO_PROFILE_GC) && on_gc)
+		on_gc (current_profiler, gc_num);
+}
+
 void
+mono_profiler_install_gc (MonoProfileGCFunc f, MonoProfileGCHeapResizeFunc hf)
+{
+	GC_profile_marks_set = mono_profiler_gc;
+	GC_profile_heap_resize = mono_profiler_heap_resize;
+	on_gc = f;
+	heap_resize = hf;
+}
+
+void
 mono_profiler_method_enter (MonoMethod *method)
 {
 	if ((mono_profiler_events & MONO_PROFILE_ENTER_LEAVE) && method_enter)
@@ -226,6 +252,7 @@
 		thread_end (current_profiler, tid);
 }
 
+
 void 
 mono_profiler_assembly_event  (MonoAssembly *assembly, int code)
 {
@@ -357,6 +384,22 @@
 		shutdown_callback (current_profiler);
 }
 
+gboolean
+mono_profiler_mark_set (MonoObject* o)
+{
+	return GC_is_marked (o);
+}
+
+void
+mono_profiler_gc_get_heap_stats (int* arena_size, int* live_bytes)
+{
+	if (arena_size)
+		*arena_size = GC_get_heap_size ();
+	
+	if (live_bytes)
+		*live_bytes = GC_get_heap_size () - GC_get_free_bytes ();
+}
+
 static GHashTable *coverage_hash = NULL;
 
 MonoProfileCoverageInfo* 
Index: profiler.h
===================================================================
--- profiler.h	(revision 39325)
+++ profiler.h	(working copy)
@@ -64,6 +64,8 @@
 typedef void (*MonoProfileThreadFunc)     (MonoProfiler *prof, guint32 tid);
 typedef void (*MonoProfileAllocFunc)      (MonoProfiler *prof, MonoObject *obj, MonoClass *klass);
 typedef void (*MonoProfileStatFunc)       (MonoProfiler *prof, guchar *ip, void *context);
+typedef void (*MonoProfileGCFunc)       (MonoProfiler *prof, int gc_num);
+typedef void (*MonoProfileGCHeapResizeFunc)       (MonoProfiler *prof, int new_size);
 
 typedef gboolean (*MonoProfileCoverageFilterFunc)   (MonoProfiler *prof, MonoMethod *method);
 
@@ -94,8 +96,14 @@
 void mono_profiler_install_statistical (MonoProfileStatFunc callback);
 void mono_profiler_install_coverage_filter (MonoProfileCoverageFilterFunc callback);
 void mono_profiler_coverage_get  (MonoProfiler *prof, MonoMethod *method, MonoProfileCoverageFunc func);
+void mono_profiler_install_gc (MonoProfileGCFunc callback, MonoProfileGCHeapResizeFunc hf);
 
 void mono_profiler_load             (const char *desc);
 
+/* data gathering */
+
+gboolean mono_profiler_mark_set (MonoObject* o);
+void mono_profiler_gc_get_heap_stats (int* arena_size, int* live_bytes);
+
 #endif /* __MONO_PROFILER_H__ */
 
