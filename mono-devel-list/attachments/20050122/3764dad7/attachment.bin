Index: debug-mono-symfile.c
===================================================================
--- debug-mono-symfile.c	(revision 39325)
+++ debug-mono-symfile.c	(working copy)
@@ -1,5 +1,7 @@
 #include <config.h>
 #include <stdlib.h>
+#include <stdio.h>
+#include <errno.h>
 #include <string.h>
 #include <signal.h>
 #include <sys/param.h>
@@ -20,6 +22,10 @@
 #include <fcntl.h>
 #include <unistd.h>
 
+#ifndef O_BINARY
+#define O_BINARY 0
+#endif
+
 #define RANGE_TABLE_CHUNK_SIZE		256
 #define CLASS_TABLE_CHUNK_SIZE		256
 #define TYPE_TABLE_PTR_CHUNK_SIZE	256
@@ -97,16 +103,26 @@
 mono_debug_open_mono_symbol_file (MonoDebugHandle *handle, gboolean create_symfile)
 {
 	MonoSymbolFile *symfile;
+	int f;
 
 	mono_loader_lock ();
 	symfile = g_new0 (MonoSymbolFile, 1);
 
 	symfile->filename = g_strdup_printf ("%s.mdb", mono_image_get_filename (handle->image));
 
-	if (!g_file_get_contents (symfile->filename, (gchar **) &symfile->raw_contents,
-				  &symfile->raw_contents_size, NULL))
-		symfile->raw_contents = NULL;
-
+	if ((f = open (symfile->filename, O_RDONLY | O_BINARY)) > 0) {
+		struct stat stat_buf;
+			
+		if (fstat (f, &stat_buf) < 0) {
+			g_warning ("stat of %s failed: %s", symfile->filename,  g_strerror (errno));
+		} else {	
+			symfile->raw_contents_size = stat_buf.st_size;
+			symfile->raw_contents = mono_raw_buffer_load (f, FALSE, 0, stat_buf.st_size);
+		}
+		
+		close (f);
+	}
+	
 	if (load_symfile (handle, symfile)) {
 		mono_loader_unlock ();
 		return symfile;
@@ -130,6 +146,9 @@
 	if (symfile->method_hash)
 		g_hash_table_destroy (symfile->method_hash);
 
+	if (symfile->raw_contents)
+		mono_raw_buffer_free (symfile->raw_contents);
+	
 	g_free (symfile);
 	mono_loader_unlock ();
 }
