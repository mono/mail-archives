Index: Int16.cs
===================================================================
--- Int16.cs	(revisión: 52933)
+++ Int16.cs	(copia de trabajo)
@@ -90,7 +90,7 @@
 		}
 #endif
 
-		internal static bool Parse (string s, bool tryParse, out short result)
+		internal static bool Parse (string s, bool tryParse, out short result, out Exception exc)
 		{
 			short val = 0;
 			int len;
@@ -98,12 +98,13 @@
 			bool digits_seen = false;
 
 			result = 0;
+			exc = null;
 
-			if (s == null)
-				if (tryParse)
-					return false;
-				else
-					throw new ArgumentNullException ("s");
+			if (s == null) {
+				if (!tryParse)
+					exc = new ArgumentNullException ("s");
+				return false;
+			}
 
 			len = s.Length;
 
@@ -114,11 +115,11 @@
 					break;
 			}
 			
-			if (i == len)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ();
+			if (i == len) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			c = s [i];
 			if (c == '+')
@@ -137,25 +138,25 @@
 				} else {
 					if (Char.IsWhiteSpace (c)){
 						for (i++; i < len; i++){
-							if (!Char.IsWhiteSpace (s [i]))
-								if (tryParse)
-									return false;
-								else
-									throw new FormatException ();
+							if (!Char.IsWhiteSpace (s [i])) {
+								if (!tryParse)
+									exc = Int32.GetFormatException ();
+								return false;
+							}
 						}
 						break;
-					} else
-						if (tryParse)
-							return false;
-						else
-							throw new FormatException ();
+					} else {
+						if (!tryParse)
+							exc = Int32.GetFormatException ();
+						return false;
+					}
 				}
 			}
-			if (!digits_seen)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ();
+			if (!digits_seen) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 			
 			result = val;
 			return true;
@@ -180,41 +181,42 @@
 			return (short) tmpResult;
 		}
 
-		public static short Parse (string s) {
+		public static short Parse (string s) 
+		{
+			Exception exc;
 			short res;
 
-			Parse (s, false, out res);
+			if (!Parse (s, false, out res, out exc))
+				throw exc;
 
 			return res;
 		}
 
 #if NET_2_0
-		public static bool TryParse (string s, out short result) {
-			try {
-				return Parse (s, true, out result);
-			}
-			catch (Exception) {
+		public static bool TryParse (string s, out short result) 
+		{
+			Exception exc;
+			if (!Parse (s, true, out result, out exc)) {
 				result = 0;
 				return false;
 			}
+
+			return true;
 		}
 
-		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out short result) {
-			try {
-				int tmpResult;
-
-				result = 0;
-				if (!Int32.TryParse (s, style, provider, out tmpResult))
-					return false;
-				if (tmpResult > Int16.MaxValue || tmpResult < Int16.MinValue)
-					return false;
-				result = (short)tmpResult;
-				return true;
-			}
-			catch (Exception) {
-				result = 0;
+		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out short result) 
+		{
+			int tmpResult;
+			result = 0;
+				
+			if (!Int32.TryParse (s, style, provider, out tmpResult))
 				return false;
-			}
+			
+			if (tmpResult > Int16.MaxValue || tmpResult < Int16.MinValue)
+				return false;
+				
+			result = (short)tmpResult;
+			return true;
 		}
 #endif
 
Index: Int32.cs
===================================================================
--- Int32.cs	(revisión: 52933)
+++ Int32.cs	(copia de trabajo)
@@ -92,7 +92,7 @@
 		}
 #endif
 
-		internal static bool Parse (string s, bool tryParse, out int result)
+		internal static bool Parse (string s, bool tryParse, out int result, out Exception exc)
 		{
 			int val = 0;
 			int len;
@@ -100,12 +100,13 @@
 			bool digits_seen = false;
 
 			result = 0;
+			exc = null;
 
-			if (s == null)
-				if (tryParse)
-					return false;
-				else
-					throw new ArgumentNullException ("s");
+			if (s == null) {
+				if (!tryParse)
+					exc = new ArgumentNullException ("s");
+				return false;
+			}
 
 			len = s.Length;
 
@@ -116,11 +117,11 @@
 					break;
 			}
 			
-			if (i == len)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ();
+			if (i == len) {
+				if (!tryParse)
+					exc = GetFormatException ();
+				return false;
+			}
 
 			c = s [i];
 			if (c == '+')
@@ -139,30 +140,36 @@
 				}
 				
 				if (c >= '0' && c <= '9'){
-					val = checked (val * 10 + (c - '0') * sign);
-					digits_seen = true;
+					try {
+						val = checked (val * 10 + (c - '0') * sign);
+						digits_seen = true;
+					} catch (OverflowException e) {
+						exc = new OverflowException ();
+						return false;
+					}
 				} else {
 					if (Char.IsWhiteSpace (c)){
 						for (i++; i < len; i++){
-							if (!Char.IsWhiteSpace (s [i]))
-								if (tryParse)
-									return false;
-								else
-									throw new FormatException ();
+							if (!Char.IsWhiteSpace (s [i])) {
+								if (!tryParse)
+									exc = GetFormatException ();
+								return false;
+			
+							}
 						}
 						break;
-					} else
-						if (tryParse)
-							return false;
-						else
-							throw new FormatException ();
+					} else {
+						if (!tryParse)
+							exc = GetFormatException ();
+						return false;
+					}
 				}
 			}
-			if (!digits_seen)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ();
+			if (!digits_seen) {
+				if (!tryParse)
+					exc = GetFormatException ();
+				return false;
+			}
 
 			result = val;
 
@@ -179,7 +186,7 @@
 			return Parse (s, style, null);
 		}
 
-		internal static void CheckStyle (NumberStyles style)
+		internal static bool CheckStyle (NumberStyles style, bool tryParse, ref Exception exc)
 		{
 			if ((style & NumberStyles.AllowHexSpecifier) != 0) {
 				NumberStyles ne = style ^ NumberStyles.AllowHexSpecifier;
@@ -187,23 +194,31 @@
 					ne ^= NumberStyles.AllowLeadingWhite;
 				if ((ne & NumberStyles.AllowTrailingWhite) != 0)
 					ne ^= NumberStyles.AllowTrailingWhite;
-				if (ne != 0)
-					throw new ArgumentException (
-						"With AllowHexSpecifier only " + 
-						"AllowLeadingWhite and AllowTrailingWhite " + 
-						"are permitted.");
+				if (ne != 0) {
+					if (!tryParse)
+						exc = new ArgumentException (
+							"With AllowHexSpecifier only " + 
+							"AllowLeadingWhite and AllowTrailingWhite " + 
+							"are permitted.");
+					return false;
+				}
 			}
+
+			return true;
 		}
 		
-		internal static int JumpOverWhite (int pos, string s, bool excp)
+		internal static bool JumpOverWhite (ref int pos, string s, bool reportError, bool tryParse, ref Exception exc)
 		{
 			while (pos < s.Length && Char.IsWhiteSpace (s [pos]))
 				pos++;
 
-			if (excp && pos >= s.Length)
-				throw new FormatException ("Input string was not in the correct format.");
+			if (reportError && pos >= s.Length) {
+				if (!tryParse)
+					exc = GetFormatException ();
+				return false;
+			}
 
-			return pos;
+			return true;
 		}
 
 		internal static void FindSign (ref int pos, string s, NumberFormatInfo nfi, 
@@ -275,22 +290,33 @@
 			return Char.IsDigit (e);
 		}
 		
-		internal static bool Parse (string s, NumberStyles style, IFormatProvider fp, bool tryParse, out int result)
+		internal static Exception GetFormatException ()
 		{
+			return new FormatException ("Input string was not in the correct format");
+		}
+		
+		internal static bool Parse (string s, NumberStyles style, IFormatProvider fp, bool tryParse, out int result, out Exception exc)
+		{
 			result = 0;
+			exc = null;
 
-			if (s == null)
-				if (tryParse)
-					return false;
-				else
-					throw new ArgumentNullException ();
+			if (s == null) {
+				if (!tryParse)
+					exc = GetFormatException ();
+				return false;
+			}
+			
+			if (s == null) {
+				if (!tryParse)
+					exc = new ArgumentNullException ();
+				return false;
+			}
 
-			if (s.Length == 0)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ("Input string was not " + 
-											   "in the correct format.");
+			if (s.Length == 0) {
+				if (!tryParse)
+					exc = GetFormatException ();
+				return false;
+			}
 
 			NumberFormatInfo nfi;
 			if (fp != null) {
@@ -300,7 +326,8 @@
 			else
 				nfi = Thread.CurrentThread.CurrentCulture.NumberFormat;
 
-			CheckStyle (style);
+			if (!CheckStyle (style, tryParse, ref exc))
+				return false;
 
 			bool AllowCurrencySymbol = (style & NumberStyles.AllowCurrencySymbol) != 0;
 			bool AllowHexSpecifier = (style & NumberStyles.AllowHexSpecifier) != 0;
@@ -315,8 +342,8 @@
 
 			int pos = 0;
 
-			if (AllowLeadingWhite)
-				pos = JumpOverWhite (pos, s, true);
+			if (AllowLeadingWhite && !JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+				return false;
 
 			bool foundOpenParentheses = false;
 			bool negative = false;
@@ -330,34 +357,34 @@
 				negative = true; // MS always make the number negative when there parentheses
 						 // even when NumberFormatInfo.NumberNegativePattern != 0!!!
 				pos++;
-				if (AllowLeadingWhite)
-					pos = JumpOverWhite (pos, s, true);
+				if (AllowLeadingWhite && !!JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+					return false;
 
-				if (s.Substring (pos, nfi.NegativeSign.Length) == nfi.NegativeSign)
-					if (tryParse)
-						return false;
-					else
-						throw new FormatException ("Input string was not in the correct " +
-												   "format.");
-				if (s.Substring (pos, nfi.PositiveSign.Length) == nfi.PositiveSign)
-					if (tryParse)
-						return false;
-					else
-						throw new FormatException ("Input string was not in the correct " +
-												   "format.");
+				if (s.Substring (pos, nfi.NegativeSign.Length) == nfi.NegativeSign) {
+					if (!tryParse)
+						exc = GetFormatException ();
+					return false;
+				}
+				
+				if (s.Substring (pos, nfi.PositiveSign.Length) == nfi.PositiveSign) {
+					if (!tryParse)
+						exc = GetFormatException ();
+					return false;
+				}
 			}
 
 			if (AllowLeadingSign && !foundSign) {
 				// Sign + Currency
 				FindSign (ref pos, s, nfi, ref foundSign, ref negative);
 				if (foundSign) {
-					if (AllowLeadingWhite)
-						pos = JumpOverWhite (pos, s, true);
+					if (AllowLeadingWhite && !JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (AllowCurrencySymbol) {
 						FindCurrency (ref pos, s, nfi,
 							      ref foundCurrency);
-						if (foundCurrency && AllowLeadingWhite)
-							pos = JumpOverWhite (pos, s, true);
+						if (foundCurrency && AllowLeadingWhite &&
+								!JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+							return false;
 					}
 				}
 			}
@@ -366,14 +393,15 @@
 				// Currency + sign
 				FindCurrency (ref pos, s, nfi, ref foundCurrency);
 				if (foundCurrency) {
-					if (AllowLeadingWhite)
-						pos = JumpOverWhite (pos, s, true);
+					if (AllowLeadingWhite && !JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (foundCurrency) {
 						if (!foundSign && AllowLeadingSign) {
 							FindSign (ref pos, s, nfi, ref foundSign,
 								  ref negative);
-							if (foundSign && AllowLeadingWhite)
-								pos = JumpOverWhite (pos, s, true);
+							if (foundSign && AllowLeadingWhite &&
+									!JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+								return false;
 						}
 					}
 				}
@@ -412,18 +440,23 @@
 						digitValue = (int) (hexDigit - 'A' + 10);
 
 					uint unumber = (uint)number;
-					number = (int)checked (unumber * 16u + (uint)digitValue);
+					try {
+						number = (int)checked (unumber * 16u + (uint)digitValue);
+					} catch (OverflowException e) {
+						exc = e;
+						return false;
+					}
 				}
 				else if (decimalPointFound) {
 					nDigits++;
 					// Allows decimal point as long as it's only 
 					// followed by zeroes.
-					if (s [pos++] != '0')
-						if (tryParse)
-							return false;
-						else
-							throw new OverflowException ("Value too large or too " +
-														 "small.");
+					if (s [pos++] != '0') {
+						if (!tryParse)
+							exc = new OverflowException ("Value too large or too " +
+									"small.");
+						return false;
+					}
 				}
 				else {
 					nDigits++;
@@ -436,21 +469,20 @@
 							(int) (s [pos++] - '0')
 							);
 					} catch (OverflowException) {
-						if (tryParse)
-							return false;
-						else
-							throw new OverflowException ("Value too large or too " +
-														 "small.");
+						if (!tryParse)
+							exc = new OverflowException ("Value too large or too " +
+									"small.");
+						return false;
 					}
 				}
 			} while (pos < s.Length);
 
 			// Post number stuff
-			if (nDigits == 0)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ("Input string was not in the correct format.");
+			if (nDigits == 0) {
+				if (!tryParse)
+					exc = GetFormatException ();
+				return false;
+			}
 
 			if (AllowExponent) 
 					FindExponent(ref pos, s);
@@ -459,8 +491,8 @@
 				// Sign + Currency
 				FindSign (ref pos, s, nfi, ref foundSign, ref negative);
 				if (foundSign) {
-					if (AllowTrailingWhite)
-						pos = JumpOverWhite (pos, s, true);
+					if (AllowTrailingWhite && !JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (AllowCurrencySymbol)
 						FindCurrency (ref pos, s, nfi,
 							      ref foundCurrency);
@@ -471,33 +503,32 @@
 				// Currency + sign
 				FindCurrency (ref pos, s, nfi, ref foundCurrency);
 				if (foundCurrency) {
-					if (AllowTrailingWhite)
-						pos = JumpOverWhite (pos, s, true);
+					if (AllowTrailingWhite && !JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (!foundSign && AllowTrailingSign)
 						FindSign (ref pos, s, nfi, ref foundSign,
 							  ref negative);
 				}
 			}
 			
-			if (AllowTrailingWhite && pos < s.Length)
-				pos = JumpOverWhite (pos, s, false);
+			if (AllowTrailingWhite && pos < s.Length && !JumpOverWhite (ref pos, s, false, tryParse, ref exc))
+				return false;
 
 			if (foundOpenParentheses) {
-				if (pos >= s.Length || s [pos++] != ')')
-					if (tryParse)
-						return false;
-					else
-						throw new FormatException ("Input string was not in the correct " +
-												   "format.");
-				if (AllowTrailingWhite && pos < s.Length)
-					pos = JumpOverWhite (pos, s, false);
+				if (pos >= s.Length || s [pos++] != ')') {
+					if (!tryParse)
+						exc = GetFormatException ();
+					return false;
+				}
+				if (AllowTrailingWhite && pos < s.Length &&
+						!JumpOverWhite (ref pos, s, false, tryParse, ref exc))
+					return false;
 			}
 
 			if (pos < s.Length && s [pos] != '\u0000') {
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ("Input string was not in the correct format.");
+				if (!tryParse)
+					exc = GetFormatException ();
+				return false;
 			}
 			
 			if (!negative && !AllowHexSpecifier)
@@ -508,41 +539,50 @@
 			return true;
 		}
 
-		public static int Parse (string s) {
+		public static int Parse (string s) 
+		{
+			Exception exc;
 			int res;
 
-			Parse (s, false, out res);
+			if (!Parse (s, false, out res, out exc))
+				throw exc;
 
 			return res;
 		}
 
-		public static int Parse (string s, NumberStyles style, IFormatProvider fp) {
+		public static int Parse (string s, NumberStyles style, IFormatProvider fp) 
+		{
+			Exception exc;
 			int res;
 
-			Parse (s, style, fp, false, out res);
+			if (!Parse (s, style, fp, false, out res, out exc))
+				throw exc;
 
 			return res;
 		}
 
 #if NET_2_0
-		public static bool TryParse (string s, out int result) {
-			try {
-				return Parse (s, true, out result);
-			}
-			catch (Exception) {
+		public static bool TryParse (string s, out int result) 
+		{
+			Exception exc;
+			
+			if (!Parse (s, true, out result, out exc)) {
 				result = 0;
 				return false;
 			}
+
+			return true;
 		}
 
-		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out int result) {
-			try {
-				return Parse (s, style, provider, true, out result);
-			}
-			catch (Exception) {
+		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out int result) 
+		{
+			Exception exc;
+			if (!Parse (s, style, provider, true, out result, out exc)) {
 				result = 0;
 				return false;
 			}
+
+			return true;
 		}
 #endif
 
Index: Int64.cs
===================================================================
--- Int64.cs	(revisión: 52933)
+++ Int64.cs	(copia de trabajo)
@@ -92,7 +92,7 @@
 		}
 #endif
 
-		internal static bool Parse (string s, bool tryParse, out long result)
+		internal static bool Parse (string s, bool tryParse, out long result, out Exception exc)
 		{
 			long val = 0;
 			int len;
@@ -101,12 +101,13 @@
 			bool digits_seen = false;
 
 			result = 0;
+			exc = null;
 
-			if (s == null)
-				if (tryParse)
-					return false;
-				else
-					throw new ArgumentNullException ("s");
+			if (s == null) {
+				if (!tryParse) 
+					exc = new ArgumentNullException ("s");
+				return false;
+			}
 
 			len = s.Length;
 
@@ -117,11 +118,11 @@
 					break;
 			}
 			
-			if (i == len)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ();
+			if (i == len) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			c = s [i];
 			if (c == '+')
@@ -140,25 +141,25 @@
 				} else {
 					if (Char.IsWhiteSpace (c)){
 						for (i++; i < len; i++){
-							if (!Char.IsWhiteSpace (s [i]))
-								if (tryParse)
-									return false;
-								else
-									throw new FormatException ();
+							if (!Char.IsWhiteSpace (s [i])) {
+								if (!tryParse)
+									exc = Int32.GetFormatException ();
+								return false;
+							}
 						}
 						break;
-					} else
-						if (tryParse)
-							return false;
-						else
-							throw new FormatException ();
+					} else {
+						if (!tryParse)
+							exc = Int32.GetFormatException ();
+						return false;
+					}
 				}
 			}
-			if (!digits_seen)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ();
+			if (!digits_seen) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 			
 			result = val;
 			return true;
@@ -174,22 +175,23 @@
 			return Parse (s, style, null);
 		}
 
-		internal static bool Parse (string s, NumberStyles style, IFormatProvider fp, bool tryParse, out long result)
+		internal static bool Parse (string s, NumberStyles style, IFormatProvider fp, bool tryParse, out long result, out Exception exc)
 		{
 			result = 0;
+			exc = null;
 
-			if (s == null)
-				if (tryParse)
-					return false;
-				else
-					throw new ArgumentNullException ();
+			if (s == null) {
+				if (!tryParse)
+					exc = new ArgumentNullException ("s");
+				return false;
+			}
 
-			if (s.Length == 0)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ("Input string was not " + 
-											   "in the correct format: s.Length==0.");
+			if (s.Length == 0) {
+				if (!tryParse)
+					exc = new FormatException ("Input string was not " + 
+							"in the correct format: s.Length==0.");
+				return false;
+			}
 
 			NumberFormatInfo nfi;
 			if (fp != null) {
@@ -199,7 +201,8 @@
 			else
 				nfi = Thread.CurrentThread.CurrentCulture.NumberFormat;
 
-			Int32.CheckStyle (style);
+			if (!Int32.CheckStyle (style, tryParse, ref exc))
+				return false;
 
 			bool AllowCurrencySymbol = (style & NumberStyles.AllowCurrencySymbol) != 0;
 			bool AllowHexSpecifier = (style & NumberStyles.AllowHexSpecifier) != 0;
@@ -213,8 +216,8 @@
 
 			int pos = 0;
 
-			if (AllowLeadingWhite)
-				pos = Int32.JumpOverWhite (pos, s, true);
+			if (AllowLeadingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+				return false;
 
 			bool foundOpenParentheses = false;
 			bool negative = false;
@@ -228,34 +231,35 @@
 				negative = true; // MS always make the number negative when there parentheses
 						 // even when NumberFormatInfo.NumberNegativePattern != 0!!!
 				pos++;
-				if (AllowLeadingWhite)
-					pos = Int32.JumpOverWhite (pos, s, true);
+				if (AllowLeadingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+					return false;
 
-				if (s.Substring (pos, nfi.NegativeSign.Length) == nfi.NegativeSign)
-					if (tryParse)
-						return false;
-					else
-						throw new FormatException ("Input string was not in the correct " +
-												   "format: Has Negative Sign.");
-				if (s.Substring (pos, nfi.PositiveSign.Length) == nfi.PositiveSign)
-					if (tryParse)
-						return false;
-					else
-						throw new FormatException ("Input string was not in the correct " +
-												   "format: Has Positive Sign.");
+				if (s.Substring (pos, nfi.NegativeSign.Length) == nfi.NegativeSign) {
+					if (!tryParse)
+						exc = new FormatException ("Input string was not in the correct " +
+								"format: Has Negative Sign.");
+					return false;
+				}
+				if (s.Substring (pos, nfi.PositiveSign.Length) == nfi.PositiveSign) {
+					if (!tryParse)
+						exc = new FormatException ("Input string was not in the correct " +
+								"format: Has Positive Sign.");
+					return false;
+				}
 			}
 
 			if (AllowLeadingSign && !foundSign) {
 				// Sign + Currency
 				Int32.FindSign (ref pos, s, nfi, ref foundSign, ref negative);
 				if (foundSign) {
-					if (AllowLeadingWhite)
-						pos = Int32.JumpOverWhite (pos, s, true);
+					if (AllowLeadingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (AllowCurrencySymbol) {
 						Int32.FindCurrency (ref pos, s, nfi,
 								    ref foundCurrency);
-						if (foundCurrency && AllowLeadingWhite)
-							pos = Int32.JumpOverWhite (pos, s, true);
+						if (foundCurrency && AllowLeadingWhite && 
+								!Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+							return false;
 					}
 				}
 			}
@@ -264,14 +268,15 @@
 				// Currency + sign
 				Int32.FindCurrency (ref pos, s, nfi, ref foundCurrency);
 				if (foundCurrency) {
-					if (AllowLeadingWhite)
-						pos = Int32.JumpOverWhite (pos, s, true);
+					if (AllowLeadingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+							return false;
 					if (foundCurrency) {
 						if (!foundSign && AllowLeadingSign) {
 							Int32.FindSign (ref pos, s, nfi, ref foundSign,
 									ref negative);
-							if (foundSign && AllowLeadingWhite)
-								pos = Int32.JumpOverWhite (pos, s, true);
+							if (foundSign && AllowLeadingWhite &&
+								!Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+								return false;
 						}
 					}
 				}
@@ -318,12 +323,12 @@
 					nDigits++;
 					// Allows decimal point as long as it's only 
 					// followed by zeroes.
-					if (s [pos++] != '0')
-						if (tryParse)
-							return false;
-						else
-							throw new OverflowException ("Value too large or too " +
-														 "small.");
+					if (s [pos++] != '0') {
+						if (!tryParse)
+							exc = new OverflowException ("Value too large or too " +
+									"small.");
+						return false;
+					}
 				}
 				else {
 					nDigits++;
@@ -336,28 +341,27 @@
 							(long) (s [pos++] - '0')
 							);
 					} catch (OverflowException) {
-						if (tryParse)
-							return false;
-						else
-							throw new OverflowException ("Value too large or too " +
-														 "small.");
+						if (!tryParse)
+							exc = new OverflowException ("Value too large or too " +
+									"small.");
+						return false;
 					}
 				}
 			} while (pos < s.Length);
 
 			// Post number stuff
-			if (nDigits == 0)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ("Input string was not in the correct format: nDigits == 0.");
+			if (nDigits == 0) {
+				if (!tryParse)
+					exc = new FormatException ("Input string was not in the correct format: nDigits == 0.");
+				return false;
+			}
 
 			if (AllowTrailingSign && !foundSign) {
 				// Sign + Currency
 				Int32.FindSign (ref pos, s, nfi, ref foundSign, ref negative);
 				if (foundSign) {
-					if (AllowTrailingWhite)
-						pos = Int32.JumpOverWhite (pos, s, true);
+					if (AllowTrailingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (AllowCurrencySymbol)
 						Int32.FindCurrency (ref pos, s, nfi,
 								    ref foundCurrency);
@@ -374,34 +378,34 @@
 
 				Int32.FindCurrency (ref pos, s, nfi, ref foundCurrency);
 				if (foundCurrency && pos < s.Length) {
-					if (AllowTrailingWhite)
-						pos = Int32.JumpOverWhite (pos, s, true);
+					if (AllowTrailingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (!foundSign && AllowTrailingSign)
 						Int32.FindSign (ref pos, s, nfi, ref foundSign,
 								ref negative);
 				}
 			}
 			
-			if (AllowTrailingWhite && pos < s.Length)
-				pos = Int32.JumpOverWhite (pos, s, false);
+			if (AllowTrailingWhite && pos < s.Length && !Int32.JumpOverWhite (ref pos, s, false, tryParse, ref exc))
+				return false;
 
 			if (foundOpenParentheses) {
-				if (pos >= s.Length || s [pos++] != ')')
-					if (tryParse)
-						return false;
-					else
-						throw new FormatException ("Input string was not in the correct " +
-												   "format: No room for close parens.");
-				if (AllowTrailingWhite && pos < s.Length)
-					pos = Int32.JumpOverWhite (pos, s, false);
+				if (pos >= s.Length || s [pos++] != ')') {
+					if (!tryParse)
+						exc = new FormatException ("Input string was not in the correct " +
+								"format: No room for close parens.");
+					return false;
+				}
+				if (AllowTrailingWhite && pos < s.Length && !Int32.JumpOverWhite (ref pos, s, false, tryParse, ref exc))
+					return false;
 			}
 
-			if (pos < s.Length && s [pos] != '\u0000')
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ("Input string was not in the correct format: Did not parse entire string. pos = " 
-											   + pos + " s.Length = " + s.Length);
+			if (pos < s.Length && s [pos] != '\u0000') {
+				if (!tryParse)
+					exc = new FormatException ("Input string was not in the correct format: Did not parse entire string. pos = " 
+							+ pos + " s.Length = " + s.Length);
+				return false;
+			}
 
 			
 			if (!negative && !AllowHexSpecifier)
@@ -411,41 +415,49 @@
 			return true;
 		}
 
-		public static long Parse (string s) {
+		public static long Parse (string s) 
+		{
+			Exception exc;
 			long res;
 
-			Parse (s, false, out res);
+			if (!Parse (s, false, out res, out exc))
+				throw exc;
 
 			return res;
 		}
 
-		public static long Parse (string s, NumberStyles style, IFormatProvider fp) {
+		public static long Parse (string s, NumberStyles style, IFormatProvider fp) 
+		{
+			Exception exc;
 			long res;
 
-			Parse (s, style, fp, false, out res);
+			if (!Parse (s, style, fp, false, out res, out exc))
+				throw exc;
 
 			return res;
 		}
 
 #if NET_2_0
-		public static bool TryParse (string s, out long result) {
-			try {
-				return Parse (s, true, out result);
-			}
-			catch (Exception) {
+		public static bool TryParse (string s, out long result) 
+		{
+			Exception exc;
+			if (!Parse (s, true, out result, out exc)) {
 				result = 0;
 				return false;
 			}
+
+			return true;
 		}
 
-		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out long result) {
-			try {
-				return Parse (s, style, provider, true, out result);
-			}
-			catch (Exception) {
+		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out long result) 
+		{
+			Exception exc;
+			if (!Parse (s, style, provider, true, out result, out exc)) {
 				result = 0;
 				return false;
 			}
+
+			return true;
 		}
 #endif
 
Index: UInt16.cs
===================================================================
--- UInt16.cs	(revisión: 52933)
+++ UInt16.cs	(copia de trabajo)
@@ -84,7 +84,7 @@
 		}
 #endif
 
-		internal static bool Parse (string s, bool tryParse, out ushort result)
+		internal static bool Parse (string s, bool tryParse, out ushort result, out Exception exc)
 		{
 			ushort val = 0;
 			int len;
@@ -93,12 +93,13 @@
 			bool has_negative_sign = false;
 
 			result = 0;
+			exc = null;
 
-			if (s == null)
-				if (tryParse)
-					return false;
-				else
-					throw new ArgumentNullException ("s");
+			if (s == null) {
+				if (!tryParse)
+					exc = new ArgumentNullException ("s");
+				return false;
+			}
 
 			len = s.Length;
 
@@ -109,11 +110,11 @@
 					break;
 			}
 
-			if (i == len)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ();
+			if (i == len) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			if (s [i] == '+')
 				i++;
@@ -135,34 +136,33 @@
 				else {
 					if (Char.IsWhiteSpace (c)) {
 						for (i++; i < len; i++) {
-							if (!Char.IsWhiteSpace (s [i]))
-								if (tryParse)
-									return false;
-								else
-									throw new FormatException ();
+							if (!Char.IsWhiteSpace (s [i])) {
+								if (!tryParse)
+									exc = Int32.GetFormatException ();
+								return false;
+							}
 						}
 						break;
 					}
-					else
-						if (tryParse)
-							return false;
-						else
-							throw new FormatException ();
+					else {
+						if (!tryParse)
+							exc = Int32.GetFormatException ();
+						return false;
+					}
 				}
 			}
-			if (!digits_seen)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ();
+			if (!digits_seen) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			// -0 is legal but other negative values are not
 			if (has_negative_sign && (val > 0)) {
-				if (tryParse)
-					return false;
-				else
-					throw new OverflowException (
+				if (!tryParse)
+					exc = new OverflowException (
 					    Locale.GetText ("Negative number"));
+				return false;
 			}
 
 			result = val;
@@ -192,43 +192,44 @@
 		}
 
 		[CLSCompliant(false)]
-		public static ushort Parse (string s) {
+		public static ushort Parse (string s) 
+		{
+			Exception exc;
 			ushort res;
 
-			Parse (s, false, out res);
+			if (!Parse (s, false, out res, out exc))
+				throw exc;
 
 			return res;
 		}
 
 #if NET_2_0
 		[CLSCompliant(false)]
-		public static bool TryParse (string s, out ushort result) {
-			try {
-				return Parse (s, true, out result);
-			}
-			catch (Exception) {
+		public static bool TryParse (string s, out ushort result) 
+		{
+			Exception exc;
+			if (!Parse (s, true, out result, out exc)) {
 				result = 0;
 				return false;
 			}
+
+			return true;
 		}
 
 		[CLSCompliant(false)]
-		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out ushort result) {
-			try {
-				uint tmpResult;
-
-				result = 0;
-				if (!UInt32.TryParse (s, style, provider, out tmpResult))
-					return false;
-				if (tmpResult > UInt16.MaxValue || tmpResult < UInt16.MinValue)
-					return false;
-				result = (ushort)tmpResult;
-				return true;
-			}
-			catch (Exception) {
-				result = 0;
+		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out ushort result) 
+		{
+			uint tmpResult;
+			result = 0;
+				
+			if (!UInt32.TryParse (s, style, provider, out tmpResult))
 				return false;
-			}
+				
+			if (tmpResult > UInt16.MaxValue || tmpResult < UInt16.MinValue)
+				return false;
+				
+			result = (ushort)tmpResult;
+			return true;
 		}
 #endif
 
Index: UInt32.cs
===================================================================
--- UInt32.cs	(revisión: 52933)
+++ UInt32.cs	(copia de trabajo)
@@ -91,7 +91,7 @@
 		}
 #endif
 
-		internal static bool Parse (string s, bool tryParse, out uint result)
+		internal static bool Parse (string s, bool tryParse, out uint result, out Exception exc)
 		{
 			uint val = 0;
 			int len;
@@ -100,12 +100,13 @@
 			bool has_negative_sign = false;
 
 			result = 0;
+			exc = null;
 
-			if (s == null)
-				if (tryParse)
-					return false;
-				else
-					throw new ArgumentNullException ("s");
+			if (s == null) {
+				if (!tryParse)
+					exc = new ArgumentNullException ("s");
+				return false;
+			}
 
 			len = s.Length;
 
@@ -116,11 +117,11 @@
 					break;
 			}
 
-			if (i == len)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ();
+			if (i == len) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			if (s [i] == '+')
 				i++;
@@ -142,54 +143,54 @@
 				else {
 					if (Char.IsWhiteSpace (c)) {
 						for (i++; i < len; i++) {
-							if (!Char.IsWhiteSpace (s [i]))
-								if (tryParse)
-									return false;
-								else
-									throw new FormatException ();
+							if (!Char.IsWhiteSpace (s [i])) {
+								if (!tryParse)
+									exc = Int32.GetFormatException ();
+								return false;
+							}
 						}
 						break;
-					} else
-						if (tryParse)
-							return false;
-						else
-							throw new FormatException ();
+					} else {
+						if (!tryParse)
+							exc = Int32.GetFormatException ();
+						return false;
+					}
 				}
 			}
-			if (!digits_seen)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ();
+			if (!digits_seen) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			// -0 is legal but other negative values are not
 			if (has_negative_sign && (val > 0)) {
-				if (tryParse)
-					return false;
-				else
-					throw new OverflowException (
+				if (!tryParse)
+					exc = new OverflowException (
 					    Locale.GetText ("Negative number"));
+				return false;
 			}
 
 			result = val;
 			return true;
 		}
 
-		internal static bool Parse (string s, NumberStyles style, IFormatProvider provider, bool tryParse, out uint result)
+		internal static bool Parse (string s, NumberStyles style, IFormatProvider provider, bool tryParse, out uint result, out Exception exc)
 		{
 			result = 0;
+			exc = null;
 
-			if (s == null)
-				if (tryParse)
-					return false;
-				else
-					throw new ArgumentNullException ("s");
+			if (s == null) {
+				if (!tryParse)
+					exc = new ArgumentNullException ("s");
+				return false;
+			}
 
-			if (s.Length == 0)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException (Locale.GetText ("Input string was not in the correct format."));
+			if (s.Length == 0) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			NumberFormatInfo nfi;
 			if (provider != null) {
@@ -199,7 +200,8 @@
 			else
 				nfi = Thread.CurrentThread.CurrentCulture.NumberFormat;
 
-			Int32.CheckStyle (style);
+			if (!Int32.CheckStyle (style, tryParse, ref exc))
+				return false;
 
 			bool AllowCurrencySymbol = (style & NumberStyles.AllowCurrencySymbol) != 0;
 			bool AllowHexSpecifier = (style & NumberStyles.AllowHexSpecifier) != 0;
@@ -213,8 +215,8 @@
 
 			int pos = 0;
 
-			if (AllowLeadingWhite)
-				pos = Int32.JumpOverWhite (pos, s, true);
+			if (AllowLeadingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+				return false;
 
 			bool foundOpenParentheses = false;
 			bool negative = false;
@@ -228,31 +230,32 @@
 				negative = true; // MS always make the number negative when there parentheses
 						 // even when NumberFormatInfo.NumberNegativePattern != 0!!!
 				pos++;
-				if (AllowLeadingWhite)
-					pos = Int32.JumpOverWhite (pos, s, true);
+				if (AllowLeadingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+					return false;
 
-				if (s.Substring (pos, nfi.NegativeSign.Length) == nfi.NegativeSign)
-					if (tryParse)
-						return false;
-					else
-						throw new FormatException (Locale.GetText ("Input string was not in the correct format."));
-				if (s.Substring (pos, nfi.PositiveSign.Length) == nfi.PositiveSign)
-					if (tryParse)
-						return false;
-					else
-						throw new FormatException (Locale.GetText ("Input string was not in the correct format."));
+				if (s.Substring (pos, nfi.NegativeSign.Length) == nfi.NegativeSign) {
+					if (!tryParse)
+						exc = Int32.GetFormatException ();
+					return false;
+				}
+				if (s.Substring (pos, nfi.PositiveSign.Length) == nfi.PositiveSign) {
+					if (!tryParse)
+						exc = Int32.GetFormatException ();
+					return false;
+				}
 			}
 
 			if (AllowLeadingSign && !foundSign) {
 				// Sign + Currency
 				Int32.FindSign (ref pos, s, nfi, ref foundSign, ref negative);
 				if (foundSign) {
-					if (AllowLeadingWhite)
-						pos = Int32.JumpOverWhite (pos, s, true);
+					if (AllowLeadingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (AllowCurrencySymbol) {
 						Int32.FindCurrency (ref pos, s, nfi, ref foundCurrency);
-						if (foundCurrency && AllowLeadingWhite)
-							pos = Int32.JumpOverWhite (pos, s, true);
+						if (foundCurrency && AllowLeadingWhite &&
+								!Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+							return false;
 					}
 				}
 			}
@@ -261,13 +264,14 @@
 				// Currency + sign
 				Int32.FindCurrency (ref pos, s, nfi, ref foundCurrency);
 				if (foundCurrency) {
-					if (AllowLeadingWhite)
-						pos = Int32.JumpOverWhite (pos, s, true);
+					if (AllowLeadingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (foundCurrency) {
 						if (!foundSign && AllowLeadingSign) {
 							Int32.FindSign (ref pos, s, nfi, ref foundSign, ref negative);
-							if (foundSign && AllowLeadingWhite)
-								pos = Int32.JumpOverWhite (pos, s, true);
+							if (foundSign && AllowLeadingWhite &&
+									!Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+								return false;
 						}
 					}
 				}
@@ -310,11 +314,11 @@
 					nDigits++;
 					// Allows decimal point as long as it's only 
 					// followed by zeroes.
-					if (s [pos++] != '0')
-						if (tryParse)
-							return false;
-						else
-							throw new OverflowException (Locale.GetText ("Value too large or too small."));
+					if (s [pos++] != '0') {
+						if (!tryParse)
+							exc = new OverflowException (Locale.GetText ("Value too large or too small."));
+						return false;
+					}
 				}
 				else {
 					nDigits++;
@@ -323,27 +327,26 @@
 						number = checked (number * 10 + (uint) (s [pos++] - '0'));
 					}
 					catch (OverflowException) {
-						if (tryParse)
-							return false;
-						else
-							throw new OverflowException (Locale.GetText ("Value too large or too small."));
+						if (!tryParse)
+							exc = new OverflowException (Locale.GetText ("Value too large or too small."));
+						return false;
 					}
 				}
 			} while (pos < s.Length);
 
 			// Post number stuff
-			if (nDigits == 0)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException (Locale.GetText ("Input string was not in the correct format."));
+			if (nDigits == 0) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			if (AllowTrailingSign && !foundSign) {
 				// Sign + Currency
 				Int32.FindSign (ref pos, s, nfi, ref foundSign, ref negative);
 				if (foundSign) {
-					if (AllowTrailingWhite)
-						pos = Int32.JumpOverWhite (pos, s, true);
+					if (AllowTrailingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (AllowCurrencySymbol)
 						Int32. FindCurrency (ref pos, s, nfi, ref foundCurrency);
 				}
@@ -353,40 +356,38 @@
 				// Currency + sign
 				Int32.FindCurrency (ref pos, s, nfi, ref foundCurrency);
 				if (foundCurrency) {
-					if (AllowTrailingWhite)
-						pos = Int32.JumpOverWhite (pos, s, true);
+					if (AllowTrailingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (!foundSign && AllowTrailingSign)
 						Int32.FindSign (ref pos, s, nfi, ref foundSign, ref negative);
 				}
 			}
 
-			if (AllowTrailingWhite && pos < s.Length)
-				pos = Int32.JumpOverWhite (pos, s, false);
+			if (AllowTrailingWhite && pos < s.Length && !Int32.JumpOverWhite (ref pos, s, false, tryParse, ref exc))
+				return false;
 
 			if (foundOpenParentheses) {
-				if (pos >= s.Length || s [pos++] != ')')
-					if (tryParse)
-						return false;
-					else
-						throw new FormatException (Locale.GetText
-												   ("Input string was not in the correct format."));
-				if (AllowTrailingWhite && pos < s.Length)
-					pos = Int32.JumpOverWhite (pos, s, false);
+				if (pos >= s.Length || s [pos++] != ')') {
+					if (!tryParse)
+						exc = Int32.GetFormatException ();
+					return false;
+				}
+				if (AllowTrailingWhite && pos < s.Length && !Int32.JumpOverWhite (ref pos, s, false, tryParse, ref exc))
+					return false;
 			}
 
-			if (pos < s.Length && s [pos] != '\u0000')
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException (Locale.GetText ("Input string was not in the correct format."));
+			if (pos < s.Length && s [pos] != '\u0000') {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			// -0 is legal but other negative values are not
 			if (negative && (number > 0)) {
-				if (tryParse)
-					return false;
-				else
-					throw new OverflowException (
+				if (!tryParse)
+					exc = new OverflowException (
 					    Locale.GetText ("Negative number"));
+				return false;
 			}
 
 			result = number;
@@ -395,19 +396,25 @@
 		}
 
 		[CLSCompliant (false)]
-		public static uint Parse (string s) {
+		public static uint Parse (string s) 
+		{
+			Exception exc;
 			uint res;
 
-			Parse (s, false, out res);
+			if (!Parse (s, false, out res, out exc))
+				throw exc;
 
 			return res;
 		}
 
 		[CLSCompliant (false)]
-		public static uint Parse (string s, NumberStyles style, IFormatProvider fp) {
+		public static uint Parse (string s, NumberStyles style, IFormatProvider fp) 
+		{
+			Exception exc;
 			uint res;
 
-			Parse (s, style, fp, false, out res);
+			if (!Parse (s, style, fp, false, out res, out exc))
+				throw exc;
 
 			return res;
 		}
@@ -426,25 +433,27 @@
 
 #if NET_2_0
 		[CLSCompliant (false)]
-		public static bool TryParse (string s, out uint result) {
-			try {
-				return Parse (s, true, out result);
-			}
-			catch (Exception) {
+		public static bool TryParse (string s, out uint result) 
+		{
+			Exception exc;
+			if (!Parse (s, true, out result, out exc)) {
 				result = 0;
 				return false;
 			}
+
+			return true;
 		}
 
 		[CLSCompliant (false)]
-		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out uint result) {
-			try {
-				return Parse (s, style, provider, true, out result);
-			}
-			catch (Exception) {
+		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out uint result) 
+		{
+			Exception exc;
+			if (!Parse (s, style, provider, true, out result, out exc)) {
 				result = 0;
 				return false;
 			}
+
+			return true;
 		}
 #endif
 
Index: UInt64.cs
===================================================================
--- UInt64.cs	(revisión: 52933)
+++ UInt64.cs	(copia de trabajo)
@@ -109,21 +109,22 @@
 			return Parse (s, style, null);
 		}
 
-		internal static bool Parse (string s, NumberStyles style, IFormatProvider provider, bool tryParse, out ulong result)
+		internal static bool Parse (string s, NumberStyles style, IFormatProvider provider, bool tryParse, out ulong result, out Exception exc)
 		{
 			result = 0;
+			exc = null;
 
-			if (s == null)
-				if (tryParse)
-					return false;
-				else
-					throw new ArgumentNullException ("s");
+			if (s == null) {
+				if (!tryParse)
+					exc = new ArgumentNullException ("s");
+				return false;
+			}
 
-			if (s.Length == 0)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException (Locale.GetText ("Input string was not in the correct format."));
+			if (s.Length == 0) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			NumberFormatInfo nfi;
 			if (provider != null) {
@@ -133,7 +134,8 @@
 			else
 				nfi = Thread.CurrentThread.CurrentCulture.NumberFormat;
 
-			Int32.CheckStyle (style);
+			if (!Int32.CheckStyle (style, tryParse, ref exc))
+				return false;
 
 			bool AllowCurrencySymbol = (style & NumberStyles.AllowCurrencySymbol) != 0;
 			bool AllowHexSpecifier = (style & NumberStyles.AllowHexSpecifier) != 0;
@@ -147,8 +149,8 @@
 
 			int pos = 0;
 
-			if (AllowLeadingWhite)
-				pos = Int32.JumpOverWhite (pos, s, true);
+			if (AllowLeadingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+				return false;
 
 			bool foundOpenParentheses = false;
 			bool negative = false;
@@ -162,32 +164,33 @@
 				negative = true; // MS always make the number negative when there parentheses
 						 // even when NumberFormatInfo.NumberNegativePattern != 0!!!
 				pos++;
-				if (AllowLeadingWhite)
-					pos = Int32.JumpOverWhite (pos, s, true);
+				if (AllowLeadingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+					return false;
 
-				if (s.Substring (pos, nfi.NegativeSign.Length) == nfi.NegativeSign)
-					if (tryParse)
-						return false;
-					else
-						throw new FormatException (Locale.GetText ("Input string was not in the correct format."));
-				if (s.Substring (pos, nfi.PositiveSign.Length) == nfi.PositiveSign)
-					if (tryParse)
-						return false;
-					else
-						throw new FormatException (Locale.GetText ("Input string was not in the correct format."));
+				if (s.Substring (pos, nfi.NegativeSign.Length) == nfi.NegativeSign) {
+					if (!tryParse)
+						exc = Int32.GetFormatException ();
+					return false;
+				}
+				if (s.Substring (pos, nfi.PositiveSign.Length) == nfi.PositiveSign) {
+					if (!tryParse)
+						exc = Int32.GetFormatException ();
+					return false;
+				}
 			}
 
 			if (AllowLeadingSign && !foundSign) {
 				// Sign + Currency
 				Int32.FindSign (ref pos, s, nfi, ref foundSign, ref negative);
 				if (foundSign) {
-					if (AllowLeadingWhite)
-						pos = Int32.JumpOverWhite (pos, s, true);
+					if (AllowLeadingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (AllowCurrencySymbol) {
 						Int32.FindCurrency (ref pos, s, nfi,
 								    ref foundCurrency);
-						if (foundCurrency && AllowLeadingWhite)
-							pos = Int32.JumpOverWhite (pos, s, true);
+						if (foundCurrency && AllowLeadingWhite &&
+								!Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+							return false;
 					}
 				}
 			}
@@ -196,14 +199,15 @@
 				// Currency + sign
 				Int32.FindCurrency (ref pos, s, nfi, ref foundCurrency);
 				if (foundCurrency) {
-					if (AllowLeadingWhite)
-						pos = Int32.JumpOverWhite (pos, s, true);
+					if (AllowLeadingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (foundCurrency) {
 						if (!foundSign && AllowLeadingSign) {
 							Int32.FindSign (ref pos, s, nfi, ref foundSign,
 									ref negative);
-							if (foundSign && AllowLeadingWhite)
-								pos = Int32.JumpOverWhite (pos, s, true);
+							if (foundSign && AllowLeadingWhite &&
+									!Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+								return false;
 						}
 					}
 				}
@@ -246,11 +250,11 @@
 					nDigits++;
 					// Allows decimal point as long as it's only 
 					// followed by zeroes.
-					if (s [pos++] != '0')
-						if (tryParse)
-							return false;
-						else
-							throw new OverflowException (Locale.GetText ("Value too large or too small."));
+					if (s [pos++] != '0') {
+						if (!tryParse)
+							exc = new OverflowException (Locale.GetText ("Value too large or too small."));
+						return false;
+					}
 				}
 				else {
 					nDigits++;
@@ -259,27 +263,26 @@
 						number = checked (number * 10 + (ulong) (s [pos++] - '0'));
 					}
 					catch (OverflowException) {
-						if (tryParse)
-							return false;
-						else
-							throw new OverflowException (Locale.GetText ("Value too large or too small."));
+						if (!tryParse)
+							exc = new OverflowException (Locale.GetText ("Value too large or too small."));
+						return false;
 					}
 				}
 			} while (pos < s.Length);
 
 			// Post number stuff
-			if (nDigits == 0)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException (Locale.GetText ("Input string was not in the correct format."));
+			if (nDigits == 0) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			if (AllowTrailingSign && !foundSign) {
 				// Sign + Currency
 				Int32.FindSign (ref pos, s, nfi, ref foundSign, ref negative);
 				if (foundSign) {
-					if (AllowTrailingWhite)
-						pos = Int32.JumpOverWhite (pos, s, true);
+					if (AllowTrailingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (AllowCurrencySymbol)
 						Int32.FindCurrency (ref pos, s, nfi, ref foundCurrency);
 				}
@@ -289,40 +292,38 @@
 				// Currency + sign
 				Int32.FindCurrency (ref pos, s, nfi, ref foundCurrency);
 				if (foundCurrency) {
-					if (AllowTrailingWhite)
-						pos = Int32.JumpOverWhite (pos, s, true);
+					if (AllowTrailingWhite && !Int32.JumpOverWhite (ref pos, s, true, tryParse, ref exc))
+						return false;
 					if (!foundSign && AllowTrailingSign)
 						Int32.FindSign (ref pos, s, nfi, ref foundSign, ref negative);
 				}
 			}
 
-			if (AllowTrailingWhite && pos < s.Length)
-				pos = Int32.JumpOverWhite (pos, s, false);
+			if (AllowTrailingWhite && pos < s.Length && !Int32.JumpOverWhite (ref pos, s, false, tryParse, ref exc))
+				return false;
 
 			if (foundOpenParentheses) {
-				if (pos >= s.Length || s [pos++] != ')')
-					if (tryParse)
-						return false;
-					else
-						throw new FormatException (Locale.GetText
-						    ("Input string was not in the correct format."));
-				if (AllowTrailingWhite && pos < s.Length)
-					pos = Int32.JumpOverWhite (pos, s, false);
+				if (pos >= s.Length || s [pos++] != ')') {
+					if (!tryParse)
+						exc = Int32.GetFormatException ();
+					return false;
+				}
+				if (AllowTrailingWhite && pos < s.Length && !Int32.JumpOverWhite (ref pos, s, false, tryParse, ref exc))
+					return false;
 			}
 
-			if (pos < s.Length && s [pos] != '\u0000')
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException (Locale.GetText ("Input string was not in the correct format."));
+			if (pos < s.Length && s [pos] != '\u0000') {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			// -0 is legal but other negative values are not
 			if (negative && (number > 0)) {
-				if (tryParse)
-					return false;
-				else
-					throw new OverflowException (
+				if (!tryParse)
+					exc = new OverflowException (
 					    Locale.GetText ("Negative number"));
+				return false;
 			}
 
 			result = number;
@@ -330,10 +331,13 @@
 		}
 
 		[CLSCompliant (false)]
-		public static ulong Parse (string s, NumberStyles style, IFormatProvider fp) {
+		public static ulong Parse (string s, NumberStyles style, IFormatProvider fp) 
+		{
+			Exception exc;
 			ulong res;
 
-			Parse (s, style, fp, false, out res);
+			if (!Parse (s, style, fp, false, out res, out exc))
+				throw exc;
 
 			return res;
 		}
@@ -341,25 +345,27 @@
 
 #if NET_2_0
 		[CLSCompliant (false)]
-		public static bool TryParse (string s, out ulong result) {
-			try {
-				return Parse (s, NumberStyles.Integer, null, true, out result);
-			}
-			catch (Exception) {
+		public static bool TryParse (string s, out ulong result) 
+		{
+			Exception exc;
+			if (!Parse (s, NumberStyles.Integer, null, true, out result, out exc)) {
 				result = 0;
 				return false;
 			}
+
+			return true;
 		}
 
 		[CLSCompliant (false)]
-		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out ulong result) {
-			try {
-				return Parse (s, style, provider, true, out result);
-			}
-			catch (Exception) {
+		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out ulong result) 
+		{
+			Exception exc;
+			if (!Parse (s, style, provider, true, out result, out exc)) {
 				result = 0;
 				return false;
 			}
+
+			return true;
 		}
 #endif
 
Index: SByte.cs
===================================================================
--- SByte.cs	(revisión: 52933)
+++ SByte.cs	(copia de trabajo)
@@ -90,7 +90,7 @@
 		}
 #endif
 
-		internal static bool Parse (string s, bool tryParse, out sbyte result)
+		internal static bool Parse (string s, bool tryParse, out sbyte result, out Exception exc)
 		{
 			int ival = 0;
 			int len;
@@ -99,12 +99,13 @@
 			bool digits_seen = false;
 
 			result = 0;
+			exc = null;
 
-			if (s == null)
-				if (tryParse)
-					return false;
-				else
-					throw new ArgumentNullException ("s");
+			if (s == null) {
+				if (!tryParse)
+					exc = new ArgumentNullException ("s");
+				return false;
+			}
 
 			len = s.Length;
 
@@ -115,11 +116,11 @@
 					break;
 			}
 
-			if (i == len)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ();
+			if (i == len) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			c = s [i];
 			if (c == '+')
@@ -138,32 +139,32 @@
 				} else {
 					if (Char.IsWhiteSpace (c)) {
 						for (i++; i < len; i++) {
-							if (!Char.IsWhiteSpace (s [i]))
-								if (tryParse)
-									return false;
-								else
-									throw new FormatException ();
+							if (!Char.IsWhiteSpace (s [i])) {
+								if (!tryParse)
+									exc = Int32.GetFormatException ();
+								return false;
+							}
 						}
 						break;
-					} else
-						if (tryParse)
-							return false;
-						else
-							throw new FormatException ();
+					} else {
+						if (!tryParse)
+							exc = Int32.GetFormatException ();
+						return false;
+					}
 				}
 			}
-			if (!digits_seen)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ();
+			if (!digits_seen) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			ival = neg ? ival : -ival;
-			if (ival < SByte.MinValue || ival > SByte.MaxValue)
-				if (tryParse)
-					return false;
-				else
-					throw new OverflowException ();
+			if (ival < SByte.MinValue || ival > SByte.MaxValue) {
+				if (!tryParse)
+					exc = new OverflowException ();
+				return false;
+			}
 
 			result = (sbyte)ival;
 			return true;
@@ -192,43 +193,43 @@
 		}
 
 		[CLSCompliant(false)]
-		public static sbyte Parse (string s) {
+		public static sbyte Parse (string s) 
+		{
+			Exception exc;
 			sbyte res;
 
-			Parse (s, false, out res);
+			if (!Parse (s, false, out res, out exc))
+				throw exc;
 
 			return res;
 		}
 
 #if NET_2_0
 		[CLSCompliant(false)]
-		public static bool TryParse (string s, out sbyte result) {
-			try {
-				return Parse (s, true, out result);
-			}
-			catch (Exception) {
+		public static bool TryParse (string s, out sbyte result) 
+		{
+			Exception exc;
+			if (!Parse (s, true, out result, out exc)) {
 				result = 0;
 				return false;
 			}
+
+			return true;
 		}
 
 		[CLSCompliant(false)]
-		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out sbyte result) {
-			try {
-				int tmpResult;
+		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out sbyte result) 
+		{
+			int tmpResult;
+			result = 0;
 
-				result = 0;
-				if (!Int32.TryParse (s, style, provider, out tmpResult))
-					return false;
-				if (tmpResult > SByte.MaxValue || tmpResult < SByte.MinValue)
-					return false;
-				result = (sbyte)tmpResult;
-				return true;
-			}
-			catch (Exception) {
-				result = 0;
+			if (!Int32.TryParse (s, style, provider, out tmpResult))
 				return false;
-			}
+			if (tmpResult > SByte.MaxValue || tmpResult < SByte.MinValue)
+				return false;
+				
+			result = (sbyte)tmpResult;
+			return true;
 		}
 #endif
 
Index: Byte.cs
===================================================================
--- Byte.cs	(revisión: 52933)
+++ Byte.cs	(copia de trabajo)
@@ -93,7 +93,7 @@
 		}
 #endif
 
-		internal static bool Parse (string s, bool tryParse, out byte result)
+		internal static bool Parse (string s, bool tryParse, out byte result, out Exception exc)
 		{
 			byte val = 0;
 			int len;
@@ -102,12 +102,13 @@
 			bool negative = false;
 
 			result = 0;
+			exc = null;
 
-			if (s == null)
-				if (tryParse)
-					return false;
-				else
-					throw new ArgumentNullException ("s");
+			if (s == null) {
+				if (!tryParse)
+					exc = new ArgumentNullException ("s");
+				return false;
+			}
 
 			len = s.Length;
 
@@ -120,11 +121,11 @@
 			}
 
 			// if it's all whitespace, then throw exception
-			if (i == len)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ();
+			if (i == len) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
 			// look for the optional '+' sign
 			if (s [i] == '+')
@@ -148,38 +149,37 @@
 					// after the last numeral, only whitespace is allowed
 					if (Char.IsWhiteSpace (c)){
 						for (i++; i < len; i++){
-							if (!Char.IsWhiteSpace (s [i]))
-								if (tryParse)
-									return false;
-								else
-									throw new FormatException ();
+							if (!Char.IsWhiteSpace (s [i])) {
+								if (!tryParse)
+									exc = Int32.GetFormatException ();
+								return false;
+							}
 						}
 						break;
-					} else
-						if (tryParse)
-							return false;
-						else
-							throw new FormatException ();
+					} else {
+						if (!tryParse)
+							exc = Int32.GetFormatException ();
+						return false;
+					}
 				}
 			}
 
 			// -0 is legal but other negative values are not
 			if (negative && (val > 0)) {
-				if (tryParse)
-					return false;
-				else
-					throw new OverflowException (
+				if (!tryParse)
+					exc = new OverflowException (
 					    Locale.GetText ("Negative number"));
+				return false;
 			}
 
 			// if all we had was a '+' sign, then throw exception
-			if (!digits_seen)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ();
+			if (!digits_seen) {
+				if (!tryParse)
+					exc = Int32.GetFormatException ();
+				return false;
+			}
 
-		    result = val;
+			result = val;
 			return true;
 		}
 
@@ -202,41 +202,42 @@
 			return (byte) tmpResult;
 		}
 
-		public static byte Parse (string s) {
+		public static byte Parse (string s) 
+		{
+			Exception exc;
 			byte res;
 
-			Parse (s, false, out res);
+			if (!Parse (s, false, out res, out exc))
+				throw exc;
 
 			return res;
 		}
 
 #if NET_2_0
-		public static bool TryParse (string s, out byte result) {
-			try {
-				return Parse (s, true, out result);
-			}
-			catch (Exception) {
+		public static bool TryParse (string s, out byte result) 
+		{
+			Exception exc;
+			if (!Parse (s, true, out result, out exc)) {
 				result = 0;
 				return false;
 			}
+
+			return true;
 		}
 
-		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out byte result) {
-			try {
-				uint tmpResult;
-
-				result = 0;
-				if (!UInt32.TryParse (s, style, provider, out tmpResult))
-					return false;
-				if (tmpResult > Byte.MaxValue || tmpResult < Byte.MinValue)
-					return false;
-				result = (byte)tmpResult;
-				return true;
-			}
-			catch (Exception) {
-				result = 0;
+		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out byte result) 
+		{
+			uint tmpResult;
+			result = 0;
+			
+			if (!UInt32.TryParse (s, style, provider, out tmpResult))
 				return false;
-			}
+				
+			if (tmpResult > Byte.MaxValue || tmpResult < Byte.MinValue)
+				return false;
+				
+			result = (byte)tmpResult;
+			return true;
 		}
 #endif
 
Index: Double.cs
===================================================================
--- Double.cs	(revisión: 52933)
+++ Double.cs	(copia de trabajo)
@@ -199,19 +199,50 @@
 		private const int State_Exponent = 5;
 		private const int State_ConsumeWhiteSpace = 6;
 		
-		[MonoTODO("check if digits are group in correct numbers between the group separators")]
 		public static double Parse (string s, NumberStyles style, IFormatProvider provider)
 		{
-			if (s == null) throw new ArgumentNullException();
-			if (style > NumberStyles.Any)
-			{
-				throw new ArgumentException();
+			Exception exc;
+			double result;
+			
+			if (!Parse (s, style, provider, false, out result, out exc))
+				throw exc;
+
+			return result;
+		}
+		
+		[MonoTODO("check if digits are group in correct numbers between the group separators")]
+		internal static bool Parse (string s, NumberStyles style, IFormatProvider provider, bool tryParse, out double result, out Exception exc)
+		{
+			result = 0;
+			exc = null;
+			
+			if (s == null) {
+				if (!tryParse)
+					exc = new ArgumentNullException ("s");
+				return false;
 			}
+			
+			if (style > NumberStyles.Any) {
+				if (!tryParse)
+					exc = new ArgumentException();
+				return false;
+			}
+			
 			NumberFormatInfo format = NumberFormatInfo.GetInstance(provider);
 			if (format == null) throw new Exception("How did this happen?");
-			if (s == format.NaNSymbol) return Double.NaN;
-			if (s == format.PositiveInfinitySymbol) return Double.PositiveInfinity;
-			if (s == format.NegativeInfinitySymbol) return Double.NegativeInfinity;
+			
+			if (s == format.NaNSymbol) {
+				result = Double.NaN;
+				return true;
+			}
+			if (s == format.PositiveInfinitySymbol) {
+				result = Double.PositiveInfinity;
+				return true;
+			}
+			if (s == format.NegativeInfinitySymbol) {
+				result = Double.NegativeInfinity;
+				return true;
+			}
 
 			//
 			// validate and prepare string for C
@@ -226,8 +257,11 @@
 				while (sidx < len && Char.IsWhiteSpace (c = s [sidx]))
 				       sidx++;
 
-				if (sidx == len)
-					throw new FormatException();
+				if (sidx == len) {
+					if (!tryParse)
+						exc = Int32.GetFormatException ();
+					return true;
+				}
 			}
 
 			bool allow_trailing_white = ((style & NumberStyles.AllowTrailingWhite) != 0);
@@ -314,7 +348,9 @@
 					if (Char.IsWhiteSpace (c))
 						goto case State_ConsumeWhiteSpace;
 
-					throw new FormatException ("Unknown char: " + c);
+					if (!tryParse)
+						exc = new FormatException ("Unknown char: " + c);
+					return false;
 
 				case State_Decimal:
 					if (Char.IsDigit (c)){
@@ -332,7 +368,10 @@
 					
 					if (Char.IsWhiteSpace (c))
 						goto case State_ConsumeWhiteSpace;
-					throw new FormatException ("Unknown char: " + c);
+					
+					if (!tryParse)
+						exc = new FormatException ("Unknown char: " + c);
+					return false;
 
 				case State_ExponentSign:
 					if (Char.IsDigit (c)){
@@ -358,8 +397,10 @@
 					if (Char.IsWhiteSpace (c))
 						goto case State_ConsumeWhiteSpace;
 					
-					throw new FormatException ("Unknown char: " + c);
-
+					if (!tryParse)
+						exc = new FormatException ("Unknown char: " + c);
+					return false;
+					
 				case State_Exponent:
 					if (Char.IsDigit (c)){
 						b [didx++] = (byte) c;
@@ -368,42 +409,57 @@
 					
 					if (Char.IsWhiteSpace (c))
 						goto case State_ConsumeWhiteSpace;
-					throw new FormatException ("Unknown char: " + c);
+					
+					if (!tryParse)
+						exc = new FormatException ("Unknown char: " + c);
+					return false;
 
 				case State_ConsumeWhiteSpace:
 					if (allow_trailing_white && Char.IsWhiteSpace (c))
 						break;
-					throw new FormatException ("Unknown char");
+					
+					if (!tryParse)
+						exc = new FormatException ("Unknown char");
+					return false;
 				}
 			}
 
 			b [didx] = 0;
 			unsafe {
 				fixed (byte *p = &b [0]){
-					double retVal = ParseImpl (p);
-					if (IsPositiveInfinity(retVal) || IsNegativeInfinity(retVal))
-						throw new OverflowException();
+					double retVal;
+					if (!ParseImpl (p, out retVal)) {
+						if (!tryParse)
+							exc = Int32.GetFormatException ();
+						return false;
+					}
+					if (IsPositiveInfinity(retVal) || IsNegativeInfinity(retVal)) {
+						if (!tryParse)
+							exc = new OverflowException ();
+						return false;
+					}
 
-					return retVal;
+					result = retVal;
+					return true;
 				}
 			}
 		}
 
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
-		unsafe private static extern double ParseImpl (byte *byte_ptr);
+		unsafe private static extern bool ParseImpl (byte *byte_ptr, out double value);
 		
 		public static bool TryParse (string s,
 					     NumberStyles style,
 					     IFormatProvider provider,
 					     out double result)
 		{
-			try {
-				result = Parse (s, style, provider);
-				return true;
-			} catch {
+			Exception exc;
+			if (!Parse (s, style, provider, true, out result, out exc)) {
 				result = 0;
 				return false;
 			}
+
+			return true;
 		}
 
 		public override string ToString ()
