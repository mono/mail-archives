Index: Mono.GetOptions/Options.cs
===================================================================
--- Mono.GetOptions/Options.cs	(revision 53945)
+++ Mono.GetOptions/Options.cs	(working copy)
@@ -27,6 +27,7 @@
 //
 using System;
 using System.Collections;
+using Mono.Unix;
 
 namespace Mono.GetOptions
 {
@@ -117,9 +118,9 @@
 		private static void DefaultErrorReporter (int number, string message)
 		{
 			if (number > 0)
-				Console.WriteLine("Error {0}: {1}", number, message);
+				Console.WriteLine(Catalog.GetString("Error {0}: {1}"), number, Catalog.GetString(message));
 			else
-				Console.WriteLine("Error: {0}", message);				
+				Console.WriteLine(Catalog.GetString("Error: {0}"), Catalog.GetString(message));
 		}
 		
 		public virtual string AdditionalBannerInfo { get { return null; } }
Index: Mono.GetOptions/OptionDetails.cs
===================================================================
--- Mono.GetOptions/OptionDetails.cs	(revision 53945)
+++ Mono.GetOptions/OptionDetails.cs	(working copy)
@@ -31,6 +31,7 @@
 using System.Collections;
 using System.IO;
 using System.Reflection;
+using Mono.Unix;
 
 namespace Mono.GetOptions
 {
@@ -284,7 +285,9 @@
 		private int HowManyBeforeExceedingMaxOccurs(int howMany)
 		{
 			if (MaxOccurs > 0 && (Occurs + howMany) > MaxOccurs) {
-				System.Console.Error.WriteLine("Option " + LongForm + " can be used at most " + MaxOccurs + " times. Ignoring extras...");
+				string format_str = Catalog.GetPluralString("Option {0} can be used at most {1} times. Ignoring extras...",
+						"Option {0} can be used at most {1} times. Ignoring extras...", MaxOccurs);
+				System.Console.Error.WriteLine(format_str, LongForm, MaxOccurs);
 				howMany = MaxOccurs - Occurs;
 			}
 			Occurs += howMany;
@@ -329,6 +332,8 @@
 
 			int waitingToBeProcessed = HowManyBeforeExceedingMaxOccurs(parameterValues.Length);
 
+			string converterr_str = Catalog.GetString(
+				"The value '{0}' is not convertible to the appropriate type '{1}' for the {2} option");
 			foreach (string parameter in parameterValues)
 			{
 				if (waitingToBeProcessed-- <= 0)
@@ -343,7 +348,7 @@
 					try {
 						convertedParameter = Convert.ChangeType(parameter, ParameterType.GetElementType());
 					} catch (Exception ex) {
-						Console.WriteLine(String.Format("The value '{0}' is not convertible to the appropriate type '{1}' for the {2} option", parameter, ParameterType.GetElementType().Name, DefaultForm));						
+						Console.WriteLine(converterr_str,parameter,ParameterType.GetElementType().Name,DefaultForm);
 					}
 					Values.Add(convertedParameter);
 					continue;
@@ -353,7 +358,7 @@
 					try {
 						convertedParameter = Convert.ChangeType(parameter, ParameterType);
 					} catch (Exception ex) {
-						Console.WriteLine(String.Format("The value '{0}' is not convertible to the appropriate type '{1}' for the {2} option", parameter, ParameterType.Name, DefaultForm));												
+						Console.WriteLine(converterr_str, parameter, ParameterType.Name, DefaultForm);
 						continue;
 					}
 				}
Index: Mono.GetOptions/OptionList.cs
===================================================================
--- Mono.GetOptions/OptionList.cs	(revision 53945)
+++ Mono.GetOptions/OptionList.cs	(working copy)
@@ -32,6 +32,7 @@
 using System.IO;
 using System.Reflection;
 using System.Text;
+using Mono.Unix;
 
 namespace Mono.GetOptions
 {
@@ -226,7 +227,7 @@
 			if (!bannerAlreadyShown) {
 				Console.WriteLine(appTitle + "  " + appVersion + " - " + appCopyright); 
 				if (AdditionalBannerInfo != null)
-					Console.WriteLine(AdditionalBannerInfo);
+					Console.WriteLine(Catalog.GetString(AdditionalBannerInfo));
 			}
 			bannerAlreadyShown = true;
 		}
@@ -234,23 +235,23 @@
 		private void ShowTitleLines()
 		{
 			ShowBanner();
-			Console.WriteLine(appDescription); 
+			Console.WriteLine(Catalog.GetString(appDescription));
 			Console.WriteLine();
 		}
 
 		private void ShowAbout()
 		{
 			ShowTitleLines();
-			Console.WriteLine(appAboutDetails); 
-			Console.Write("Authors: ");
+			Console.WriteLine(Catalog.GetString(appAboutDetails));
+			Console.Write(Catalog.GetString("Authors: "));
 			Console.WriteLine(string.Join(", ", appAuthors));
 		}
 
 		private void ShowHelp(bool showSecondLevelHelp)
 		{
 			ShowTitleLines();
-			Console.WriteLine(Usage);
-			Console.WriteLine("Options:");
+			Console.WriteLine(Catalog.GetString(Usage));
+			Console.WriteLine(Catalog.GetString("Options:"));
 			ArrayList lines = new ArrayList(list.Count);
 			int tabSize = 0;
 			foreach (OptionDetails option in list)
@@ -277,16 +278,21 @@
 				}
 			}
 			if (appAdditionalInfo != null)
-				Console.WriteLine("\n{0}", appAdditionalInfo);
+				Console.WriteLine("\n{0}", Catalog.GetString(appAdditionalInfo));
 			if (appReportBugsTo != null)
-				Console.WriteLine("\nPlease report bugs {0} <{1}>", (appReportBugsTo.IndexOf('@')>0)?"to":"at" , appReportBugsTo);
+			{
+				string format_str = (appReportBugsTo.IndexOf('@') != -1 ?
+					Catalog.GetString("\nPlease report bugs to <{0}>") :
+					Catalog.GetString("\nPlease report bugs at <{0}>"));
+				Console.WriteLine(format_str, appReportBugsTo);
+			}
 				
 		}
 
 		private void ShowUsage()
 		{
-			Console.WriteLine(Usage);
-			Console.Write("Short Options: ");
+			Console.WriteLine(Catalog.GetString(Usage));
+			Console.Write(Catalog.GetString("Short Options: "));
 			foreach (OptionDetails option in list)
 				Console.Write(option.ShortForm.Trim());
 			Console.WriteLine();
@@ -489,8 +495,10 @@
 		
 		private void ProcessNonOption(string argument)
 		{
-			if (optionBundle.VerboseParsingOfOptions)
-					Console.WriteLine("argument [" + argument + "]");							
+			if (optionBundle.VerboseParsingOfOptions){
+				string format_str = Catalog.GetString("argument [{0}]");
+				Console.WriteLine(format_str, argument);
+			}
 			if (argumentProcessor == null)
 				arguments.Add(argument);
 			else
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 53945)
+++ ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2005-12-25  Paul Betts  <Paul.Betts@Gmail.com>
+	* Mono.GetOptions/Options.cs, Mono.GetOptions/OptionList.cs,
+	Mono.GetOptions/OptionDetails.cs: Added initial gettext support
+
 2005-11-12  Joshua Tauberer  <tauberer@for.net>
 	* Mono.GetOptions/OptionDetails.cs: Don't split on commas for options that have
 	  a MaxOccurs of 1 (it would try, show an error, and ignore text after comma).
