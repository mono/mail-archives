Index: System.Net.Configuration/ChangeLog
===================================================================
--- System.Net.Configuration/ChangeLog	(revision 52805)
+++ System.Net.Configuration/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2005-11-09 Michael Hutchinson <m.j.hutchinson@gmail.com>
+
+	* DefaultProxyHandler.cs: Read proxy address from environment, fall back on unvalid URIs
+
 2005-10-18 Gert Driesen <drieseng@users.sourceforge.net>
 
 	* HttpWebRequestElement.cs: Added missing properties and 
Index: System.Net.Configuration/DefaultProxyHandler.cs
===================================================================
--- System.Net.Configuration/DefaultProxyHandler.cs	(revision 52805)
+++ System.Net.Configuration/DefaultProxyHandler.cs	(working copy)
@@ -57,8 +57,7 @@
 				
 				string name = child.Name;
 				if (name == "proxy") {
-					// ignored
-					HandlersUtil.ExtractAttributeValue ("usesystemdefault", child, true);
+					string sysdefault = HandlersUtil.ExtractAttributeValue ("usesystemdefault", child, true);
 					string bypass = HandlersUtil.ExtractAttributeValue ("bypassonlocal", child, true);
 					string address = HandlersUtil.ExtractAttributeValue ("proxyaddress", child, true);
 					if (child.Attributes != null && child.Attributes.Count != 0) {
@@ -76,14 +75,22 @@
 						continue;
 
 					((WebProxy) result).BypassProxyOnLocal = bp;
-					if (address == null)
-						continue;
-
-					try {
-						((WebProxy) result).Address = new Uri (address);
-					} catch (Exception) {
-						HandlersUtil.ThrowException ("invalid uri", child);
+					
+					if (address != null)
+						try {
+							((WebProxy) result).Address = new Uri (address);
+							continue;
+						} catch (UriFormatException) {} //MS: ignore bad URIs, fall through to default
+					
+					//MS: presence of valid address URI takes precedence over usesystemdefault
+					if (sysdefault != null && String.Compare (sysdefault, "true", true) == 0) {
+						address = Environment.GetEnvironmentVariable ("http_proxy");
+						if (address != null)
+							try {
+								((WebProxy) result).Address = new Uri (address);
+							} catch (UriFormatException) {}
 					}
+					
 					continue;
 				}
 

