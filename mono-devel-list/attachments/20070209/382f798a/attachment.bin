Index: class/corlib/System/MonoType.cs
===================================================================
--- class/corlib/System/MonoType.cs	(révision 72555)
+++ class/corlib/System/MonoType.cs	(copie de travail)
@@ -239,7 +239,10 @@
 
 		internal override FieldInfo GetField (FieldInfo fromNoninstanciated)
 		{
-			return GetField (fromNoninstanciated.Name);
+			/* create sensible flags from given FieldInfo */
+			BindingFlags flags = fromNoninstanciated.IsStatic ? BindingFlags.Static : BindingFlags.Instance;
+			flags |= fromNoninstanciated.IsPublic ? BindingFlags.Public : BindingFlags.NonPublic;
+			return GetField (fromNoninstanciated.Name, flags);
 		}
 
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
Index: class/corlib/Test/System.Reflection/FieldInfoTest.cs
===================================================================
--- class/corlib/Test/System.Reflection/FieldInfoTest.cs	(révision 72555)
+++ class/corlib/Test/System.Reflection/FieldInfoTest.cs	(copie de travail)
@@ -151,14 +151,38 @@
 		fi2.SetValue (t, null);
 		AssertEquals (null, fi2.GetValue (t));
 	}
+	
+	[Test]
+	public void NonPublicTests ()
+	{		
+		Assembly assembly = Assembly.ReflectionOnlyLoad (typeof (FieldInfoTest).Assembly.FullName);
+		
+		Type t = assembly.GetType (typeof (NonPublicFieldClass).FullName);
+
+		// try to get non-public field
+		FieldInfo fi = t.GetField ("protectedField");
+		AssertNull (fi);
+		// get it for real
+		fi = t.GetField ("protectedField", BindingFlags.NonPublic | BindingFlags.Instance);
+		AssertNotNull (fi);		
+		// get via typebuilder		
+		FieldInfo f = TypeBuilder.GetField (t, fi);
+		AssertNotNull (f);	
+	}
+	
 #endif
 }		
 #if NET_2_0
-// Helper class
+// Helper classes
 class RefOnlyFieldClass 
 {
 	// Helper property
 	static int RefOnlyField;
 }
+
+class NonPublicFieldClass
+{
+	protected int protectedField;
+}
 #endif
 }