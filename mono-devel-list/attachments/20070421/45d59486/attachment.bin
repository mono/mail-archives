Index: System.Windows.Forms/BindingNavigator.cs
===================================================================
--- System.Windows.Forms/BindingNavigator.cs	(revision 0)
+++ System.Windows.Forms/BindingNavigator.cs	(revision 0)
@@ -0,0 +1,321 @@
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+// Copyright (c) 2005 Novell, Inc. (http://www.novell.com)
+//
+// Authors:
+//	Olivier Dufour	olivier.duff@free.fr
+//
+//
+
+#if NET_2_0
+
+using System;
+using System.Collections.Generic;
+using System.Text;
+using System.ComponentModel;
+using System.Runtime.InteropServices;
+
+namespace System.Windows.Forms
+{
+	[ComVisibleAttribute(true)]
+	[ClassInterfaceAttribute(ClassInterfaceType.AutoDispatch)]
+	public class BindingNavigator : ToolStrip, ISupportInitialize
+	{
+		public BindingNavigator() : this(false)
+		{
+		}
+
+		public BindingNavigator(BindingSource bindingSource)
+		{
+			this.bindingSource = bindingSource;
+			this.AddStandardItems();
+		}
+
+		public BindingNavigator(bool addStandardItems) 
+		{
+			this.bindingSource = null;
+			if (addStandardItems)
+				this.AddStandardItems();
+		}
+
+		public BindingNavigator(IContainer container)
+		{
+			container.Add(this);
+			bindingSource = null;
+		}
+
+		#region private fields
+
+		private ToolStripItem addNewItem = null;
+		private BindingSource bindingSource = null;
+		private ToolStripItem countItem = null;
+		private string countItemFormat = Locale.GetText("of {0}");
+		private ToolStripItem deleteItem = null;
+		private ToolStripItem moveFirstItem = null;
+		private ToolStripItem moveLastItem = null;
+		private ToolStripItem moveNextItem = null;
+		private ToolStripItem movePreviousItem = null;
+		private ToolStripItem positionItem = null;
+		private bool initFlag = false;
+		#endregion 
+
+		#region Public Properties
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem AddNewItem {
+			get { return addNewItem; }
+			set {
+				addNewItem.Click -= new EventHandler(OnAddNew);
+				value.Click += new EventHandler(OnAddNew);
+				addNewItem = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public BindingSource BindingSource {
+			get { return bindingSource; }
+			set { 
+				bindingSource = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem CountItem {
+			get { return countItem; }
+			set {
+				countItem = value;
+				this.OnRefreshItems();
+			}
+		}
+		
+		public string CountItemFormat {
+			get { return countItemFormat; }
+			set {
+				countItemFormat = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem DeleteItem {
+			get { return deleteItem; }
+			set {
+				deleteItem.Click -= new EventHandler(OnDelete);
+				value.Click += new EventHandler(OnDelete);
+				deleteItem = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem MoveFirstItem {
+			get { return moveFirstItem; }
+			set {
+				moveFirstItem.Click -= new EventHandler(OnMoveFirst);
+				value.Click += new EventHandler(OnMoveFirst);
+				moveFirstItem = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem MoveLastItem {
+			get { return moveLastItem; }
+			set {
+				moveLastItem.Click -= new EventHandler(OnMoveLast);
+				value.Click += new EventHandler(OnMoveLast);
+				moveLastItem = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem MoveNextItem {
+			get { return moveNextItem; }
+			set {
+				moveNextItem.Click -= new EventHandler(OnMoveNext);
+				value.Click += new EventHandler(OnMoveNext);
+				moveNextItem = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem MovePreviousItem {
+			get { return movePreviousItem; }
+			set {
+				movePreviousItem.Click -= new EventHandler(OnMovePrevious);
+				value.Click += new EventHandler(OnMovePrevious);
+				movePreviousItem = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem PositionItem {
+			get { return positionItem; }
+			set {
+				positionItem = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		#endregion
+
+		#region public Events
+
+		public event EventHandler RefreshItems;
+
+		#endregion
+
+		#region public and protected Methodes
+
+		[MonoTODO("Order of each item, properties(text,image)")]
+		public virtual void AddStandardItems()
+		{
+			addNewItem = new ToolStripButton();
+			this.Items.Add(addNewItem);
+
+			moveFirstItem = new ToolStripButton();
+			this.Items.Add(moveFirstItem);
+
+			moveLastItem = new ToolStripButton();
+			this.Items.Add(moveLastItem);
+
+			moveNextItem = new ToolStripButton();
+			this.Items.Add(moveNextItem);
+
+			movePreviousItem = new ToolStripButton();
+			this.Items.Add(movePreviousItem);
+
+			deleteItem = new ToolStripButton();
+			this.Items.Add(deleteItem);
+
+			countItem = new ToolStripLabel();
+			this.Items.Add(countItem);
+
+			positionItem = new ToolStripTextBox();
+			this.Items.Add(positionItem);
+		}
+
+		public void BeginInit()
+		{
+			initFlag = true;
+		}
+
+		protected override void Dispose(bool disposing)
+		{
+			base.Dispose(disposing);
+		}
+
+		public void EndInit()
+		{
+			initFlag = false;
+			OnRefreshItems();
+		}
+
+		protected virtual void OnRefreshItems()
+		{
+			if (initFlag)
+				return;
+			this.RefreshItems(this, EventArgs.Empty);
+			this.RefreshItemsCore();
+		}
+		
+		protected virtual void RefreshItemsCore()
+		{
+			if (bindingSource == null || !bindingSource.AllowNew)
+				addNewItem.Enabled = false;
+
+			if (bindingSource == null || bindingSource.Position == 0 || !bindingSource.AllowNew)
+				moveFirstItem.Enabled = false;
+
+			if (bindingSource == null || bindingSource.Position >= bindingSource.Count)
+				moveLastItem.Enabled = false;
+
+			if (bindingSource == null || bindingSource.Position >= bindingSource.Count)
+				moveNextItem.Enabled = false;
+
+			if (bindingSource == null || bindingSource.Position <= 0)
+				movePreviousItem.Enabled = false;
+
+			if (bindingSource == null || bindingSource.Count == 0 || !bindingSource.AllowNew)
+				deleteItem.Enabled = false;
+
+			if (bindingSource != null)
+			{
+				countItem.Text = string.Format(countItemFormat, bindingSource.Count);
+				positionItem.Text = string.Format("{0}", bindingSource.Position + 1);
+			}
+		}
+
+		[MonoTODO]
+		public bool Validate()
+		{
+			throw new NotImplementedException();
+		}
+
+		#endregion
+
+		#region private methode
+
+		private void OnAddNew(object sender, EventArgs e)
+		{
+			if (bindingSource != null)
+				bindingSource.AddNew();
+		}
+
+		private void OnDelete(object sender, EventArgs e)
+		{
+			if (bindingSource != null)
+				bindingSource.RemoveCurrent();
+		}
+
+		private void OnMoveFirst(object sender, EventArgs e)
+		{
+			if (bindingSource != null)
+				bindingSource.MoveFirst();
+		}
+
+		private void OnMoveLast(object sender, EventArgs e)
+		{
+			if (bindingSource != null)
+				bindingSource.MoveLast();
+		}
+
+		private void OnMoveNext(object sender, EventArgs e)
+		{
+			if (bindingSource != null)
+				bindingSource.MoveNext();
+		}
+
+		private void OnMovePrevious(object sender, EventArgs e)
+		{
+			if (bindingSource != null)
+				bindingSource.MovePrevious();
+		}
+
+		#endregion
+	}
+}
+
+#endif
\ No newline at end of file
Index: Test/System.Windows.Forms/BindingNavigatorTest.cs
===================================================================
--- Test/System.Windows.Forms/BindingNavigatorTest.cs	(revision 0)
+++ Test/System.Windows.Forms/BindingNavigatorTest.cs	(revision 0)
@@ -0,0 +1,146 @@
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+// Copyright (c) 2006 Novell, Inc.
+//
+// Authors:
+//	Olivier Dufour	olivier.duff@free.fr
+//
+//
+#if NET_2_0
+
+using System;
+using System.Collections.Generic;
+using System.Text;
+using NUnit.Framework;
+using System.Windows.Forms;
+
+namespace MonoTests.System.Windows.Forms
+{
+
+	[TestFixture]
+	public class BindingNavigatorTest
+	{
+		private bool flag = false;
+
+		[Test]
+		public void Constructor()
+		{
+			BindingNavigator navigator = new BindingNavigator(true);
+			CheckStandardItems(navigator);
+		}
+
+		[Test]
+		public void AddStandardItems()
+		{
+			BindingNavigator navigator = new BindingNavigator();
+			navigator.AddStandardItems();
+			CheckStandardItems(navigator);
+		}
+
+		private void CheckStandardItems(BindingNavigator navigator)
+		{
+			Assert.IsNotNull(navigator.AddNewItem, "*1");
+			Assert.IsNotNull(navigator.MoveFirstItem, "*2");
+			Assert.IsNotNull(navigator.MoveLastItem, "*3");
+			Assert.IsNotNull(navigator.MoveNextItem, "*4");
+			Assert.IsNotNull(navigator.MovePreviousItem, "*5");
+			Assert.IsNotNull(navigator.DeleteItem, "*6");
+			Assert.IsNotNull(navigator.CountItem, "*7");
+			Assert.IsNotNull(navigator.PositionItem, "*8");
+			Assert.IsNotNull(navigator.AddNewItem, "*9");
+			Assert.IsNotNull(navigator.AddNewItem, "*10");
+			Assert.IsNull(navigator.BindingSource, "*11");
+
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.AddNewItem, "#1");
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.MoveFirstItem, "#2");
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.MoveLastItem, "#3");
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.MoveNextItem, "#4");
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.MovePreviousItem, "#5");
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.DeleteItem, "#6");
+			Assert.IsInstanceOfType(typeof(ToolStripLabel), navigator.CountItem, "#7");
+			Assert.IsInstanceOfType(typeof(ToolStripTextBox), navigator.PositionItem, "#8");
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.AddNewItem, "#9");
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.AddNewItem, "#10");
+			Assert.AreEqual("of {0}", navigator.CountItemFormat, "#11");
+		}
+
+		[Test]
+		public void Init()
+		{
+			BindingNavigator navigator = new BindingNavigator();
+			navigator.BeginInit();
+			navigator.RefreshItems += new EventHandler(TestInitFail);
+			//force refresh
+			navigator.AddNewItem = new ToolStripButton();
+			navigator.RefreshItems -= new EventHandler(TestInitFail);
+			navigator.RefreshItems += new EventHandler(TestInitSucceed);
+			navigator.EndInit();
+			Assert.IsTrue(flag, "Refresh not called");
+			flag = false;
+		}
+		public void TestInitFail(object obj, EventArgs args)
+		{
+			Assert.Fail("Init and Refresh called");
+		}
+		public void TestInitSucceed(object obj, EventArgs args)
+		{
+			flag = true;
+		}
+
+		[Test]
+		public void OnRefreshItems()
+		{
+			BindingNavigator navigator = new BindingNavigator(true);
+			//force refresh
+			navigator.RefreshItems += new EventHandler(TestInitSucceed);
+			navigator.AddNewItem = new ToolStripButton();
+			CheckRefreshCore(navigator);
+		}
+
+		[Test]
+		public void RefreshItemsCore()
+		{
+			BindingNavigator navigator = new BindingNavigator(true);
+			navigator.RefreshItems += new EventHandler(TestInitSucceed);
+			navigator.AddNewItem = new ToolStripButton();
+			CheckRefreshCore(navigator);
+		}
+
+		public void CheckRefreshCore(BindingNavigator navigator)
+		{
+			Assert.AreEqual(true, flag, "#1");
+			flag = false;
+			Assert.AreEqual(false, navigator.AddNewItem.Enabled, "#2");
+			Assert.AreEqual(false, navigator.MoveFirstItem.Enabled, "#3");
+			Assert.AreEqual(false, navigator.MoveLastItem.Enabled, "#4");
+			Assert.AreEqual(false, navigator.MoveNextItem.Enabled, "#5");
+			Assert.AreEqual(false, navigator.MovePreviousItem.Enabled, "#6");
+			Assert.AreEqual(false, navigator.DeleteItem.Enabled, "#7");
+		}
+
+		[Test]
+		public void Validate()
+		{
+			//TODO
+		}
+		
+	}
+}
+#endif
\ No newline at end of file