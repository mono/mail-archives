Index: ChangeLog
from  Raja R Harinath  <rharinath@novell.com>

	* cs-parser.jay (attribute): Create a GlobalAttribute for the case
	of a top-level attribute without an attribute target.
	* attribute.cs (Attribute.Error_AttributeConstructorMismatch): 
	Make non-static.
	(Attribute.Conditional_GetConditionName), 
	(Attribute.Obsolete_GetObsoleteMessage): Update.
	(Attribute.IndexerName_GetIndexerName): New.  Attribute-specific
	part of ScanForIndexerName.
	(Attribute.CanIgnoreInvalidAttribute): New function.
	(Attribute.ScanForIndexerName): Move to ...
	(Attributes.ScanForIndexerName): ... here.
	(Attributes.Attrs): Rename from now-misnamed AttributeSections.
	(Attributes.Search): New internal variant that can choose not to
	complain if types aren't resolved.  The original signature now
	complains.
	(Attributes.GetClsCompliantAttribute): Use internal variant, with
	complaints suppressed.
	(GlobalAttribute.CheckAttributeType): Overwrite ds.NamespaceEntry
	only if it not useful.
	(CanIgnoreInvalidAttribute): Ignore assembly attribute errors at
	top-level for attributes that are shared between the assembly
	and a top-level class.
	* parameter.cs (ImplicitParameter): Rename from ParameterAtribute.
	* class.cs: Update to reflect changes.
	(DefineIndexers): Fuse loops.
	* codegen.cs (GetAssemblyName): Update to reflect changes.  Accept
	a couple more variants of attribute names.

Index: attribute.cs
===================================================================
RCS file: /cvs/public/mcs/mcs/attribute.cs,v
retrieving revision 1.124
diff -u -u -r1.124 attribute.cs
--- attribute.cs 18 May 2004 18:28:40 -0000 1.124
+++ attribute.cs 19 May 2004 11:53:02 -0000
@@ -119,9 +119,9 @@
 				      "expression or array creation expression");
 		}
 
-		static void Error_AttributeConstructorMismatch (Location loc)
+		void Error_AttributeConstructorMismatch ()
 		{
-			Report.Error (-6, loc,
+			Report.Error (-6, Location,
                                       "Could not find a constructor for this argument list.");
 		}
 
@@ -438,7 +438,7 @@
                                 Location);
 
 			if (mg == null) {
-				Error_AttributeConstructorMismatch (Location);
+				Error_AttributeConstructorMismatch ();
 				return null;
 			}
 
@@ -446,7 +446,7 @@
 				ec, (MethodGroupExpr) mg, pos_args, Location);
 
 			if (constructor == null) {
-				Error_AttributeConstructorMismatch (Location);
+				Error_AttributeConstructorMismatch ();
 				return null;
 			}
 
@@ -628,58 +628,6 @@
 			return attr_class.AttributeUsage;
 		}
 
-		//
-		// This method should be invoked to pull the IndexerName attribute from an
-		// Indexer if it exists.
-		//
-		public static string ScanForIndexerName (EmitContext ec, Attributes opt_attrs)
-		{
-			if (opt_attrs == null)
-				return null;
-			if (opt_attrs.AttributeSections == null)
-				return null;
-
-			foreach (Attribute a in opt_attrs.AttributeSections) {
-					if (a.ResolveType (ec.DeclSpace, true) == null)
-						return null;
-					
-					if (a.Type != TypeManager.indexer_name_type)
-						continue;
-
-					//
-					// So we have found an IndexerName, pull the data out.
-					//
-					if (a.Arguments == null || a.Arguments [0] == null){
-						Error_AttributeConstructorMismatch (a.Location);
-						return null;
-					}
-					ArrayList pos_args = (ArrayList) a.Arguments [0];
-					if (pos_args.Count == 0){
-						Error_AttributeConstructorMismatch (a.Location);
-						return null;
-					}
-					
-					Argument arg = (Argument) pos_args [0];
-					if (!arg.Resolve (ec, a.Location))
-						return null;
-					
-					Expression e = arg.Expr;
-					if (!(e is StringConstant)){
-						Error_AttributeConstructorMismatch (a.Location);
-						return null;
-					}
-
-					//
-					// Remove the attribute from the list
-					//
-
-					//TODO: It is very close to hack and it can crash here
-					opt_attrs.AttributeSections.Remove (a);
-
-					return (((StringConstant) e).Value);
-			}
-			return null;
-		}
 
 		//
 		// This pulls the condition name out of a Conditional attribute
@@ -690,19 +638,19 @@
 			// So we have a Conditional, pull the data out.
 			//
 			if (Arguments == null || Arguments [0] == null){
-				Error_AttributeConstructorMismatch (Location);
+				Error_AttributeConstructorMismatch ();
 				return null;
 			}
 
 			ArrayList pos_args = (ArrayList) Arguments [0];
 			if (pos_args.Count != 1){
-				Error_AttributeConstructorMismatch (Location);
+				Error_AttributeConstructorMismatch ();
 				return null;
 			}
 
 			Argument arg = (Argument) pos_args [0];	
 			if (!(arg.Expr is StringConstant)){
-				Error_AttributeConstructorMismatch (Location);
+				Error_AttributeConstructorMismatch ();
 				return null;
 			}
 
@@ -725,20 +673,20 @@
 			if (pos_args.Count == 0)
 				return "";
 			else if (pos_args.Count > 2){
-				Error_AttributeConstructorMismatch (Location);
+				Error_AttributeConstructorMismatch ();
 				return null;
 			}
 
 			Argument arg = (Argument) pos_args [0];	
 			if (!(arg.Expr is StringConstant)){
-				Error_AttributeConstructorMismatch (Location);
+				Error_AttributeConstructorMismatch ();
 				return null;
 			}
 
 			if (pos_args.Count == 2){
 				Argument arg2 = (Argument) pos_args [1];
 				if (!(arg2.Expr is BoolConstant)){
-					Error_AttributeConstructorMismatch (Location);
+					Error_AttributeConstructorMismatch ();
 					return null;
 				}
 				is_error = ((BoolConstant) arg2.Expr).Value;
@@ -747,6 +695,31 @@
 			return ((StringConstant) arg.Expr).Value;
 		}
 
+		public string IndexerName_GetIndexerName (EmitContext ec)
+		{
+			if (Arguments == null || Arguments [0] == null){
+				Error_AttributeConstructorMismatch ();
+				return null;
+			}
+			ArrayList pos_args = (ArrayList) Arguments [0];
+			if (pos_args.Count != 1) {
+				Error_AttributeConstructorMismatch ();
+				return null;
+			}
+			
+			Argument arg = (Argument) pos_args [0];
+			if (!arg.Resolve (ec, Location))
+				return null;
+			
+			StringConstant sc = arg.Expr as StringConstant;
+			if (sc == null){
+				Error_AttributeConstructorMismatch ();
+				return null;
+			}
+			
+			return sc.Value;
+		}
+
 		/// <summary>
 		/// Returns value of CLSCompliantAttribute contructor parameter but because the method can be called
 		/// before ApplyAttribute. We need to resolve the arguments.
@@ -829,6 +802,11 @@
 			get { return ImplOptions == MethodImplOptions.InternalCall; }
 		}
 
+		protected virtual bool CanIgnoreInvalidAttribute (Attributable ias)
+		{
+			return false;
+		}
+
 		/// <summary>
 		/// Emit attribute for Attributable symbol
 		/// </summary>
@@ -840,7 +818,10 @@
 
 			AttributeUsageAttribute usage_attr = GetAttributeUsage ();
 			if ((usage_attr.ValidOn & ias.AttributeTargets) == 0) {
-				Error_AttributeNotValidForElement (this, Location);
+				// The parser applies toplevel attributes both to the assembly and
+				// to a top-level class, if any.  So, be silent about them.
+				if (! CanIgnoreInvalidAttribute (ias))
+					Error_AttributeNotValidForElement (this, Location);
 				return;
 			}
 
@@ -1076,28 +1057,40 @@
 
 		protected override Type CheckAttributeType (DeclSpace ds, bool complain)
 		{
-			ds.NamespaceEntry = ns;
+			NamespaceEntry old = ds.NamespaceEntry;
+			if (old == null || old.NS == null || old.NS == Namespace.Root) 
+				ds.NamespaceEntry = ns;
 			return base.CheckAttributeType (ds, complain);
 		}
+
+		protected override bool CanIgnoreInvalidAttribute (Attributable ias)
+		{
+			// Ignore error if this attribute is shared between the Assembly
+			// and a top-level class.  The parser couldn't figure out which entity
+			// this attribute belongs to.  If this attribute is erroneous, it should
+			// be caught when it is processed by the top-level class.
+
+			return (Target == null && ias is CommonAssemblyModulClass);
+		}
 	}
 
 	public class Attributes {
-		public ArrayList AttributeSections;
+		public ArrayList Attrs;
 
 		public Attributes (Attribute a)
 		{
-			AttributeSections = new ArrayList ();
-			AttributeSections.Add (a);
+			Attrs = new ArrayList ();
+			Attrs.Add (a);
 		}
 
 		public Attributes (ArrayList attrs)
 		{
-			AttributeSections = attrs;
+			Attrs = attrs;
 		}
 
 		public void AddAttributes (ArrayList attrs)
 		{
-			AttributeSections.AddRange (attrs);
+			Attrs.AddRange (attrs);
 		}
 
 		/// <summary>
@@ -1105,19 +1098,11 @@
 		/// </summary>
 		public void CheckTargets (string[] possible_targets)
 		{
-			foreach (Attribute a in AttributeSections) {
+			foreach (Attribute a in Attrs) {
 				if (a.Target == null)
 					continue;
 
-				bool valid_target = false;
-				for (int i = 0; i < possible_targets.Length; ++i) {
-					if (a.Target == possible_targets [i]) {
-						valid_target = true;
-						break;
-					}
-				}
-
-				if (valid_target)
+				if (((IList) possible_targets).Contains (a.Target))
 					continue;
 
 				StringBuilder sb = new StringBuilder ();
@@ -1130,22 +1115,26 @@
 			}
 		}
 
-		public Attribute Search (Type t, DeclSpace ds)
+		private Attribute Search (Type t, DeclSpace ds, bool complain)
 		{
-			foreach (Attribute attr_section in AttributeSections) {
-				if (attr_section.ResolveType (ds, false) == t)
-					return attr_section;
+			foreach (Attribute a in Attrs) {
+				if (a.ResolveType (ds, complain) == t)
+					return a;
 			}
 			return null;
 		}
 
+		public Attribute Search (Type t, DeclSpace ds)
+		{
+			return Search (t, ds, true);
+		}
+
 		public void Emit (EmitContext ec, Attributable ias)
 		{
 			ListDictionary ld = new ListDictionary ();
 
-			foreach (Attribute a in AttributeSections) {
+			foreach (Attribute a in Attrs)
 				a.Emit (ec, ias, ld);
-			}
 		}
 
 		public bool Contains (Type t, DeclSpace ds)
@@ -1155,8 +1144,25 @@
 
 		public Attribute GetClsCompliantAttribute (DeclSpace ds)
 		{
-			return Search (TypeManager.cls_compliant_attribute_type, ds);
+			return Search (TypeManager.cls_compliant_attribute_type, ds, false);
 		}
+
+		/// <summary>
+		/// Pulls the IndexerName attribute from an Indexer if it exists.
+		/// </summary>
+		public string ScanForIndexerName (EmitContext ec)
+		{
+			Attribute a = Search (TypeManager.indexer_name_type, ec.DeclSpace);
+			if (a == null)
+				return null;
+
+			// Remove the attribute from the list
+			//TODO: It is very close to hack and it can crash here
+			Attrs.Remove (a);
+
+			return a.IndexerName_GetIndexerName (ec);
+		}
+
 	}
 
 	/// <summary>
Index: class.cs
===================================================================
RCS file: /cvs/public/mcs/mcs/class.cs,v
retrieving revision 1.436
diff -u -u -r1.436 class.cs
--- class.cs 18 May 2004 18:28:40 -0000 1.436
+++ class.cs 19 May 2004 11:53:02 -0000
@@ -427,7 +427,7 @@
 			}
 			
 			base.ApplyAttributeBuilder (a, cb);
-			} 
+		} 
 
 		public override AttributeTargets AttributeTargets {
 			get {
@@ -1001,12 +1001,6 @@
 
 			// Invariant maintained by AddIndexer(): All explicit interface indexers precede normal indexers
 			bool seen_normal_indexers = false;
-			foreach (Indexer i in Indexers) {
-				if (i.ExplicitInterfaceName == null)
-					seen_normal_indexers = true;
-				else if (seen_normal_indexers)
-					throw new Exception ("Internal Error: 'Indexers' array not sorted properly.");
-			}
 
 			foreach (Indexer i in Indexers) {
 				string name;
@@ -1015,20 +1009,19 @@
 
 				name = i.IndexerName;
 
-				if (i.InterfaceType != null)
+				if (i.InterfaceType != null) {
+					if (seen_normal_indexers)
+						throw new Exception ("Internal Error: 'Indexers' array not sorted properly.");
 					continue;
+				}
+
+				seen_normal_indexers = true;
 
-				if (class_indexer_name == null){
+				if (class_indexer_name == null)
 					class_indexer_name = name;
-					continue;
-				}
-				
-				if (name == class_indexer_name)
-					continue;
-				
-				Report.Error (
-					668, "Two indexers have different names, " +
-					" you should use the same name for all your indexers");
+				else if (name != class_indexer_name)
+					Report.Error (668, "Two indexers have different names, " +
+						      " you should use the same name for all your indexers");
 			}
 
 			if (seen_normal_indexers && class_indexer_name == null)
@@ -3495,10 +3488,10 @@
 
 		public virtual bool ApplyAttributes (Attributes opt_attrs, bool is_method, DeclSpace ds)
 		{
-			if ((opt_attrs == null) || (opt_attrs.AttributeSections == null))
+			if ((opt_attrs == null) || (opt_attrs.Attrs == null))
 				return true;
 
-			foreach (Attribute a in opt_attrs.AttributeSections) {
+			foreach (Attribute a in opt_attrs.Attrs) {
 					Type attr_type = a.ResolveType (ds, true);
 					if (attr_type == TypeManager.conditional_attribute_type) {
 						if (!ApplyConditionalAttribute (a))
@@ -4676,7 +4669,7 @@
 		public class SetMethod: PropertyMethod {
 
 			static string[] attribute_targets = new string [] { "method", "param", "return" };
-			ParameterAtribute param_attr;
+			ImplicitParameter param_attr;
 
 			public SetMethod (MethodCore method, Accessor accessor):
 				base (method, accessor)
@@ -4687,7 +4680,7 @@
 			{
 				if (a.Target == "param") {
 					if (param_attr == null)
-						param_attr = new ParameterAtribute (method_data.MethodBuilder);
+						param_attr = new ImplicitParameter (method_data.MethodBuilder);
 
 					param_attr.ApplyAttributeBuilder (a, cb);
 					return;
@@ -5422,7 +5415,7 @@
 			protected MethodData method_data;
 			Block block;
 			ReturnParameter return_attributes;
-			ParameterAtribute param_attr;
+			ImplicitParameter param_attr;
 
 			static string[] attribute_targets = new string [] { "method", "param", "return" };
 
@@ -5451,7 +5444,7 @@
 
 				if (a.Target == "param") {
 					if (param_attr == null)
-						param_attr = new ParameterAtribute (method_data.MethodBuilder);
+						param_attr = new ImplicitParameter (method_data.MethodBuilder);
 
 					param_attr.ApplyAttributeBuilder (a, cb);
 					return;
@@ -5822,7 +5815,9 @@
 			if (!DoDefine (container))
 				return false;
 
-			IndexerName = Attribute.ScanForIndexerName (ec, OptAttributes);
+			if (OptAttributes != null)
+				IndexerName = OptAttributes.ScanForIndexerName (ec);
+
 			if (IndexerName == null)
 				IndexerName = "Item";
 			else {
@@ -5833,9 +5828,7 @@
 				
 				if (IsExplicitImpl) {
 					Report.Error (592, Location,
-						      "Attribute 'IndexerName' is not valid on explicit " +
-						      "implementations.");
-					
+						      "Attribute 'IndexerName' is not valid on explicit implementations.");
 					return false;
 				}
 			}
Index: codegen.cs
===================================================================
RCS file: /cvs/public/mcs/mcs/codegen.cs,v
retrieving revision 1.152
diff -u -u -r1.152 codegen.cs
--- codegen.cs 18 May 2004 18:28:40 -0000 1.152
+++ codegen.cs 19 May 2004 11:53:03 -0000
@@ -846,17 +846,19 @@
 			is_cls_compliant = a.GetClsCompliantAttributeValue (null);
 		}
 
-		//TODO: this code is buggy because compare Attribute name without resolve is wrong
 		public AssemblyName GetAssemblyName (string name, string output) 
 		{
 			if (OptAttributes != null) {
-				foreach (Attribute a in OptAttributes.AttributeSections) {
+				foreach (Attribute a in OptAttributes.Attrs) {
 					if (a.Target != "assembly")
 						continue;
-					// strongname attributes don't support AllowMultiple
-					//Attribute a = (Attribute) asect.Attributes [0];
+					// TODO: This code is buggy: comparing Attribute name without resolving it is wrong.
+					//       However, this is invoked by CodeGen.Init, at which time none of the namespaces
+					//       are loaded yet.
 					switch (a.Name) {
 						case "AssemblyKeyFile":
+						case "AssemblyKeyFileAttribute":
+						case "System.Reflection.AssemblyKeyFileAttribute":
 							if (RootContext.StrongNameKeyFile != null) {
 								Report.Warning (1616, "Compiler option -keyfile overrides " +
 									"AssemblyKeyFileAttribute");
@@ -868,6 +870,8 @@
 							}
 							break;
 						case "AssemblyKeyName":
+						case "AssemblyKeyNameAttribute":
+						case "System.Reflection.AssemblyKeyNameAttribute":
 							if (RootContext.StrongNameKeyContainer != null) {
 								Report.Warning (1616, "Compiler option -keycontainer overrides " +
 									"AssemblyKeyNameAttribute");
@@ -879,6 +883,8 @@
 							}
 							break;
 						case "AssemblyDelaySign":
+						case "AssemblyDelaySignAttribute":
+						case "System.Reflection.AssemblyDelaySignAttribute":
 							RootContext.StrongNameDelaySign = a.GetBoolean ();
 							break;
 					}
Index: cs-parser.jay
===================================================================
RCS file: /cvs/public/mcs/mcs/cs-parser.jay,v
retrieving revision 1.295
diff -u -u -r1.295 cs-parser.jay
--- cs-parser.jay 18 May 2004 18:28:40 -0000 1.295
+++ cs-parser.jay 19 May 2004 11:53:03 -0000
@@ -568,7 +568,8 @@
 	  }
 	  opt_attribute_arguments
 	  {
-		if (current_attr_target == "assembly" || current_attr_target == "module")
+		if (current_attr_target == "assembly" || current_attr_target == "module"
+		    || (global_attrs_enabled && current_attr_target == null))
 			$$ = new GlobalAttribute (current_container, current_attr_target, (string) ($1).ToString (), (ArrayList) $3, (Location) $2);
 		else
 			$$ = new Attribute (current_attr_target, (string) ($1).ToString (), (ArrayList) $3, (Location) $2);
Index: parameter.cs
===================================================================
RCS file: /cvs/public/mcs/mcs/parameter.cs,v
retrieving revision 1.52
diff -u -u -r1.52 parameter.cs
--- parameter.cs 18 May 2004 18:28:40 -0000 1.52
+++ parameter.cs 19 May 2004 11:53:03 -0000
@@ -90,11 +90,11 @@
 	}
 
 	/// <summary>
-	/// Class for applying custom attributes on the parameter type.
-	/// ! Now it works only with 1st parameter (for properties and events)
+	/// Class for applying custom attributes on the implicit parameter type
+	/// of the 'set' method in properties, and the 'add' and 'remove' methods in events.
 	/// </summary>
-	public class ParameterAtribute: ParameterBase {
-		public ParameterAtribute (MethodBuilder mb):
+	public class ImplicitParameter: ParameterBase {
+		public ImplicitParameter (MethodBuilder mb):
 			base (null)
 		{
 			builder = mb.DefineParameter (1, ParameterAttributes.None, "");			
