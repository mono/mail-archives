diff -ru mono-0.91-orig/mono/metadata/icall.c mono-0.91/mono/metadata/icall.c
--- mono-0.91-orig/mono/metadata/icall.c	2004-05-04 21:51:24.000000000 +0200
+++ mono-0.91/mono/metadata/icall.c	2004-05-18 23:22:09.941065750 +0200
@@ -3044,7 +3044,7 @@
 ves_icall_System_Reflection_Assembly_load_with_partial_name (MonoString *mname, MonoObject *evidence)
 {
 	gchar *name;
-	MonoReflectionAssembly *res;
+	MonoAssembly *res;
 	MonoImageOpenStatus status;
 	
 	MONO_ARCH_SAVE_REGS;
@@ -4475,19 +4475,19 @@
 	/* g_print ("charset: %s\n", cset); */
 	
 	/* handle some common aliases */
-	p = encodings [0];
+	p = (char *)encodings [0];
 	code = 0;
 	for (i = 0; p != 0; ){
 		if ((int) p < 7){
 			code = (int) p;
-			p = encodings [++i];
+			p = (char *)encodings [++i];
 			continue;
 		}
 		if (strcmp (p, codepage) == 0){
 			*int_code_page = code;
 			break;
 		}
-		p = encodings [++i];
+		p = (char *)encodings [++i];
 	}
 	
 	if (p - codepage > 5){
@@ -4843,8 +4843,10 @@
 		return;
 	mono_lookup_pinvoke_call (method, &exc_class, &exc_arg);
 	if (exc_class) {
-		mono_raise_exception( 
-			mono_exception_from_name_msg (mono_defaults.corlib, "System", exc_class, exc_arg ) );
+		MonoException *exc = mono_exception_from_name_msg (mono_defaults.corlib, "System", exc_class, exc_arg );
+		if(getenv("MONO_DEBUG"))
+			g_free((gpointer)exc_arg);
+		mono_raise_exception (exc);
 	}
 	/* create the wrapper, too? */
 }
@@ -4869,10 +4871,10 @@
 }
 
 static void
-ves_icall_System_Char_GetDataTablePointers (guint8 **category_data, guint8 **numeric_data,
-		gdouble **numeric_data_values, guint16 **to_lower_data_low,
-		guint16 **to_lower_data_high, guint16 **to_upper_data_low,
-		guint16 **to_upper_data_high)
+ves_icall_System_Char_GetDataTablePointers (const guint8 **category_data, const guint8 **numeric_data,
+		const gdouble **numeric_data_values, const guint16 **to_lower_data_low,
+		const guint16 **to_lower_data_high, const guint16 **to_upper_data_low,
+		const guint16 **to_upper_data_high)
 {
 	*category_data = CategoryData;
 	*numeric_data = NumericData;
diff -ru mono-0.91-orig/mono/metadata/loader.c mono-0.91/mono/metadata/loader.c
--- mono-0.91-orig/mono/metadata/loader.c	2004-04-15 16:51:58.000000000 +0200
+++ mono-0.91/mono/metadata/loader.c	2004-05-19 00:10:22.361680696 +0200
@@ -316,8 +316,6 @@
 		mono_metadata_free_method_signature (sig);
 		return method;
 	case MEMBERREF_PARENT_TYPESPEC: {
-		guint32 bcols [MONO_TYPESPEC_SIZE];
-		guint32 len;
 		MonoType *type;
 		MonoMethod *result;
 		MonoClass *klass;
@@ -550,6 +548,57 @@
 
 static int wine_test_needed = 1;
 
+GModule *
+mono_module_open(const gchar *filename, GString *errors)
+{
+	GModule *module;
+
+	module = g_module_open (filename, G_MODULE_BIND_LAZY);
+    
+	if(errors) {
+		if( errors->len )
+			g_string_append (errors, " ==> ");
+    
+		g_string_append (errors, "Trying '");
+		g_string_append (errors, filename);
+		g_string_append (errors, "': ");
+		if( !module ) {
+			g_string_append (errors, g_module_error());
+		} else {
+			g_string_append (errors, "loaded.");
+		}
+	}
+
+	return module;
+}
+    
+gboolean
+mono_module_symbol(GModule *module, const gchar *symbolname, 
+		   gpointer *symbol, GString *errors)
+{
+	gboolean ret;
+
+	g_assert (symbol != NULL);
+
+	ret = g_module_symbol (module, symbolname, symbol); 
+    
+	if(errors) {
+		if( errors->len )
+			g_string_append (errors, " ==> ");
+    
+		g_string_append (errors, "Searching function '");
+		g_string_append (errors, symbolname);
+		g_string_append (errors, "': ");
+		if( !*symbol ) {
+			g_string_append (errors, g_module_error());
+		} else {
+			g_string_append (errors, "found.");
+		}
+	}
+
+	return ret;
+}
+
 gpointer
 mono_lookup_pinvoke_call (MonoMethod *method, const char **exc_class, const char **exc_arg)
 {
@@ -566,6 +615,7 @@
 	char *full_name, *file_name;
 	int i;
 	GModule *gmodule = NULL;
+	GString *errors = NULL;
 
 	g_assert (method->flags & METHOD_ATTRIBUTE_PINVOKE_IMPL);
 
@@ -596,6 +646,10 @@
 		wine_test_needed = 0;
 	}
 	
+	// Enable detailed error reporting
+	if(getenv("MONO_DEBUG") && exc_class)
+		errors = g_string_new("");
+	
 	/*
 	 * Try loading the module using a variety of names
 	 */
@@ -615,18 +669,18 @@
 
 		if (!gmodule) {
 			full_name = g_module_build_path (NULL, file_name);
-			gmodule = g_module_open (full_name, G_MODULE_BIND_LAZY);
+			gmodule = mono_module_open (full_name, errors);
 			g_free (full_name);
 		}
 
 		if (!gmodule) {
 			full_name = g_module_build_path (".", file_name);
-			gmodule = g_module_open (full_name, G_MODULE_BIND_LAZY);
+			gmodule = mono_module_open (full_name, errors);
 			g_free (full_name);
 		}
 
 		if (!gmodule) {
-			gmodule=g_module_open (file_name, G_MODULE_BIND_LAZY);
+			gmodule = mono_module_open (file_name, errors);
 		}
 
 		g_free (file_name);
@@ -636,41 +690,43 @@
 	}
 
 	if (!gmodule) {
-		gchar *error = g_strdup (g_module_error ());
-
 		if (exc_class) {
 			*exc_class = "DllNotFoundException";
-			*exc_arg = orig_scope;
+			if (errors) {
+				*exc_arg = errors->str;
+				g_string_free (errors, FALSE);
+			}
+			else
+				*exc_arg = orig_scope;
 		}
-		g_free (error);
 		return NULL;
 	}
 
 	if (piinfo->piflags & PINVOKE_ATTRIBUTE_NO_MANGLE) {
-		g_module_symbol (gmodule, import, &method->addr); 
+		mono_module_symbol (gmodule, import, &method->addr, errors); 
 	} else {
 		char *mangled_name;
 
 		switch (piinfo->piflags & PINVOKE_ATTRIBUTE_CHAR_SET_MASK) {
 		case PINVOKE_ATTRIBUTE_CHAR_SET_UNICODE:
 			mangled_name = g_strconcat (import, "W", NULL);
-			g_module_symbol (gmodule, mangled_name, &method->addr); 
+			mono_module_symbol (gmodule, mangled_name, &method->addr, errors); 
 			g_free (mangled_name);
 
 			if (!method->addr)
-				g_module_symbol (gmodule, import, &method->addr); 
+				mono_module_symbol (gmodule, import, &method->addr, errors); 
 			break;
 		case PINVOKE_ATTRIBUTE_CHAR_SET_AUTO:
-			g_module_symbol (gmodule, import, &method->addr); 
+			mono_module_symbol (gmodule, import, &method->addr, errors); 
 			break;
 		case PINVOKE_ATTRIBUTE_CHAR_SET_ANSI:
 		default:
 			mangled_name = g_strconcat (import, "A", NULL);
-			g_module_symbol (gmodule, mangled_name, &method->addr); 
+			mono_module_symbol (gmodule, mangled_name, &method->addr, errors); 
 			g_free (mangled_name);
 
 			if (!method->addr)
-				g_module_symbol (gmodule, import, &method->addr); 
+				mono_module_symbol (gmodule, import, &method->addr, errors); 
 			       
 			break;					
 		}
@@ -679,10 +735,19 @@
 	if (!method->addr) {
 		if (exc_class) {
 			*exc_class = "EntryPointNotFoundException";
-			*exc_arg = import;
+			if (errors) {
+				*exc_arg = errors->str;
+				g_string_free (errors, FALSE);
+			}
+			else
+				*exc_arg = import;
 		}
 		return NULL;
 	}
+
+	if( errors )
+		g_string_free (errors, TRUE);
+	
 	return method->addr;
 }
 
@@ -856,7 +921,6 @@
 {
 	MonoMethod *method, *result;
 	MonoClass *ic = NULL;
-	int i;
 
 	mono_loader_lock ();
 
@@ -1110,14 +1174,14 @@
 mono_loader_wine_init ()
 {
 	GModule *module = g_module_open ("winelib.exe.so", G_MODULE_BIND_LAZY);
-	int (*shared_wine_init)();
+	int (*shared_wine_init)(void);
 
 	if (module == NULL){
 		fprintf (stderr, "Could not load winelib.exe.so");
 		return;
 	}
 
-	g_module_symbol (module, "SharedWineInit", &shared_wine_init);
+	g_module_symbol (module, "SharedWineInit", (gpointer *) &shared_wine_init);
 	if (shared_wine_init == NULL)
 		return;
 
diff -ru mono-0.91-orig/mono/metadata/loader.h mono-0.91/mono/metadata/loader.h
--- mono-0.91-orig/mono/metadata/loader.h	2004-04-26 22:38:12.000000000 +0200
+++ mono-0.91/mono/metadata/loader.h	2004-05-18 23:49:17.825984824 +0200
@@ -167,6 +167,13 @@
 void
 mono_dllmap_insert (MonoImage *assembly, const char *dll, const char *func, const char *tdll, const char *tfunc);
 
+GModule *
+mono_module_open(const char *filename, GString *errors);
+
+gboolean
+mono_module_symbol(GModule *module, const gchar *symbolname, 
+		   gpointer *symbol, GString *errors);
+
 gpointer
 mono_lookup_pinvoke_call (MonoMethod *method, const char **exc_class, const char **exc_arg);
 
