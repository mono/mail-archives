Index: System/ChangeLog
===================================================================
--- System/ChangeLog	(revision 104677)
+++ System/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2008-06-02  Andreas Nahr <ClassDevelopment@A-SoftTech.com>
+
+	* String.cs: Managed replacement for Replace method ;)
+
 2008-06-01  Juraj Skripsky  <js@hotfeet.ch>
 
 	* String.cs (Substring): Blocking bug #395904 has been fixed,
Index: System/String.cs
===================================================================
--- System/String.cs	(revision 104677)
+++ System/String.cs	(working copy)
@@ -1579,7 +1579,7 @@
 			return culture.CompareInfo.IsPrefix (this, value, ignoreCase ? CompareOptions.IgnoreCase : CompareOptions.None);
 		}
 
-		/* This method is culture insensitive */
+		// Following method is culture-insensitive
 		public unsafe String Replace (char oldChar, char newChar)
 		{
 			if (this.length == 0 || oldChar == newChar)
@@ -1592,10 +1592,10 @@
 			if (start_pos < 4)
 				start_pos = 0;
 
-			string tmp = InternalAllocateStr(length);
+			string tmp = InternalAllocateStr (length);
 			fixed (char* dest = tmp, src = &start_char) {
 				if (start_pos != 0)
-					memcpy((byte*)dest, (byte*)src, start_pos * 2);
+					CharCopy (dest, src, start_pos);
 
 				char* end_ptr = dest + length;
 				char* dest_ptr = dest + start_pos;
@@ -1614,9 +1614,12 @@
 			return tmp;
 		}
 
-		/* This method is culture sensitive */
+		// culture-insensitive using ordinal search (See testcase StringTest.ReplaceStringCultureTests)
 		public String Replace (String oldValue, String newValue)
 		{
+			// LAMESPEC: According to docs the following method is culture-sensitive but this seems to be incorrect
+			// LAMESPEC: Result is undefined if result length is longer than maximum string length
+
 			if (oldValue == null)
 				throw new ArgumentNullException ("oldValue");
 
@@ -1629,9 +1632,72 @@
 			if (newValue == null)
 				newValue = String.Empty;
 
-			return InternalReplace (oldValue, newValue, CultureInfo.CurrentCulture.CompareInfo);
+			return ReplaceUnchecked (oldValue, newValue);
 		}
 
+		private unsafe String ReplaceUnchecked (String oldValue, String newValue)
+		{
+			if (oldValue.length > length)
+				return this;
+			if (oldValue.length == 1 && newValue.length == 1) {
+				return Replace (oldValue[0], newValue[0]);
+				// ENHANCE: It would be possible to special case oldValue.length == newValue.length
+				// because the length of the result would be this.length and length calculation unneccesary
+			}
+
+			const int maxValue = 200; // Allocate 800 byte maximum
+			int* dat = stackalloc int[maxValue];
+			fixed (char* source = this, replace = newValue) {
+				int i = 0, count = 0;
+				while (i < length) {
+					int found = IndexOfOrdinalUnchecked (oldValue, i, length - i);
+					if (found < 0)
+						break;
+					else {
+						if (count <= maxValue)
+							dat[count++] = found;
+						else
+							return ReplaceFallback (oldValue, newValue, maxValue);
+					}
+					i = found + oldValue.length;
+				}
+				int nlen = this.length + ((newValue.length - oldValue.length) * count);
+				String tmp = InternalAllocateStr (nlen);
+
+				int curPos = 0, lastReadPos = 0;
+				fixed (char* dest = tmp) {
+					for (int j = 0; j < count; j++) {
+						int precopy = dat[j] - lastReadPos;
+						CharCopy (dest + curPos, source + lastReadPos, precopy);
+						curPos += precopy;
+						lastReadPos = dat[j] + oldValue.length;
+						CharCopy (dest + curPos, replace, newValue.length);
+						curPos += newValue.length;
+					}
+					CharCopy (dest + curPos, source + lastReadPos, length - lastReadPos);
+				}
+				return tmp;
+			}
+		}
+
+		private String ReplaceFallback (String oldValue, String newValue, int testedCount)
+		{
+			int lengthEstimate = this.length + ((newValue.length - oldValue.length) * testedCount);
+			StringBuilder sb = new StringBuilder (lengthEstimate);
+			for (int i = 0; i < length;) {
+				int found = IndexOfOrdinalUnchecked (oldValue, i, length - i);
+				if (found < 0) {
+					sb.Append (SubstringUnchecked (i, length - i));
+					break;
+				}
+				sb.Append (SubstringUnchecked (i, found - i));
+				sb.Append (newValue);
+				i = found + oldValue.Length;
+			}
+			return sb.ToString ();
+
+		}
+
 		public unsafe String Remove (int startIndex, int count)
 		{
 			if (startIndex < 0)
Index: Test/System/ChangeLog
===================================================================
--- Test/System/ChangeLog	(revision 104677)
+++ Test/System/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2008-06-02  Andreas Nahr <ClassDevelopment@A-SoftTech.com>
+
+	* StringTest.cs: More tests for replace method, also uncomment now-working IndexOf-Tests
+
 2008-06-01  Juraj Skripsky  <js@hotfeet.ch>
 
 	* StringTest.cs (Substring2): Blocking bug #395904 has been fixed,
@@ -3,5 +7,5 @@
 	re-enable test. 
 
-2008-05-24  Andreas Nahr <ClassDevelopment@A-SoftTech.com>
+2008-06-01  Andreas Nahr <ClassDevelopment@A-SoftTech.com>
 
 	* StringTest.cs: Comment out a test that currently fails by checking for
Index: Test/System/StringTest.cs
===================================================================
--- Test/System/StringTest.cs	(revision 104677)
+++ Test/System/StringTest.cs	(working copy)
@@ -1435,7 +1435,7 @@
 		AssertEquals ("#A6", 12, s.IndexOf ("6", comparison_type));
 		AssertEquals ("#A7", 3, s.IndexOf ("tin", comparison_type));
 		AssertEquals ("#A8", -1, s.IndexOf ("TIN", comparison_type));
-		//AssertEquals ("#A9", 0, s.IndexOf (string.Empty, comparison_type));
+		AssertEquals ("#A9", 0, s.IndexOf (string.Empty, comparison_type));
 
 		comparison_type = StringComparison.CurrentCultureIgnoreCase;
 		AssertEquals ("#B1", 7, s.IndexOf ("123", comparison_type));
@@ -1446,7 +1446,7 @@
 		AssertEquals ("#B6", 12, s.IndexOf ("6", comparison_type));
 		AssertEquals ("#B7", 3, s.IndexOf ("tin", comparison_type));
 		AssertEquals ("#B8", -1, s.IndexOf ("TIN", comparison_type));
-		//AssertEquals ("#B9", 0, s.IndexOf (string.Empty, comparison_type));
+		AssertEquals ("#B9", 0, s.IndexOf (string.Empty, comparison_type));
 
 		comparison_type = StringComparison.InvariantCulture;
 		AssertEquals ("#C1", 7, s.IndexOf ("123", comparison_type));
@@ -1457,7 +1457,7 @@
 		AssertEquals ("#C6", 12, s.IndexOf ("6", comparison_type));
 		AssertEquals ("#C7", 3, s.IndexOf ("tin", comparison_type));
 		AssertEquals ("#C8", -1, s.IndexOf ("TIN", comparison_type));
-		//AssertEquals ("#C9", 0, s.IndexOf (string.Empty, comparison_type));
+		AssertEquals ("#C9", 0, s.IndexOf (string.Empty, comparison_type));
 
 		comparison_type = StringComparison.InvariantCultureIgnoreCase;
 		AssertEquals ("#D1", 7, s.IndexOf ("123", comparison_type));
@@ -1468,7 +1468,7 @@
 		AssertEquals ("#D6", 12, s.IndexOf ("6", comparison_type));
 		AssertEquals ("#D7", 3, s.IndexOf ("tin", comparison_type));
 		AssertEquals ("#D8", 3, s.IndexOf ("TIN", comparison_type));
-		//AssertEquals ("#D9", 0, s.IndexOf (string.Empty, comparison_type));
+		AssertEquals ("#D9", 0, s.IndexOf (string.Empty, comparison_type));
 
 		comparison_type = StringComparison.Ordinal;
 		AssertEquals ("#E1", 7, s.IndexOf ("123", comparison_type));
@@ -1479,7 +1479,7 @@
 		AssertEquals ("#E6", 12, s.IndexOf ("6", comparison_type));
 		AssertEquals ("#E7", 3, s.IndexOf ("tin", comparison_type));
 		AssertEquals ("#E8", -1, s.IndexOf ("TIN", comparison_type));
-		//AssertEquals ("#E9", 0, s.IndexOf (string.Empty, comparison_type));
+		AssertEquals ("#E9", 0, s.IndexOf (string.Empty, comparison_type));
 
 		comparison_type = StringComparison.OrdinalIgnoreCase;
 		AssertEquals ("#F1", 7, s.IndexOf ("123", comparison_type));
@@ -1490,7 +1490,7 @@
 		AssertEquals ("#F6", 12, s.IndexOf ("6", comparison_type));
 		AssertEquals ("#F7", 3, s.IndexOf ("tin", comparison_type));
 		AssertEquals ("#F8", 3, s.IndexOf ("TIN", comparison_type));
-		//AssertEquals ("#F9", 0, s.IndexOf (string.Empty, comparison_type));
+		AssertEquals ("#F9", 0, s.IndexOf (string.Empty, comparison_type));
 
 		Thread.CurrentThread.CurrentCulture = new CultureInfo ("en-US");
 
@@ -1503,7 +1503,7 @@
 		AssertEquals ("#G6", 12, s.IndexOf ("6", comparison_type));
 		AssertEquals ("#G7", 3, s.IndexOf ("tin", comparison_type));
 		AssertEquals ("#G8", -1, s.IndexOf ("TIN", comparison_type));
-		//AssertEquals ("#G9", 0, s.IndexOf (string.Empty, comparison_type));
+		AssertEquals ("#G9", 0, s.IndexOf (string.Empty, comparison_type));
 
 		comparison_type = StringComparison.CurrentCultureIgnoreCase;
 		AssertEquals ("#H1", 7, s.IndexOf ("123", comparison_type));
@@ -1514,7 +1514,7 @@
 		AssertEquals ("#H6", 12, s.IndexOf ("6", comparison_type));
 		AssertEquals ("#H7", 3, s.IndexOf ("tin", comparison_type));
 		AssertEquals ("#H8", 3, s.IndexOf ("TIN", comparison_type));
-		//AssertEquals ("#H9", 0, s.IndexOf (string.Empty, comparison_type));
+		AssertEquals ("#H9", 0, s.IndexOf (string.Empty, comparison_type));
 
 		comparison_type = StringComparison.InvariantCulture;
 		AssertEquals ("#I1", 7, s.IndexOf ("123", comparison_type));
@@ -1525,7 +1525,7 @@
 		AssertEquals ("#I6", 12, s.IndexOf ("6", comparison_type));
 		AssertEquals ("#I7", 3, s.IndexOf ("tin", comparison_type));
 		AssertEquals ("#I8", -1, s.IndexOf ("TIN", comparison_type));
-		//AssertEquals ("#I9", 0, s.IndexOf (string.Empty, comparison_type));
+		AssertEquals ("#I9", 0, s.IndexOf (string.Empty, comparison_type));
 
 		comparison_type = StringComparison.InvariantCultureIgnoreCase;
 		AssertEquals ("#J1", 7, s.IndexOf ("123", comparison_type));
@@ -1536,7 +1536,7 @@
 		AssertEquals ("#J6", 12, s.IndexOf ("6", comparison_type));
 		AssertEquals ("#J7", 3, s.IndexOf ("tin", comparison_type));
 		AssertEquals ("#J8", 3, s.IndexOf ("TIN", comparison_type));
-		//AssertEquals ("#J9", 0, s.IndexOf (string.Empty, comparison_type));
+		AssertEquals ("#J9", 0, s.IndexOf (string.Empty, comparison_type));
 
 		comparison_type = StringComparison.Ordinal;
 		AssertEquals ("#K1", 7, s.IndexOf ("123", comparison_type));
@@ -1547,7 +1547,7 @@
 		AssertEquals ("#K6", 12, s.IndexOf ("6", comparison_type));
 		AssertEquals ("#K7", 3, s.IndexOf ("tin", comparison_type));
 		AssertEquals ("#K8", -1, s.IndexOf ("TIN", comparison_type));
-		//AssertEquals ("#K9", 0, s.IndexOf (string.Empty, comparison_type));
+		AssertEquals ("#K9", 0, s.IndexOf (string.Empty, comparison_type));
 
 		comparison_type = StringComparison.OrdinalIgnoreCase;
 		AssertEquals ("#L1", 7, s.IndexOf ("123", comparison_type));
@@ -1558,9 +1558,9 @@
 		AssertEquals ("#L6", 12, s.IndexOf ("6", comparison_type));
 		AssertEquals ("#L7", 3, s.IndexOf ("tin", comparison_type));
 		AssertEquals ("#L8", 3, s.IndexOf ("TIN", comparison_type));
-		//AssertEquals ("#L9", 0, s.IndexOf (string.Empty, comparison_type));
+		AssertEquals ("#L9", 0, s.IndexOf (string.Empty, comparison_type));
 
-		//AssertEquals ("#M", 0, string.Empty.IndexOf (string.Empty, comparison_type));
+		AssertEquals ("#M", 0, string.Empty.IndexOf (string.Empty, comparison_type));
 	}
 
 	[Test] // IndexOf (String, StringComparison)
@@ -3226,6 +3226,53 @@
 	}
 
 	[Test]
+	public void ReplaceStringBeginEndTest ()
+	{
+		string s1 = "original";
+
+		AssertEquals ("#1", "riginal", s1.Replace ("o", ""));
+		AssertEquals ("#2", "origina", s1.Replace ("l", ""));
+		AssertEquals ("#3", "ariginal", s1.Replace ("o", "a"));
+		AssertEquals ("#4", "originaa", s1.Replace ("l", "a"));
+		AssertEquals ("#5", "aariginal", s1.Replace ("o", "aa"));
+		AssertEquals ("#6", "originaaa", s1.Replace ("l", "aa"));
+		AssertEquals ("#7", "original", s1.Replace ("o", "o"));
+		AssertEquals ("#8", "original", s1.Replace ("l", "l"));
+		AssertEquals ("#9", "original", s1.Replace ("original", "original"));
+		AssertEquals ("#10", "", s1.Replace ("original", ""));
+	}
+
+	[Test]
+	public void ReplaceStringBeginEndTestFallback ()
+	{
+		string prev = new String ('o', 300);
+		string s1 = prev + "riginal";
+
+		AssertEquals ("#1", "riginal", s1.Replace ("o", ""));
+		AssertEquals ("#2", prev + "rigina", s1.Replace ("l", ""));
+		AssertEquals ("#3", new String ('a', 300) + "riginal", s1.Replace ("o", "a"));
+		AssertEquals ("#4", prev + "riginaa", s1.Replace ("l", "a"));
+		AssertEquals ("#5", new String ('a', 600) + "riginal", s1.Replace ("o", "aa"));
+		AssertEquals ("#6", prev + "riginaaa", s1.Replace ("l", "aa"));
+		AssertEquals ("#7", s1, s1.Replace ("o", "o"));
+		AssertEquals ("#8", s1, s1.Replace ("l", "l"));
+		AssertEquals ("#9", s1, s1.Replace (s1, s1));
+	}
+
+	[Test]
+	public void ReplaceStringCultureTests ()
+	{
+		// LAMESPEC: According to docs Replace with String parameter is culture-senstive.
+		// However this does not currently seem to be the case. Otherwise following code should
+		// produce "check" instead of "AE"
+
+		CultureInfo old = Thread.CurrentThread.CurrentCulture;
+		Thread.CurrentThread.CurrentCulture = new CultureInfo ("en-US");
+		AssertEquals ("#1", "AE", "AE".Replace ("\u00C6", "check"));
+		Thread.CurrentThread.CurrentCulture = old;
+	}
+
+	[Test]
 	public void TestSplit ()
 	{
 		string s1 = "abcdefghijklm";
