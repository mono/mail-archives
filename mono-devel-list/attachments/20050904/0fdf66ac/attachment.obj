Index: bmcs/generic.cs
===================================================================
--- bmcs/generic.cs	(revision 49404)
+++ bmcs/generic.cs	(working copy)
@@ -33,7 +33,7 @@
 		}
 
 		public bool HasValueTypeConstraint {
-			get { return (Attributes & GenericParameterAttributes.ValueTypeConstraint) != 0; }
+			get { return (Attributes & GenericParameterAttributes.NotNullableValueTypeConstraint) != 0; }
 		}
 
 		public virtual bool HasClassConstraint {
@@ -195,7 +195,7 @@
 					if (sc == SpecialConstraint.ReferenceType)
 						attrs |= GenericParameterAttributes.ReferenceTypeConstraint;
 					else
-						attrs |= GenericParameterAttributes.ValueTypeConstraint;
+						attrs |= GenericParameterAttributes.NotNullableValueTypeConstraint;
 					continue;
 				}
 
@@ -1733,7 +1733,7 @@
 			if (tc != null)
 				return tc.IsGeneric ? tc.CountTypeParameters : 0;
 			else
-				return t.HasGenericArguments ? t.GetGenericArguments ().Length : 0;
+				return t.IsGenericType ? t.GetGenericArguments ().Length : 0;
 		}
 
 		public static Type[] GetTypeArguments (Type t)
@@ -2171,7 +2171,7 @@
 				if (infered_types [i] == null)
 					return false;
 
-			method = method.BindGenericParameters (infered_types);
+			method = ((MethodInfo)method).MakeGenericMethod (infered_types);
 			return true;
 		}
 
@@ -2241,7 +2241,7 @@
 			if (!InferTypeArguments (param_types, arg_types, infered_types))
 				return false;
 
-			method = method.BindGenericParameters (infered_types);
+			method = ((MethodInfo)method).MakeGenericMethod (infered_types);
 			return true;
 		}
 
@@ -2269,7 +2269,7 @@
 			if (!InferTypeArguments (param_types, arg_types, infered_types))
 				return false;
 
-			method = method.BindGenericParameters (infered_types);
+			method = ((MethodInfo)method).MakeGenericMethod (infered_types);
 			return true;
 		}
 
Index: bmcs/ecore.cs
===================================================================
--- bmcs/ecore.cs	(revision 49404)
+++ bmcs/ecore.cs	(working copy)
@@ -2992,7 +2992,7 @@
 				if (gen_params.Length != atypes.Length)
 					continue;
 
-				list.Add (mi.BindGenericParameters (atypes));
+				list.Add (mi.MakeGenericMethod (atypes));
 			}
 
 			if (list.Count > 0) {
Index: bmcs/ChangeLog
===================================================================
--- bmcs/ChangeLog	(revision 49404)
+++ bmcs/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2005-09-04  Kamil Skalski <nazgul@nemerle.org>
+
+	* ecore.cs, generics.cs: Use MakeGenericMethod instead of
+	BindGenericParameters. Use new field names in
+	GenericParameterAttributes.
+
 2005-07-10  Kamil Skalski <nazgul@nemerle.org>
 
 	* generic.cs: Use MakeGenericType instead of BindGenericParameters.
Index: gmcs/generic.cs
===================================================================
--- gmcs/generic.cs	(revision 49404)
+++ gmcs/generic.cs	(working copy)
@@ -33,7 +33,7 @@
 		}
 
 		public bool HasValueTypeConstraint {
-			get { return (Attributes & GenericParameterAttributes.ValueTypeConstraint) != 0; }
+			get { return (Attributes & GenericParameterAttributes.NotNullableValueTypeConstraint) != 0; }
 		}
 
 		public virtual bool HasClassConstraint {
@@ -199,7 +199,7 @@
 					if (sc == SpecialConstraint.ReferenceType)
 						attrs |= GenericParameterAttributes.ReferenceTypeConstraint;
 					else
-						attrs |= GenericParameterAttributes.ValueTypeConstraint;
+						attrs |= GenericParameterAttributes.NotNullableValueTypeConstraint;
 					continue;
 				}
 
@@ -1692,7 +1692,7 @@
 			if (tc != null)
 				return tc.IsGeneric ? tc.CountTypeParameters : 0;
 			else
-				return t.HasGenericArguments ? t.GetGenericArguments ().Length : 0;
+				return t.IsGenericType ? t.GetGenericArguments ().Length : 0;
 		}
 
 		public static Type[] GetTypeArguments (Type t)
@@ -2128,7 +2128,7 @@
 				if (infered_types [i] == null)
 					return false;
 
-			method = method.BindGenericParameters (infered_types);
+			method = ((MethodInfo)method).MakeGenericMethod (infered_types);
 			return true;
 		}
 
@@ -2199,7 +2199,7 @@
 			if (!InferTypeArguments (param_types, arg_types, infered_types))
 				return false;
 
-			method = method.BindGenericParameters (infered_types);
+			method = ((MethodInfo)method).MakeGenericMethod (infered_types);
 			return true;
 		}
 
@@ -2227,7 +2227,7 @@
 			if (!InferTypeArguments (param_types, arg_types, infered_types))
 				return false;
 
-			method = method.BindGenericParameters (infered_types);
+			method = ((MethodInfo)method).MakeGenericMethod (infered_types);
 			return true;
 		}
 
Index: gmcs/ecore.cs
===================================================================
--- gmcs/ecore.cs	(revision 49404)
+++ gmcs/ecore.cs	(working copy)
@@ -3096,7 +3096,7 @@
 				if (gen_params.Length != atypes.Length)
 					continue;
 
-				list.Add (mi.BindGenericParameters (atypes));
+				list.Add (mi.MakeGenericMethod (atypes));
 			}
 
 			if (list.Count > 0) {
Index: gmcs/ChangeLog
===================================================================
--- gmcs/ChangeLog	(revision 49404)
+++ gmcs/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2005-09-04  Kamil Skalski <nazgul@nemerle.org>
+
+        * ecore.cs, generics.cs, anonymous.cs: Use MakeGenericMethod
+	instead of BindGenericParameters. Use new field names in
+        GenericParameterAttributes.
+
 2005-09-02  Martin Baulig  <martin@ximian.com>
 
 	* class.cs: Make CS3005 a warning, not an error.
Index: gmcs/anonymous.cs
===================================================================
--- gmcs/anonymous.cs	(revision 49404)
+++ gmcs/anonymous.cs	(working copy)
@@ -362,7 +362,7 @@
 		{
 			MethodInfo builder = method.MethodData.MethodBuilder;
 			if (TypeArguments != null)
-				return builder.BindGenericParameters (TypeArguments);
+				return builder.MakeGenericMethod (TypeArguments);
 			else
 				return builder;
 		}
Index: class/corlib/System/Type.cs
===================================================================
--- class/corlib/System/Type.cs	(revision 49404)
+++ class/corlib/System/Type.cs	(working copy)
@@ -1081,6 +1081,7 @@
 #if NET_2_0 || BOOTSTRAP_NET_2_0
 		public abstract Type[] GetGenericArguments ();
 
+		[ObsoleteAttribute("HasGenericArguments has been deprecated. Please use IsGenericType instead - this will be removed before Whidbey ships.")]
 		public abstract bool HasGenericArguments {
 			get;
 		}
Index: class/corlib/System/ChangeLog
===================================================================
--- class/corlib/System/ChangeLog	(revision 49404)
+++ class/corlib/System/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2005-09-04  Kamil Skalski  <nazgul@nemerle.org>
+
+	* Type.cs, MonoType.cs: Mark HasGenericArguments obsolete. Use
+	IsGenericType instead of HasGenericArguments.
+
 2005-09-01  Atsushi Enomoto  <atsushi@ximian.com>
 
 	* DateTime.cs : another idiotic COM dependent format.
Index: class/corlib/System/MonoType.cs
===================================================================
--- class/corlib/System/MonoType.cs	(revision 49404)
+++ class/corlib/System/MonoType.cs	(working copy)
@@ -568,6 +568,7 @@
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		public extern override Type [] GetGenericArguments ();
 
+		[ObsoleteAttribute("HasGenericArguments has been deprecated. Please use IsGenericType instead - this will be removed before Whidbey ships.")]
 		public extern override bool HasGenericArguments {
 			[MethodImplAttribute(MethodImplOptions.InternalCall)]
 			get;
@@ -578,7 +579,7 @@
 				if (IsGenericParameter)
 					return true;
 
-				if (HasGenericArguments) {
+				if (IsGenericType) {
 					foreach (Type arg in GetGenericArguments ())
 						if (arg.ContainsGenericParameters)
 							return true;
Index: class/corlib/System.Reflection.Emit/GenericTypeParameterBuilder.cs
===================================================================
--- class/corlib/System.Reflection.Emit/GenericTypeParameterBuilder.cs	(revision 49404)
+++ class/corlib/System.Reflection.Emit/GenericTypeParameterBuilder.cs	(working copy)
@@ -316,6 +316,7 @@
 			throw not_supported ();
 		}
 
+		[ObsoleteAttribute("HasGenericArguments has been deprecated. Please use IsGenericType instead - this will be removed before Whidbey ships.")]
 		public override bool HasGenericArguments {
 			get { return false; }
 		}
Index: class/corlib/System.Reflection.Emit/EnumBuilder.cs
===================================================================
--- class/corlib/System.Reflection.Emit/EnumBuilder.cs	(revision 49404)
+++ class/corlib/System.Reflection.Emit/EnumBuilder.cs	(working copy)
@@ -360,6 +360,7 @@
 			throw new NotImplementedException ();
 		}
 
+		[ObsoleteAttribute("HasGenericArguments has been deprecated. Please use IsGenericType instead - this will be removed before Whidbey ships.")]
 		[MonoTODO]
 		public override bool HasGenericArguments {
 			get {
Index: class/corlib/System.Reflection.Emit/ChangeLog
===================================================================
--- class/corlib/System.Reflection.Emit/ChangeLog	(revision 49404)
+++ class/corlib/System.Reflection.Emit/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2005-09-04  Kamil Skalski  <nazgul@nemerle.org>
+
+	* GenericTypeParameterBuilder.cs, EnumBuilder.cs, MethodBuilder.cs,
+	TypeBuilder.cs: Mark BindGenericParameters() and HasGenericArguments
+	obsolete.
+	
 2005-09-01  Raja R Harinath  <rharinath@novell.com>
 
 	* CustomAttributeBuilder.cs (get_umarshal): Don't cause a nullref
Index: class/corlib/System.Reflection.Emit/MethodBuilder.cs
===================================================================
--- class/corlib/System.Reflection.Emit/MethodBuilder.cs	(revision 49404)
+++ class/corlib/System.Reflection.Emit/MethodBuilder.cs	(working copy)
@@ -460,6 +460,7 @@
 		}
 
 #if NET_2_0 || BOOTSTRAP_NET_2_0
+		[ObsoleteAttribute("BindGenericParameters() has been deprecated. Please use MakeGenericMethod() instead - this will be removed before Whidbey ships.")]
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		public override extern MethodInfo BindGenericParameters (Type [] types);
 
Index: class/corlib/System.Reflection.Emit/TypeBuilder.cs
===================================================================
--- class/corlib/System.Reflection.Emit/TypeBuilder.cs	(revision 49404)
+++ class/corlib/System.Reflection.Emit/TypeBuilder.cs	(working copy)
@@ -1468,6 +1468,7 @@
 			return base.GetGenericTypeDefinition ();
 		}
 
+		[ObsoleteAttribute("HasGenericArguments has been deprecated. Please use IsGenericType instead - this will be removed before Whidbey ships.")]
 		public override bool HasGenericArguments {
 			get {
 				return generic_params != null;
Index: class/corlib/System.Reflection/GenericParameterAttributes.cs
===================================================================
--- class/corlib/System.Reflection/GenericParameterAttributes.cs	(revision 49404)
+++ class/corlib/System.Reflection/GenericParameterAttributes.cs	(working copy)
@@ -37,19 +37,18 @@
 	[Flags]
 	public enum GenericParameterAttributes
 	{
-		NonVariant			= 0,
 		Covariant			= 1,
 		Contravariant			= 2,
 
 		VarianceMask			= Covariant | Contravariant,
 
-		NoSpecialConstraint		= 0,
+		None				= 0,
 		ReferenceTypeConstraint		= 4,
-		ValueTypeConstraint		= 8,
+		NotNullableValueTypeConstraint	= 8,
 		DefaultConstructorConstraint	= 16,
 
 		SpecialConstraintMask		= 
-		ReferenceTypeConstraint | ValueTypeConstraint | DefaultConstructorConstraint
+		ReferenceTypeConstraint | NotNullableValueTypeConstraint | DefaultConstructorConstraint
 	}
 }
 #endif
Index: class/corlib/System.Reflection/MethodBase.cs
===================================================================
--- class/corlib/System.Reflection/MethodBase.cs	(revision 49404)
+++ class/corlib/System.Reflection/MethodBase.cs	(working copy)
@@ -177,11 +177,17 @@
 		}
 
 #if NET_2_0 || BOOTSTRAP_NET_2_0
+		[ObsoleteAttribute("BindGenericParameters() has been deprecated. Please use MakeGenericMethod() instead - this will be removed before Whidbey ships.")]
 		public virtual MethodInfo BindGenericParameters (Type [] types)
 		{
 			throw new NotSupportedException ();
 		}
 
+		public virtual MethodInfo MakeGenericMethod (params Type [] types)
+		{
+			throw new NotSupportedException ();
+		}
+		
 		public virtual Type [] GetGenericArguments ()
 		{
 			throw new NotSupportedException ();
Index: class/corlib/System.Reflection/ChangeLog
===================================================================
--- class/corlib/System.Reflection/ChangeLog	(revision 49404)
+++ class/corlib/System.Reflection/ChangeLog	(working copy)
@@ -1,3 +1,12 @@
+2005-09-04  Kamil Skalski  <nazgul@nemerle.org>
+
+	* GenericParameterAttributes.cs: Update field names to match Aug CTP.
+
+	* MethodBase.cs, MethodInfo.cs: Add MakeGenericMethod().
+
+	* MonoMethod.cs, TypeDelegator.cs: Mark BindGenericParameters() and
+	HasGenericArguments obsolete.
+	
 2005-08-08 Gonzalo Paniagua Javier <gonzalo@ximian.com>
 
 	* Assembly.cs: made GetManifestResourceInternal internal. Fixes the
Index: class/corlib/System.Reflection/TypeDelegator.cs
===================================================================
--- class/corlib/System.Reflection/TypeDelegator.cs	(revision 49404)
+++ class/corlib/System.Reflection/TypeDelegator.cs	(working copy)
@@ -260,6 +260,8 @@
 			throw new NotImplementedException ();
 		}
 
+
+		[ObsoleteAttribute("HasGenericArguments has been deprecated. Please use IsGenericType instead - this will be removed before Whidbey ships.")]
 		public override bool HasGenericArguments {
 			get {
 				throw new NotImplementedException ();
Index: class/corlib/System.Reflection/MonoMethod.cs
===================================================================
--- class/corlib/System.Reflection/MonoMethod.cs	(revision 49404)
+++ class/corlib/System.Reflection/MonoMethod.cs	(working copy)
@@ -252,6 +252,7 @@
 		}
 
 #if NET_2_0 || BOOTSTRAP_NET_2_0
+		[ObsoleteAttribute("BindGenericParameters() has been deprecated. Please use MakeGenericMethod() instead - this will be removed before Whidbey ships.")]
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		public override extern MethodInfo BindGenericParameters (Type [] types);
 
Index: class/corlib/System.Reflection/MethodInfo.cs
===================================================================
--- class/corlib/System.Reflection/MethodInfo.cs	(revision 49404)
+++ class/corlib/System.Reflection/MethodInfo.cs	(working copy)
@@ -87,5 +87,12 @@
 		{
 			throw new NotImplementedException ();
 		}
+
+#if NET_2_0 || BOOTSTRAP_NET_2_0
+		public override MethodInfo MakeGenericMethod (params Type [] types)
+		{
+			return BindGenericParameters (types);
+		}
+#endif
 	}
 }