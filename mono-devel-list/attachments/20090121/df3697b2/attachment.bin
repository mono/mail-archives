commit 52d6eb7a54a45064dd12592c18296b6db162733b
Author: Cedric Vivier <cedricv@neonux.com>
Date:   Wed Jan 21 13:38:27 2009 +0800

    2009-01-21  Cedric Vivier  <cedricv@neonux.com>
    
    	* verify.c: Check a literal field is never stored or address loaded.
    	Also check that a instance init-only field not stored from outside constructor.
---
 mono/metadata/ChangeLog |    5 +++++
 mono/metadata/verify.c  |   28 +++++++++++++++++++++++++++-
 2 files changed, 32 insertions(+), 1 deletions(-)

diff --git a/mono/metadata/ChangeLog b/mono/metadata/ChangeLog
index c0705c2..5e19b73 100644
--- a/mono/metadata/ChangeLog
+++ b/mono/metadata/ChangeLog
@@ -1,5 +1,10 @@
+2009-01-21  Cedric Vivier  <cedricv@neonux.com>
+
+	* verify.c: Check a literal field is never stored or address loaded.
+	Also check that a instance init-only field not stored from outside constructor.
+
 2009-01-21  Mark Probst  <mark.probst@gmail.com>
 
 	* reflection.c (resolve_object): For fields, inflate the class and
 	then get the field in the inflated class.
 
diff --git a/mono/metadata/verify.c b/mono/metadata/verify.c
index 047f69f..d3481fb 100644
--- a/mono/metadata/verify.c
+++ b/mono/metadata/verify.c
@@ -3295,10 +3295,16 @@ do_push_static_field (VerifyContext *ctx, int token, gboolean take_addr)
 
 	if (!(field->type->attrs & FIELD_ATTRIBUTE_STATIC)) { 
 		ADD_VERIFY_ERROR (ctx, g_strdup_printf ("Cannot load non static field at 0x%04x", ctx->ip_offset));
 		return;
 	}
+
+	if (field->type->attrs & FIELD_ATTRIBUTE_LITERAL) {
+		ADD_VERIFY_ERROR (ctx, g_strdup_printf ("Cannot take the address of a literal field at 0x%04x", ctx->ip_offset));
+		return;
+	}
+
 	/*taking the address of initonly field only works from the static constructor */
 	if (take_addr && (field->type->attrs & FIELD_ATTRIBUTE_INIT_ONLY) &&
 		!(field->parent == ctx->method->klass && (ctx->method->flags & (METHOD_ATTRIBUTE_SPECIAL_NAME | METHOD_ATTRIBUTE_STATIC)) && !strcmp (".cctor", ctx->method->name)))
 		CODE_NOT_VERIFIABLE (ctx, g_strdup_printf ("Cannot take the address of a init-only field at 0x%04x", ctx->ip_offset));
 
@@ -3326,12 +3332,22 @@ do_store_static_field (VerifyContext *ctx, int token) {
 	if (!(field->type->attrs & FIELD_ATTRIBUTE_STATIC)) { 
 		ADD_VERIFY_ERROR (ctx, g_strdup_printf ("Cannot store non static field at 0x%04x", ctx->ip_offset));
 		return;
 	}
 
+	if ((field->type->attrs & FIELD_ATTRIBUTE_LITERAL)) {
+		ADD_VERIFY_ERROR (ctx, g_strdup_printf ("Cannot store literal field at 0x%04x", ctx->ip_offset));
+		return;
+	}
+
+	/*storing an initonly field only works from the static constructor */
+	if ((field->type->attrs & FIELD_ATTRIBUTE_INIT_ONLY) &&
+		!(field->parent == ctx->method->klass && (ctx->method->flags & (METHOD_ATTRIBUTE_SPECIAL_NAME | METHOD_ATTRIBUTE_STATIC)) && !strcmp (".cctor", ctx->method->name)))
+		CODE_NOT_VERIFIABLE (ctx, g_strdup_printf ("Cannot store init-only field at 0x%04x", ctx->ip_offset));
+
 	if (field->type->type == MONO_TYPE_TYPEDBYREF) {
-		ADD_VERIFY_ERROR (ctx, g_strdup_printf ("Typedbyref field is an unverfiable type in store static field at 0x%04x", ctx->ip_offset));
+		ADD_VERIFY_ERROR (ctx, g_strdup_printf ("Typedbyref field is an unverifiable type in store static field at 0x%04x", ctx->ip_offset));
 		return;
 	}
 
 	if (!IS_SKIP_VISIBILITY (ctx) && !mono_method_can_access_field_full (ctx->method, field, NULL))
 		CODE_NOT_VERIFIABLE2 (ctx, g_strdup_printf ("Type at stack is not accessible at 0x%04x", ctx->ip_offset), MONO_EXCEPTION_FIELD_ACCESS);
@@ -3428,10 +3444,20 @@ do_store_field (VerifyContext *ctx, int token)
 	obj = stack_pop_safe (ctx);
 
 	if (!check_is_valid_type_for_field_ops (ctx, token, obj, &field, "stfld"))
 		return;
 
+	if ((field->type->attrs & FIELD_ATTRIBUTE_STATIC)) {
+		ADD_VERIFY_ERROR (ctx, g_strdup_printf ("Cannot store static field at 0x%04x", ctx->ip_offset));
+		return;
+	}
+
+	/*storing an initonly field only works from a constructor of declaring type*/
+	if ((field->type->attrs & FIELD_ATTRIBUTE_INIT_ONLY) &&
+		!(field->parent == ctx->method->klass && mono_method_is_constructor (ctx->method)))
+		CODE_NOT_VERIFIABLE (ctx, g_strdup_printf ("Cannot store init-only field at 0x%04x", ctx->ip_offset));
+
 	if (!verify_stack_type_compatibility (ctx, field->type, value))
 		CODE_NOT_VERIFIABLE (ctx, g_strdup_printf ("Incompatible type %s in field store at 0x%04x", stack_slot_get_name (value), ctx->ip_offset));	
 }
 
 /*TODO proper handle for Nullable<T>*/