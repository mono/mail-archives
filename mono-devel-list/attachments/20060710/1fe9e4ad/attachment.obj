Index: String.cs
===================================================================
--- String.cs	(revision 62399)
+++ String.cs	(working copy)
@@ -1854,6 +1854,57 @@
 			}
 		}
 
+		private unsafe String CreateString (sbyte* value)
+		{
+			byte* bytes = (byte*) value;
+			int length = 0;
+
+			while (bytes++ [0] != 0)
+				length++;
+
+			return CreateString (value, 0, length, null);
+		}
+
+		private unsafe String CreateString (sbyte* value, int startIndex, int length)
+		{
+			return CreateString (value, startIndex, length, null);
+		}
+
+		private unsafe String CreateString (sbyte* value, int startIndex, int length, Encoding enc)
+		{
+			if (length < 0)
+				throw new ArgumentOutOfRangeException ("length");
+			if (startIndex < 0 || (value + startIndex) < value)
+				throw new ArgumentOutOfRangeException ("startIndex");
+
+			if (enc == null)
+				enc = Encoding.Default;
+
+			// Use faster method implementations for internal encodings
+			if (enc.isInternalEncoding) {
+				if (length == 0)
+					return string.Empty;
+
+				int charCount = enc.GetCharCountImpl (value + startIndex, length);
+				if (charCount == 0)
+					return string.Empty;
+
+				string s = InternalAllocateStr (charCount);
+				fixed (char* charPtr = &s.start_char)
+					enc.GetCharsImpl (value + startIndex, length, charPtr, charCount);
+
+				return s;
+			} else {
+				byte [] bytes = new byte [length];
+
+				if (length != 0)
+					fixed (byte* bytePtr = bytes)
+						memcpy (bytes, (byte*) value, length);
+
+				return enc.GetString (bytes);
+			}
+		}
+		
 		/* helpers used by the runtime as well as above or eslewhere in corlib */
 		internal static unsafe void memset (byte *dest, int val, int len)
 		{
