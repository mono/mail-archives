Index: System.Net/GlobalProxySelection.cs
===================================================================
--- System.Net/GlobalProxySelection.cs	(revision 67210)
+++ System.Net/GlobalProxySelection.cs	(working copy)
@@ -37,15 +37,19 @@
 
 namespace System.Net 
 {
+#if NET_2_0
+	[ObsoleteAttribute("Use WebRequest.DefaultProxy instead")]
+#endif
 	public class GlobalProxySelection
 	{
-		volatile static IWebProxy proxy;
-		static readonly object lockobj = new object ();
 		
 		// Constructors
 		public GlobalProxySelection() { }
 		
 		// Properties
+#if !NET_2_0
+		volatile static IWebProxy proxy;
+		static readonly object lockobj = new object ();
 		
 		static IWebProxy GetProxy ()
 		{
@@ -56,25 +60,20 @@
 				object p = ConfigurationSettings.GetConfig ("system.net/defaultProxy");
 				if (p == null)
 					p = new EmptyWebProxy ();
-#if NET_2_0 && CONFIGURATION_DEP
-				DefaultProxySection s = p as DefaultProxySection;
-				if (s != null) {
-					// FIXME: handle Module
-					ProxyElement e = s.Proxy;
-					// FIXME: handle AutoDetect, ScriptLocation, UseSystemDefault
-					if (e.BypassOnLocal == ProxyElement.BypassOnLocalValues.Unspecified)
-						p = new WebProxy (e.ProxyAddress);
-					else
-						p = new WebProxy (e.ProxyAddress, e.BypassOnLocal == ProxyElement.BypassOnLocalValues.True);
-				}
-#endif
+
 				proxy = (IWebProxy) p;
 			}
 
 			return proxy;
 		}
+#endif
+
 		
 		public static IWebProxy Select {
+#if NET_2_0
+			get { return WebRequest.DefaultWebProxy; }
+			set { WebRequest.DefaultWebProxy = value; }
+#else
 			get { return GetProxy (); }
 			set {
 				if (value == null)
@@ -82,6 +81,7 @@
 							"null IWebProxy not allowed. Use GetEmptyWebProxy ()");
 				proxy = value; 
 			}
+#endif
 		}
 		
 		// Methods
Index: System.Net/ChangeLog
===================================================================
--- System.Net/ChangeLog	(revision 67210)
+++ System.Net/ChangeLog	(working copy)
@@ -1,3 +1,11 @@
+2006-11-01  Michael Hutchinson  <m.j.hutchinson@gmail.com>
+
+	* GlobalProxySelection.cs: Obsolete GlobalProxySelection under 2.0 
+	  profile, and move code to new property WebRequest.DefaultWebProxy.
+	* WebRequest.cs: Implement new 2.0 property DefaultWebProxy.
+	  Add support for config option UseSystemDefault using simplistic
+	  implementation of new 2.0 method GetSystemWebProxy ().
+
 2006-10-30  Atsushi Enomoto  <atsushi@ximian.com>
 
 	* FtpWebRequest.cs : more build fixes.
Index: System.Net/WebRequest.cs
===================================================================
--- System.Net/WebRequest.cs	(revision 67210)
+++ System.Net/WebRequest.cs	(working copy)
@@ -119,6 +119,54 @@
 			set { throw new NotImplementedException (); }
 		}
 		
+#if NET_2_0
+		volatile static IWebProxy proxy;
+		static readonly object lockobj = new object ();
+		
+		public static IWebProxy DefaultWebProxy {
+			get {
+				lock (lockobj) {
+					if (proxy == null)
+						proxy = GetDefaultWebProxy ();
+					return proxy;
+				}
+			}
+			set {
+				if (value == null)
+					throw new ArgumentNullException ("WebRequest.DefaultWebProxy",
+							"null IWebProxy not allowed.");
+				proxy = value;
+			}
+		}
+		
+		[MonoTODO("Needs to respect Module, Proxy.AutoDetect, and Proxy.ScriptLocation config settings")]
+		static IWebProxy GetDefaultWebProxy ()
+		{
+			WebProxy p;
+			
+#if CONFIGURATION_DEP
+			System.Configuration.Configuration config = ConfigurationManager.OpenMachineConfiguration ();
+			DefaultProxySection sec = config.GetSection ("system.net/defaultProxy") as DefaultProxySection;
+			if (sec == null)
+				return GlobalProxySelection.GetEmptyWebProxy ();
+			
+			ProxyElement pe = sec.Proxy;
+			
+			if ((pe.UseSystemDefault == ProxyElement.UseSystemDefaultValues.True) && (pe.ProxyAddress == null))
+				p = (WebProxy) GetSystemWebProxy ();
+			else
+				p = new WebProxy ();
+			
+			if (pe.ProxyAddress != null)
+				p.Address = pe.ProxyAddress;
+			
+			if (pe.BypassOnLocal != ProxyElement.BypassOnLocalValues.Unspecified)
+				p.BypassProxyOnLocal = (pe.BypassOnLocal == ProxyElement.BypassOnLocalValues.True);
+#endif
+			return p;
+		}		
+#endif
+
 		// Methods
 		
 		public virtual void Abort()
@@ -177,6 +225,21 @@
 			throw new NotImplementedException ();
 		}
 		
+#if NET_2_0
+		[MonoTODO("Look in other places for proxy config info")]
+		public static IWebProxy GetSystemWebProxy ()
+		{
+			string address = Environment.GetEnvironmentVariable ("http_proxy");
+			if (address != null) {
+				try {
+					WebProxy p = new WebProxy (address);
+					return p;
+				} catch (UriFormatException) {}
+			}
+			return new WebProxy ();
+		}
+#endif
+		
 		void ISerializable.GetObjectData (SerializationInfo serializationInfo,
 		   				  StreamingContext streamingContext)
 		{
