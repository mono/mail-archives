Index: security-core-clr.c
===================================================================
--- security-core-clr.c	(revision 129771)
+++ security-core-clr.c	(working copy)
@@ -43,14 +43,11 @@
 	return class;
 }
 
-MonoSecurityCoreCLRLevel
+static MonoSecurityCoreCLRLevel
 mono_security_core_clr_level_from_cinfo (MonoCustomAttrInfo *cinfo, MonoImage *image)
 {
 	int level = MONO_SECURITY_CORE_CLR_TRANSPARENT;
 
-	if (!mono_security_core_clr_test && !mono_security_core_clr_is_platform_image (image))
-		return level;
-
 	if (cinfo && mono_custom_attrs_has_attr (cinfo, security_safe_critical_attribute ()))
 		level = MONO_SECURITY_CORE_CLR_SAFE_CRITICAL;
 	if (cinfo && mono_custom_attrs_has_attr (cinfo, security_critical_attribute ()))
@@ -62,30 +59,44 @@
 MonoSecurityCoreCLRLevel
 mono_security_core_clr_class_level (MonoClass *class)
 {
-	MonoCustomAttrInfo *cinfo = mono_custom_attrs_from_class (class);
-	MonoSecurityCoreCLRLevel lvl = mono_security_core_clr_level_from_cinfo (cinfo, class->image);
+	MonoCustomAttrInfo *cinfo;
+	MonoSecurityCoreCLRLevel level = MONO_SECURITY_CORE_CLR_TRANSPARENT;
 
-	if (cinfo)
+	/* non-platform code is always Transparent - whatever the attributes says */
+	if (!mono_security_core_clr_test && !mono_security_core_clr_is_platform_image (class->image))
+		return level;
+
+	cinfo = mono_custom_attrs_from_class (class);
+	if (cinfo) {
+		level = mono_security_core_clr_level_from_cinfo (cinfo, class->image);
 		mono_custom_attrs_free (cinfo);
+	}
 
-	if (lvl == MONO_SECURITY_CORE_CLR_TRANSPARENT && class->nested_in)
-		return mono_security_core_clr_class_level (class->nested_in);
-	else
-		return lvl;
+	if (level == MONO_SECURITY_CORE_CLR_TRANSPARENT && class->nested_in)
+		level = mono_security_core_clr_class_level (class->nested_in);
+
+	return level;
 }
 
 MonoSecurityCoreCLRLevel
 mono_security_core_clr_method_level (MonoMethod *method, gboolean with_class_level)
 {
-	MonoCustomAttrInfo *cinfo = mono_custom_attrs_from_method (method);
-	MonoSecurityCoreCLRLevel level = mono_security_core_clr_level_from_cinfo (cinfo, method->klass->image);
+	MonoCustomAttrInfo *cinfo;
+	MonoSecurityCoreCLRLevel level = MONO_SECURITY_CORE_CLR_TRANSPARENT;
 
+	/* non-platform code is always Transparent - whatever the attributes says */
+	if (!mono_security_core_clr_test && !mono_security_core_clr_is_platform_image (method->klass->image))
+		return level;
+
+	cinfo = mono_custom_attrs_from_method (method);
+	if (cinfo) {
+		level = mono_security_core_clr_level_from_cinfo (cinfo, method->klass->image);
+		mono_custom_attrs_free (cinfo);
+	}
+
 	if (with_class_level && level == MONO_SECURITY_CORE_CLR_TRANSPARENT)
 		level = mono_security_core_clr_class_level (method->klass);
 
-	if (cinfo)
-		mono_custom_attrs_free (cinfo);
-
 	return level;
 }
 
Index: security-core-clr.h
===================================================================
--- security-core-clr.h	(revision 129771)
+++ security-core-clr.h	(working copy)
@@ -22,8 +22,6 @@
 
 extern gboolean mono_security_core_clr_test;
 
-extern MonoSecurityCoreCLRLevel mono_security_core_clr_level_from_cinfo (MonoCustomAttrInfo *cinfo, MonoImage *image) MONO_INTERNAL;
-
 extern MonoSecurityCoreCLRLevel mono_security_core_clr_class_level (MonoClass *class) MONO_INTERNAL;
 extern MonoSecurityCoreCLRLevel mono_security_core_clr_method_level (MonoMethod *method, gboolean with_class_level) MONO_INTERNAL;
 
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 129771)
+++ ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2009-03-19  Sebastien Pouliot  <sebastien@ximian.com>
+
+	* security-core-clr.c|h: (mono_security_core_clr_class_level, 
+	mono_security_core_clr_method_level): Avoid potential 
+	MonoCustomAttrInfo allocation for transparent assemblies (e.g. 
+	user/application code) and make it easier to set breakpoints
+
 2009-03-18 Rodrigo Kumpera  <rkumpera@novell.com>
 
 	* metadata-verify.c: Initial verification of the CLI header.
