Index: metadata/sgen-archdep.h
===================================================================
--- metadata/sgen-archdep.h	(revision 158961)
+++ metadata/sgen-archdep.h	(working copy)
@@ -121,6 +121,44 @@
 		((a)[__i]) = UCONTEXT_REG_Rn((ctx), __i);	\
 	} while (0)
 
+#elif defined(__arm__)
+
+#define REDZONE_SIZE	0
+
+/* We dont store ip, sp */
+#define ARCH_NUM_REGS 14
+#define ARCH_STORE_REGS(ptr)				\
+	__asm__ __volatile__(				\
+		"ldr r12, %0\n"				\
+		"push {r0}\n"				\
+		"push {r12}\n"				\
+		"stmia r12!, {r0-r11}\n"		\
+		"pop {r0}\n"				\
+		"stmia r12!, {r0, lr}\n"		\
+		"mov r12, r0\n"				\
+		"pop {r0}\n"				\
+		: 					\
+		: "m" (ptr)				\
+	)
+
+#define ARCH_SIGCTX_SP(ctx)	(UCONTEXT_REG_SP((ctx)))
+#define ARCH_SIGCTX_IP(ctx)	(UCONTEXT_REG_PC((ctx)))
+#define ARCH_COPY_SIGCTX_REGS(a,ctx) do {			\
+	((a)[0]) = (gpointer) (UCONTEXT_REG_R0((ctx)));		\
+	((a)[1]) = (gpointer) (UCONTEXT_REG_R1((ctx)));		\
+	((a)[2]) = (gpointer) (UCONTEXT_REG_R2((ctx)));		\
+	((a)[3]) = (gpointer) (UCONTEXT_REG_R3((ctx)));		\
+	((a)[4]) = (gpointer) (UCONTEXT_REG_R4((ctx)));		\
+	((a)[5]) = (gpointer) (UCONTEXT_REG_R5((ctx)));		\
+	((a)[6]) = (gpointer) (UCONTEXT_REG_R6((ctx)));		\
+	((a)[7]) = (gpointer) (UCONTEXT_REG_R7((ctx)));		\
+	((a)[8]) = (gpointer) (UCONTEXT_REG_R8((ctx)));		\
+	((a)[9]) = (gpointer) (UCONTEXT_REG_R9((ctx)));		\
+	((a)[10]) = (gpointer) (UCONTEXT_REG_R10((ctx)));	\
+	((a)[11]) = (gpointer) (UCONTEXT_REG_R11((ctx)));	\
+	((a)[12]) = (gpointer) (UCONTEXT_REG_R12((ctx)));	\
+	((a)[13]) = (gpointer) (UCONTEXT_REG_LR((ctx)));	\
+	} while (0)
 #endif
 
 #endif /* __MONO_SGENARCHDEP_H__ */
Index: mini/exceptions-arm.c
===================================================================
--- mini/exceptions-arm.c	(revision 158961)
+++ mini/exceptions-arm.c	(working copy)
@@ -29,81 +29,9 @@
 
 #include "mini.h"
 #include "mini-arm.h"
+#include "mono/utils/mono-sigcontext.h"
 
 /*
-
-struct sigcontext {
-	unsigned long trap_no;
-	unsigned long error_code;
-	unsigned long oldmask;
-	unsigned long arm_r0;
-	unsigned long arm_r1;
-	unsigned long arm_r2;
-	unsigned long arm_r3;
-	unsigned long arm_r4;
-	unsigned long arm_r5;
-	unsigned long arm_r6;
-	unsigned long arm_r7;
-	unsigned long arm_r8;
-	unsigned long arm_r9;
-	unsigned long arm_r10;
-	unsigned long arm_fp;
-	unsigned long arm_ip;
-	unsigned long arm_sp;
-	unsigned long arm_lr;
-	unsigned long arm_pc;
-	unsigned long arm_cpsr;
-	unsigned long fault_address;
-};
-
-gregs below is this struct
-struct user_regs {
-	unsigned long int uregs[18];
-};
-
-the companion user_fpregs has just 8 double registers
-(it's valid for FPA mode, will need changes for VFP)
-
-typedef struct {
-	gregset_t gregs;
-	fpregset_t fpregs;
-} mcontext_t;
-	    
-typedef struct ucontext {
-	unsigned long int uc_flags;
-	struct ucontext *uc_link;
-	__sigset_t uc_sigmask;
-	stack_t uc_stack;
-	mcontext_t uc_mcontext;
-	long int uc_filler[5];
-} ucontext_t;
-
-*/
-
-/*
- * So, it turns out that the ucontext struct defined by libc is incorrect.
- * We define our own version here and use it instead.
- */
-
-#if __APPLE__
-#define my_ucontext ucontext_t
-#else
-typedef struct my_ucontext {
-	unsigned long       uc_flags;
-	struct my_ucontext *uc_link;
-	struct {
-		void *p;
-		int flags;
-		size_t size;
-	} sstack_data;
-	struct sigcontext sig_ctx;
-	/* some 2.6.x kernel has fp data here after a few other fields
-	 * we don't use them for now...
-	 */
-} my_ucontext;
-#endif
-
-/*
  * arch_get_restore_context:
  *
  * Returns a pointer to a method which restores a previously saved sigcontext.
@@ -460,7 +388,7 @@
 #if BROKEN_LINUX
 	g_assert_not_reached ();
 #else
-	my_ucontext *my_uc = sigctx;
+	arm_ucontext *my_uc = sigctx;
 
 	mctx->eip = UCONTEXT_REG_PC (my_uc);
 	mctx->esp = UCONTEXT_REG_SP (my_uc);
@@ -475,7 +403,7 @@
 #if BROKEN_LINUX
 	g_assert_not_reached ();
 #else
-	my_ucontext *my_uc = ctx;
+	arm_ucontext *my_uc = ctx;
 
 	UCONTEXT_REG_PC (my_uc) = mctx->eip;
 	UCONTEXT_REG_SP (my_uc) = mctx->ebp;
@@ -515,7 +443,7 @@
 #if defined(MONO_CROSS_COMPILE)
 	g_assert_not_reached ();
 #elif defined(MONO_ARCH_USE_SIGACTION)
-	my_ucontext *sigctx = ctx;
+	arm_ucontext *sigctx = ctx;
 	/*
 	 * Handling the exception in the signal handler is problematic, since the original
 	 * signal is disabled, and we could run arbitrary code though the debugger. So
@@ -558,7 +486,7 @@
 #if BROKEN_LINUX
 	g_assert_not_reached ();
 #else
-	my_ucontext *my_uc = sigctx;
+	arm_ucontext *my_uc = sigctx;
 	return (void*) UCONTEXT_REG_PC (my_uc);
 #endif
 }
Index: mini/mini-arm.h
===================================================================
--- mini/mini-arm.h	(revision 158961)
+++ mini/mini-arm.h	(working copy)
@@ -188,18 +188,6 @@
 		MONO_CONTEXT_SET_IP ((ctx), (func));	\
 	} while (0)
 
-#if __APPLE__
-	#define UCONTEXT_REG_PC(ctx) ((ctx)->uc_mcontext->__ss.__pc)
-	#define UCONTEXT_REG_SP(ctx) ((ctx)->uc_mcontext->__ss.__sp)
-	#define UCONTEXT_REG_R0(ctx) ((ctx)->uc_mcontext->__ss.__r[0])
-	#define UCONTEXT_REG_R1(ctx) ((ctx)->uc_mcontext->__ss.__r[1])
-#else
-	#define UCONTEXT_REG_PC(ctx) ((ctx)->sig_ctx.arm_pc)
-	#define UCONTEXT_REG_SP(ctx) ((ctx)->sig_ctx.arm_sp)
-	#define UCONTEXT_REG_R0(ctx) ((ctx)->sig_ctx.arm_r0)
-	#define UCONTEXT_REG_R1(ctx) ((ctx)->sig_ctx.arm_r1)
-#endif
-
 /*
  * This structure is an extension of MonoLMF and contains extra information.
  */
Index: utils/mono-sigcontext.h
===================================================================
--- utils/mono-sigcontext.h	(revision 158961)
+++ utils/mono-sigcontext.h	(working copy)
@@ -179,6 +179,57 @@
 	#define UCONTEXT_REG_LNK(ctx)     ((ctx)->uc_mcontext.mc_lr)
 #endif
 
+#elif defined(__arm__)
+#if defined(__APPLE__)
+	typedef ucontext_t arm_ucontext;
+
+	#define UCONTEXT_REG_PC(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__pc)
+	#define UCONTEXT_REG_SP(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__sp)
+	#define UCONTEXT_REG_LR(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__lr)
+	#define UCONTEXT_REG_R0(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__r[0])
+	#define UCONTEXT_REG_R1(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__r[1])
+	#define UCONTEXT_REG_R2(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__r[2])
+	#define UCONTEXT_REG_R3(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__r[3])
+	#define UCONTEXT_REG_R4(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__r[4])
+	#define UCONTEXT_REG_R5(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__r[5])
+	#define UCONTEXT_REG_R6(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__r[6])
+	#define UCONTEXT_REG_R7(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__r[7])
+	#define UCONTEXT_REG_R8(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__r[8])
+	#define UCONTEXT_REG_R9(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__r[9])
+	#define UCONTEXT_REG_R10(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__r[10])
+	#define UCONTEXT_REG_R11(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__r[11])
+	#define UCONTEXT_REG_R12(ctx) (((ucontext_t*)(ctx))->uc_mcontext->__ss.__r[12])
+#elif defined(__linux__)
+	typedef struct arm_ucontext {
+		unsigned long       uc_flags;
+		struct arm_ucontext *uc_link;
+		struct {
+			void *p;
+			int flags;
+			size_t size;
+		} sstack_data;
+		struct sigcontext sig_ctx;
+		/* some 2.6.x kernel has fp data here after a few other fields
+		* we don't use them for now...
+		*/
+	} arm_ucontext;
+	#define UCONTEXT_REG_PC(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_pc)
+	#define UCONTEXT_REG_SP(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_sp)
+	#define UCONTEXT_REG_LR(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_lr)
+	#define UCONTEXT_REG_R0(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_r0)
+	#define UCONTEXT_REG_R1(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_r1)
+	#define UCONTEXT_REG_R2(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_r2)
+	#define UCONTEXT_REG_R3(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_r3)
+	#define UCONTEXT_REG_R4(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_r4)
+	#define UCONTEXT_REG_R5(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_r5)
+	#define UCONTEXT_REG_R6(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_r6)
+	#define UCONTEXT_REG_R7(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_r7)
+	#define UCONTEXT_REG_R8(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_r8)
+	#define UCONTEXT_REG_R9(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_r9)
+	#define UCONTEXT_REG_R10(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_r10)
+	#define UCONTEXT_REG_R11(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_fp)
+	#define UCONTEXT_REG_R12(ctx) (((arm_ucontext*)(ctx))->sig_ctx.arm_ip)
 #endif
+#endif
 
 #endif
