Index: Test/System.Web.UI.WebControls/ObjectDataSourceViewTest.cs
===================================================================
--- Test/System.Web.UI.WebControls/ObjectDataSourceViewTest.cs	(revision 121506)
+++ Test/System.Web.UI.WebControls/ObjectDataSourceViewTest.cs	(working copy)
@@ -47,6 +47,7 @@
 using System.Web.UI.WebControls;
 using System.Data;
 using System.Collections;
+using System.Collections.Specialized;
 using MonoTests.SystemWeb.Framework;
 using MonoTests.stand_alone.WebHarness;
 using System.Threading;
@@ -444,6 +445,53 @@
 		}
 
 		[Test]
+		void ConvertValueToNullable ()
+		{
+			ObjectDataSource ds = new ObjectDataSource ("ds1", "Select");
+			ObjectDataSourceView v = new ObjectDataSourceView (ds, "view1", null);
+			v.TypeName = typeof (Updater).AssemblyQualifiedName;
+			v.UpdateMethod = "Update";
+			v.DataObjectTypeName = typeof (Updater.Data).AssemblyQualifiedName;
+
+			OrderedDictionary keys = new OrderedDictionary ();
+			keys.Add ("field1", "field1");
+
+			OrderedDictionary values = new OrderedDictionary ();
+			values.Add ("field1", "2");
+			values.Add ("field2", "2.2.2");
+
+			OrderedDictionary oldValues = new OrderedDictionary ();
+			v.Update (keys, values, oldValues);
+		}
+
+		public class Updater
+		{
+			public class Data
+			{
+				int? _f1;
+				public int? field1
+				{
+					get { return _f1; }
+					set { _f1 = value; }
+				}
+				DateTime? _f2;
+				public DateTime? field2
+				{
+					get { return _f2; }
+					set { _f2 = value; }
+				}
+			}
+			public void Update (Data data)
+			{
+				int? f1 = data.field1;
+				DateTime? f2 = data.field2;
+
+				Assert.AreEqual (2, data.field1, "ConvertValueToNullable #1");
+				Assert.AreEqual (true, data.field2.HasValue, "ConvertValueToNullable #2");
+			}
+		}
+		
+		[Test]
 		[Category("NunitWeb")]
 		public void DeleteMethod ()
 		{
Index: Test/System.Web.UI.WebControls/BoundFieldTest.cs
===================================================================
--- Test/System.Web.UI.WebControls/BoundFieldTest.cs	(revision 121506)
+++ Test/System.Web.UI.WebControls/BoundFieldTest.cs	(working copy)
@@ -168,6 +168,38 @@
 		}
 
 		[Test]
+		void BoundField_ExtractValuesFromCell_Empty ()
+		{
+			BoundField bf = new BoundField ();
+			bf.DataField = "field1";
+
+			DataControlFieldCell fc = new DataControlFieldCell (bf);
+
+			TextBox tb = new TextBox ();
+			tb.Text = "";
+			fc.Controls.Add (tb);
+
+			OrderedDictionary orderedDictionary = new OrderedDictionary ();
+			bf.ExtractValuesFromCell (orderedDictionary, fc, DataControlRowState.Edit, false);
+			Assert.IsNull (orderedDictionary ["field1"], "BoundField_ExtractValuesFromCell_Empty 1");
+		}
+
+		[Test]
+		void BoundField_ExtractValuesFromCell_EmptyReadonly ()
+		{
+			BoundField bf = new BoundField ();
+			bf.DataField = "field1";
+			bf.ReadOnly = true;
+
+			DataControlFieldCell fc = new DataControlFieldCell (bf);
+			fc.Text = "";
+
+			OrderedDictionary orderedDictionary = new OrderedDictionary ();
+			bf.ExtractValuesFromCell (orderedDictionary, fc, DataControlRowState.Edit, true);
+			Assert.IsNull (orderedDictionary ["field1"], "BoundField_ExtractValuesFromCell_EmptyReadonly 1");
+		}
+
+		[Test]
 		public void BoundField_Initialize () {
 			// This method initilize to private fields in a base class DataControlField 
 			// Always return false
Index: System.Web.UI.WebControls/ObjectDataSourceView.cs
===================================================================
--- System.Web.UI.WebControls/ObjectDataSourceView.cs	(revision 121506)
+++ System.Web.UI.WebControls/ObjectDataSourceView.cs	(working copy)
@@ -1104,13 +1104,24 @@
 		
 		object ConvertParameter (Type targetType, object value)
 		{
-			return ConvertParameter (Type.GetTypeCode (targetType), value);
+			TypeCode typeCode = Type.GetTypeCode (targetType);
+
+			if (targetType.IsGenericType && targetType.GetGenericTypeDefinition ().Equals (typeof (Nullable<>))) {
+				if (value == null)
+					return null;
+
+				typeCode = Type.GetTypeCode (targetType.GetGenericArguments () [0]);
+			}
+
+			return ConvertParameter (typeCode, value);
 		}
 		
 		object ConvertParameter (TypeCode targetType, object value)
 		{
 			if (value == null) {
-				if (targetType != TypeCode.Object && targetType != TypeCode.String)
+				if (targetType == TypeCode.DateTime)
+					value = new DateTime ();
+				else if (targetType != TypeCode.Object && targetType != TypeCode.String)
 					value = 0;
 				else if (ConvertNullToDBNull)
 					return DBNull.Value;
Index: System.Web.UI.WebControls/BoundField.cs
===================================================================
--- System.Web.UI.WebControls/BoundField.cs	(revision 121506)
+++ System.Web.UI.WebControls/BoundField.cs	(working copy)
@@ -142,10 +142,10 @@
 			if (editable) {
 				if (cell.Controls.Count > 0) {
 					TextBox box = (TextBox) cell.Controls [0];
-					dictionary [DataField] = box.Text;
+					dictionary [DataField] = string.IsNullOrEmpty (box.Text) ? null : box.Text;
 				}
 			} else if (includeReadOnly) {
-				dictionary [DataField] = cell.Text;
+				dictionary [DataField] = string.IsNullOrEmpty (cell.Text) ? null : cell.Text;
 			}
 		}
 
