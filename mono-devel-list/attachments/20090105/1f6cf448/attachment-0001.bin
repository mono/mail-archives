Index: System.Messaging/Test/System.Messaging/BinaryMessageFormatterTest.cs
===================================================================
--- System.Messaging/Test/System.Messaging/BinaryMessageFormatterTest.cs	(revision 122408)
+++ System.Messaging/Test/System.Messaging/BinaryMessageFormatterTest.cs	(working copy)
@@ -1,142 +0,0 @@
-//
-// BinaryMessageFormatterTest.cs -
-//      NUnit Test Cases for BinaryMessageFormatter
-//
-// Author:
-//      Michael Barker  <mike@middlesoft.co.uk>
-//
-// Copyright (C) 2008 Michael Barker
-//
-// Permission is hereby granted, free of charge, to any person obtaining
-// a copy of this software and associated documentation files (the
-// "Software"), to deal in the Software without restriction, including
-// without limitation the rights to use, copy, modify, merge, publish,
-// distribute, sublicense, and/or sell copies of the Software, and to
-// permit persons to whom the Software is furnished to do so, subject to
-// the following conditions:
-// 
-// The above copyright notice and this permission notice shall be
-// included in all copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-//
-
-using System;
-using System.IO;
-using System.Messaging;
-
-using NUnit.Framework;
-using NUnit.Mocks;
-
-namespace MonoTests.System.Messaging
-{
-    [TestFixture]
-    public class BinaryMessageFormatterTest
-    {
-    
-        DynamicMock mock1;
-        Mono.Messaging.IMessage msg1;
-        DynamicMock mock2;
-        Mono.Messaging.IMessage msg2;
-        
-        [SetUp]
-        public void SetUp ()
-        {
-            mock1 = new DynamicMock (typeof (Mono.Messaging.IMessage));
-            msg1 = (Mono.Messaging.IMessage) mock1.MockInstance;
-            mock2 = new DynamicMock (typeof (Mono.Messaging.IMessage));
-            msg2 = (Mono.Messaging.IMessage) mock2.MockInstance;
-        }
-    
-        [Test]
-        public void FormatString ()
-        {
-            string s = "this is a test string";
-            Stream ms = new MemoryStream ();
-            mock1.ExpectAndReturn ("get_BodyStream", ms);
-            mock1.ExpectAndReturn ("get_BodyStream", ms);
-            
-            mock2.Expect ("set_BodyStream", ms);
-            mock2.ExpectAndReturn ("get_BodyStream", ms);
-            mock2.ExpectAndReturn ("get_BodyStream", ms);            
-            
-            Message m = TestUtils.CreateMessage (msg1);
-            m.Formatter = new BinaryMessageFormatter ();
-            m.Formatter.Write (m, s);
-            Assert.AreEqual (768, m.BodyType);            
-            
-            Stream stream = m.BodyStream;
-            Assert.IsTrue (stream.Length > 0);
-            
-            Message m2 = TestUtils.CreateMessage (msg2);
-            m2.Formatter = new BinaryMessageFormatter ();
-            m2.BodyStream = stream;
-            
-            Assert.AreEqual(s, m2.Formatter.Read (m2), "The string did not serialise/deserialise properly");
-        }
-        
-        [Test]
-        public void FormatComplexObject ()
-        {
-            Stream ms = new MemoryStream ();
-            mock1.ExpectAndReturn ("get_BodyStream", ms);
-            mock1.ExpectAndReturn ("get_BodyStream", ms);
-            
-            mock2.Expect ("set_BodyStream", ms);
-            mock2.ExpectAndReturn ("get_BodyStream", ms);
-            mock2.ExpectAndReturn ("get_BodyStream", ms);
-            
-            Thingy t0 = new Thingy();
-            t0.Iii = 42;
-            t0.Sss = "Some Text";
-            t0.Ttt = DateTime.Now;
-            
-            Message m = TestUtils.CreateMessage (msg1);
-            m.Formatter = new BinaryMessageFormatter ();
-            m.Formatter.Write (m, t0);
-            Stream stream = m.BodyStream;
-            
-            Assert.IsTrue (stream.Length > 0);
-            
-            Message m2 = TestUtils.CreateMessage (msg2);
-            m2.Formatter = new BinaryMessageFormatter ();
-            m2.BodyStream = stream;
-            Thingy t1 = (Thingy) m2.Formatter.Read (m2);
-            
-            Assert.AreEqual(t0.Iii, t1.Iii, "The string did not serialise/deserialise properly");
-            Assert.AreEqual(t0.Sss, t1.Sss, "The string did not serialise/deserialise properly");
-            Assert.AreEqual(t0.Ttt, t1.Ttt, "The string did not serialise/deserialise properly");
-        }
-        
-        [Serializable]
-        private class Thingy
-        {
-            private int iii;
-            private string sss;
-            private DateTime ttt;
-            
-            public int Iii {
-                get { return iii; }
-                set { iii = value; }
-            }
-            
-            public string Sss {
-                get { return sss; }
-                set { sss = value; }
-            }
-            
-            public DateTime Ttt {
-                get { return ttt; }
-                set { ttt = value; }
-            }
-        }
-        
-    }
-}
-
Index: System.Messaging/Test/System.Messaging/TestUtils.cs
===================================================================
--- System.Messaging/Test/System.Messaging/TestUtils.cs	(revision 122408)
+++ System.Messaging/Test/System.Messaging/TestUtils.cs	(working copy)
@@ -1,58 +0,0 @@
-//
-// MessageTest.cs -
-//    NUnit Test Cases for MessageQueuePermissionAttribute
-//
-// Author:
-//    Michael Barker  <sebastien@ximian.com>
-//
-// Copyright (C) 2004-2005 Novell, Inc (http://www.novell.com)
-//
-// Permission is hereby granted, free of charge, to any person obtaining
-// a copy of this software and associated documentation files (the
-// "Software"), to deal in the Software without restriction, including
-// without limitation the rights to use, copy, modify, merge, publish,
-// distribute, sublicense, and/or sell copies of the Software, and to
-// permit persons to whom the Software is furnished to do so, subject to
-// the following conditions:
-// 
-// The above copyright notice and this permission notice shall be
-// included in all copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-//
-
-using System;
-using System.Messaging;
-using System.Reflection;
-
-namespace MonoTests.System.Messaging {
-
-    public class TestUtils {
-    
-        public static Message CreateMessage (Mono.Messaging.IMessage iMessage)
-        {
-            if (iMessage == null)
-                throw new Exception ("Message is null");
-            
-            Type[] types = { 
-                typeof (Mono.Messaging.IMessage)
-            };
-                
-            ConstructorInfo ci = typeof (Message).GetConstructor (
-                BindingFlags.NonPublic | BindingFlags.Instance, 
-                Type.DefaultBinder, types, new ParameterModifier[0]);
-                
-            if (ci == null)
-                throw new Exception ("ConstructorInfo is null");
-            
-            return (Message) ci.Invoke (new object[] { iMessage });
-        }
-    
-    }
-}
Index: System.Messaging/Test/System.Messaging/ChangeLog
===================================================================
--- System.Messaging/Test/System.Messaging/ChangeLog	(revision 122408)
+++ System.Messaging/Test/System.Messaging/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2009-01-05  Michael Barker  <mike@middlesoft.co.uk>
+
+	* BinaryMessageFormatter.cs, XMLMessageFormatterTest.cs, TestUtils.cs, 
+	MessageTest.cs:  Moved to Mono.Messaging.RabbitMQ namespace.
+
 2008-09-29  Michael Barker <mike@middlesoft.co.uk>
 
 	* BinaryMessageFormatter.cs: New
Index: System.Messaging/Test/System.Messaging/MessageTest.cs
===================================================================
--- System.Messaging/Test/System.Messaging/MessageTest.cs	(revision 122408)
+++ System.Messaging/Test/System.Messaging/MessageTest.cs	(working copy)
@@ -1,65 +0,0 @@
-//
-// MessageTest.cs -
-//    NUnit Test Cases for MessageQueuePermissionAttribute
-//
-// Author:
-//    Michael Barker  <sebastien@ximian.com>
-//
-// Copyright (C) 2004-2005 Novell, Inc (http://www.novell.com)
-//
-// Permission is hereby granted, free of charge, to any person obtaining
-// a copy of this software and associated documentation files (the
-// "Software"), to deal in the Software without restriction, including
-// without limitation the rights to use, copy, modify, merge, publish,
-// distribute, sublicense, and/or sell copies of the Software, and to
-// permit persons to whom the Software is furnished to do so, subject to
-// the following conditions:
-// 
-// The above copyright notice and this permission notice shall be
-// included in all copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-//
-
-using NUnit.Framework;
-using NUnit.Mocks;
-using System;
-using System.Messaging;
-using System.Security;
-using System.Security.Permissions;
-using System.Reflection;
-
-namespace MonoTests.System.Messaging {
-
-    [TestFixture]
-    public class MessageTest {
-    
-        DynamicMock messageMock;
-        Mono.Messaging.IMessage iMessage;
-        
-        [SetUp]
-        public void SetUp ()
-        {
-            messageMock = new DynamicMock (typeof (Mono.Messaging.IMessage));
-            iMessage = (Mono.Messaging.IMessage) messageMock.MockInstance;
-        }
-
-        [Test]
-        public void SetProperties ()
-        {
-            messageMock.Expect ("set_AcknowledgeType", 
-                Mono.Messaging.AcknowledgeTypes.FullReachQueue);
-                
-            Message m = TestUtils.CreateMessage (iMessage);
-            m.AcknowledgeType = AcknowledgeTypes.FullReachQueue;
-            
-            messageMock.Verify ();
-        }
-    }
-}
Index: System.Messaging/Test/System.Messaging/XmlMessageFormatterTest.cs
===================================================================
--- System.Messaging/Test/System.Messaging/XmlMessageFormatterTest.cs	(revision 122408)
+++ System.Messaging/Test/System.Messaging/XmlMessageFormatterTest.cs	(working copy)
@@ -1,153 +0,0 @@
-//
-// XmlMessageFormatterTest.cs -
-//      NUnit Test Cases for XmlMessageFormatterTest
-//
-// Author:
-//      Michael Barker  <mike@middlesoft.co.uk>
-//
-// Copyright (C) 2008 Michael Barker
-//
-// Permission is hereby granted, free of charge, to any person obtaining
-// a copy of this software and associated documentation files (the
-// "Software"), to deal in the Software without restriction, including
-// without limitation the rights to use, copy, modify, merge, publish,
-// distribute, sublicense, and/or sell copies of the Software, and to
-// permit persons to whom the Software is furnished to do so, subject to
-// the following conditions:
-// 
-// The above copyright notice and this permission notice shall be
-// included in all copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-//
-
-using System;
-using System.IO;
-using System.Messaging;
-
-using NUnit.Framework;
-using NUnit.Mocks;
-
-namespace MonoTests.System.Messaging
-{
-    [TestFixture]
-    public class XmlMessageFormatterTest
-    {
-
-        DynamicMock mock1;
-        Mono.Messaging.IMessage msg1;
-        DynamicMock mock2;
-        Mono.Messaging.IMessage msg2;
-        
-        [SetUp]
-        public void SetUp ()
-        {
-            mock1 = new DynamicMock (typeof (Mono.Messaging.IMessage));
-            msg1 = (Mono.Messaging.IMessage) mock1.MockInstance;
-            mock2 = new DynamicMock (typeof (Mono.Messaging.IMessage));
-            msg2 = (Mono.Messaging.IMessage) mock2.MockInstance;
-        }
-
-        [Test]
-        public void FormatString ()
-        {
-            Type[] t = { typeof (string) };
-            string s = "this is a test string";
-            
-            Stream ms = new MemoryStream ();
-            mock1.ExpectAndReturn ("get_BodyStream", ms);
-            mock1.ExpectAndReturn ("get_BodyStream", ms);
-            
-            mock2.Expect ("set_BodyStream", ms);
-            mock2.ExpectAndReturn ("get_BodyStream", ms);
-            mock2.ExpectAndReturn ("get_BodyStream", ms);
-            
-            Message m = TestUtils.CreateMessage (msg1);
-            
-            XmlMessageFormatter xmlF = new XmlMessageFormatter ();
-            m.Formatter = xmlF;
-            m.Formatter.Write (m, s);
-            Stream stream = m.BodyStream;
-            
-            Assert.AreEqual (typeof (string), xmlF.TargetTypes[0]);
-            
-            Assert.IsTrue (stream.Length > 0);
-            
-            Message m2 = TestUtils.CreateMessage (msg2);
-            m2.Formatter = new XmlMessageFormatter (t);
-            m2.BodyStream = stream;
-            
-            Assert.AreEqual (s, (string) m2.Formatter.Read (m2), "The string did not serialise/deserialise properly");
-            
-            mock1.Verify ();
-            mock2.Verify ();
-        }
-        
-        
-        [Test]
-        public void FormatComplexObject ()
-        {
-            Type[] ts = { typeof (Thingy) };
-            Stream ms = new MemoryStream ();
-            mock1.ExpectAndReturn ("get_BodyStream", ms);
-            mock1.ExpectAndReturn ("get_BodyStream", ms);
-            
-            mock2.Expect ("set_BodyStream", ms);
-            mock2.ExpectAndReturn ("get_BodyStream", ms);
-            mock2.ExpectAndReturn ("get_BodyStream", ms);
-            
-            Thingy t0 = new Thingy();
-            t0.Iii = 42;
-            t0.Sss = "Some Text";
-            t0.Ttt = DateTime.Now;
-            
-            Message m = TestUtils.CreateMessage (msg1);
-            m.Formatter = new XmlMessageFormatter (ts);
-            m.Formatter.Write (m, t0);
-            Stream stream = m.BodyStream;
-            
-            Assert.IsTrue (stream.Length > 0);
-            
-            Message m2 = TestUtils.CreateMessage (msg2);
-            m2.Formatter = new XmlMessageFormatter (ts);
-            m2.BodyStream = stream;
-            Thingy t1 = (Thingy) m2.Formatter.Read (m2);
-            
-            Assert.AreEqual (t0.Iii, t1.Iii, "The int did not serialise/deserialise properly");
-            Assert.AreEqual (t0.Sss, t1.Sss, "The string did not serialise/deserialise properly");
-            Assert.AreEqual (t0.Ttt, t1.Ttt, "The date did not serialise/deserialise properly");
-        }
-        
-    }
-
-    [Serializable]
-    public class Thingy
-    {
-        private int iii;
-        private string sss;
-        private DateTime ttt;
-        
-        public int Iii {
-            get { return iii; }
-            set { iii = value; }
-        }
-        
-        public string Sss {
-            get { return sss; }
-            set { sss = value; }
-        }
-        
-        public DateTime Ttt {
-            get { return ttt; }
-            set { ttt = value; }
-        }
-    }
-
-}
-
Index: System.Messaging/System.Messaging/BinaryMessageFormatter.cs
===================================================================
--- System.Messaging/System.Messaging/BinaryMessageFormatter.cs	(revision 122408)
+++ System.Messaging/System.Messaging/BinaryMessageFormatter.cs	(working copy)
@@ -107,7 +107,7 @@
 				stream = new MemoryStream ();
 				message.BodyStream = stream;
 			}
-			
+
 			message.BodyType = 768;
 			_formatter.Serialize (stream, obj);
 		}
Index: Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/BinaryMessageFormatterTest.cs
===================================================================
--- Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/BinaryMessageFormatterTest.cs	(revision 122408)
+++ Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/BinaryMessageFormatterTest.cs	(working copy)
@@ -31,27 +31,29 @@
 using System.IO;
 using System.Messaging;
 
+using Mono.Messaging;
+
 using NUnit.Framework;
 using NUnit.Mocks;
 
-namespace MonoTests.System.Messaging
+namespace MonoTests.Mono.Messaging.RabbitMQ
 {
     [TestFixture]
     public class BinaryMessageFormatterTest
     {
     
         DynamicMock mock1;
-        Mono.Messaging.IMessage msg1;
+        IMessage msg1;
         DynamicMock mock2;
-        Mono.Messaging.IMessage msg2;
+        IMessage msg2;
         
         [SetUp]
         public void SetUp ()
         {
-            mock1 = new DynamicMock (typeof (Mono.Messaging.IMessage));
-            msg1 = (Mono.Messaging.IMessage) mock1.MockInstance;
-            mock2 = new DynamicMock (typeof (Mono.Messaging.IMessage));
-            msg2 = (Mono.Messaging.IMessage) mock2.MockInstance;
+            mock1 = new DynamicMock (typeof (IMessage));
+            msg1 = (IMessage) mock1.MockInstance;
+            mock2 = new DynamicMock (typeof (IMessage));
+            msg2 = (IMessage) mock2.MockInstance;
         }
     
         [Test]
@@ -61,24 +63,24 @@
             Stream ms = new MemoryStream ();
             mock1.ExpectAndReturn ("get_BodyStream", ms);
             mock1.ExpectAndReturn ("get_BodyStream", ms);
+			mock1.Expect ("set_BodyType", 768);
             
-            mock2.Expect ("set_BodyStream", ms);
             mock2.ExpectAndReturn ("get_BodyStream", ms);
-            mock2.ExpectAndReturn ("get_BodyStream", ms);            
+            mock2.ExpectAndReturn ("get_BodyStream", ms);			
             
             Message m = TestUtils.CreateMessage (msg1);
             m.Formatter = new BinaryMessageFormatter ();
             m.Formatter.Write (m, s);
-            Assert.AreEqual (768, m.BodyType);            
             
             Stream stream = m.BodyStream;
             Assert.IsTrue (stream.Length > 0);
             
             Message m2 = TestUtils.CreateMessage (msg2);
             m2.Formatter = new BinaryMessageFormatter ();
-            m2.BodyStream = stream;
             
             Assert.AreEqual(s, m2.Formatter.Read (m2), "The string did not serialise/deserialise properly");
+			mock1.Verify ();
+			mock2.Verify ();
         }
         
         [Test]
@@ -88,11 +90,10 @@
             mock1.ExpectAndReturn ("get_BodyStream", ms);
             mock1.ExpectAndReturn ("get_BodyStream", ms);
             
-            mock2.Expect ("set_BodyStream", ms);
             mock2.ExpectAndReturn ("get_BodyStream", ms);
             mock2.ExpectAndReturn ("get_BodyStream", ms);
             
-            Thingy t0 = new Thingy();
+            Thingy2 t0 = new Thingy2();
             t0.Iii = 42;
             t0.Sss = "Some Text";
             t0.Ttt = DateTime.Now;
@@ -106,37 +107,14 @@
             
             Message m2 = TestUtils.CreateMessage (msg2);
             m2.Formatter = new BinaryMessageFormatter ();
-            m2.BodyStream = stream;
-            Thingy t1 = (Thingy) m2.Formatter.Read (m2);
+            Thingy2 t1 = (Thingy2) m2.Formatter.Read (m2);
             
             Assert.AreEqual(t0.Iii, t1.Iii, "The string did not serialise/deserialise properly");
             Assert.AreEqual(t0.Sss, t1.Sss, "The string did not serialise/deserialise properly");
             Assert.AreEqual(t0.Ttt, t1.Ttt, "The string did not serialise/deserialise properly");
+			mock1.Verify ();
+			mock2.Verify ();
         }
-        
-        [Serializable]
-        private class Thingy
-        {
-            private int iii;
-            private string sss;
-            private DateTime ttt;
-            
-            public int Iii {
-                get { return iii; }
-                set { iii = value; }
-            }
-            
-            public string Sss {
-                get { return sss; }
-                set { sss = value; }
-            }
-            
-            public DateTime Ttt {
-                get { return ttt; }
-                set { ttt = value; }
-            }
-        }
-        
     }
 }
 

Property changes on: Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/BinaryMessageFormatterTest.cs
___________________________________________________________________
Added: svn:mergeinfo

Index: Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/ChangeLog
===================================================================
--- Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/ChangeLog	(revision 122408)
+++ Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2009-01-05  Michael Barker  <mike@middlesoft.co.uk>
+
+	* BinaryMessageFormatter.cs, XMLMessageFormatterTest.cs, TestUtils.cs, 
+	MessageTest.cs:  Moved in from System.Messaging namespace.
+
 2009-01-03  Michael Barker  <mike@middlesoft.co.uk>
 
 	* AsyncPeekTest.cs:  Added test for handling exceptions aysnchronously.
Index: Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/MessageTest.cs
===================================================================
--- Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/MessageTest.cs	(revision 122408)
+++ Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/MessageTest.cs	(working copy)
@@ -30,34 +30,36 @@
 using NUnit.Framework;
 using NUnit.Mocks;
 using System;
-using System.Messaging;
+//using System.Messaging;
 using System.Security;
 using System.Security.Permissions;
 using System.Reflection;
 
-namespace MonoTests.System.Messaging {
+using Mono.Messaging;
 
+namespace MonoTests.Mono.Messaging.RabbitMQ {
+
     [TestFixture]
     public class MessageTest {
     
         DynamicMock messageMock;
-        Mono.Messaging.IMessage iMessage;
+        IMessage iMessage;
         
         [SetUp]
         public void SetUp ()
         {
-            messageMock = new DynamicMock (typeof (Mono.Messaging.IMessage));
-            iMessage = (Mono.Messaging.IMessage) messageMock.MockInstance;
+            messageMock = new DynamicMock (typeof (IMessage));
+            iMessage = (IMessage) messageMock.MockInstance;
         }
 
         [Test]
         public void SetProperties ()
         {
             messageMock.Expect ("set_AcknowledgeType", 
-                Mono.Messaging.AcknowledgeTypes.FullReachQueue);
+                AcknowledgeTypes.FullReachQueue);
                 
-            Message m = TestUtils.CreateMessage (iMessage);
-            m.AcknowledgeType = AcknowledgeTypes.FullReachQueue;
+            System.Messaging.Message m = TestUtils.CreateMessage (iMessage);
+            m.AcknowledgeType = System.Messaging.AcknowledgeTypes.FullReachQueue;
             
             messageMock.Verify ();
         }

Property changes on: Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/MessageTest.cs
___________________________________________________________________
Added: svn:mergeinfo

Index: Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/XmlMessageFormatterTest.cs
===================================================================
--- Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/XmlMessageFormatterTest.cs	(revision 122408)
+++ Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/XmlMessageFormatterTest.cs	(working copy)
@@ -31,27 +31,29 @@
 using System.IO;
 using System.Messaging;
 
+using Mono.Messaging;
+
 using NUnit.Framework;
 using NUnit.Mocks;
 
-namespace MonoTests.System.Messaging
+namespace MonoTests.Mono.Messaging.RabbitMQ
 {
     [TestFixture]
     public class XmlMessageFormatterTest
     {
 
         DynamicMock mock1;
-        Mono.Messaging.IMessage msg1;
+        IMessage msg1;
         DynamicMock mock2;
-        Mono.Messaging.IMessage msg2;
+        IMessage msg2;
         
         [SetUp]
         public void SetUp ()
         {
-            mock1 = new DynamicMock (typeof (Mono.Messaging.IMessage));
-            msg1 = (Mono.Messaging.IMessage) mock1.MockInstance;
-            mock2 = new DynamicMock (typeof (Mono.Messaging.IMessage));
-            msg2 = (Mono.Messaging.IMessage) mock2.MockInstance;
+            mock1 = new DynamicMock (typeof (IMessage));
+            msg1 = (IMessage) mock1.MockInstance;
+            mock2 = new DynamicMock (typeof (IMessage));
+            msg2 = (IMessage) mock2.MockInstance;
         }
 
         [Test]
@@ -64,7 +66,6 @@
             mock1.ExpectAndReturn ("get_BodyStream", ms);
             mock1.ExpectAndReturn ("get_BodyStream", ms);
             
-            mock2.Expect ("set_BodyStream", ms);
             mock2.ExpectAndReturn ("get_BodyStream", ms);
             mock2.ExpectAndReturn ("get_BodyStream", ms);
             
@@ -81,7 +82,6 @@
             
             Message m2 = TestUtils.CreateMessage (msg2);
             m2.Formatter = new XmlMessageFormatter (t);
-            m2.BodyStream = stream;
             
             Assert.AreEqual (s, (string) m2.Formatter.Read (m2), "The string did not serialise/deserialise properly");
             
@@ -93,16 +93,15 @@
         [Test]
         public void FormatComplexObject ()
         {
-            Type[] ts = { typeof (Thingy) };
+            Type[] ts = { typeof (Thingy2) };
             Stream ms = new MemoryStream ();
             mock1.ExpectAndReturn ("get_BodyStream", ms);
             mock1.ExpectAndReturn ("get_BodyStream", ms);
             
-            mock2.Expect ("set_BodyStream", ms);
             mock2.ExpectAndReturn ("get_BodyStream", ms);
             mock2.ExpectAndReturn ("get_BodyStream", ms);
             
-            Thingy t0 = new Thingy();
+            Thingy2 t0 = new Thingy2();
             t0.Iii = 42;
             t0.Sss = "Some Text";
             t0.Ttt = DateTime.Now;
@@ -116,18 +115,20 @@
             
             Message m2 = TestUtils.CreateMessage (msg2);
             m2.Formatter = new XmlMessageFormatter (ts);
-            m2.BodyStream = stream;
-            Thingy t1 = (Thingy) m2.Formatter.Read (m2);
+            Thingy2 t1 = (Thingy2) m2.Formatter.Read (m2);
             
             Assert.AreEqual (t0.Iii, t1.Iii, "The int did not serialise/deserialise properly");
             Assert.AreEqual (t0.Sss, t1.Sss, "The string did not serialise/deserialise properly");
             Assert.AreEqual (t0.Ttt, t1.Ttt, "The date did not serialise/deserialise properly");
+			
+			mock1.Verify ();
+			mock2.Verify ();
         }
         
     }
 
     [Serializable]
-    public class Thingy
+    public class Thingy2
     {
         private int iii;
         private string sss;
@@ -148,6 +149,5 @@
             set { ttt = value; }
         }
     }
-
 }
 

Property changes on: Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/XmlMessageFormatterTest.cs
___________________________________________________________________
Added: svn:mergeinfo

Index: Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/TestUtils.cs
===================================================================
--- Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/TestUtils.cs	(revision 122408)
+++ Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/TestUtils.cs	(working copy)
@@ -31,17 +31,19 @@
 using System.Messaging;
 using System.Reflection;
 
-namespace MonoTests.System.Messaging {
+using Mono.Messaging;
 
+namespace MonoTests.Mono.Messaging.RabbitMQ {
+
     public class TestUtils {
     
-        public static Message CreateMessage (Mono.Messaging.IMessage iMessage)
+        public static Message CreateMessage (IMessage iMessage)
         {
             if (iMessage == null)
                 throw new Exception ("Message is null");
             
             Type[] types = { 
-                typeof (Mono.Messaging.IMessage)
+                typeof (IMessage), typeof (object), typeof (IMessageFormatter)
             };
                 
             ConstructorInfo ci = typeof (Message).GetConstructor (
@@ -51,7 +53,7 @@
             if (ci == null)
                 throw new Exception ("ConstructorInfo is null");
             
-            return (Message) ci.Invoke (new object[] { iMessage });
+            return (Message) ci.Invoke (new object[] { iMessage, null, null });
         }
     
     }

Property changes on: Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/TestUtils.cs
___________________________________________________________________
Added: svn:mergeinfo

Index: Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ_test.dll.sources
===================================================================
--- Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ_test.dll.sources	(revision 122408)
+++ Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ_test.dll.sources	(working copy)
@@ -8,4 +8,8 @@
 Mono.Messaging.RabbitMQ/TransactionMessagingTest.cs
 Mono.Messaging.RabbitMQ/SelectorTest.cs
 Mono.Messaging.RabbitMQ/AsyncReceiveTest.cs
-Mono.Messaging.RabbitMQ/AsyncPeekTest.cs
\ No newline at end of file
+Mono.Messaging.RabbitMQ/AsyncPeekTest.cs
+Mono.Messaging.RabbitMQ/BinaryMessageFormatterTest.cs
+Mono.Messaging.RabbitMQ/XmlMessageFormatterTest.cs
+Mono.Messaging.RabbitMQ/TestUtils.cs
+Mono.Messaging.RabbitMQ/MessageTest.cs
\ No newline at end of file
Index: Mono.Messaging.RabbitMQ/ChangeLog
===================================================================
--- Mono.Messaging.RabbitMQ/ChangeLog	(revision 122408)
+++ Mono.Messaging.RabbitMQ/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2009-01-05  Michael Barker  <mike@middlesoft.co.uk>
+
+	* Makefile: Added nunit.mocks to test build
+	* Mono.Messaging.RabbitMQ_test.dll.sources:  Added additional formatter
+	tests.
+
 2008-09-29  Michael Barker  <mike@middlesoft.co.uk>
 
 	* AssemblyInfo.cs: New
Index: Mono.Messaging.RabbitMQ/Makefile
===================================================================
--- Mono.Messaging.RabbitMQ/Makefile	(revision 122408)
+++ Mono.Messaging.RabbitMQ/Makefile	(working copy)
@@ -8,6 +8,7 @@
 		/r:Mono.Messaging.dll \
 		/r:RabbitMQ.Client
 
-TEST_MCS_FLAGS = $(LIB_MCS_FLAGS) -nowarn:0618 -nowarn:219 -nowarn:169
+TEST_MCS_FLAGS = $(LIB_MCS_FLAGS) -nowarn:0618 -nowarn:219 -nowarn:169 \
+	/r:nunit.mocks.dll
 
 include ../../build/library.make
Index: Mono.Messaging/Mono.Messaging_test.dll.sources
===================================================================
--- Mono.Messaging/Mono.Messaging_test.dll.sources	(revision 122408)
+++ Mono.Messaging/Mono.Messaging_test.dll.sources	(working copy)
@@ -1,2 +1,2 @@
 Mono.Messaging/MessageBaseTest.cs
-Mono.Messaging/QueueReferenceTest.cs
+Mono.Messaging/QueueReferenceTest.cs
\ No newline at end of file