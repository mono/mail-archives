Index: mono/mono/metadata/threads.c
===================================================================
--- mono/mono/metadata/threads.c	(revision 107385)
+++ mono/mono/metadata/threads.c	(working copy)
@@ -1934,6 +1934,9 @@
 	gboolean throw = FALSE;
 	
 	ensure_synch_cs_set (this);
+
+	if (this == mono_thread_current ())
+		return;
 	
 	EnterCriticalSection (this->synch_cs);
 	
@@ -3510,6 +3513,7 @@
 		return NULL;
 	} else if (thread->thread_interrupt_requested) {
 
+		thread->thread_interrupt_requested = FALSE;
 		LeaveCriticalSection (thread->synch_cs);
 		
 		return(mono_get_exception_thread_interrupted ());
Index: mono/mono/metadata/ChangeLog
===================================================================
--- mono/mono/metadata/ChangeLog	(revision 107385)
+++ mono/mono/metadata/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2008-07-07  Bill Holmes  <billholmes54@gmail.com>
+
+	* threads.c : Thread.Interrupt changes to ensure that ThreadInterruptedException
+	  is not throw too many times.
+
+	Code is contributed under MIT/X11 license.
+
 2008-07-06  Zoltan Varga  <vargaz@gmail.com>
 
 	* generic-sharing.c (mono_method_lookup_rgctx): Fix a warning.
Index: mcs/class/corlib/Test/System.Threading/ChangeLog
===================================================================
--- mcs/class/corlib/Test/System.Threading/ChangeLog	(revision 107385)
+++ mcs/class/corlib/Test/System.Threading/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2008-07-07  Bill Holmes  <billholmes54@gmail.com>
+
+	* ThreadTest.cs : Tests added for Thread.Interrupt.
+
+	Code is contributed under MIT/X11 license.
+
 2008-06-13  Zoltan Varga  <vargaz@gmail.com>
 
 	* MutexTest.cs: Reenable some mutex tests which seem to work now.
Index: mcs/class/corlib/Test/System.Threading/ThreadTest.cs
===================================================================
--- mcs/class/corlib/Test/System.Threading/ThreadTest.cs	(revision 107385)
+++ mcs/class/corlib/Test/System.Threading/ThreadTest.cs	(working copy)
@@ -660,7 +660,59 @@
 			
 			CheckIsNotRunning ("t6", t);
 		}
+
+		[Test]
+		public void Test_Interrupt ()
+		{
+			bool interruptedExceptionThrown = false;
+			ThreadPool.QueueUserWorkItem (Test_Interrupt_Worker, Thread.CurrentThread);
+
+			try {
+				try {
+					Thread.Sleep (3000);
+				} finally {
+					try {
+						Thread.Sleep (0);
+					} catch (ThreadInterruptedException) {
+						Assert.Fail ("ThreadInterruptedException thrown twice");
+					}
+				}
+			} catch (ThreadInterruptedException) {
+				interruptedExceptionThrown = true;
+			}
+
+			Assert.IsTrue (interruptedExceptionThrown, "ThreadInterruptedException expected.");
+		}
+
+		private void Test_Interrupt_Worker (object o)
+		{
+			Thread t = o as Thread;
+			Thread.Sleep (100);
+			t.Interrupt ();
+		}
 		
+		[Test]
+		public void Test_InterruptCurrentThread ()
+		{
+			bool interruptedExceptionThrown = false;
+
+			try {
+				try {
+					Thread.CurrentThread.Interrupt ();
+				} finally {
+					try {
+						Thread.Sleep (0);
+					} catch (ThreadInterruptedException) {
+						Assert.Fail ("ThreadInterruptedException should not be thrown.");
+					}
+				}
+			} catch (ThreadInterruptedException) {
+				interruptedExceptionThrown = true;
+			}
+
+			Assert.IsFalse (interruptedExceptionThrown, "ThreadInterruptedException should not be thrown.");
+		}
+
 		void CheckIsRunning (string s, Thread t)
 		{
 			int c = counter;