Index: mcs/mcs/decl.cs
===================================================================
--- mcs/mcs/decl.cs	(revision 134759)
+++ mcs/mcs/decl.cs	(working copy)
@@ -1895,12 +1895,24 @@
 			foreach (MemberInfo member in members) {
 				string name = member.Name;
 
-				AddMember (mt, bf, container, name, member);
+				// Workaround for bug #501775. BindingFlags don't distinguish between private and protected, so we treat a protected
+				// field in a class from a referenced assembly as private which causes warning CS0109. If the class is defined
+				// in the current assembly we get the binding flags from GetBindingFlags(mc.ModFlags) which already contains the correct
+				// information.
+				BindingFlags bfToUse = bf;
+				if (member is FieldInfo) {
+					FieldInfo fi = (FieldInfo)member;
+					if (fi.IsPublic || fi.IsFamilyOrAssembly || fi.IsFamily) {
+						bfToUse |= BindingFlags.Public;
+					}
+				}
 
+				AddMember (mt, bfToUse, container, name, member);
+
 				if (member is MethodInfo) {
 					string gname = TypeManager.GetMethodName ((MethodInfo) member);
 					if (gname != name)
-						AddMember (mt, bf, container, gname, member);
+						AddMember (mt, bfToUse, container, gname, member);
 				}
 			}
 		}
@@ -2519,7 +2531,7 @@
  			if (applicable != null) {
  				for (int i = applicable.Count - 1; i >= 0; i--) {
  					CacheEntry entry = (CacheEntry) applicable [i];
- 					if ((entry.EntryType & EntryType.Public) != 0 & entry.Member != ignore_member) {
+ 					if ((entry.EntryType & EntryType.Public) != 0 && entry.Member != ignore_member) {
  						if (ignore_complex_types) {
  							if ((entry.EntryType & EntryType.Method) != 0)
  								continue;

