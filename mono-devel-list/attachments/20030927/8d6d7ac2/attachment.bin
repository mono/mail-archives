Index: get.c
===================================================================
RCS file: /cvs/public/mono/mono/dis/get.c,v
retrieving revision 1.56
diff -u -u -r1.56 get.c
--- get.c	17 Sep 2003 04:33:59 -0000	1.56
+++ get.c	28 Sep 2003 00:17:40 -0000
@@ -20,6 +20,9 @@
 
 extern gboolean substitute_with_mscorlib_p;
 
+static char *
+get_memberref_parent (MonoImage *m, guint32 mrp_token);
+
 char *
 get_typedef (MonoImage *m, int idx)
 {
@@ -352,11 +355,11 @@
 	{ MONO_TYPE_I1         , "int8" },
 	{ MONO_TYPE_U1         , "unsigned int8" }, 
 	{ MONO_TYPE_I2         , "int16" },
-	{ MONO_TYPE_U2         , "uint16" },
+	{ MONO_TYPE_U2         , "unsigned int16" },
 	{ MONO_TYPE_I4         , "int32" },
-	{ MONO_TYPE_U4         , "uint32" },
+	{ MONO_TYPE_U4         , "unsigned int32" },
 	{ MONO_TYPE_I8         , "int64" },
-	{ MONO_TYPE_U8         , "uint64" },
+	{ MONO_TYPE_U8         , "unsigned int64" },
 	{ MONO_TYPE_R4         , "float32" },
 	{ MONO_TYPE_R8         , "float64" },
 	{ MONO_TYPE_STRING     , "string" },
@@ -499,7 +502,7 @@
 		if (i)
 			g_string_append (result, ", ");
 		retval = dis_stringify_param (m, method->params [i]);
-		g_string_sprintfa (result, "%s %s", retval, name);
+		g_string_sprintfa (result, "%s '%s'", retval, name);
 		g_free (retval);
 	}
 	g_string_append (result, ") ");
@@ -766,7 +769,7 @@
 		 g_string_append (str, "void");
 		 ptr++;
 	} else {
-		if (*ptr == MONO_TYPE_BYREF){
+                if (*ptr == MONO_TYPE_BYREF){
 			g_string_append (str, "[out] ");
 			ptr++;
 		}
@@ -806,10 +809,10 @@
 	}
 	
 	if (*ptr == MONO_TYPE_TYPEDBYREF){
-		g_string_append (str, "/*FIXME: what does typedbyref mean? */ typedbyref ");
+		g_string_append (str, " typedbyref ");
 		ptr++;
 	} else {
-		if (*ptr == MONO_TYPE_BYREF){
+		 if (*ptr == MONO_TYPE_BYREF){
 			g_string_append (str, "[out] ");
 			ptr++;
 		}
@@ -958,6 +961,28 @@
 }
 
 /**
+ * Returns a stringifed representation of a field ref
+ */
+char *
+get_fieldref_signature (MonoImage *m, int idx)
+{
+        guint32 cols [MONO_MEMBERREF_SIZE];
+        char *sig;
+        char *full_sig;
+
+        mono_metadata_decode_row (&m->tables [MONO_TABLE_MEMBERREF],
+                        idx - 1, cols, MONO_MEMBERREF_SIZE);
+
+        sig = get_field_signature (m, cols [MONO_FIELD_SIGNATURE]);
+        full_sig = g_strdup_printf ("%s %s::%s", sig,
+                        get_memberref_parent (m, cols [MONO_MEMBERREF_CLASS]),
+                        mono_metadata_string_heap (m, cols [MONO_MEMBERREF_NAME]));
+        g_free (sig);
+        
+        return full_sig;
+}
+
+/**
  * get_field:
  * @m: metadata context
  * @token: a FIELD_DEF token
@@ -979,7 +1004,7 @@
 	 * defined in another module/assembly, just like in get_method ()
 	 */
 	if (mono_metadata_token_code (token) == MONO_TOKEN_MEMBER_REF) {
-		return g_strdup_printf ("fieldref-0x%08x", token);
+                return get_fieldref_signature (m, idx);
 	}
 	g_assert (mono_metadata_token_code (token) == MONO_TOKEN_FIELD_DEF);
 
Index: get.h
===================================================================
RCS file: /cvs/public/mono/mono/dis/get.h,v
retrieving revision 1.16
diff -u -u -r1.16 get.h
--- get.h	22 Aug 2003 16:24:06 -0000	1.16
+++ get.h	28 Sep 2003 00:17:40 -0000
@@ -8,6 +8,7 @@
 char *get_typeref             (MonoImage *m, int idx);
 char *get_typedef_or_ref      (MonoImage *m, guint32 dor_token);
 char *get_field_signature     (MonoImage *m, guint32 blob_signature);
+char *get_fieldref_signature  (MonoImage *m, int idx);
 char *decode_literal          (MonoImage *m, guint32 token);
 char *get_field               (MonoImage *m, guint32 token);
 char *param_flags             (guint32 f);
Index: main.c
===================================================================
RCS file: /cvs/public/mono/mono/dis/main.c,v
retrieving revision 1.87
diff -u -u -r1.87 main.c
--- main.c	22 Aug 2003 16:27:53 -0000	1.87
+++ main.c	28 Sep 2003 00:17:41 -0000
@@ -120,12 +120,12 @@
 static map_t visibility_map [] = {
 	{ TYPE_ATTRIBUTE_NOT_PUBLIC,           "private " },
 	{ TYPE_ATTRIBUTE_PUBLIC,               "public " },
-	{ TYPE_ATTRIBUTE_NESTED_PUBLIC,        "nested-public " },
-	{ TYPE_ATTRIBUTE_NESTED_PRIVATE,       "nested-private " },
+	{ TYPE_ATTRIBUTE_NESTED_PUBLIC,        "nested public " },
+	{ TYPE_ATTRIBUTE_NESTED_PRIVATE,       "nested private " },
 	{ TYPE_ATTRIBUTE_NESTED_FAMILY,        "family " },
-	{ TYPE_ATTRIBUTE_NESTED_ASSEMBLY,      "nested-assembly" },
-	{ TYPE_ATTRIBUTE_NESTED_FAM_AND_ASSEM, "nested-fam-and-assembly" },
-	{ TYPE_ATTRIBUTE_NESTED_FAM_OR_ASSEM,  "nested-fam-or-assembly" },
+	{ TYPE_ATTRIBUTE_NESTED_ASSEMBLY,      "nested assembly" },
+	{ TYPE_ATTRIBUTE_NESTED_FAM_AND_ASSEM, "nested famandassem" },
+	{ TYPE_ATTRIBUTE_NESTED_FAM_OR_ASSEM,  "nested famorassem" },
 	{ 0, NULL }
 };
 
@@ -452,7 +452,7 @@
 
 			scope = mono_metadata_string_heap (m, mr_cols [MONO_MODULEREF_NAME]);
 				
-			return g_strdup_printf ("(%s as %s %s)", scope, import,
+			return g_strdup_printf ("(\"%s\" as \"%s\" %s)", scope, import,
 						flags);
 			g_free (flags);
 		}
@@ -614,11 +614,9 @@
 	type = mono_metadata_parse_type (m, MONO_PARSE_TYPE, 0, ptr, &ptr);
 	blurb = dis_stringify_type (m, type);
 	if (prop_flags & 0x0200)
-		g_string_append (res, "special ");
+		g_string_append (res, "specialname ");
 	if (prop_flags & 0x0400)
-		g_string_append (res, "runtime ");
-	if (prop_flags & 0x1000)
-		g_string_append (res, "hasdefault ");
+		g_string_append (res, "rtspecialname ");
 	g_string_sprintfa (res, "%s %s (", blurb, name);
 	g_free (blurb);
 	mono_metadata_free_type (type);
@@ -882,6 +880,56 @@
 	fprintf (output, "\n");
 }
 
+
+/**
+ * dis_globals
+ * @m: metadata context
+ *
+ * disassembles all the global fields and methods
+ */
+static void
+dis_globals (MonoImage *m)
+{
+        MonoTableInfo *t = &m->tables [MONO_TABLE_TYPEDEF];
+	guint32 cols [MONO_TYPEDEF_SIZE];
+	guint32 cols_next [MONO_TYPEDEF_SIZE];
+	gboolean next_is_valid, last;
+        gchar *name;
+
+        name = g_strdup ("<Module>");
+
+        mono_metadata_decode_row (t, 0, cols, MONO_TYPEDEF_SIZE);
+
+	if (t->rows > 1) {
+		mono_metadata_decode_row (t, 1, cols_next, MONO_TYPEDEF_SIZE);
+		next_is_valid = 1;
+	} else
+		next_is_valid = 0;
+        
+	/*
+	 * The value in the table is always valid, we know we have fields
+	 * if the value stored is different than the next record.
+	 */
+
+	if (next_is_valid)
+		last = cols_next [MONO_TYPEDEF_FIELD_LIST] - 1;
+	else
+		last = m->tables [MONO_TABLE_FIELD].rows;
+			
+	if (cols [MONO_TYPEDEF_FIELD_LIST] && cols [MONO_TYPEDEF_FIELD_LIST] <= m->tables [MONO_TABLE_FIELD].rows)
+		dis_field_list (m, cols [MONO_TYPEDEF_FIELD_LIST] - 1, last);
+	fprintf (output, "\n");
+
+	if (next_is_valid)
+		last = cols_next [MONO_TYPEDEF_METHOD_LIST] - 1;
+	else
+		last = m->tables [MONO_TABLE_METHOD].rows;
+	
+	if (cols [MONO_TYPEDEF_METHOD_LIST] && cols [MONO_TYPEDEF_METHOD_LIST] <= m->tables [MONO_TABLE_METHOD].rows)
+		dis_method_list (name, m, cols [MONO_TYPEDEF_METHOD_LIST] - 1, last);
+
+}
+
 /**
  * dis_types:
  * @m: metadata context
@@ -895,6 +943,8 @@
 	int i;
 	guint32 flags;
 
+        dis_globals (m);
+        
 	for (i = 1; i < t->rows; i++) {
 		flags = mono_metadata_decode_row_col (t, i, MONO_TYPEDEF_FLAGS);
 		flags &= TYPE_ATTRIBUTE_VISIBILITY_MASK;
