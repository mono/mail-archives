<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <!-- Purpose of this specification:
       To record the abstraction syntax of R -->

  <!-- A word about conventions... 
       1. groups are interpreted as extensional declarations of sets, and named with plurals
       2. types are seen as intensional declarations of sets, and named in the singular
       3. both values and expressions are represented
          a. values are considered to be in normal form
          b. expressions may be reduced -->

  <!-- The set of prototypical R values -->

  <xs:group name="R-Values">
    <xs:choice>
      <xs:element ref="null"/>
      <xs:element ref="list"/>
      <xs:element ref="vector"/>
      <xs:element ref="promise"/>
      <xs:element ref="closure"/>
      <xs:element ref="environment"/>
      <xs:group ref="R-Statements"/>
      <xs:element ref="builtin"/>
      <xs:element ref="special"/>
      <xs:element ref="symbol"/>
      <xs:element ref="string"/>
      <xs:group ref="R-Booleans"/>
      <xs:element ref="logical"/>
      <xs:element ref="character"/>
      <xs:element ref="externalptr"/>
      <xs:element ref="weakref"/>
      <xs:element ref="raw"/>
      <xs:element ref="int"/>
      <xs:element ref="double"/>
      <xs:element ref="complex"/>
    </xs:choice>
  </xs:group>

  <!-- The set of prototypical R truth values -->

  <xs:group name="R-Booleans">
    <xs:choice>
      <xs:element ref="true"/>
      <xs:element ref="false"/>
    </xs:choice>
  </xs:group>

  <!-- The set of R formals declarations sans dotdotdot -->

  <xs:group name="R-Formals">
    <xs:choice>
      <xs:element ref="formalDecl"/>
      <xs:element ref="default"/>
    </xs:choice>
  </xs:group>

  <!-- The set of R statements sans block a.k.a. sequencing -->

  <xs:group name="R-PrimeStatements">
    <xs:choice>
      <xs:element ref="application"/>
      <xs:element ref="assignment"/>        
      <xs:element ref="conditional"/>
      <xs:element ref="switch"/>
      <xs:element ref="forloop"/>
      <xs:element ref="whileloop"/>
      <xs:element ref="repeatloop"/>
      <xs:element ref="next"/>
      <xs:element ref="break"/>
    </xs:choice>
  </xs:group>

  <!-- The complete set of R statements -->

  <xs:group name="R-Statements">
    <xs:choice>
      <xs:element ref="block"/>
      <xs:group ref="R-PrimeStatements"/>
    </xs:choice>
  </xs:group>

  <!-- The complete set of R operators -->

  <xs:group name="R-Operators">
    <xs:choice>
      <!-- - Minus, can be unary or binary -->
      <xs:element ref="minus"/>
      <!-- + Plus, can be unary or binary -->
      <xs:element ref="plus"/>
      <!-- ! Unary not -->
      <xs:element ref="not"/>
      <!-- ~ Tilde, used for model formulae, can be either unary or
	   binary -->
      <xs:element ref="tilde"/>
      <!-- ? Help -->
      <xs:element ref="help"/>
      <!-- : Sequence, binary (in model formulae: interaction) -->
      <xs:element ref="sequence"/>
      <!-- * Multiplication, binary -->
      <xs:element ref="multiplication"/>
      <!-- / Division, binary -->
      <xs:element ref="division"/>
      <!-- ^ Exponentiation, binary -->
      <xs:element ref="exponentiation"/>
      <!-- %x % Special binary operators, x can be replaced by any
	   valid name -->
      <!-- %% Modulus, binary -->
      <xs:element ref="modulus"/>
      <!-- %/% Integer divide, binary -->
      <xs:element ref="integerDivision"/>
      <!-- %*% Matrix product, binary -->
      <xs:element ref="product"/>
      <!-- %o% Outer product, binary -->
      <xs:element ref="outerProduct"/>
      <!-- %x% Kronecker product, binary -->
      <xs:element ref="kroneckerProduct"/>
      <!-- %in% Matching operator, binary (in model formulae:
	   nesting) -->
      <xs:element ref="matching"/>
      <!-- < Less than, binary -->
      <xs:element ref="lessThan"/>
      <!-- > Greater than, binary -->
      <xs:element ref="greaterThan"/>
      <!-- == Equal to, binary -->
      <xs:element ref="equal"/>
      <!-- >= Greater than or equal to, binary -->
      <xs:element ref="greaterThanEqual"/>
      <!-- <= Less than or equal to, binary -->
      <xs:element ref="lessThanEqual"/>
      <!-- & And, binary, vectorized -->
      <xs:element ref="and"/>
      <!-- && And, binary, not vectorized -->
      <xs:element ref="andPrimitive"/>
      <!-- | Or, binary, vectorized -->
      <xs:element ref="or"/>
      <!-- || Or, binary, not vectorized -->
      <xs:element ref="orPrimitive"/>
      <!-- <- Left assignment, binary -->
      <xs:element ref="leftAssignment"/>
      <!-- -> Right assignment, binaryList subset, binary -->
      <xs:element ref="rightAssignment"/>
    </xs:choice>
  </xs:group>

  <!-- The complete set of R operators -->

  <xs:complexType name="R-Value"/>

  <!-- R putatively supports logical which is both primitive and vectored.
       We break out the primitive notion here.  -->

  <xs:complexType name="R-Boolean">
    <xs:complexContent>
      <xs:extension base="R-Value">
	<xs:group ref="R-Booleans"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- R supports a notion of raw data which is a vector of bytes.
       We break out the notion of byte here. -->

  <xs:complexType name="R-Byte">
    <xs:complexContent>
      <xs:extension base="R-Value"/>
    </xs:complexContent>
  </xs:complexType>


  <!-- R supports a notion of character, but i don't know how this is
       mapped to different charsets or localization. -->

  <xs:complexType name="R-Character">
    <xs:complexContent>
      <xs:extension base="R-Value"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- i still need to understand how notions of typing in R... -->

  <xs:complexType name="R-Numeric">
    <xs:complexContent>
      <xs:extension base="R-Value"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- R supports a notion of integer -->

  <xs:complexType name="R-Integer">
    <xs:complexContent>
      <xs:extension base="R-Numeric"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- R supports a notion of double, what about bignum? -->

  <xs:complexType name="R-Double">
    <xs:complexContent>
      <xs:extension base="R-Numeric"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- R supports a notion of complex. 
       Ok, if we're going to start down this path... why not build in support for
       Clifford and or Geometric algebra...? -->

  <xs:complexType name="R-Complex">
    <xs:complexContent>
      <xs:extension base="R-Numeric"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- R supports a notion of external pointer
       What sort of use can we make of this...
       How does this interact with garbage collection?
       Can we make it work for distribution...? -->

  <xs:complexType name="R-ExternalPtr">
    <xs:complexContent>
      <xs:extension base="R-Value"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- R supports a notion of weak references ...
       without proper collections what is the point? -->

  <xs:complexType name="R-WeakRef">
    <xs:complexContent>
      <xs:extension base="R-Value"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- Need to track down and document builtins apart from the operators -->

  <xs:complexType name="R-Builtin">
    <xs:complexContent>
      <xs:extension base="R-Value"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- i understand the historical reasons for special, but since everything has attributes
       why not take the Mathematica approach and have 'freeze' attributes? -->

  <xs:complexType name="R-Special">
    <xs:complexContent>
      <xs:extension base="R-Builtin"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- We could consider rationalizing the operators but a lot of code would be impacted... -->

  <xs:complexType name="R-Operator">
    <xs:complexContent>
      <xs:extension base="R-Builtin"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- Standard functional stuff... -->

  <xs:complexType name="R-Symbol">
    <xs:complexContent>
      <xs:extension base="R-Value"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- The collection types need to be seriously revamped... 
       why are there no hashtable, for example -->

  <xs:complexType name="R-Collection">
    <xs:complexContent>
      <xs:extension base="R-Value"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- We will also need to consider polymorphism relative to the collection types -->

  <xs:complexType name="R-List">
    <xs:complexContent>
      <xs:extension base="R-Collection">
	<xs:sequence minOccurs="0" maxOccurs="unbounded">
	  <xs:group ref="R-Values"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- Can probably eliminate this from the schema... -->

  <xs:complexType name="R-Application">
    <xs:complexContent>
      <xs:extension base="R-List"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- Need to do a deep analysis of list and vector functions -->

  <xs:complexType name="R-Vector">
    <xs:complexContent>
      <xs:extension base="R-Collection">
	<xs:sequence minOccurs="0" maxOccurs="unbounded">
	  <xs:group ref="R-Values"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- Strings are vectors of characters in R... well done! -->

  <xs:complexType name="R-String">
    <xs:complexContent>
      <xs:extension base="R-Vector"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- Logicals are vectors of booleans in R... well done! -->

  <xs:complexType name="R-Logical">
    <xs:complexContent>
      <xs:extension base="R-Vector"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- Raw is vector of bytes in R... well done! -->

  <xs:complexType name="R-Raw">
    <xs:complexContent>
      <xs:extension base="R-Vector"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- Standard notion of closure -->

  <xs:complexType name="R-Closure">
    <xs:complexContent>
      <xs:extension base="R-Value">
	<xs:sequence>
	  <xs:element ref="formals"/>
	  <xs:element ref="block"/>
	  <xs:element ref="environment"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- Standard notion of memoized lazy evaluation -->

  <xs:complexType name="R-Promise">
    <xs:complexContent>
      <xs:extension base="R-Value">
	<xs:sequence>
	  <xs:group ref="R-Values"/>
	  <xs:group ref="R-Statements"/>
	  <xs:element ref="environment"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- Again, R collection types need to be considerably revamped -->

  <xs:complexType name="R-LookupStructure">
    <xs:complexContent>
      <xs:extension base="R-Value">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- For example, assoclists are everywhere where you'd normally expect hashtables -->

  <xs:complexType name="R-PairList">
    <xs:complexContent>
      <xs:extension base="R-LookupStructure">
	<xs:sequence minOccurs="0" maxOccurs="unbounded">
	  <xs:element ref="nameValuePair"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="R-NameValuePair">
    <xs:complexContent>
      <xs:extension base="R-Value">
	<xs:sequence>
	  <xs:element ref="symbol"/>
	  <xs:group ref="R-Values"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- This is pitifully far behind the times... -->

  <xs:complexType name="R-Environment">
    <xs:complexContent>
      <xs:extension base="R-Value">
	<xs:sequence>
	  <xs:element name="frame" type="R-LookupStructure"/>
	  <xs:element name="enclosure" type="R-Environment"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- Root of the expression types -->

  <xs:complexType name="R-Expr">
    <xs:complexContent>
      <xs:extension base="R-Value"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- Basis of function call -->

  <xs:complexType name="R-ApplicationExpr">
    <xs:complexContent>
      <xs:extension base="R-Expr"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- As near as i can tell, assignment is 'let' -->

  <xs:complexType name="R-AssignmentExpr">
    <xs:complexContent>
      <xs:extension base="R-Expr">
	<xs:sequence>
	  <xs:element ref="symbol"/>
	  <xs:group ref="R-Values"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- R supports both standard if-then-else and a quirky switch form -->

  <xs:complexType name="R-BranchingExpr">
    <xs:complexContent>
      <xs:extension base="R-Expr">
	<xs:sequence>
	  <xs:group ref="R-Values"/>
	  <xs:sequence minOccurs="1" maxOccurs="unbounded">
	    <xs:group ref="R-Values"/>
	  </xs:sequence>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="R-IfExpr">
    <xs:complexContent>
      <xs:extension base="R-BranchingExpr"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="R-SwitchExpr">
    <xs:complexContent>
      <xs:extension base="R-BranchingExpr"/>
    </xs:complexContent>
  </xs:complexType>

  <!-- R supports three relatively standard looping forms
       1. for-loops - like foreach in C#
       2. while-loops
       3. repeat - (while (true) body) -->

  <xs:complexType name="R-LoopExpr">
    <xs:complexContent>
      <xs:extension base="R-Expr">
	<xs:sequence minOccurs="1" maxOccurs="1">
	  <xs:group ref="R-Values"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="R-ForLoopExpr">
    <xs:complexContent>
      <xs:extension base="R-LoopExpr">
	<xs:sequence>
	  <xs:element ref="symbol"/>
	  <xs:element ref="vector"/>
	  <xs:group ref="R-Statements"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="R-WhileLoopExpr">
    <xs:complexContent>
      <xs:extension base="R-LoopExpr">
	<xs:sequence>
	  <xs:group ref="R-PrimeStatements"/>
	  <xs:group ref="R-Statements"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="R-RepeatExpr">
    <xs:complexContent>
      <xs:extension base="R-LoopExpr">
	<xs:sequence>
	  <xs:group ref="R-Statements"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- R supports to relatively standard additional control expressions
       1. break
       2. continue -->

  <xs:complexType name="R-BreakExpr">
    <xs:complexContent>
      <xs:extension base="R-Expr">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="R-NextExpr">
    <xs:complexContent>
      <xs:extension base="R-Expr">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- Formals are one of
       1. symbols
       2. symbol = expr
       3. ... -->

  <xs:complexType name="R-FormalsList">
    <xs:complexContent>
      <xs:extension base="R-Expr">
	<xs:sequence>
	  <xs:sequence  minOccurs="0" maxOccurs="unbounded">
	    <xs:group ref="R-Formals"/>
	  </xs:sequence>
	  <xs:element ref="dotdotdot" minOccurs="0" maxOccurs="1"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="R-FormalExpr">
    <xs:complexContent>
      <xs:extension base="R-Expr"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="R-Variable">
    <xs:complexContent>
      <xs:extension base="R-FormalExpr">
	<xs:sequence minOccurs="1" maxOccurs="1">
	  <xs:element ref="symbol"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="R-DefaultExpr">
    <xs:complexContent>
      <xs:extension base="R-FormalExpr">
	<xs:sequence minOccurs="1" maxOccurs="1">
	  <xs:element ref="nameValuePair"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="R-DotdotdotExpr">
    <xs:complexContent>
      <xs:extension base="R-FormalExpr">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- R supports a notion of sequencing of expressions
       Note on the nomenclature above:
       Sequencing is a monoid, the prime elements of which are those statements
       which are not blocks -->

  <xs:complexType name="R-BlockExpr">
    <xs:complexContent>
      <xs:extension base="R-Expr">
	<xs:sequence minOccurs="0" maxOccurs="unbounded">
	  <xs:group ref="R-Statements"/>
	</xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="null" type="R-Value"/>
  <xs:element name="true" type="R-Boolean"/>
  <xs:element name="false" type="R-Boolean"/>
  <xs:element name="vector" type="R-Vector"/>
  <xs:element name="list" type="R-List"/>
  <xs:element name="promise" type="R-Promise"/>
  <xs:element name="closure" type="R-Closure"/>
  <xs:element name="environment" type="R-Environment"/>
  <xs:element name="formals" type="R-FormalsList"/>
  <xs:element name="block" type="R-BlockExpr"/>
  <xs:element name="application" type="R-ApplicationExpr"/>
  <xs:element name="assignment" type="R-AssignmentExpr"/>
  <xs:element name="conditional" type="R-IfExpr"/>
  <xs:element name="switch" type="R-SwitchExpr"/>
  <xs:element name="forloop" type="R-ForLoopExpr"/>
  <xs:element name="whileloop" type="R-WhileLoopExpr"/>
  <xs:element name="repeatloop" type="R-RepeatExpr"/>
  <xs:element name="next" type="R-NextExpr"/>
  <xs:element name="break" type="R-BreakExpr"/>
  <xs:element name="formalDecl" type="R-Variable"/>
  <xs:element name="default" type="R-DefaultExpr"/>
  <xs:element name="dotdotdot" type="R-DotdotdotExpr"/>
  <xs:element name="nameValuePair" type="R-NameValuePair"/>
  <xs:element name="builtin" type="R-Builtin"/>
  <xs:element name="special" type="R-Special"/>
  <xs:element name="symbol" type="R-Symbol"/>
  <xs:element name="string" type="R-String"/>
  <xs:element name="logical" type="R-Logical"/>
  <xs:element name="character" type="R-Character"/>
  <xs:element name="externalptr" type="R-ExternalPtr"/>
  <xs:element name="weakref" type="R-WeakRef"/>
  <xs:element name="raw" type="R-Raw"/>
  <xs:element name="int" type="R-Integer"/>
  <xs:element name="double" type="R-Double"/>
  <xs:element name="complex" type="R-Complex"/>

  <!-- - Minus, can be unary or binary -->
  <xs:element name="minus" type="R-Operator"/>
  <!-- + Plus, can be unary or binary -->
  <xs:element name="plus" type="R-Operator"/>
  <!-- ! Unary not -->
  <xs:element name="not" type="R-Operator"/>
  <!-- ~ Tilde, used for model formulae, can be either unary or
       binary -->
  <xs:element name="tilde" type="R-Operator"/>
  <!-- ? Help -->
  <xs:element name="help" type="R-Operator"/>
  <!-- : Sequence, binary (in model formulae: interaction) -->
  <xs:element name="sequence" type="R-Operator"/>
  <!-- * Multiplication, binary -->
  <xs:element name="multiplication" type="R-Operator"/>
  <!-- / Division, binary -->
  <xs:element name="division" type="R-Operator"/>
  <!-- ^ Exponentiation, binary -->
  <xs:element name="exponentiation" type="R-Operator"/>
  <!-- %x % Special binary operators, x can be replaced by any
       valid name -->
  <!-- %% Modulus, binary -->
  <xs:element name="modulus" type="R-Operator"/>
  <!-- %/% Integer divide, binary -->
  <xs:element name="integerDivision" type="R-Operator"/>
  <!-- %*% Matrix product, binary -->
  <xs:element name="product" type="R-Operator"/>
  <!-- %o% Outer product, binary -->
  <xs:element name="outerProduct" type="R-Operator"/>
  <!-- %x% Kronecker product, binary -->
  <xs:element name="kroneckerProduct" type="R-Operator"/>
  <!-- %in% Matching operator, binary (in model formulae:
       nesting) -->
  <xs:element name="matching" type="R-Operator"/>
  <!-- < Less than, binary -->
  <xs:element name="lessThan" type="R-Operator"/>
  <!-- > Greater than, binary -->
  <xs:element name="greaterThan" type="R-Operator"/>
  <!-- == Equal to, binary -->
  <xs:element name="equal" type="R-Operator"/>
  <!-- >= Greater than or equal to, binary -->
  <xs:element name="greaterThanEqual" type="R-Operator"/>
  <!-- <= Less than or equal to, binary -->
  <xs:element name="lessThanEqual" type="R-Operator"/>
  <!-- & And, binary, vectorized -->
  <xs:element name="and" type="R-Operator"/>
  <!-- && And, binary, not vectorized -->
  <xs:element name="andPrimitive" type="R-Operator"/>
  <!-- | Or, binary, vectorized -->
  <xs:element name="or" type="R-Operator"/>
  <!-- || Or, binary, not vectorized -->
  <xs:element name="orPrimitive" type="R-Operator"/>
  <!-- <- Left assignment, binary -->
  <xs:element name="leftAssignment" type="R-Operator"/>
  <!-- -> Right assignment, binaryList subset, binary -->
  <xs:element name="rightAssignment" type="R-Operator"/>
</xs:schema>