diff --git a/mcs/class/System/System.Collections.ObjectModel/ObservableCollection.cs b/mcs/class/System/System.Collections.ObjectModel/ObservableCollection.cs
index 6c26e87..3292690 100644
--- a/mcs/class/System/System.Collections.ObjectModel/ObservableCollection.cs
+++ b/mcs/class/System/System.Collections.ObjectModel/ObservableCollection.cs
@@ -40,30 +40,33 @@ namespace System.Collections.ObjectModel
 #endif
 	public class ObservableCollection<T> : Collection<T>, INotifyCollectionChanged, INotifyPropertyChanged {
 		[Serializable]
-		sealed class Reentrant : IDisposable {
-			private int count = 0;
+#if !MOBILE
+	[TypeForwardedFrom (Consts.WindowsBase_3_0)]
+#endif
+		sealed class SimpleMonitor : IDisposable {
+			private int _busyCount = 0;
 
-			public Reentrant()
+			public SimpleMonitor()
 			{
 			}
 
 			public void Enter()
 			{
-				count++;
+				_busyCount++;
 			}
 
 			public void Dispose()
 			{
-				count--;
+				_busyCount--;
 			}
 
 			public bool Busy
 			{
-				get { return count > 0; }
+				get { return _busyCount > 0; }
 			}
 		}
 
-		private Reentrant reentrant = new Reentrant ();
+		private SimpleMonitor _monitor = new SimpleMonitor ();
 
 		public ObservableCollection ()
 		{
@@ -83,7 +86,9 @@ namespace System.Collections.ObjectModel
 		{
 		}
 
+		[field:NonSerializedAttribute()]
 		public virtual event NotifyCollectionChangedEventHandler CollectionChanged;
+		[field:NonSerializedAttribute()]
 		protected virtual event PropertyChangedEventHandler PropertyChanged;
 
 		event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged {
@@ -93,8 +98,8 @@ namespace System.Collections.ObjectModel
 
 		protected IDisposable BlockReentrancy ()
 		{
-			reentrant.Enter ();
-			return reentrant;
+			_monitor.Enter ();
+			return _monitor;
 		}
 
 		protected void CheckReentrancy ()
@@ -102,7 +107,7 @@ namespace System.Collections.ObjectModel
 			NotifyCollectionChangedEventHandler eh = CollectionChanged;
 
 			// Only have a problem if we have more than one event listener.
-			if (reentrant.Busy && eh != null && eh.GetInvocationList ().Length > 1)
+			if (_monitor.Busy && eh != null && eh.GetInvocationList ().Length > 1)
 				throw new InvalidOperationException ("Cannot modify the collection while reentrancy is blocked.");
 		}
 
diff --git a/mcs/class/corlib/System.Collections.ObjectModel/Collection.cs b/mcs/class/corlib/System.Collections.ObjectModel/Collection.cs
index b9d6a3e..6a57a75 100644
--- a/mcs/class/corlib/System.Collections.ObjectModel/Collection.cs
+++ b/mcs/class/corlib/System.Collections.ObjectModel/Collection.cs
@@ -53,7 +53,8 @@ namespace System.Collections.ObjectModel
 		, IReadOnlyList<T>
 #endif
 	{
-		IList <T> list;
+		IList <T> items;
+		[field:NonSerializedAttribute()]
 		object syncRoot;
 		
 		public Collection ()
@@ -61,21 +62,21 @@ namespace System.Collections.ObjectModel
 			List <T> l = new List <T> ();
 			IList l2 = l as IList;
 			syncRoot = l2.SyncRoot;
-			list = l;
+			items = l;
 		}
 
-		public Collection (IList <T> list)
+		public Collection (IList <T> items)
 		{
-			if (list == null)
-				throw new ArgumentNullException ("list");
-			this.list = list;
-			ICollection l = list as ICollection;
+			if (items == null)
+				throw new ArgumentNullException ("items");
+			this.items = items;
+			ICollection l = items as ICollection;
 			syncRoot = (l != null) ? l.SyncRoot : new object ();
 		}
 
 		public void Add (T item)
 		{
-			int idx = list.Count;
+			int idx = items.Count;
 			InsertItem (idx, item);
 		}
 
@@ -86,27 +87,27 @@ namespace System.Collections.ObjectModel
 
 		protected virtual void ClearItems ()
 		{
-			list.Clear ();
+			items.Clear ();
 		}
 
 		public bool Contains (T item)
 		{
-			return list.Contains (item);
+			return items.Contains (item);
 		}
 
 		public void CopyTo (T [] array, int index)
 		{
-			list.CopyTo (array, index);
+			items.CopyTo (array, index);
 		}
 
 		public IEnumerator <T> GetEnumerator ()
 		{
-			return list.GetEnumerator ();
+			return items.GetEnumerator ();
 		}
 
 		public int IndexOf (T item)
 		{
-			return list.IndexOf (item);
+			return items.IndexOf (item);
 		}
 
 		public void Insert (int index, T item)
@@ -116,11 +117,11 @@ namespace System.Collections.ObjectModel
 
 		protected virtual void InsertItem (int index, T item)
 		{
-			list.Insert (index, item);
+			items.Insert (index, item);
 		}
 
 		protected IList<T> Items {
-			get { return list; }
+			get { return items; }
 		}
 
 		public bool Remove (T item)
@@ -141,25 +142,25 @@ namespace System.Collections.ObjectModel
 
 		protected virtual void RemoveItem (int index)
 		{
-			list.RemoveAt (index);
+			items.RemoveAt (index);
 		}
 
 		public int Count {
-			get { return list.Count; }
+			get { return items.Count; }
 		}
 
 		public T this [int index] {
-			get { return list [index]; }
+			get { return items [index]; }
 			set { SetItem (index, value); }
 		}
 
 		bool ICollection<T>.IsReadOnly {
-			get { return list.IsReadOnly; }
+			get { return items.IsReadOnly; }
 		}
 
 		protected virtual void SetItem (int index, T item)
 		{
-			list[index] = item;
+			items[index] = item;
 		}
 
 		
@@ -172,21 +173,21 @@ namespace System.Collections.ObjectModel
 			throw new ArgumentException ("item");
 		}
 		
-		internal static void CheckWritable (IList <T> list)
+		internal static void CheckWritable (IList <T> items)
 		{
-			if (list.IsReadOnly)
+			if (items.IsReadOnly)
 				throw new NotSupportedException ();
 		}
 		
-		internal static bool IsSynchronized (IList <T> list)
+		internal static bool IsSynchronized (IList <T> items)
 		{
-			ICollection c = list as ICollection;
+			ICollection c = items as ICollection;
 			return (c != null) ? c.IsSynchronized : false;
 		}
 		
-		internal static bool IsFixedSize (IList <T> list)
+		internal static bool IsFixedSize (IList <T> items)
 		{
-			IList l = list as IList;
+			IList l = items as IList;
 			return (l != null) ? l.IsFixedSize : false;
 		}
 #endregion
@@ -194,17 +195,17 @@ namespace System.Collections.ObjectModel
 #region Not generic interface implementations
 		void ICollection.CopyTo (Array array, int index)
 		{
-			((ICollection)list).CopyTo (array, index);
+			((ICollection)items).CopyTo (array, index);
 		}
 		
 		IEnumerator IEnumerable.GetEnumerator ()
 		{
-			return (IEnumerator) list.GetEnumerator ();
+			return (IEnumerator) items.GetEnumerator ();
 		}
 				
 		int IList.Add (object value)
 		{
-			int idx = list.Count;
+			int idx = items.Count;
 			InsertItem (idx, ConvertItem (value));
 			return idx;
 		}
@@ -212,14 +213,14 @@ namespace System.Collections.ObjectModel
 		bool IList.Contains (object value)
 		{
 			if (CollectionHelpers.IsValidItem<T> (value))
-				return list.Contains ((T) value);
+				return items.Contains ((T) value);
 			return false;
 		}
 		
 		int IList.IndexOf (object value)
 		{
 			if (CollectionHelpers.IsValidItem<T> (value))
-				return list.IndexOf ((T) value);
+				return items.IndexOf ((T) value);
 			return -1;
 		}
 		
@@ -230,7 +231,7 @@ namespace System.Collections.ObjectModel
 		
 		void IList.Remove (object value)
 		{
-			CheckWritable (list);
+			CheckWritable (items);
 
 			int idx = IndexOf (ConvertItem (value));
 
@@ -238,22 +239,22 @@ namespace System.Collections.ObjectModel
 		}
 		
 		bool ICollection.IsSynchronized {
-			get { return IsSynchronized (list); }
+			get { return IsSynchronized (items); }
 		}
 		
 		object ICollection.SyncRoot {
 			get { return syncRoot; }
 		}
 		bool IList.IsFixedSize {
-			get { return IsFixedSize (list); }
+			get { return IsFixedSize (items); }
 		}
 		
 		bool IList.IsReadOnly {
-			get { return list.IsReadOnly; }
+			get { return items.IsReadOnly; }
 		}
 		
 		object IList.this [int index] {
-			get { return list [index]; }
+			get { return items [index]; }
 			set { SetItem (index, ConvertItem (value)); }
 		}
 #endregion
diff --git a/mcs/class/corlib/System.Runtime.Serialization.Formatters.Binary/CodeGenerator.cs b/mcs/class/corlib/System.Runtime.Serialization.Formatters.Binary/CodeGenerator.cs
index fd38471..671c196 100644
--- a/mcs/class/corlib/System.Runtime.Serialization.Formatters.Binary/CodeGenerator.cs
+++ b/mcs/class/corlib/System.Runtime.Serialization.Formatters.Binary/CodeGenerator.cs
@@ -115,8 +115,13 @@ namespace System.Runtime.Serialization.Formatters.Binary
 					// EMIT ow.WriteAssembly (writer, memberType.Assembly);
 					gen.Emit (OpCodes.Ldarg_1);
 					gen.Emit (OpCodes.Ldarg_2);
+#if NET_4_0
+					EmitLoadType (gen, memberType);
+					gen.EmitCall (OpCodes.Callvirt, typeof(ObjectWriter).GetMethod("WriteTypeAssembly"), null);
+#else
 					EmitLoadTypeAssembly (gen, memberType, field.Name);
 					gen.EmitCall (OpCodes.Callvirt, typeof(ObjectWriter).GetMethod("WriteAssembly"), null);
+#endif
 					gen.Emit (OpCodes.Pop);
 				}
 			}
@@ -292,8 +297,14 @@ namespace System.Runtime.Serialization.Formatters.Binary
 					// EMIT writer.Write ((int)ow.GetAssemblyId (type.Assembly));
 					gen.Emit (OpCodes.Ldarg_2);
 					gen.Emit (OpCodes.Ldarg_1);
+#if NET_4_0
+					EmitLoadType (gen, type);
+					gen.EmitCall (OpCodes.Callvirt, typeof(GetForwardedAttribute).GetMethod("GetAssemblyName"), null);
+					gen.EmitCall (OpCodes.Callvirt, typeof(ObjectWriter).GetMethod("GetAssemblyNameId"), null);
+#else
 					EmitLoadTypeAssembly (gen, type, member);
 					gen.EmitCall (OpCodes.Callvirt, typeof(ObjectWriter).GetMethod("GetAssemblyId"), null);
+#endif
 					gen.Emit (OpCodes.Conv_I4);
 					EmitWrite (gen, typeof(int));
 					break;
@@ -318,6 +329,12 @@ namespace System.Runtime.Serialization.Formatters.Binary
 			gen.EmitCall (OpCodes.Callvirt, typeof(Type).GetProperty("Assembly").GetGetMethod(), null);
 		}
 		
+		static void EmitLoadType (ILGenerator gen, Type type)
+		{
+			gen.Emit (OpCodes.Ldtoken, type);
+			gen.EmitCall (OpCodes.Call, typeof(Type).GetMethod("GetTypeFromHandle"), null);
+		}
+		
 		static void EmitWrite (ILGenerator gen, Type type)
 		{
 			gen.EmitCall (OpCodes.Callvirt, typeof(BinaryWriter).GetMethod("Write", new Type[] { type }), null);
diff --git a/mcs/class/corlib/System.Runtime.Serialization.Formatters.Binary/ObjectWriter.cs b/mcs/class/corlib/System.Runtime.Serialization.Formatters.Binary/ObjectWriter.cs
index 9d3c42b..c5bf658 100644
--- a/mcs/class/corlib/System.Runtime.Serialization.Formatters.Binary/ObjectWriter.cs
+++ b/mcs/class/corlib/System.Runtime.Serialization.Formatters.Binary/ObjectWriter.cs
@@ -35,9 +35,25 @@ using System.Runtime.Serialization;
 using System.Runtime.Remoting.Messaging;
 using System.Reflection;
 using System.Globalization;
+using System.Runtime.CompilerServices;
 
 namespace System.Runtime.Serialization.Formatters.Binary
 {
+#if NET_4_0
+	public class GetForwardedAttribute
+	{
+		public static string GetAssemblyName (Type self) 
+		{
+			var attrs = self.GetCustomAttributes(
+					typeof (TypeForwardedFromAttribute), false);
+			if (attrs.Length == 0)
+				return self.Assembly.FullName;
+			else
+				return ((TypeForwardedFromAttribute)attrs [0]).AssemblyFullName;
+		}
+	}
+#endif
+
 	abstract class TypeMetadata
 	{
 		public string TypeAssemblyName;
@@ -73,7 +89,11 @@ namespace System.Runtime.Serialization.Formatters.Binary
 		{
 			InstanceType = instanceType;
 			InstanceTypeName = instanceType.FullName;
+#if NET_4_0
+			TypeAssemblyName = GetForwardedAttribute.GetAssemblyName(instanceType);
+#else
 			TypeAssemblyName = instanceType.Assembly.FullName;
+#endif
 		}
 		
 		public override bool RequiresTypes {
@@ -102,7 +122,11 @@ namespace System.Runtime.Serialization.Formatters.Binary
 			}
 
 			TypeAssemblyName = info.AssemblyName;
+#if NET_4_0
+			InstanceTypeName = GetForwardedAttribute.GetAssemblyName(itype);
+#else
 			InstanceTypeName = info.FullTypeName;
+#endif
 		}
 		
 		public override bool IsCompatible (TypeMetadata other)
@@ -129,7 +153,7 @@ namespace System.Runtime.Serialization.Formatters.Binary
 				while (type.IsArray) 
 					type = type.GetElementType();
 					
-				ow.WriteAssembly (writer, type.Assembly);
+				ow.WriteTypeAssembly (writer, type);
 			}
 		}
 		
@@ -142,7 +166,7 @@ namespace System.Runtime.Serialization.Formatters.Binary
 				writer.Write (name);
 
 			// Types of fields
-			foreach (Type type in types)
+			foreach (Type type in types) 
 				ObjectWriter.WriteTypeCode (writer, type);
 
 			// Type specs of fields
@@ -181,7 +205,7 @@ namespace System.Runtime.Serialization.Formatters.Binary
 				while (type.IsArray) 
 					type = type.GetElementType();
 					
-				ow.WriteAssembly (writer, type.Assembly);
+				ow.WriteTypeAssembly (writer, type);
 			}
 		}
 		
@@ -511,7 +535,7 @@ namespace System.Runtime.Serialization.Formatters.Binary
 
 			var tag = GetTypeTag (elementType);
 			if ((tag != TypeTag.ArrayOfObject) && (tag != TypeTag.ArrayOfString) && (tag != TypeTag.ArrayOfPrimitiveType))
-				WriteAssembly (writer, elementType.Assembly);
+				WriteTypeAssembly (writer, elementType);
 
 			// Writes the array
 
@@ -809,6 +833,15 @@ namespace System.Runtime.Serialization.Formatters.Binary
 			writer.Write (str);
 		}
 
+		public int WriteTypeAssembly (BinaryWriter writer, Type aType)
+		{
+#if NET_4_0
+			return WriteAssemblyName (writer, GetForwardedAttribute.GetAssemblyName(aType));
+#else
+			return WriteAssemblyName (writer, aType.Assembly.FullName);
+#endif
+		}
+		
 		public int WriteAssembly (BinaryWriter writer, Assembly assembly)
 		{
 			return WriteAssemblyName (writer, assembly.FullName);
@@ -994,7 +1027,12 @@ namespace System.Runtime.Serialization.Formatters.Binary
 
 				case TypeTag.GenericType:
 					writer.Write (type.FullName);
+#if NET_4_0
+					string asmName = GetForwardedAttribute.GetAssemblyName(type);
+					writer.Write ((int) GetAssemblyNameId (asmName));
+#else
 					writer.Write ((int)GetAssemblyId (type.Assembly));
+#endif
 					break;
 
 				case TypeTag.ArrayOfPrimitiveType:
