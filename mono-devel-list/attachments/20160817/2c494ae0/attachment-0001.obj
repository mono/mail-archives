From 4170993d7823e7cb18cc9e8571b6e678d8874748 Mon Sep 17 00:00:00 2001
From: Craig McQueen <craig.mcqueen@innerrange.com>
Date: Wed, 17 Aug 2016 15:06:57 +1000
Subject: [PATCH] Fix so timers work through system time change

This makes timers operate against CLOCK_MONOTONIC rather than the
default of using system time (CLOCK_REALTIME).

https://bugzilla.xamarin.com/show_bug.cgi?id=3025
---
 mono/io-layer/handles.c    |  2 +-
 mono/utils/mono-os-mutex.h | 44 +++++++++++++++++++++++++++++++++++---------
 2 files changed, 36 insertions(+), 10 deletions(-)

diff --git a/mono/io-layer/handles.c b/mono/io-layer/handles.c
index 3cb0a73..650311f 100644
--- a/mono/io-layer/handles.c
+++ b/mono/io-layer/handles.c
@@ -347,7 +347,7 @@ static void _wapi_handle_init (struct _WapiHandleUnshared *handle,
 	handle->ref = 1;
 	
 	if (!_WAPI_SHARED_HANDLE(type)) {
-		thr_ret = pthread_cond_init (&handle->signal_cond, NULL);
+		thr_ret = mono_os_cond_init (&handle->signal_cond);
 		g_assert (thr_ret == 0);
 				
 		thr_ret = mono_os_mutex_init (&handle->signal_mutex);
diff --git a/mono/utils/mono-os-mutex.h b/mono/utils/mono-os-mutex.h
index 5366405..f344dea 100644
--- a/mono/utils/mono-os-mutex.h
+++ b/mono/utils/mono-os-mutex.h
@@ -88,7 +88,18 @@ mono_os_mutex_unlock (mono_mutex_t *mutex)
 static inline int
 mono_os_cond_init (mono_cond_t *cond)
 {
+#ifdef CLOCK_MONOTONIC
+	pthread_condattr_t attr;
+	int res;
+
+	pthread_condattr_init(&attr);
+	pthread_condattr_setclock(&attr, CLOCK_MONOTONIC);
+	res = pthread_cond_init (cond, &attr);
+	pthread_condattr_destroy(&attr);
+	return res;
+#else
 	return pthread_cond_init (cond, NULL);
+#endif
 }
 
 static inline int
@@ -113,7 +124,7 @@ mono_os_cond_timedwait (mono_cond_t *cond, mono_mutex_t *mutex, guint32 timeout_
 {
 	struct timeval tv;
 	struct timespec ts;
-	gint64 usecs;
+	gint64 nsecs;
 	int res;
 
 	if (timeout_ms == (guint32) 0xFFFFFFFF)
@@ -121,15 +132,30 @@ mono_os_cond_timedwait (mono_cond_t *cond, mono_mutex_t *mutex, guint32 timeout_
 
 	/* ms = 10^-3, us = 10^-6, ns = 10^-9 */
 
-	gettimeofday (&tv, NULL);
-	tv.tv_sec += timeout_ms / 1000;
-	usecs = tv.tv_usec + ((timeout_ms % 1000) * 1000);
-	if (usecs >= 1000000) {
-		usecs -= 1000000;
-		tv.tv_sec ++;
+#ifdef CLOCK_MONOTONIC
+	/* If clock_gettime() fails, it should only be in the case
+	 * that CLOCK_MONOTONIC is not supported.  If this happens,
+	 * then the pthread_condattr_setclock() in handles.c should
+	 * also fail with EINVAL, which will then revert to a
+	 * CLOCK_REALTIME wait.
+	 */
+	if (clock_gettime (CLOCK_MONOTONIC, &ts) == 0) {
+		/* Got a valid struct timespec ts using CLOCK_MONOTONIC. */
+	} else
+#endif
+	{
+		/* Get ts from CLOCK_REALTIME using gettimeofday() with conversion. */
+		gettimeofday (&tv, NULL);
+		ts.tv_sec = tv.tv_sec;
+		ts.tv_nsec = tv.tv_usec * 1000;
+	}
+	ts.tv_sec += timeout_ms / 1000;
+	nsecs = ts.tv_nsec + ((timeout_ms % 1000) * 1000000);
+	if (nsecs >= 1000000000) {
+		nsecs -= 1000000000;
+		ts.tv_sec ++;
 	}
-	ts.tv_sec = tv.tv_sec;
-	ts.tv_nsec = usecs * 1000;
+	ts.tv_nsec = nsecs;
 
 	res = pthread_cond_timedwait (cond, mutex, &ts);
 	g_assert (res != EINVAL);
-- 
2.7.4

