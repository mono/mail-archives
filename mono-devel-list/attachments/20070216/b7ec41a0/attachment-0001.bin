--- Stack.cs	2006-10-03 07:00:40.000000000 +0200
+++ mono-1.2.3.20070215/mcs/class/System/System.Collections.Generic/Stack.cs	2007-02-15 22:10:32.000000000 +0100
@@ -41,9 +41,9 @@
 	[Serializable]
 	public class Stack <T> : IEnumerable <T>, ICollection, IEnumerable {
 		
-		T [] data;
-		int size;
-		int ver;
+		T [] _array;
+		int _size;
+		int _version;
 		int defaultCapacity;
 		
 		private readonly static int INITIAL_SIZE = 16;
@@ -51,7 +51,7 @@
 		public Stack ()
 		{
 #if TARGET_JVM //to work around resize (null) bug
-			data = new T [INITIAL_SIZE];
+			_array = new T [INITIAL_SIZE];
 #endif
 			defaultCapacity = INITIAL_SIZE;
 		}
@@ -62,7 +62,7 @@
 				throw new ArgumentOutOfRangeException ("count");
 
 			defaultCapacity = count;			
-			data = new T [count];
+			_array = new T [count];
 		}
 		
 		public Stack (IEnumerable <T> collection)
@@ -73,84 +73,92 @@
 			ICollection <T> col = collection as ICollection <T>;
 						
 			if (col != null) {
-				size = col.Count;
-				data = new T [size];
-				col.CopyTo (data, 0);
+				_size = col.Count;
+				_array = new T [_size];
+				col.CopyTo (_array, 0);
 			} else {
 				foreach (T t in collection)
 					Push (t);
 			}
-			defaultCapacity = size;
+			defaultCapacity = _size;
 		}
 		
 		public void Clear ()
 		{
-			if (data != null)
-				Array.Clear (data, 0, data.Length);
+			if (_array != null)
+				Array.Clear (_array, 0, _array.Length);
 			
-			size = 0;
-			ver ++;
+			_size = 0;
+			_version ++;
 		}
 		
 		public bool Contains (T t)
 		{		
-			return data != null && Array.IndexOf (data, t, 0, size) != -1;
+			return _array != null && Array.IndexOf (_array, t, 0, _size) != -1;
 		}
 		
 		public void CopyTo (T [] dest, int idx)
 		{
 			// this gets copied in the order that it is poped
-			if (data != null) {
-				Array.Copy (data, 0, dest, idx, size);
-				Array.Reverse (dest, idx, size);
+			if (_array != null) {
+				Array.Copy (_array, 0, dest, idx, _size);
+				Array.Reverse (dest, idx, _size);
 			}
 		}
 		
 		public T Peek ()
 		{
-			if (size == 0)
+			if (_size == 0)
 				throw new InvalidOperationException ();
 			
-			ver ++;
+			_version ++;
 			
-			return data [size - 1];
+			return _array [_size - 1];
 		}
 		
 		public T Pop ()
 		{
-			if (size == 0)
+			if (_size == 0)
 				throw new InvalidOperationException ();
 			
-			ver ++;
+			_version ++;
 			
-			return data [-- size];
+			return _array [-- _size];
 		}
 
 		public void Push (T t)
 		{
-			if (size == 0 || size == data.Length)
-				Array.Resize <T> (ref data, size == 0 ? INITIAL_SIZE : 2 * size);
+			if (_size == 0 || _size == _array.Length)
+				Array.Resize <T> (ref _array, _size == 0 ? INITIAL_SIZE : 2 * _size);
 			
-			ver ++;
+			_version ++;
 			
-			data [size++] = t;
+			_array [_size++] = t;
 		}
 		
 		public T [] ToArray ()
 		{
-			T [] copy = new T [size];
+			T [] copy = new T [_size];
 			CopyTo (copy, 0);
 			return copy;
 		}
 
 		public void TrimExcess ()
 		{
-			if (data != null && (size < data.Length * 0.9))
-				Array.Resize <T> (ref data, size == 0 ? defaultCapacity : size);
+			if (_array != null && (_size < _array.Length * 0.9))
+			{
+				// Aulofee customization - start
+				// Two things corrected: 1. Resize did behave differently from .Net,
+				// 2. version++ was forgotten.
+				//Array.Resize<T>(ref _array, _size == 0 ? defaultCapacity : _size);
+				Array.Resize<T>(ref _array, _size);
+				_version++;
+				// Aulofee customization - end
+			}
 		}
 		
 		public int Count {
-			get { return size; }
+			get { return _size; }
 		}
 		
 		bool ICollection.IsSynchronized {
@@ -164,9 +172,9 @@
 		void ICollection.CopyTo (Array dest, int idx)
 		{
 			try {
-				if (data != null) {
-					data.CopyTo (dest, idx);
-					Array.Reverse (dest, idx, size);
+				if (_array != null) {
+					_array.CopyTo (dest, idx);
+					Array.Reverse (dest, idx, _size);
 				}
 			} catch (ArrayTypeMismatchException) {
 				throw new ArgumentException ();
@@ -193,18 +201,18 @@
 			const int NOT_STARTED = -2;
 			
 			// this MUST be -1, because we depend on it in move next.
-			// we just decr the size, so, 0 - 1 == FINISHED
+			// we just decr the _size, so, 0 - 1 == FINISHED
 			const int FINISHED = -1;
 			
 			Stack <T> parent;
 			int idx;
-			int ver;
+			int _version;
 			
 			internal Enumerator (Stack <T> t)
 			{
 				parent = t;
 				idx = NOT_STARTED;
-				ver = t.ver;
+				_version = t._version;
 			}
 			
 			// for some fucked up reason, MSFT added a useless dispose to this class
@@ -217,11 +225,11 @@
 			
 			public bool MoveNext ()
 			{
-				if (ver != parent.ver)
+				if (_version != parent._version)
 					throw new InvalidOperationException ();
 				
 				if (idx == -2)
-					idx = parent.size;
+					idx = parent._size;
 				
 				return idx != FINISHED && -- idx != FINISHED;
 			}
@@ -231,13 +239,13 @@
 					if (idx < 0)
 						throw new InvalidOperationException ();
 					
-					return parent.data [idx];
+					return parent._array [idx];
 				}
 			}
 			
 			void IEnumerator.Reset ()
 			{
-				if (ver != parent.ver)
+				if (_version != parent._version)
 					throw new InvalidOperationException ();
 				
 				idx = NOT_STARTED;
