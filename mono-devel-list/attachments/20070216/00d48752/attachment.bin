44,49c44,49
< 		T [] data;
< 		int head;
< 		int tail;
< 		int size;
< 		int version;
< 		int defaultCapacity;
---
> 		T [] _array;
> 		int _head;
> 		int _tail;
> 		int _size;
> 		int _version;
> 		//int defaultCapacity;	// Useless as it was introducing breaking change with .NET
51c51
< 		private readonly static int INITIAL_SIZE = 16;
---
> 		// private readonly static int INITIAL_SIZE = 16;	// Useless as it was introducing breaking change with .NET
55c55
< 			defaultCapacity = INITIAL_SIZE;
---
> 			//defaultCapacity = INITIAL_SIZE;
63,64c63,64
< 			defaultCapacity = count;
< 			data = new T [count];
---
> 			//defaultCapacity = count;
> 			_array = new T [count];
74c74
< 			defaultCapacity = size;
---
> 			//defaultCapacity = _size;
79,80c79,80
< 			if (data != null)
< 				Array.Clear (data, 0, data.Length);
---
> 			if (_array != null)
> 				Array.Clear (_array, 0, _array.Length);
82c82
< 			head = tail = size = 0;
---
> 			_head = _tail = _size = 0;
108c108
< 			if (array.Length - idx < size)
---
> 			if (array.Length - idx < _size)
111c111
< 			if (size == 0)
---
> 			if (_size == 0)
114,115c114,115
< 			int contents_length = data.Length;
< 			int length_from_head = contents_length - head;
---
> 			int contents_length = _array.Length;
> 			int length_from_head = contents_length - _head;
117,119c117,119
< 			Array.Copy (data, head, array, idx, Math.Min (size, length_from_head));
< 			if (size > length_from_head)
< 				Array.Copy (data, 0, array, 
---
> 			Array.Copy (_array, _head, array, idx, Math.Min (_size, length_from_head));
> 			if (_size > length_from_head)
> 				Array.Copy (_array, 0, array, 
121c121
< 					    size - length_from_head);
---
> 					    _size - length_from_head);
133c133
< 			if (array.Length - idx < size)
---
> 			if (array.Length - idx < _size)
136c136
< 			if (size == 0)
---
> 			if (_size == 0)
140,141c140,141
< 				int contents_length = data.Length;
< 				int length_from_head = contents_length - head;
---
> 				int contents_length = _array.Length;
> 				int length_from_head = contents_length - _head;
143,145c143,145
< 				Array.Copy (data, head, array, idx, Math.Min (size, length_from_head));
< 				if (size > length_from_head)
< 					Array.Copy (data, 0, array, 
---
> 				Array.Copy (_array, _head, array, idx, Math.Min (_size, length_from_head));
> 				if (_size > length_from_head)
> 					Array.Copy (_array, 0, array, 
147c147
< 						    size - length_from_head);
---
> 						    _size - length_from_head);
158c158
< 			data [head] = default (T);
---
> 			_array [_head] = default (T);
160,163c160,163
< 			if (++head == data.Length)
< 				head = 0;
< 			size --;
< 			version ++;
---
> 			if (++_head == _array.Length)
> 				_head = 0;
> 			_size --;
> 			_version ++;
170c170
< 			if (size == 0)
---
> 			if (_size == 0)
173c173
< 			return data [head];
---
> 			return _array [_head];
178,179c178,179
< 			if (data == null || size == data.Length)
< 				SetCapacity (Math.Max (size * 2, 4));
---
> 			if (_array == null || _size == _array.Length)
> 				SetCapacity (Math.Max (_size * 2, 4));
181c181
< 			data [tail] = item;
---
> 			_array [_tail] = item;
183,184c183,184
< 			if (++tail == data.Length)
< 				tail = 0;
---
> 			if (++_tail == _array.Length)
> 				_tail = 0;
186,187c186,187
< 			size ++;
< 			version ++;
---
> 			_size ++;
> 			_version ++;
192c192
< 			T [] t = new T [size];
---
> 			T [] t = new T [_size];
199,200c199,207
< 			if (data != null && (size < data.Length * 0.9))
< 				Array.Resize <T> (ref data, size == 0 ? defaultCapacity : size);
---
> 			if (_array != null && (_size < _array.Length * 0.9))
> 				// Aulofee customization - start
> 				// This 'optimization' could make an application running under Mono behave differently from running .NET.
> 				// Moreover, it was not increasing the 'version' field, was not changing the head and tail...
> 				// I replaced it with a call to SetCapacity.
> 				// Original line was:
> 				//Array.Resize <T> (ref _array, _size == 0 ? defaultCapacity : _size);
> 				SetCapacity(_size);
> 				// Aulofee customization - end
205c212
< 			if (data != null && new_size == data.Length)
---
> 			if (_array != null && new_size == _array.Length)
208c215
< 			if (new_size < size)
---
> 			if (new_size < _size)
212c219
< 			if (size > 0)
---
> 			if (_size > 0)
215,218c222,225
< 			data = new_data;
< 			tail = size;
< 			head = 0;
< 			version ++;
---
> 			_array = new_data;
> 			_tail = _size;
> 			_head = 0;
> 			_version ++;
222c229
< 			get { return size; }
---
> 			get { return _size; }
253c260
< 			// we just decr the size, so, 0 - 1 == FINISHED
---
> 			// we just decr the _size, so, 0 - 1 == FINISHED
264c271
< 				ver = q.version;
---
> 				ver = q._version;
277c284
< 				if (ver != q.version)
---
> 				if (ver != q._version)
281c288
< 					idx = q.size;
---
> 					idx = q._size;
291c298
< 					return q.data [(q.size - 1 - idx + q.head) % q.data.Length];
---
> 					return q._array [(q._size - 1 - idx + q._head) % q._array.Length];
297c304
< 				if (ver != q.version)
---
> 				if (ver != q._version)

