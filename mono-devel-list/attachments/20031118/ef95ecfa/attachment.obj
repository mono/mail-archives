Index: monoburg.c
===================================================================
RCS file: /mono/mono/mono/monoburg/monoburg.c,v
retrieving revision 1.25
diff -u -b -r1.25 monoburg.c
--- monoburg.c	4 Jun 2003 17:56:52 -0000	1.25
+++ monoburg.c	18 Nov 2003 19:43:46 -0000
@@ -23,6 +23,7 @@
 
 FILE *inputfd;
 FILE *outputfd;
+GHashTable *definedvars;
 static FILE *deffd;
 static FILE *cfd;
 
@@ -975,6 +976,7 @@
 	GList *infiles = NULL;
 	int i;
 
+        definedvars = g_hash_table_new (g_str_hash, g_str_equal);
 	g_log_set_handler (NULL, G_LOG_LEVEL_WARNING, warning_handler, stderr);
 
 	for (i = 1; i < argc; i++){
@@ -991,6 +993,9 @@
 				cfile = argv [++i];
 			} else if (argv [i][1] == 'c') {
 				default_cost = atoi (argv [++i]);
+			} else if (argv [i][1] == 'D') {
+                                g_hash_table_insert (definedvars, &argv [i][2],
+                                                     GUINT_TO_POINTER (1));
 			} else {
 				usage ();
 			}
Index: monoburg.h
===================================================================
RCS file: /mono/mono/mono/monoburg/monoburg.h,v
retrieving revision 1.6
diff -u -b -r1.6 monoburg.h
--- monoburg.h	3 Oct 2002 10:35:30 -0000	1.6
+++ monoburg.h	18 Nov 2003 19:43:46 -0000
@@ -8,6 +8,7 @@
 
 extern FILE *inputfd;
 extern FILE *outputfd;
+extern GHashTable *definedvars;
 
 typedef struct _Rule Rule;
 
Index: monoburg.y
===================================================================
RCS file: /mono/mono/mono/monoburg/monoburg.y,v
retrieving revision 1.13
diff -u -b -r1.13 monoburg.y
--- monoburg.y	17 Oct 2002 17:50:47 -0000	1.13
+++ monoburg.y	18 Nov 2003 19:43:46 -0000
@@ -107,6 +107,64 @@
   state = 0;
 }
 
+struct pplist {
+  struct pplist *next;
+  gboolean ignore;
+};
+
+static struct pplist *pp = NULL;
+
+static char*
+getvar (const char *input)
+{
+    char *var = g_strchug (g_strdup (input));
+    char *ptr;
+
+    for (ptr = var; *ptr && *ptr != '\n'; ++ptr) {
+        if (g_ascii_isspace (*ptr)) {
+            break;
+        }
+    }
+    *ptr = '\0';
+
+    return var;
+}
+
+static void
+push_if (char *input, gboolean flip)
+{
+  struct pplist *new_pp = g_new (struct pplist, 1);
+  char *var = getvar (input);
+
+  new_pp->ignore = (g_hash_table_lookup (definedvars, var) == NULL) ^ flip;
+  new_pp->next = pp;
+
+  new_pp->ignore |= (pp ? pp->ignore : 0);
+  pp = new_pp;
+  g_free (var);
+}
+
+static void
+flip_if ()
+{
+  if (!pp)
+      yyerror ("%%else without %%if");
+
+  pp->ignore = !pp->ignore | (pp->next ? pp->next->ignore : 0);
+}
+
+static void
+pop_if ()
+{
+  struct pplist *prev_pp = pp;
+
+  if (!pp)
+      yyerror ("%%endif without %%if");
+
+  pp = pp->next;
+  g_free (prev_pp);
+}
+
 static char
 nextchar ()
 {
@@ -122,6 +180,35 @@
 
 	ll = (input [0] == '%' && input [1] == '%');
 	next_state = state;
+
+        if (state == 1) {
+          if (!ll && input [0] == '%') {
+            if (!strncmp (&input [1], "ifdef", 5)) {
+              push_if (&input [6], FALSE);
+              ll = TRUE;
+              continue;
+            }
+            else if (!strncmp (&input [1], "ifndef", 6)) {
+              push_if (&input [7], TRUE);
+              ll = TRUE;
+              continue;
+            }
+            else if (!strncmp (&input [1], "else", 4)) {
+              flip_if ();
+              ll = TRUE;
+              continue;
+            }
+            else if (!strncmp (&input [1], "endif", 5)) {
+              pop_if ();
+              ll = TRUE;
+              continue;
+            }
+          }
+          if (pp && pp->ignore) {
+            ll = TRUE;
+            continue;
+          }
+        }
 
 	switch (state) {
 	case 0:
