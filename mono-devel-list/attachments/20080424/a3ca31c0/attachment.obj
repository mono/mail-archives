Index: mono/mono/mini/mini-amd64.c
===================================================================
--- mono/mono/mini/mini-amd64.c	(revision 101616)
+++ mono/mono/mini/mini-amd64.c	(working copy)
@@ -62,7 +62,12 @@
 MonoBreakpointInfo
 mono_breakpoint_info [MONO_BREAKPOINT_ARRAY_SIZE];
 
+#ifdef PLATFORM_WIN32
+/* On Win64 always reserve first 32 bytes for first four arguments */
+#define ARGS_OFFSET 48
+#else
 #define ARGS_OFFSET 16
+#endif
 #define GP_SCRATCH_REG AMD64_R11
 
 /*
@@ -270,9 +275,6 @@
 		ainfo->storage = ArgInIReg;
 		ainfo->reg = param_regs [*gr];
 		(*gr) ++;
-#ifdef PLATFORM_WIN32
-		(*stack_size) += sizeof (gpointer);
-#endif
     }
 }
 
@@ -1289,9 +1291,6 @@
 	int i, n, stack_size;
 	CallInfo *cinfo;
 	ArgInfo *ainfo;
-#ifdef PLATFORM_WIN32
-	int args_space = 0, args_offset = 0;
-#endif
 
 	stack_size = 0;
 
@@ -1430,19 +1429,6 @@
 							if (sig->params [i - sig->hasthis]->type == MONO_TYPE_R8)
 								arg->opcode = OP_OUTARG_R8;
 					}
-#ifdef PLATFORM_WIN32
-					arg->opcode = OP_OUTARG_MEMBASE;
-					/* we store in the upper bits of backen.arg_info the needed
-					* esp adjustment and in the lower bits the offset from esp
-					* where the arg needs to be stored
-					*/
-					if (!args_space)
-						args_offset = args_space = n*(sizeof(void*));
-					arg->backend.arg_info = args_space - args_offset + 0x20;
-					args_offset -= sizeof (void*);
-					if (i == n-1)
-						arg->backend.arg_info |= args_space << 16;
-#endif
 					break;
 				default:
 					g_assert_not_reached ();
@@ -1458,9 +1444,17 @@
 
 	if (cinfo->need_stack_align) {
 		MONO_INST_NEW (cfg, arg, OP_AMD64_OUTARG_ALIGN_STACK);
+		arg->inst_c0 = 8;
 		MONO_INST_LIST_ADD (&arg->node, &call->out_args);
 	}
 
+#ifdef PLATFORM_WIN32
+	/* Always reserve 32 bytes of stack space on Win64 */
+	MONO_INST_NEW (cfg, arg, OP_AMD64_OUTARG_ALIGN_STACK);
+	arg->inst_c0 = 32;
+	MONO_INST_LIST_ADD_TAIL (&arg->node, &call->out_args);
+#endif
+
 	if (cfg->method->save_lmf) {
 		MONO_INST_NEW (cfg, arg, OP_AMD64_SAVE_SP_TO_LMF);
 		MONO_INST_LIST_ADD_TAIL (&arg->node, &call->out_args);
Index: mono/mono/mini/inssel-amd64.brg
===================================================================
--- mono/mono/mini/inssel-amd64.brg	(revision 101616)
+++ mono/mono/mini/inssel-amd64.brg	(working copy)
@@ -199,18 +199,6 @@
 	mono_bblock_add_inst (s->cbb, tree);
 }
 
-stmt: OP_OUTARG_MEMBASE (reg) {
-	int esp_displ = (tree->backend.arg_info >> 16) & 0xffff;
-	int esp_offset = tree->backend.arg_info & 0xffff;
-	if (esp_displ)
-		MONO_EMIT_NEW_BIALU_IMM (s, OP_SUB_IMM, X86_ESP, X86_ESP, esp_displ);
-	tree->opcode = OP_STOREI8_MEMBASE_REG;
-	tree->sreg1 = state->left->reg1;
-	tree->inst_destbasereg = X86_ESP;
-	tree->inst_offset = esp_offset;
-	mono_bblock_add_inst (s->cbb, tree);
-}
-
 stmt: OP_OUTARG_REG (reg) {	
 	MonoCallInst *call = tree->inst_call;
 
@@ -362,7 +350,7 @@
 }
 
 stmt: OP_AMD64_OUTARG_ALIGN_STACK {
-	MONO_EMIT_NEW_BIALU_IMM (s, OP_SUB_IMM, X86_ESP, X86_ESP, 8);
+	MONO_EMIT_NEW_BIALU_IMM (s, OP_SUB_IMM, X86_ESP, X86_ESP, tree->inst_c0);
 }	
 
 stmt: OP_AMD64_SAVE_SP_TO_LMF {
Index: mono/mono/mini/ChangeLog
===================================================================
--- mono/mono/mini/ChangeLog	(revision 101616)
+++ mono/mono/mini/ChangeLog	(working copy)
@@ -1,3 +1,16 @@
+2008-04-25  Jonathan Chambers <joncham@gmail.com>
+
+	* mini-amd64.c (add_general): Remove previous stack adjustment.
+	(mono_arch_call_opcode): Remove OP_OUTARG_MEMBASE and instead simply
+	adjust stack pointer after pushing args. Adjust ARGS_OFFSET to account
+	for 32 bytes of stack space reserved for all calls.
+	
+	* inssel-amd64.brg (OP_OUTARG_MEMBASE): Remove.
+	(OP_AMD64_OUTARG_ALIGN_STACK): Take argument to specify size of stack 
+	adjustment.
+	
+	Code contributed under MIT/X11 license.
+
 2008-04-23  Rodrigo Kumpera  <rkumpera@novell.com>
 
 	* mini.c (mini_method_verify): Only verify non-inflated methods, check