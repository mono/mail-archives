Index: appdomain.c
===================================================================
--- appdomain.c	(revision 147245)
+++ appdomain.c	(working copy)
@@ -73,7 +73,7 @@
  * Changes which are already detected at runtime, like the addition
  * of icalls, do not require an increment.
  */
-#define MONO_CORLIB_VERSION 86
+#define MONO_CORLIB_VERSION 87
 
 typedef struct
 {
Index: icall-def.h
===================================================================
--- icall-def.h	(revision 147245)
+++ icall-def.h	(working copy)
@@ -617,7 +618,7 @@
 ICALL(MMETH_5, "MakeGenericMethod_impl", mono_reflection_bind_generic_method_parameters)
 ICALL(MMETH_6, "get_IsGenericMethod", ves_icall_MonoMethod_get_IsGenericMethod)
 ICALL(MMETH_7, "get_IsGenericMethodDefinition", ves_icall_MonoMethod_get_IsGenericMethodDefinition)
-ICALL(MMETH_8, "get_base_definition", ves_icall_MonoMethod_get_base_definition)
+ICALL(MMETH_8, "get_base_method", ves_icall_MonoMethod_get_base_method)
 ICALL(MMETH_9, "get_name", ves_icall_MonoMethod_get_name)
 
 ICALL_TYPE(MMETHI, "System.Reflection.MonoMethodInfo", MMETHI_1)
Index: icall.c
===================================================================
--- icall.c	(revision 147245)
+++ icall.c	(working copy)
@@ -6882,7 +6900,7 @@
 }
 
 static MonoReflectionMethod *
-ves_icall_MonoMethod_get_base_definition (MonoReflectionMethod *m)
+ves_icall_MonoMethod_get_base_method (MonoReflectionMethod *m, gboolean definition)
 {
 	MonoClass *klass, *parent;
 	MonoMethod *method = m->method;
@@ -6902,13 +6920,19 @@
 	if (klass->generic_class)
 		klass = klass->generic_class->container_class;
 
-	/* At the end of the loop, klass points to the eldest class that has this virtual function slot. */
-	for (parent = klass->parent; parent != NULL; parent = parent->parent) {
-		mono_class_setup_vtable (parent);
-		if (parent->vtable_size <= method->slot)
-			break;
-		klass = parent;
-	}		
+	if (definition) {
+		/* At the end of the loop, klass points to the eldest class that has this virtual function slot. */
+		for (parent = klass->parent; parent != NULL; parent = parent->parent) {
+			mono_class_setup_vtable (parent);
+			if (parent->vtable_size <= method->slot)
+				break;
+			klass = parent;
+		}
+	} else {
+		klass = klass->parent;
+		if (!klass)
+			return m;
+	}
 
 	if (klass == method->klass)
 		return m;