using System;
using System.Reflection;

public class App
{
  public static void Main ()
  {
    AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);
    AppDomain.CurrentDomain.ReflectionOnlyAssemblyResolve += new ResolveEventHandler(MyReflectionResolveEventHandler);
    
    Console.WriteLine ("Assembly.Load");
    try {
      Assembly.Load ("SomeAssembly");
    } catch (Exception ex) {
      Console.WriteLine ("\texception: {0}", ex.Message);
    }

    Console.WriteLine ("Assembly.LoadFile");
    try {
      Assembly.LoadFile ("SomeAssembly");
    } catch (Exception ex) {
      Console.WriteLine ("\texception: {0}", ex.Message);
    }

    Console.WriteLine ("Assembly.LoadFrom");
    try {
      Assembly.LoadFrom ("SomeAssembly");
    } catch (Exception ex) {
      Console.WriteLine ("\texception: {0}", ex.Message);
    }

    Console.WriteLine ("Assembly.LoadWithPartialName");
    try {
      Assembly.LoadWithPartialName ("SomeAssembly");
    } catch (Exception ex) {
      Console.WriteLine ("\texception: {0}", ex.Message);
    }

    Console.WriteLine ("Assembly.ReflectionOnlyLoad");
    try {
      Assembly.ReflectionOnlyLoad ("SomeAssembly");
    } catch (Exception ex) {
      Console.WriteLine ("\texception: {0}", ex.Message);
    }

    Console.WriteLine ("Assembly.ReflectionOnlyLoadFrom");
    try {
      Assembly.ReflectionOnlyLoadFrom ("SomeAssembly");
    } catch (Exception ex) {
      Console.WriteLine ("\texception: {0}", ex.Message);
    }
  }

  static Assembly MyResolveEventHandler(object sender, ResolveEventArgs args) {
    Console.WriteLine("\tTrying to resolve: {0}", args.Name);
    return null;
  }

  static Assembly MyReflectionResolveEventHandler(object sender, ResolveEventArgs args) {
    Console.WriteLine("\tTrying to resolve: {0}", args.Name);
    return null;
  }
}
