Index: class/System/System.Net.Sockets/TcpClient.cs
===================================================================
--- class/System/System.Net.Sockets/TcpClient.cs	(revision 62433)
+++ class/System/System.Net.Sockets/TcpClient.cs	(working copy)
@@ -74,7 +74,7 @@
 			client.Bind(new IPEndPoint(IPAddress.Any, 0));
 		}
 	
-#if NET_1_1
+#if NET_1_1 || NET_2_0
 		public TcpClient (AddressFamily family)
 		{
 			if (family != AddressFamily.InterNetwork &&
@@ -320,7 +320,7 @@
 
 					if(host.AddressList[i].AddressFamily == AddressFamily.InterNetwork)
 						client.Bind(new IPEndPoint(IPAddress.Any, 0));
-#if NET_1_1
+#if NET_1_1 || NET_2_0
 					else if(host.AddressList[i].AddressFamily == AddressFamily.InterNetworkV6)
 						client.Bind(new IPEndPoint(IPAddress.IPv6Any, 0));
 #endif
Index: class/System/System.Net.Sockets/TcpListener.cs
===================================================================
--- class/System/System.Net.Sockets/TcpListener.cs	(revision 62433)
+++ class/System/System.Net.Sockets/TcpListener.cs	(working copy)
@@ -4,12 +4,14 @@
 //    Phillip Pearson (pp@myelin.co.nz)
 //    Gonzalo Paniagua Javier (gonzalo@ximian.com)
 //	  Patrik Torstensson
+//    Ivan N. Zlatev <contact i-nZ.net>
 //
 // Copyright (C) 2001, Phillip Pearson
 //    http://www.myelin.co.nz
 //
 // (c) 2003 Ximian, Inc. (http://www.ximian.com)
 // (c) 2004 Novell, Inc.
+// (c) 2006 Ivan N. Zlatev
 //
 
 //
@@ -67,7 +69,7 @@
 		/// </summary>
 		/// <param name="port">The port to listen on, e.g. 80 if you 
 		/// are a web server</param>
-#if NET_1_1
+#if NET_1_1 || NET_2_0
 		[Obsolete ("Use TcpListener (IPAddress address, int port) instead")]
 #endif
 		public TcpListener (int port)
@@ -135,12 +137,80 @@
 		/// <summary>
 		/// The listening socket
 		/// </summary>
+#if NET_2_0
+		public Socket Server
+#else
 		protected Socket Server
+#endif
 		{
 			get { return server; }
 		}
+
+#if NET_2_0
+		[MonoTODO]
+		public bool ExclusiveAddressUse
+		{
+			// When implementing add appropriate behaviour in Stop ()
+			//
+			get { throw new NotImplementedException (); }
+			set { throw new NotImplementedException (); }
+		}
+
+		public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state)
+		{
+			if (!active) {
+				throw new InvalidOperationException ("Server not active!");
+			}
+			if (server == null) {
+				throw new ObjectDisposedException (GetType().ToString());
+			}
+			
+			return server.BeginAccept (callback, state);
+		}
+
 		
+		public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state)
+		{
+			if (!active) {
+				throw new InvalidOperationException ("active == false");
+			}
+			if (server == null) {
+				throw new ObjectDisposedException (GetType().ToString());
+			}
+			
+			return server.BeginAccept (callback, state);
+		}
+
 		
+		public Socket EndAcceptSocket (IAsyncResult asyncResult)
+		{
+			if (asyncResult == null) {
+				throw new ArgumentNullException ("asyncResult");
+			}
+			if (server == null) {
+				throw new ObjectDisposedException (GetType().ToString());
+			}
+			
+			return server.EndAccept (asyncResult);
+		}
+
+		
+		public TcpClient EndAcceptTcpClient (IAsyncResult asyncResult)
+		{
+			if (asyncResult == null) {
+				throw new ArgumentNullException ("asyncResult");
+			}
+			if (server == null) {
+				throw new ObjectDisposedException (GetType().ToString());
+			}
+			
+			TcpClient result = new TcpClient ();
+			result.Client = server.EndAccept (asyncResult);
+			return result;
+		}
+#endif
+
+		
 		// methods
 
 		/// <summary>
@@ -196,6 +266,34 @@
 			return server.Poll(0, SelectMode.SelectRead);
 		}
 		
+#if NET_2_0		
+		public void Start ()
+		{
+			// MS: sets Listen to Int32.MaxValue
+			Start (5);
+			// According to the man page some BSD and BSD-derived
+			// systems limit the backlog to 5.  This should really be
+			// configurable though
+		}
+		
+		public void Start (int backlog)
+		{
+			if (backlog < 0) {
+				throw new ArgumentOutOfRangeException ("backlog");
+			}			
+			if (active) {
+				return;
+			}
+			if (server == null) {
+				throw new InvalidOperationException("Invalid server socket");
+			}
+			
+			server.Bind (savedEP);		   			
+			server.Listen(backlog);	
+			active = true;
+		}
+#else
+
 		/// <summary>
 		/// Tells the TcpListener to start listening.
 		/// </summary>
@@ -217,15 +315,15 @@
 
 			active = true;
 		}
-		
+#endif
+			
 		/// <summary>
 		/// Tells the TcpListener to stop listening and dispose
 		/// of all managed resources.
 		/// </summary>
 		public void Stop ()
 		{
-			if (active) 
-			{
+			if (active) {
 				server.Close ();
 				server = null;
 			}