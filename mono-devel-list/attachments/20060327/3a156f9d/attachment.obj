Index: HttpUtility.cs
===================================================================
--- HttpUtility.cs	(revision 58536)
+++ HttpUtility.cs	(working copy)
@@ -387,19 +387,26 @@
 			MemoryStream bytes = new MemoryStream ();
 	
 			for (int i = 0; i < len; i++) {
-				if (s [i] == '%' && i + 2 < len) {
+				if (s [i] == '%' && i + 2 < len && s [i+1] != '%') {
 					if (s [i + 1] == 'u' && i + 5 < len) {
 						if (bytes.Length > 0) {
 							output.Append (GetChars (bytes, e));
 							bytes.SetLength (0);
 						}
-						output.Append ((char) Int32.Parse (s.Substring (i + 2, 4), hexa));
-						i += 5;
+						char encChar = GetChar (s.Substring (i + 2, 4));
+						if (encChar != 0xffff) {
+							output.Append (encChar);
+							i += 5;
+							continue;
+						}
 					} else {
-						bytes.WriteByte ((byte) Int32.Parse (s.Substring (i + 1, 2), hexa));
-						i += 2;
+						char encChar = GetChar (s.Substring (i + 1, 2));
+						if (encChar != 0xffff) {
+							bytes.WriteByte ((byte) encChar);
+							i += 2;
+							continue;
+						}
 					}
-					continue;
 				}
 
 				if (bytes.Length > 0) {
@@ -432,30 +439,50 @@
 
 		private static int GetInt (byte b)
 		{
-			char c = Char.ToUpper ((char) b);
-			if (c >= '0' && c <= '9')
-				return c - '0';
-
-			if (c < 'A' || c > 'F')
-				return 0;
-
-			return (c - 'A' + 10);
+			if (b >= '0' && b <= '9')
+				return b - '0';
+								 
+			else if (b >= 'A' && b <= 'F')
+				return b - 'A' + 10;
+								 
+			else if (b >= 'a' && b <= 'f')
+				return b - 'a' + 10;
+ 
+			else return -1;
 		}
 
 		private static char GetChar (byte [] bytes, int offset, int length)
 		{
 			int value = 0;
 			int end = length + offset;
-			for (int i = offset; i < end; i++)
-				value = (value << 4) + GetInt (bytes [i]);
-
+			for (int i = offset; i < end; i++) {
+				int c = GetInt (bytes [i]);
+				if (c == -1)
+					return (char )0xffff;
+				value = (value << 4) + c;
+			}
+ 
 			return (char) value;
 		}
-		
+ 		
+		private static char GetChar (string s) 
+		{
+			int value = 0;
+			for (int i = 0; i < s.Length; i++) {
+				int c = GetInt ((byte) s [i]);
+				if (c == -1)
+					return (char) 0xffff;
+				value = (value << 4) + c;
+			}
+																		   
+			return (char) value;
+		}
+
 		public static string UrlDecode (byte [] bytes, int offset, int count, Encoding e)
 		{
 			if (bytes == null)
 				return null;
+			
 			if (count == 0)
 				return String.Empty;
 
@@ -473,19 +500,26 @@
 
 			int end = count + offset;
 			for (int i = offset; i < end; i++) {
-				if (bytes [i] == '%' && i + 2 < count) {
+				if (bytes [i] == '%' && i + 2 < count && bytes [i + 1] != '%') {
 					if (bytes [i + 1] == (byte) 'u' && i + 5 < end) {
 						if (acc.Length > 0) {
 							output.Append (GetChars (acc, e));
 							acc.SetLength (0);
 						}
-						output.Append (GetChar (bytes, i + 2, 4));
-						i += 5;
+						char encChar = GetChar (bytes, i + 2, 4);
+						if (encChar != 0xffff) {
+							output.Append (encChar);
+							i += 5;
+							continue;
+						}
 					} else {
-						acc.WriteByte ((byte) GetChar (bytes, i + 1, 2));
-						i += 2;
+						char encChar = GetChar (bytes, i + 1, 2);
+						if (encChar != 0xffff) {
+							acc.WriteByte ((byte) encChar);
+							i += 2;
+							continue;
+						}
 					}
-					continue;
 				}
 
 				if (acc.Length > 0) {
@@ -553,8 +587,11 @@
 				if (c == '+')
 					c = ' ';
 				else if (c == '%' && i < end - 2) {
-					c = GetChar (bytes, i + 1, 2);
-					i += 2;
+					char encChar = GetChar (bytes, i + 1, 2);
+					if (encChar != 0xffff) {
+						c = encChar;
+						i += 2;
+					}
 				}
 				result.WriteByte ((byte) c);
 			}
