#include <mono/jit/jit.h>
#include <mono/metadata/environment.h>
//#include <mono/metadata/debug-helpers.h>
#include <mono/metadata/loader.h>
#include <mono/metadata/mono-debug.h>

//#include <mono/jit/jit.h>
#include <mono/metadata/debug-helpers.h>
#include <mono/metadata/threads.h>
#include <mono/metadata/assembly.h>

static MonoDomain *domain;
static MonoAssembly *assembly;

/*
 * Very simple mono embedding example.
 * Compile with: 
 * 	gcc -o teste teste.c `pkg-config --cflags --libs mono` -lm
 * 	mcs test.cs
 * Run with:
 * 	./teste test.exe
 */
static void setup()
{
	assembly = mono_domain_assembly_open(domain, "test.dll");
	if(assembly==NULL)
	{
		printf("could not load assembly\n");
		mono_environment_exitcode_set(-1);
	}
	else
	{
		printf("assembly loaded succesfully\n");
		mono_debug_init_2(assembly);
		domain->entry_assembly=assembly;
		mono_environment_exitcode_set(0);
	}
}

int main(int argc, char* argv[])
{
	//MonoClass * class;	
	//MonoDomain *domain;
	MonoMethod *method;
	MonoMethodDesc *methodDesc;
	//MonoObject *returnedMonoObject;	
	gpointer params[1];

	domain = mono_jit_init ("TestDomain");
	if(domain == NULL)
	{
		printf("could not init domain\n");
		return 0;	
	}
	mono_debug_init(domain, MONO_DEBUG_FORMAT_MONO);
	mono_runtime_exec_managed_code(domain, setup, NULL);
			

	// Create the method description	
	methodDesc = mono_method_desc_new("TestNamespace.test:foo", TRUE);
	if(!methodDesc)
		printf("Error in creating methodDesc \n");
	else
		printf("methodDesc created succesfully\n");
	
	// Search the above method description in image
	method = mono_method_desc_search_in_image(methodDesc, assembly->image); 
	if(!method)
		printf("Method could not be located in class \n");
	else
		printf("Method located successfully\n");

	// invoke method
	params[0]= mono_string_new(domain, "TestFile.txt"); 	
	mono_runtime_invoke(method, NULL, params, NULL );

	mono_jit_cleanup (domain);
	return 1;
}

