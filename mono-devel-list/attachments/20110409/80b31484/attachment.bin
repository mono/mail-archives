using System;
using System.Diagnostics;

namespace SortingTest {
	public class Sort<T> {
		public delegate int Comparison (T v0, T v1);
		
		static void swap (T [] array, int i, int j)
		{
			T tmp = array[i];
			array[i] = array[j];
			array[j] = tmp;
		}
		
		static void QuickSortBasicR (T [] array, int low0, int high0, Comparison comparison)
		{
			int low = low0;
			int high = high0;
			
			// Be careful with overflows
			int mid = low + ((high - low) / 2);
			T keyPivot = array [mid];
			
			while (true) {
				if (keyPivot == null) {
					while (low < high0 && array [low] == null)
						++low;
					while (high > low0 && array [high] != null)
						--high;
				} else {
					// Move the walls in
					while (low < high0 && comparison (array [low], keyPivot) < 0)
						++low;
					while (high > low0 && comparison (keyPivot, array [high]) < 0)
						--high;
				}
				
				if (low <= high) {
					swap (array, low, high);
					++low;
					--high;
				} else
					break;
			}
			
			if (low0 < high)
				QuickSortBasicR (array, low0, high, comparison);
			if (low < high0)
				QuickSortBasicR (array, low, high0, comparison);
		}
		
		public static void QuickSortBasic (T [] array, int index, int length, Comparison comparison)
		{
			QuickSortBasicR (array, index, index + length - 1, comparison);
		}
		
		const int INSERTIONSORT_THRESHOLD = 7;
		
		static void FasterQuickSortR (T [] array, int low, int high, Comparison comparison)
		{
			int mid, i, k;
			T pval;
			
			if ((low + INSERTIONSORT_THRESHOLD) > high) {
				// switch to insertion sort
				for (i = low + 1; i <= high; i++)
					for (k = i; k > low && comparison (array[k], array[k-1]) < 0; k--)
						swap (array, k - 1, k);
				
				return;
			}
			
			// calculate the middle element
			mid = low + ((high - low) / 2);
			
			// once we re-order the lo, mid, and hi elements to be in
			// ascending order, we'll use mid as our pivot.
			if (comparison (array[mid], array[low]) < 0)
				swap (array, mid, low);
			
			if (comparison (array[high], array[mid]) < 0) {
				swap (array, mid, high);
				if (comparison (array[mid], array[low]) < 0)
					swap (array, mid, low);
			}
			
			/* since we've already guaranteed that lo <= mid and mid <= hi,
			 * we can skip comparing them again */
			pval = array[mid];
			k = high - 1;
			i = low + 1;
			
			do {
				if (pval == null) {
					while (i < k && array[i] == null)
						i++;
					
					while (k >= i && array[k] != null)
						k--;
				} else {
					// find the first element with a value > pivot value
					while (i < k && comparison (array[i], pval) <= 0)
						i++;
					
					// find the last element with a value <= pivot value
					while (k >= i && comparison (pval, array[k]) < 0)
						k--;
				}
				
				if (k <= i)
					break;
				
				swap (array, i, k);
				
				// make sure we keep track of our pivot element
				if (mid == i)
					mid = k;
				else if (mid == k)
					mid = i;
				
				i++;
				k--;
			} while (true);
			
			if (k != mid) {
				// swap the pivot with the last element in the first partition
				swap (array, mid, k);
			}
			
			/* recursively sort each partition */
			if ((k + 1) < high) FasterQuickSortR (array, k + 1, high, comparison);
			if ((k - 1) > low) FasterQuickSortR (array, low, k - 1, comparison);
		}
		
		public static void FasterQuickSort (T [] array, int index, int length, Comparison comparison)
		{
			FasterQuickSortR (array, index, index + length - 1, comparison);
		}
		
		struct QuickSortStack {
			public int lo, hi;
		}
		
		public static void NonRecursiveQuickSort (T [] array, int index, int length, Comparison comparison)
		{
			int lo, mid, hi, i, k, sp;
			QuickSortStack [] stack;
			T pval;
			
			if (length < 2)
				return;
			
			// initialize our stack
			stack = new QuickSortStack [32];
			stack[0].hi = index + length - 1;
			stack[0].lo = index;
			sp = 1;
			
			do {
				sp--;
				lo = stack[sp].lo;
				hi = stack[sp].hi;
				
				if ((lo + INSERTIONSORT_THRESHOLD) > hi) {
					// switch to insertion sort
					for (i = lo + 1; i <= hi; i++)
						for (k = i; k > lo && comparison (array[k], array[k-1]) < 0; k--)
							swap (array, k - 1, k);
					
					continue;
				}
				
				// calculate the middle element
				mid = lo + ((hi - lo) / 2);
				
				// once we re-order the lo, mid, and hi elements to be in
				// ascending order, we'll use mid as our pivot.
				if (comparison (array[mid], array[lo]) < 0)
					swap (array, mid, lo);
				
				if (comparison (array[hi], array[mid]) < 0) {
					swap (array, mid, hi);
					if (comparison (array[mid], array[lo]) < 0)
						swap (array, mid, lo);
				}
				
				/* since we've already guaranteed that lo <= mid and mid <= hi,
				 * we can skip comparing them again */
				pval = array[mid];
				k = hi - 1;
				i = lo + 1;
				
				do {
					if (pval == null) {
						while (i < k && array[i] == null)
							i++;
						
						while (k >= i && array[k] != null)
							k--;
					} else {
						// find the first element with a value > pivot value
						while (i < k && comparison (array[i], pval) <= 0)
							i++;
						
						// find the last element with a value <= pivot value
						while (k >= i && comparison (pval, array[k]) < 0)
							k--;
					}
					
					if (k <= i)
						break;
					
					swap (array, i, k);
					
					// make sure we keep track of our pivot element
					if (mid == i)
						mid = k;
					else if (mid == k)
						mid = i;
					
					i++;
					k--;
				} while (true);
				
				if (k != mid) {
					// swap the pivot with the last element in the first partition
					swap (array, mid, k);
				}
				
				// push our partitions onto the stack, largest first
				// (to make sure we don't run out of stack space)
				if ((hi - k) >= (k - lo)) {
					if ((k + 1) < hi) {
						stack[sp].lo = k + 1;
						stack[sp].hi = hi;
						sp++;
					}
					
					if ((k - 1) > lo) {
						stack[sp].hi = k - 1;
						stack[sp].lo = lo;
						sp++;
					}
				} else {
					if ((k - 1) > lo) {
						stack[sp].hi = k - 1;
						stack[sp].lo = lo;
						sp++;
					}
					
					if ((k + 1) < hi) {
						stack[sp].lo = k + 1;
						stack[sp].hi = hi;
						sp++;
					}
				}
			} while (sp > 0);
		}
	}
	
	public class TestProgram {
		enum InputMode {
			Random,
			Sorted,
			Reversed
		}
		
		static long ncmps;
		
		static int Int32Compare (int v0, int v1) { ncmps++; return v0 - v1; }
		
		public static void Main (string [] args)
		{
			InputMode mode = InputMode.Random;
			Random random = new Random ();
			Stopwatch [] timer;
			bool got_n = false;
			int [] sorted = null;
			int [] master;
			int [] array;
			int n = 10000;
			int loops = 1;
			int val;
			
			for (int i = 0; i < args.Length; i++) {
				if (args[i] == "-sorted")
					mode = InputMode.Sorted;
				else if (args[i] == "-reversed")
					mode = InputMode.Reversed;
				else if (args[i] == "-random")
					mode = InputMode.Random;
				else if (!Int32.TryParse (args[i], out val))
					return;
				else if (got_n)
					loops = val;
				else {
					got_n = true;
					n = val;
				}
			}
			
		        master = new int [n];
			array = new int [n];
			
			switch (mode) {
			case InputMode.Random:
				for (int i = 0; i < n; i++)
					master[i] = random.Next (0, Int32.MaxValue);
				break;
			case InputMode.Reversed:
				for (int i = 0; i < n; i++)
					master[i] = n - i;
				break;
			case InputMode.Sorted:
				for (int i = 0; i < n; i++)
					master [i] = i;
				break;
			}
			
			timer = new Stopwatch [2];
			
			timer[0] = new Stopwatch ();
			ncmps = 0;
			for (int i = 0; i < loops; i++) {
				Array.Copy (master, array, n);
				timer[0].Start ();
				Sort<int>.QuickSortBasic (array, 0, n, Int32Compare);
				timer[0].Stop ();
				
				if (sorted == null) {
					// we use this later to check our results
					sorted = new int [n];
					Array.Copy (array, sorted, n);
				}
			}
			Console.WriteLine ("BasicQuickSort comparisons needed:     {0}", ncmps);
			
			timer[1] = new Stopwatch ();
			ncmps = 0;
			for (int i = 0; i < loops; i++) {
				Array.Copy (master, array, n);
				timer[1].Start ();
				//Sort<int>.NonRecursiveQuickSort (array, 0, n, Int32Compare);
				Sort<int>.FasterQuickSort (array, 0, n, Int32Compare);
				timer[1].Stop ();
			}
			Console.WriteLine ("FasterQuickSort comparisons needed:    {0}", ncmps);
			
			Console.WriteLine ("BasicQuickSort finished in:            {0}s", timer[0].Elapsed);
			Console.WriteLine ("FasterQuickSort finished in:           {0}s", timer[1].Elapsed);
			
			// now check our results
			for (int i = 0; i < n; i++) {
				if (array[i] != sorted[i]) {
					Console.WriteLine ("EEK! FasterQuickSort is broken! {0} != {1}", array[i], sorted[i]);
					break;
				}
			}
		}
	}
}
