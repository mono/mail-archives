namespace SpeedTest
{
	using System;
	using System.Data;
	using Mono.Data.Sqlite;

	class MainClass
	{
		public static void Main (string[] args)
		{
			var filename = "/tmp/foo.db";
			
			var builder = new SqliteConnectionStringBuilder()
			{
				DataSource = filename,
				UseUTF16Encoding = true,
				FailIfMissing = true,
				JournalMode = SQLiteJournalModeEnum.Off,
				SyncMode = SynchronizationModes.Off,
				Pooling = false,
				DateTimeFormat = SQLiteDateFormats.JulianDay
			};
			
			SqliteConnection.CreateFile(filename);
			
			using (var conn = new SqliteConnection(builder.ConnectionString)) {	
				conn.Open();
				
				using (var createCmd = conn.CreateCommand()) {
					createCmd.CommandText = "CREATE TABLE Foo (string1 VARCHAR(22) NOT NULL PRIMARY KEY, string2 VARCHAR(100) NOT NULL, string3 VARCHAR(1) NOT NULL, string4 VARCHAR(100) NOT NULL, string5 VARCHAR(100) NOT NULL, string6 VARCHAR(100) NOT NULL, string7 VARCHAR(100) NOT NULL, dateTime1 DATETIME NOT NULL, string8 VARCHAR(36) NOT NULL)";
					createCmd.ExecuteNonQuery();			
				}
				
				using (var cmd = conn.CreateCommand()) {
					cmd.CommandText = "INSERT INTO Foo (string1, string2, string3, string4, string5, string6, string7, dateTime1, string8) VALUES (@str1, @str2, @str3, @str4, @str5, @str6, @str7, @datetime, @str8)";		
					
					var param = cmd.CreateParameter();
					param.ParameterName = "@str1";
					param.DbType = DbType.String;
					param.Size = 22;
					cmd.Parameters.Add(param);
					
					param = cmd.CreateParameter();
					param.ParameterName = "@str2";
					param.DbType = DbType.String;
					param.Size = 100;
					cmd.Parameters.Add(param);
					
					param = cmd.CreateParameter();
					param.ParameterName = "@str3";
					param.DbType = DbType.String;
					param.Size = 1;
					cmd.Parameters.Add(param);
					
					param = cmd.CreateParameter();
					param.ParameterName = "@str4";
					param.DbType = DbType.String;
					param.Size = 100;
					cmd.Parameters.Add(param);
					
					param = cmd.CreateParameter();
					param.ParameterName = "@str5";
					param.DbType = DbType.String;
					param.Size = 1;
					cmd.Parameters.Add(param);
					
					param = cmd.CreateParameter();
					param.ParameterName = "@str6";
					param.DbType = DbType.String;
					param.Size = 100;
					cmd.Parameters.Add(param);
				
					param = cmd.CreateParameter();
					param.ParameterName = "@str7";
					param.DbType = DbType.String;
					param.Size = 100;
					cmd.Parameters.Add(param);
					
					param = cmd.CreateParameter();
					param.ParameterName = "@datetime";
					param.DbType = DbType.DateTime;
					cmd.Parameters.Add(param);
				
					param = cmd.CreateParameter();
					param.ParameterName = "@str8";
					param.DbType = DbType.String;
					param.Size = 36;
					cmd.Parameters.Add(param);
					
					cmd.Prepare();
					
					var trans = conn.BeginTransaction();
					cmd.Transaction = trans;
					
					long start = DateTime.Now.Ticks;
					
					var inserts = 256000;
					
					for (var i = 0; i < inserts; i ++) {
						var str = i.ToString();
						
						var str1 = "S" + str;
						var str2 = "String3_" + str;
						var str3 = "A";
						var str4 = "String5_" + str;
						var str8 = Guid.NewGuid().ToString();

						// via index as via string is slow due to iterating through all columns
						// until name is found (it showed up in the profiler)
						((IDataParameter)cmd.Parameters[0]).Value = str1;
						((IDataParameter)cmd.Parameters[1]).Value = str2;
						((IDataParameter)cmd.Parameters[2]).Value = str3;
						((IDataParameter)cmd.Parameters[3]).Value = str4;
						((IDataParameter)cmd.Parameters[4]).Value = string.Empty;
						((IDataParameter)cmd.Parameters[5]).Value = string.Empty;
						((IDataParameter)cmd.Parameters[6]).Value = string.Empty;
						((IDataParameter)cmd.Parameters[7]).Value = DateTime.Now;
						((IDataParameter)cmd.Parameters[8]).Value = str8;

						
						cmd.ExecuteNonQuery();	
					}
					
					long end = DateTime.Now.Ticks;
					
					var seconds = TimeSpan.FromTicks(end - start).TotalSeconds;
			
					var perSecond = inserts / seconds;
			
					Console.WriteLine("Inserted {0} rows in {1} seconds. {2} per second", inserts, seconds, perSecond);
					
					
					trans.Commit();
					conn.Close();
				}
			}
		}
	}
}
