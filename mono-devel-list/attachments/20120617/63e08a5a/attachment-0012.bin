diff --git a/mcs/class/Managed.Windows.Forms/System.Windows.Forms/DataGrid.cs b/mcs/class/Managed.Windows.Forms/System.Windows.Forms/DataGrid.cs
index 9f6503c..e7dde39 100644
--- a/mcs/class/Managed.Windows.Forms/System.Windows.Forms/DataGrid.cs
+++ b/mcs/class/Managed.Windows.Forms/System.Windows.Forms/DataGrid.cs
@@ -1311,8 +1311,10 @@ namespace System.Windows.Forms
 		
 			EndEdit ();
 
-			DataGridDataSource source = (DataGridDataSource)data_source_stack.Pop ();
-			CurrentTableStyle= (DataGridTableStyle)data_grid_table_style_stack.Pop ();
+			DataGridDataSource source = 
+				(DataGridDataSource) data_source_stack.Pop ();
+			CurrentTableStyle = 
+				(DataGridTableStyle) data_grid_table_style_stack.Pop ();
 			grid_style = (DataGridTableStyle) grid_style_stack.Pop ();
 
 			list_manager = source.list_manager;
diff --git a/mcs/class/Managed.Windows.Forms/System.Windows.Forms/DataGridTableStyle.cs b/mcs/class/Managed.Windows.Forms/System.Windows.Forms/DataGridTableStyle.cs
index 61a1332..8166e26 100644
--- a/mcs/class/Managed.Windows.Forms/System.Windows.Forms/DataGridTableStyle.cs
+++ b/mcs/class/Managed.Windows.Forms/System.Windows.Forms/DataGridTableStyle.cs
@@ -867,6 +867,7 @@ namespace System.Windows.Forms
 					}
 				}
 			}
+
 		}
 
 		#endregion Private Instance Properties
diff --git a/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUICarbon.cs b/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUICarbon.cs
index 957664b..fd8a9dd 100644
--- a/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUICarbon.cs
+++ b/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUICarbon.cs
@@ -768,9 +768,11 @@ namespace System.Windows.Forms {
 
 		internal override void RaiseIdle (EventArgs e)
 		{
-			int id=Thread.CurrentThread.ManagedThreadId;
-			if (Idle_Threads!=null && Idle_Threads.ContainsKey(id) && Idle_Threads[id]!=null){
-                               Idle_Threads[id](this,e);
+			int id = Thread.CurrentThread.ManagedThreadId;
+			if (Idle_Threads != null && 
+				Idle_Threads.ContainsKey (id) 
+				&& Idle_Threads[id] != null){
+                               Idle_Threads[id] (this, e);
 			}
 		}
 
@@ -1367,12 +1369,12 @@ namespace System.Windows.Forms {
 			lock (queuelock) {
 
 				if (MessageQueue.Count <= 0) {
-					int id=Thread.CurrentThread.ManagedThreadId;	
-					if (Idle_Threads!=null && 
-					   Idle_Threads.ContainsKey(id) && 
-					   Idle_Threads[id]!=null)
+					int id = Thread.CurrentThread.ManagedThreadId;	
+					if (Idle_Threads != null && 
+					   Idle_Threads.ContainsKey (id) && 
+					   Idle_Threads[id] != null)
 					{
-						Idle_Threads[id](this,EventArgs.Empty);
+						Idle_Threads[id] (this, EventArgs.Empty);
 					} else if (TimerList.Count == 0) {
 						ReceiveNextEvent (0, IntPtr.Zero, 0.15, true, ref evtRef);
 						if (evtRef != IntPtr.Zero && target != IntPtr.Zero) {
diff --git a/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIDriver.cs b/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIDriver.cs
index 752b16c..8456117 100644
--- a/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIDriver.cs
+++ b/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIDriver.cs
@@ -270,27 +270,28 @@ namespace System.Windows.Forms {
 		}
 		#endregion	// XplatUI Driver Properties
 
-		internal Dictionary<int,EventHandler> Idle_Threads;
+		internal Dictionary<int, EventHandler> Idle_Threads;
 		internal virtual event EventHandler Idle {
 			add {
-				if (Idle_Threads==null){
-					Idle_Threads=new Dictionary<int,EventHandler>();
+				if (Idle_Threads == null){
+					Idle_Threads = 
+					  new Dictionary<int, EventHandler> ();
 				}
-				int id=Thread.CurrentThread.ManagedThreadId;
-				if (!Idle_Threads.ContainsKey(id)){
-					EventHandler hnd=null;
-					Idle_Threads.Add(id,hnd);
+				int id = Thread.CurrentThread.ManagedThreadId;
+				if (!Idle_Threads.ContainsKey (id)) {
+					EventHandler hnd = null;
+					Idle_Threads.Add (id, hnd);
 				}
-				Idle_Threads[id]+=value;
+				Idle_Threads[id] += value;
 			}
 			remove {
-				if (Idle_Threads!=null){
-					int id=Thread.CurrentThread.ManagedThreadId;
-					if (Idle_Threads.ContainsKey(id)){
-						Idle_Threads[id]-=value;
-						if (Idle_Threads[id]==null)
-						{
-							Idle_Threads.Remove(id);
+				if (Idle_Threads != null){
+					int id = 
+					  Thread.CurrentThread.ManagedThreadId;
+					if (Idle_Threads.ContainsKey (id)) {
+						Idle_Threads[id] -= value;
+						if (Idle_Threads[id] == null) {
+							Idle_Threads.Remove (id);
 						}
 					}
 				}
diff --git a/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIWin32.cs b/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIWin32.cs
index ff77b8a..f892794 100644
--- a/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIWin32.cs
+++ b/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIWin32.cs
@@ -1240,10 +1240,12 @@ namespace System.Windows.Forms {
 
 		internal override void RaiseIdle (EventArgs e)
 		{	
-			int id=Thread.CurrentThread.ManagedThreadId;
-			if (Idle_Threads!=null && Idle_Threads.ContainsKey(id) && Idle_Threads[id]!=null)
+			int id = Thread.CurrentThread.ManagedThreadId;
+			if (Idle_Threads != null && 
+				Idle_Threads.ContainsKey (id) && 
+				Idle_Threads[id] != null)
 			{
-				Idle_Threads[id](this,e);
+				Idle_Threads[id] (this, e);
 			}
 		}
 
diff --git a/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIX11.cs b/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIX11.cs
index 4b578a9..275ee47 100644
--- a/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIX11.cs
+++ b/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIX11.cs
@@ -1697,11 +1697,13 @@ namespace System.Windows.Forms {
 			}
 
 			if (pending == 0 && allowIdle) {
-				int id=Thread.CurrentThread.ManagedThreadId;
-				if ((queue == null || queue.DispatchIdle) && Idle_Threads!=null && Idle_Threads.ContainsKey(id) && Idle_Threads[id]!=null) 
+				int id = Thread.CurrentThread.ManagedThreadId;
+				if ((queue == null || queue.DispatchIdle) && 
+					Idle_Threads != null && 	
+					Idle_Threads.ContainsKey (id) && 
+					Idle_Threads[id] != null) 
 				{
-					Idle_Threads[id](this,EventArgs.Empty);
-	
+					Idle_Threads[id] (this, EventArgs.Empty);
 				}
 
 				lock (XlibLock) {
@@ -2597,10 +2599,12 @@ namespace System.Windows.Forms {
 		#region Public Static Methods
 		internal override void RaiseIdle (EventArgs e)
 		{
-			int id=Thread.CurrentThread.ManagedThreadId;
-			if (Idle_Threads!=null && Idle_Threads.ContainsKey(id) && Idle_Threads[id]!=null) 
+			int id = Thread.CurrentThread.ManagedThreadId;
+			if (Idle_Threads != null && 
+			    Idle_Threads.ContainsKey (id) && 
+			    Idle_Threads[id] != null) 
 			{
-				Idle_Threads[id](this,e);
+				Idle_Threads[id] (this, e);
 			}
 		}
 		
diff --git a/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIX11GTK.cs b/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIX11GTK.cs
index 1103c85..1e52345 100644
--- a/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIX11GTK.cs
+++ b/mcs/class/Managed.Windows.Forms/System.Windows.Forms/XplatUIX11GTK.cs
@@ -1199,10 +1199,12 @@ namespace System.Windows.Forms {
 			}
 			
 			if (pending == 0) {
-				int id=Thread.CurrentThread.ManagedThreadId;
-				if (Idle_Threads!=null && Idle_Threads.ContainsKey(id) && Idle_Threads[id]!=null){
+				int id = Thread.CurrentThread.ManagedThreadId;
+				if (Idle_Threads != null && 
+				    Idle_Threads.ContainsKey (id) && 
+				    Idle_Threads[id] != null){
 				{
-					Idle_Threads[id](this,EventArgs.Empty);
+					Idle_Threads[id] (this, EventArgs.Empty);
 				}
 				
 				lock (XlibLock) {
diff --git a/mcs/class/Managed.Windows.Forms/Test/System.Windows.Forms/FormEventTest.cs b/mcs/class/Managed.Windows.Forms/Test/System.Windows.Forms/FormEventTest.cs
index 2753bcf..96326dc 100644
--- a/mcs/class/Managed.Windows.Forms/Test/System.Windows.Forms/FormEventTest.cs
+++ b/mcs/class/Managed.Windows.Forms/Test/System.Windows.Forms/FormEventTest.cs
@@ -623,7 +623,7 @@ namespace MonoTests.System.Windows.Forms
 			eventhandled = false;
 			_form.MinimumSize = new Size(100, 100);
 			Assert.AreEqual (true, eventhandled, "#A10");
-		}	
+		}
 
 		/**
 		 ** This next test is in response to a bug report
@@ -633,54 +633,62 @@ namespace MonoTests.System.Windows.Forms
 		 **
 		 ** Report: https://bugzilla.novell.com/show_bug.cgi?id=321541
 		 **/
-		private static Form _form1_OneIdlePerThread=null;
-		private static Form _form2_OneIdlePerThread=null;
-		private static int count1_OIPT=0;
-		private static int count2_OIPT=0; 
+		private static Form form1_OneIdlePerThread = null;
+		private static Form form2_OneIdlePerThread = null;
+		private static int count1_OIPT = 0;
+		private static int count2_OIPT = 0; 
 		private static ThreadStart OIPT_ThreadStart2;
 		private static Thread OIPT_Thread2;
-		private static int oipt_t1=0;
-		private static int oipt_t2=0;
+		private static int oipt_t1 = 0;
+		private static int oipt_t2 = 0;
 		[Test]
-		public void OneIdlePerThread(){
-			Thread t=Thread.CurrentThread;
-			oipt_t1=t.ManagedThreadId;
-			count1_OIPT=0;count2_OIPT=0;
-			_form1_OneIdlePerThread=new Form();
+		public void OneIdlePerThread () {
+			Thread t = Thread.CurrentThread;
+			oipt_t1 = t.ManagedThreadId;
+			count1_OIPT = 0;
+			count2_OIPT = 0;
+			form1_OneIdlePerThread = new Form ();
 	
-			OIPT_ThreadStart2=new ThreadStart(TIPT_Two);
-			OIPT_Thread2=new Thread(OIPT_ThreadStart2);
-			OIPT_Thread2.IsBackground=true;
-			OIPT_Thread2.ApartmentState=ApartmentState.STA;
-			OIPT_Thread2.Start();
-			Application.Idle+=new EventHandler(TestIdlePerThread);
-			Application.Run(_form1_OneIdlePerThread);
-			Thread.Sleep(1000);//allow other thread to finish
-			Assert.AreEqual (true, count1_OIPT==1, "#Idle: idle #1 hit too many times");
-			Assert.AreEqual (true, count2_OIPT==1, "#Idle: idle #2 hit too many times");
-		}
-		public static void TIPT_Two(){
-			Thread t=Thread.CurrentThread;
-			oipt_t2=t.ManagedThreadId;
-			_form2_OneIdlePerThread=new Form();
-			Application.Idle+=new EventHandler(TestIdlePerThread2);
-			Application.Run(_form2_OneIdlePerThread);
-		}
-		public static void TestIdlePerThread(object o, EventArgs e){	
-			Thread t=Thread.CurrentThread;
+			OIPT_ThreadStart2 = new ThreadStart (TIPT_Two);
+			OIPT_Thread2=new Thread (OIPT_ThreadStart2);
+			OIPT_Thread2.IsBackground = true;
+			OIPT_Thread2.ApartmentState = ApartmentState.STA;
+			OIPT_Thread2.Start ();
+			Application.Idle += new EventHandler(TestIdlePerThread);
+			Application.Run (form1_OneIdlePerThread);
+			Thread.Sleep (1000);//allow other thread to finish
+			Assert.AreEqual (true, count1_OIPT == 1, 
+				"#Idle: idle #1 hit too many times");
+			Assert.AreEqual (true, count2_OIPT == 1, 	
+				"#Idle: idle #2 hit too many times");
+		}
+		public static void TIPT_Two (){
+			Thread t = Thread.CurrentThread;
+			oipt_t2 = t.ManagedThreadId;
+			form2_OneIdlePerThread = new Form ();
+			Application.Idle += 	
+				new EventHandler (TestIdlePerThread2);
+			Application.Run (form2_OneIdlePerThread);
+		}
+		public static void TestIdlePerThread (object o, EventArgs e) {
+			Thread t = Thread.CurrentThread;
 			count1_OIPT++;
-			Application.Idle-=new EventHandler(TestIdlePerThread);
-			if (_form1_OneIdlePerThread!=null)
-				_form1_OneIdlePerThread.Close();
-			Assert.AreEqual (true, oipt_t1==t.ManagedThreadId, "#Idle:Wrong Thread-t1");
-		}
-		public static void TestIdlePerThread2(object o, EventArgs e){	
-			Thread t=Thread.CurrentThread;
+			Application.Idle -= 
+				new EventHandler (TestIdlePerThread);
+			if (form1_OneIdlePerThread != null)
+				form1_OneIdlePerThread.Close ();
+			Assert.AreEqual (true, oipt_t1 == t.ManagedThreadId, 
+				"#Idle:Wrong Thread-t1");
+		}
+		public static void TestIdlePerThread2 (object o, EventArgs e) {
+			Thread t = Thread.CurrentThread;
 			count2_OIPT++;
-			Application.Idle-=new EventHandler(TestIdlePerThread2);
-			if (_form2_OneIdlePerThread!=null)
-				_form2_OneIdlePerThread.Close();
-			Assert.AreEqual (true, oipt_t2==t.ManagedThreadId, "#Idle:Wrong Thread-t2");
+			Application.Idle -= 
+				new EventHandler(TestIdlePerThread2);
+			if (form2_OneIdlePerThread != null)
+				form2_OneIdlePerThread.Close ();
+			Assert.AreEqual (true, oipt_t2 == t.ManagedThreadId, 
+				"#Idle:Wrong Thread-t2");
 		}
 		
 	}
