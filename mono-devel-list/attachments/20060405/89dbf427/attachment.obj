Index: Test/System.Web.UI.WebControls/LoginViewTest.cs
===================================================================
--- Test/System.Web.UI.WebControls/LoginViewTest.cs	(revision 0)
+++ Test/System.Web.UI.WebControls/LoginViewTest.cs	(revision 0)
@@ -0,0 +1,73 @@
+//
+// LoginViewTest.cs	- Unit tests for System.Web.UI.WebControls.LoginView
+//
+// Author:
+//	Konstantin Triger <kostat@mainsoft.com>
+//
+// Copyright (C) 2006 Mainsoft, Inc (http://www.mainsoft.com)
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+#if NET_2_0
+
+using System;
+using System.Collections;
+using System.IO;
+using System.Web;
+using System.Web.UI;
+using System.Web.UI.WebControls;
+
+using NUnit.Framework;
+
+namespace MonoTests.System.Web.UI.WebControls {
+	
+	public class LoginViewTemplate : WebControl, ITemplate {
+		public LoginViewTemplate() {
+			ID = "kuku";
+		}
+			
+		void ITemplate.InstantiateIn(Control container) {
+			container.Controls.Add(this);
+		}
+
+	}
+
+	public class TestLoginView : LoginView {
+		public void DoEnsureChildControls() {
+			base.EnsureChildControls ();
+		}
+	}
+	
+	[TestFixture]
+	public class LoginViewTest {
+		
+		[Test]
+		public void AnonymousTemplate ()
+		{
+			TestLoginView l = new TestLoginView ();
+			l.AnonymousTemplate = new LoginViewTemplate();
+			l.DoEnsureChildControls();
+			Assert.IsNotNull(l.FindControl("kuku"), "AnonymousTemplate");
+		}
+	}
+}
+
+#endif

Property changes on: Test/System.Web.UI.WebControls/LoginViewTest.cs
___________________________________________________________________
Name: svn:executable
   + *
Name: svn:eol-style
   + native

Index: System.Web_test.dll.sources
===================================================================
--- System.Web_test.dll.sources	(revision 59055)
+++ System.Web_test.dll.sources	(working copy)
@@ -130,6 +130,7 @@
 System.Web.UI.WebControls/LoginNameTest.cs
 System.Web.UI.WebControls/LoginStatusTest.cs
 System.Web.UI.WebControls/LoginTest.cs
+System.Web.UI.WebControls/LoginViewTest.cs
 System.Web.UI.WebControls/MonthChangedEventArgsTest.cs
 System.Web.UI.WebControls/PagedDataSourceTest.cs
 System.Web.UI.WebControls/PanelTest.cs
Index: System.Web.UI.WebControls/LoginView.cs
===================================================================
--- System.Web.UI.WebControls/LoginView.cs	(revision 59055)
+++ System.Web.UI.WebControls/LoginView.cs	(working copy)
@@ -3,6 +3,7 @@
 //
 // Author:
 //	Sebastien Pouliot  <sebastien@ximian.com>
+//	Konstantin Triger  <kostat@mainsoft.com>
 //
 // Copyright (C) 2005 Novell, Inc (http://www.novell.com)
 //
@@ -51,6 +52,7 @@
 
 		private ITemplate anonymousTemplate;
 		private ITemplate loggedInTemplate;
+		private bool isAuthenticated;
 		private bool theming;
 		private RoleGroupCollection coll;
 
@@ -70,9 +72,11 @@
 			set { anonymousTemplate = value; }
 		}
 
-		[MonoTODO]
 		public override ControlCollection Controls {
-			get { return base.Controls; }
+			get {
+				EnsureChildControls();
+				return base.Controls;
+			}
 		}
 
 		[Browsable (true)]
@@ -102,24 +106,40 @@
 			}
 		}
 
-		[MonoTODO]
 		[Browsable (true)]
 		public override string SkinID {
 			get { return base.SkinID; }
 			set { base.SkinID = value; }
 		}
 
+		bool IsAuthenticated {
+			get {
+				if (Page != null && !Page.IsPostBack)
+					isAuthenticated = Page.Request.IsAuthenticated;
 
-		[MonoTODO]
+				return isAuthenticated;
+			}
+		}
+
+		[MonoTODO("Handle RoleGroups")]
 		protected internal override void CreateChildControls ()
 		{
-			base.CreateChildControls ();
+			Controls.Clear();
+			Control c = new Control();
+			if (IsAuthenticated)
+				LoggedInTemplate.InstantiateIn(c);
+			else
+				AnonymousTemplate.InstantiateIn(c);
+
+			Controls.Add(c);
 		}
 
-		[MonoTODO]
 		public override void DataBind ()
 		{
-			base.DataBind ();
+			EventArgs args = EventArgs.Empty;
+			OnDataBinding(args);
+			EnsureChildControls();
+			DataBindChildren();
 		}
 
 		[EditorBrowsable (EditorBrowsableState.Never)]
@@ -129,40 +149,58 @@
 			throw new NotSupportedException ();
 		}
 
-		[MonoTODO]
 		protected internal override void LoadControlState (object savedState)
 		{
-			base.LoadControlState (savedState);
+			if (savedState == null) {
+				base.LoadControlState (savedState);
+				return;
+			}
+
+			Pair pair = (Pair)savedState;
+			base.LoadControlState(pair.First);
+			isAuthenticated = (bool)pair.Second;
 		}
 
-		[MonoTODO]
 		protected internal override void OnInit (EventArgs e)
 		{
 			base.OnInit (e);
+			if (Page != null)
+				Page.RegisterRequiresControlState(this);
 		}
 
-		[MonoTODO]
 		protected internal override void OnPreRender (EventArgs e)
 		{
 			base.OnPreRender (e);
+			isAuthenticated = IsAuthenticated;
+			EnsureChildControls();
 		}
 
-		[MonoTODO]
 		protected virtual void OnViewChanged (EventArgs e)
 		{
-			throw new NotImplementedException ();
+			EventHandler h = (EventHandler)Events[viewChangedEvent];
+			if (h != null)
+				h(this, e);
 		}
 
-		[MonoTODO]
 		protected virtual void OnViewChanging (EventArgs e)
 		{
-			throw new NotImplementedException ();
+			EventHandler h = (EventHandler)Events[viewChangingEvent];
+			if (h != null)
+				h(this, e);
 		}
 
-		[MonoTODO]
+		protected internal override void Render(HtmlTextWriter writer) {
+			EnsureChildControls();
+			base.Render (writer);
+		}
+
 		protected internal override object SaveControlState ()
 		{
-			return base.SaveControlState ();
+			object baseState = base.SaveControlState ();
+			if (isAuthenticated)
+				return new Pair(baseState, isAuthenticated);
+
+			return baseState;
 		}
 
 		[MonoTODO ("for design-time usage - no more details available")]
