using System;
using System.Collections.Generic;
using System.IO;
using Mono.Unix;

// Compile with "mcs fsw.cs /r:Mono.Posix.dll"

public class FSW
{
    private static IDictionary<string, FileSystemWatcher> watches = new Dictionary<string, FileSystemWatcher>();

    public static void Main()
    {
        string[] args = System.Environment.GetCommandLineArgs();
        if (args.Length != 2)
        {
            System.Console.WriteLine("USAGE: (mono) fswtest(.exe) file_to_watch");
            goto Error;
        }

        SetUpWatch(args[1]);

        Console.WriteLine("Press \'Q\' to quit.");
        while(Console.Read() != 'q')
            ;

    Error:
        ;
    }

    private static void SetUpWatch(string file)
    {
        do
        {
            AddWatch(file);
            file = GetSymbolicLinkTarget(file);
        }
        while (file != null);
        EnableWatches();
    }

    private static void AddWatch(string file)
    {
        FileSystemWatcher watcher = new FileSystemWatcher();
        watcher.Path = Path.GetDirectoryName(file);
        watcher.NotifyFilter = 0
//          | NotifyFilters.Attributes
//          | NotifyFilters.CreationTime
          | NotifyFilters.DirectoryName
          | NotifyFilters.FileName
          | NotifyFilters.LastAccess
          | NotifyFilters.LastWrite
//          | NotifyFilters.Security
//          | NotifyFilters.Size
          ;
        watcher.Filter = Path.GetFileName(file);
        watcher.Changed += new FileSystemEventHandler(OnChanged);
        watcher.Created += new FileSystemEventHandler(OnChanged);
        watcher.Deleted += new FileSystemEventHandler(OnChanged);
//        watcher.Disposed // Occurs when the component is disposed by a call to the Dispose method. (Inherited from Component.)
//        watcher.Error // Occurs when the instance of FileSystemWatcher is unable to continue monitoring changes or when the internal buffer overflows.
        watcher.Renamed += new RenamedEventHandler(OnRenamed);
        watches.Add(Path.GetFullPath(file), watcher);
Console.WriteLine("Watching: " + Path.GetFullPath(file));
    }

    private static string GetSymbolicLinkTarget(string file)
    {
        UnixSymbolicLinkInfo link = new UnixSymbolicLinkInfo(file);
        return link.HasContents ? link.GetContents().FullName : null;
    }

    private static void EnableWatches()
    {
        foreach (KeyValuePair<string, FileSystemWatcher> watch in watches)
        {
            watch.Value.EnableRaisingEvents = true;
Console.WriteLine("" + watch.Value.Filter + " watching ENABLED");
        }
    }

    private static void OnChanged(object source, FileSystemEventArgs eventargs)
    {
        Console.WriteLine("File: \"" + eventargs.FullPath + "\" -- " + eventargs.ChangeType);
    }

    private static void OnRenamed(object source, RenamedEventArgs eventargs)
    {
        Console.WriteLine("File: {0} renamed to {1}", eventargs.OldFullPath, eventargs.FullPath);
    }
}
