? mcs/class/Commons.Xml.Relaxng/y.output
? mono/_tmpinst
? mono/mscorlib.dll
? mono/tmpinst-dir.stamp
Index: mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/ErrObject.cs
===================================================================
RCS file: /mono/mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/ErrObject.cs,v
retrieving revision 1.5
diff -u -r1.5 ErrObject.cs
--- mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/ErrObject.cs	10 Jun 2004 14:12:47 -0000	1.5
+++ mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/ErrObject.cs	11 Jun 2004 15:21:52 -0000
@@ -10,385 +10,133 @@
 //
 
 using System;
-using Microsoft.VisualBasic.CompilerServices;
 
 namespace Microsoft.VisualBasic 
 {
 	sealed public class ErrObject {
-
-		private System.Exception pException;
-		private int pErl;
-		private int pNumber;
-		private string pSource;
-		private string pDescription;
-		private string pHelpFile;
-		private int pHelpContext;
-
-		private int pLastDllError;
-
-		private bool m_bDontMapException = false;
-		private bool NumberIsSet = false;
-		private bool ClearOnCapture = false;
-		private bool SourceIsSet = false;
-		private bool DescriptionIsSet = false;
-		private bool HelpFileIsSet = false;
-		private bool HelpContextIsSet = false;
-
-		public ErrObject()
-	        {
-			Clear();
-		}
-
-		public void Clear () 
-		{
-			pException = null;
-			pErl = 0;
-			pNumber = 0;
-			pSource = "";
-			pDescription = "";
-			pHelpFile = "";
-			pHelpContext = 0;
-
-			m_bDontMapException = false;
-			NumberIsSet = false;
-			ClearOnCapture = false;
-			SourceIsSet = false;
-			DescriptionIsSet = false;
-			HelpFileIsSet = false;
-			HelpContextIsSet = false;
-			ClearOnCapture = true;
-		}
-
-		public void CaptureException (Exception ex)
-		{
-			if(ex == pException)
-				return;
-			if(ClearOnCapture == true)
-				Clear();
-			else
-				ClearOnCapture = true;
-
-			pException = ex;
-		}
-
-		public void CaptureException (Exception ex, int lErl)
-		{
-			CaptureException(ex);
-			pErl = lErl;
-		}
-
-		public Exception CreateException (int Number, String Description)
-		{
-			Exception ex;
-
-			Clear();
-			this.Number = Number;
-			if(Number == 0)
-				throw new ArgumentException(Utils.GetResourceString("Argument_InvalidValue1", "Number"));
-			ex = MapNumberToException(pNumber, Description);
-			this.ClearOnCapture = false;
-			return ex;
-		}
-
-		private String FilterDefaultMessage(String Msg)
-		{
-			if(pException == null)
-				return Msg;
-
-			string Msg1 = Utils.GetResourceString(this.Number);
-
-			if(Msg == null || Msg.Length == 0)
-				return Msg1;
-			else if(String.CompareOrdinal("Exception from HRESULT: 0x", 0, Msg, 0, System.Math.Min(Msg.Length, 26)) == 0) {
-				return (Msg1 != null ? Msg1 : Msg);
-			}
-			else
-				return Msg;
-		}
-
-		private Exception MapNumberToException (int Number, String Description)
-		{
-			bool Ignored = false;
-			return ExceptionUtils.BuildException(Number, Description, ref Ignored);
-		}
-
-
-		// This function needs to be reviewed
-		private int MapExceptionToNumber (Exception ex)
-		{
-			int hResult = 0;
-
-			if(ex is ArgumentException) {
-				hResult = unchecked((int)0x80070057);
-			}
-			else if(ex is ArithmeticException) {
-				if(ex is NotFiniteNumberException) { 
-					if((ex as NotFiniteNumberException).OffendingNumber == 0)
-						return 11;
-					else
-						return 6;
-				}
-				else {
-					hResult = unchecked((int)0x80070216);     
-				}
-			}
-			else if(ex is ArrayTypeMismatchException) {
-				hResult = unchecked((int)0x80131503);
-			}
-			// else if(exType.Equals(IndexOutOfRangeException)) {
-			//	hResult = (exType.Equals(IndexOutOfRangeException)).HResult;     
-			// }
-			else if(ex is InvalidCastException) {
-				hResult = unchecked((int)0x80004002);
-			}
-			else if(ex is NotSupportedException) {
-				hResult = unchecked((int)0x80131515);
-			}
-			else if(ex is NullReferenceException) {
-				hResult = unchecked((int)0x80004003);
-			}
-			else if(ex is UnauthorizedAccessException) {
-				hResult = unchecked((int)0x80131500);
-			}
-
-			else {
-				hResult = unchecked((int)0x80004005);
-			}
-
-			hResult = ExceptionUtils.getVBFromDotNet(hResult);
-			if(hResult != 0 )
-				return hResult;
-			else
-				return 5;
-		}
-
-		private void ParseHelpLink (String HelpLink)
-		{
-			int ind;
-
-			if(HelpLink == null || HelpLink.Length == 0) {
-				if(HelpContextIsSet == false)
-					this.HelpContext = 0;
-
-				if (HelpFileIsSet == false)
-					this.HelpFile = "";
-			}
-			else {
-				ind = HelpLink.IndexOf("#");
-
-				if(ind != -1) {
-					if(HelpContextIsSet == false) {
-						if(ind < HelpLink.Length)
-							this.HelpContext = IntegerType.FromString(HelpLink.Substring(ind + 1));
-						else
-							this.HelpContext = 0;
-					}
-					if (HelpFileIsSet == false)
-						this.HelpFile = HelpLink.Substring(0, ind);
-				}
-				else {
-					if (HelpContextIsSet == false)
-						this.HelpContext = 0;
-
-					if (!this.HelpFileIsSet)
-						this.HelpFile = HelpLink;
-				}
-			}
-		}
-
-		public int MapErrorNumber (int Number)
-		{
-			if(Number > 65535)
-				throw new ArgumentException(VBUtils.GetResourceString("Argument_InvalidValue1", "Number"));
-
-
-			if(Number >= 0)
-				return Number;
-			else
-				return ExceptionUtils.fromDotNetToVB(Number);
-		}
-
-		private String MakeHelpLink(String HelpFile, int HelpContext)
-		{
-			return HelpFile + "#" + StringType.FromInteger(HelpContext);
-		}
-
-		[MonoTODO]
-		public void Raise (System.Int32 Number, 
-				   [System.Runtime.InteropServices.Optional] 
-				   [System.ComponentModel.DefaultValue(null)] System.Object Source, 
-				   [System.Runtime.InteropServices.Optional] 
-				   [System.ComponentModel.DefaultValue(null)] System.Object Description, 
-				   [System.Runtime.InteropServices.Optional] 
-				   [System.ComponentModel.DefaultValue(null)] System.Object HelpFile, 
-				   [System.Runtime.InteropServices.Optional] 
-				   [System.ComponentModel.DefaultValue(null)] System.Object HelpContext) 
+		// Declarations
+		int pHelpContext;
+		int pLastDllError;
+		int pNumber;
+		int pErl;
+		string pSource;
+		string pHelpFile;
+		string pDescription;
+		System.Exception pException;
+		// Constructors
+		// Properties
+		//[MonoTODO]
+		public System.Int32 HelpContext 
 		{ 
-			Exception e;
-			
-		        if(Number == 0)
-				throw new ArgumentException(Utils.GetResourceString("Argument_InvalidValue1", "Number"));
-
-			this.Number = Number;
-
-			if(Source != null)
-				this.Source = StringType.FromObject(Source);
-			else
-				this.Source = "";
-
-			if(HelpFile != null)
-				this.HelpFile = StringType.FromObject(HelpFile);
-
-			if(HelpContext != null)
-				this.HelpContext = IntegerType.FromObject(HelpContext);
-
-			if(Description != null)
-				this.Description = StringType.FromObject(Description);
-			else if (DescriptionIsSet == false)
-				this.Description = Utils.GetResourceString(pNumber);
-
-			e = MapNumberToException(pNumber, pDescription);
-
-
-			e.Source = pSource;
-			e.HelpLink = MakeHelpLink(pHelpFile, pHelpContext);
-
-
-			ClearOnCapture = false;
-			throw e;
-		} 
-
-		public void SetUnmappedError (int Number)
-		{
-			Clear();
-			this.Number = Number;
-			ClearOnCapture = false;
+			get { 
+				return pHelpContext; 
+			} 
+			set { 
+				pHelpContext = value;
+			} 
 		}
-
-		public System.Exception GetException () 
-		{
-			return pException;
+		//[MonoTODO]
+		public System.Int32 LastDllError {  
+			get { 
+				return pLastDllError; 
+			} 
 		}
-
-		public System.String Description {  
+		//[MonoTODO]
+		public System.Int32 Number {  
 			get { 
-				if(DescriptionIsSet)
-					return pDescription;
-
-				if(pException == null)
-					return "";
-
-				if(pException is Exception)
-					this.Description = FilterDefaultMessage(pException.Message);
-				else
-					this.Description = FilterDefaultMessage(pException.Message);
-			
-				return pDescription; 
+				return pNumber;
 			} 
 			set { 
-				pDescription = value;
-				DescriptionIsSet = true;
+				pNumber = value;
 			} 
 		}
-
+//		[MonoTODO]
 		public System.Int32 Erl {  
 			get { 
 				return pErl;
 			} 
 		}
-
-		public System.Int32 HelpContext 
-		{ 
+//		[MonoTODO]
+		public System.String Source {  
 			get { 
-				if(HelpContextIsSet)
-					return pHelpContext; 
-
-				if(pException != null)
-				{
-					if(pException is Exception)
-						ParseHelpLink(pException.HelpLink);
-					else
-						ParseHelpLink("");
-
-					return this.pHelpContext;
-				}
-				return 0;
-			}
-
+				return pSource;
+			} 
 			set { 
-				pHelpContext = value;
-				HelpContextIsSet = true;
+				pSource = value;
 			} 
 		}
-
+//		[MonoTODO]
 		public System.String HelpFile {  
 			get { 
-				if (HelpFileIsSet == true)
-					return pHelpFile;
-        
-				if(pException != null) {
-					if(pException is Exception)
-						ParseHelpLink((pException as Exception).HelpLink);
-					else
-						ParseHelpLink("");
-
-					return pHelpFile;
-				}
-				return "";
+				return pHelpFile;
 			} 
 			set { 
 				pHelpFile = value;
-				HelpFileIsSet = true;
 			} 
 		}
-
-		[MonoTODO]
-		public System.Int32 LastDllError {  
+//		[MonoTODO]
+		public System.String Description {  
 			get { 
-				return 0; 
+				return pDescription; 
+			} 
+			set { 
+				pDescription = value;
 			} 
 		}
+		// Methods
+		/*[MonoTODO("We should parse the exception object to obtain VB-like error code. Not a trivial task!")]*/
 
-		public System.Int32 Number {  
-			get { 
-				if(NumberIsSet)
-					return pNumber;
 
-				if(pException == null)
-					return 0;
 
-				this.Number = MapExceptionToNumber(pException);
-				return pNumber;
-			} 
-			set { 
-				pNumber = MapErrorNumber(value);
-				NumberIsSet = true;
-			} 
+		internal void SetException (Exception ex)
+		{
+			if (pException != ex) 
+			{
+				pNumber = 0xFFFF;
+				pSource = ex.Source;
+				pDescription = ex.Message + "\n" + ex.StackTrace;
+			}
 		}
 
-		[MonoTODO]
-		public System.String Source {  
-			get { 
-				if(SourceIsSet)
-					return pSource;
 
-				if(pException == null)
-					return "";
 
-				if(pException is Exception)
-					this.Source = pException.Source;
-				else
-					this.Source = "";
-
-				return pSource;
-			} 
-			set { 
-				pSource = value;
-				SourceIsSet = true;
-			} 
+		//[MonoTODO]
+		public System.Exception GetException () 
+		{
+			  return pException;
+		}
+		//[MonoTODO]
+		public void Clear () {
+			pHelpContext=0;
+			pLastDllError=0;
+			pNumber=0;
+			pErl=0;
+			pSource="";
+			pHelpFile="";
+			pDescription="";
+			pException= null;
 		}
 
-
+			
+    public void CaptureException(Exception ex)
+    {
+	SetException(ex);
 	}
-}
 
+
+    public void CaptureException(Exception ex, int lErl)
+    {
+        SetException(ex);
+        pErl = lErl;
+    }
+
+
+
+		//[MonoTODO]
+		public void Raise (System.Int32 Number, [System.Runtime.InteropServices.Optional] [System.ComponentModel.DefaultValue(null)] System.Object Source, [System.Runtime.InteropServices.Optional] [System.ComponentModel.DefaultValue(null)] System.Object Description, [System.Runtime.InteropServices.Optional] [System.ComponentModel.DefaultValue(null)] System.Object HelpFile, [System.Runtime.InteropServices.Optional] [System.ComponentModel.DefaultValue(null)] System.Object HelpContext) 
+		{ 
+			throw new NotImplementedException (); 
+		}
+		// Events
+	};
+}
Index: mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/Information.cs
===================================================================
RCS file: /mono/mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/Information.cs,v
retrieving revision 1.9
diff -u -r1.9 Information.cs
--- mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/Information.cs	11 Jun 2004 05:05:17 -0000	1.9
+++ mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/Information.cs	11 Jun 2004 15:21:52 -0000
@@ -218,8 +218,8 @@
 			{
 				throw new ArgumentException("Not array arrived to UBound method of Information class");
 			}
-
-			if(Rank < 1 || Rank > Array.Rank)
+			//Checking if Rank is between the limits, that goes from 0 to Array.Rank - 1, because an array starts at 0 and finishes at the number of elements minus one.
+			if(Rank < 0 || Rank > Array.Rank - 1)
 				throw new RankException(Utils.GetResourceString("Argument_InvalidRank1", "Rank"));
 
 			return Array.GetUpperBound(Rank);
@@ -247,15 +247,17 @@
 			return Array.GetLowerBound(Rank);
 		}
 
+		[MonoTODO]
 		public static Microsoft.VisualBasic.ErrObject Err() 
 		{ 
-			return ProjectData.Err;
+			throw new NotImplementedException();
 		}
 
+		[MonoTODO]
 		[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)] 
 		public static System.Int32 Erl () 
 		{ 
-			return ProjectData.Err.Erl;
+			throw new NotImplementedException(); 
 		}
 
 		public static System.String TypeName (System.Object VarName) 
@@ -312,7 +314,7 @@
 					name = "String";
 					break;
 				default :
-					name = type.Name;
+					name = type.get_Name();
 					break;
 				}
 				
Index: mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/Microsoft.VisualBasic.CompilerServices/ObjectType.cs
===================================================================
RCS file: /mono/mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/Microsoft.VisualBasic.CompilerServices/ObjectType.cs,v
retrieving revision 1.6
diff -u -r1.6 ObjectType.cs
--- mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/Microsoft.VisualBasic.CompilerServices/ObjectType.cs	26 Apr 2004 07:00:37 -0000	1.6
+++ mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/Microsoft.VisualBasic.CompilerServices/ObjectType.cs	11 Jun 2004 15:21:53 -0000
@@ -693,7 +693,7 @@
 			Type type1 = obj1.GetType();
 			Type type2 = obj2.GetType();
 			TypeCode typeCode = GetWidestType(obj1, obj2, false);
-        
+
 			if (obj1 == null && obj2 == null)
 				return (int)0;
 			else if (typeCode == TypeCode.Boolean) {
@@ -1739,6 +1739,7 @@
 		private static int getObjTstBoolean(object o1,object o2,TypeCode tc1,TypeCode tc2) {
 			IConvertible iconv1 = (IConvertible)o1;
 			IConvertible iconv2 = (IConvertible)o2;
+                        
 			bool b1 = iconv1.ToBoolean(null);
 			bool b2 = iconv2.ToBoolean(null);
 			if (b1 == b2)
@@ -1771,13 +1772,14 @@
 		private static int getObjTstDateTime(object o1,object o2,TypeCode tc1,TypeCode tc2) {
 			DateTime var1 = convertObjectToDateTime(o1,tc1);
 			DateTime var2 = convertObjectToDateTime(o2,tc2);
-			long time1 = Convert.ToInt32(var1);//Java code var1.getCalendar().getTime().getTime();
+/*			long time1 = Convert.ToInt32(var1);//Java code var1.getCalendar().getTime().getTime();
 			long time2 = Convert.ToInt32(var2);//Java code var2.getCalendar().getTime().getTime();
 			if (time1 < time2)
 				return -1;
 			if (time1 > time2)
 				return 1;
-			return 0;
+			return 0;*/
+                        return DateTime.Compare(var1, var2);
 		}
 
 		private static int getObjTstDecimal(object o1,object o2,TypeCode tc1,TypeCode tc2) {
Index: mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/Microsoft.VisualBasic.CompilerServices/ProjectData.cs
===================================================================
RCS file: /mono/mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/Microsoft.VisualBasic.CompilerServices/ProjectData.cs,v
retrieving revision 1.4
diff -u -r1.4 ProjectData.cs
--- mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/Microsoft.VisualBasic.CompilerServices/ProjectData.cs	10 Jun 2004 14:12:46 -0000	1.4
+++ mcs/class/Microsoft.VisualBasic/Microsoft.VisualBasic/Microsoft.VisualBasic.CompilerServices/ProjectData.cs	11 Jun 2004 15:21:53 -0000
@@ -16,55 +16,77 @@
 
 namespace Microsoft.VisualBasic.CompilerServices
 {
-
+	/// <summary>
+	/// FIXME: Summary description for ProjectData.
+	/// </summary>
+	
 	[MonoTODO]
 	[EditorBrowsable(EditorBrowsableState.Never)]
 	[StructLayout(LayoutKind.Auto)] 
-	public class ProjectData {
-
-		internal static int erl;
-		internal static Microsoft.VisualBasic.ErrObject pErr = new ErrObject();
+	public class ProjectData{
 
 		internal static System.Exception projectError;
-
-
-		public static void ClearProjectError ()
-		{
-			pErr.Clear();
-		}
+		internal static int erl;
+		internal static Microsoft.VisualBasic.ErrObject pErr;
 
 		internal static Microsoft.VisualBasic.ErrObject Err 
 		{
-			get {
+			get
+			{
+				if (pErr==null)
+					pErr=new ErrObject();
+
 				return pErr;
 			}
+			set
+			{
+				pErr = value;
+			}
 		}
 
-		public static Exception CreateProjectError(int hr)
-		{
-			pErr.Clear();
-			return pErr.CreateException(hr, VBUtils.GetResourceString(pErr.MapErrorNumber(hr)));
+		/// <summary>
+		/// FIXME: Summary description for ClearProjectError
+		/// </summary>
+		public static void ClearProjectError()
+		{
+			projectError = null;
+			erl = 0;
 		}
 
-		public static void SetProjectError(Exception ex)
+		/// <summary>
+		/// FIXME: Summary description for SetProjectError
+		/// </summary>
+		/// <param name="ex">FIXME: Required. Summary description for ex</param>
+		[MonoTODO]
+		public static void SetProjectError(System.Exception ex)
 		{
-			pErr.CaptureException(ex);
+			SetProjectError(ex, 0);
 		}
 
-		public static void SetProjectError(Exception ex, int lErl)
-		{
-			pErr.CaptureException(ex, lErl);
-		}
- 
+		/// <summary>
+		/// FIXME: Summary description for SetProjectError
+		/// </summary>
+		/// <param name="ex">FIXME: Required. Summary description for ex</param>
+		/// <param name="lErl">FIXME: Required. Summary description for lErl</param>
+//		[MonoTODO]
+		public static void SetProjectError(System.Exception ex, int lErl)
+		{
+			projectError = ex;
+			erl = lErl;
+	//this is the call to an internal procedure
+		//	Err.SetException (ex);
+	// I changed this call by other public and the number is ffff by defect
 
+                      Err.CaptureException(ex);
+		}
 		
 		/*
-		[MonoTODO]
+		[MonoTODO]*/
 		public static void EndApp()
 		{
-			//FIXME
+        		Environment.Exit(0);
 		}
-		*/
+		
 
 		/*
 		[MonoTODO]