Index: Mono.WebServer.FastCgi/Logger.cs
===================================================================
--- Mono.WebServer.FastCgi/Logger.cs	(revision 146568)
+++ Mono.WebServer.FastCgi/Logger.cs	(working copy)
@@ -310,8 +310,12 @@
 				if (logger.writer == null)
 					return;
 				
-				logger.writer.Flush ();
-				logger.writer.Close ();
+				try {
+					logger.writer.Flush ();
+					logger.writer.Close ();
+				} catch (System.ObjectDisposedException) {
+					// Already done
+				}
 				logger.writer = null;
 			}
 		}
Index: Mono.WebServer.FastCgi/Server.cs
===================================================================
--- Mono.WebServer.FastCgi/Server.cs	(revision 146568)
+++ Mono.WebServer.FastCgi/Server.cs	(working copy)
@@ -608,21 +608,48 @@
 			}
 			
 			try {
-				Socket accepted = listen_socket.EndAccept (ares);
-				connection = new Connection (accepted, this);
-				connections.Add (connection);
-			} catch (System.Net.Sockets.SocketException e) {
+				try {
+					Socket accepted = listen_socket.EndAccept (ares);
+					connection = new Connection (accepted, this);
+					connections.Add (connection);
+				} catch (System.Net.Sockets.SocketException e) {
+					Logger.Write (LogLevel.Error,
+						Strings.Server_AcceptFailed, e.Message);
+					if (e.ErrorCode == 10022)
+						Stop ();
+				} catch (System.ObjectDisposedException) {
+					Logger.Write (LogLevel.Debug, Strings.Server_ConnectionClosed);
+					return; // Already done (e.g., shutdown)
+				}
+			
+				if (CanAccept)
+					BeginAccept ();
+			} catch (System.Exception e) {
 				Logger.Write (LogLevel.Error,
 					Strings.Server_AcceptFailed, e.Message);
-				if (e.ErrorCode == 10022)
-					Stop ();
 			}
 			
-			if (CanAccept)
-				BeginAccept ();
-			
-			if (connection != null)
+			if (connection == null)
+				return;
+			try {
 				connection.Run ();
+			} catch (System.Exception e) {
+				Logger.Write (LogLevel.Error,
+					Strings.Server_ConnectionFailed, e.Message);
+				try {
+					// Upon catastrophic failure, forcefully stop 
+					// all remaining connection activity, since no 
+					// specific error-handling kicked in to rescue 
+					// the connection or its requests and the 
+					// connection's main loop has now terminated.
+					// This prevents abandoned FastCGI connections 
+					// from staying open indefinitely.
+					EndConnection(connection);
+					Logger.Write (LogLevel.Debug, Strings.Server_ConnectionClosed);
+				} catch {
+					// Ignore at this point -- too bad
+				}
+			}
 		}
 		
 		/// <summary>
Index: Mono.WebServer.FastCgi/Strings.cs
===================================================================
--- Mono.WebServer.FastCgi/Strings.cs	(revision 146568)
+++ Mono.WebServer.FastCgi/Strings.cs	(working copy)
@@ -7,6 +7,8 @@
 		public static string Server_ValueUnknown = "Unknown value, {0}, requested by client.";
 		public static string Server_Accepting = "Accepting an incoming connection.";
 		public static string Server_AcceptFailed = "Failed to accept connection. Reason: {0}";
+		public static string Server_ConnectionFailed = "Failed to process connection. Reason: {0}";
+		public static string Server_ConnectionClosed = "The FastCGI connection has been closed.";
 		public static string Server_ResponderDoesNotImplement = "Responder must implement the FastCgi.IResponder interface.";
 		public static string Server_ResponderLacksProperConstructor = "Responder must contain public constructor {0}(ResponderRequest)";
 		public static string Server_ResponderNotSupported = "Responder role is not supported.";
