Index: System.Xml.Serialization/ChangeLog
===================================================================
RCS file: /cvs/public/mcs/class/System.XML/System.Xml.Serialization/ChangeLog,v
retrieving revision 1.145
diff -u -r1.145 ChangeLog
--- System.Xml.Serialization/ChangeLog	2 Jun 2004 18:16:39 -0000	1.145
+++ System.Xml.Serialization/ChangeLog	3 Jun 2004 16:16:09 -0000
@@ -1,3 +1,10 @@
+2004-06-03  Gert Driesen <drieseng@users.sourceforge.net>
+
+	* XmlSerializationReader.cs: added missing protected members
+	to fix API compatibility with MS.NET
+	* XmlSerializationWriter.cs: added missing protected members
+	to fix API compatibility with MS.NET
+
 2004-06-02  Lluis Sanchez Gual <lluis@ximian.com>
 
 	* XmlSerializationReader.cs: Support schamea instance namespaces other than
Index: System.Xml.Serialization/XmlSerializationReader.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.XML/System.Xml.Serialization/XmlSerializationReader.cs,v
retrieving revision 1.31
diff -u -r1.31 XmlSerializationReader.cs
--- System.Xml.Serialization/XmlSerializationReader.cs	2 Jun 2004 18:16:39 -0000	1.31
+++ System.Xml.Serialization/XmlSerializationReader.cs	3 Jun 2004 16:16:11 -0000
@@ -105,6 +105,19 @@
 			get { return reader; }
 		}
 
+		[MonoTODO]
+		protected bool IsReturnValue
+		{
+			get {
+				throw new NotImplementedException ();
+			}
+			set {
+				throw new NotImplementedException ();
+			}
+
+		}
+
+
 		#region Methods
 
 		protected void AddFixup (CollectionFixup fixup)
@@ -174,6 +187,25 @@
 			default:
 				return "(unknown)";
 			}
+		}
+
+		protected Exception CreateCtorHasSecurityException (string typeName)
+		{
+			string message = string.Format ("The type '{0}' cannot"
+				+ " be serialized because its parameterless"
+				+ " constructor is decorated with declarative"
+				+ " security permission attributes."
+				+ " Consider using imperative asserts or demands"
+				+ " in the constructor.", typeName);
+			return new InvalidOperationException (message);
+		}
+
+		protected Exception CreateInaccessibleConstructorException (string typeName)
+		{
+			string message = string.Format ("{0} cannot be serialized"
+				+ " because it does not have a default public"
+				+ " constructor.", typeName);
+			return new InvalidOperationException (message);
 		}
 
 		protected Exception CreateAbstractTypeException (string name, string ns)
Index: System.Xml.Serialization/XmlSerializationWriter.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.XML/System.Xml.Serialization/XmlSerializationWriter.cs,v
retrieving revision 1.36
diff -u -r1.36 XmlSerializationWriter.cs
--- System.Xml.Serialization/XmlSerializationWriter.cs	13 May 2004 15:09:35 -0000	1.36
+++ System.Xml.Serialization/XmlSerializationWriter.cs	3 Jun 2004 16:16:12 -0000
@@ -85,6 +85,23 @@
 			callbacks.Add (type, info);
 		}
 
+		protected Exception CreateChoiceIdentifierValueException (string value, string identifier, string name, string ns)
+		{
+			string message = string.Format ("Value '{0}' of the choice"
+				+ " identifier '{1}' does not match element '{2}'"
+				+ " from namespace '{3}'.", value, identifier,
+				name, ns);
+			return new InvalidOperationException (message);
+		}
+
+		protected Exception CreateInvalidChoiceIdentifierValueException (string type, string identifier)
+		{
+			string message = string.Format ("Invalid or missing choice"
+				+ " identifier '{0}' of type '{1}'.", identifier,
+				type);
+			return new InvalidOperationException (message);
+		}
+
 		protected Exception CreateMismatchChoiceException (string value, string elementName, string enumValue)
 		{
 			string message = String.Format ("Value of {0} mismatches the type of {1}, you need to set it to {2}.", elementName, value, enumValue);
