Index: ChangeLog
===================================================================
RCS file: /cvs/public/mcs/class/System.DirectoryServices/System.DirectoryServices/ChangeLog,v
retrieving revision 1.5
diff -u -r1.5 ChangeLog
--- ChangeLog	16 May 2004 16:30:38 -0000	1.5
+++ ChangeLog	3 Jun 2004 15:08:43 -0000
@@ -1,4 +1,18 @@
-2004-05-16  Gert Driesen (drieseng@users.sourceforge.net)
+2004-06-03  Gert Driesen <drieseng@users.sourceforge.net>
+
+	* DirectoryEntries.cs: flagged field private to fix public API
+	* DirectoryEntry.cs: added protected override for Dispose, marked
+	properties TODO
+	* DirectoryServicesPermissionEntryCollection.cs: added stubs for
+	missing protected methods
+	* PropertyCollection.cs: flagged field private to fix public API
+	* PropertyValueCollection.cs: removed empty extra methods, added
+	stub for missing methods to fix public API
+	* SearchResult.cs: removed unused local variable
+	* SearchResultCollection.cs: flagged field private to fix public
+	API, added missing property Dispose method and finalizer
+
+2004-05-16  Gert Driesen <drieseng@users.sourceforge.net>
 
 	* DirectoryServicesPermission.cs: marked sealed, added
 	Serializable attribute
Index: DirectoryEntries.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.DirectoryServices/System.DirectoryServices/DirectoryEntries.cs,v
retrieving revision 1.4
diff -u -r1.4 DirectoryEntries.cs
--- DirectoryEntries.cs	14 May 2004 10:03:13 -0000	1.4
+++ DirectoryEntries.cs	3 Jun 2004 15:08:43 -0000
@@ -42,13 +42,12 @@
 	/// </summary>
 	public class DirectoryEntries : IEnumerable
 	{
-		private ArrayList cList;
 		private LdapConnection _Conn=null;
 		private string _Bpath=null;
 		private string _Buser=null;
 		private string _Bpass=null;
 		private string _Basedn=null;
-		protected ArrayList m_oValues=null;
+		private ArrayList m_oValues=null;
 
 
 		/// <summary> Initializes the Connection and other properties.
Index: DirectoryEntry.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.DirectoryServices/System.DirectoryServices/DirectoryEntry.cs,v
retrieving revision 1.5
diff -u -r1.5 DirectoryEntry.cs
--- DirectoryEntry.cs	14 May 2004 10:03:13 -0000	1.5
+++ DirectoryEntry.cs	3 Jun 2004 15:08:45 -0000
@@ -60,6 +60,7 @@
 		private PropertyCollection _Properties = null;
 		private string _SchemaClassName=null;
 		private bool _Nflag = false;
+		private bool _disposed;
 
 		/// <summary>
 		/// Returns entry's Fully distinguished name.
@@ -288,6 +289,7 @@
 		[DSDescription ("A globally unique identifier for this DirectoryEntry")]
 		[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]
 		[Browsable (false)]
+		[MonoTODO]
 		public Guid Guid 
 		{
 			get 
@@ -356,6 +358,7 @@
 		[DSDescription ("The globally unique identifier of the DirectoryEntry, as returned from the provider")]
 		[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]
 		[Browsable (false)]
+		[MonoTODO]
 		public string NativeGuid 
 		{
 			get			{
@@ -416,7 +419,7 @@
 		[Browsable (false)]
 		public string Password 
 		{
-			get			{
+			get		{
 				return _Password;
 			}
 			set			{
@@ -917,6 +920,14 @@
 		{
 			throw new NotImplementedException ("System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])");
 		}
+
+		protected override void Dispose (bool disposing)
+		{
+			if (!_disposed && disposing) {
+				Close ();
+				_disposed = true;
+			}
+			base.Dispose (disposing);
+		}
 	}
 }
-
Index: DirectoryServicesPermissionEntryCollection.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.DirectoryServices/System.DirectoryServices/DirectoryServicesPermissionEntryCollection.cs,v
retrieving revision 1.1
diff -u -r1.1 DirectoryServicesPermissionEntryCollection.cs
--- DirectoryServicesPermissionEntryCollection.cs	14 May 2004 10:03:13 -0000	1.1
+++ DirectoryServicesPermissionEntryCollection.cs	3 Jun 2004 15:08:45 -0000
@@ -87,6 +87,26 @@
 		{
 			List.Remove (entry);
 		}
+
+		[MonoTODO]
+		protected override void OnClear ()
+		{
+		}
+
+		[MonoTODO]
+		protected override void OnInsert (int index, object value)
+		{
+		}
+
+		[MonoTODO]
+		protected override void OnRemove (int index, object value)
+		{
+		}
+
+		[MonoTODO]
+		protected override void OnSet (int index, object oldValue, object newValue)
+		{
+		}
 	}
 }
 
Index: PropertyCollection.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.DirectoryServices/System.DirectoryServices/PropertyCollection.cs,v
retrieving revision 1.3
diff -u -r1.3 PropertyCollection.cs
--- PropertyCollection.cs	4 Dec 2003 11:49:17 -0000	1.3
+++ PropertyCollection.cs	3 Jun 2004 15:08:45 -0000
@@ -38,8 +38,8 @@
 {
 	public class PropertyCollection : IDictionary, ICollection,IEnumerable
 	{
-		protected ArrayList m_oKeys = new ArrayList();
-		protected Hashtable m_oValues = new Hashtable();
+		private ArrayList m_oKeys = new ArrayList();
+		private Hashtable m_oValues = new Hashtable();
 
 		internal PropertyCollection()
 		{
Index: PropertyValueCollection.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.DirectoryServices/System.DirectoryServices/PropertyValueCollection.cs,v
retrieving revision 1.2
diff -u -r1.2 PropertyValueCollection.cs
--- PropertyValueCollection.cs	14 May 2004 10:03:13 -0000	1.2
+++ PropertyValueCollection.cs	3 Jun 2004 15:08:45 -0000
@@ -133,25 +133,24 @@
 				copy_to[index++] = o;
 		}
 
-		protected override void OnInsert( int index, Object value )  
+		[MonoTODO]
+		protected override void OnClearComplete ()
 		{
-			// Insert additional code to be run only when inserting values.
 		}
 
-		protected override void OnRemove( int index, Object value )  
+		[MonoTODO]
+		protected override void OnInsertComplete (int index, object value)
 		{
-			// Insert additional code to be run only when removing values.
 		}
 
-		protected override void OnSet( int index, Object oldValue, Object newValue )  
+		[MonoTODO]
+		protected override void OnRemoveComplete (int index, object value)
 		{
-			// Insert additional code to be run only when setting values.
 		}
 
-		protected override void OnValidate( Object value )  
+		[MonoTODO]
+		protected override void OnSetComplete (int index, object oldValue, object newValue)
 		{
-//			if ( value.GetType() != Type.GetType("System.Object") )
-//				throw new ArgumentException( "value must be of type Object.", "value" );
 		}
 
 		public object Value 
Index: SearchResult.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.DirectoryServices/System.DirectoryServices/SearchResult.cs,v
retrieving revision 1.2
diff -u -r1.2 SearchResult.cs
--- SearchResult.cs	4 Dec 2003 11:46:10 -0000	1.2
+++ SearchResult.cs	3 Jun 2004 15:08:45 -0000
@@ -102,7 +102,6 @@
 					while(id.MoveNext())
 					{
 						string attribute=(string)id.Key;
-						LdapAttribute attr=null;
 							ResultPropertyValueCollection rpVal=
 								new ResultPropertyValueCollection();
 							if(Rproperties[attribute].Count==1)
Index: SearchResultCollection.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.DirectoryServices/System.DirectoryServices/SearchResultCollection.cs,v
retrieving revision 1.4
diff -u -r1.4 SearchResultCollection.cs
--- SearchResultCollection.cs	16 May 2004 16:30:38 -0000	1.4
+++ SearchResultCollection.cs	3 Jun 2004 15:08:45 -0000
@@ -47,8 +47,7 @@
 	/// </remarks>
 	public class SearchResultCollection : MarshalByRefObject, ICollection, IEnumerable, IDisposable
 	{
-		protected ArrayList sValues = new ArrayList();
-
+		private ArrayList sValues = new ArrayList();
 
 		internal SearchResultCollection()
 		{
@@ -164,6 +163,13 @@
 
 		public void Dispose ()
 		{
+			Dispose (true);
+			GC.SuppressFinalize (this);
+		}
+
+		[MonoTODO]
+		protected virtual void Dispose (bool disposing)
+		{
 		}
 
 		public string[] PropertiesLoaded
@@ -176,6 +182,11 @@
 		{
 			[MonoTODO]
 			get { throw new NotImplementedException (); }
+		}
+
+		~SearchResultCollection ()
+		{
+			Dispose (false);
 		}
 	}
 }
