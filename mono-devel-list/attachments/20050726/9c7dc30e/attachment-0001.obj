Index: Color.cs
===================================================================
--- Color.cs	(revision 46515)
+++ Color.cs	(working copy)
@@ -46,7 +46,9 @@
 {
 	[TypeConverter(typeof(ColorConverter))]
 	[ComVisible (true)]
+#if !TARGET_JVM
 	[Editor ("System.Drawing.Design.ColorEditor, " + Consts.AssemblySystem_Drawing_Design, typeof (System.Drawing.Design.UITypeEditor))]
+#endif
 	[Serializable]
 	public struct Color
 	{
@@ -64,9 +66,15 @@
 		// The specs also indicate that all three of these propities are true
 		// if created with FromKnownColor or FromNamedColor, false otherwise (FromARGB).
 		// Per Microsoft and ECMA specs these varibles are set by which constructor is used, not by their values.
-		private bool isknowncolor;
-		private bool isnamedcolor;
-		private bool issystemcolor;
+		[Flags]
+		enum ColorType {
+			Empty=0,
+			ARGB=1,
+			Known=2,
+			Named=4,
+			System=8
+		}
+		private ColorType colorType;
 		private KnownColor knownColor;
 
 		private string myname;
@@ -81,21 +89,19 @@
 
 		public bool IsKnownColor {
 			get{
-				return isknowncolor;
+				return (colorType & ColorType.Known) != 0;
 			}
 		}
 
 		public bool IsSystemColor {
 			get{
-				return issystemcolor;
+				return (colorType & ColorType.System) != 0;
 			}
 		}
 
 		public bool IsNamedColor {
 			get{
-				if (!isnamedcolor)
-					return IsKnownColor;
-				return isnamedcolor;
+				return (colorType & (ColorType.Known|ColorType.Named)) != 0;
 			}
 		}
 
@@ -109,6 +115,7 @@
 		{
 			CheckARGBValues (alpha, red, green, blue);
 			Color color = new Color ();
+			color.colorType = ColorType.ARGB;
 			color.a = (byte) alpha;
 			color.r = (byte) red;
 			color.g = (byte) green;
@@ -120,8 +127,7 @@
 		private static Color FromArgbNamed (int alpha, int red, int green, int blue, string name, KnownColor knownColor)
 		{
 			Color color = FromArgb (alpha, red, green, blue);
-			color.isknowncolor = true;
-			color.isnamedcolor = true;
+			color.colorType = ColorType.Known|ColorType.Named;
 			//color.issystemcolor = false; //???
 			color.myname = name;
 			// FIXME: here happens SEGFAULT.
@@ -133,7 +139,7 @@
 		internal static Color FromArgbSystem (int alpha, int red, int green, int blue, string name, KnownColor knownColor)
 		{
 			Color color = FromArgbNamed (alpha, red, green, blue, name, knownColor);
-			color.issystemcolor = true;
+			color.colorType |= ColorType.System;
 			return color;
 		}
 
@@ -161,7 +167,7 @@
 				// This is what it returns!
 				Color d = FromArgb (0, 0, 0, 0);
 				d.myname = c.ToString ();
-				d.isnamedcolor = true;
+				d.colorType |= ColorType.Named;
 				d.knownColor = c;
 				return d;
 			}
@@ -220,7 +226,7 @@
 					// This is what it returns!
 					Color d = FromArgb (0, 0, 0, 0);
 					d.myname = colorName;
-					d.isnamedcolor = true;
+					d.colorType |= ColorType.Named;
 					c = d;
 				}
 			}
@@ -270,9 +276,23 @@
 
 		public static bool operator == (Color colorA, Color colorB)
 		{
-			return ((colorA.a == colorB.a) && (colorA.r == colorB.r)
-			&& (colorA.g == colorB.g) && (colorA.b == colorB.b) &&
-			(colorA.myname == colorB.myname));
+			if (colorA.a != colorB.a)
+				return false;
+			if (colorA.r != colorB.r)
+				return false;
+            if (colorA.g != colorB.g)
+				return false;
+			if (colorA.b != colorB.b)
+				return false;
+			if (colorA.IsNamedColor != colorB.IsNamedColor)
+				return false;
+			if (colorA.IsSystemColor != colorB.IsSystemColor)
+				return false;
+			if (colorA.Name != colorB.Name)
+				return false;
+			if (colorA.IsEmpty != colorB.IsEmpty)
+				return false;
+			return true;
 		}
 		
 		/// <summary>
@@ -287,58 +307,56 @@
 
 		public static bool operator != (Color colorA, Color colorB)
 		{
-			return ((colorA.a != colorB.a) || (colorA.r != colorB.r)
-			|| (colorA.g != colorB.g) || (colorA.b != colorB.b) ||
-			(colorA.myname != colorB.myname));
+			return ! (colorA == colorB);
 		}
-
+		
 		public float GetBrightness ()
 		{
-			byte minval = Math.Min (r, Math.Min (g, b));
-			byte maxval = Math.Max (r, Math.Max (g, b));
-	
-			return (float)(maxval + minval) / 510;
+			byte minval = Math.Min (r, Math.Min (g, b));
+			byte maxval = Math.Max (r, Math.Max (g, b));
+	
+			return (float)(maxval + minval) / 510;
 		}
 
 		public float GetSaturation ()
 		{
-			byte minval = Math.Min (r, Math.Min (g, b));
+			byte minval = Math.Min (r, Math.Min (g, b));
 			byte maxval = Math.Max (r, Math.Max (g, b));
 			
-			if (maxval == minval)
-					return 0.0f;
+			if (maxval == minval)
+					return 0.0f;
 
 			int sum = maxval + minval;
 			if (sum > 255)
-				sum = 510 - sum;
+				sum = 510 - sum;
 
 			return (float)(maxval - minval) / sum;
 		}
 
 		public float GetHue ()
 		{
-			byte minval = Math.Min (r, Math.Min (g, b));
+			byte minval = Math.Min (r, Math.Min (g, b));
 			byte maxval = Math.Max (r, Math.Max (g, b));
 			
-			if (maxval == minval)
-					return 0.0f;
+			if (maxval == minval)
+					return 0.0f;
 			
 			float diff = (float)(maxval - minval);
-			float rnorm = (maxval - r) / diff;
-			float gnorm = (maxval - g) / diff;
-			float bnorm = (maxval - b) / diff;
+			float rnorm = (maxval - r) / diff;
+			float gnorm = (maxval - g) / diff;
+			float bnorm = (maxval - b) / diff;
 	
-			float hue = 0.0f;
-			if (r == maxval) 
-				hue = 60.0f * (6.0f + bnorm - gnorm);
-			if (g == maxval) 
-				hue = 60.0f * (2.0f + rnorm - bnorm);
-			if (b  == maxval) 
-				hue = 60.0f * (4.0f + gnorm - rnorm);
-			if (hue > 360.0f) 
+			float hue = 0.0f;
+			if (r == maxval) 
+				hue = 60.0f * (6.0f + bnorm - gnorm);
+			if (g == maxval) 
+				hue = 60.0f * (2.0f + rnorm - bnorm);
+			if (b  == maxval) 
+				hue = 60.0f * (4.0f + gnorm - rnorm);
+			if (hue > 360.0f) 
 				hue = hue - 360.0f;
 
-			return hue;
+			return hue;
 		}
 		
 		// -----------------------
@@ -368,7 +386,7 @@
 		public bool IsEmpty 
 		{
 			get {
-				return (a + r + g + b) == 0;
+				return colorType == ColorType.Empty;
 			}
 		}
 
@@ -442,16 +460,10 @@
 		
 		public override bool Equals (object o)
 		{
-			if (!(o is Color))
+			if (! (o is Color))
 				return false;
-
 			Color c = (Color) o;
-			if (c.r == r && c.g == g && c.b == b) {
-				if (myname != null || c.myname != null)
-					return (myname == c.myname);
-				return true;
-			}
-			return false;
+			return this == c;
 		}
 
 		/// <summary>
