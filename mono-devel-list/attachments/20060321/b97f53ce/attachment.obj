Index: SmtpClient.cs
===================================================================
--- SmtpClient.cs	(revision 58214)
+++ SmtpClient.cs	(working copy)
@@ -34,6 +34,7 @@
 using System.Collections;
 using System.Net.Sockets;
 using System.Security.Permissions;
+using System.Reflection;
 
 namespace System.Web.Mail {
 
@@ -43,8 +44,13 @@
 	private string server;
 	private TcpClient tcpConnection;
 	private SmtpStream smtp;
-	
-	//Initialise the variables and connect
+ 	private string username;
+ 	private string password;
+ 	private int port = 25;
+ 	private bool usessl = false;
+ 	private short authenticate = 1;  	
+        
+    //Initialise the variables and connect
 	public SmtpClient( string server ) {
 	    
 	    this.server = server;
@@ -54,19 +60,100 @@
 	// make the actual connection
 	// and HELO handshaking
 	private void Connect() {
-	    tcpConnection = new TcpClient( server , 25 );
+	    tcpConnection = new TcpClient( server , port );
 	    
-	    Stream stream = tcpConnection.GetStream();
+	    NetworkStream stream = tcpConnection.GetStream();
 	    smtp = new SmtpStream( stream );
-	    
-	    // read the server greeting
-	    smtp.ReadResponse();
-	    smtp.CheckForStatusCode( 220 );
-	   
-	    // write the HELO command to the server
-	    smtp.WriteHelo( Dns.GetHostName() );
+	}
 	    	    
+	private void ChangeToSSLSocket( ) {
+#if TARGET_JVM
+		java.lang.Class c = vmw.common.TypeUtils.ToClass( smtp.Stream );
+		java.lang.reflect.Method m = c.getMethod("ChangeToSSLSocket", null);
+		m.invoke(smtp.Stream, new object[]{});
+#else
+		// Load Mono.Security.dll
+		Assembly a;
+		try {
+			a = Assembly.LoadWithPartialName("Mono.Security");
+		}
+		catch(System.IO.FileNotFoundException) {
+			throw new SmtpException( "Cannot load Mono.Security.dll" );
+		}
+		Type tSslClientStream = a.GetType("Mono.Security.Protocol.Tls.SslClientStream");
+		BindingFlags flags = (BindingFlags.NonPublic  | BindingFlags.Public |
+			BindingFlags.Static | BindingFlags.Instance | BindingFlags.DeclaredOnly);
+
+		object[] consArgs = new object[4];
+		consArgs[0] = smtp.Stream;
+		consArgs[1] = server;
+		consArgs[2] = true;
+		Type tSecurityProtocolType = a.GetType("Mono.Security.Protocol.Tls.SecurityProtocolType");
+		Enum objSPType = (Enum)(Activator.CreateInstance(tSecurityProtocolType));
+		int nSsl3Val = (int) Enum.Parse(tSecurityProtocolType, "Ssl3");
+		int nTlsVal = (int) Enum.Parse(tSecurityProtocolType, "Tls");
+		consArgs[3] = Enum.ToObject(tSecurityProtocolType, nSsl3Val | nTlsVal);
+
+		object objSslClientStream = 
+			Activator.CreateInstance(tSslClientStream, consArgs); 
+
+		if (objSslClientStream != null)
+			smtp = new SmtpStream( (Stream)objSslClientStream );
+#endif
 	}
+		
+	private void ReadFields(MailMessageWrapper msg)
+	{
+		string tmp;
+		username = msg.Fields.Data["http://schemas.microsoft.com/cdo/configuration/sendusername"];
+		password = msg.Fields.Data["http://schemas.microsoft.com/cdo/configuration/sendpassword"]; 
+		tmp = msg.Fields.Data["http://schemas.microsoft.com/cdo/configuration/smtpauthenticate"]; 
+		if (tmp != null)
+			authenticate = short.Parse(tmp);
+		tmp = msg.Fields.Data["http://schemas.microsoft.com/cdo/configuration/smtpusessl"]; 	
+		if (tmp != null)
+			usessl = bool.Parse(tmp);
+		tmp = msg.Fields.Data["http://schemas.microsoft.com/cdo/configuration/smtpserverport"]; 
+		if (tmp != null)
+			port = int.Parse(tmp);
+	}
+
+	private void StartSend(MailMessageWrapper msg)
+	{
+		ReadFields(msg);
+		if (usessl || (username != null && password != null && authenticate != 1)) 
+		{
+			smtp.WriteEhlo( Dns.GetHostName() );
+
+			if (usessl) {
+				bool isSSL = smtp.WriteStartTLS();
+				if (isSSL)
+					ChangeToSSLSocket();
+			}
+
+			if (username != null && password != null && authenticate != 1) 
+			{
+				smtp.WriteAuthLogin();
+				if (smtp.LastResponse.StatusCode == 334) 
+				{
+					smtp.WriteLine(Convert.ToBase64String(Encoding.ASCII.GetBytes(username)));
+					smtp.ReadResponse();
+					smtp.CheckForStatusCode(334);
+					smtp.WriteLine(Convert.ToBase64String(Encoding.ASCII.GetBytes(password)));
+					smtp.ReadResponse();
+					smtp.CheckForStatusCode(235);
+				}
+			}
+		}
+		else 
+		{
+			// read the server greeting
+			smtp.ReadResponse();
+			smtp.CheckForStatusCode( 220 );
+
+			smtp.WriteHelo( Dns.GetHostName() );
+		}
+	}
 	
 	public void Send( MailMessageWrapper msg ) {
 	    
@@ -78,10 +165,10 @@
 		if( msg.To.Count < 1 ) throw new SmtpException( "Atleast one recipient must be set." );
 	    }
 	    
-	    	    
+	    StartSend (msg);
 	    // start with a reset incase old data
 	    // is present at the server in this session
-	    smtp.WriteRset();
+	    // smtp.WriteRset();
 	    
 	    // write the mail from command
 	    smtp.WriteMailFrom( msg.From.Address );
@@ -166,8 +253,8 @@
         if (msg.Fields.Data ["http://schemas.microsoft.com/cdo/configuration/smtpauthenticate"] != null)
             msg.Fields.Data.Remove ("http://schemas.microsoft.com/cdo/configuration/smtpauthenticate");
         if (msg.Fields.Data ["http://schemas.microsoft.com/cdo/configuration/sendusername"] != null)
-            msg.Fields.Data.Remove ("http://schemas.microsoft.com/cdo/configuration/sendusername");
-        if (msg.Fields.Data ["http://schemas.microsoft.com/cdo/configuration/sendpassword"] != null)
+            msg.Fields.Data.Remove ("http://schemas.microsoft.com/cdo/configuration/sendusername");
+        if (msg.Fields.Data ["http://schemas.microsoft.com/cdo/configuration/sendpassword"] != null)
             msg.Fields.Data.Remove ("http://schemas.microsoft.com/cdo/configuration/sendpassword");
 		partHeader.Data.Add (msg.Fields.Data);
 #endif
@@ -201,7 +288,7 @@
 		   
 		// perform the actual writing of the file.
 		// read from the file stream and write to the tcp stream
-		FileStream ins = fileInfo.OpenRead ();
+		FileStream ins = new FileStream( fileInfo.FullName  , FileMode.Open );
 		
 		// create an apropriate encoder
 		IAttachmentEncoder encoder;
