Index: Char.cs
===================================================================
--- Char.cs	(revision 104771)
+++ Char.cs	(working copy)
@@ -143,10 +143,8 @@
 
 		public static int ConvertToUtf32 (string s, int index)
 		{
-			if (s == null)
-				throw new ArgumentNullException ("s");
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException ("index");
+			CheckParameter (s, index);
+
 			if (!Char.IsSurrogate (s [index]))
 				return s [index];
 			if (!Char.IsHighSurrogate (s [index])
@@ -169,10 +167,7 @@
 
 		public static bool IsSurrogatePair (string s, int index)
 		{
-			if (s == null)
-				throw new ArgumentNullException ("s");
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException ("index");
+			CheckParameter (s, index);
 			return index + 1 < s.Length && IsSurrogatePair (s [index], s [index + 1]);
 		}
 #endif
@@ -201,13 +196,7 @@
 
 		public static double GetNumericValue (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException (Locale.GetText (
-					"The value of index is less than zero, or greater than or equal to the length of s."));	
-			
+			CheckParameter (s, index);
 			return GetNumericValue (s[index]);
 		}
 
@@ -220,13 +209,7 @@
 
 		public static UnicodeCategory GetUnicodeCategory (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException (Locale.GetText (
-					"The value of index is less than zero, or greater than or equal to the length of s."));
-			
+			CheckParameter (s, index);
 			return GetUnicodeCategory (s[index]);
 		}
 
@@ -239,13 +222,7 @@
 
 		public static bool IsControl (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException (Locale.GetText (
-					"The value of index is less than zero, or greater than or equal to the length of s."));
-			
+			CheckParameter (s, index);
 			return IsControl (s[index]);
 		}	
 
@@ -258,13 +235,7 @@
 
 		public static bool IsDigit (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException (Locale.GetText (
-					"The value of index is less than zero, or greater than or equal to the length of s."));
-			
+			CheckParameter (s, index);
 			return IsDigit (s[index]);
 		}
 
@@ -276,12 +247,7 @@
 
 		public static bool IsHighSurrogate (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException ("index");
-			
+			CheckParameter (s, index);
 			return IsHighSurrogate (s [index]);
 		}
 #endif
@@ -295,43 +261,22 @@
 
 		public static bool IsLetter (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException (Locale.GetText (
-					"The value of index is less than zero, or greater than or equal to the length of s."));
-			
+			CheckParameter (s, index);
 			return IsLetter (s[index]);
 		}
 
 		public static bool IsLetterOrDigit (char c)
 		{
 			unsafe {
-				UnicodeCategory Category = (UnicodeCategory)category_data [c];
-				switch (Category) {
-				case UnicodeCategory.DecimalDigitNumber:
-				case UnicodeCategory.UppercaseLetter:
-				case UnicodeCategory.LowercaseLetter:
-				case UnicodeCategory.TitlecaseLetter:
-				case UnicodeCategory.ModifierLetter:
-				case UnicodeCategory.OtherLetter:
-					return true;
-				default:
-					return false;
-				}
+				int category = category_data [c];
+				return (category <= ((int)UnicodeCategory.OtherLetter) ||
+				        category == ((int)UnicodeCategory.DecimalDigitNumber));
 			}
 		}
 
 		public static bool IsLetterOrDigit (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException (Locale.GetText (
-					"The value of index is less than zero, or greater than or equal to the length of s."));
-			
+			CheckParameter (s, index);
 			return IsLetterOrDigit (s[index]);
 		}
 
@@ -341,16 +286,10 @@
 				return (category_data [c] == (byte)UnicodeCategory.LowercaseLetter);
 			}
 		}
-		
+
 		public static bool IsLower (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException (Locale.GetText (
-					"The value of index is less than zero, or greater than or equal to the length of s."));
-			
+			CheckParameter (s, index);
 			return IsLower (s[index]);
 		}
 
@@ -362,12 +301,7 @@
 
 		public static bool IsLowSurrogate (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException ("index");
-			
+			CheckParameter (s, index);
 			return IsLowSurrogate (s [index]);
 		}
 #endif
@@ -375,85 +309,45 @@
 		public static bool IsNumber (char c)
 		{
 			unsafe {
-				UnicodeCategory Category = (UnicodeCategory)category_data [c];
-				switch (Category) {
-				case UnicodeCategory.DecimalDigitNumber:
-				case UnicodeCategory.LetterNumber:
-				case UnicodeCategory.OtherNumber:
-					return true;
-				default:
-					return false;
-				}
+				int category = category_data [c];
+				return (category >= ((int)UnicodeCategory.DecimalDigitNumber) &&
+				        category <= ((int)UnicodeCategory.OtherNumber));
 			}
 		}
-		
+
 		public static bool IsNumber (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException (Locale.GetText (
-					"The value of index is less than zero, or greater than or equal to the length of s."));
-			
+			CheckParameter (s, index);
 			return IsNumber (s[index]);
 		}
 
 		public static bool IsPunctuation (char c)
 		{
 			unsafe {
-				UnicodeCategory Category = (UnicodeCategory)category_data [c];
-				switch (Category) {
-				case UnicodeCategory.ConnectorPunctuation:
-				case UnicodeCategory.DashPunctuation:
-				case UnicodeCategory.OpenPunctuation:
-				case UnicodeCategory.ClosePunctuation:
-				case UnicodeCategory.InitialQuotePunctuation:
-				case UnicodeCategory.FinalQuotePunctuation:
-				case UnicodeCategory.OtherPunctuation:
-					return true;
-				default:
-					return false;
-				}
+				int category = category_data [c];
+				return (category >= ((int)UnicodeCategory.ConnectorPunctuation) &&
+				        category <= ((int)UnicodeCategory.OtherPunctuation));
 			}
 		}
-		
+
 		public static bool IsPunctuation (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException (Locale.GetText (
-					"The value of index is less than zero, or greater than or equal to the length of s."));
-			
+			CheckParameter (s, index);
 			return IsPunctuation (s[index]);
 		}
 
 		public static bool IsSeparator (char c)
 		{
 			unsafe {
-				UnicodeCategory Category = (UnicodeCategory)category_data [c];
-				switch (Category) {
-				case UnicodeCategory.SpaceSeparator:
-				case UnicodeCategory.LineSeparator:
-				case UnicodeCategory.ParagraphSeparator:
-					return true;
-				default:
-					return false;
-				}
+				int category = category_data [c];
+				return (category >= ((int)UnicodeCategory.SpaceSeparator) &&
+				        category <= ((int)UnicodeCategory.ParagraphSeparator));
 			}
 		}
-		
+
 		public static bool IsSeparator (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException (Locale.GetText (
-					"The value of index is less than zero, or greater than or equal to the length of s."));
-			
+			CheckParameter (s, index);
 			return IsSeparator (s[index]);
 		}
 
@@ -463,44 +357,25 @@
 				return (category_data [c] == (byte)UnicodeCategory.Surrogate);
 			}
 		}
-		
+
 		public static bool IsSurrogate (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException (Locale.GetText (
-					"The value of index is less than zero, or greater than or equal to the length of s."));
-			
+			CheckParameter (s, index);
 			return IsSurrogate (s[index]);
 		}
 
 		public static bool IsSymbol (char c)
 		{
 			unsafe {
-				UnicodeCategory Category = (UnicodeCategory)category_data [c];
-				switch (Category) {
-				case UnicodeCategory.MathSymbol:
-				case UnicodeCategory.CurrencySymbol:
-				case UnicodeCategory.ModifierSymbol:
-				case UnicodeCategory.OtherSymbol:
-					return true;
-				default:
-					return false;
-				}
+				int category = category_data [c];
+				return (category >= ((int)UnicodeCategory.MathSymbol) &&
+				        category <= ((int)UnicodeCategory.OtherSymbol));
 			}
 		}
-		
+
 		public static bool IsSymbol (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException (Locale.GetText (
-					"The value of index is less than zero, or greater than or equal to the length of s."));
-			
+			CheckParameter (s, index);
 			return IsSymbol (s[index]);
 		}
 
@@ -510,54 +385,45 @@
 				return (category_data [c] == (byte)UnicodeCategory.UppercaseLetter);
 			}
 		}
-		
+
 		public static bool IsUpper (string s, int index)
 		{
-			if (s == null) 
-				throw new ArgumentNullException ("s");
-			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException (Locale.GetText (
-					"The value of index is less than zero, or greater than or equal to the length of s."));
-			
+			CheckParameter (s, index);
 			return IsUpper (s[index]);
 		}
 
 		public static bool IsWhiteSpace (char c)
 		{
 			unsafe {
-				if (category_data [c] == (byte)UnicodeCategory.SpaceSeparator)
+				int category = category_data [c];
+				if (category <= ((int)UnicodeCategory.OtherNumber))
+					return false;
+				if (category <= ((int)UnicodeCategory.ParagraphSeparator))
 					return true;
-				
-				switch (c) {
-				case (char)0x9:
-				case (char)0x0a:
-				case (char)0x0b:
-				case (char)0x0c:
-				case (char)0x0d:
-				case (char)0x85: // NEL 
-				case (char)0x2028: // Line Separator
-				case (char)0x2029: // Paragraph Separator
+				// FIXME: (char)0x205F Medium Mathematical Space has wrong category in 2.0 Profile
+				// Remove the if NET_2_0 case once the error is corrected
 #if NET_2_0
-				case (char)0x205F: // Medium Mathematical Space
+				return  c >= (char)0x09 && c <= (char)0x0d || c == (char)0x85 || c == (char)0x205F;
+#else
+				return  c >= (char)0x09 && c <= (char)0x0d || c == (char)0x85;
 #endif
-					return true;
-				default:
-					return false;
-				}
 			}
 		}
-		
+
 		public static bool IsWhiteSpace (string s, int index)
 		{
+			CheckParameter (s, index);
+			return IsWhiteSpace (s[index]);
+		}
+
+		private static void CheckParameter (string s, int index)
+		{
 			if (s == null) 
 				throw new ArgumentNullException ("s");
 			
-			if (index < 0 || index >= s.Length)
-				throw new ArgumentOutOfRangeException (Locale.GetText (
-					"The value of index is less than zero, or greater than or equal to the length of s."));
-			
-			return IsWhiteSpace (s[index]);
+			if (index < 0 || index >= s.Length) 
+				throw new ArgumentOutOfRangeException (
+					Locale.GetText ("The value of index is less than zero, or greater than or equal to the length of s."));
 		}
 
 #if NET_2_0
@@ -643,7 +509,7 @@
 
 			return culture.TextInfo.ToUpper (c);
 		}
-		
+
 		public override string ToString ()
 		{
 			// LAMESPEC: ECMA draft lists this as returning ToString (null), 
@@ -663,7 +529,7 @@
 		}
 
 		// =========== IConvertible Methods =========== //
-		
+
 		public TypeCode GetTypeCode ()
 		{
 			return TypeCode.Char;
@@ -673,76 +539,75 @@
 		{
 			return System.Convert.ToType(m_value, conversionType, provider);
 		}
-		
+
 		bool IConvertible.ToBoolean (IFormatProvider provider)
 		{
 			throw new InvalidCastException();
 		}
-		
+
 		byte IConvertible.ToByte (IFormatProvider provider)
 		{
 			return System.Convert.ToByte(m_value);
 		}
-		
+
 		char IConvertible.ToChar (IFormatProvider provider)
 		{
 			return m_value;
 		}
-		
+
 		DateTime IConvertible.ToDateTime (IFormatProvider provider)
 		{
 			throw new InvalidCastException();
 		}
-		
+
 		decimal IConvertible.ToDecimal (IFormatProvider provider)
 		{
 			throw new InvalidCastException();
 		}
-		
+
 		double IConvertible.ToDouble (IFormatProvider provider)
 		{
 			throw new InvalidCastException();
 		}
-		
+
 		short IConvertible.ToInt16 (IFormatProvider provider)
 		{
 			return System.Convert.ToInt16(m_value);
 		}
-		
+
 		int IConvertible.ToInt32 (IFormatProvider provider)
 		{
 			return System.Convert.ToInt32(m_value);
 		}
-		
+
 		long IConvertible.ToInt64 (IFormatProvider provider)
 		{
 			return System.Convert.ToInt64(m_value);
 		}
-		
+
 		sbyte IConvertible.ToSByte (IFormatProvider provider)
 		{
 			return System.Convert.ToSByte(m_value);
 		}
-		
+
 		float IConvertible.ToSingle (IFormatProvider provider)
 		{
 			throw new InvalidCastException();
 		}
-		
+
 		ushort IConvertible.ToUInt16 (IFormatProvider provider)
 		{
 			return System.Convert.ToUInt16(m_value);
 		}
-		
+
 		uint IConvertible.ToUInt32 (IFormatProvider provider)
 		{
 			return System.Convert.ToUInt32(m_value);
 		}
-		
+
 		ulong IConvertible.ToUInt64 (IFormatProvider provider)
 		{
 			return System.Convert.ToUInt64(m_value);
 		}
 	}
 }
-
