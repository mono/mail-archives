Index: System.Web.UI/Control.jvm.cs
===================================================================
--- System.Web.UI/Control.jvm.cs	(revision 71250)
+++ System.Web.UI/Control.jvm.cs	(working copy)
@@ -52,7 +52,7 @@
 					return null;
 
 				if (_PortletNamespace == null) {
-					IPortletResponse portletResponse = GetRenderResponse ();
+					IPortletResponse portletResponse = Context.ServletResponse as IPortletResponse;
 					if (portletResponse != null)
 						_PortletNamespace = portletResponse.getNamespace ();
 					_emptyPortletNamespace = _PortletNamespace == null;
@@ -61,22 +61,6 @@
 			}
 		}
 
-		// For J2EE Portal we need to use the portlet namespace when we generate control IDs.
-		string GetDefaultName ()
-		{
-			string defaultName;
-			if (defaultNumberID > 99) {
-				defaultName = "_ctl" + defaultNumberID++;
-			} else {
-				defaultName = defaultNameArray [defaultNumberID++];
-			}
-
-			if (this != _page)
-				return defaultName;
-
-			return PortletNamespace + defaultName;
-		}
-
 		// Add a variant for specifying use of portlet resolveRenderUrl
 		internal string ResolveUrl (string relativeUrl, bool usePortletRenderResolve)
 		{
Index: System.Web.UI/Page.cs
===================================================================
--- System.Web.UI/Page.cs	(revision 70988)
+++ System.Web.UI/Page.cs	(working copy)
@@ -445,6 +445,12 @@
 			return "__doPostBack";
 		}
 	}
+
+	internal string theForm {
+		get {
+			return "theForm";
+		}
+	}
 #endif
 
 	[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]
@@ -749,23 +755,22 @@
 			return null;
 
 		NameValueCollection coll = null;
-		if (0 == String.Compare (Request.HttpMethod, "POST", true, CultureInfo.InvariantCulture)) {
-			coll =	req.Form;
-			WebROCollection c = (WebROCollection) coll;
-			allow_load = !c.GotID;
-			if (allow_load) {
-				c.ID = GetTypeHashCode ();
-			} else {
-				allow_load = (c.ID == GetTypeHashCode ());
-			}
-		} else  {
-			coll = req.QueryString;
-		}
-
+		if (0 == String.Compare (Request.HttpMethod, "POST", true, CultureInfo.InvariantCulture))
+			coll = req.Form;
 #if TARGET_J2EE
-		coll = LoadViewStateForPortlet((WebROCollection)coll);
+		else if (IsPortletRender && req.Form ["__VIEWSTATE"] != null)
+			coll = req.Form;
 #endif
+		else
+			coll = req.QueryString;
 
+		WebROCollection c = (WebROCollection) coll;
+		allow_load = !c.GotID;
+		if (allow_load)
+			c.ID = GetTypeHashCode ();
+		else
+			allow_load = (c.ID == GetTypeHashCode ());
+
 		if (coll != null && coll ["__VIEWSTATE"] == null && coll ["__EVENTTARGET"] == null)
 			return null;
 
@@ -940,13 +945,16 @@
 			StringBuilder script = new StringBuilder ();
 			script.AppendLine ("<script type=\"text/javascript\">");
 			script.AppendLine ("<!--");
-			script.AppendLine ("theForm.oldSubmit = theForm.submit");
-			script.AppendLine ("theForm.submit = WebForm_SaveScrollPositionSubmit");
-			script.AppendLine ("theForm.oldOnSubmit = theForm.onsubmit");
-			script.AppendLine ("theForm.onsubmit = WebForm_SaveScrollPositionOnSubmit");
+			script.AppendLine (theForm + ".oldSubmit = " + theForm + ".submit;");
+			script.AppendLine (theForm + ".submit = WebForm_SaveScrollPositionSubmit;");
+			script.AppendLine (theForm + ".oldOnSubmit = " + theForm + ".onsubmit;");
+			script.AppendLine (theForm + ".onsubmit = WebForm_SaveScrollPositionOnSubmit;");
 			if (IsPostBack) {
-				script.AppendLine ("theForm.oldOnLoad = window.onload");
-				script.AppendLine ("window.onload = WebForm_RestoreScrollPosition");
+				script.AppendLine ("function WebForm_RestoreScrollPosition" + theForm + " () {");
+				script.AppendLine ("\treturn WebForm_RestoreScrollPosition(" + theForm + ");");
+				script.AppendLine ("}");
+				script.AppendLine (theForm + ".oldOnLoad = window.onload;");
+				script.AppendLine ("window.onload = WebForm_RestoreScrollPosition" + theForm + ";");
 			}
 			script.AppendLine ("// -->");
 			script.AppendLine ("</script>");
@@ -965,13 +973,13 @@
 		writer.WriteLine ("<script language=\"javascript\">");
 		writer.WriteLine ("<!--");
 
-		writer.WriteLine ("\tvar theForm;\n\tif (document.getElementById) {{ theForm = document.getElementById ('{0}'); }}", formUniqueID);
-		writer.WriteLine ("\telse {{ theForm = document.{0}; }}", formUniqueID);
+		writer.WriteLine ("\tvar {0};\n\tif (document.getElementById) {{ {0} = document.getElementById ('{1}'); }}", theForm, formUniqueID);
+		writer.WriteLine ("\telse {{ {0} = document.{1}; }}", theForm, formUniqueID);
 		writer.WriteLine ("\tfunction " + PostBackFunctionName + "(eventTarget, eventArgument) {");
 		writer.WriteLine ("\t\tif(document.ValidatorOnSubmit && !ValidatorOnSubmit()) return;");
-		writer.WriteLine ("\t\ttheForm.{0}.value = eventTarget;", postEventSourceID);
-		writer.WriteLine ("\t\ttheForm.{0}.value = eventArgument;", postEventArgumentID);
-		writer.WriteLine ("\t\ttheForm.submit();");
+		writer.WriteLine ("\t\t{0}.{1}.value = eventTarget;", theForm, postEventSourceID);
+		writer.WriteLine ("\t\t{0}.{1}.value = eventArgument;", theForm, postEventArgumentID);
+		writer.WriteLine ("\t\t{0}.submit();", theForm);
 		writer.WriteLine ("\t}");
 		writer.WriteLine ("// -->");
 		writer.WriteLine ("</script>");
@@ -1786,7 +1794,7 @@
 @"<script language=""JavaScript"">
 <!--
 function WebForm_OnSubmit() {
-WebForm_ReEnableControls();
+WebForm_ReEnableControls(" + theForm + @");
 return true;
 } // -->
 </script>");
Index: System.Web.UI/ClientScriptManager.cs
===================================================================
--- System.Web.UI/ClientScriptManager.cs	(revision 70988)
+++ System.Web.UI/ClientScriptManager.cs	(working copy)
@@ -53,7 +53,7 @@
 		Hashtable registeredArrayDeclares;
 		ScriptEntry clientScriptBlocks;
 		ScriptEntry startupScriptBlocks;
-		Hashtable hiddenFields;
+		internal Hashtable hiddenFields;
 		ScriptEntry submitStatements;
 		ScriptEntry scriptIncludes;
 		Hashtable expandoAttributes;
@@ -147,8 +147,10 @@
 			if (options.ClientSubmit || options.ActionUrl != null)
 				page.RequiresPostBackScript ();
 			
-			return String.Format ("{0}WebForm_DoPostback({1},{2},{3},{4},{5},{6},{7},{8})", 
+			return String.Format ("{0}WebForm_DoPostback({1},{2},{3},{4},{5},{6},{7},{8},{9},{10})", 
 					options.RequiresJavaScriptProtocol ? "javascript:" : "",
+					page.theForm,
+					page.PostBackFunctionName,
 					ClientScriptManager.GetScriptLiteral (options.TargetControl.UniqueID), 
 					ClientScriptManager.GetScriptLiteral (options.Argument),
 					ClientScriptManager.GetScriptLiteral (options.ActionUrl),
@@ -194,7 +196,7 @@
 			if (!IsClientScriptIncludeRegistered (typeof(Page), "callback"))
 				RegisterClientScriptInclude (typeof(Page), "callback", GetWebResourceUrl (typeof(Page), "callback.js"));
 			
-			return string.Format ("WebForm_DoCallback('{0}',{1},{2},{3},{4},{5})", target, argument, clientCallback, context, ((clientErrorCallback == null) ? "null" : clientErrorCallback), (useAsync ? "true" : "false"));
+			return string.Format ("WebForm_DoCallback({0},'{1}',{2},{3},{4},{5},{6})", page.theForm, target, argument, clientCallback, context, ((clientErrorCallback == null) ? "null" : clientErrorCallback), (useAsync ? "true" : "false"));
 		}
 #endif
 		
Index: System.Web.UI/Control.cs
===================================================================
--- System.Web.UI/Control.cs	(revision 70988)
+++ System.Web.UI/Control.cs	(working copy)
@@ -401,6 +401,12 @@
 					_userId = _namingContainer.GetDefaultName ();
 
 				string prefix = _namingContainer.UniqueID;
+#if TARGET_J2EE
+				// For J2EE portlets we need to add the namespace to the ID.
+				if (_namingContainer == _page && PortletNamespace != null)
+					prefix = PortletNamespace;
+				else
+#endif
 				if (_namingContainer == _page || prefix == null) {
 					uniqueID = _userId;
 					return uniqueID;
@@ -532,7 +538,6 @@
 			defaultNumberID = 0;
 		}
 
-#if !TARGET_J2EE
 		string GetDefaultName ()
 		{
 			string defaultName;
@@ -543,7 +548,6 @@
 			}
 			return defaultName;
 		}
-#endif
 
 		void NullifyUniqueID ()
 		{
@@ -698,6 +702,10 @@
 
 		Control LookForControlByName (string id)
 		{
+#if TARGET_J2EE
+			if (this == _page && id != null && id == PortletNamespace)
+				return this;
+#endif
 			if (!HasControls ())
 				return null;
 
Index: System.Web.UI/Page.jvm.cs
===================================================================
--- System.Web.UI/Page.jvm.cs	(revision 70988)
+++ System.Web.UI/Page.jvm.cs	(working copy)
@@ -29,6 +29,7 @@
 using vmw.@internal.j2ee;
 using javax.servlet.http;
 using System.Collections.Specialized;
+using System.Globalization;
 using System.Web.Hosting;
 
 namespace System.Web.UI
@@ -37,47 +38,36 @@
 	{
 		internal string PostBackFunctionName {
 			get {
-#if LATER // Enable when we fix the jscripts not to reference __doPostBack.
-				IPortletRenderResponse resp = GetRenderResponse();
-				if (resp != null)
-					return "__doPostBack_" + resp.getNamespace();
-#endif
-				return "__doPostBack";
+				return "__doPostBack_" + PortletNamespace;
 			}
 		}
 
-		// For J2EE portlets we load the view state from the render parameters
-		WebROCollection LoadViewStateForPortlet(WebROCollection coll)
-		{
-			IPortletRenderRequest renderRequest = Context.ServletRequest as IPortletRenderRequest;
-			if (renderRequest != null && (coll == null || coll ["__VIEWSTATE"] == null)) {
-				string mode = renderRequest.getPortletMode();
-				string viewstate = Context.ServletRequest.getParameter("vmw.viewstate." + mode);
-				if (viewstate != null) {
-					if (coll == null)
-						coll = new WebROCollection();
-					else 
-						coll.Unprotect();
-					coll["__VIEWSTATE"] = viewstate;
-					coll.Protect();
-				}
+		internal string theForm {
+			get {
+				return "theForm" + PortletNamespace;
 			}
-			return coll;
 		}
 
-		internal bool SaveViewStateForNextPortletRender()
+		internal bool SaveViewStateForNextPortletRender ()
 		{
 			IPortletActionResponse resp = Context.ServletResponse as IPortletActionResponse;
 			IPortletActionRequest req = Context.ServletRequest as IPortletActionRequest;
 			if (req == null)
 				return false;
 
-			if (IsPostBack && String.Compare (Request.HttpMethod, "POST", true) == 0 && !resp.isRedirected())
-				resp.setRenderParameter("vmw.viewstate." + req.getPortletMode(), GetSavedViewState());
+			// When redirecting don't save the page viewstate and hidden fields
+			if (resp.isRedirected ())
+				return true;
 
+			if (IsPostBack && 0 == String.Compare (Request.HttpMethod, "POST", true, CultureInfo.InvariantCulture)) {
+				resp.setRenderParameter ("__VIEWSTATE", GetSavedViewState ());
+				foreach (string key in ClientScript.hiddenFields.Keys)
+					resp.setRenderParameter (key, (string) ClientScript.hiddenFields [key]);
+			}
+
 			// Stop processing only if we are handling processAction. If we
 			// are handling a postback from render then fall through.
-			return req.processActionOnly() || resp.isRedirected();
+			return req.processActionOnly ();
 		}
 	}
 }
Index: resources/MaintainScrollPositionOnPostBack.js
===================================================================
--- resources/MaintainScrollPositionOnPostBack.js	(revision 70975)
+++ resources/MaintainScrollPositionOnPostBack.js	(working copy)
@@ -1,23 +1,26 @@
 function WebForm_SaveScrollPositionSubmit() {
-    theForm.elements['__SCROLLPOSITIONX'].value = WebForm_GetScrollX();
-    theForm.elements['__SCROLLPOSITIONY'].value = WebForm_GetScrollY();
+    this.elements['__SCROLLPOSITIONX'].value = WebForm_GetScrollX();
+    this.elements['__SCROLLPOSITIONY'].value = WebForm_GetScrollY();
     if ((typeof(this.oldSubmit) != "undefined") && (this.oldSubmit != null)) {
         return this.oldSubmit();
     }
     return true;
 }
 function WebForm_SaveScrollPositionOnSubmit() {
-    theForm.elements['__SCROLLPOSITIONX'].value = WebForm_GetScrollX();
-    theForm.elements['__SCROLLPOSITIONY'].value = WebForm_GetScrollY();
+    this.elements['__SCROLLPOSITIONX'].value = WebForm_GetScrollX();
+    this.elements['__SCROLLPOSITIONY'].value = WebForm_GetScrollY();
     if ((typeof(this.oldOnSubmit) != "undefined") && (this.oldOnSubmit != null)) {
         return this.oldOnSubmit();
     }
     return true;
 }
-function WebForm_RestoreScrollPosition() {
-    window.scrollTo(theForm.elements['__SCROLLPOSITIONX'].value, theForm.elements['__SCROLLPOSITIONY'].value);
-    if ((typeof(theForm.oldOnLoad) != "undefined") && (theForm.oldOnLoad != null)) {
-        return theForm.oldOnLoad();
+function WebForm_RestoreScrollPosition(theForm) {
+	var ScrollX = theForm.elements['__SCROLLPOSITIONX'].value;
+	var ScrollY = theForm.elements['__SCROLLPOSITIONY'].value;
+	if (ScrollX != "" || ScrollY != "")
+    	window.scrollTo(ScrollX, ScrollY);
+    if ((typeof(this.oldOnLoad) != "undefined") && (this.oldOnLoad != null)) {
+        return this.oldOnLoad();
     }
     return true;
 }
Index: resources/callback.js
===================================================================
--- resources/callback.js	(revision 70975)
+++ resources/callback.js	(working copy)
@@ -1,7 +1,7 @@
 
-function WebForm_DoCallback (id, arg, callback, ctx, errorCallback)
+function WebForm_DoCallback (theForm, id, arg, callback, ctx, errorCallback)
 {
-	var qs = WebForm_getFormData () + "&__CALLBACKTARGET=" + id + "&&__CALLBACKARGUMENT=" + escape(arg);
+	var qs = WebForm_getFormData (theForm) + "&__CALLBACKTARGET=" + id + "&&__CALLBACKARGUMENT=" + escape(arg);
 	WebForm_httpPost (document.URL, qs, function (httpPost) { WebForm_ClientCallback (httpPost, ctx, callback, errorCallback); });
 }
 
@@ -17,7 +17,7 @@
 	callback (doc, ctx);
 }
 
-function WebForm_getFormData ()
+function WebForm_getFormData (theForm)
 {
 	var qs = "";
 	var len = theForm.elements.length;
Index: resources/webform.js
===================================================================
--- resources/webform.js	(revision 70975)
+++ resources/webform.js	(working copy)
@@ -95,7 +95,7 @@
 	return false;
 }
 
-function WebForm_ReEnableControls()
+function WebForm_ReEnableControls(theForm)
 {
 	if (typeof (theForm) == 'undefined')
 		return;
@@ -107,7 +107,7 @@
 	}
 }
 
-function WebForm_DoPostback (ctrl, par, url, apb, pval, tf, csubm, vg)
+function WebForm_DoPostback (theForm, doPostBackFunc, ctrl, par, url, apb, pval, tf, csubm, vg)
 {
 	if (pval && typeof(Page_ClientValidate) == "function" && !Page_ClientValidate(vg))
 		return;
@@ -116,7 +116,7 @@
 		theForm.action = url;
 		
 	if (csubm)
-		__doPostBack (ctrl, par);
+		doPostBackFunc (ctrl, par);
 }
 
 function WebForm_FireDefaultButton(event, target)
Index: System.Web.UI.WebControls/DetailsView.cs
===================================================================
--- System.Web.UI.WebControls/DetailsView.cs	(revision 70975)
+++ System.Web.UI.WebControls/DetailsView.cs	(working copy)
@@ -1882,6 +1882,7 @@
 				string script = string.Format ("var {0} = new Object ();\n", cgrid);
 				script += string.Format ("{0}.pageIndex = {1};\n", cgrid, ClientScriptManager.GetScriptLiteral (PageIndex));
 				script += string.Format ("{0}.uid = {1};\n", cgrid, ClientScriptManager.GetScriptLiteral (UniqueID));
+				script += string.Format ("{0}.form = {1};\n", cgrid, Page.theForm);
 				Page.ClientScript.RegisterStartupScript (typeof(TreeView), this.UniqueID, script, true);
 				
 				// Make sure the basic script infrastructure is rendered
Index: System.Web.UI.WebControls/GridView.cs
===================================================================
--- System.Web.UI.WebControls/GridView.cs	(revision 70975)
+++ System.Web.UI.WebControls/GridView.cs	(working copy)
@@ -2063,6 +2063,7 @@
 				script += string.Format ("{0}.sortExp = {1};\n", cgrid, ClientScriptManager.GetScriptLiteral (SortExpression == null ? "" : SortExpression));
 				script += string.Format ("{0}.sortDir = {1};\n", cgrid, ClientScriptManager.GetScriptLiteral ((int) SortDirection));
 				script += string.Format ("{0}.uid = {1};\n", cgrid, ClientScriptManager.GetScriptLiteral (UniqueID));
+				script += string.Format ("{0}.form = {1};\n", cgrid, Page.theForm);
 				Page.ClientScript.RegisterStartupScript (typeof(TreeView), this.UniqueID, script, true);
 				
 				// Make sure the basic script infrastructure is rendered
Index: System.Web.UI.WebControls/TreeView.js
===================================================================
--- System.Web.UI.WebControls/TreeView.js	(revision 70975)
+++ System.Web.UI.WebControls/TreeView.js	(working copy)
@@ -6,7 +6,7 @@
 	var expand = node.style.display == "none";
 	
 	if (tree.populateFromClient && expand && node.populated != true && (node.innerHTML.length == 0 || node.hasError)) {
-		WebForm_DoCallback (treeId, nodeId, TreeView_PopulateCallback, treeId + " " + nodeId, TreeView_ErrorCallback)
+		WebForm_DoCallback (tree.form, treeId, nodeId, TreeView_PopulateCallback, treeId + " " + nodeId, TreeView_ErrorCallback)
 		return;
 	}
 	
@@ -15,7 +15,7 @@
 	
 	node.style.display = expand ? "block" : "none";
 	
-	var inputStates = document.forms[0][treeId + "_ExpandStates"];
+	var inputStates = tree.form[treeId + "_ExpandStates"];
 	TreeView_SetNodeFlag (inputStates, nodeId, expand);
 	
 	if (tree.showImage) {
@@ -55,7 +55,7 @@
 	if (data != "*") {
 		node.innerHTML = data;
 	    TreeView_ToggleExpand (idArray[0], idArray[1]);
-	    TreeView_SetNodeFlag (document.forms[0][idArray[0] + "_PopulatedStates"], idArray[1], true);
+	    TreeView_SetNodeFlag (tree.form[idArray[0] + "_PopulatedStates"], idArray[1], true);
 	} else {
 		if (tree.showImage && tree.noExpandImage != null) {
 			var image = document.getElementById (spanId + "_img");
Index: System.Web.UI.WebControls/DetailsView.js
===================================================================
--- System.Web.UI.WebControls/DetailsView.js	(revision 70975)
+++ System.Web.UI.WebControls/DetailsView.js	(working copy)
@@ -2,7 +2,7 @@
 {
 	var gridData = eval (ctrlId + "_data");
 	var clientData = gridData.pageIndex + '|' + evnt;
-	WebForm_DoCallback (gridData.uid, clientData, DetailsView_ClientRender, ctrlId, DetailsView_ClientRender_Error);
+	WebForm_DoCallback (gridData.form, gridData.uid, clientData, DetailsView_ClientRender, ctrlId, DetailsView_ClientRender_Error);
 }
 
 function DetailsView_ClientRender (data, ctx)
Index: System.Web.UI.WebControls/GridView.js
===================================================================
--- System.Web.UI.WebControls/GridView.js	(revision 70975)
+++ System.Web.UI.WebControls/GridView.js	(working copy)
@@ -2,7 +2,7 @@
 {
 	var gridData = eval (ctrlId + "_data");
 	var clientData = gridData.pageIndex + '|' + escape (gridData.sortExp) + '|' + gridData.sortDir + '|' + evnt;
-	WebForm_DoCallback (gridData.uid, clientData, GridView_ClientRender, ctrlId, GridView_ClientRender_Error);
+	WebForm_DoCallback (gridData.form, gridData.uid, clientData, GridView_ClientRender, ctrlId, GridView_ClientRender_Error);
 }
 
 function GridView_ClientRender (data, ctx)
Index: System.Web.UI.WebControls/TreeView.cs
===================================================================
--- System.Web.UI.WebControls/TreeView.cs	(revision 70975)
+++ System.Web.UI.WebControls/TreeView.cs	(working copy)
@@ -1070,6 +1070,7 @@
 				script += string.Format ("{0}.populateFromClient = {1};\n", ctree, ClientScriptManager.GetScriptLiteral (PopulateNodesFromClient));
 				script += string.Format ("{0}.expandAlt = {1};\n", ctree, ClientScriptManager.GetScriptLiteral (GetNodeImageToolTip (true, null)));
 				script += string.Format ("{0}.collapseAlt = {1};\n", ctree, ClientScriptManager.GetScriptLiteral (GetNodeImageToolTip (false, null)));
+				script += string.Format ("{0}.form = {1};\n", ctree, Page.theForm);
 
 				if (!Page.IsPostBack) {
 					SetNodesExpandedToDepthRecursive (Nodes);
