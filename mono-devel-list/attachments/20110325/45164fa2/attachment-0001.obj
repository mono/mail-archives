diff --git a/mcs/class/System.ServiceModel/System.ServiceModel.Description/ContractDescriptionGenerator.cs b/mcs/class/System.ServiceModel/System.ServiceModel.Description/ContractDescriptionGenerator.cs
index 6b26758..bf6702e 100644
--- a/mcs/class/System.ServiceModel/System.ServiceModel.Description/ContractDescriptionGenerator.cs
+++ b/mcs/class/System.ServiceModel/System.ServiceModel.Description/ContractDescriptionGenerator.cs
@@ -186,7 +186,9 @@ namespace System.ServiceModel.Description
 			foreach (var icd in cd.GetInheritedContracts ()) {
 				FillOperationsForInterface (icd, icd.ContractType, givenServiceType, false);
 				foreach (var od in icd.Operations)
-					cd.Operations.Add (od);
+					if (!cd.Operations.Any(o => o.Name == od.Name && o.SyncMethod == od.SyncMethod && 
+							       o.BeginMethod == od.BeginMethod && o.InCallbackContract == od.InCallbackContract))
+						cd.Operations.Add (od);
 			}
 			
 			FillOperationsForInterface (cd, cd.ContractType, givenServiceType, false);
diff --git a/mcs/class/System.ServiceModel/Test/System.ServiceModel.Description/ContractDescriptionTest.cs b/mcs/class/System.ServiceModel/Test/System.ServiceModel.Description/ContractDescriptionTest.cs
index 2c11478..2ae989f 100644
--- a/mcs/class/System.ServiceModel/Test/System.ServiceModel.Description/ContractDescriptionTest.cs
+++ b/mcs/class/System.ServiceModel/Test/System.ServiceModel.Description/ContractDescriptionTest.cs
@@ -480,6 +480,15 @@ namespace MonoTests.System.ServiceModel.Description
 			Assert.AreEqual (2, cd.Operations.Count(od => od.SyncMethod == typeof (IAsyncContractWithSymmetricCallbackContract).GetMethod ("Foo")), "#4");
 			Assert.AreEqual (2, cd.Operations.Count(od => od.SyncMethod == typeof (ISymmetricInheritance).GetMethod ("Bar")), "#5");
 		}
+		
+		[Test]
+		public void DeepContractHierarchyTest ()
+		{
+			var cd = ContractDescription.GetContract (typeof(IDeepContractHierarchy));
+			Assert.AreEqual (6, cd.Operations.Count, "#1");
+			Assert.AreSame (typeof (IDeepContractHierarchy), cd.ContractType, "#2");
+			Assert.AreSame (typeof (IDeepContractHierarchy), cd.CallbackContractType, "#3");
+		}
 
 		[Test]
 		public void MessageContractAttributes ()
@@ -847,6 +856,13 @@ namespace MonoTests.System.ServiceModel.Description
 			 void EndBar (IAsyncResult result);
 		}
 		
+		[ServiceContract (CallbackContract = typeof (IDeepContractHierarchy))]
+		public interface IDeepContractHierarchy : ISymmetricInheritance
+		{
+			[OperationContract]
+			void Foobar();
+		}
+		
 		public interface IBaseDuplexCallback
 		{
 			[OperationContract]
