Index: CultureInfo.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.Globalization/CultureInfo.cs,v
retrieving revision 1.16
diff -u -r1.16 CultureInfo.cs
--- CultureInfo.cs	5 Apr 2003 19:00:52 -0000	1.16
+++ CultureInfo.cs	15 Apr 2003 18:42:57 -0000
@@ -3,8 +3,9 @@
 //
 // Miguel de Icaza (miguel@ximian.com)
 // Dick Porter (dick@ximian.com)
+// Lee Mallabone (gnome@fonicmonkey.net)
 //
-// (C) 2001, 2002 Ximian, Inc. (http://www.ximian.com)
+// (C) 2001-2003 Ximian, Inc. (http://www.ximian.com)
 //
 
 using System.Collections;
@@ -46,214 +47,9 @@
 		//
 		void InitializeByID (int culture_id, bool use_user_override)
 		{
-			switch (culture_id){
-			case 0x0001: // ar Arabic
-			case 0x0401: // ar-SA Arabic (Saudi Arabia)
-			case 0x0801: // ar-IQ Arabic (Iraq)
-			case 0x0C01: // ar-EG Arabic (Egypt)
-			case 0x1001: // ar-LY Arabic (Libya)
-			case 0x1401: // ar-DZ Arabic (Algeria)
-			case 0x1801: // ar-MA Arabic (Morocco)
-			case 0x1C01: // ar-TN Arabic (Tunisia)
-			case 0x2001: // ar-OM Arabic (Oman)
-			case 0x2401: // ar-YE Arabic (Yemen)
-			case 0x2801: // ar-SY Arabic (Syria)
-			case 0x2C01: // ar-JO Arabic (Jordan)
-			case 0x3001: // ar-LB Arabic (Lebanon)
-			case 0x3401: // ar-KW Arabic (Kuwait)
-			case 0x3801: // ar-AE Arabic (U.A.E.)
-			case 0x3C01: // ar-BH Arabic (Bahrain)
-			case 0x4001: // ar-QA Arabic (Qatar)
-			case 0x0002: // bg Bulgarian
-			case 0x0402: // bg-BG Bulgarian (Bulgaria)
-			case 0x0003: // ca Catalan
-			case 0x0403: // ca-ES Catalan (Spain)
-			case 0x0004: // zh-CHS Chinese (Simplified)
-			case 0x0404: // zh-TW Chinese (Taiwan)
-			case 0x0804: // zh-CN Chinese (People's Republic of China)
-			case 0x0C04: // zh-HK Chinese (Hong Kong S.A.R.)
-			case 0x1004: // zh-SG Chinese (Singapore)
-			case 0x1404: // zh-MO Chinese (Macau S.A.R.)
-			case 0x7C04: // zh-CHT Chinese (Traditional)
-			case 0x0005: // cs Czech
-			case 0x0405: // cs-CZ Czech (Czech Republic)
-			case 0x0006: // da Danish
-			case 0x0406: // da-DK Danish (Denmark)
-			case 0x0007: // de German
-			case 0x0407: // de-DE German (Germany)
-			case 0x0807: // de-CH German (Switzerland)
-			case 0x0C07: // de-AT German (Austria)
-			case 0x1007: // de-LU German (Luxembourg)
-			case 0x1407: // de-LI German (Liechtenstein)
-			case 0x0008: // el Greek
-			case 0x0408: // el-GR Greek (Greece)
-			case 0x0009: // en English
-			case 0x0409: // en-US English (United States)
-			case 0x0809: // en-GB English (United Kingdom)
-			case 0x0C09: // en-AU English (Australia)
-			case 0x1009: // en-CA English (Canada)
-			case 0x1409: // en-NZ English (New Zealand)
-			case 0x1809: // en-IE English (Ireland)
-			case 0x1C09: // en-ZA English (South Africa)
-			case 0x2009: // en-JM English (Jamaica)
-			case 0x2409: // en-CB English (Caribbean)
-			case 0x2809: // en-BZ English (Belize)
-			case 0x2C09: // en-TT English (Trinidad and Tobago)
-			case 0x3009: // en-ZW English (Zimbabwe)
-			case 0x3409: // en-PH English (Republic of the Philippines)
-			case 0x000A: // es Spanish
-			case 0x080A: // es-MX Spanish (Mexico)
-			case 0x0C0A: // es-ES Spanish (Spain)
-			case 0x100A: // es-GT Spanish (Guatemala)
-			case 0x140A: // es-CR Spanish (Costa Rica)
-			case 0x180A: // es-PA Spanish (Panama)
-			case 0x1C0A: // es-DO Spanish (Dominican Republic)
-			case 0x200A: // es-VE Spanish (Venezuela)
-			case 0x240A: // es-CO Spanish (Colombia)
-			case 0x280A: // es-PE Spanish (Peru)
-			case 0x2C0A: // es-AR Spanish (Argentina)
-			case 0x300A: // es-EC Spanish (Ecuador)
-			case 0x340A: // es-CL Spanish (Chile)
-			case 0x380A: // es-UY Spanish (Uruguay)
-			case 0x3C0A: // es-PY Spanish (Paraguay)
-			case 0x400A: // es-BO Spanish (Bolivia)
-			case 0x440A: // es-SV Spanish (El Salvador)
-			case 0x480A: // es-HN Spanish (Honduras)
-			case 0x4C0A: // es-NI Spanish (Nicaragua)
-			case 0x500A: // es-PR Spanish (Puerto Rico)
-			case 0x000B: // fi Finnish
-			case 0x040B: // fi-FI Finnish (Finland)
-			case 0x000C: // fr French
-			case 0x040C: // fr-FR French (France)
-			case 0x080C: // fr-BE French (Belgium)
-			case 0x0C0C: // fr-CA French (Canada)
-			case 0x100C: // fr-CH French (Switzerland)
-			case 0x140C: // fr-LU French (Luxembourg)
-			case 0x180C: // fr-MC French (Principality of Monaco)
-			case 0x000D: // he Hebrew
-			case 0x040D: // he-IL Hebrew (Israel)
-			case 0x000E: // hu Hungarian
-			case 0x040E: // hu-HU Hungarian (Hungary)
-			case 0x000F: // is Icelandic
-			case 0x040F: // is-IS Icelandic (Iceland)
-			case 0x0010: // it Italian
-			case 0x0410: // it-IT Italian (Italy)
-			case 0x0810: // it-CH Italian (Switzerland)
-			case 0x0011: // ja Japanese
-			case 0x0411: // ja-JP Japanese (Japan)
-			case 0x0012: // ko Korean
-			case 0x0412: // ko-KR Korean (Korea)
-			case 0x0013: // nl Dutch
-			case 0x0413: // nl-NL Dutch (Netherlands)
-			case 0x0813: // nl-BE Dutch (Belgium)
-			case 0x0014: // no Norwegian
-			case 0x0414: // nb-NO Norwegian (Bokmål) (Norway)
-			case 0x0814: // nn-NO Norwegian (Nynorsk) (Norway)
-			case 0x0015: // pl Polish
-			case 0x0415: // pl-PL Polish (Poland)
-			case 0x0016: // pt Portuguese
-			case 0x0416: // pt-BR Portuguese (Brazil)
-			case 0x0816: // pt-PT Portuguese (Portugal)
-			case 0x0018: // ro Romanian
-			case 0x0418: // ro-RO Romanian (Romania)
-			case 0x0019: // ru Russian
-			case 0x0419: // ru-RU Russian (Russia)
-			case 0x001A: // hr Croatian
-			case 0x041A: // hr-HR Croatian (Croatia)
-			case 0x081A: // Lt-sr-SP Serbian (Latin) (Serbia)
-			case 0x0C1A: // Cy-sr-SP Serbian (Cyrillic) (Serbia)
-			case 0x001B: // sk Slovak
-			case 0x041B: // sk-SK Slovak (Slovakia)
-			case 0x001C: // sq Albanian
-			case 0x041C: // sq-AL Albanian (Albania)
-			case 0x001D: // sv Swedish
-			case 0x041D: // sv-SE Swedish (Sweden)
-			case 0x081D: // sv-FI Swedish (Finland)
-			case 0x001E: // th Thai
-			case 0x041E: // th-TH Thai (Thailand)
-			case 0x001F: // tr Turkish
-			case 0x041F: // tr-TR Turkish (Turkey)
-			case 0x0020: // ur Urdu
-			case 0x0420: // ur-PK Urdu (Islamic Republic of Pakistan)
-			case 0x0021: // id Indonesian
-			case 0x0421: // id-ID Indonesian (Indonesia)
-			case 0x0022: // uk Ukrainian
-			case 0x0422: // uk-UA Ukrainian (Ukraine)
-			case 0x0023: // be Belarusian
-			case 0x0423: // be-BY Belarusian (Belarus)
-			case 0x0024: // sl Slovenian
-			case 0x0424: // sl-SI Slovenian (Slovenia)
-			case 0x0025: // et Estonian
-			case 0x0425: // et-EE Estonian (Estonia)
-			case 0x0026: // lv Latvian
-			case 0x0426: // lv-LV Latvian (Latvia)
-			case 0x0027: // lt Lithuanian
-			case 0x0427: // lt-LT Lithuanian (Lithuania)
-			case 0x0029: // fa Farsi
-			case 0x0429: // fa-IR Farsi (Iran)
-			case 0x002A: // vi Vietnamese
-			case 0x042A: // vi-VN Vietnamese (Viet Nam)
-			case 0x002B: // hy Armenian
-			case 0x042B: // hy-AM Armenian (Armenia)
-			case 0x002C: // az Azeri
-			case 0x042C: // Lt-az-AZ Azeri (Latin) (Azerbaijan)
-			case 0x082C: // Cy-az-AZ Azeri (Cyrillic) (Azerbaijan)
-			case 0x002D: // eu Basque
-			case 0x042D: // eu-ES Basque (Spain)
-			case 0x002F: // mk FYRO Macedonian
-			case 0x042F: // mk-MK FYRO Macedonian (Former Yugoslav Republic of Macedonia)
-			case 0x0036: // af Afrikaans
-			case 0x0436: // af-ZA Afrikaans (South Africa)
-			case 0x0037: // ka Georgian
-			case 0x0437: // ka-GE Georgian (Georgia)
-			case 0x0038: // fo Faeroese
-			case 0x0438: // fo-FO Faeroese (Faeroe Islands)
-			case 0x0039: // hi Hindi
-			case 0x0439: // hi-IN Hindi (India)
-			case 0x003E: // ms Malay
-			case 0x043E: // ms-MY Malay (Malaysia)
-			case 0x083E: // ms-BN Malay (Brunei Darussalam)
-			case 0x003F: // kk Kazakh
-			case 0x043F: // kk-KZ Kazakh (Kazakhstan)
-			case 0x0040: // ky Kyrgyz
-			case 0x0440: // ky-KZ Kyrgyz (Kyrgyzstan)
-			case 0x0041: // sw Swahili
-			case 0x0441: // sw-KE Swahili (Kenya)
-			case 0x0043: // uz Uzbek
-			case 0x0443: // Lt-uz-UZ Uzbek (Latin) (Uzbekistan)
-			case 0x0843: // Cy-uz-UZ Uzbek (Cyrillic) (Uzbekistan)
-			case 0x0044: // tt Tatar
-			case 0x0444: // tt-TA Tatar (Tatarstan)
-			case 0x0046: // pa Punjabi
-			case 0x0446: // pa-IN Punjabi (India)
-			case 0x0047: // gu Gujarati
-			case 0x0447: // gu-IN Gujarati (India)
-			case 0x0049: // ta Tamil
-			case 0x0449: // ta-IN Tamil (India)
-			case 0x004A: // te Telugu
-			case 0x044A: // te-IN Telugu (India)
-			case 0x004B: // kn Kannada
-			case 0x044B: // kn-IN Kannada (India)
-			case 0x004E: // mr Marathi
-			case 0x044E: // mr-IN Marathi (India)
-			case 0x004F: // sa Sanskrit
-			case 0x044F: // sa-IN Sanskrit (India)
-			case 0x0050: // mn Mongolian
-			case 0x0450: // mn-MN Mongolian (Mongolia)
-			case 0x0056: // gl Galician
-			case 0x0456: // gl-ES Galician (Spain)
-			case 0x0057: // kok Konkani
-			case 0x0457: // kok-IN Konkani (India)
-			case 0x005A: // syr Syriac
-			case 0x045A: // syr-SY Syriac (Syria)
-			case 0x0065: // div Divehi
-			case 0x0465: // div-MV Divehi (Maldives)
-			case 0x007F: //  Invariant Language (Invariant Country)
-				break;
-
-			default:
+			if (cultureData[culture_id] == null)
 				throw new ArgumentException ("CultureInfoCode " + culture_id);
-			}
+			
 			lcid = culture_id;
 			this.use_user_override = use_user_override;
 		}
@@ -492,7 +288,11 @@
 		{
 			if (name == null)
 				throw new ArgumentNullException ();
-			
+				
+			// FIXME: This isn't quite right. From the MSDN docs, this method should return: 
+			// A CultureInfo that represents the default *specific* culture associated with name, if name is a *neutral* culture.
+			// However, at the moment a neutral culture will be returned if 'name' specified a neutral culture.
+
 			int id = NameToID (name);
 
 			if (id == -1)
@@ -542,423 +342,241 @@
 			}
 		}
 
+		private class CultureCodeInfo {
+			public string name;
+			public string twoLetter;
+			public string threeLetterISO;
+			public string threeLetterWin;
+
+			public CultureCodeInfo(string name, string two, string threeISO, string threeWin) {
+				this.name = name;
+				this.twoLetter = two;
+				this.threeLetterISO = threeISO;
+				this.threeLetterWin = threeWin;
+			}
+		};
+
 		// <summary>
 		//   Gets the string-encoded name of the culture
 		// </summary>
 		public virtual string Name {
 			get {
-				/* FIXME: This long switch should be
-				 * moved into a hash, initialised in
-				 * the static class constructor
-				 */
-				switch (lcid){
-				case 0x007f:
-					return "iv";
-				case 0x0036:
-					return "af";
-				case 0x0436:
-					return "af-ZA";
-				case 0x001c:
-					return "sq";
-				case 0x041c:
-					return "sq-AL";
-				case 0x0001:
-					return "ar";
-				case 0x1401:
-					return "ar-DZ";
-				case 0x3c01:
-					return "ar-BH";
-				case 0x0c01:
-					return "ar-EG";
-				case 0x0801:
-					return "ar-IQ";
-				case 0x2c01:
-					return "ar-JO";
-				case 0x3401:
-					return "ar-KW";
-				case 0x3001:
-					return "ar-LB";
-				case 0x1001:
-					return "ar-LY";
-				case 0x1801:
-					return "ar-MA";
-				case 0x2001:
-					return "ar-OM";
-				case 0x4001:
-					return "ar-QA";
-				case 0x0401:
-					return "ar-SA";
-				case 0x2801:
-					return "ar-SY";
-				case 0x1c01:
-					return "ar-TN";
-				case 0x3801:
-					return "ar-AE";
-				case 0x2401:
-					return "ar-YE";
-				case 0x002b:
-					return "hy";
-				case 0x042b:
-					return "hy-AM";
-				case 0x002c:
-					return "az";
-				case 0x082c:
-					return "Cy-az-AZ";
-				case 0x042c:
-					return "Lt-az-AZ";
-				case 0x002d:
-					return "eu";
-				case 0x042d:
-					return "eu-ES";
-				case 0x0023:
-					return "be";
-				case 0x0423:
-					return "be-BY";
-				case 0x0002:
-					return "bg";
-				case 0x0402:
-					return "bg-BG";
-				case 0x0003:
-					return "ca";
-				case 0x0403:
-					return "ca-ES";
-				case 0x0c04:
-					return "zh-HK";
-				case 0x1404:
-					return "zh-MO";
-				case 0x0804:
-					return "zh-CN";
-				case 0x0004:
-					return "zh-CHS";
-				case 0x1004:
-					return "zh-SG";
-				case 0x0404:
-					return "zh-TW";
-				case 0x7c04:
-					return "zh-CHT";
-				case 0x001a:
-					return "hr";
-				case 0x041a:
-					return "hr-HR";
-				case 0x0005:
-					return "cs";
-				case 0x0405:
-					return "cs-CZ";
-				case 0x0006:
-					return "da";
-				case 0x0406:
-					return "da-DK";
-				case 0x0065:
-					return "div";
-				case 0x0465:
-					return "div-MV";
-				case 0x0013:
-					return "nl";
-				case 0x0813:
-					return "nl-BE";
-				case 0x0413:
-					return "nl-NL";
-				case 0x0009:
-					return "en";
-				case 0x0c09:
-					return "en-AU";
-				case 0x2809:
-					return "en-BZ";
-				case 0x1009:
-					return "en-CA";
-				case 0x2409:
-					return "en-CB";
-				case 0x1809:
-					return "en-IE";
-				case 0x2009:
-					return "en-JM";
-				case 0x1409:
-					return "en-NZ";
-				case 0x3409:
-					return "en-PH";
-				case 0x1c09:
-					return "en-ZA";
-				case 0x2c09:
-					return "en-TT";
-				case 0x0809:
-					return "en-GB";
-				case 0x0409:
-					return "en-US";
-				case 0x3009:
-					return "en-ZW";
-				case 0x0025:
-					return "et";
-				case 0x0425:
-					return "et-EE";
-				case 0x0038:
-					return "fo";
-				case 0x0438:
-					return "fo-FO";
-				case 0x0029:
-					return "fa";
-				case 0x0429:
-					return "fa-IR";
-				case 0x000b:
-					return "fi";
-				case 0x040b:
-					return "fi-FI";
-				case 0x000c:
-					return "fr";
-				case 0x080c:
-					return "fr-BE";
-				case 0x0c0c:
-					return "fr-CA";
-				case 0x040c:
-					return "fr-FR";
-				case 0x140c:
-					return "fr-LU";
-				case 0x180c:
-					return "fr-MC";
-				case 0x100c:
-					return "fr-CH";
-				case 0x0056:
-					return "gl";
-				case 0x0456:
-					return "gl-ES";
-				case 0x0037:
-					return "ka";
-				case 0x0437:
-					return "ka-GE";
-				case 0x0007:
-					return "de";
-				case 0x0c07:
-					return "de-AT";
-				case 0x0407:
-					return "de-DE";
-				case 0x1407:
-					return "de-LI";
-				case 0x1007:
-					return "de-LU";
-				case 0x0807:
-					return "de-CH";
-				case 0x0008:
-					return "el";
-				case 0x0408:
-					return "el-GR";
-				case 0x0047:
-					return "gu";
-				case 0x0447:
-					return "gu-IN";
-				case 0x000d:
-					return "he";
-				case 0x040d:
-					return "he-IL";
-				case 0x0039:
-					return "hi";
-				case 0x0439:
-					return "hi-IN";
-				case 0x000e:
-					return "hu";
-				case 0x040e:
-					return "hu-HU";
-				case 0x000f:
-					return "is";
-				case 0x040f:
-					return "is-IS";
-				case 0x0021:
-					return "id";
-				case 0x0421:
-					return "id-ID";
-				case 0x0010:
-					return "it";
-				case 0x0410:
-					return "it-IT";
-				case 0x0810:
-					return "it-CH";
-				case 0x0011:
-					return "ja";
-				case 0x0411:
-					return "ja-JP";
-				case 0x004b:
-					return "kn";
-				case 0x044b:
-					return "kn-IN";
-				case 0x003f:
-					return "kk";
-				case 0x043f:
-					return "kk-KZ";
-				case 0x0057:
-					return "kok";
-				case 0x0457:
-					return "kok-IN";
-				case 0x0012:
-					return "ko";
-				case 0x0412:
-					return "ko-KR";
-				case 0x0040:
-					return "ky";
-				case 0x0440:
-					return "ky-KZ";
-				case 0x0026:
-					return "lv";
-				case 0x0426:
-					return "lv-LV";
-				case 0x0027:
-					return "lt";
-				case 0x0427:
-					return "lt-LT";
-				case 0x002f:
-					return "mk";
-				case 0x042f:
-					return "mk-MK";
-				case 0x003e:
-					return "ms";
-				case 0x083e:
-					return "ms-BN";
-				case 0x043e:
-					return "ms-MY";
-				case 0x004e:
-					return "mr";
-				case 0x044e:
-					return "mr-IN";
-				case 0x0050:
-					return "mn";
-				case 0x0450:
-					return "mn-MN";
-				case 0x0014:
-					return "no";
-				case 0x0414:
-					return "nb-NO";
-				case 0x0814:
-					return "nn-NO";
-				case 0x0015:
-					return "pl";
-				case 0x0415:
-					return "pl-PL";
-				case 0x0016:
-					return "pt";
-				case 0x0416:
-					return "pt-BR";
-				case 0x0816:
-					return "pt-PT";
-				case 0x0046:
-					return "pa";
-				case 0x0446:
-					return "pa-IN";
-				case 0x0018:
-					return "ro";
-				case 0x0418:
-					return "ro-RO";
-				case 0x0019:
-					return "ru";
-				case 0x0419:
-					return "ru-RU";
-				case 0x004f:
-					return "sa";
-				case 0x044f:
-					return "sa-IN";
-				case 0x0c1a:
-					return "Cy-sr-SP";
-				case 0x081a:
-					return "Lt-sr-SP";
-				case 0x001b:
-					return "sk";
-				case 0x041b:
-					return "sk-SK";
-				case 0x0024:
-					return "sl";
-				case 0x0424:
-					return "sl-SI";
-				case 0x000a:
-					return "es";
-				case 0x2c0a:
-					return "es-AR";
-				case 0x400a:
-					return "es-BO";
-				case 0x340a:
-					return "es-CL";
-				case 0x240a:
-					return "es-CO";
-				case 0x140a:
-					return "es-CR";
-				case 0x1c0a:
-					return "es-DO";
-				case 0x300a:
-					return "es-EC";
-				case 0x440a:
-					return "es-SV";
-				case 0x100a:
-					return "es-GT";
-				case 0x480a:
-					return "es-HN";
-				case 0x080a:
-					return "es-MX";
-				case 0x4c0a:
-					return "es-NI";
-				case 0x180a:
-					return "es-PA";
-				case 0x3c0a:
-					return "es-PY";
-				case 0x280a:
-					return "es-PE";
-				case 0x500a:
-					return "es-PR";
-				case 0x0c0a:
-					return "es-ES";
-				case 0x380a:
-					return "es-UY";
-				case 0x200a:
-					return "es-VE";
-				case 0x0041:
-					return "sw";
-				case 0x0441:
-					return "sw-KE";
-				case 0x001d:
-					return "sv";
-				case 0x081d:
-					return "sv-FI";
-				case 0x041d:
-					return "sv-SE";
-				case 0x005a:
-					return "syr";
-				case 0x045a:
-					return "syr-SY";
-				case 0x0049:
-					return "ta";
-				case 0x0449:
-					return "ta-IN";
-				case 0x0044:
-					return "tt";
-				case 0x0444:
-					return "tt-RU";
-				case 0x004a:
-					return "te";
-				case 0x044a:
-					return "te-IN";
-				case 0x001e:
-					return "th";
-				case 0x041e:
-					return "th-TH";
-				case 0x001f:
-					return "tr";
-				case 0x041f:
-					return "tr-TR";
-				case 0x0022:
-					return "uk";
-				case 0x0422:
-					return "uk-UA";
-				case 0x0020:
-					return "ur";
-				case 0x0420:
-					return "ur-PK";
-				case 0x0043:
-					return "uz";
-				case 0x0843:
-					return "Cy-uz-UZ";
-				case 0x0443:
-					return "Lt-uz-UZ";
-				case 0x002a:
-					return "vi";
-				case 0x042a:
-					return "vi-VN";
-				}
-				throw new Exception ("Miss constructed object for LCID: " + lcid);
-			}
+				CultureCodeInfo nameInfo = (CultureCodeInfo) cultureData[lcid];
+				if (nameInfo == null)
+					throw new Exception ("Miss constructed object for LCID: " + lcid);
+				return nameInfo.name;
+			}
+		}
+
+		private static Hashtable cultureData;
+
+		static CultureInfo() {
+			// Build a hash called cultureData containing the name, 2iso, 3iso and 3win codes
+			cultureData = new Hashtable(CaseInsensitiveHashCodeProvider.Default,
+						  				CaseInsensitiveComparer.Default);
+
+			cultureData.Add(0x0427, new CultureCodeInfo("lt-LT", "lt", "lit", "LTH")); // Lithuanian (Lithuania)
+			cultureData.Add(0x0011, new CultureCodeInfo("ja", "ja", "jpn", "JPN")); // Japanese
+			cultureData.Add(0x0c07, new CultureCodeInfo("de-AT", "de", "deu", "DEA")); // German (Austria)
+			cultureData.Add(0x0437, new CultureCodeInfo("ka-GE", "ka", "kat", "KAT")); // Georgian (Georgia)
+			cultureData.Add(0x0041, new CultureCodeInfo("sw", "sw", "swa", "SWK")); // Swahili
+			cultureData.Add(0x081a, new CultureCodeInfo("sr-SP-Latn", "sr", "srp", "SRL")); // Serbian (Latin) (Serbia)
+			cultureData.Add(0x0404, new CultureCodeInfo("zh-TW", "zh", "zho", "CHT")); // Chinese (Taiwan)
+			cultureData.Add(0x043f, new CultureCodeInfo("kk-KZ", "kk", "kaz", "KKZ")); // Kazakh (Kazakhstan)
+			cultureData.Add(0x1809, new CultureCodeInfo("en-IE", "en", "eng", "ENI")); // English (Ireland)
+			cultureData.Add(0x041e, new CultureCodeInfo("th-TH", "th", "tha", "THA")); // Thai (Thailand)
+			cultureData.Add(0x0c1a, new CultureCodeInfo("sr-SP-Cyrl", "sr", "srp", "SRB")); // Serbian (Cyrillic) (Serbia)
+			cultureData.Add(0x0456, new CultureCodeInfo("gl-ES", "gl", "glg", "GLC")); // Galician (Galician)
+			cultureData.Add(0x083e, new CultureCodeInfo("ms-BN", "ms", "msa", "MSB")); // Malay (Brunei Darussalam)
+			cultureData.Add(0x0450, new CultureCodeInfo("mn-MN", "mn", "mon", "MON")); // Mongolian (Mongolia)
+			cultureData.Add(0x0026, new CultureCodeInfo("lv", "lv", "lav", "LVI")); // Latvian
+			cultureData.Add(0x0027, new CultureCodeInfo("lt", "lt", "lit", "LTH")); // Lithuanian
+			cultureData.Add(0x0065, new CultureCodeInfo("div", "div", "div", "DIV")); // Divehi
+			cultureData.Add(0x0405, new CultureCodeInfo("cs-CZ", "cs", "ces", "CSY")); // Czech (Czech Republic)
+			cultureData.Add(0x0420, new CultureCodeInfo("ur-PK", "ur", "urd", "URD")); // Urdu (Islamic Republic of Pakistan)
+			cultureData.Add(0x1c09, new CultureCodeInfo("en-ZA", "en", "eng", "ENS")); // English (South Africa)
+			cultureData.Add(0x0408, new CultureCodeInfo("el-GR", "el", "ell", "ELL")); // Greek (Greece)
+			cultureData.Add(0x100c, new CultureCodeInfo("fr-CH", "fr", "fra", "FRS")); // French (Switzerland)
+			cultureData.Add(0x3009, new CultureCodeInfo("en-ZW", "en", "eng", "ENW")); // English (Zimbabwe)
+			cultureData.Add(0x2009, new CultureCodeInfo("en-JM", "en", "eng", "ENJ")); // English (Jamaica)
+			cultureData.Add(0x3401, new CultureCodeInfo("ar-KW", "ar", "ara", "ARK")); // Arabic (Kuwait)
+			cultureData.Add(0x000f, new CultureCodeInfo("is", "is", "isl", "ISL")); // Icelandic
+			cultureData.Add(0x380a, new CultureCodeInfo("es-UY", "es", "spa", "ESY")); // Spanish (Uruguay)
+			cultureData.Add(0x3409, new CultureCodeInfo("en-PH", "en", "eng", "ENP")); // English (Republic of the Philippines)
+			cultureData.Add(0x300a, new CultureCodeInfo("es-EC", "es", "spa", "ESF")); // Spanish (Ecuador)
+			cultureData.Add(0x0010, new CultureCodeInfo("it", "it", "ita", "ITA")); // Italian
+			cultureData.Add(0x0441, new CultureCodeInfo("sw-KE", "sw", "swa", "SWK")); // Swahili (Kenya)
+			cultureData.Add(0x042f, new CultureCodeInfo("mk-MK", "mk", "mkd", "MKI")); // FYRO Macedonian (Former Yugoslav Republic of Macedonia)
+			cultureData.Add(0x0c0a, new CultureCodeInfo("es-ES", "es", "spa", "ESN")); // Spanish (Spain)
+			cultureData.Add(0x0021, new CultureCodeInfo("id", "id", "ind", "IND")); // Indonesian
+			cultureData.Add(0x500a, new CultureCodeInfo("es-PR", "es", "spa", "ESU")); // Spanish (Puerto Rico)
+			cultureData.Add(0x0029, new CultureCodeInfo("fa", "fa", "fas", "FAR")); // Farsi
+			cultureData.Add(0x3c0a, new CultureCodeInfo("es-PY", "es", "spa", "ESZ")); // Spanish (Paraguay)
+			cultureData.Add(0x0843, new CultureCodeInfo("uz-UZ-Cyrl", "uz", "uzb", "UZB")); // Uzbek (Cyrillic) (Uzbekistan)
+			cultureData.Add(0x1007, new CultureCodeInfo("de-LU", "de", "deu", "DEL")); // German (Luxembourg)
+			cultureData.Add(0x043e, new CultureCodeInfo("ms-MY", "ms", "msa", "MSL")); // Malay (Malaysia)
+			cultureData.Add(0x040d, new CultureCodeInfo("he-IL", "he", "heb", "HEB")); // Hebrew (Israel)
+			cultureData.Add(0x1407, new CultureCodeInfo("de-LI", "de", "deu", "DEC")); // German (Liechtenstein)
+			cultureData.Add(0x0457, new CultureCodeInfo("kok-IN", "kok", "kok", "KNK")); // Konkani (India)
+			cultureData.Add(0x0002, new CultureCodeInfo("bg", "bg", "bul", "BGR")); // Bulgarian
+			cultureData.Add(0x1401, new CultureCodeInfo("ar-DZ", "ar", "ara", "ARG")); // Arabic (Algeria)
+			cultureData.Add(0x1c01, new CultureCodeInfo("ar-TN", "ar", "ara", "ART")); // Arabic (Tunisia)
+			cultureData.Add(0x3801, new CultureCodeInfo("ar-AE", "ar", "ara", "ARU")); // Arabic (U.A.E.)
+			cultureData.Add(0x0412, new CultureCodeInfo("ko-KR", "ko", "kor", "KOR")); // Korean (Korea)
+			cultureData.Add(0x0425, new CultureCodeInfo("et-EE", "et", "est", "ETI")); // Estonian (Estonia)
+			cultureData.Add(0x0814, new CultureCodeInfo("nn-NO", "nn", "nno", "NON")); // Norwegian (Nynorsk) (Norway)
+			cultureData.Add(0x440a, new CultureCodeInfo("es-SV", "es", "spa", "ESE")); // Spanish (El Salvador)
+			cultureData.Add(0x4001, new CultureCodeInfo("ar-QA", "ar", "ara", "ARQ")); // Arabic (Qatar)
+			cultureData.Add(0x042b, new CultureCodeInfo("hy-AM", "hy", "hye", "HYE")); // Armenian (Armenia)
+			cultureData.Add(0x0426, new CultureCodeInfo("lv-LV", "lv", "lav", "LVI")); // Latvian (Latvia)
+			cultureData.Add(0x0005, new CultureCodeInfo("cs", "cs", "ces", "CSY")); // Czech
+			cultureData.Add(0x0421, new CultureCodeInfo("id-ID", "id", "ind", "IND")); // Indonesian (Indonesia)
+			cultureData.Add(0x340a, new CultureCodeInfo("es-CL", "es", "spa", "ESL")); // Spanish (Chile)
+			cultureData.Add(0x140a, new CultureCodeInfo("es-CR", "es", "spa", "ESC")); // Spanish (Costa Rica)
+			cultureData.Add(0x004f, new CultureCodeInfo("sa", "sa", "san", "SAN")); // Sanskrit
+			cultureData.Add(0x0003, new CultureCodeInfo("ca", "ca", "cat", "CAT")); // Catalan
+			cultureData.Add(0x2809, new CultureCodeInfo("en-BZ", "en", "eng", "ENL")); // English (Belize)
+			cultureData.Add(0x0409, new CultureCodeInfo("en-US", "en", "eng", "ENU")); // English (United States)
+			cultureData.Add(0x3c01, new CultureCodeInfo("ar-BH", "ar", "ara", "ARH")); // Arabic (Bahrain)
+			cultureData.Add(0x007f, new CultureCodeInfo("", "iv", "IVL", "IVL")); // Invariant Language (Invariant Country)
+			cultureData.Add(0x001c, new CultureCodeInfo("sq", "sq", "sqi", "SQI")); // Albanian
+			cultureData.Add(0x0444, new CultureCodeInfo("tt-RU", "tt", "tat", "TTT")); // Tatar (Russia)
+			cultureData.Add(0x200a, new CultureCodeInfo("es-VE", "es", "spa", "ESV")); // Spanish (Venezuela)
+			cultureData.Add(0x001d, new CultureCodeInfo("sv", "sv", "swe", "SVE")); // Swedish
+			cultureData.Add(0x044b, new CultureCodeInfo("kn-IN", "kn", "kan", "KAN")); // Kannada (India)
+			cultureData.Add(0x0015, new CultureCodeInfo("pl", "pl", "pol", "PLK")); // Polish
+			cultureData.Add(0x041f, new CultureCodeInfo("tr-TR", "tr", "tur", "TRK")); // Turkish (Turkey)
+			cultureData.Add(0x0439, new CultureCodeInfo("hi-IN", "hi", "hin", "HIN")); // Hindi (India)
+			cultureData.Add(0x0046, new CultureCodeInfo("pa", "pa", "pan", "PAN")); // Punjabi
+			cultureData.Add(0x0429, new CultureCodeInfo("fa-IR", "fa", "fas", "FAR")); // Farsi (Iran)
+			cultureData.Add(0x003e, new CultureCodeInfo("ms", "ms", "msa", "MSL")); // Malay
+			cultureData.Add(0x004e, new CultureCodeInfo("mr", "mr", "mar", "MAR")); // Marathi
+			cultureData.Add(0x0016, new CultureCodeInfo("pt", "pt", "por", "PTB")); // Portuguese
+			cultureData.Add(0x002a, new CultureCodeInfo("vi", "vi", "vie", "VIT")); // Vietnamese
+			cultureData.Add(0x0418, new CultureCodeInfo("ro-RO", "ro", "ron", "ROM")); // Romanian (Romania)
+			cultureData.Add(0x081d, new CultureCodeInfo("sv-FI", "sv", "swe", "SVF")); // Swedish (Finland)
+			cultureData.Add(0x0406, new CultureCodeInfo("da-DK", "da", "dan", "DAN")); // Danish (Denmark)
+			cultureData.Add(0x180a, new CultureCodeInfo("es-PA", "es", "spa", "ESA")); // Spanish (Panama)
+			cultureData.Add(0x0050, new CultureCodeInfo("mn", "mn", "mon", "MON")); // Mongolian
+			cultureData.Add(0x002f, new CultureCodeInfo("mk", "mk", "mkd", "MKI")); // FYRO Macedonian
+			cultureData.Add(0x041d, new CultureCodeInfo("sv-SE", "sv", "swe", "SVE")); // Swedish (Sweden)
+			cultureData.Add(0x0038, new CultureCodeInfo("fo", "fo", "fao", "FOS")); // Faeroese
+			cultureData.Add(0x0447, new CultureCodeInfo("gu-IN", "gu", "guj", "GUJ")); // Gujarati (India)
+			cultureData.Add(0x042d, new CultureCodeInfo("eu-ES", "eu", "eus", "EUQ")); // Basque (Basque)
+			cultureData.Add(0x0446, new CultureCodeInfo("pa-IN", "pa", "pan", "PAN")); // Punjabi (India)
+			cultureData.Add(0x1c0a, new CultureCodeInfo("es-DO", "es", "spa", "ESD")); // Spanish (Dominican Republic)
+			cultureData.Add(0x041b, new CultureCodeInfo("sk-SK", "sk", "slk", "SKY")); // Slovak (Slovakia)
+			cultureData.Add(0x0411, new CultureCodeInfo("ja-JP", "ja", "jpn", "JPN")); // Japanese (Japan)
+			cultureData.Add(0x1404, new CultureCodeInfo("zh-MO", "zh", "zho", "ZHM")); // Chinese (Macau S.A.R.)
+			cultureData.Add(0x041a, new CultureCodeInfo("hr-HR", "hr", "hrv", "HRV")); // Croatian (Croatia)
+			cultureData.Add(0x045a, new CultureCodeInfo("syr-SY", "syr", "syr", "SYR")); // Syriac (Syria)
+			cultureData.Add(0x0018, new CultureCodeInfo("ro", "ro", "ron", "ROM")); // Romanian
+			cultureData.Add(0x0419, new CultureCodeInfo("ru-RU", "ru", "rus", "RUS")); // Russian (Russia)
+			cultureData.Add(0x1801, new CultureCodeInfo("ar-MA", "ar", "ara", "ARM")); // Arabic (Morocco)
+			cultureData.Add(0x0424, new CultureCodeInfo("sl-SI", "sl", "slv", "SLV")); // Slovenian (Slovenia)
+			cultureData.Add(0x0023, new CultureCodeInfo("be", "be", "bel", "BEL")); // Belarusian
+			cultureData.Add(0x2c09, new CultureCodeInfo("en-TT", "en", "eng", "ENT")); // English (Trinidad and Tobago)
+			cultureData.Add(0x0440, new CultureCodeInfo("ky-KZ", "ky", "kir", "KYR")); // Kyrgyz (Kyrgyzstan)
+			cultureData.Add(0x0c09, new CultureCodeInfo("en-AU", "en", "eng", "ENA")); // English (Australia)
+			cultureData.Add(0x0019, new CultureCodeInfo("ru", "ru", "rus", "RUS")); // Russian
+			cultureData.Add(0x004b, new CultureCodeInfo("kn", "kn", "kan", "KAN")); // Kannada
+			cultureData.Add(0x0047, new CultureCodeInfo("gu", "gu", "guj", "GUJ")); // Gujarati
+			cultureData.Add(0x040e, new CultureCodeInfo("hu-HU", "hu", "hun", "HUN")); // Hungarian (Hungary)
+			cultureData.Add(0x0813, new CultureCodeInfo("nl-BE", "nl", "nld", "NLB")); // Dutch (Belgium)
+			cultureData.Add(0x100a, new CultureCodeInfo("es-GT", "es", "spa", "ESG")); // Spanish (Guatemala)
+			cultureData.Add(0x0056, new CultureCodeInfo("gl", "gl", "glg", "GLC")); // Galician
+			cultureData.Add(0x082c, new CultureCodeInfo("az-AZ-Cyrl", "az", "aze", "AZE")); // Azeri (Cyrillic) (Azerbaijan)
+			cultureData.Add(0x042c, new CultureCodeInfo("az-AZ-Latn", "az", "aze", "AZE")); // Azeri (Latin) (Azerbaijan)
+			cultureData.Add(0x0403, new CultureCodeInfo("ca-ES", "ca", "cat", "CAT")); // Catalan (Catalan)
+			cultureData.Add(0x0414, new CultureCodeInfo("nb-NO", "nb", "nob", "NOR")); // Norwegian (Bokml) (Norway)
+			cultureData.Add(0x0422, new CultureCodeInfo("uk-UA", "uk", "ukr", "UKR")); // Ukrainian (Ukraine)
+			cultureData.Add(0x040b, new CultureCodeInfo("fi-FI", "fi", "fin", "FIN")); // Finnish (Finland)
+			cultureData.Add(0x0012, new CultureCodeInfo("ko", "ko", "kor", "KOR")); // Korean
+			cultureData.Add(0x1004, new CultureCodeInfo("zh-SG", "zh", "zho", "ZHI")); // Chinese (Singapore)
+			cultureData.Add(0x0c0c, new CultureCodeInfo("fr-CA", "fr", "fra", "FRC")); // French (Canada)
+			cultureData.Add(0x001e, new CultureCodeInfo("th", "th", "tha", "THA")); // Thai
+			cultureData.Add(0x0804, new CultureCodeInfo("zh-CN", "zh", "zho", "CHS")); // Chinese (People's Republic of China)
+			cultureData.Add(0x004a, new CultureCodeInfo("te", "te", "tel", "TEL")); // Telugu
+			cultureData.Add(0x2801, new CultureCodeInfo("ar-SY", "ar", "ara", "ARS")); // Arabic (Syria)
+			cultureData.Add(0x0049, new CultureCodeInfo("ta", "ta", "tam", "TAM")); // Tamil
+			cultureData.Add(0x0436, new CultureCodeInfo("af-ZA", "af", "afr", "AFK")); // Afrikaans (South Africa)
+			cultureData.Add(0x0007, new CultureCodeInfo("de", "de", "deu", "DEU")); // German
+			cultureData.Add(0x0816, new CultureCodeInfo("pt-PT", "pt", "por", "PTG")); // Portuguese (Portugal)
+			cultureData.Add(0x0402, new CultureCodeInfo("bg-BG", "bg", "bul", "BGR")); // Bulgarian (Bulgaria)
+			cultureData.Add(0x0006, new CultureCodeInfo("da", "da", "dan", "DAN")); // Danish
+			cultureData.Add(0x002c, new CultureCodeInfo("az", "az", "aze", "AZE")); // Azeri
+			cultureData.Add(0x0044, new CultureCodeInfo("tt", "tt", "tat", "TTT")); // Tatar
+			cultureData.Add(0x001f, new CultureCodeInfo("tr", "tr", "tur", "TRK")); // Turkish
+			cultureData.Add(0x041c, new CultureCodeInfo("sq-AL", "sq", "sqi", "SQI")); // Albanian (Albania)
+			cultureData.Add(0x0001, new CultureCodeInfo("ar", "ar", "ara", "ARA")); // Arabic
+			cultureData.Add(0x0401, new CultureCodeInfo("ar-SA", "ar", "ara", "ARA")); // Arabic (Saudi Arabia)
+			cultureData.Add(0x0423, new CultureCodeInfo("be-BY", "be", "bel", "BEL")); // Belarusian (Belarus)
+			cultureData.Add(0x0443, new CultureCodeInfo("uz-UZ-Latn", "uz", "uzb", "UZB")); // Uzbek (Latin) (Uzbekistan)
+			cultureData.Add(0x080c, new CultureCodeInfo("fr-BE", "fr", "fra", "FRB")); // French (Belgium)
+			cultureData.Add(0x080a, new CultureCodeInfo("es-MX", "es", "spa", "ESM")); // Spanish (Mexico)
+			cultureData.Add(0x0809, new CultureCodeInfo("en-GB", "en", "eng", "ENG")); // English (United Kingdom)
+			cultureData.Add(0x400a, new CultureCodeInfo("es-BO", "es", "spa", "ESB")); // Spanish (Bolivia)
+			cultureData.Add(0x044a, new CultureCodeInfo("te-IN", "te", "tel", "TEL")); // Telugu (India)
+			cultureData.Add(0x0807, new CultureCodeInfo("de-CH", "de", "deu", "DES")); // German (Switzerland)
+			cultureData.Add(0x3001, new CultureCodeInfo("ar-LB", "ar", "ara", "ARB")); // Arabic (Lebanon)
+			cultureData.Add(0x0410, new CultureCodeInfo("it-IT", "it", "ita", "ITA")); // Italian (Italy)
+			cultureData.Add(0x0036, new CultureCodeInfo("af", "af", "afr", "AFK")); // Afrikaans
+			cultureData.Add(0x1001, new CultureCodeInfo("ar-LY", "ar", "ara", "ARL")); // Arabic (Libya)
+			cultureData.Add(0x480a, new CultureCodeInfo("es-HN", "es", "spa", "ESH")); // Spanish (Honduras)
+			cultureData.Add(0x040f, new CultureCodeInfo("is-IS", "is", "isl", "ISL")); // Icelandic (Iceland)
+			cultureData.Add(0x000c, new CultureCodeInfo("fr", "fr", "fra", "FRA")); // French
+			cultureData.Add(0x180c, new CultureCodeInfo("fr-MC", "fr", "fra", "FRM")); // French (Principality of Monaco)
+			cultureData.Add(0x0407, new CultureCodeInfo("de-DE", "de", "deu", "DEU")); // German (Germany)
+			cultureData.Add(0x000b, new CultureCodeInfo("fi", "fi", "fin", "FIN")); // Finnish
+			cultureData.Add(0x7c04, new CultureCodeInfo("zh-CHT", "zh", "zho", "CHT")); // Chinese (Traditional)
+			cultureData.Add(0x0004, new CultureCodeInfo("zh-CHS", "zh", "zho", "CHS")); // Chinese (Simplified)
+			cultureData.Add(0x042a, new CultureCodeInfo("vi-VN", "vi", "vie", "VIT")); // Vietnamese (Viet Nam)
+			cultureData.Add(0x2401, new CultureCodeInfo("ar-YE", "ar", "ara", "ARY")); // Arabic (Yemen)
+			cultureData.Add(0x0810, new CultureCodeInfo("it-CH", "it", "ita", "ITS")); // Italian (Switzerland)
+			cultureData.Add(0x0c04, new CultureCodeInfo("zh-HK", "zh", "zho", "ZHH")); // Chinese (Hong Kong S.A.R.)
+			cultureData.Add(0x0801, new CultureCodeInfo("ar-IQ", "ar", "ara", "ARI")); // Arabic (Iraq)
+			cultureData.Add(0x0040, new CultureCodeInfo("ky", "kz", "kir", "KYR")); // Kyrgyz
+			cultureData.Add(0x2c01, new CultureCodeInfo("ar-JO", "ar", "ara", "ARJ")); // Arabic (Jordan)
+			cultureData.Add(0x0413, new CultureCodeInfo("nl-NL", "nl", "nld", "NLD")); // Dutch (Netherlands)
+			cultureData.Add(0x0037, new CultureCodeInfo("ka", "ka", "kat", "KAT")); // Georgian
+			cultureData.Add(0x140c, new CultureCodeInfo("fr-LU", "fr", "fra", "FRL")); // French (Luxembourg)
+			cultureData.Add(0x0465, new CultureCodeInfo("div-MV", "div", "div", "DIV")); // Divehi (Maldives)
+			cultureData.Add(0x003f, new CultureCodeInfo("kk", "kk", "kaz", "KKZ")); // Kazakh
+			cultureData.Add(0x4c0a, new CultureCodeInfo("es-NI", "es", "spa", "ESI")); // Spanish (Nicaragua)
+			cultureData.Add(0x280a, new CultureCodeInfo("es-PE", "es", "spa", "ESR")); // Spanish (Peru)
+			cultureData.Add(0x0416, new CultureCodeInfo("pt-BR", "pt", "por", "PTB")); // Portuguese (Brazil)
+			cultureData.Add(0x001a, new CultureCodeInfo("hr", "hr", "hrv", "HRV")); // Croatian
+			cultureData.Add(0x1409, new CultureCodeInfo("en-NZ", "en", "eng", "ENZ")); // English (New Zealand)
+			cultureData.Add(0x005a, new CultureCodeInfo("syr", "syr", "syr", "SYR")); // Syriac
+			cultureData.Add(0x000e, new CultureCodeInfo("hu", "hu", "hun", "HUN")); // Hungarian
+			cultureData.Add(0x0438, new CultureCodeInfo("fo-FO", "fo", "fao", "FOS")); // Faroese (Faroe Islands)
+			cultureData.Add(0x002b, new CultureCodeInfo("hy", "hy", "hye", "HYE")); // Armenian
+			cultureData.Add(0x2001, new CultureCodeInfo("ar-OM", "ar", "ara", "ARO")); // Arabic (Oman)
+			cultureData.Add(0x0057, new CultureCodeInfo("kok", "hi", "kok", "KNK")); // Konkani
+			cultureData.Add(0x240a, new CultureCodeInfo("es-CO", "es", "spa", "ESO")); // Spanish (Colombia)
+			cultureData.Add(0x044f, new CultureCodeInfo("sa-IN", "sa", "san", "SAN")); // Sanskrit (India)
+			cultureData.Add(0x000d, new CultureCodeInfo("he", "he", "heb", "HEB")); // Hebrew
+			cultureData.Add(0x0449, new CultureCodeInfo("ta-IN", "ta", "tam", "TAM")); // Tamil (India)
+			cultureData.Add(0x0415, new CultureCodeInfo("pl-PL", "pl", "pol", "PLK")); // Polish (Poland)
+			cultureData.Add(0x0039, new CultureCodeInfo("hi", "hi", "hin", "HIN")); // Hindi
+			cultureData.Add(0x002d, new CultureCodeInfo("eu", "eu", "eus", "EUQ")); // Basque
+			cultureData.Add(0x0025, new CultureCodeInfo("et", "et", "est", "ETI")); // Estonian
+			cultureData.Add(0x000a, new CultureCodeInfo("es", "es", "spa", "ESP")); // Spanish
+			cultureData.Add(0x0022, new CultureCodeInfo("uk", "uk", "ukr", "UKR")); // Ukrainian
+			cultureData.Add(0x0009, new CultureCodeInfo("en", "en", "eng", "ENU")); // English
+			cultureData.Add(0x0008, new CultureCodeInfo("el", "el", "ell", "ELL")); // Greek
+			cultureData.Add(0x2409, new CultureCodeInfo("en-CB", "en", "eng", "ENB")); // English (Caribbean)
+			cultureData.Add(0x1009, new CultureCodeInfo("en-CA", "en", "eng", "ENC")); // English (Canada)
+			cultureData.Add(0x2c0a, new CultureCodeInfo("es-AR", "es", "spa", "ESS")); // Spanish (Argentina)
+			cultureData.Add(0x0043, new CultureCodeInfo("uz", "uz", "uzb", "UZB")); // Uzbek
+			cultureData.Add(0x044e, new CultureCodeInfo("mr-IN", "mr", "mar", "MAR")); // Marathi (India)
+			cultureData.Add(0x040c, new CultureCodeInfo("fr-FR", "fr", "fra", "FRA")); // French (France)
+			cultureData.Add(0x0020, new CultureCodeInfo("ur", "ur", "urd", "URD")); // Urdu
+			cultureData.Add(0x0013, new CultureCodeInfo("nl", "nl", "nld", "NLD")); // Dutch
+			cultureData.Add(0x0014, new CultureCodeInfo("no", "no", "nor", "NOR")); // Norwegian
+			cultureData.Add(0x001b, new CultureCodeInfo("sk", "sk", "slk", "SKY")); // Slovak
+			cultureData.Add(0x0024, new CultureCodeInfo("sl", "sl", "slv", "SLV")); // Slovenian
+			cultureData.Add(0x0c01, new CultureCodeInfo("ar-EG", "ar", "ara", "ARE")); // Arabic (Egypt)
 		}
 
 		[MonoTODO]
@@ -966,6 +584,9 @@
 		{
 			get {
 				return("");
+				// FIXME: Localize the name of the culture using its own culture.
+				// ResourceManager resMan = new ResourceManager("cultureNames", Assembly.GetDeclaringAssembly());
+				// resMan.GetString(Name, this);
 			}
 		}
 		
@@ -984,11 +605,24 @@
 			}
 		}
 
-		[MonoTODO]
 		public virtual CultureInfo Parent
 		{
 			get {
-				return(CultureInfo.InvariantCulture);
+				// Parent of all neutral cultures is the Invariant Culture
+				if (IsIDNeutralCulture (lcid)) {
+					return CultureInfo.InvariantCulture;
+				}
+				
+				switch (lcid)
+				{
+					// The Chinese case is special - unit tests ensure this condition holds.
+					case 0x0404:
+					case 0x0c04:
+						return new CultureInfo (0x7c04);
+					// Return the neutral "parent" culture of this non-Chinese, non-special culture.
+					default:
+						return new CultureInfo (lcid & 0xff);
+				}
 			}
 		}
 
@@ -1002,27 +636,33 @@
 			}
 		}
 
-		[MonoTODO]
 		public virtual string ThreeLetterISOLanguageName
 		{
 			get {
-				return("");
+				CultureCodeInfo nameInfo = (CultureCodeInfo) cultureData[lcid];
+				if (nameInfo == null)
+					throw new Exception ("Miss constructed object for LCID: " + lcid);
+				return nameInfo.threeLetterISO;
 			}
 		}
 
-		[MonoTODO]
 		public virtual string ThreeLetterWindowsLanguageName
 		{
 			get {
-				return("");
+				CultureCodeInfo nameInfo = (CultureCodeInfo) cultureData[lcid];
+				if (nameInfo == null)
+					throw new Exception ("Miss constructed object for LCID: " + lcid);
+				return nameInfo.threeLetterWin;
 			}
 		}
 
-		[MonoTODO]
 		public virtual string TwoLetterISOLanguageName
 		{
 			get {
-				return("");
+				CultureCodeInfo nameInfo = (CultureCodeInfo) cultureData[lcid];
+				if (nameInfo == null)
+					throw new Exception ("Miss constructed object for LCID: " + lcid);
+				return nameInfo.twoLetter;
 			}
 		}
 
@@ -1063,14 +703,15 @@
 			return lcid;
 		}
 
-		[MonoTODO]
 		public static CultureInfo ReadOnly(CultureInfo ci)
 		{
 			if(ci==null) {
-				throw new ArgumentNullException("CultureInfo is null");
+				throw new ArgumentNullException ("CultureInfo is null");
 			}
+			CultureInfo roInfo = new CultureInfo (ci.LCID);
+			roInfo.is_read_only = true;
 			
-			return(null);
+			return roInfo;
 		}
 
 		public override string ToString()
@@ -1157,6 +798,9 @@
 		{
 			get {
 				return("");
+				// FIXME: This should be localized to the user/system's current culture
+				// ResourceManager resMan = new ResourceManager("cultureNames", Assembly.GetDeclaringAssembly());
+				// resMan.GetString(Name);
 			}
 		}
 
@@ -1165,6 +809,9 @@
 		{
 			get {
 				return("");
+				// FIXME: This should return a non localized name
+				// ResourceManager resMan = new ResourceManager("cultureNames", Assembly.GetDeclaringAssembly());
+				// resMan.GetString(Name, CultureInfo.InvariantCulture);
 			}
 		}
 
@@ -1224,3 +871,4 @@
 		public CultureInfo (string name) : this (name, false) {} 
 	}
 }
+
