Index: Test/System.Web/HttpRequestTest.cs
===================================================================
--- Test/System.Web/HttpRequestTest.cs	(revision 61128)
+++ Test/System.Web/HttpRequestTest.cs	(working copy)
@@ -129,7 +129,18 @@
 			HttpRequest r = new HttpRequest ("file", url, qs);
 			string s = r.PhysicalApplicationPath;
 		}
+	
+		[Test]
+		public void Test_QueryStringDecoding()
+		{
+			string url = "http://www.gnome.org/";
+			string qs = "umlaut=" + HttpUtility.UrlEncode("\u00e4", Encoding.Default);
+
+			HttpRequest r = new HttpRequest ("file", url, qs);
+			Assert.AreEqual("\u00e4", r.QueryString["umlaut"]);
+		}	
 	}
+	
 
 	[TestFixture]
 	public class Test_HttpFakeRequest {
Index: System.Web/HttpRequest.cs
===================================================================
--- System.Web/HttpRequest.cs	(revision 61128)
+++ System.Web/HttpRequest.cs	(working copy)
@@ -48,11 +48,11 @@
 	public sealed class HttpRequest {
 		HttpWorkerRequest worker_request;
 		HttpContext context;
-		WebROCollection query_string_nvc;
+		WebROCollection query_string;
 
 		//
-		string filename, query_string;
-		UriBuilder uri_builder;
+		string filename;
+		UriBuilder url_components;
 
 		string client_target;
 
@@ -60,7 +60,7 @@
 		// On-demand computed values
 		//
 		HttpBrowserCapabilities browser_capabilities;
-		string file_path, base_virtual_dir, root_virtual_dir;
+		string file_path, base_virtual_dir;
 		string content_type;
 		int content_length = -1;
 		Encoding encoding;
@@ -94,31 +94,39 @@
 		public HttpRequest (string filename, string url, string queryString)
 		{
 			// warning 169: what are we supposed to do with filename?
-			
 			this.filename = filename;
 
-			uri_builder = new UriBuilder (url);
-			query_string = queryString;
+			url_components = new UriBuilder (url);
+			url_components.Query = queryString;
+			
+			query_string = new WebROCollection ();					
+			HttpUtility.ParseQueryString (queryString, Encoding.Default, query_string);
+			query_string.Protect ();
 		}
 
-		void InitUriBuilder ()
-		{
-			uri_builder = new UriBuilder ();
-			uri_builder.Scheme = worker_request.GetProtocol ();
-			uri_builder.Host = worker_request.GetServerName ();
-			int port = worker_request.GetLocalPort ();
-			uri_builder.Port = port;
-			uri_builder.Path = worker_request.GetUriPath ();
-			if (query_string != null && query_string != "")
-				uri_builder.Query = query_string;
+		UriBuilder UrlComponents {
+			get {
+				if (url_components == null) {
+					url_components = new UriBuilder ();
+					url_components.Scheme = worker_request.GetProtocol ();
+					url_components.Host = worker_request.GetServerName ();
+					url_components.Port = worker_request.GetLocalPort ();
+					url_components.Path = worker_request.GetUriPath ();
+					
+					byte[] queryStringRaw = worker_request.GetQueryStringRawBytes();
+					if(queryStringRaw != null)
+						url_components.Query = ContentEncoding.GetString(queryStringRaw);
+					else
+						url_components.Query = worker_request.GetQueryString();
+				}
+				return url_components;
+			}
 		}
 		
 		internal HttpRequest (HttpWorkerRequest worker_request, HttpContext context)
 		{
 			this.worker_request = worker_request;
 			this.context = context;
-			if (worker_request != null)
-				query_string = worker_request.GetQueryString ();
 		}
 
 		string [] SplitHeader (int header_index)
@@ -878,10 +886,7 @@
 
 		public string Path {
 			get {
-				if (uri_builder == null)
-					InitUriBuilder ();
-				
-				return uri_builder.Path;
+				return UrlComponents.Path;
 			}
 		}
 
@@ -927,52 +932,32 @@
 
 		internal string RootVirtualDir {
 			get {
-				if (root_virtual_dir == null){
-					string fp = FilePath;
-					int p = fp.LastIndexOf ('/');
-
-					if (p == -1)
-						root_virtual_dir = "/";
-					else
-						root_virtual_dir = fp.Substring (0, p);
-				}
-
-				return root_virtual_dir;
-			}
+				string dir = BaseVirtualDir;
+				if (dir.LastIndexOf ('/') == -1)
+					return "/";
+				else
+					return dir;
+			}	
 		}
 
 		public NameValueCollection QueryString {
 			get {
-				if (query_string_nvc == null){
-					query_string_nvc = new WebROCollection ();
+				if (query_string == null){
+					string q = UrlComponents.Query;
+					if (q.Length != 0)
+						q = q.Remove(0, 1);
 
-					if (uri_builder == null)
-						InitUriBuilder ();
-					
-					string q = query_string;
-					if (q != null && q != ""){
-						string [] components = q.Split ('&');
-						foreach (string kv in components){
-							int pos = kv.IndexOf ('=');
-							if (pos == -1){
-								query_string_nvc.Add (null, HttpUtility.UrlDecode (kv));
-							} else {
-								string key = HttpUtility.UrlDecode (kv.Substring (0, pos));
-								string val = HttpUtility.UrlDecode (kv.Substring (pos+1));
-								
-								query_string_nvc.Add (key, val);
-							}
-						}
-					}
-					query_string_nvc.Protect ();
+					query_string = new WebROCollection ();					
+					HttpUtility.ParseQueryString (q, ContentEncoding, query_string);
+					query_string.Protect();
 				}
 				
 				if (validate_query_string && !checked_query_string) {
-					ValidateNameValueCollection ("QueryString", query_string_nvc);
+					ValidateNameValueCollection ("QueryString", query_string);
 					checked_query_string = true;
 				}
 				
-				return query_string_nvc;
+				return query_string;
 			}
 		}
 
@@ -980,12 +965,8 @@
 			get {
 				if (worker_request != null)
 					return worker_request.GetRawUrl ();
-				else {
-					if (query_string != null && query_string != "")
-						return uri_builder.Path + "?" + query_string;
-					else
-						return uri_builder.Path;
-				}
+				else
+					return UrlComponents.Path + UrlComponents.Query;
 			}
 		}
 
@@ -1029,14 +1010,10 @@
 
 		public Uri Url {
 			get {
-				if (uri_builder == null)
-					InitUriBuilder ();
-				
-				if (cached_url == null) {
-					UriBuilder builder = new UriBuilder (uri_builder.Uri);
-					cached_url = builder.Uri;
-				}
-				return cached_url;
+				if (cached_url == null)
+					cached_url = UrlComponents.Uri;
+
+				return cached_url;			
 			}
 		}
 
@@ -1185,12 +1162,9 @@
 				string path = "/";
 				if (worker_request != null) {
 					version = worker_request.GetHttpVersion ();
-					InitUriBuilder ();
-					path = uri_builder.Path;
+					path = UrlComponents.Path;
 				}
-				string qs = null;
-				if (query_string != null && query_string != "")
-					qs = "?" + query_string;
+				string qs = UrlComponents.Query;
 
 				sb.AppendFormat ("{0} {1}{2} {3}\r\n", HttpMethod, path, qs, version);
 				NameValueCollection coll = Headers;
@@ -1261,19 +1235,16 @@
 			file_path = path;
 		}
 
-                internal void SetCurrentExePath (string path)
-                {
+		internal void SetCurrentExePath (string path)
+		{
 			cached_url = null;
 			current_exe_path = path;
 			file_path = path;
-			if (uri_builder == null)
-				InitUriBuilder ();
-			uri_builder.Path = path;
+			UrlComponents.Path = path;
 			// recreated on demand
-			root_virtual_dir = null;
 			base_virtual_dir = null;
 			physical_path = null;
-                }
+		}
 
 		internal void SetPathInfo (string pi)
 		{
@@ -1293,20 +1264,13 @@
 		// Notice: there is nothing raw about this querystring.
 		internal string QueryStringRaw {
 			get {
-				if (uri_builder == null)
-					InitUriBuilder ();
-				
-				return query_string;
+				return UrlComponents.Query;
 			}
 
 			set {
-				if (uri_builder == null)
-					InitUriBuilder ();
-
-				query_string = value;
-				query_string_nvc = null;
-				if (uri_builder != null)
-					uri_builder.Query = value;
+				UrlComponents.Query = value;
+				cached_url = null;
+				query_string = null;
 			}
 		}
 
Index: System.Web/HttpUtility.cs
===================================================================
--- System.Web/HttpUtility.cs	(revision 61128)
+++ System.Web/HttpUtility.cs	(working copy)
@@ -965,7 +965,7 @@
 #if NET_2_0
 		public static NameValueCollection ParseQueryString (string query)
 		{
-			return ParseQueryString (query, Encoding.UTF8);
+			return ParseQueryString (query, Encoding.Default);
 		}
 
 		public static NameValueCollection ParseQueryString (string query, Encoding encoding)
@@ -978,41 +978,30 @@
 				return new NameValueCollection ();
 			if (query[0] == '?')
 				query = query.Substring (1);
+				
+			NameValueCollection result = new NameValueCollection ();
+			ParseQueryString (query, encoding, result);
+			return result; 
+		}
+#endif
 
-			int namePos = 0;
-			NameValueCollection collection = new NameValueCollection ();
-			while (namePos <= query.Length) {
-				int valuePos = -1, valueEnd = -1;
-				for (int q = namePos; q < query.Length; q++) {
-					if (valuePos == -1 && query[q] == '=') {
-						valuePos = q + 1;
-					} else if (query[q] == '&') {
-						valueEnd = q;
-						break;
+		internal static void ParseQueryString (string query, Encoding encoding, NameValueCollection result)
+		{
+			if (query.Length != 0) {
+				string [] components = query.Split ('&');
+				foreach (string kv in components){
+					int pos = kv.IndexOf ('=');
+					if (pos == -1) {
+						result.Add (null, HttpUtility.UrlDecode (kv, encoding));
+					} else {
+						string key = HttpUtility.UrlDecode (kv.Substring (0, pos), encoding);
+						string val = HttpUtility.UrlDecode (kv.Substring (pos+1), encoding);
+						
+						result.Add (key, val);
 					}
 				}
-
-				string name, value;
-				if (valuePos == -1) {
-					name = null;
-					valuePos = namePos;
-				} else {
-					name = System.Web.HttpUtility.UrlDecode (query.Substring (namePos, valuePos - namePos - 1), encoding);
-				}
-				if (valueEnd < 0) {
-					namePos = -1;
-					valueEnd = query.Length;
-				} else {
-					namePos = valueEnd + 1;
-				}
-				value = System.Web.HttpUtility.UrlDecode (query.Substring (valuePos, valueEnd - valuePos), encoding);
-
-				collection.Add (name, value);
-				if (namePos == -1) break;
 			}
-			return collection;
 		}
-#endif
 		#endregion // Methods
 	}
 }
