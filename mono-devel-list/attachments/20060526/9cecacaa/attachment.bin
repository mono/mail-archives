Index: Test/System.Web/HttpRequestTest.cs
===================================================================
--- Test/System.Web/HttpRequestTest.cs	(revision 61128)
+++ Test/System.Web/HttpRequestTest.cs	(working copy)
@@ -129,7 +129,18 @@
 			HttpRequest r = new HttpRequest ("file", url, qs);
 			string s = r.PhysicalApplicationPath;
 		}
+	
+		[Test]
+		public void Test_QueryStringDecoding()
+		{
+			string url = "http://www.gnome.org/";
+			string qs = "umlaut=" + HttpUtility.UrlEncode("\u00e4", Encoding.Default);
+
+			HttpRequest r = new HttpRequest ("file", url, qs);
+			Assert.AreEqual("\u00e4", r.QueryString["umlaut"]);
+		}	
 	}
+	
 
 	[TestFixture]
 	public class Test_HttpFakeRequest {
Index: System.Web/HttpRequest.cs
===================================================================
--- System.Web/HttpRequest.cs	(revision 61128)
+++ System.Web/HttpRequest.cs	(working copy)
@@ -51,8 +51,8 @@
 		WebROCollection query_string_nvc;
 
 		//
-		string filename, query_string;
-		UriBuilder uri_builder;
+		string filename;
+		UriBuilder url_components;
 
 		string client_target;
 
@@ -60,7 +60,7 @@
 		// On-demand computed values
 		//
 		HttpBrowserCapabilities browser_capabilities;
-		string file_path, base_virtual_dir, root_virtual_dir;
+		string file_path, base_virtual_dir;
 		string content_type;
 		int content_length = -1;
 		Encoding encoding;
@@ -94,31 +94,36 @@
 		public HttpRequest (string filename, string url, string queryString)
 		{
 			// warning 169: what are we supposed to do with filename?
-			
 			this.filename = filename;
 
-			uri_builder = new UriBuilder (url);
-			query_string = queryString;
+			url_components = new UriBuilder (url);
+			url_components.Query = queryString.TrimStart('?');
+			encoding = Encoding.Default;
 		}
 
-		void InitUriBuilder ()
-		{
-			uri_builder = new UriBuilder ();
-			uri_builder.Scheme = worker_request.GetProtocol ();
-			uri_builder.Host = worker_request.GetServerName ();
-			int port = worker_request.GetLocalPort ();
-			uri_builder.Port = port;
-			uri_builder.Path = worker_request.GetUriPath ();
-			if (query_string != null && query_string != "")
-				uri_builder.Query = query_string;
+		UriBuilder UrlComponents {
+			get {
+				if (url_components == null) {
+					url_components = new UriBuilder ();
+					url_components.Scheme = worker_request.GetProtocol ();
+					url_components.Host = worker_request.GetServerName ();
+					url_components.Port = worker_request.GetLocalPort ();
+					url_components.Path = worker_request.GetUriPath ();
+					
+					byte[] queryStringRaw = worker_request.GetQueryStringRawBytes();
+					if(queryStringRaw != null)
+						url_components.Query = ContentEncoding.GetString(queryStringRaw);
+					else
+						url_components.Query = worker_request.GetQueryString();
+				}
+				return url_components;
+			}
 		}
 		
 		internal HttpRequest (HttpWorkerRequest worker_request, HttpContext context)
 		{
 			this.worker_request = worker_request;
 			this.context = context;
-			if (worker_request != null)
-				query_string = worker_request.GetQueryString ();
 		}
 
 		string [] SplitHeader (int header_index)
@@ -878,10 +883,7 @@
 
 		public string Path {
 			get {
-				if (uri_builder == null)
-					InitUriBuilder ();
-				
-				return uri_builder.Path;
+				return UrlComponents.Path;
 			}
 		}
 
@@ -927,18 +929,12 @@
 
 		internal string RootVirtualDir {
 			get {
-				if (root_virtual_dir == null){
-					string fp = FilePath;
-					int p = fp.LastIndexOf ('/');
-
-					if (p == -1)
-						root_virtual_dir = "/";
-					else
-						root_virtual_dir = fp.Substring (0, p);
-				}
-
-				return root_virtual_dir;
-			}
+				string dir = BaseVirtualDir;
+				if (dir.LastIndexOf ('/') == -1)
+					return "/";
+				else
+					return dir;
+			}	
 		}
 
 		public NameValueCollection QueryString {
@@ -946,19 +942,16 @@
 				if (query_string_nvc == null){
 					query_string_nvc = new WebROCollection ();
 
-					if (uri_builder == null)
-						InitUriBuilder ();
-					
-					string q = query_string;
+					string q = UrlComponents.Query.TrimStart('?');
 					if (q != null && q != ""){
 						string [] components = q.Split ('&');
 						foreach (string kv in components){
 							int pos = kv.IndexOf ('=');
 							if (pos == -1){
-								query_string_nvc.Add (null, HttpUtility.UrlDecode (kv));
+								query_string_nvc.Add (null, HttpUtility.UrlDecode (kv, ContentEncoding));
 							} else {
-								string key = HttpUtility.UrlDecode (kv.Substring (0, pos));
-								string val = HttpUtility.UrlDecode (kv.Substring (pos+1));
+								string key = HttpUtility.UrlDecode (kv.Substring (0, pos), ContentEncoding);
+								string val = HttpUtility.UrlDecode (kv.Substring (pos+1), ContentEncoding);
 								
 								query_string_nvc.Add (key, val);
 							}
@@ -980,12 +973,8 @@
 			get {
 				if (worker_request != null)
 					return worker_request.GetRawUrl ();
-				else {
-					if (query_string != null && query_string != "")
-						return uri_builder.Path + "?" + query_string;
-					else
-						return uri_builder.Path;
-				}
+				else
+					return UrlComponents.Path + UrlComponents.Query;
 			}
 		}
 
@@ -1029,14 +1018,10 @@
 
 		public Uri Url {
 			get {
-				if (uri_builder == null)
-					InitUriBuilder ();
-				
-				if (cached_url == null) {
-					UriBuilder builder = new UriBuilder (uri_builder.Uri);
-					cached_url = builder.Uri;
-				}
-				return cached_url;
+				if (cached_url == null)
+					cached_url = UrlComponents.Uri;
+
+				return cached_url;			
 			}
 		}
 
@@ -1185,12 +1170,9 @@
 				string path = "/";
 				if (worker_request != null) {
 					version = worker_request.GetHttpVersion ();
-					InitUriBuilder ();
-					path = uri_builder.Path;
+					path = UrlComponents.Path;
 				}
-				string qs = null;
-				if (query_string != null && query_string != "")
-					qs = "?" + query_string;
+				string qs = UrlComponents.Query;
 
 				sb.AppendFormat ("{0} {1}{2} {3}\r\n", HttpMethod, path, qs, version);
 				NameValueCollection coll = Headers;
@@ -1261,19 +1243,16 @@
 			file_path = path;
 		}
 
-                internal void SetCurrentExePath (string path)
-                {
+		internal void SetCurrentExePath (string path)
+		{
 			cached_url = null;
 			current_exe_path = path;
 			file_path = path;
-			if (uri_builder == null)
-				InitUriBuilder ();
-			uri_builder.Path = path;
+			UrlComponents.Path = path;
 			// recreated on demand
-			root_virtual_dir = null;
 			base_virtual_dir = null;
 			physical_path = null;
-                }
+		}
 
 		internal void SetPathInfo (string pi)
 		{
@@ -1293,20 +1272,13 @@
 		// Notice: there is nothing raw about this querystring.
 		internal string QueryStringRaw {
 			get {
-				if (uri_builder == null)
-					InitUriBuilder ();
-				
-				return query_string;
+				return UrlComponents.Query;
 			}
 
 			set {
-				if (uri_builder == null)
-					InitUriBuilder ();
-
-				query_string = value;
+				UrlComponents.Query = value;
+				cached_url = null;
 				query_string_nvc = null;
-				if (uri_builder != null)
-					uri_builder.Query = value;
 			}
 		}
 
