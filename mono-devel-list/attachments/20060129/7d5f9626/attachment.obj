Index: ExceptionHelper.cs
===================================================================
--- ExceptionHelper.cs	(revision 56048)
+++ ExceptionHelper.cs	(working copy)
@@ -9,187 +9,187 @@
 
 namespace System.Data.Common
 {
-	internal sealed class ExceptionHelper
+	public sealed class ExceptionHelper
 	{	
-		internal static ArgumentException InvalidSizeValue (int value)
+		public static ArgumentException InvalidSizeValue (int value)
 		{
 			string [] args = new string [] {value.ToString ()};
 			return new ArgumentException  (GetExceptionMessage ("Invalid parameter Size value '{0}'. The value must be greater than or equal to 0.",args));
 		}
 
-		internal static ArgumentOutOfRangeException InvalidDataRowVersion (DataRowVersion value)
+		public static ArgumentOutOfRangeException InvalidDataRowVersion (DataRowVersion value)
 		{			
 			object [] args = new object [] { "DataRowVersion", value.ToString () } ;
 			return new ArgumentOutOfRangeException  (GetExceptionMessage ("{0}: Invalid DataRow Version enumeration value: {1}",args));
 		}
 
-		internal static ArgumentOutOfRangeException InvalidParameterDirection (ParameterDirection value)
+		public static ArgumentOutOfRangeException InvalidParameterDirection (ParameterDirection value)
 		{
 			object [] args = new object [] { "ParameterDirection", value.ToString () } ;
 			return new ArgumentOutOfRangeException  (GetExceptionMessage ("Invalid direction '{0}' for '{1}' parameter.",args));
 		}
 
-		internal static InvalidOperationException NoStoredProcedureExists (string procedureName) {
+		public static InvalidOperationException NoStoredProcedureExists (string procedureName) {
 			object [] args = new object [1] { procedureName } ;
 			return new InvalidOperationException  (GetExceptionMessage ("The stored procedure '{0}' doesn't exist.", args));
 		}
 
-		internal static ArgumentNullException ArgumentNull (string parameter)
+		public static ArgumentNullException ArgumentNull (string parameter)
 		{
 			return new ArgumentNullException (parameter);
 		}
 
-		internal static InvalidOperationException TransactionRequired ()
+		public static InvalidOperationException TransactionRequired ()
 		{
 			return new InvalidOperationException  (GetExceptionMessage ("Execute requires the command to have a transaction object when the connection assigned to the command is in a pending local transaction.  The Transaction property of the command has not been initialized."));
 		}
 
-		internal static ArgumentOutOfRangeException InvalidOleDbType (int value)
+		public static ArgumentOutOfRangeException InvalidOleDbType (int value)
 		{
 			string [] args = new string [] { value.ToString() };
 			return new ArgumentOutOfRangeException  (GetExceptionMessage ("Invalid OleDbType enumeration value: {0}",args));
 		}
  
-		internal static ArgumentException InvalidDbType(int value)
+		public static ArgumentException InvalidDbType(int value)
 		{
 			string [] args = new string [] { value.ToString () };
 			return new ArgumentException  (GetExceptionMessage ("No mapping exists from DbType {0} to a known {1}.",args));
 		}
 
-		internal static InvalidOperationException DeriveParametersNotSupported(Type type,CommandType commandType)
+		public static InvalidOperationException DeriveParametersNotSupported(Type type,CommandType commandType)
 		{
 			string [] args = new string [] { type.ToString(),commandType.ToString() };
 			return new InvalidOperationException  (GetExceptionMessage ("{0} DeriveParameters only supports CommandType.StoredProcedure, not CommandType.{1}.",args));
 		}
 
-		internal static InvalidOperationException ReaderClosed (string mehodName)
+		public static InvalidOperationException ReaderClosed (string mehodName)
 		{
 			string [] args = new string [] { mehodName };
 			return new InvalidOperationException  (GetExceptionMessage ("Invalid attempt to {0} when reader is closed.",args));
 		}
 
-		internal static ArgumentOutOfRangeException InvalidSqlDbType (int value)
+		public static ArgumentOutOfRangeException InvalidSqlDbType (int value)
 		{
 			string [] args = new string [] { value.ToString () };
 			return new ArgumentOutOfRangeException  (GetExceptionMessage ("{0}: Invalid SqlDbType enumeration value: {1}.",args));
 		}
 
-		internal static ArgumentException UnknownDataType (string type1, string type2)
+		public static ArgumentException UnknownDataType (string type1, string type2)
 		{
 			string [] args = new string [] { type1, type2 };
 			return new ArgumentException  (GetExceptionMessage ("No mapping exists from DbType {0} to a known {1}.",args));
 		}
 
-		internal static InvalidOperationException TransactionNotInitialized ()
+		public static InvalidOperationException TransactionNotInitialized ()
 		{
 			return new InvalidOperationException  (GetExceptionMessage ("Execute requires the command to have a transaction object when the connection assigned to the command is in a pending local transaction.  The Transaction property of the command has not been initialized."));
 		}
 
-		internal static InvalidOperationException ParametersNotInitialized (int parameterPosition,string parameterName,string parameterType)
+		public static InvalidOperationException ParametersNotInitialized (int parameterPosition,string parameterName,string parameterType)
 		{
 			object [] args = new object [] { parameterPosition, parameterName, parameterType };
 			return new InvalidOperationException  (GetExceptionMessage ("Parameter {0}: '{1}', the property DbType is uninitialized: OleDbType.{2}.",args));
 		}
 
-		internal static InvalidOperationException WrongParameterSize(string provider)
+		public static InvalidOperationException WrongParameterSize(string provider)
 		{
 			string [] args = new string [] { provider };
 			return new InvalidOperationException  (GetExceptionMessage ("{0}.Prepare method requires all variable length parameters to have an explicitly set non-zero Size.",args));
 		}
 
-		internal static InvalidOperationException ConnectionNotOpened (string operationName, string connectionState)
+		public static InvalidOperationException ConnectionNotOpened (string operationName, string connectionState)
 		{
 			object [] args = new object [] { operationName, connectionState };
 			return new InvalidOperationException  (GetExceptionMessage ("{0} requires an open and available Connection. The connection's current state is {1}.",args));
 		}
 
-		internal static InvalidOperationException ConnectionNotInitialized (string methodName)
+		public static InvalidOperationException ConnectionNotInitialized (string methodName)
 		{
 			object [] args = new object [] { methodName };
 			return new InvalidOperationException (GetExceptionMessage ("{0}: Connection property has not been initialized.",args));
 		}
 
-		internal static InvalidOperationException OpenConnectionRequired (string methodName, object connectionState)
+		public static InvalidOperationException OpenConnectionRequired (string methodName, object connectionState)
 		{
 			object [] args = new object [] { methodName, connectionState };
 			return new InvalidOperationException (GetExceptionMessage ("{0} requires an open and available Connection. The connection's current state is {1}.",args));
 		}
 
-		internal static InvalidOperationException OpenedReaderExists ()
+		public static InvalidOperationException OpenedReaderExists ()
 		{
 			return new InvalidOperationException (GetExceptionMessage ("There is already an open DataReader associated with this Connection which must be closed first."));
 		}
 
-		internal static InvalidOperationException ConnectionAlreadyOpen (object connectionState)
+		public static InvalidOperationException ConnectionAlreadyOpen (object connectionState)
 		{
 			object [] args = new object [] { connectionState };
 			return new InvalidOperationException (GetExceptionMessage ("The connection is already Open (state={0}).",args));
 		}
 
-		internal static InvalidOperationException ConnectionStringNotInitialized ()
+		public static InvalidOperationException ConnectionStringNotInitialized ()
 		{
 			return new InvalidOperationException (GetExceptionMessage ("The ConnectionString property has not been initialized."));
 		}
 
-		internal static InvalidOperationException ConnectionIsBusy (object commandType,object connectionState)
+		public static InvalidOperationException ConnectionIsBusy (object commandType,object connectionState)
 		{
 			object [] args = new object [] { commandType.ToString (), connectionState.ToString () };
 			return new InvalidOperationException (GetExceptionMessage ("The {0} is currently busy {1}.",args));
 		}
 
-		internal static InvalidOperationException NotAllowedWhileConnectionOpen (string propertyName, object connectionState)
+		public static InvalidOperationException NotAllowedWhileConnectionOpen (string propertyName, object connectionState)
 		{
 			object [] args = new object [] { propertyName, connectionState };
 			return new InvalidOperationException (GetExceptionMessage ("Not allowed to change the '{0}' property while the connection (state={1}).",args));
 		}
 
-		internal static ArgumentException OleDbNoProviderSpecified ()
+		public static ArgumentException OleDbNoProviderSpecified ()
 		{
 			return new ArgumentException (GetExceptionMessage ("An OLE DB Provider was not specified in the ConnectionString.  An example would be, 'Provider=SQLOLEDB;'."));
 		}
 
-		internal static ArgumentException InvalidValueForKey (string key)
+		public static ArgumentException InvalidValueForKey (string key)
 		{
 			string [] args = new string [] { key };
 			return new ArgumentException (String.Format ("Invalid value for key {0}",args));
 		}
 
-		internal static InvalidOperationException ParameterSizeNotInitialized( int parameterIndex, string parameterName,string parameterType,int parameterSize)
+		public static InvalidOperationException ParameterSizeNotInitialized( int parameterIndex, string parameterName,string parameterType,int parameterSize)
 		{
 			object [] args = new object [] { parameterIndex.ToString (), parameterName, parameterType, parameterSize.ToString () };
 			return new InvalidOperationException (GetExceptionMessage ("Parameter {0}: '{1}' of type: {2}, the property Size has an invalid size: {3}",args));
 		}
 
-		internal static ArgumentException InvalidUpdateStatus (UpdateStatus status)
+		public static ArgumentException InvalidUpdateStatus (UpdateStatus status)
 		{
 			object [] args = new object [] { status };
 			return new ArgumentException (GetExceptionMessage ("Invalid UpdateStatus: {0}",args));
 		}
 
-		internal static InvalidOperationException UpdateRequiresCommand (string command)
+		public static InvalidOperationException UpdateRequiresCommand (string command)
 		{
 			object [] args = new object [] { command };
 			return new InvalidOperationException (GetExceptionMessage ("Auto SQL generation during {0} requires a valid SelectCommand.",args));
 		}
 
-		internal static DataException RowUpdatedError ()
+		public static DataException RowUpdatedError ()
 		{
 			return new DataException (GetExceptionMessage ("RowUpdatedEvent: Errors occurred; no additional is information available."));
 		}
 
-		internal static ArgumentNullException CollectionNoNullsAllowed (object collection, object objectsType)
+		public static ArgumentNullException CollectionNoNullsAllowed (object collection, object objectsType)
 		{
 			object [] args = new object [] {collection.GetType ().ToString (), objectsType.ToString ()};
 			return new ArgumentNullException (GetExceptionMessage ("The {0} only accepts non-null {1} type objects."));
 		}
 
-		internal static ArgumentException CollectionAlreadyContains(object objectType,string propertyName, object propertyValue, object collection)
+		public static ArgumentException CollectionAlreadyContains(object objectType,string propertyName, object propertyValue, object collection)
 		{
 			object [] args = new object [] {objectType.ToString (), propertyName, propertyValue, collection.GetType ().ToString ()};
 			return new ArgumentException (GetExceptionMessage ("The {0} with {1} '{2}' is already contained by this {3}.",args));
 		}
 
-		internal static string GetExceptionMessage (string exceptionMessage,object [] args)
+		public static string GetExceptionMessage (string exceptionMessage,object [] args)
 		{
 			if ((args == null) || (args.Length == 0)) {
 				return exceptionMessage;
@@ -199,7 +199,7 @@
 			}
 		}
 
-		internal static string GetExceptionMessage (string exceptionMessage)
+		public static string GetExceptionMessage (string exceptionMessage)
 		{
 			return GetExceptionMessage (exceptionMessage,null);
 		}
Index: DbTypes.cs
===================================================================
--- DbTypes.cs	(revision 56048)
+++ DbTypes.cs	(working copy)
@@ -2,12 +2,12 @@
 
 namespace System.Data.Common
 {
-	internal class DbTypes
+	public class DbTypes
 	{
 #if TARGET_JVM
 		#region java.sql.Types constants
 
-		internal enum JavaSqlTypes {
+		public enum JavaSqlTypes {
 			ARRAY = 2003 ,
 			BIGINT = -5, 
 			BINARY = -2 ,
@@ -47,29 +47,29 @@
 
 		#region .Net types constants
 
-		internal static readonly Type TypeOfBoolean = typeof(Boolean);
-		internal static readonly Type TypeOfSByte = typeof(SByte);
-		internal static readonly Type TypeOfChar = typeof(Char);
-		internal static readonly Type TypeOfInt16 = typeof(Int16);
-		internal static readonly Type TypeOfInt32 = typeof(Int32);
-		internal static readonly Type TypeOfInt64 = typeof(Int64);
-		internal static readonly Type TypeOfByte = typeof(Byte);
-		internal static readonly Type TypeOfUInt16 = typeof(UInt16);
-		internal static readonly Type TypeOfUInt32 = typeof(UInt32);
-		internal static readonly Type TypeOfUInt64 = typeof(UInt64);
-		internal static readonly Type TypeOfDouble = typeof(Double);
-		internal static readonly Type TypeOfSingle = typeof(Single);
-		internal static readonly Type TypeOfDecimal = typeof(Decimal);
-		internal static readonly Type TypeOfString = typeof(String);
-		internal static readonly Type TypeOfDateTime = typeof(DateTime);		
-		internal static readonly Type TypeOfObject = typeof(object);
-		internal static readonly Type TypeOfGuid = typeof(Guid);
-		internal static readonly Type TypeOfType = typeof(Type);
+		public static readonly Type TypeOfBoolean = typeof(Boolean);
+		public static readonly Type TypeOfSByte = typeof(SByte);
+		public static readonly Type TypeOfChar = typeof(Char);
+		public static readonly Type TypeOfInt16 = typeof(Int16);
+		public static readonly Type TypeOfInt32 = typeof(Int32);
+		public static readonly Type TypeOfInt64 = typeof(Int64);
+		public static readonly Type TypeOfByte = typeof(Byte);
+		public static readonly Type TypeOfUInt16 = typeof(UInt16);
+		public static readonly Type TypeOfUInt32 = typeof(UInt32);
+		public static readonly Type TypeOfUInt64 = typeof(UInt64);
+		public static readonly Type TypeOfDouble = typeof(Double);
+		public static readonly Type TypeOfSingle = typeof(Single);
+		public static readonly Type TypeOfDecimal = typeof(Decimal);
+		public static readonly Type TypeOfString = typeof(String);
+		public static readonly Type TypeOfDateTime = typeof(DateTime);		
+		public static readonly Type TypeOfObject = typeof(object);
+		public static readonly Type TypeOfGuid = typeof(Guid);
+		public static readonly Type TypeOfType = typeof(Type);
 
 		// additional types
-		internal static readonly Type TypeOfByteArray = typeof(Byte[]);
-		internal static readonly Type TypeOfFloat = typeof (float);
-		internal static readonly Type TypeOfTimespan = typeof (TimeSpan);
+		public static readonly Type TypeOfByteArray = typeof(Byte[]);
+		public static readonly Type TypeOfFloat = typeof (float);
+		public static readonly Type TypeOfTimespan = typeof (TimeSpan);
 
 		#endregion // .Net types constants
 	}
