Index: System/System.ComponentModel/CharConverter.cs
===================================================================
--- System/System.ComponentModel/CharConverter.cs	(revision 40542)
+++ System/System.ComponentModel/CharConverter.cs	(working copy)
@@ -45,9 +45,10 @@
 		{
 			if (value.GetType() == typeof (string)) {
 				string Test = (String) value;
-				if (Test.Length != 1)
-				// LAMESPEC: MS does throw FormatException here
-					throw new FormatException ("String has to be exactly one char long");
+				if (Test.Length > 1)
+					throw new FormatException ("String has to be less than or equal to one char long");
+				if (Test.Length == 0)
+					return (char)0x00;
 				return Test[0];
 			}
 			return base.ConvertFrom (context, culture, value);
Index: corlib/System.Resources/ResourceWriter.cs
===================================================================
--- corlib/System.Resources/ResourceWriter.cs	(revision 40542)
+++ corlib/System.Resources/ResourceWriter.cs	(working copy)
@@ -87,9 +87,6 @@
 			if (name == null) {
 				throw new ArgumentNullException ("name is null");
 			}
-			if (value == null) {
-				throw new ArgumentNullException ("value is null");
-			}
 			if(resources==null) {
 				throw new InvalidOperationException ("ResourceWriter has been closed");
 			}
@@ -206,13 +203,6 @@
 			
 			IDictionaryEnumerator res_enum=resources.GetEnumerator();
 			while(res_enum.MoveNext()) {
-				Type type=res_enum.Value.GetType();
-
-				/* Keep a list of unique types */
-				if(!types.Contains(type)) {
-					types.Add(type);
-				}
-
 				/* Hash the name */
 				hashes[count]=GetHash((string)res_enum.Key);
 
@@ -223,6 +213,19 @@
 				res_name.Write((string)res_enum.Key);
 				res_name.Write((int)res_data.BaseStream.Position);
 
+				if (res_enum.Value == null) {
+					Write7BitEncodedInt (res_data, -1);
+					count++;
+					continue;
+				}
+				
+				Type type=res_enum.Value.GetType();
+
+				/* Keep a list of unique types */
+				if(!types.Contains(type)) {
+					types.Add(type);
+				}
+
 				/* Write the data section */
 				Write7BitEncodedInt(res_data, types.IndexOf(type));
 				/* Strangely, Char is serialized
Index: corlib/System.Resources/ResourceReader.cs
===================================================================
--- corlib/System.Resources/ResourceReader.cs	(revision 40542)
+++ corlib/System.Resources/ResourceReader.cs	(working copy)
@@ -241,6 +241,8 @@
 				long data_offset=reader.ReadInt32();
 				reader.BaseStream.Seek(data_offset+dataSectionOffset, SeekOrigin.Begin);
 				int type_index=Read7BitEncodedInt();
+				if (type_index == -1)
+					return null;
 				Type type=types[type_index];
 				
 				if (type==typeof(Byte)) {
Index: Managed.Windows.Forms/System.Resources/ResXResourceReader.cs
===================================================================
--- Managed.Windows.Forms/System.Resources/ResXResourceReader.cs	(revision 40542)
+++ Managed.Windows.Forms/System.Resources/ResXResourceReader.cs	(working copy)
@@ -157,14 +157,12 @@
 					Type tt = t == null ? null : Type.GetType (t);
 
 					if (t != null && tt == null) {
-						// We dont implement all the SWF Converters yet so lets silently reintroduce the broken behaviour for now
-						string s = get_value (reader, "value");
-						if (s != null) {
-							hasht [n] = s;
-						}
-						// throw new SystemException ("The type `" + t +"' could not be resolved");
-					} else 
-
+						throw new SystemException ("The type `" + t +"' could not be resolved");
+					}
+					if (tt == typeof (ResXNullRef)) {
+						hasht [n] = null;
+						continue;
+					}
 					if (n != null) {
 						object v = null;
 						string val = get_value (reader, "value");
@@ -172,16 +170,12 @@
 							TypeConverter c = TypeDescriptor.GetConverter (tt);
 							v = c.ConvertFrom (Convert.FromBase64String (val));
 						} else if (tt != null) {
-							// Some of our converters are broken; lets hide that for now as well
-							try {
-								TypeConverter c = TypeDescriptor.GetConverter (tt);
-								v = c.ConvertFromString (val);
-						 	} catch {}
+							TypeConverter c = TypeDescriptor.GetConverter (tt);
+							v = c.ConvertFromString (val);
 						} else { 
 							v = val;
 						}
-						if (v != null) 
-							hasht [n] = v;
+						hasht [n] = v;
 					}
 				}
 			}
Index: Managed.Windows.Forms/System.Resources/ResXNullRef.cs
===================================================================
--- Managed.Windows.Forms/System.Resources/ResXNullRef.cs	(revision 0)
+++ Managed.Windows.Forms/System.Resources/ResXNullRef.cs	(revision 0)
@@ -0,0 +1,31 @@
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+// Copyright (c) 2005 Novell, Inc.
+//
+// Authors:
+// 	Geoff Norton	gnorton@customerdna.com
+//
+
+namespace System.Resources
+{
+	internal class ResXNullRef
+	{
+	}
+}
\ No newline at end of file
Index: Managed.Windows.Forms/System.Windows.Forms.dll.sources
===================================================================
--- Managed.Windows.Forms/System.Windows.Forms.dll.sources	(revision 40542)
+++ Managed.Windows.Forms/System.Windows.Forms.dll.sources	(working copy)
@@ -1,6 +1,7 @@
 Assembly/AssemblyInfo.cs
 Assembly/Consts.cs
 Assembly/Locale.cs
+System.Resources/ResXNullRef.cs
 System.Resources/ResXResourceReader.cs
 System.Resources/ResXResourceWriter.cs
 System.Windows.Forms.Design/ComponentEditorForm.cs
