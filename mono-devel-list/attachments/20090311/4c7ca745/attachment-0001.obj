Index: ChangeLog
===================================================================
--- ChangeLog	(revision 129039)
+++ ChangeLog	(working copy)
@@ -1,3 +1,23 @@
+2009-03-11  Jonathan Chambers  <joncham@gmail.com>
+
+	* frontend/Completer.cs: Switch from using GnuReadLine to LineReader.
+	
+	* frontend/GnuReadLine.cs: Make methods non-static. Now accessed via LineReader.
+	
+	* frontend/LineReader.cs: Added. Handles both GnuReadLine and ManagedReadLine.
+	
+	* frontend/Main.cs: Switch from using GnuReadLine to LineReader.
+	
+	* frontend/ManagedReadLine.cs: Beginning of managed ReadLine implementation.
+
+2009-03-11  Jonathan Chambers  <joncham@gmail.com>
+
+	* backend/server/i386-arch.h: Wrap include with #ifdef HAVE_SYS_USER_H
+
+	* configure.in: Add check for sys/user.h.
+	
+	* winconfig.h: Added. Used to generate config.h on Windows.
+
 2009-03-05  Martin Baulig  <martin@ximian.com>
 
 	* languages/mono/MonoSymbolFile.cs
Index: frontend/Completer.cs
===================================================================
--- frontend/Completer.cs	(revision 129039)
+++ frontend/Completer.cs	(working copy)
@@ -13,7 +13,7 @@
 			this.engine = engine;
 		}
 
-		/* This method gets installed as the GnuReadLine completion
+		/* This method gets installed as the LineReader completion
 		 * delegate.  It completes commands at the start of the
 		 * line, and does command specific completion for
 		 * arguments. */
@@ -28,7 +28,7 @@
 				 * generate the list of strings. 
 				 */
 
-				string line = GnuReadLine.CurrentLine;
+				string line = LineReader.CurrentLine;
 				string command;
 
 				int ptr = 0;
@@ -100,7 +100,7 @@
 				match_strings [matched_commands.Count] = null;
 			}
 
-			GnuReadLine.SetCompletionMatches (match_strings);
+			LineReader.SetCompletionMatches (match_strings);
 		}
 
 		public void StringsCompleter (string[] haystack, string text, int start, int end)
@@ -129,7 +129,7 @@
 				match_strings [matches.Count] = null;
 			}
 
-			GnuReadLine.SetCompletionMatches (match_strings);
+			LineReader.SetCompletionMatches (match_strings);
 		}
 
 		public void ArgumentCompleter (Type t, string text, int start, int end)
@@ -163,7 +163,7 @@
 				match_strings [matched_args.Count] = null;
 			}
 
-			GnuReadLine.SetCompletionMatches (match_strings);
+			LineReader.SetCompletionMatches (match_strings);
 		}
 
 		public void FilenameCompleter (string text, int start, int end)
@@ -172,7 +172,7 @@
 			string file_prefix;
 			DebuggerEngine de = engine as DebuggerEngine;
 
-			GnuReadLine.FilenameCompletionDesired = true;
+			LineReader.FilenameCompletionDesired = true;
 
 			if (text.IndexOf (Path.DirectorySeparatorChar) == -1) {
 				dir = de.Interpreter.Options.WorkingDirectory;
@@ -188,7 +188,7 @@
 			try {
 				fs_entries = Directory.GetFileSystemEntries (dir, file_prefix + "*");
 			} catch {
-				GnuReadLine.SetCompletionMatches (null);
+				LineReader.SetCompletionMatches (null);
 				return;
 			}
 
@@ -216,7 +216,7 @@
 				match_strings [matched_paths.Count] = null;
 			}
 
-			GnuReadLine.SetCompletionMatches (match_strings);
+			LineReader.SetCompletionMatches (match_strings);
 
 		}
 
@@ -224,7 +224,7 @@
 		 * matches). */
 	  	public void NoopCompleter (string text, int start, int end)
 		{
-			GnuReadLine.SetCompletionMatches (null);
+			LineReader.SetCompletionMatches (null);
 		}
 
 		public void SymbolCompleter (ScriptingContext context, string text, int start, int end)
@@ -275,9 +275,9 @@
 					methods [method_list.Count] = null;
 				}
 
-				GnuReadLine.SetCompletionMatches (methods);
+				LineReader.SetCompletionMatches (methods);
 			} catch {
-				GnuReadLine.SetCompletionMatches (null);
+				LineReader.SetCompletionMatches (null);
 			}
 		}
 	}
Index: frontend/GnuReadLine.cs
===================================================================
--- frontend/GnuReadLine.cs	(revision 129039)
+++ frontend/GnuReadLine.cs	(working copy)
@@ -7,7 +7,7 @@
 	public delegate void CompletionDelegate (string text, int start, int end);
 	public delegate string CompletionGenerator (string text, int state);
 
-	internal class GnuReadLine
+	internal class GnuReadLine : IReadLine
 	{
 		[DllImport("libmonodebuggerreadline")]
 		extern static void mono_debugger_readline_static_init ();
@@ -46,46 +46,46 @@
 			mono_debugger_readline_static_init ();
 		}
 
-		public static bool IsTerminal (int fd)
+		public bool IsTerminal (int fd)
 		{
 			return mono_debugger_readline_is_a_tty (fd) != 0;
 		}
 
-		public static string ReadLine (string prompt)
+		public string ReadLine (string prompt)
 		{
 			return mono_debugger_readline_readline (prompt);
 		}
 
-		public static void AddHistory (string line)
+		public void AddHistory (string line)
 		{
 			mono_debugger_readline_add_history (line);
 		}
 
-		public static int Columns {
+		public int Columns {
 			get {
 				return mono_debugger_readline_get_columns ();
 			}
 		}
 
-		public static void SetCompletionMatches (string[] matches)
+		public void SetCompletionMatches (string[] matches)
 		{
 			mono_debugger_readline_set_completion_matches (matches, matches == null ? 0 : matches.Length);
 		}
 
-		public static void EnableCompletion (CompletionDelegate handler)
+		public void EnableCompletion (CompletionDelegate handler)
 		{
 			completion_handler = handler;
 			mono_debugger_readline_enable_completion (completion_handler);
 		}
 
-		public static string CurrentLine
+		public string CurrentLine
 		{
 			get {
 				return mono_debugger_readline_current_line_buffer ();
 			}
 		}
 
-		public static bool FilenameCompletionDesired
+		public bool FilenameCompletionDesired
 		{
 			get {
 				return mono_debugger_readline_get_filename_completion_desired () == 0 ? false : true;
Index: frontend/LineReader.cs
===================================================================
--- frontend/LineReader.cs	(revision 0)
+++ frontend/LineReader.cs	(revision 0)
@@ -0,0 +1,85 @@
+using System;
+using System.IO;
+using System.Runtime.InteropServices;
+
+namespace Mono.Debugger.Frontend
+{
+	internal class LineReader
+	{
+		static IReadLine readline;
+
+		static LineReader () {
+			if (DebuggerConfiguration.IsRunningOnWindows)
+				readline = new ManagedReadLine ();
+			else
+				readline = new GnuReadLine ();
+		}
+
+		public static bool IsTerminal (int fd) {
+			return readline.IsTerminal (fd);
+		}
+
+		public static string ReadLine (string prompt) {
+			return readline.ReadLine (prompt);
+		}
+
+		public static void AddHistory (string line) {
+			readline.AddHistory (line);
+		}
+
+		public static int Columns {
+			get {
+				return readline.Columns;
+			}
+		}
+
+		public static void SetCompletionMatches (string[] matches) {
+			readline.SetCompletionMatches (matches);
+		}
+
+		public static void EnableCompletion (CompletionDelegate handler) {
+			readline.EnableCompletion (handler);
+		}
+
+		public static string CurrentLine {
+			get {
+				return readline.CurrentLine;
+			}
+		}
+
+		public static bool FilenameCompletionDesired {
+			get {
+				return readline.FilenameCompletionDesired;
+			}
+			set {
+				readline.FilenameCompletionDesired = value;
+			}
+		}
+	}
+
+	internal interface IReadLine
+	{
+		bool IsTerminal (int fd);
+
+		string ReadLine (string prompt);
+
+		void AddHistory (string line);
+
+		int Columns {
+			get;
+		}
+
+		void SetCompletionMatches (string[] matches);
+
+		void EnableCompletion (CompletionDelegate handler);
+
+		string CurrentLine {
+			get;
+		}
+
+		bool FilenameCompletionDesired {
+			get;
+			set;
+		}
+	}
+}

Property changes on: frontend\LineReader.cs
___________________________________________________________________
Added: svn:eol-style
   + native

Index: frontend/Main.cs
===================================================================
--- frontend/Main.cs	(revision 129039)
+++ frontend/Main.cs	(working copy)
@@ -293,11 +293,11 @@
 				Console.Write (the_prompt);
 				return Console.ReadLine ();
 			} else {
-				string result = GnuReadLine.ReadLine (the_prompt);
+				string result = LineReader.ReadLine (the_prompt);
 				if (result == null)
 					return null;
 				if (result != "")
-					GnuReadLine.AddHistory (result);
+					LineReader.AddHistory (result);
 				return result;
 			}
 		}
@@ -332,7 +332,7 @@
 
 		public static void Main (string[] args)
 		{
-			bool is_terminal = GnuReadLine.IsTerminal (0);
+			bool is_terminal = LineReader.IsTerminal (0);
 
 			DebuggerOptions options = DebuggerOptions.ParseCommandLine (args);
 
Index: frontend/ManagedReadLine.cs
===================================================================
--- frontend/ManagedReadLine.cs	(revision 0)
+++ frontend/ManagedReadLine.cs	(revision 0)
@@ -0,0 +1,56 @@
+using System;
+using System.IO;
+using System.Runtime.InteropServices;
+using System.Collections.Generic;
+
+namespace Mono.Debugger.Frontend
+{
+	internal class ManagedReadLine : IReadLine
+	{
+		Stack<string> history = new Stack<string> ();
+		string current_line = string.Empty;
+
+		public bool IsTerminal (int fd) {
+			return false;
+		}
+
+		public string ReadLine (string prompt) {
+			Console.Write (prompt);
+			current_line = Console.ReadLine ();
+			return current_line;
+		}
+
+		public void AddHistory (string line) {
+			history.Push (line);
+		}
+
+		public int Columns {
+			get {
+				throw new NotImplementedException ();
+			}
+		}
+
+		public void SetCompletionMatches (string[] matches) {
+			throw new NotImplementedException ();
+		}
+
+		public void EnableCompletion (CompletionDelegate handler) {
+			throw new NotImplementedException ();
+		}
+
+		public string CurrentLine {
+			get {
+				return current_line;
+			}
+		}
+
+		public bool FilenameCompletionDesired {
+			get {
+				throw new NotImplementedException ();
+			}
+			set {
+				throw new NotImplementedException ();
+			}
+		}
+	}
+}

Property changes on: frontend\ManagedReadLine.cs
___________________________________________________________________
Added: svn:eol-style
   + native
