Index: System.Diagnostics/Stopwatch.cs
===================================================================
--- System.Diagnostics/Stopwatch.cs	(revision 76430)
+++ System.Diagnostics/Stopwatch.cs	(working copy)
@@ -32,22 +32,32 @@
 #if NET_2_0
 
 using System;
-using System.ComponentModel;
+using System.ComponentModel;
+using System.Runtime.InteropServices;
 
 namespace System.Diagnostics
 {
 	public class Stopwatch
-	{
-		[MonoTODO ("high resolution mode support")]
+	{
+		[DllImport ("kernel32.dll")]
+		static extern bool QueryPerformanceCounter (out long performance_count);
+
+		[DllImport ("kernel32.dll")]
+		static extern bool QueryPerformanceFrequency (out long frequency);
+
 		public static readonly long Frequency;
 
-		[MonoTODO ("high resolution mode support")]
 		public static readonly bool IsHighResolution;
 
-		[MonoTODO ("high resolution mode support")]
 		public static long GetTimestamp ()
-		{
-			return DateTime.Now.Ticks;
+		{
+			if (IsHighResolution) {
+				long performance_count;
+				QueryPerformanceCounter (out performance_count);
+				return performance_count;
+			}
+			else
+				return DateTime.Now.Ticks;
 		}
 
 		public static Stopwatch StartNew ()
@@ -58,27 +68,47 @@
 		}
 
 		static Stopwatch ()
-		{
-			Frequency = TimeSpan.TicksPerSecond;
-			IsHighResolution = false;
+		{
+			Frequency = TimeSpan.TicksPerSecond;
+			IsHighResolution = false;
+			int platform = (int) Environment.OSVersion.Platform;
+			if ((platform != 4) && (platform != 128)) {
+				// try to use high performance timer on Windows.
+				IsHighResolution = QueryPerformanceFrequency (out Frequency);
+			}
 		}
 
 		public Stopwatch ()
 		{
-		}
+		}
 
 		long elapsed;
 		long started;
 		bool is_running;
 
-		[MonoTODO ("high resolution mode support")]
-		public TimeSpan Elapsed {
-			get { return TimeSpan.FromTicks (ElapsedTicks); }
+		public TimeSpan Elapsed {
+			get {
+				if (IsHighResolution) {
+					// convert our ticks to TimeSpace ticks, 100 nano second units
+					return TimeSpan.FromTicks ((long)(TimeSpan.TicksPerSecond * ElapsedTicks / Frequency));
+				}
+				else {
+					return TimeSpan.FromTicks (ElapsedTicks); 
+				}
+			}
 		}
 
-		[MonoTODO ("high resolution mode support")]
 		public long ElapsedMilliseconds {
-			get { checked { return (long) Elapsed.TotalMilliseconds; } }
+			get { 
+				checked {
+					if (IsHighResolution) {
+						return (long)(1000 * ElapsedTicks / Frequency);
+					}
+					else {
+						return (long) Elapsed.TotalMilliseconds;
+					}
+				} 
+			}
 		}
 
 		public long ElapsedTicks {
@@ -113,4 +143,4 @@
 	}
 }
 
-#endif
+#endif
Index: System.Diagnostics/ChangeLog
===================================================================
--- System.Diagnostics/ChangeLog	(revision 76430)
+++ System.Diagnostics/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2007-04-29  Jonathan Chambers  <joncham@gmail.com>
+
+	* Stopwatch.cs : Implement high performance stopwatch on windows.
+
 2007-04-19  Atsushi Enomoto  <atsushi@ximian.com>
 
 	* XmlWriterTraceListener.cs : new file, implementated.