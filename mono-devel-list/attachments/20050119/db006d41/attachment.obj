Index: ChangeLog
===================================================================
--- ChangeLog	(Revision 39101)
+++ ChangeLog	(Arbeitskopie)
@@ -1,3 +1,8 @@
+2005-01-19 Joerg Rosenkranz <joergr@voelcker.com>
+
+    * TypeDescriptor.cs: Changed handling of interfaces and objects in
+    GetConverter to reflect the behaviour of .NET. This fixes bug #71444.
+    
 2005-01-12 Gonzalo Paniagua Javier <gonzalo@ximian.com>
 
 	* BaseNumberConverter.cs: when the culture we get is null, set it to the
Index: TypeDescriptor.cs
===================================================================
--- TypeDescriptor.cs	(Revision 39101)
+++ TypeDescriptor.cs	(Arbeitskopie)
@@ -189,17 +189,10 @@
 				t = GetTypeFromName (component as IComponent, tca.ConverterTypeName);
 			}
 			
-			Type primitive = component.GetType ();
-			while (t == null && primitive != typeof (object)) {
-				t = (Type) DefaultConverters [primitive];
-				if (t == null)
-					primitive = primitive.BaseType;
-			}
-			
 			if (t != null)
 				return (TypeConverter) Activator.CreateInstance (t);
 			else
-				return null;
+				return GetConverter (component.GetType ());
 		}
 	}
 
@@ -236,8 +229,6 @@
 				defaultConverters.Add (typeof (Guid), typeof (GuidConverter));
 				defaultConverters.Add (typeof (TimeSpan), typeof (TimeSpanConverter));
 				defaultConverters.Add (typeof (ICollection), typeof (CollectionConverter));
-				//FIXME We need to add the type for the ReferenceConverter
-				//defaultConverters.Add (typeof (????), typeof (ReferenceConverter));
 			}
 			return defaultConverters;
 		}
@@ -259,18 +250,31 @@
 			if (tca != null) {
 				t = GetTypeFromName (null, tca.ConverterTypeName);
 			}
+			
+            if (t == null) {
+                // Find default converter with a type this type is assignable to
+                foreach (Type defType in DefaultConverters.Keys) {
+                    if (defType.IsInterface && defType.IsAssignableFrom (type)) {
+                        t = (Type) DefaultConverters [defType];
+                        break;
+                    }
+                }
+            }
+            
+            if (t == null) {
+                // Find primitive type for this type
+                Type primitive = type;
+                while (t == null && primitive != null) {
+                    t = (Type) DefaultConverters [primitive];
+                    if (t == null)
+                        primitive = primitive.BaseType;
+                }
+            }
 			
-			Type primitive = type;
-			while (t == null && primitive != typeof (object)) {
-				t = (Type) DefaultConverters [primitive];
-				if (t == null)
-					primitive = primitive.BaseType;
-			}
-			
 			if (t != null)
 				return (TypeConverter) Activator.CreateInstance (t);
 			else
-				return null;
+				return new ReferenceConverter (type);    // Default?
 		}
 	}
 
