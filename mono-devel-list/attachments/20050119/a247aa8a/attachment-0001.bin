Index: Assembly.cs
===================================================================
--- Assembly.cs	(revisión: 39129)
+++ Assembly.cs	(copia de trabajo)
@@ -361,8 +361,13 @@
 		}
 		
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
-		public extern static Assembly LoadFrom (String assemblyFile);
+		private extern static Assembly LoadFrom (String assemblyFile, bool refOnly);
 
+		public static Assembly LoadFrom (string assembly)
+		{
+			return LoadFrom (assembly, false);
+		}
+
 		public static Assembly LoadFrom (String assemblyFile, Evidence securityEvidence)
 		{
 			Assembly a = LoadFrom (assemblyFile);
@@ -443,14 +448,17 @@
 			throw new NotImplementedException ();
 		}
 
-		[MonoTODO]
-		public static Assembly ReflectionOnlyLoad (string assemblyString) {
-			throw new NotImplementedException ();
+		public static Assembly ReflectionOnlyLoad (string assemblyString) 
+		{
+			if (assemblyString == null)
+				throw new ArgumentNullException ("assemblyString");
+			
+			return AppDomain.CurrentDomain.LoadAssembly (assemblyString, null, true);
 		}
 
-		[MonoTODO]
-		public static Assembly ReflectionOnlyLoadFrom (string assemblyFile) {
-			throw new NotImplementedException ();
+		public static Assembly ReflectionOnlyLoadFrom (string assemblyFile)
+		{
+			return LoadFrom (assemblyFile, true);
 		}
 #endif
 
@@ -525,7 +533,11 @@
 			if (t == null)
 				return null;
 
-			return Activator.CreateInstance (t);
+			try {
+				return Activator.CreateInstance (t);
+			} catch (InvalidOperationException e) {
+				throw new ArgumentException ("It is illegal to invoke a method on a Type loaded via ReflectionOnly methods.");
+			}
 		}
 
 		public Object CreateInstance (String typeName, Boolean ignoreCase,
@@ -537,7 +549,11 @@
 			if (t == null)
 				return null;
 
-			return Activator.CreateInstance (t, bindingAttr, binder, args, culture, activationAttributes);
+			try {
+				return Activator.CreateInstance (t, bindingAttr, binder, args, culture, activationAttributes);
+			} catch (InvalidOperationException e) {
+				throw new ArgumentException ("It is illegal to invoke a method on a Type loaded via ReflectionOnly methods.");
+			}
 		}
 
 		public Module[] GetLoadedModules ()
@@ -698,8 +714,9 @@
 
 		[MonoTODO ("see ReflectionOnlyLoad")]
 		[ComVisible (false)]
-		public virtual bool ReflectionOnly {
-			get { return false; }
+		public virtual extern bool ReflectionOnly {
+		[MethodImplAttribute (MethodImplOptions.InternalCall)]
+			get;
 		}
 #endif
 
Index: MonoMethod.cs
===================================================================
--- MonoMethod.cs	(revisión: 39129)
+++ MonoMethod.cs	(copia de trabajo)
@@ -118,6 +118,8 @@
 				throw new ArgumentException ("parameters");
 			try {
 				return InternalInvoke (obj, parameters);
+			} catch (InvalidOperationException) {
+				throw;
 			} catch (TargetException) {
 				throw;
 			} catch (Exception e) {
@@ -316,6 +318,8 @@
 				throw new ArgumentException ("parameters");
 			try {
 				return InternalInvoke (obj, parameters);
+			} catch (InvalidOperationException) {
+				throw;
 			} catch (TargetException) {
 				throw;
 			} catch (Exception e) {
