Index: AppDomain.cs
===================================================================
--- AppDomain.cs	(revisi√≥n: 39129)
+++ AppDomain.cs	(copia de trabajo)
@@ -64,6 +64,9 @@
 		[ThreadStatic]
 		static Hashtable assembly_resolve_in_progress;
 
+		[ThreadStatic]
+		static Hashtable assembly_prebind_resolve_in_progress;
+
 		// CAS
 		private Evidence _evidence;
 		private PermissionSet _granted;
@@ -432,8 +435,13 @@
 		}
 		
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
-		public extern Assembly [] GetAssemblies ();
+		private extern Assembly [] GetAssemblies (bool refOnly);
 
+		public Assembly [] GetAssemblies ()
+		{
+			return GetAssemblies (false);
+		}
+
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
 		public extern object GetData (string name);
 
@@ -448,7 +456,7 @@
 		}
 
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
-		private extern Assembly LoadAssembly (string assemblyRef, Evidence securityEvidence);
+		internal extern Assembly LoadAssembly (string assemblyRef, Evidence securityEvidence, bool refOnly);
 
 		public Assembly Load (AssemblyName assemblyRef)
 		{
@@ -467,7 +475,7 @@
 					throw new ArgumentException (Locale.GetText ("assemblyRef.Name cannot be empty."), "assemblyRef");
 			}
 
-			return LoadAssembly (assemblyRef.FullName, assemblySecurity);
+			return LoadAssembly (assemblyRef.FullName, assemblySecurity, false);
 		}
 
 		public Assembly Load (string assemblyString)
@@ -475,7 +483,7 @@
 			if (assemblyString == null)
 				throw new ArgumentNullException ("assemblyString");
 
-			return LoadAssembly (assemblyString, null);
+			return LoadAssembly (assemblyString, null, false);
 		}
 
 		public Assembly Load (string assemblyString, Evidence assemblySecurity)
@@ -483,7 +491,7 @@
 			if (assemblyString == null)
 				throw new ArgumentNullException ("assemblyString");
 
-			return LoadAssembly (assemblyString, assemblySecurity);
+			return LoadAssembly (assemblyString, assemblySecurity, false);
 		}
 
 		public Assembly Load (byte[] rawAssembly)
@@ -790,6 +798,39 @@
 			}
 		}
 
+#if NET_2_0
+		private Assembly DoPreBindAssemblyResolve (string name)
+		{
+			if (ReflectionOnlyPreBindAssemblyResolve == null)
+				return null;
+			
+			/* Prevent infinite recursion */
+			Hashtable ht = assembly_prebind_resolve_in_progress;
+			if (ht == null) {
+				ht = new Hashtable ();
+				assembly_prebind_resolve_in_progress = ht;
+			}
+
+			if (ht.Contains (name))
+				return null;
+			else
+				ht [name] = name;
+
+			try {
+				foreach (Delegate eh in ReflectionOnlyPreBindAssemblyResolve.GetInvocationList ()) {
+					ResolveEventHandler handler = (ResolveEventHandler) eh;
+					Assembly assembly = handler (this, new ResolveEventArgs (name));
+					if (assembly != null)
+						return assembly;
+				}
+				return null;
+			}
+			finally {
+				ht.Remove (name);
+			}
+		}
+#endif
+		
 		internal Assembly DoTypeResolve (Object name_or_tb)
 		{
 			if (TypeResolve == null)
@@ -877,6 +918,9 @@
 		public event UnhandledExceptionEventHandler UnhandledException;
 
 #if NET_2_0
+
+		public event ResolveEventHandler ReflectionOnlyPreBindAssemblyResolve;
+		
 		private ActivationContext _activation;
 		private ApplicationIdentity _applicationIdentity;
 		private AppDomainManager _domain_manager;
@@ -961,7 +1005,7 @@
 		[MonoTODO ("see Assembly.ReflectionOnlyLoad")]
 		public Assembly[] ReflectionOnlyGetAssemblies ()
 		{
-			return new Assembly [0];
+			return GetAssemblies (true);
 		}
 #endif
 	}
