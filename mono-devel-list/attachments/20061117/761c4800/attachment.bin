Index: System.Web.UI.HtmlControls/HtmlInputText.cs
===================================================================
--- System.Web.UI.HtmlControls/HtmlInputText.cs	(revision 67999)
+++ System.Web.UI.HtmlControls/HtmlInputText.cs	(working copy)
@@ -111,6 +111,14 @@
 
 
 #if NET_2_0
+		protected internal override void Render (HtmlTextWriter writer)
+		{
+			Page.ClientScript.RegisterForEventValidation (this.UniqueID);
+			base.Render (writer);
+		}
+#endif
+
+#if NET_2_0
 		protected internal
 #else		
 		protected
Index: System.Web.UI.HtmlControls/HtmlInputRadioButton.cs
===================================================================
--- System.Web.UI.HtmlControls/HtmlInputRadioButton.cs	(revision 67999)
+++ System.Web.UI.HtmlControls/HtmlInputRadioButton.cs	(working copy)
@@ -96,7 +96,6 @@
 			}
 		}
 
-
 #if NET_2_0
 		protected internal
 #else
@@ -120,6 +119,10 @@
 
 		protected override void RenderAttributes (HtmlTextWriter writer)
 		{
+#if NET_2_0
+			if (Page != null)
+				Page.ClientScript.RegisterForEventValidation (this.UniqueID, Value);
+#endif
 			writer.WriteAttribute ("value", Value);
 			Attributes.Remove ("value");
 			base.RenderAttributes (writer);
Index: System.Web.UI.HtmlControls/HtmlButton.cs
===================================================================
--- System.Web.UI.HtmlControls/HtmlButton.cs	(revision 67999)
+++ System.Web.UI.HtmlControls/HtmlButton.cs	(working copy)
@@ -97,7 +97,7 @@
 #endif
 			OnServerClick (EventArgs.Empty);
 		}
-
+		
 #if NET_2_0
 		protected internal
 #else		
@@ -121,6 +121,7 @@
 #if NET_2_0
 			if (Page != null && Events [ServerClickEvent] != null) {
 				PostBackOptions options = GetPostBackOptions ();
+				Page.ClientScript.RegisterForEventValidation (options);
 				Attributes ["onclick"] += Page.ClientScript.GetPostBackEventReference (options);
 				writer.WriteAttribute ("language", "javascript");
 			}
Index: System.Web.UI.HtmlControls/HtmlTextArea.cs
===================================================================
--- System.Web.UI.HtmlControls/HtmlTextArea.cs	(revision 67999)
+++ System.Web.UI.HtmlControls/HtmlTextArea.cs	(working copy)
@@ -137,6 +137,10 @@
 
 		protected override void RenderAttributes (HtmlTextWriter writer)
 		{
+#if NET_2_0
+			if (Page != null)
+				Page.ClientScript.RegisterForEventValidation (this.UniqueID);
+#endif
 			if (Attributes ["name"] == null) {
 				writer.WriteAttribute ("name", Name);
 			}
Index: System.Web.UI.HtmlControls/HtmlSelect.cs
===================================================================
--- System.Web.UI.HtmlControls/HtmlSelect.cs	(revision 67999)
+++ System.Web.UI.HtmlControls/HtmlSelect.cs	(working copy)
@@ -611,6 +611,10 @@
 		
 		protected override void RenderAttributes (HtmlTextWriter w)
 		{
+#if NET_2_0
+			if (Page != null)
+				Page.ClientScript.RegisterForEventValidation (this.UniqueID);
+#endif
 			/* If there is no "name" attribute,
 			 * LoadPostData doesn't work...
 			 */
@@ -645,7 +649,6 @@
 			int count = items.Count;
 			for (int i = 0; i < count; i++) {
 				ListItem item = items[i];
-
 				w.Indent++;
 				
 				/* Write the <option> elements this
Index: System.Web.UI.HtmlControls/HtmlInputButton.cs
===================================================================
--- System.Web.UI.HtmlControls/HtmlInputButton.cs	(revision 67999)
+++ System.Web.UI.HtmlControls/HtmlInputButton.cs	(working copy)
@@ -177,6 +177,7 @@
 				}
 				if (Page != null) {
 					PostBackOptions options = GetPostBackOptions ();
+					Page.ClientScript.RegisterForEventValidation (options);
 					onclick += Page.ClientScript.GetPostBackEventReference (options);
 				}
 
Index: System.Web.UI.HtmlControls/HtmlInputImage.cs
===================================================================
--- System.Web.UI.HtmlControls/HtmlInputImage.cs	(revision 67999)
+++ System.Web.UI.HtmlControls/HtmlInputImage.cs	(working copy)
@@ -246,6 +246,9 @@
 		protected override void RenderAttributes (HtmlTextWriter writer)
 		{
 #if NET_2_0
+			if (Page != null)
+				Page.ClientScript.RegisterForEventValidation (this.UniqueID);
+			
 			if (CausesValidation && Page != null && Page.AreValidatorsUplevel (ValidationGroup)) {
 				ClientScriptManager csm = Page.ClientScript;
 				Attributes ["onclick"] += csm.GetClientValidationEvent (ValidationGroup);
Index: System.Web.UI.HtmlControls/HtmlInputCheckBox.cs
===================================================================
--- System.Web.UI.HtmlControls/HtmlInputCheckBox.cs	(revision 67999)
+++ System.Web.UI.HtmlControls/HtmlInputCheckBox.cs	(working copy)
@@ -88,6 +88,15 @@
 		}
 
 #if NET_2_0
+		protected override void RenderAttributes (HtmlTextWriter writer)
+		{
+			if (Page != null)
+				Page.ClientScript.RegisterForEventValidation (this.UniqueID);
+			base.RenderAttributes (writer);
+		}
+#endif
+
+#if NET_2_0
 		protected internal
 #else
 		protected
Index: System.Web.UI.HtmlControls/HtmlInputHidden.cs
===================================================================
--- System.Web.UI.HtmlControls/HtmlInputHidden.cs	(revision 67999)
+++ System.Web.UI.HtmlControls/HtmlInputHidden.cs	(working copy)
@@ -95,6 +95,13 @@
 		}
 
 #if NET_2_0
+		protected override void RenderAttributes (HtmlTextWriter writer)
+		{
+			if (Page != null)
+				Page.ClientScript.RegisterForEventValidation (this.UniqueID);
+			base.RenderAttributes (writer);
+		}		
+
 		protected internal
 #else
 		protected
Index: System.Web.UI.HtmlControls/HtmlInputSubmit.cs
===================================================================
--- System.Web.UI.HtmlControls/HtmlInputSubmit.cs	(revision 67999)
+++ System.Web.UI.HtmlControls/HtmlInputSubmit.cs	(working copy)
@@ -50,7 +50,7 @@
 			: base (type)
 		{
 		}
-
+		
 		[MonoTODO ("why our own version?")]
 		void IPostBackEventHandler.RaisePostBackEvent (string eventArgument)
 		{
Index: System.Web.UI/PageLifeCycle.cs
===================================================================
--- System.Web.UI/PageLifeCycle.cs	(revision 0)
+++ System.Web.UI/PageLifeCycle.cs	(revision 0)
@@ -0,0 +1,48 @@
+//
+// System.Web.Compilation.PageLifeCycle
+//
+// Authors:
+//   Marek Habersack (grendello@gmail.com)
+//
+// (C) 2006 Marek Habersack
+//
+
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+#if NET_2_0
+internal enum PageLifeCycle
+{
+	Unknown = 1,
+	Start,
+	PreInit,
+	Init,
+	InitComplete,
+	PreLoad,
+	Load,
+	ControlEvents,
+	LoadComplete,
+	PreRender,
+	SaveStateComplete,
+	Render,
+	Unload,
+	End
+}
+#endif
Index: System.Web.UI/Page.cs
===================================================================
--- System.Web.UI/Page.cs	(revision 68043)
+++ System.Web.UI/Page.cs	(working copy)
@@ -71,6 +71,7 @@
 public class Page : TemplateControl, IHttpHandler
 {
 #if NET_2_0
+	private PageLifeCycle _lifeCycle = PageLifeCycle.Unknown;
 	private bool _eventValidation = true;
 #endif
 	private bool _viewState = true;
@@ -281,8 +282,16 @@
 #if NET_2_0
 	public virtual bool EnableEventValidation {
 		get { return _eventValidation; }
-		set { _eventValidation = value;}
+		set {
+			if (_lifeCycle > PageLifeCycle.Init)
+				throw new InvalidOperationException ("The 'EnableEventValidation' property can be set only in the Page_init, the Page directive or in the <pages> configuration section.");
+			_eventValidation = value;
+		}
 	}
+
+	internal PageLifeCycle LifeCycle {
+		get { return _lifeCycle; }
+	}
 #endif
 
 	[Browsable (false)]
@@ -942,7 +951,7 @@
 		scriptManager.WriteClientScriptBlocks (writer);
 	}
 
-	LosFormatter GetFormatter ()
+	internal LosFormatter GetFormatter ()
 	{
 #if NET_2_0
 		PagesSection config = (PagesSection) WebConfigurationManager.GetSection ("system.web/pages");
@@ -983,7 +992,10 @@
 
 		if (!postBackScriptRendered && requiresPostBackScript)
 			RenderPostBackScript (writer, formUniqueID);
-
+		
+#if NET_2_0
+		scriptManager.SaveEventValidationState ();
+#endif
 		scriptManager.WriteHiddenFields (writer);
 		scriptManager.WriteClientScriptIncludes (writer);
 		scriptManager.WriteStartupScriptBlocks (writer);
@@ -1069,6 +1081,9 @@
 	public void ProcessRequest (HttpContext context)
 #endif
 	{
+#if NET_2_0
+		_lifeCycle = PageLifeCycle.Unknown;
+#endif
 		_context = context;
 		if (clientTarget != null)
 			Request.ClientTarget = clientTarget;
@@ -1096,8 +1111,14 @@
 			throw;
 		} finally {
 			try {
+#if NET_2_0
+				_lifeCycle = PageLifeCycle.Unload;
+#endif
 				RenderTrace ();
 				UnloadRecursive (true);
+#if NET_2_0
+				_lifeCycle = PageLifeCycle.End;
+#endif
 			} catch {}
 			if (Thread.CurrentThread.CurrentCulture.Equals (culture) == false)
 				Thread.CurrentThread.CurrentCulture = culture;
@@ -1120,6 +1141,7 @@
 		_requestValueCollection = this.DeterminePostBackMode();
 
 #if NET_2_0
+		_lifeCycle = PageLifeCycle.Start;
 		// http://msdn2.microsoft.com/en-us/library/ms178141.aspx
 		if (_requestValueCollection != null) {
 			if (!isCrossPagePostBack && _requestValueCollection [PreviousPageID] != null && _requestValueCollection [PreviousPageID] != Request.FilePath) {
@@ -1131,22 +1153,28 @@
 			}
 		}
 
+		_lifeCycle = PageLifeCycle.PreInit;
 		OnPreInit (EventArgs.Empty);
 
 		InitializeTheme ();
 		ApplyMasterPage ();
+		_lifeCycle = PageLifeCycle.Init;
 #endif
 		Trace.Write ("aspx.page", "Begin Init");
 		InitRecursive (null);
 		Trace.Write ("aspx.page", "End Init");
 
 #if NET_2_0
+		_lifeCycle = PageLifeCycle.InitComplete;
 		OnInitComplete (EventArgs.Empty);
 #endif
 			
 		renderingForm = false;	
 #if NET_2_0
 		if (IsPostBack || IsCallback) {
+			_lifeCycle = PageLifeCycle.PreLoad;
+			if (_requestValueCollection != null)
+				scriptManager.RestoreEventValidationState (_requestValueCollection [scriptManager.EventStateFieldName]);
 #else
 		if (IsPostBack) {
 #endif
@@ -1160,11 +1188,13 @@
 
 #if NET_2_0
 		OnPreLoad (EventArgs.Empty);
+		_lifeCycle = PageLifeCycle.Load;
 #endif
 
 		LoadRecursive ();
 #if NET_2_0
 		if (IsPostBack || IsCallback) {
+			_lifeCycle = PageLifeCycle.ControlEvents;
 #else
 		if (IsPostBack) {
 #endif
@@ -1180,6 +1210,7 @@
 		}
 		
 #if NET_2_0
+		_lifeCycle = PageLifeCycle.LoadComplete;
 		OnLoadComplete (EventArgs.Empty);
 
 		if (IsCrossPagePostBack)
@@ -1192,6 +1223,8 @@
 			callbackOutput.Flush ();
 			return;
 		}
+
+		_lifeCycle = PageLifeCycle.PreRender;
 #endif
 		
 		Trace.Write ("aspx.page", "Begin PreRender");
@@ -1207,7 +1240,9 @@
 		Trace.Write ("aspx.page", "End SaveViewState");
 		
 #if NET_2_0
+		_lifeCycle = PageLifeCycle.SaveStateComplete;
 		OnSaveStateComplete (EventArgs.Empty);
+		_lifeCycle = PageLifeCycle.Render;
 #endif
 		
 		//--
@@ -1235,9 +1270,31 @@
 		}
 	}
 	
+#if NET_2_0
+	bool CheckForValidationSupport (Control targetControl)
+	{
+		if (targetControl == null)
+			return false;
+		Type type = targetControl.GetType ();
+		object[] attributes = type.GetCustomAttributes (true);
+		foreach (object attr in attributes)
+			if (attr is SupportsEventValidationAttribute)
+				return true;
+		return false;
+	}
+#endif
+	
 	void RaisePostBackEvents ()
 	{
+#if NET_2_0
+		Control targetControl;
+#endif
 		if (requiresRaiseEvent != null) {
+#if NET_2_0
+			targetControl = requiresRaiseEvent as Control;
+			if (targetControl != null && CheckForValidationSupport (targetControl))
+				scriptManager.ValidateEvent (targetControl.UniqueID, null);
+#endif
 			RaisePostBackEvent (requiresRaiseEvent, null);
 			return;
 		}
@@ -1252,11 +1309,21 @@
 			return;
                 }
 
+#if NET_2_0
+		targetControl = FindControl (eventTarget);
+		IPostBackEventHandler target = targetControl as IPostBackEventHandler;
+#else
 		IPostBackEventHandler target = FindControl (eventTarget) as IPostBackEventHandler;
+#endif
+			
 		if (target == null)
 			return;
 
 		string eventArgument = postdata [postEventArgumentID];
+#if NET_2_0
+		if (CheckForValidationSupport (targetControl))
+			scriptManager.ValidateEvent (targetControl.UniqueID, eventArgument);
+#endif
 		RaisePostBackEvent (target, eventArgument);
 	}
 
@@ -1675,11 +1742,14 @@
 		if (callbackTarget == null || callbackTarget.Length == 0)
 			throw new HttpException ("Callback target not provided.");
 
-		ICallbackEventHandler target = FindControl (callbackTarget) as ICallbackEventHandler;
+		Control targetControl = FindControl (callbackTarget);
+		ICallbackEventHandler target = targetControl as ICallbackEventHandler;
 		if (target == null)
 			throw new HttpException (string.Format ("Invalid callback target '{0}'.", callbackTarget));
 
 		string callbackArgument = _requestValueCollection [CallbackArgumentID];
+		if (CheckForValidationSupport (targetControl))
+			scriptManager.ValidateEvent (targetControl.UniqueID, callbackArgument);
 		target.RaiseCallbackEvent (callbackArgument);
 		return target.GetCallbackResult ();
 	}
Index: System.Web.UI/ClientScriptManager.cs
===================================================================
--- System.Web.UI/ClientScriptManager.cs	(revision 68043)
+++ System.Web.UI/ClientScriptManager.cs	(working copy)
@@ -34,6 +34,9 @@
 
 using System;
 using System.Collections;
+#if NET_2_0
+using System.Collections.Generic;
+#endif
 using System.Text;
 
 namespace System.Web.UI
@@ -52,7 +55,10 @@
 		ScriptEntry submitStatements;
 		ScriptEntry scriptIncludes;
 		Page page;
-	
+#if NET_2_0
+		List <int> eventValidationValues;
+#endif
+		
 		internal ClientScriptManager (Page page)
 		{
 			this.page = page;
@@ -70,6 +76,15 @@
 			return "javascript:" + GetPostBackEventReference (control, argument);
 		}
 	
+#if NET_2_0
+		public string GetPostBackClientHyperlink (Control control, string argument, bool registerForEventValidation)
+		{
+			if (registerForEventValidation)
+				RegisterForEventValidation (control.UniqueID, argument);
+			return "javascript:" + GetPostBackEventReference (control, argument);
+		}
+#endif
+		
 		public string GetPostBackEventReference (Control control, string argument)
 		{
 			page.RequiresPostBackScript ();
@@ -339,35 +354,64 @@
 		{
 			throw new NotImplementedException ();
 		}
-
-		[MonoTODO]
+		
+		// Implemented following the description in http://odetocode.com/Blogs/scott/archive/2006/03/20/3145.aspx
+		private int CalculateEventHash (string uniqueId, string argument)
+		{
+			int uniqueIdHash = uniqueId.GetHashCode ();
+			int argumentHash = (argument == null) ? 0 : argument.GetHashCode ();
+			return (uniqueIdHash ^ argumentHash);
+		}
+		
 		public void RegisterForEventValidation (PostBackOptions options)
 		{
-			throw new NotImplementedException ();
+			// MS.NET does not check for options == null, so we won't too...
+			RegisterForEventValidation (options.TargetControl.UniqueID, options.Argument);
 		}
 		
-		[MonoTODO]
 		public void RegisterForEventValidation (string uniqueId)
 		{
-			throw new NotImplementedException ();
+			RegisterForEventValidation (uniqueId, null);
 		}
-
-		[MonoTODO]
+		
 		public void RegisterForEventValidation (string uniqueId, string argument)
 		{
-			throw new NotImplementedException ();
+			if (!page.EnableEventValidation)
+				return;
+			if (uniqueId == null || uniqueId.Length == 0)
+				return;
+			if (page.LifeCycle < PageLifeCycle.Render)
+				throw new InvalidOperationException ("RegisterForEventValidation may only be called from the Render method");
+			if (eventValidationValues == null)
+				eventValidationValues = new List <int> ();
+
+			
+			int hash = CalculateEventHash (uniqueId, argument);
+			if (eventValidationValues.BinarySearch (hash) < 0)
+				eventValidationValues.Add (hash);
 		}
 
-		[MonoTODO]
 		public void ValidateEvent (string uniqueId)
 		{
-			throw new NotImplementedException ();
+			ValidateEvent (uniqueId, null);
 		}
 
-		[MonoTODO]
 		public void ValidateEvent (string uniqueId, string argument)
 		{
-			throw new NotImplementedException ();
+			if (uniqueId == null || uniqueId.Length == 0)
+				throw new ArgumentException ("must not be null or empty", "uniqueId");
+			if (!page.EnableEventValidation)
+				return;
+			if (eventValidationValues == null)
+				goto bad;
+			
+			int hash = CalculateEventHash (uniqueId, argument);
+			if (eventValidationValues.BinarySearch (hash) < 0)
+				goto bad;
+			return;
+			
+			bad:
+			throw new ArgumentException ("Invalid postback or callback argument. Event validation is enabled using <pages enableEventValidation=\"true\"/> in configuration or <%@ Page EnableEventValidation=\"true\" %> in a page. For security purposes, this feature verifies that arguments to postback or callback events originate from the server control that originally rendered them. If the data is valid and expected, use the ClientScriptManager.RegisterForEventValidation method in order to register the postback or callback data for validation.");
 		}
 #endif
 		void WriteScripts (HtmlTextWriter writer, ScriptEntry scriptList)
@@ -377,7 +421,31 @@
 				scriptList = scriptList.Next;
 			}
 		}
+
+#if NET_2_0
+		internal void RestoreEventValidationState (string fieldValue)
+		{
+			if (!page.EnableEventValidation || fieldValue == null || fieldValue.Length == 0)
+				return;
+			LosFormatter fmt = page.GetFormatter ();
+			eventValidationValues = (List <int>)fmt.Deserialize (fieldValue);
+		}
 		
+		internal void SaveEventValidationState ()
+		{
+			if (!page.EnableEventValidation || eventValidationValues == null || eventValidationValues.Count == 0)
+				return;
+			eventValidationValues.Sort ();
+			LosFormatter fmt = page.GetFormatter ();
+			RegisterHiddenField (EventStateFieldName, fmt.SerializeToBase64 (eventValidationValues));
+		}
+
+		internal string EventStateFieldName
+		{
+			get { return "__EVENTVALIDATION"; }
+		}
+#endif
+		
 		internal void WriteHiddenFields (HtmlTextWriter writer)
 		{
 			if (hiddenFields == null)
Index: System.Web.UI/PostBackOptions.cs
===================================================================
--- System.Web.UI/PostBackOptions.cs	(revision 68043)
+++ System.Web.UI/PostBackOptions.cs	(working copy)
@@ -45,29 +45,31 @@
 		private bool performValidation;
 		private string validationGroup;
 
-		public PostBackOptions (Control control)
-			: this (control, null, null, false, false, false, true, false, null)
+		public PostBackOptions (Control targetControl)
+			: this (targetControl, null, null, false, false, false, true, false, null)
 		{
 		}
 
-		public PostBackOptions (Control control, string argument)
-			: this (control, argument, null, false, false, false, true, false, null)
+		public PostBackOptions (Control targetControl, string argument)
+			: this (targetControl, argument, null, false, false, false, true, false, null)
 		{
 		}
 
-		public PostBackOptions (Control control, string argument, string actionUrl, bool isAutoPostBack,
-					bool isJavaScriptProtocolRequired, bool isTrackFocus, bool isClientSubmit,
-					bool isValidationPerformed, string validatingGroup)
+		public PostBackOptions (Control targetControl, string argument, string actionUrl, bool autoPostBack,
+					bool requiresJavaScriptProtocol, bool trackFocus, bool clientSubmit,
+					bool performValidation, string validationGroup)
 		{
-			this.control = control;
+			if (targetControl == null)
+				throw new ArgumentNullException ("targetControl");
+			this.control = targetControl;
 			this.argument = argument;
 			this.actionUrl = actionUrl;
-			this.autoPostBack = isAutoPostBack;
-			this.requiresJavaScriptProtocol = isJavaScriptProtocolRequired;
-			this.trackFocus = isTrackFocus;
-			this.clientSubmit = isClientSubmit;
-			this.performValidation = isValidationPerformed;
-			this.validationGroup = validatingGroup;
+			this.autoPostBack = autoPostBack;
+			this.requiresJavaScriptProtocol = requiresJavaScriptProtocol;
+			this.trackFocus = trackFocus;
+			this.clientSubmit = clientSubmit;
+			this.performValidation = performValidation;
+			this.validationGroup = validationGroup;
 		}
 
 		[DefaultValue ("")]
Index: System.Web.UI.WebControls/Button.cs
===================================================================
--- System.Web.UI.WebControls/Button.cs	(revision 67999)
+++ System.Web.UI.WebControls/Button.cs	(working copy)
@@ -164,9 +164,13 @@
 #endif		
 
 		protected override void AddAttributesToRender (HtmlTextWriter writer) {
-			if (Page != null)
+			if (Page != null) {
+#if NET_2_0
+				Page.ClientScript.RegisterForEventValidation (GetPostBackOptions ());
+#endif
 				Page.VerifyRenderingInServerForm (this);
-
+			}
+			
 #if NET_2_0
 			writer.AddAttribute (HtmlTextWriterAttribute.Type, UseSubmitBehavior ? "submit" : "button");
 			writer.AddAttribute (HtmlTextWriterAttribute.Name, UniqueID);
@@ -270,14 +274,14 @@
 		protected internal
 #else		
 		protected
-#endif		
+#endif
 		override void RenderContents (HtmlTextWriter writer)
-		{
-		}
-
+                {
+                }
+		
 		[WebSysDescription ("")]
 		[WebCategory ("Action")]
-		public event EventHandler Click
+			public event EventHandler Click
 		{
 			add {
 				Events.AddHandler (ClickEvent, value);
Index: System.Web.UI.WebControls/CheckBox.cs
===================================================================
--- System.Web.UI.WebControls/CheckBox.cs	(revision 67999)
+++ System.Web.UI.WebControls/CheckBox.cs	(working copy)
@@ -362,9 +362,13 @@
 #endif		
 		override void Render (HtmlTextWriter w)
 		{
-			if (Page != null)
+			if (Page != null) {
+#if NET_2_0
+				Page.ClientScript.RegisterForEventValidation (this.UniqueID);
+#endif
 				Page.VerifyRenderingInServerForm (this);
-
+			}
+			
 			bool need_span = ControlStyleCreated && !ControlStyle.IsEmpty;
 			if (need_span)
 				ControlStyle.AddAttributesToRender (w, this);
Index: System.Web.UI.WebControls/BulletedList.cs
===================================================================
--- System.Web.UI.WebControls/BulletedList.cs	(revision 67999)
+++ System.Web.UI.WebControls/BulletedList.cs	(working copy)
@@ -172,7 +172,14 @@
 		protected internal override void RenderContents (HtmlTextWriter writer)
 		{
 			int idx = 0;
+#if NET_2_0
+			bool havePage = Page != null;
+#endif
 			foreach (ListItem i in Items) {
+#if NET_2_0
+				if (havePage)
+					Page.ClientScript.RegisterForEventValidation (this.UniqueID, i.Value.ToString ());
+#endif
 				writer.RenderBeginTag (HtmlTextWriterTag.Li);
 				this.RenderBulletText (i, idx ++, writer);
 				writer.RenderEndTag ();
Index: System.Web.UI.WebControls/TextBox.cs
===================================================================
--- System.Web.UI.WebControls/TextBox.cs	(revision 67999)
+++ System.Web.UI.WebControls/TextBox.cs	(working copy)
@@ -140,6 +140,10 @@
 #endif		
 		override void Render (HtmlTextWriter w)
 		{
+#if NET_2_0
+			if (Page != null)
+				Page.ClientScript.RegisterForEventValidation (this.UniqueID);
+#endif
 			// Why didn't msft just override RenderContents!?
 			RenderBeginTag (w);
 			if (TextMode == TextBoxMode.MultiLine)
Index: System.Web.UI.WebControls/RadioButtonList.cs
===================================================================
--- System.Web.UI.WebControls/RadioButtonList.cs	(revision 67999)
+++ System.Web.UI.WebControls/RadioButtonList.cs	(working copy)
@@ -339,6 +339,9 @@
 		override void Render (HtmlTextWriter writer)
 		{
 #if NET_2_0
+			if (Page != null)
+				Page.ClientScript.RegisterForEventValidation (this.UniqueID);
+
 			if (Items.Count == 0)
 				return;
 #endif
Index: System.Web.UI.WebControls/FormView.cs
===================================================================
--- System.Web.UI.WebControls/FormView.cs	(revision 67999)
+++ System.Web.UI.WebControls/FormView.cs	(working copy)
@@ -1464,6 +1464,10 @@
 		
 		protected internal override void Render (HtmlTextWriter writer)
 		{
+#if NET_2_0
+			if (Page != null)
+				Page.ClientScript.RegisterForEventValidation (this.UniqueID);
+#endif
 			PrepareControlHierarchy ();
 			
 			if (table == null)
Index: System.Web.UI.WebControls/DropDownList.cs
===================================================================
--- System.Web.UI.WebControls/DropDownList.cs	(revision 67999)
+++ System.Web.UI.WebControls/DropDownList.cs	(working copy)
@@ -180,7 +180,9 @@
 
 			for (int i = 0; i < count; i++) {
 				item = Items[i];
-
+#if NET_2_0
+				Page.ClientScript.RegisterForEventValidation (this.UniqueID, item.Value.ToString ());
+#endif
 				writer.WriteBeginTag("option");
 				if (item.Selected) {
 					if (selected) {
Index: System.Web.UI.WebControls/Calendar.cs
===================================================================
--- System.Web.UI.WebControls/Calendar.cs	(revision 67999)
+++ System.Web.UI.WebControls/Calendar.cs	(working copy)
@@ -786,6 +786,10 @@
 #endif		
 		override void Render (HtmlTextWriter writer)
 		{
+#if NET_2_0
+			if (Page != null)
+				Page.ClientScript.RegisterForEventValidation (this.UniqueID);
+#endif
 			Table table = new Table ();
 			table.CellSpacing = CellSpacing;
 			table.CellPadding = CellPadding;
Index: System.Web.UI.WebControls/ListBox.cs
===================================================================
--- System.Web.UI.WebControls/ListBox.cs	(revision 67999)
+++ System.Web.UI.WebControls/ListBox.cs	(working copy)
@@ -183,7 +183,14 @@
 #endif		
 		override void RenderContents (HtmlTextWriter writer)
 		{
+#if NET_2_0
+			bool havePage = Page != null;
+#endif
 			foreach (ListItem item in Items) {
+#if NET_2_0
+				if (havePage)
+					Page.ClientScript.RegisterForEventValidation (this.UniqueID, item.Value.ToString ());
+#endif
 				writer.WriteBeginTag ("option");
 				if (item.Selected) {
 					writer.WriteAttribute ("selected", "selected", false);
Index: System.Web.UI.WebControls/ImageButton.cs
===================================================================
--- System.Web.UI.WebControls/ImageButton.cs	(revision 67999)
+++ System.Web.UI.WebControls/ImageButton.cs	(working copy)
@@ -209,9 +209,13 @@
 
 		protected override void AddAttributesToRender (HtmlTextWriter writer)
 		{
-			if (Page != null)
+			if (Page != null) {
+#if NET_2_0
+				Page.ClientScript.RegisterForEventValidation (GetPostBackOptions ());
+#endif
 				Page.VerifyRenderingInServerForm (this);
-
+			}
+			
 			writer.AddAttribute (HtmlTextWriterAttribute.Type, "image");
 			writer.AddAttribute (HtmlTextWriterAttribute.Name, UniqueID);
 #if NET_2_0
