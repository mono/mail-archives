Index: class/System.Data/Test/System.Data/DataRowTest.cs
===================================================================
--- class/System.Data/Test/System.Data/DataRowTest.cs	(revision 39287)
+++ class/System.Data/Test/System.Data/DataRowTest.cs	(working copy)
@@ -333,8 +333,89 @@
                         AssertEquals ("#A44", table.Rows [0], (tableC.Rows [0]).GetParentRow (dr));
                 } 
 
+				[Test]
+                public void ChildRowTest ()
+                {
 
+                        //Clear all existing values from table
+                        for (int i = 0; i < table.Rows.Count; i++) {
+                                        table.Rows [i].Delete ();
+                        }
+                        table.AcceptChanges ();
+                        row = table.NewRow ();
+                        row ["FName"] = "My FName";
+                        row ["Id"] = 0;
+                        table.Rows.Add (row);
+                                                                                                    
+                        DataTable tableC = new DataTable ("Child");
+                        DataColumn colC;
+                        DataRow rowC;
+                                                                                                    
+
+                        colC = new DataColumn ();
+                        colC.DataType = Type.GetType ("System.Int32");
+                        colC.ColumnName = "Id";
+                        colC.AutoIncrement = true;
+                        tableC.Columns.Add (colC);
+                                                                                                    
+                        colC = new DataColumn ();
+                        colC.DataType = Type.GetType ("System.String");
+                        colC.ColumnName = "Name";
+                        tableC.Columns.Add (colC);
+                                                                                                    
+                        rowC = tableC.NewRow ();
+                        rowC ["Name"] = "My FName";
+                        tableC.Rows.Add (rowC);
+                        DataSet ds = new DataSet ();
+                        ds.Tables.Add (table);
+                        ds.Tables.Add (tableC);
+                        DataRelation dr = new DataRelation ("PO", table.Columns ["Id"], tableC.Columns ["Id"]);
+                        ds.Relations.Add (dr);
+                                                                                                    
+                        rowC.SetParentRow (table.Rows [0], dr);
+                                                                                                    
+                        DataRow [] rows = (table.Rows [0]).GetChildRows (dr);
 
+                        AssertEquals ("#A45", 1, rows.Length);
+                        AssertEquals ("#A46", tableC.Rows [0], rows [0]);
+                        
+                } 
+
+				[Test]
+                public void ChildRowTest2 ()
+                {
+                        DataSet ds = new DataSet ();
+						DataTable tableP = ds.Tables.Add ("Parent");
+                        DataTable tableC = ds.Tables.Add ("Child");
+                        DataColumn colC;
+                        DataRow rowC;
+                                                                                                    
+                        colC = new DataColumn ();
+                        colC.DataType = Type.GetType ("System.Int32");
+                        colC.ColumnName = "Id";
+                        colC.AutoIncrement = true;
+                        tableP.Columns.Add (colC);
+						
+						colC = new DataColumn ();
+                        colC.DataType = Type.GetType ("System.Int32");
+                        colC.ColumnName = "Id";
+                        tableC.Columns.Add (colC);
+
+						row = tableP.NewRow ();
+                        rowC = tableC.Rows.Add (new object [0]);
+
+						ds.EnforceConstraints = false;
+                        DataRelation dr = new DataRelation ("PO", tableP.Columns ["Id"], tableC.Columns ["Id"]);
+                        ds.Relations.Add (dr);
+						
+                        rowC.SetParentRow (row, dr);
+                        DataRow [] rows = row.GetChildRows (dr);
+                        
+                        AssertEquals ("#A47", 1, rows.Length);
+                        AssertEquals ("#A48", tableC.Rows [0], rows [0]);
+				}
+
+
 		// tests item at row, column in table to be DBNull.Value
 		private void DBNullTest (string message, DataTable dt, int row, int column) 
 		{
Index: class/System.Data/System.Data/DataRow.cs
===================================================================
--- class/System.Data/System.Data/DataRow.cs	(revision 39287)
+++ class/System.Data/System.Data/DataRow.cs	(working copy)
@@ -786,7 +786,7 @@
 		/// </summary>
 		public DataRow[] GetChildRows (DataRelation relation) 
 		{
-			return GetChildRows (relation, DataRowVersion.Current);
+			return GetChildRows (relation, DataRowVersion.Default);
 		}
 
 		/// <summary>
@@ -807,7 +807,8 @@
 			if (relation == null)
 				return new DataRow[0];
 
-			if (this.Table == null || RowState == DataRowState.Detached)
+			//if (this.Table == null || RowState == DataRowState.Detached)
+			if (this.Table == null)
 				throw new RowNotInTableException("This row has been removed from a table and does not have any data.  BeginEdit() will allow creation of new data in this row.");
 
 			if (relation.DataSet != this.Table.DataSet)
@@ -875,7 +876,7 @@
 					}
 				}
 				else { // if there is no index we search manualy.
-					int curIndex = IndexFromVersion(DataRowVersion.Current);
+					int curIndex = IndexFromVersion(DataRowVersion.Default);
 					int tmpRecord = fkc.Table.RecordCache.NewRecord();
 
 					try {