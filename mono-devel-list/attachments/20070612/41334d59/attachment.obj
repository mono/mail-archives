Index: test/string-util.c
===================================================================
--- test/string-util.c	(revision 79345)
+++ test/string-util.c	(working copy)
@@ -408,7 +408,7 @@
 	gchar *c;
 	gint n, l;
 
-	l = strlen (b);
+	l = (gint)strlen (b);
 	c = g_ascii_strdown (a, l);
 	n = g_ascii_strncasecmp (b, c, l);
 
Index: test/utf8.c
===================================================================
--- test/utf8.c	(revision 79345)
+++ test/utf8.c	(working copy)
@@ -245,6 +245,30 @@
 	return OK;
 }
 
+
+RESULT
+test_xdigit ()
+{
+	static char test_chars[] = {
+		'0', '1', '2', '3', '4', 
+		'5', '6', '7', '8', '9', 
+		'a', 'b', 'c', 'd', 'e', 'f', 'g',
+		'A', 'B', 'C', 'D', 'E', 'F', 'G'};
+	static gint32 test_values[] = {
+		0, 1, 2, 3, 4, 
+		5, 6, 7, 8, 9, 
+		10, 11, 12, 13, 14, 15, -1,
+		10, 11, 12, 13, 14, 15, -1};
+
+		int i =0;
+
+		for (i = 0; i < sizeof(test_chars); i++)
+			if (g_unichar_xdigit_value ((gunichar)test_chars[i]) != test_values[i])
+				return FAILED("Incorrect value %d at index %d", test_values[i], i);
+
+		return OK;
+}
+
 /*
  * test initialization
  */
@@ -254,6 +278,7 @@
 	{"g_utf8_to_utf16", test_utf8_to_utf16},
 	{"g_utf8_seq", test_utf8_seq},
 	{"g_convert", test_convert },
+	{"g_unichar_xdigit_value", test_xdigit },
 	{NULL, NULL}
 };
 
Index: src/gunicode.c
===================================================================
--- src/gunicode.c	(revision 79345)
+++ src/gunicode.c	(working copy)
@@ -62,6 +62,25 @@
 	return 0;
 }
 
+gboolean
+g_unichar_isxdigit (gunichar c)
+{
+	return (g_unichar_xdigit_value (c) != -1);
+
+}
+
+gint
+g_unichar_xdigit_value (gunichar c)
+{
+	if (c >= 0x30 && c <= 0x39) /*0-9*/
+		return (c - 0x30);
+	if (c >= 0x41 && c <= 0x46) /*A-F*/
+		return (c - 0x37);
+	if (c >= 0x61 && c <= 0x66) /*a-f*/
+		return (c - 0x57);
+	return -1;
+}
+
 gchar *
 g_convert (const gchar *str, gssize len,
 	   const gchar *to_codeset, const gchar *from_codeset,
Index: src/gmisc.c
===================================================================
--- src/gmisc.c	(revision 79345)
+++ src/gmisc.c	(working copy)
@@ -91,4 +91,17 @@
 #endif
 }
 
+gchar*
+g_win32_getlocale(void)
+{
+#ifdef G_OS_WIN32
+	/* FIXME: Use GetThreadLocale
+	 * and convert LCID to standard 
+	 * string form, "en_US" */
+	return strdup ("en_US");
+#else
+	return NULL;
+#endif
+}
 
+
Index: src/glib.h
===================================================================
--- src/glib.h	(revision 79345)
+++ src/glib.h	(working copy)
@@ -135,6 +135,8 @@
 gboolean         g_setenv(const gchar *variable, const gchar *value, gboolean overwrite);
 void             g_unsetenv(const gchar *variable);
 
+gchar*           g_win32_getlocale(void);
+
 /*
  * Precondition macros
  */
@@ -153,6 +155,7 @@
 typedef void     (*GDestroyNotify) (gpointer data);
 typedef guint    (*GHashFunc)      (gconstpointer key);
 typedef gboolean (*GEqualFunc)     (gconstpointer a, gconstpointer b);
+typedef void     (*GFreeFunc)      (gpointer       data);
 
 GHashTable     *g_hash_table_new             (GHashFunc hash_func, GEqualFunc key_equal_func);
 GHashTable     *g_hash_table_new_full        (GHashFunc hash_func, GEqualFunc key_equal_func,
@@ -494,6 +497,8 @@
 
 gunichar       g_unichar_tolower (gunichar c);
 GUnicodeType   g_unichar_type    (gunichar c);
+gboolean       g_unichar_isxdigit (gunichar c);
+gint           g_unichar_xdigit_value (gunichar c);
 
 #ifndef MAX
 #define MAX(a,b) (((a)>(b)) ? (a) : (b))
@@ -503,6 +508,10 @@
 #define MIN(a,b) (((a)<(b)) ? (a) : (b))
 #endif
 
+#ifndef CLAMP
+#define CLAMP(a,low,high) (((a) < (low)) ? (low) : (((a) > (high)) ? (high) : (a)))
+#endif
+
 /* FIXME: Implement these two for gcc */
 #define G_LIKELY(x) (x)
 #define G_UNLIKELY(x) (x)
@@ -737,6 +746,13 @@
 #define g_thread_supported()   TRUE
 #define g_thread_init(x)       G_STMT_START { if (x != NULL) { g_error ("No vtable supported in g_thread_init"); } } G_STMT_END
 
+#define G_LOCK_DEFINE(name)
+#define G_LOCK_DEFINE_STATIC(name)
+#define G_LOCK_EXTERN(name)
+#define G_LOCK(name)
+#define G_TRYLOCK(name)
+#define G_UNLOCK(name)
+
 #define GUINT16_SWAP_LE_BE(x) ((guint16) (((guint16) x) >> 8) | ((((guint16)(x)) & 0xff) << 8))
 #define GUINT32_SWAP_LE_BE(x) ((guint32) \
 			       ( (((guint32) (x)) << 24)| \
@@ -753,15 +769,18 @@
 #   define GUINT32_TO_LE(x) (x)
 #   define GUINT64_TO_LE(x) (x)
 #   define GUINT16_TO_LE(x) (x)
+#   define GUINT_TO_LE(x)   (x)
 #else
 #   define GUINT32_TO_LE(x) GUINT32_SWAP_LE_BE(x)
 #   define GUINT64_TO_LE(x) GUINT64_SWAP_LE_BE(x)
 #   define GUINT16_TO_LE(x) GUINT16_SWAP_LE_BE(x)
+#   define GUINT_TO_LE(x)   GUINT32_SWAP_LE_BE(x)
 #endif
 
 #define GUINT32_FROM_LE(x)  (GUINT32_TO_LE (x))
 #define GUINT64_FROM_LE(x)  (GUINT64_TO_LE (x))
 #define GUINT16_FROM_LE(x)  (GUINT16_TO_LE (x))
+#define GUINT_FROM_LE(x)    (GUINT_TO_LE (x))
 
 #define _EGLIB_MAJOR  2
 #define _EGLIB_MIDDLE 4
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 79345)
+++ ChangeLog	(working copy)
@@ -1,3 +1,16 @@
+2007-06-13  Jonathan Chambers <joncham@gmail.com>
+	
+	* src/gunicode.c: Add g_unichar_isxdigit and g_unichar_xdigit_value.
+	* src/gmisc.c: Add g_win32_getlocale stub.
+	* src/glib.h: Add declarations of above functions,
+	GFreeFunc typedef, and CLAMP, GUINT_TO_LE, and threading
+	macros.
+	
+	* test/string-util.c: Fix warning.
+	* test/utf8.c: Add test for g_unichar_xdigit_value.
+	
+	Contribution is licensed as MIT/X11.
+
 2007-05-05  Aaron Bockover  <abockover@novell.com>
 
 	* src/gstr.c: