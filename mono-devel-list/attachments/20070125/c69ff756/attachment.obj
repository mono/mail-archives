Index: System.Web.UI/Control.jvm.cs
===================================================================
--- System.Web.UI/Control.jvm.cs	(revision 71581)
+++ System.Web.UI/Control.jvm.cs	(working copy)
@@ -35,9 +35,6 @@
 {
 	public partial class Control
 	{
-		bool _emptyPortletNamespace = false;
-		string _PortletNamespace = null;
-
 		internal bool IsPortletRender
 		{
 			get {
@@ -45,38 +42,6 @@
 			}
 		}
 
-		internal string PortletNamespace
-		{
-			get {
-				if (_emptyPortletNamespace)
-					return null;
-
-				if (_PortletNamespace == null) {
-					IPortletResponse portletResponse = GetRenderResponse ();
-					if (portletResponse != null)
-						_PortletNamespace = portletResponse.getNamespace ();
-					_emptyPortletNamespace = _PortletNamespace == null;
-				}
-				return _PortletNamespace;
-			}
-		}
-
-		// For J2EE Portal we need to use the portlet namespace when we generate control IDs.
-		string GetDefaultName ()
-		{
-			string defaultName;
-			if (defaultNumberID > 99) {
-				defaultName = "_ctl" + defaultNumberID++;
-			} else {
-				defaultName = defaultNameArray [defaultNumberID++];
-			}
-
-			if (this != _page)
-				return defaultName;
-
-			return PortletNamespace + defaultName;
-		}
-
 		// Add a variant for specifying use of portlet resolveRenderUrl
 		internal string ResolveUrl (string relativeUrl, bool usePortletRenderResolve)
 		{
Index: System.Web.UI/Page.cs
===================================================================
--- System.Web.UI/Page.cs	(revision 71581)
+++ System.Web.UI/Page.cs	(working copy)
@@ -440,9 +440,9 @@
 #endif
 
 #if !TARGET_J2EE
-	internal string PostBackFunctionName {
+	internal string theForm {
 		get {
-			return "__doPostBack";
+			return "theForm";
 		}
 	}
 #endif
@@ -760,23 +760,22 @@
 			return null;
 
 		NameValueCollection coll = null;
-		if (0 == String.Compare (Request.HttpMethod, "POST", true, CultureInfo.InvariantCulture)) {
-			coll =	req.Form;
-			WebROCollection c = (WebROCollection) coll;
-			allow_load = !c.GotID;
-			if (allow_load) {
-				c.ID = GetTypeHashCode ();
-			} else {
-				allow_load = (c.ID == GetTypeHashCode ());
-			}
-		} else  {
-			coll = req.QueryString;
-		}
-
+		if (0 == String.Compare (Request.HttpMethod, "POST", true, CultureInfo.InvariantCulture))
+			coll = req.Form;
 #if TARGET_J2EE
-		coll = LoadViewStateForPortlet((WebROCollection)coll);
+		else if (IsPortletRender && req.Form ["__VIEWSTATE"] != null)
+			coll = req.Form;
 #endif
+		else
+			coll = req.QueryString;
 
+		WebROCollection c = (WebROCollection) coll;
+		allow_load = !c.GotID;
+		if (allow_load)
+			c.ID = GetTypeHashCode ();
+		else
+			allow_load = (c.ID == GetTypeHashCode ());
+
 		if (coll != null && coll ["__VIEWSTATE"] == null && coll ["__EVENTTARGET"] == null)
 			return null;
 
@@ -951,13 +950,13 @@
 			StringBuilder script = new StringBuilder ();
 			script.AppendLine ("<script type=\"text/javascript\">");
 			script.AppendLine ("<!--");
-			script.AppendLine ("theForm.oldSubmit = theForm.submit");
-			script.AppendLine ("theForm.submit = WebForm_SaveScrollPositionSubmit");
-			script.AppendLine ("theForm.oldOnSubmit = theForm.onsubmit");
-			script.AppendLine ("theForm.onsubmit = WebForm_SaveScrollPositionOnSubmit");
+			script.AppendLine (theForm + ".oldSubmit = " + theForm + ".submit;");
+			script.AppendLine (theForm + ".submit = WebForm_SaveScrollPositionSubmit;");
+			script.AppendLine (theForm + ".oldOnSubmit = " + theForm + ".onsubmit;");
+			script.AppendLine (theForm + ".onsubmit = WebForm_SaveScrollPositionOnSubmit;");
 			if (IsPostBack) {
-				script.AppendLine ("theForm.oldOnLoad = window.onload");
-				script.AppendLine ("window.onload = WebForm_RestoreScrollPosition");
+				script.AppendLine (theForm + ".oldOnLoad = window.onload;");
+				script.AppendLine ("window.onload = function () { WebForm_RestoreScrollPosition (" + theForm + "); };");
 			}
 			script.AppendLine ("// -->");
 			script.AppendLine ("</script>");
@@ -976,13 +975,19 @@
 		writer.WriteLine ("<script language=\"javascript\">");
 		writer.WriteLine ("<!--");
 
-		writer.WriteLine ("\tvar theForm;\n\tif (document.getElementById) {{ theForm = document.getElementById ('{0}'); }}", formUniqueID);
-		writer.WriteLine ("\telse {{ theForm = document.{0}; }}", formUniqueID);
-		writer.WriteLine ("\tfunction " + PostBackFunctionName + "(eventTarget, eventArgument) {");
+		writer.WriteLine ("\tvar {0};\n\tif (document.getElementById) {{ {0} = document.getElementById ('{1}'); }}", theForm, formUniqueID);
+		writer.WriteLine ("\telse {{ {0} = document.{1}; }}", theForm, formUniqueID);
+		writer.WriteLine ("\t{0}.isAspForm = true;", theForm);
+		writer.WriteLine ("\tfunction __doPostBack(eventTarget, eventArgument) {");
 		writer.WriteLine ("\t\tif(document.ValidatorOnSubmit && !ValidatorOnSubmit()) return;");
-		writer.WriteLine ("\t\ttheForm.{0}.value = eventTarget;", postEventSourceID);
-		writer.WriteLine ("\t\ttheForm.{0}.value = eventArgument;", postEventArgumentID);
-		writer.WriteLine ("\t\ttheForm.submit();");
+#if NET_2_0
+		writer.WriteLine ("\t\tvar myForm = WebForm_GetFormFromCtrl (eventTarget);");
+#else
+		writer.WriteLine ("\t\tvar myForm = " + theForm + ";");
+#endif
+		writer.WriteLine ("\t\tmyForm.{0}.value = eventTarget;", postEventSourceID);
+		writer.WriteLine ("\t\tmyForm.{0}.value = eventArgument;", postEventArgumentID);
+		writer.WriteLine ("\t\tmyForm.submit();");
 		writer.WriteLine ("\t}");
 		writer.WriteLine ("// -->");
 		writer.WriteLine ("</script>");
@@ -1794,12 +1799,12 @@
 
 			if (Form.SubmitDisabledControls) {
 				ClientScript.RegisterOnSubmitStatement ("HtmlForm-SubmitDisabledControls-SubmitStatement",
-										 "javascript: return WebForm_OnSubmit();");
+										 "javascript: return WebForm_OnSubmit(" + theForm + ");");
 				ClientScript.RegisterStartupScript ("HtmlForm-SubmitDisabledControls-StartupScript",
 @"<script language=""JavaScript"">
 <!--
-function WebForm_OnSubmit() {
-WebForm_ReEnableControls();
+function WebForm_OnSubmit(currForm) {
+WebForm_ReEnableControls(currForm);
 return true;
 } // -->
 </script>");
Index: System.Web.UI/ClientScriptManager.cs
===================================================================
--- System.Web.UI/ClientScriptManager.cs	(revision 71581)
+++ System.Web.UI/ClientScriptManager.cs	(working copy)
@@ -53,7 +53,7 @@
 		Hashtable registeredArrayDeclares;
 		ScriptEntry clientScriptBlocks;
 		ScriptEntry startupScriptBlocks;
-		Hashtable hiddenFields;
+		internal Hashtable hiddenFields;
 		ScriptEntry submitStatements;
 		ScriptEntry scriptIncludes;
 		Page page;
@@ -99,7 +99,7 @@
 				throw new ArgumentNullException ("control");
 			
 			page.RequiresPostBackScript ();
-			return String.Format ("{0}('{1}','{2}')", page.PostBackFunctionName, control.UniqueID, argument);
+			return String.Format ("__doPostBack('{0}','{1}')", control.UniqueID, argument);
 		}
 
 #if NET_2_0
Index: System.Web.UI/Control.cs
===================================================================
--- System.Web.UI/Control.cs	(revision 71581)
+++ System.Web.UI/Control.cs	(working copy)
@@ -443,6 +443,12 @@
 					_userId = _namingContainer.GetDefaultName ();
 
 				string prefix = _namingContainer.UniqueID;
+#if TARGET_J2EE
+				// For J2EE portlets we need to add the namespace to the ID.
+				if (_namingContainer == _page && _page.PortletNamespace != null)
+					prefix = _page.PortletNamespace;
+				else
+#endif
 				if (_namingContainer == _page || prefix == null) {
 					uniqueID = _userId;
 					return uniqueID;
@@ -574,7 +580,6 @@
 			defaultNumberID = 0;
 		}
 
-#if !TARGET_J2EE
 		string GetDefaultName ()
 		{
 			string defaultName;
@@ -585,7 +590,6 @@
 			}
 			return defaultName;
 		}
-#endif
 
 		void NullifyUniqueID ()
 		{
@@ -740,6 +744,10 @@
 
 		Control LookForControlByName (string id)
 		{
+#if TARGET_J2EE
+			if (this == _page && id != null && id == _page.PortletNamespace)
+				return this;
+#endif
 			if (!HasControls ())
 				return null;
 
Index: System.Web.UI/Page.jvm.cs
===================================================================
--- System.Web.UI/Page.jvm.cs	(revision 71581)
+++ System.Web.UI/Page.jvm.cs	(working copy)
@@ -29,55 +29,53 @@
 using vmw.@internal.j2ee;
 using javax.servlet.http;
 using System.Collections.Specialized;
+using System.Globalization;
 using System.Web.Hosting;
 
 namespace System.Web.UI
 {
 	public partial class Page
 	{
-		internal string PostBackFunctionName {
-			get {
-#if LATER // Enable when we fix the jscripts not to reference __doPostBack.
-				IPortletRenderResponse resp = GetRenderResponse();
-				if (resp != null)
-					return "__doPostBack_" + resp.getNamespace();
-#endif
-				return "__doPostBack";
-			}
-		}
+		bool _emptyPortletNamespace = false;
+		string _PortletNamespace = null;
 
-		// For J2EE portlets we load the view state from the render parameters
-		WebROCollection LoadViewStateForPortlet(WebROCollection coll)
+		internal string PortletNamespace
 		{
-			IPortletRenderRequest renderRequest = Context.ServletRequest as IPortletRenderRequest;
-			if (renderRequest != null && (coll == null || coll ["__VIEWSTATE"] == null)) {
-				string mode = renderRequest.getPortletMode();
-				string viewstate = Context.ServletRequest.getParameter("vmw.viewstate." + mode);
-				if (viewstate != null) {
-					if (coll == null)
-						coll = new WebROCollection();
-					else 
-						coll.Unprotect();
-					coll["__VIEWSTATE"] = viewstate;
-					coll.Protect();
+			get {
+				if (_emptyPortletNamespace)
+					return null;
+
+				if (_PortletNamespace == null) {
+					IPortletResponse portletResponse = Context.ServletResponse as IPortletResponse;
+					if (portletResponse != null)
+						_PortletNamespace = portletResponse.getNamespace ();
+					_emptyPortletNamespace = _PortletNamespace == null;
 				}
+				return _PortletNamespace;
 			}
-			return coll;
 		}
 
-		internal bool SaveViewStateForNextPortletRender()
+		internal bool SaveViewStateForNextPortletRender ()
 		{
 			IPortletActionResponse resp = Context.ServletResponse as IPortletActionResponse;
 			IPortletActionRequest req = Context.ServletRequest as IPortletActionRequest;
 			if (req == null)
 				return false;
 
-			if (IsPostBack && String.Compare (Request.HttpMethod, "POST", true) == 0 && !resp.isRedirected())
-				resp.setRenderParameter("vmw.viewstate." + req.getPortletMode(), GetSavedViewState());
+			// When redirecting don't save the page viewstate and hidden fields
+			if (resp.isRedirected ())
+				return true;
 
+			if (IsPostBack && 0 == String.Compare (Request.HttpMethod, "POST", true, CultureInfo.InvariantCulture)) {
+				resp.setRenderParameter ("__VIEWSTATE", GetSavedViewState ());
+				if (ClientScript.hiddenFields != null)
+					foreach (string key in ClientScript.hiddenFields.Keys)
+						resp.setRenderParameter (key, (string) ClientScript.hiddenFields [key]);
+			}
+
 			// Stop processing only if we are handling processAction. If we
 			// are handling a postback from render then fall through.
-			return req.processActionOnly() || resp.isRedirected();
+			return req.processActionOnly ();
 		}
 	}
 }
Index: resources/MaintainScrollPositionOnPostBack.js
===================================================================
--- resources/MaintainScrollPositionOnPostBack.js	(revision 71581)
+++ resources/MaintainScrollPositionOnPostBack.js	(working copy)
@@ -1,23 +1,27 @@
 function WebForm_SaveScrollPositionSubmit() {
-    theForm.elements['__SCROLLPOSITIONX'].value = WebForm_GetScrollX();
-    theForm.elements['__SCROLLPOSITIONY'].value = WebForm_GetScrollY();
+    this.elements['__SCROLLPOSITIONX'].value = WebForm_GetScrollX();
+    this.elements['__SCROLLPOSITIONY'].value = WebForm_GetScrollY();
     if ((typeof(this.oldSubmit) != "undefined") && (this.oldSubmit != null)) {
         return this.oldSubmit();
     }
     return true;
 }
 function WebForm_SaveScrollPositionOnSubmit() {
-    theForm.elements['__SCROLLPOSITIONX'].value = WebForm_GetScrollX();
-    theForm.elements['__SCROLLPOSITIONY'].value = WebForm_GetScrollY();
+    this.elements['__SCROLLPOSITIONX'].value = WebForm_GetScrollX();
+    this.elements['__SCROLLPOSITIONY'].value = WebForm_GetScrollY();
     if ((typeof(this.oldOnSubmit) != "undefined") && (this.oldOnSubmit != null)) {
         return this.oldOnSubmit();
     }
     return true;
 }
-function WebForm_RestoreScrollPosition() {
-    window.scrollTo(theForm.elements['__SCROLLPOSITIONX'].value, theForm.elements['__SCROLLPOSITIONY'].value);
-    if ((typeof(theForm.oldOnLoad) != "undefined") && (theForm.oldOnLoad != null)) {
-        return theForm.oldOnLoad();
+function WebForm_RestoreScrollPosition(currForm) {
+	currForm = currForm || theForm;
+	var ScrollX = currForm.elements['__SCROLLPOSITIONX'].value;
+	var ScrollY = currForm.elements['__SCROLLPOSITIONY'].value;
+	if (ScrollX != "" || ScrollY != "")
+    	window.scrollTo(ScrollX, ScrollY);
+    if ((typeof(this.oldOnLoad) != "undefined") && (this.oldOnLoad != null)) {
+        return this.oldOnLoad();
     }
     return true;
 }
Index: resources/callback.js
===================================================================
--- resources/callback.js	(revision 71581)
+++ resources/callback.js	(working copy)
@@ -1,7 +1,8 @@
-
 function WebForm_DoCallback (id, arg, callback, ctx, errorCallback)
 {
-	var qs = WebForm_getFormData () + "&__CALLBACKTARGET=" + id + "&&__CALLBACKARGUMENT=" + escape(arg);
+	var myForm = WebForm_GetFormFromCtrl (id);
+	var qs = WebForm_getFormData (myForm) + "&__CALLBACKTARGET=" + id + "&&__CALLBACKARGUMENT=" + escape(arg);
+	// WebForm_httpPost (myForm.serverURL, qs, function (httpPost) { WebForm_ClientCallback (httpPost, ctx, callback, errorCallback); });
 	WebForm_httpPost (document.URL, qs, function (httpPost) { WebForm_ClientCallback (httpPost, ctx, callback, errorCallback); });
 }
 
@@ -17,7 +18,7 @@
 	callback (doc, ctx);
 }
 
-function WebForm_getFormData ()
+function WebForm_getFormData (theForm)
 {
 	var qs = "";
 	var len = theForm.elements.length;
Index: resources/webform.js
===================================================================
--- resources/webform.js	(revision 71581)
+++ resources/webform.js	(working copy)
@@ -30,8 +30,7 @@
 
 function WebForm_AutoFocus (id)
 {
-	var x = document.getElementById ? document.getElementById (id) :
-					  ((document.all) ? document.all [id] : null);
+	var x = WebForm_GetElementById (id);
 
 	if (x && (!WebForm_CanFocus(x))) {
 		x = WebForm_FindFirstFocusableChild(x);
@@ -95,13 +94,14 @@
 	return false;
 }
 
-function WebForm_ReEnableControls()
+function WebForm_ReEnableControls (currForm)
 {
-	if (typeof (theForm) == 'undefined')
+	currForm = currForm || theForm;
+	if (typeof (currForm) == 'undefined')
 		return;
 
-	for (var i = 0; i < theForm.childNodes.length; i ++) {
-		var node = theForm.childNodes[i];
+	for (var i = 0; i < currForm.childNodes.length; i ++) {
+		var node = currForm.childNodes[i];
 		if (node.disabled && wasControlEnabled (node.id))
 			node.disabled = false;
 	}
@@ -112,13 +112,33 @@
 	if (pval && typeof(Page_ClientValidate) == "function" && !Page_ClientValidate(vg))
 		return;
 
+	var form = WebForm_GetFormFromCtrl (ctrl);
 	if (url != null)
-		theForm.action = url;
+		form.action = url;
 		
 	if (csubm)
 		__doPostBack (ctrl, par);
 }
 
+function WebForm_GetFormFromCtrl (id)
+{
+	// We need to translate the id from ASPX UniqueID to its ClientID.
+	var ctrl = WebForm_GetElementById (id.replace(/:/g, "_"));
+	while (ctrl != null) {
+		if (ctrl.isAspForm)
+			return ctrl;
+		ctrl = ctrl.parentNode;
+	}
+	return theForm;
+}
+
+function WebForm_GetElementById (id)
+{
+	return document.getElementById ? document.getElementById (id) :
+	       document.all ? document.all [id] :
+		   document [id];
+}
+
 function WebForm_FireDefaultButton(event, target)
 {
 	if (event.keyCode != 13) {
@@ -127,7 +147,7 @@
 	if(event.srcElement && (event.srcElement.tagName.toLowerCase() == "textarea")) {
 		return true;
 	}
-	var defaultButton = document.getElementById(target);
+	var defaultButton = WebForm_GetElementById(target);
 	if (defaultButton && typeof(defaultButton.click) != "undefined") {
 		defaultButton.click();
 		event.cancelBubble = true;
Index: System.Web.UI.WebControls/TreeView.js
===================================================================
--- System.Web.UI.WebControls/TreeView.js	(revision 71581)
+++ System.Web.UI.WebControls/TreeView.js	(working copy)
@@ -17,7 +17,8 @@
 	
 	node.style.display = expand ? "block" : "none";
 	
-	var inputStates = document.forms[0][treeId + "_ExpandStates"];
+	var myForm = WebForm_GetFormFromCtrl (treeId);
+	var inputStates = myForm [treeId + "_ExpandStates"];
 	TreeView_SetNodeFlag (inputStates, nodeId, expand);
 	
 	if (tree.showImage) {
@@ -59,7 +60,8 @@
 	if (data != "*") {
 		node.innerHTML = data;
 	    TreeView_ToggleExpand (idArray[0], idArray[1]);
-	    TreeView_SetNodeFlag (document.forms[0][idArray[0] + "_PopulatedStates"], idArray[1], true);
+		var myForm = WebForm_GetFormFromCtrl (treeId);
+	    TreeView_SetNodeFlag (myForm [idArray[0] + "_PopulatedStates"], idArray[1], true);
 	} else {
 		if (tree.showImage && tree.noExpandImage != null) {
 			var image = document.getElementById (spanId + "_img");
