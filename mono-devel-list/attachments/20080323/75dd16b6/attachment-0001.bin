Index: class/System.Web/Test/mainsoft/NunitWebResources/adapters.browser
===================================================================
--- class/System.Web/Test/mainsoft/NunitWebResources/adapters.browser	(revision 98842)
+++ class/System.Web/Test/mainsoft/NunitWebResources/adapters.browser	(working copy)
@@ -3,7 +3,7 @@
     <windir>\Microsoft.NET\Framework\<ver>\CONFIG\Browsers
 -->
 <browsers>
-  <browser refID="Default">
+  <browser refID="testUserAgent">
   	<capture>
   		<userAgent match="^(?'refuacapturename'.*)$" />
   	</capture>
Index: class/System.Web/Test/mainsoft/NunitWebResources/TestCapability.browser
===================================================================
--- class/System.Web/Test/mainsoft/NunitWebResources/TestCapability.browser	(revision 98842)
+++ class/System.Web/Test/mainsoft/NunitWebResources/TestCapability.browser	(working copy)
@@ -1,14 +1,7 @@
 <browsers>
-	<defaultBrowser id="Default">
-		<capture>
-		</capture>
-		<capabilities>
-		</capabilities>
-		<controlAdapters />
-	</defaultBrowser>
-	<browser id="Default">
+	<browser id="testUserAgent" parentID="Default">
 		<identification>
-	  		<userAgent match="^(?'capturename'.*)$" />
+	  		<userAgent match="^(?'capturename'testUserAgent)$" />
 		</identification>
 		<capture>
 		</capture>
@@ -19,4 +12,10 @@
 		</capabilities>
 		<controlAdapters />
 	</browser>
+	<browser refID="IE6to9">
+		<capabilities>
+			<capability name="addedInIE6to9RefNode" value="added" />
+		</capabilities>
+		<controlAdapters />
+	</browser>
 </browsers>
Index: class/System.Web/Test/mainsoft/ChangeLog
===================================================================
--- class/System.Web/Test/mainsoft/ChangeLog	(revision 98842)
+++ class/System.Web/Test/mainsoft/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2008-03-23  Dean Brettle <dean@brettle.com>
+
+	* NunitWebResources/adapters.browser, 
+	NunitWebResources/TestCapability.browser: modified to work and
+	support tests of browser defs in 
+	etc/mono/2.0/Browsers/Compat.browser.
+
 2008-03-09  Dean Brettle <dean@brettle.com> 
 
 	* add new resources: 
Index: class/System.Web/Test/System.Web/AppBrowsersTest.cs
===================================================================
--- class/System.Web/Test/System.Web/AppBrowsersTest.cs	(revision 98842)
+++ class/System.Web/Test/System.Web/AppBrowsersTest.cs	(working copy)
@@ -81,13 +81,33 @@
 			Assert.AreEqual ("added", caps["addedInRefNode"], "AppBrowsersCapabilities #5");
 			Assert.AreEqual ("changed", caps["changedInRefNode"], "AppBrowsersCapabilities #6");
 			Assert.AreEqual ("uaInRef:testUserAgent", caps["capturedInRefNode"], "AppBrowsersCapabilities #7");
+			// This property is inherited from browscap.ini
+			Assert.AreEqual ("0", caps["majorver"], "AppBrowsersCapabilities #8");
 		}
 		
 		[Test]
 		[Category ("NunitWeb")]
+		public void CompatBrowserIE7 () 
+		{
+			WebTest t = new WebTest (PageInvoker.CreateOnLoad (CompatBrowserIE7_OnLoad));
+			t.Request.UserAgent = "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)";
+			t.Run ();
+		}
+				
+		public static void CompatBrowserIE7_OnLoad (Page p) 
+		{
+			HttpRequest request = p.Request;
+			HttpCapabilitiesBase caps = request.Browser;
+
+			Assert.AreEqual ("added", caps["addedInIE6to9RefNode"], "CompatBrowserIE7 #1");
+		}
+
+		[Test]
+		[Category ("NunitWeb")]
 		public void TagWriter() 
 		{
 			WebTest t = new WebTest (PageInvoker.CreateOnLoad (TagWriter_OnLoad));
+			t.Request.UserAgent = "testUserAgent";
 			t.Run ();
 		}
 
@@ -104,6 +124,7 @@
 		public void CreateHtmlTextWriter() 
 		{
 			WebTest t = new WebTest (PageInvoker.CreateOnLoad (CreateHtmlTextWriter_OnLoad));
+			t.Request.UserAgent = "testUserAgent";
 			t.Run ();
 			Assert.IsTrue(t.Response.Body.Contains(@"renderedby=""CustomHtmlTextWriter"""), 
 				"CreateHtmlTextWriter #2");
@@ -123,8 +144,9 @@
 		[Category ("NunitWeb")]
 		public void Adapter ()
 		{
-		        WebTest t = new WebTest (PageInvoker.CreateOnInit (Adapter_Init));
-		        string html = t.Run ();
+			WebTest t = new WebTest (PageInvoker.CreateOnInit (Adapter_Init));
+			t.Request.UserAgent = "testUserAgent";
+			string html = t.Run ();
 		}
 		
 		public static void Adapter_Init (Page p)
@@ -145,8 +167,9 @@
 		[Category ("NunitWeb")]
 		public void ResolveAdapter_1 ()
 		{
-		        WebTest t = new WebTest (PageInvoker.CreateOnInit (ResolveAdapter_Init));
-		        string html = t.Run ();
+			WebTest t = new WebTest (PageInvoker.CreateOnInit (ResolveAdapter_Init));
+			t.Request.UserAgent = "testUserAgent";
+			string html = t.Run ();
 		}
 		
 		public static void ResolveAdapter_Init (Page p)
Index: class/System.Web/Test/System.Web/ChangeLog
===================================================================
--- class/System.Web/Test/System.Web/ChangeLog	(revision 98842)
+++ class/System.Web/Test/System.Web/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2008-03-23  Dean Brettle <dean@brettle.com>
+
+	* AppBrowsersTest.cs: added tests to ensure browscap.ini
+	etc/mono/2.0/Browsers/Compat.browser are being used when there
+	are App_Browser/*.browser files.
+
 2008-03-09  Dean Brettle <dean@brettle.com> 
 
 	* AppBrowsersTest.cs: added.  Includes tests for Control.Adapter,
Index: class/System.Web/Test/System.Web.UI/PageTest.cs
===================================================================
--- class/System.Web/Test/System.Web.UI/PageTest.cs	(revision 98842)
+++ class/System.Web/Test/System.Web.UI/PageTest.cs	(working copy)
@@ -36,6 +36,9 @@
 using System.Security.Principal;
 using System.Web;
 using System.Web.UI;
+#if NET_2_0
+using System.Web.UI.Adapters;
+#endif
 using MonoTests.SystemWeb.Framework;
 using MonoTests.stand_alone.WebHarness;
 using System.Web.UI.WebControls;
@@ -1145,13 +1148,27 @@
 		}
 
 		[Test]
-		public void PageAdapter ()
+		public void PageAdapterWithNoAdapter ()
 		{
 			Page p = new Page ();
 			Assert.AreEqual (null, p.PageAdapter, "PageAdapter");
 		}
 
 		[Test]
+		public void PageAdapterWithPageAdapter ()
+		{
+			TestPageWithAdapter p = new TestPageWithAdapter ();
+			Assert.AreEqual (p.page_adapter, p.PageAdapter, "PageAdapter");
+		}
+
+		[Test]
+		public void PageAdapterWithControlAdapter ()
+		{
+			TestPageWithControlAdapter p = new TestPageWithControlAdapter ();
+			Assert.AreEqual (null, p.PageAdapter, "PageAdapter");
+		}
+
+		[Test]
 		public void PreviousPage ()
 		{
 			// NUnit.Framework limitation for server.transfer	
@@ -1435,7 +1452,7 @@
 
 	public class TestPageWithAdapter : Page
 	{
-		private global::System.Web.UI.Adapters.PageAdapter page_adapter;
+		public global::System.Web.UI.Adapters.PageAdapter page_adapter;
 		
 		public TestPageWithAdapter () : base ()
 		{
@@ -1455,5 +1472,27 @@
 		}
 					
 	}
+	
+	public class TestControlAdapter : ControlAdapter
+	{
+	}
+
+	public class TestPageWithControlAdapter : Page
+	{
+		private global::System.Web.UI.Adapters.ControlAdapter control_adapter;
+		
+		public TestPageWithControlAdapter () : base ()
+		{
+			control_adapter = new TestControlAdapter ();
+			WebTest t = WebTest.CurrentTest;
+			if (t != null)
+				t.Invoke (this);
+		}
+		
+		protected override global::System.Web.UI.Adapters.ControlAdapter ResolveAdapter ()
+		{
+			return control_adapter;
+		}					
+	}
 #endif
 }
Index: class/System.Web/Test/System.Web.UI/ChangeLog
===================================================================
--- class/System.Web/Test/System.Web.UI/ChangeLog	(revision 98842)
+++ class/System.Web/Test/System.Web.UI/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2008-03-23  Dean Brettle <dean@brettle.com>
+
+	* PageTest.cs: added tests to ensure that using a 
+	ControlAdapter that is not of the type corresponding to the 
+	control doesn't	cause a cast error.
+
 2008-03-09  Dean Brettle <dean@brettle.com> 
 
 	* PageTest.cs: add tests for using a PageAdapter.
Index: class/System.Web/Test/System.Web.UI.WebControls/ChangeLog
===================================================================
--- class/System.Web/Test/System.Web.UI.WebControls/ChangeLog	(revision 98842)
+++ class/System.Web/Test/System.Web.UI.WebControls/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2008-03-23  Dean Brettle <dean@brettle.com>
+
+	* DataBoundControlTest.cs, HierarchicalDataBoundControlTest.cs,
+	WebControlTest.cs: added tests to ensure that using a 
+	ControlAdapter that is not of the type corresponding to the 
+	control doesn't	cause a cast error.
+
 2008-03-09  Dean Brettle <dean@brettle.com> 
 
 	* MenuTest.cs (Menu_RenderStaticItems): added tests to check that
Index: class/System.Web/Test/System.Web.UI.WebControls/HierarchicalDataBoundControlTest.cs
===================================================================
--- class/System.Web/Test/System.Web.UI.WebControls/HierarchicalDataBoundControlTest.cs	(revision 98842)
+++ class/System.Web/Test/System.Web.UI.WebControls/HierarchicalDataBoundControlTest.cs	(working copy)
@@ -36,6 +36,7 @@
 using System.Text;
 using System.Web;
 using System.Web.UI;
+using System.Web.UI.Adapters;
 using System.Web.UI.WebControls;
 using System.Web.UI.WebControls.Adapters;
 using System.IO;
@@ -97,13 +98,13 @@
 				ValidateDataSource (dataSource);
 			}
 
-			internal HierarchicalDataBoundControlAdapter dataBoundControlAdapter;
+			internal ControlAdapter controlAdapter;
 			protected override global::System.Web.UI.Adapters.ControlAdapter ResolveAdapter ()
 			{
-				return dataBoundControlAdapter;
+				return controlAdapter;
 			}
-		}
-
+		}
+		
 		[Test]
 		public void HierarchicalDataBoundControl_DataBindFlow () {
 			Page p = new Page ();
@@ -130,16 +131,29 @@
 			}
 		}
 		
+		class MyControlAdapter : ControlAdapter
+		{
+		}
+
 		[Test]
 		public void PerformDataBinding_UsesAdapter ()
 		{
 			MyHierarchicalDataBoundControl c = new MyHierarchicalDataBoundControl ();
 			MyHierarchicalDataBoundControlAdapter a = new MyHierarchicalDataBoundControlAdapter();;
-			c.dataBoundControlAdapter = a;
+			c.controlAdapter = a;
 			c.DataBind ();
 			Assert.IsTrue (a.perform_data_binding_called, "PerformDataBinding_UsesAdapter");
 		}
 
+		[Test]
+		public void PerformDataBinding_WorksWithControlAdapter ()
+		{
+			MyHierarchicalDataBoundControl c = new MyHierarchicalDataBoundControl ();
+			MyControlAdapter a = new MyControlAdapter();;
+			c.controlAdapter = a;
+			c.DataBind ();
+		}
+
 	}
 }
 
Index: class/System.Web/Test/System.Web.UI.WebControls/WebControlTest.cs
===================================================================
--- class/System.Web/Test/System.Web.UI.WebControls/WebControlTest.cs	(revision 98842)
+++ class/System.Web/Test/System.Web.UI.WebControls/WebControlTest.cs	(working copy)
@@ -39,6 +39,7 @@
 using System.Web.UI.WebControls;
 using MonoTests.stand_alone.WebHarness;
 #if NET_2_0
+using System.Web.UI.Adapters;
 using System.Web.UI.WebControls.Adapters;
 #endif
 
@@ -667,6 +668,15 @@
 		}
 
 #if NET_2_0
+		class MyControlAdapter : ControlAdapter
+		{
+			protected override void Render (HtmlTextWriter w)
+			{
+				w.WriteLine("MyControlAdapter.Render");
+			}
+
+		}
+		
 		class MyWebControlAdapter : WebControlAdapter
 		{
 			protected override void RenderBeginTag (HtmlTextWriter w)
@@ -687,24 +697,35 @@
 		
 		class MyWebControl : WebControl
 		{
-			WebControlAdapter my_web_control_adapter = new MyWebControlAdapter();
+			public ControlAdapter my_control_adapter = new MyWebControlAdapter();
 			protected override global::System.Web.UI.Adapters.ControlAdapter ResolveAdapter ()
 			{
-				return my_web_control_adapter;
+				return my_control_adapter;
 			}
 		}
 		
 		[Test]
-		public void Render ()
+		public void RenderWithWebControlAdapter ()
 		{
 			MyWebControl c = new MyWebControl ();
 			StringWriter sw = new StringWriter ();
 			HtmlTextWriter w = new HtmlTextWriter (sw);			
 			c.Render (w);
-			Assert.AreEqual ("RenderBeginTag\nRenderContents\nRenderEndTag\n", sw.ToString (), "Render #1");
+			Assert.AreEqual ("RenderBeginTag\nRenderContents\nRenderEndTag\n", sw.ToString (), "RenderWithWebControlAdapter #1");
 		}
 
 		[Test]
+		public void RenderWithControlAdapter ()
+		{
+			MyWebControl c = new MyWebControl ();
+			c.my_control_adapter = new MyControlAdapter ();
+			StringWriter sw = new StringWriter ();
+			HtmlTextWriter w = new HtmlTextWriter (sw);			
+			c.Render (w);
+			Assert.AreEqual ("MyControlAdapter.Render\n", sw.ToString (), "RenderWithControlAdapter #1");
+		}
+
+		[Test]
 		public void IsEnabled ()
 		{
 			WebControl parent = new MyWebControl ();
Index: class/System.Web/Test/System.Web.UI.WebControls/DataBoundControlTest.cs
===================================================================
--- class/System.Web/Test/System.Web.UI.WebControls/DataBoundControlTest.cs	(revision 98842)
+++ class/System.Web/Test/System.Web.UI.WebControls/DataBoundControlTest.cs	(working copy)
@@ -35,6 +35,7 @@
 using System.Globalization;
 using System.Web;
 using System.Web.UI;
+using System.Web.UI.Adapters;
 using System.Web.UI.WebControls;
 using System.Web.UI.WebControls.Adapters;
 using System.Text;
@@ -165,10 +166,10 @@
 				return SelectArguments;
 			}
 			
-			internal DataBoundControlAdapter dataBoundControlAdapter;
+			internal ControlAdapter controlAdapter;
 			protected override global::System.Web.UI.Adapters.ControlAdapter ResolveAdapter ()
 			{
-				return dataBoundControlAdapter;
+				return controlAdapter;
 			}
 
 		}
@@ -352,6 +353,10 @@
 			c.DoEnsureDataBound ();
 		}
 
+		class MyControlAdapter : ControlAdapter
+		{
+		}
+		
 		class MyDataBoundControlAdapter : DataBoundControlAdapter
 		{
 			internal bool perform_data_binding_called;
@@ -360,17 +365,25 @@
 				perform_data_binding_called = true;
 			}
 		}
-		
+
 		[Test]
 		public void PerformDataBinding_UsesAdapter ()
 		{
 			MyDataBoundControl c = new MyDataBoundControl ();
 			MyDataBoundControlAdapter a = new MyDataBoundControlAdapter();;
-			c.dataBoundControlAdapter = a;
+			c.controlAdapter = a;
 			c.DataBind ();
 			Assert.IsTrue (a.perform_data_binding_called, "PerformDataBinding_UsesAdapter");
 		}
 
+		[Test]
+		public void PerformDataBinding_WorksWithControlAdapter ()
+		{
+			MyDataBoundControl c = new MyDataBoundControl ();
+			ControlAdapter a = new MyControlAdapter();;
+			c.controlAdapter = a;
+			c.DataBind ();
+		}
 	}
 }
 #endif
Index: class/System.Web/System.Web.Configuration_2.0/ChangeLog
===================================================================
--- class/System.Web/System.Web.Configuration_2.0/ChangeLog	(revision 98842)
+++ class/System.Web/System.Web.Configuration_2.0/ChangeLog	(working copy)
@@ -1,3 +1,22 @@
+2008-03-23  Dean Brettle <dean@brettle.com>
+
+	* CapabilitiesBuild.cs (Process), ICapabilitiesProcess.cs (Process),
+	nBrowser/Build.cs (Process): Added initialCapabilities argument to 
+	facilitate using browscap.ini capabilities.
+	
+	* CapabilitiesResult.cs (ctor), nBrowserResult.cs (ctor): Change 
+	items arg to IDictionary to	facilitate using browscap.ini capabilities.
+	
+	* nBrowser/Node.cs (Reset): Removed code which checked prohibited 
+	non-alphanumerics in id attributes because .NET is not that strict.
+	
+	* nBrowser/Node.cs (MergeFrom): Fixed NullReferenceExceptions that
+	occurred when the source or destination node did not have any
+	capabilities or adapters.
+	
+	* nBrowser/Result.cs (AddAdapter): Fixed to allow types in other
+	assemblies.
+
 2008-03-09  Dean Brettle <dean@brettle.com> 
 
 	* nBrowser/Result.cs, nBrowser/NodeTypes.cs, nBrowser/Identification.cs,
Index: class/System.Web/System.Web.Configuration_2.0/ICapabilitiesProcess.cs
===================================================================
--- class/System.Web/System.Web.Configuration_2.0/ICapabilitiesProcess.cs	(revision 98842)
+++ class/System.Web/System.Web.Configuration_2.0/ICapabilitiesProcess.cs	(working copy)
@@ -29,9 +29,9 @@
 
 	internal interface ICapabilitiesProcess
 	{
-		System.Web.Configuration.CapabilitiesResult Process(string userAgent);
-		System.Web.Configuration.CapabilitiesResult Process(System.Web.HttpRequest request);
-		System.Web.Configuration.CapabilitiesResult Process(System.Collections.Specialized.NameValueCollection header);
+		System.Web.Configuration.CapabilitiesResult Process(string userAgent, System.Collections.IDictionary initialCapabilities);
+		System.Web.Configuration.CapabilitiesResult Process(System.Web.HttpRequest request, System.Collections.IDictionary initialCapabilities);
+		System.Web.Configuration.CapabilitiesResult Process(System.Collections.Specialized.NameValueCollection header, System.Collections.IDictionary initialCapabilities);
 	}
 }
 #endif
Index: class/System.Web/System.Web.Configuration_2.0/CapabilitiesBuild.cs
===================================================================
--- class/System.Web/System.Web.Configuration_2.0/CapabilitiesBuild.cs	(revision 98842)
+++ class/System.Web/System.Web.Configuration_2.0/CapabilitiesBuild.cs	(working copy)
@@ -44,36 +44,39 @@
 		/// 
 		/// </summary>
 		/// <param name="userAgent"></param>
+		/// <param name="initialCapabilities"></param>
 		/// <returns></returns>
-		public System.Web.Configuration.CapabilitiesResult Process(string userAgent)
+		public System.Web.Configuration.CapabilitiesResult Process(string userAgent, System.Collections.IDictionary initialCapabilities)
 		{
 			System.Collections.Specialized.NameValueCollection header;
 			header = new System.Collections.Specialized.NameValueCollection(1);
 			header.Add("User-Agent", userAgent);
-			return Process(header);
+			return Process(header, initialCapabilities);
 		}
 		/// <summary>
 		/// 
 		/// </summary>
 		/// <param name="request"></param>
+		/// <param name="initialCapabilities"></param>
 		/// <returns></returns>
-		public System.Web.Configuration.CapabilitiesResult Process(System.Web.HttpRequest request)
+		public System.Web.Configuration.CapabilitiesResult Process(System.Web.HttpRequest request, System.Collections.IDictionary initialCapabilities)
 		{
 			if (request != null)
 			{
-				return Process(request.Headers);
+				return Process(request.Headers, initialCapabilities);
 			}
 			else
 			{
-				return Process("");
+				return Process("", initialCapabilities);
 			}
 		}
 		/// <summary>
 		/// 
 		/// </summary>
 		/// <param name="header"></param>
+		/// <param name="initialCapabilities"></param>
 		/// <returns></returns>
-		public abstract System.Web.Configuration.CapabilitiesResult Process(System.Collections.Specialized.NameValueCollection header);
+		public abstract System.Web.Configuration.CapabilitiesResult Process(System.Collections.Specialized.NameValueCollection header, System.Collections.IDictionary initialCapabilities);
 		/// <summary>
 		/// Creates a Checksum from the Header values used by the Browser Detection System.
 		/// </summary>
Index: class/System.Web/System.Web.Configuration_2.0/nBrowser/Result.cs
===================================================================
--- class/System.Web/System.Web.Configuration_2.0/nBrowser/Result.cs	(revision 98842)
+++ class/System.Web/System.Web.Configuration_2.0/nBrowser/Result.cs	(working copy)
@@ -34,7 +34,7 @@
 		private System.Collections.Specialized.StringCollection Track;
 		internal Type MarkupTextWriter;
 
-		internal Result(System.Collections.Generic.Dictionary<string, string> items)
+		internal Result(System.Collections.IDictionary items)
 			: base(items)
 		{
 			AdapterTypeMap = new System.Collections.Generic.Dictionary<Type, Type>();
@@ -56,15 +56,26 @@
 		/// <param name="adapterTypeName"></param>
 		internal void AddAdapter(string controlTypeName, string adapterTypeName)
 		{
-			Type controlType = System.Type.GetType(controlTypeName); // case-sensitive
-			if (controlType == null)
-				controlType = System.Type.GetType(controlTypeName, true, true); // case-insensitive, throw if not found
-			Type adapterType = System.Type.GetType(adapterTypeName); // case-sensitive
-			if (adapterType == null)
-				adapterType = System.Type.GetType(adapterTypeName, true, true); // case-insensitive, throw if not found
-				
+			Type controlType = FindType(controlTypeName);
+			Type adapterType = FindType(adapterTypeName);
 			AdapterTypeMap[controlType] = adapterType;
 		}
+		
+		private Type FindType(string typeName)
+		{
+			foreach (System.Reflection.Assembly a in System.AppDomain.CurrentDomain.GetAssemblies())
+			{
+				string fullTypeName = typeName + "," + a.FullName;
+				Type t = System.Type.GetType(fullTypeName); // case-sensitive
+				if (t != null)
+					return t;
+				t = System.Type.GetType(fullTypeName, false, true); // case-insensitive
+				if (t != null)
+					return t;
+			}
+			throw new TypeLoadException(typeName);
+		}
+		
 		/// <summary>
 		/// 
 		/// </summary>
Index: class/System.Web/System.Web.Configuration_2.0/nBrowser/Build.cs
===================================================================
--- class/System.Web/System.Web.Configuration_2.0/nBrowser/Build.cs	(revision 98842)
+++ class/System.Web/System.Web.Configuration_2.0/nBrowser/Build.cs	(working copy)
@@ -190,7 +190,7 @@
 					{
 						parent = this.GetNode(child.ParentId);
 						if (parent == null)
-							throw new nBrowser.Exception(String.Format("Parent not found with = {0}", child.ParentId));
+							throw new nBrowser.Exception(String.Format("Parent not found with id = {0}", child.ParentId));
 					}
 					if (parent == null)
 						parent = browser;
@@ -298,10 +298,13 @@
 		/// 
 		/// </summary>
 		/// <param name="header"></param>
+		/// <param name="initialCapabilities"></param>
 		/// <returns></returns>
-		public override System.Web.Configuration.CapabilitiesResult Process(System.Collections.Specialized.NameValueCollection header)
+		public override System.Web.Configuration.CapabilitiesResult Process(System.Collections.Specialized.NameValueCollection header, System.Collections.IDictionary initialCapabilities)
 		{
-			System.Web.Configuration.nBrowser.Result r = new System.Web.Configuration.nBrowser.Result(new System.Collections.Generic.Dictionary<string, string>(StringComparer.CurrentCultureIgnoreCase));
+			if (initialCapabilities == null)
+				initialCapabilities = new System.Collections.Generic.Dictionary<string, string>(StringComparer.CurrentCultureIgnoreCase);
+			System.Web.Configuration.nBrowser.Result r = new System.Web.Configuration.nBrowser.Result(initialCapabilities);
 
 #if trace
 			System.Diagnostics.Trace.WriteLine(string.Join("+", new string[50]));
@@ -310,7 +313,7 @@
 				System.Diagnostics.Trace.WriteLine(string.Format("{0}{1}",header.GetKey(i).PadRight(25),header[i]));
 			}
 			System.Diagnostics.Trace.WriteLine(string.Join("+", new string[50]));
-#endif
+#endif			
 			return Browser().Process(header, r, new System.Collections.Generic.List<System.Web.Configuration.nBrowser.Identification>());
 		}
 		/// <summary>
Index: class/System.Web/System.Web.Configuration_2.0/nBrowser/Node.cs
===================================================================
--- class/System.Web/System.Web.Configuration_2.0/nBrowser/Node.cs	(revision 98842)
+++ class/System.Web/System.Web.Configuration_2.0/nBrowser/Node.cs	(working copy)
@@ -435,30 +435,6 @@
 					RefId = xmlNode.Attributes[a].Value.ToLower(System.Globalization.CultureInfo.CurrentCulture);
 				}
 			}
-			//I include bother upper and lower case so I do not run into trying to compare case and dealing
-			//with CultureInfo stuff, Less hoops, should be faster I hope.
-			const string values = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890";
-			for (int a = 0;a <= Id.Length - 1;a++)
-			{
-				if (values.IndexOf(Id.Substring(a, 1)) == -1)
-				{
-					throw new nBrowser.Exception("Invalid Charactors In ID name");
-				}
-			}
-			for (int a = 0;a <= ParentId.Length - 1;a++)
-			{
-				if (values.IndexOf(ParentId.Substring(a, 1)) == -1)
-				{
-					throw new nBrowser.Exception("Invalid Charactors In parentID name");
-				}
-			}
-			for (int a = 0;a <= RefId.Length - 1;a++)
-			{
-				if (values.IndexOf(RefId.Substring(a, 1)) == -1)
-				{
-					throw new nBrowser.Exception("Invalid Charactors In refID name");
-				}
-			}
 
 			for (int a = 0;a <= xmlNode.ChildNodes.Count - 1;a++)
 			{
@@ -929,7 +905,6 @@
 			}
 
 			string f = this.FileName;
-			f = f.Substring(f.LastIndexOfAny("\\".ToCharArray()) + 1);
 			xmlwriter.WriteStartElement(this.NameType.ToString());
 			xmlwriter.WriteAttributeString("FileName", f);
 			xmlwriter.WriteAttributeString("ID", this.Id);
@@ -1054,8 +1029,13 @@
 		/// <param name="n">node to merge with this node</param>
 		public void MergeFrom(Node n)
 		{
-			foreach (string capName in n.Capabilities)
-				Capabilities[capName] = n.Capabilities[capName];
+			if (n.Capabilities != null)
+			{
+				if (Capabilities == null)
+					Capabilities =  new System.Collections.Specialized.NameValueCollection(n.Capabilities.Count);
+				foreach (string capName in n.Capabilities)
+					Capabilities[capName] = n.Capabilities[capName];
+			}
 			
 			int newLength = 0;
 			if (Capture != null)
@@ -1066,14 +1046,19 @@
 			if (Capture != null)
 				Array.Copy(Capture, 0, newCapture, 0, Capture.Length);
 			if (n.Capture != null)
-				Array.Copy(n.Capture, 0, newCapture, Capture.Length, n.Capture.Length);
+				Array.Copy(n.Capture, 0, newCapture, (Capture != null ? Capture.Length : 0), n.Capture.Length);
 			Capture = newCapture;
 			
 			if (n.MarkupTextWriterType != null && n.MarkupTextWriterType.Length > 0)
 				MarkupTextWriterType = n.MarkupTextWriterType;
 			
-			foreach (string controlType in n.Adapter)
-				Adapter[controlType] = n.Adapter[controlType];			
+			if (n.Adapter != null)
+			{
+				if (Adapter == null)
+					Adapter = new System.Collections.Specialized.NameValueCollection();
+				foreach (string controlType in n.Adapter)
+					Adapter[controlType] = n.Adapter[controlType];
+			}
 		}
 	}
 }
Index: class/System.Web/System.Web.Configuration_2.0/CapabilitiesResult.cs
===================================================================
--- class/System.Web/System.Web.Configuration_2.0/CapabilitiesResult.cs	(revision 98842)
+++ class/System.Web/System.Web.Configuration_2.0/CapabilitiesResult.cs	(working copy)
@@ -36,7 +36,7 @@
 		/// <param name="items">
 		/// This is the data which this class will be handle request made though this class.
 		/// </param>
-		internal CapabilitiesResult(System.Collections.Generic.Dictionary<string, string> items)
+		internal CapabilitiesResult(System.Collections.IDictionary items)
 			: base()
 		{
 			base.Capabilities = items;
Index: class/System.Web/System.Web/ChangeLog
===================================================================
--- class/System.Web/System.Web/ChangeLog	(revision 98842)
+++ class/System.Web/System.Web/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2008-03-23  Dean Brettle <dean@brettle.com>
+
+	* HttpApplicationFactory.cs (CapabilitiesProcessor): changed to
+	use etc/mono/2.0/Browser/*.browser files in addition to 
+	~/App_Browsers/*.browser files.
+
 2008-03-13  Marek Habersack  <mhabersack@novell.com>
 
 	* HttpApplicationFactory.cs: use HttpApplication.BinDirs to
Index: class/System.Web/System.Web/HttpApplicationFactory.cs
===================================================================
--- class/System.Web/System.Web/HttpApplicationFactory.cs	(revision 98842)
+++ class/System.Web/System.Web/HttpApplicationFactory.cs	(working copy)
@@ -392,7 +392,7 @@
 					acc.Compile ();
 					
 					// Note whether there are any App_Browsers/*.browser files.  If there
-					// are we will be using *.browser files for sniffing instead of browscap.ini
+					// are we will be using *.browser files for sniffing in addition to browscap.ini
 					string app_browsers_path = Path.Combine (physical_app_path, "App_Browsers");
 					app_browsers_files = new string[0];
 					if (Directory.Exists (app_browsers_path)) {
@@ -586,8 +586,17 @@
 				lock (capabilities_processor_lock) {
 					if (capabilities_processor == null) {
 						capabilities_processor = new System.Web.Configuration.nBrowser.Build();
-						foreach (string f in app_browsers_files)
+						string machine_browsers_path = Path.Combine (HttpRuntime.MachineConfigurationDirectory, "Browsers");
+						if (Directory.Exists (machine_browsers_path)) {
+							string[] machine_browsers_files 
+								= Directory.GetFiles (machine_browsers_path, "*.browser");
+							foreach (string f in machine_browsers_files) {
+								capabilities_processor.AddBrowserFile(f);
+							}
+						}
+						foreach (string f in app_browsers_files) {
 							capabilities_processor.AddBrowserFile(f);
+						}
 					}
 				}
 				return capabilities_processor;
Index: class/System.Web/System.Web.UI/ChangeLog
===================================================================
--- class/System.Web/System.Web.UI/ChangeLog	(revision 98842)
+++ class/System.Web/System.Web.UI/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2008-03-23  Dean Brettle <dean@brettle.com>
+
+	* Page.cs (PageAdapter): fixed cast error when a ControlAdapter that wasn't a
+	PageAdapter was used.
+
 2008-03-13  Marek Habersack  <mhabersack@novell.com>
 
 	* TemplateParser.cs: HttpApplication.BinaryDirectories property no longer
Index: class/System.Web/System.Web.UI/Page.cs
===================================================================
--- class/System.Web/System.Web.UI/Page.cs	(revision 98842)
+++ class/System.Web/System.Web.UI/Page.cs	(working copy)
@@ -447,7 +447,7 @@
 #if NET_2_0
 	public PageAdapter PageAdapter {
 		get {
-			return (PageAdapter)Adapter;
+			return Adapter as PageAdapter;
 		}
 	}
 
Index: class/System.Web/System.Web.Configuration/HttpCapabilitiesBase.cs
===================================================================
--- class/System.Web/System.Web.Configuration/HttpCapabilitiesBase.cs	(revision 98842)
+++ class/System.Web/System.Web.Configuration/HttpCapabilitiesBase.cs	(working copy)
@@ -83,15 +83,11 @@
 		{
 			string ua = GetUserAgentForDetection (request);
 
-			HttpBrowserCapabilities bcap = null;
+			HttpBrowserCapabilities bcap = GetHttpBrowserCapabilitiesFromBrowscapini(ua);
 #if NET_2_0
 			GetConfigCapabilities_called = true;
 			if (HttpApplicationFactory.AppBrowsersFiles.Length > 0)
-				bcap = HttpApplicationFactory.CapabilitiesProcessor.Process(request);
-			else
-				bcap = GetHttpBrowserCapabilitiesFromBrowscapini(ua);
-#else
-			bcap = GetHttpBrowserCapabilitiesFromBrowscapini(ua);
+				bcap = HttpApplicationFactory.CapabilitiesProcessor.Process(request, bcap.Capabilities);
 #endif
 			bcap.useragent = ua;
 			bcap.Init ();
Index: class/System.Web/System.Web.Configuration/ChangeLog
===================================================================
--- class/System.Web/System.Web.Configuration/ChangeLog	(revision 98842)
+++ class/System.Web/System.Web.Configuration/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2008-03-23  Dean Brettle <dean@brettle.com>
+
+	* HttpCapabilitiesBase.cs (GetConfigCapabilities): changed to use
+	browscap.ini for default capabilities when *.browser files are
+	present, so we don't need to maintain browser capabilities in two
+	places.
+
 2008-03-09  Dean Brettle <dean@brettle.com> 
 
 	* HttpCapabilitiesBase.cs: changed to use nBrowser for *.browser 
Index: class/System.Web/System.Web.UI.WebControls/DataBoundControl.cs
===================================================================
--- class/System.Web/System.Web.UI.WebControls/DataBoundControl.cs	(revision 98842)
+++ class/System.Web/System.Web.UI.WebControls/DataBoundControl.cs	(working copy)
@@ -224,7 +224,7 @@
 		
 		protected void InternalPerformDataBinding (IEnumerable data)
 		{
-			DataBoundControlAdapter adapter = (DataBoundControlAdapter)Adapter;
+			DataBoundControlAdapter adapter = Adapter as DataBoundControlAdapter;
 			if (adapter != null)
 				adapter.PerformDataBinding (data);
 			else
Index: class/System.Web/System.Web.UI.WebControls/ChangeLog
===================================================================
--- class/System.Web/System.Web.UI.WebControls/ChangeLog	(revision 98842)
+++ class/System.Web/System.Web.UI.WebControls/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2008-03-23  Dean Brettle <dean@brettle.com>
+
+	* DataBoundControl.cs (InternalPerformDataBinding), 
+	HierarchicalDataBoundControl.cs (InternalPerformDataBinding),
+	WebControl.cs (Render): fixed cast errors when a ControlAdapter
+	that wasn't of the type corresponding to the control was used.
+
 2008-03-12  Vladimir Krasnov  <vladimirk@mainsoft.com>
 
 	* AutoGeneratedField.cs, CheckBoxField.cs: fixed OnDataBindField,
Index: class/System.Web/System.Web.UI.WebControls/HierarchicalDataBoundControl.cs
===================================================================
--- class/System.Web/System.Web.UI.WebControls/HierarchicalDataBoundControl.cs	(revision 98842)
+++ class/System.Web/System.Web.UI.WebControls/HierarchicalDataBoundControl.cs	(working copy)
@@ -137,7 +137,7 @@
 		protected void InternalPerformDataBinding ()
 		{
 			HierarchicalDataBoundControlAdapter adapter 
-				= (HierarchicalDataBoundControlAdapter)Adapter;
+				= Adapter as HierarchicalDataBoundControlAdapter;
 			if (adapter != null)
 				adapter.PerformDataBinding ();
 			else
Index: class/System.Web/System.Web.UI.WebControls/WebControl.cs
===================================================================
--- class/System.Web/System.Web.UI.WebControls/WebControl.cs	(revision 98842)
+++ class/System.Web/System.Web.UI.WebControls/WebControl.cs	(working copy)
@@ -576,8 +576,7 @@
 		{
 #if NET_2_0
 			if (Adapter != null) {
-				Adapters.WebControlAdapter wca = (Adapters.WebControlAdapter) Adapter;
-				wca.Render(writer);
+				Adapter.Render(writer);
 				return;
 			}
 #endif