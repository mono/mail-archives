Index: class/Mono.Security/Test/Mono.Security/StrongNameTest.cs
===================================================================
--- class/Mono.Security/Test/Mono.Security/StrongNameTest.cs	(revision 84541)
+++ class/Mono.Security/Test/Mono.Security/StrongNameTest.cs	(working copy)
@@ -840,6 +840,22 @@
 		}
 
 		[Test]
+		public void VerifyValidFromStream () 
+		{
+			Stream signed = new MemoryStream (signedData);
+			// verify that hellosigned.exe is valid
+			Assert ("Verify/Valid", sn.Verify (signed));
+		}
+
+		[Test]
+		public void VerifyInvalidFromStream () 
+		{
+			Stream delay = new MemoryStream (delayData);
+			// verify that hellodelay.exe isn't valid
+			Assert ("Verify/Invalid", !sn.Verify (delay));
+		}
+
+		[Test]
 		public void Sign () 
 		{
 			// sign the (invalid) hellodelay.exe
Index: class/Mono.Security/Mono.Security/StrongName.cs
===================================================================
--- class/Mono.Security/Mono.Security/StrongName.cs	(revision 84541)
+++ class/Mono.Security/Mono.Security/StrongName.cs	(working copy)
@@ -430,25 +430,31 @@
 
 		public bool Verify (string fileName) 
 		{
-			StrongNameSignature sn;
+			bool result = false;
 			using (FileStream fs = File.OpenRead (fileName)) {
-				sn = StrongHash (fs, StrongNameOptions.Signature);
+				result = Verify (fs);
 				fs.Close ();
 			}
+			return result;
+		}
+
+		public bool Verify (Stream stream)
+		{
+			StrongNameSignature sn = StrongHash (stream, StrongNameOptions.Signature);
 			if (sn.Hash == null) {
-				return false;
-			}
-
+                                return false;
+                        }
 			try {
-				AssemblyHashAlgorithm algorithm = AssemblyHashAlgorithm.SHA1;
-				if (tokenAlgorithm == "MD5")
-					algorithm = AssemblyHashAlgorithm.MD5;
-				return Verify (rsa, algorithm, sn.Hash, sn.Signature);
-			}
-			catch (CryptographicException) {
-				// no exception allowed
-				return false;
-			}
+                                AssemblyHashAlgorithm algorithm = AssemblyHashAlgorithm.SHA1;
+                                if (tokenAlgorithm == "MD5")
+                                        algorithm = AssemblyHashAlgorithm.MD5;
+                                return Verify (rsa, algorithm, sn.Hash, sn.Signature);
+                        }
+                        catch (CryptographicException) {
+                                // no exception allowed
+                                return false;
+                        }	
+			
 		}
 
 #if INSIDE_CORLIB
