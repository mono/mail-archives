using System;
using System.Threading;
using System.Reflection;

namespace App {
	class AppDomain2 : MarshalByRefObject {
		public static void Main()
		{
			AppDomain domain = AppDomain.CreateDomain("MyDomain", null);
			AppDomain2 other = (AppDomain2) domain.CreateInstanceAndUnwrap ("unload", "App.AppDomain2");
			ThreadPool.QueueUserWorkItem (other.Start);
			AppDomain.Unload(domain);
			Console.WriteLine ("Done unloading");
			try {
				Console.WriteLine();
				Console.WriteLine("Host domain: " + AppDomain.CurrentDomain.FriendlyName);
				// The following statement creates an exception because the domain no longer exists.
				Console.WriteLine("child domain: " + domain.FriendlyName);
			} catch (AppDomainUnloadedException) {
				Console.WriteLine("The appdomain MyDomain does not exist.");
			}
		}
		
		public void Start (object unused)
		{
			try {
				Thread.Sleep (10000);
			} catch (ThreadAbortException e) {
				Console.WriteLine ("Other domain is dying: {0} {1}", e.GetType (), e.Message);
				ThreadPool.QueueUserWorkItem (Start);
				Thread.ResetAbort ();
				Thread.Sleep (10000);
			}
		}
	}
}

