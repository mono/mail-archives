Index: ChangeLog
===================================================================
RCS file: /mono/mcs/class/corlib/System.Text/ChangeLog,v
retrieving revision 1.58
diff -u -r1.58 ChangeLog
--- ChangeLog	8 Mar 2004 19:10:22 -0000	1.58
+++ ChangeLog	10 Mar 2004 16:03:52 -0000
@@ -1,3 +1,11 @@
+2004-03-10  Juraj Skripsky <juraj@hotfeet.ch>
+
+	* StringBuilder.cs
+	(Insert int, char[]): fix by using new string(char[]) instead of
+	char[].ToString() and simplify.
+	(Insert int, string, int): add LAMESPEC note.
+	(Insert int char[], int, int): handle value==null according to spec. 
+
 2004-03-08  Gonzalo Paniagua Javier <gonzalo@ximian.com>
 
 	* StringBuilder.cs:
Index: StringBuilder.cs
===================================================================
RCS file: /mono/mcs/class/corlib/System.Text/StringBuilder.cs,v
retrieving revision 1.31
diff -u -r1.31 StringBuilder.cs
--- StringBuilder.cs	8 Mar 2004 19:10:22 -0000	1.31
+++ StringBuilder.cs	10 Mar 2004 16:03:53 -0000
@@ -456,23 +456,7 @@
 		
 		public StringBuilder Insert (int index, char[] value) 
 		{
-			if( index > _length || index < 0)
-				throw new ArgumentOutOfRangeException();
-
-			if (value == null || value.Length == 0)
-				return this;
-
-			InternalEnsureCapacity (_length + value.Length);
-
-			// Move everything to the right of the insert point across
-			String.InternalStrcpy (_str, index + value.Length, _str, index, _length - index);
-			
-			// Copy in stuff from the insert buffer
-			String.InternalStrcpy (_str, index, value.ToString());
-			
-			_length += value.Length;
-
-			return this;
+			return Insert (index, new string (value));
 		}
 				
 		public StringBuilder Insert (int index, string value) 
@@ -570,34 +554,34 @@
 
 		public StringBuilder Insert (int index, string value, int count) 
 		{
+			// LAMESPEC: The spec says to throw an exception if 
+			// count < 0, while MS throws even for count < 1!
 			if ( count < 0 )
 				throw new ArgumentOutOfRangeException();
 
-			if( value != null ) {
-				if( value != String.Empty ) {
-					for( int insertCount = 0; insertCount < count; 
-						insertCount++ ) {
-						Insert( index, value );	   
-					}
-				}
-			}
+			if (value != null && value != String.Empty)
+				for (int insertCount = 0; insertCount < count; insertCount++)
+					Insert( index, value );
 
 			return this;
 		}
 
-		public StringBuilder Insert( int index, char[] value, int startIndex, int charCount ) {
-			if (value != null) 
-			{
-				if( charCount < 0 || startIndex < 0 || startIndex + charCount > value.Length )
-					throw new ArgumentOutOfRangeException();
+		public StringBuilder Insert( int index, char[] value, int startIndex, int charCount )
+		{
+			if (value == null) {
+				if (startIndex == 0 && charCount == 0)
+					return this;
+				else
+					throw new ArgumentNullException();
+			}
 
-				char[] insertChars = new char[ charCount  ];
-				Array.Copy( value, startIndex, insertChars, 0, charCount );
+			if( charCount < 0 || startIndex < 0 || startIndex + charCount > value.Length )
+				throw new ArgumentOutOfRangeException();
 
-				return Insert( index, insertChars );
-			}
+			char[] insertChars = new char[ charCount  ];
+			Array.Copy( value, startIndex, insertChars, 0, charCount );
 
-			return this;
+			return Insert( index, insertChars );
 		}
 	
 		private void InternalEnsureCapacity (int size) 
