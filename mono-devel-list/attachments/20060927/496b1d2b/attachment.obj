Index: rules/Gendarme.Rules.Security/Gendarme.Rules.Security.csproj
===================================================================
--- rules/Gendarme.Rules.Security/Gendarme.Rules.Security.csproj	(Revision 65831)
+++ rules/Gendarme.Rules.Security/Gendarme.Rules.Security.csproj	(Arbeitskopie)
@@ -1,4 +1,4 @@
-<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+ï»¿<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
   <PropertyGroup>
     <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
     <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
@@ -49,6 +49,9 @@
       <Name>Gendarme.Framework</Name>
     </ProjectReference>
   </ItemGroup>
+  <ItemGroup>
+    <None Include="ChangeLog" />
+  </ItemGroup>
   <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
   <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
        Other similar extension points exist, see Microsoft.Common.targets.
Index: rules/Gendarme.Rules.Security/MethodCallWithSubsetLinkDemandRule.cs
===================================================================
--- rules/Gendarme.Rules.Security/MethodCallWithSubsetLinkDemandRule.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Security/MethodCallWithSubsetLinkDemandRule.cs	(Arbeitskopie)
@@ -62,7 +62,7 @@
 			return calleeLinkDemand.IsSubsetOf (GetLinkDemand (caller));
 		}
 
-		public IList CheckMethod (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, MethodDefinition method, Runner runner)
+		public MessageCollection CheckMethod (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, MethodDefinition method, Runner runner)
 		{
 			// #1 - rule apply to methods are publicly accessible
 			//	note that the type doesn't have to be public (indirect access)
Index: rules/Gendarme.Rules.Security/TypeLinkDemandRule.cs
===================================================================
--- rules/Gendarme.Rules.Security/TypeLinkDemandRule.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Security/TypeLinkDemandRule.cs	(Arbeitskopie)
@@ -37,7 +37,7 @@
 
 	public class TypeLinkDemandRule: ITypeRule {
 
-		public IList CheckType (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, Runner runner)
+		public MessageCollection CheckType (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, Runner runner)
 		{
 			// #1 - rule apply to types (and nested types) that are publicly visible
 			switch (type.Attributes & TypeAttributes.VisibilityMask) {
Index: rules/Gendarme.Rules.Security/SecureGetObjectDataOverridesRule.cs
===================================================================
--- rules/Gendarme.Rules.Security/SecureGetObjectDataOverridesRule.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Security/SecureGetObjectDataOverridesRule.cs	(Arbeitskopie)
@@ -52,7 +52,7 @@
 			}
 		}
 
-		public IList CheckMethod (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, MethodDefinition method, Runner runner)
+		public MessageCollection CheckMethod (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, MethodDefinition method, Runner runner)
 		{
 			// check that the method is called "GetObjectData"
 			if (method.Name != "GetObjectData")
Index: rules/Gendarme.Rules.Security/ChangeLog
===================================================================
--- rules/Gendarme.Rules.Security/ChangeLog	(Revision 65831)
+++ rules/Gendarme.Rules.Security/ChangeLog	(Arbeitskopie)
@@ -1,3 +1,13 @@
+2006-09-23  Christian Birkl  <christian.birkl@gmail.com>
+
+	* Gendarme.Rules.Security.csproj: Included ChangeLog
+	
+	* SealedTypeWithInheritanceDemandRule.cs, SecureGetObjectDataOverridesRule.cs,
+	TypeExposeFieldsRule.cs, TypeIsNotSubsetOfMethodSecurityRule.cs, TypeLinkDemandRule.cs, 
+	MethodCallWithSubsetLinkDemandRule.cs, NonVirtualMethodWithInheritanceDemandRule.cs:
+	Migrated untyped IList messages collection to typed MessageCollection 
+	class.
+	
 2006-09-20  Sebastien Pouliot  <sebastien@ximian.com>
 
 	* SecureGetObjectDataOverridesRule.cs: Update FIXME.
Index: rules/Gendarme.Rules.Security/TypeExposeFieldsRule.cs
===================================================================
--- rules/Gendarme.Rules.Security/TypeExposeFieldsRule.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Security/TypeExposeFieldsRule.cs	(Arbeitskopie)
@@ -37,7 +37,7 @@
 
 	public class TypeExposeFieldsRule : ITypeRule {
 
-		public IList CheckType (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, Runner runner)
+		public MessageCollection CheckType (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, Runner runner)
 		{
 			// #1 - rule apply to types (and nested types) that are publicly visible
 			switch (type.Attributes & TypeAttributes.VisibilityMask) {
Index: rules/Gendarme.Rules.Security/SealedTypeWithInheritanceDemandRule.cs
===================================================================
--- rules/Gendarme.Rules.Security/SealedTypeWithInheritanceDemandRule.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Security/SealedTypeWithInheritanceDemandRule.cs	(Arbeitskopie)
@@ -36,7 +36,7 @@
 
 	public class SealedTypeWithInheritanceDemandRule : ITypeRule {
 
-		public IList CheckType (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, Runner runner)
+		public MessageCollection CheckType (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, Runner runner)
 		{
 			// 1 - this applies only to sealed types
 			if (!type.IsSealed)
Index: rules/Gendarme.Rules.Security/NonVirtualMethodWithInheritanceDemandRule.cs
===================================================================
--- rules/Gendarme.Rules.Security/NonVirtualMethodWithInheritanceDemandRule.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Security/NonVirtualMethodWithInheritanceDemandRule.cs	(Arbeitskopie)
@@ -36,7 +36,7 @@
 
 	public class NonVirtualMethodWithInheritanceDemandRule : IMethodRule {
 
-		public IList CheckMethod (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, MethodDefinition method, Runner runner)
+		public MessageCollection CheckMethod (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, MethodDefinition method, Runner runner)
 		{
 			// #1 - this rule apply only to methods with an inheritance demand
 			if (method.SecurityDeclarations.Count == 0)
Index: rules/Gendarme.Rules.Security/TypeIsNotSubsetOfMethodSecurityRule.cs
===================================================================
--- rules/Gendarme.Rules.Security/TypeIsNotSubsetOfMethodSecurityRule.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Security/TypeIsNotSubsetOfMethodSecurityRule.cs	(Arbeitskopie)
@@ -38,7 +38,7 @@
 
 	public class TypeIsNotSubsetOfMethodSecurityRule : ITypeRule {
 
-		public IList CheckType (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, Runner runner)
+		public MessageCollection CheckType (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, Runner runner)
 		{
 			// #1 - this rules apply if type as security permissions
 			if (type.SecurityDeclarations.Count == 0)
Index: rules/Gendarme.Rules.Concurrency/Gendarme.Rules.Concurrency.csproj
===================================================================
--- rules/Gendarme.Rules.Concurrency/Gendarme.Rules.Concurrency.csproj	(Revision 65831)
+++ rules/Gendarme.Rules.Concurrency/Gendarme.Rules.Concurrency.csproj	(Arbeitskopie)
@@ -43,6 +43,9 @@
       <Name>Gendarme.Framework</Name>
     </ProjectReference>
   </ItemGroup>
+  <ItemGroup>
+    <None Include="ChangeLog" />
+  </ItemGroup>
   <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
   <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
        Other similar extension points exist, see Microsoft.Common.targets.
Index: rules/Gendarme.Rules.Concurrency/ChangeLog
===================================================================
--- rules/Gendarme.Rules.Concurrency/ChangeLog	(Revision 65831)
+++ rules/Gendarme.Rules.Concurrency/ChangeLog	(Arbeitskopie)
@@ -1,3 +1,10 @@
+2006-09-23  Christian Birkl  <christian.birkl@gmail.com>
+
+	* Gendarme.Rules.Concurrency.csproj: Included ChangeLog
+	
+	* DoubleCheckLockingRule.cs: Migrated untyped IList messages 
+	  collection to typed MessageCollection class.
+
 2006-07-31  Sebastien Pouliot  <sebastien@ximian.com>
 
 	* Gendarme.Rules.Concurrency.mdp: New. Project file for MonoDevelop.
Index: rules/Gendarme.Rules.Concurrency/DoubleCheckLockingRule.cs
===================================================================
--- rules/Gendarme.Rules.Concurrency/DoubleCheckLockingRule.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Concurrency/DoubleCheckLockingRule.cs	(Arbeitskopie)
@@ -21,7 +21,7 @@
 
 public class DoubleCheckLockingRule : IMethodRule {
 
-    public IList CheckMethod (AssemblyDefinition assembly,
+    public MessageCollection CheckMethod (AssemblyDefinition assembly,
             ModuleDefinition module,
             TypeDefinition type, MethodDefinition method,
             Runner runner)
@@ -54,7 +54,7 @@
                             continue;
                         if(insn.Offset >= (int)monitorOffsetList[mcount - 1])
                             continue;
-                        IList messages = new ArrayList();
+                        MessageCollection messages = new MessageCollection();
                         string etype = method.DeclaringType.FullName;
                         Location loc = new Location(etype, method.Name,
                                 insn.Offset);
Index: rules/Gendarme.Rules.Correctness/ChangeLog
===================================================================
--- rules/Gendarme.Rules.Correctness/ChangeLog	(Revision 65831)
+++ rules/Gendarme.Rules.Correctness/ChangeLog	(Arbeitskopie)
@@ -1,3 +1,11 @@
+2006-09-23  Christian Birkl  <christian.birkl@gmail.com>
+
+	* Gendarme.Rules.Correctness.csproj: Included ChangeLog
+	
+	* BadRecursiveInvocationRule.cs, NullDerefRule.cs, NullDerefAnalysis.cs:
+	Migrated untyped IList messages collection to typed MessageCollection
+	class.
+	  
 2006-07-31  Sebastien Pouliot  <sebastien@ximian.com>
 
 	* Gendarme.Rules.Correctness.mdp: New. Project file for MonoDevelop.
Index: rules/Gendarme.Rules.Correctness/NullDerefAnalysis.cs
===================================================================
--- rules/Gendarme.Rules.Correctness/NullDerefAnalysis.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Correctness/NullDerefAnalysis.cs	(Arbeitskopie)
@@ -27,11 +27,11 @@
     int args;
     [NonNull] private MethodDefinition method;
     [NonNull] private NonNullAttributeCollector nnaCollector;
-    [NonNull] private IList messages;
+    [NonNull] private MessageCollection messages;
     [NonNull] private Runner runner;
 
     public NullDerefAnalysis([NonNull] MethodDefinition method,
-            [NonNull] IList messages,
+            [NonNull] MessageCollection messages,
             [NonNull] NonNullAttributeCollector nnaCollector,
             [NonNull] Runner runner)
     {
Index: rules/Gendarme.Rules.Correctness/Gendarme.Rules.Correctness.csproj
===================================================================
--- rules/Gendarme.Rules.Correctness/Gendarme.Rules.Correctness.csproj	(Revision 65831)
+++ rules/Gendarme.Rules.Correctness/Gendarme.Rules.Correctness.csproj	(Arbeitskopie)
@@ -64,6 +64,9 @@
       <Name>Gendarme.Framework</Name>
     </ProjectReference>
   </ItemGroup>
+  <ItemGroup>
+    <None Include="ChangeLog" />
+  </ItemGroup>
   <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
   <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
        Other similar extension points exist, see Microsoft.Common.targets.
Index: rules/Gendarme.Rules.Correctness/BadRecursiveInvocationRule.cs
===================================================================
--- rules/Gendarme.Rules.Correctness/BadRecursiveInvocationRule.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Correctness/BadRecursiveInvocationRule.cs	(Arbeitskopie)
@@ -22,7 +22,7 @@
 
 public class BadRecursiveInvocationRule : IMethodRule {
 
-    public IList CheckMethod (AssemblyDefinition assembly,
+    public MessageCollection CheckMethod (AssemblyDefinition assembly,
             ModuleDefinition module, TypeDefinition type,
             MethodDefinition method, Runner runner)
     {
@@ -60,7 +60,7 @@
                 }
                 if(rName.Equals(mName) && rDecl.Equals(mDecl) && argsEqual) {
                     if(LoadsVerbatimArgs(method, i)) {
-                        IList messages = new ArrayList();
+                        MessageCollection messages = new MessageCollection();
                         string etype = method.DeclaringType.FullName;
                         Location loc = new Location(etype, method.Name,
                                 insn.Offset);
Index: rules/Gendarme.Rules.Correctness/NullDerefRule.cs
===================================================================
--- rules/Gendarme.Rules.Correctness/NullDerefRule.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Correctness/NullDerefRule.cs	(Arbeitskopie)
@@ -21,7 +21,7 @@
 
 public class NullDerefRule : IMethodRule {
 
-    public IList CheckMethod(AssemblyDefinition assembly,
+    public MessageCollection CheckMethod(AssemblyDefinition assembly,
             ModuleDefinition module, TypeDefinition type,
             MethodDefinition method, Runner runner)
     {
@@ -34,7 +34,7 @@
             cfg.PrintDot();
         }
 
-        IList messages = new ArrayList();
+        MessageCollection messages = new MessageCollection();
         NonNullAttributeCollector nnaCollector =
             new NonNullAttributeCollector();
         IDataflowAnalysis analysis = new NullDerefAnalysis(method, messages,
Index: rules/Gendarme.Rules.Exceptions/Test/TestPatterns.cs
===================================================================
--- rules/Gendarme.Rules.Exceptions/Test/TestPatterns.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Exceptions/Test/TestPatterns.cs	(Arbeitskopie)
@@ -42,7 +42,7 @@
 			MethodDefinition method = GetMethodToTest (testName);
 
 			// Should result in 1 warning message
-			IList list = rule.CheckMethod (assembly, module, type, method, new MinimalRunner ());
+			MessageCollection list = rule.CheckMethod (assembly, module, type, method, new MinimalRunner ());
 			Assert.IsTrue (list != null, "Warnings were not generated for the test named " + testName);
 			Assert.AreEqual (list.Count, 1, "One warning should have been generated for the test named " + testName);
 		}
@@ -54,7 +54,7 @@
 			MethodDefinition method = GetMethodToTest (testName);
 			
 			// Should result in 1 warning message
-			IList list = rule.CheckMethod (assembly, module, type, method, new MinimalRunner ());
+			MessageCollection list = rule.CheckMethod (assembly, module, type, method, new MinimalRunner ());
 			Assert.IsTrue (list != null, "Warnings were not generated for the test named " + testName);
 			Assert.AreEqual (list.Count, 1, "One warning should have been generated for the test named " + testName);
 		}
@@ -66,7 +66,7 @@
 			MethodDefinition method = GetMethodToTest (testName);
 
 			// Should result in 0 warning messages
-			IList list = rule.CheckMethod (assembly, module, type, method, new MinimalRunner ());
+			MessageCollection list = rule.CheckMethod (assembly, module, type, method, new MinimalRunner ());
 			Assert.IsTrue (list == null, "Warnings were generated for the test named " + testName);
 		}
 
@@ -77,7 +77,7 @@
 			MethodDefinition method = GetMethodToTest (testName);
 
 			// Should result in one warning message
-			IList list = rule.CheckMethod (assembly, module, type, method, new MinimalRunner ());
+			MessageCollection list = rule.CheckMethod (assembly, module, type, method, new MinimalRunner ());
 			Assert.IsTrue (list != null, "Warnings were not generated for the test named " + testName);
 			Assert.AreEqual (list.Count, 1, "One warning should have been generated for the test named " + testName);
 		}
@@ -89,7 +89,7 @@
 			MethodDefinition method = GetMethodToTest (testName);
 
 			// Should result in one warning message
-			IList list = rule.CheckMethod (assembly, module, type, method, new MinimalRunner ());
+			MessageCollection list = rule.CheckMethod (assembly, module, type, method, new MinimalRunner ());
 			Assert.IsTrue (list != null, "Warnings were not generated for the test named " + testName);
 			Assert.AreEqual (list.Count, 1, "One warning should have been generated for the test named " + testName);
 		}
Index: rules/Gendarme.Rules.Exceptions/Test/ChangeLog
===================================================================
--- rules/Gendarme.Rules.Exceptions/Test/ChangeLog	(Revision 65831)
+++ rules/Gendarme.Rules.Exceptions/Test/ChangeLog	(Arbeitskopie)
@@ -1,3 +1,8 @@
+2006-09-23  Christian Birkl  <christian.birkl@gmail.com>
+
+	* TestPatterns.cs: Migrated untyped IList messages collection	
+	to typed MessageCollection class.
+	
 2006-09-20  Jonathan Chambers  <joncham@gmail.com>
 
 	* Test.Rules.Exeptions.csproj: Make reference to nunit.framework
Index: rules/Gendarme.Rules.Exceptions/Test/Tests.Rules.Exceptions.csproj
===================================================================
--- rules/Gendarme.Rules.Exceptions/Test/Tests.Rules.Exceptions.csproj	(Revision 65831)
+++ rules/Gendarme.Rules.Exceptions/Test/Tests.Rules.Exceptions.csproj	(Arbeitskopie)
@@ -52,6 +52,9 @@
       <Name>Gendarme.Rules.Exceptions</Name>
     </ProjectReference>
   </ItemGroup>
+  <ItemGroup>
+    <None Include="ChangeLog" />
+  </ItemGroup>
   <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
   <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
        Other similar extension points exist, see Microsoft.Common.targets.
Index: rules/Gendarme.Rules.Exceptions/ChangeLog
===================================================================
--- rules/Gendarme.Rules.Exceptions/ChangeLog	(Revision 65831)
+++ rules/Gendarme.Rules.Exceptions/ChangeLog	(Arbeitskopie)
@@ -1,3 +1,10 @@
+2006-09-23  Christian Birkl  <christian.birkl@gmail.com>
+
+	* Gendarme.Rules.Exceptions.csproj: Included ChangeLog
+	
+	* DontDestroyStackTrace.cs: Migrated untyped IList messages collection
+	to typed MessageCollection class.
+	
 2006-08-15  Russell Morris  <russell@russellsprojects.com>
 
 	* DontDestroyStackTrace.cs: Fix possible NRE when processing invalid 
Index: rules/Gendarme.Rules.Exceptions/DontDestroyStackTrace.cs
===================================================================
--- rules/Gendarme.Rules.Exceptions/DontDestroyStackTrace.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Exceptions/DontDestroyStackTrace.cs	(Arbeitskopie)
@@ -16,7 +16,7 @@
 		{
 		}
 
-		public IList CheckMethod (AssemblyDefinition assembly,
+		public MessageCollection CheckMethod (AssemblyDefinition assembly,
 					  ModuleDefinition module, 
 					  TypeDefinition type,
 					  MethodDefinition method, 
@@ -41,7 +41,7 @@
 				}
 			}
 			
-			ArrayList violations = new ArrayList ();
+			MessageCollection violations = new MessageCollection ();
 			warned_offsets_in_method = new ArrayList ();
 
 			// Look for paths that 'throw ex;' instead of 'throw'
@@ -53,7 +53,7 @@
 
 		private void ProcessCatchPath (ExecutionPath catchPath, 
 					       MethodDefinition method, 
-					       ArrayList violations)
+					       MessageCollection violations)
 		{
 			// Track original exception (top of stack at start) through to the final
 			// return (be it throw, rethrow, leave, or leave.s)
Index: rules/Gendarme.Rules.Exceptions/Gendarme.Rules.Exceptions.csproj
===================================================================
--- rules/Gendarme.Rules.Exceptions/Gendarme.Rules.Exceptions.csproj	(Revision 65831)
+++ rules/Gendarme.Rules.Exceptions/Gendarme.Rules.Exceptions.csproj	(Arbeitskopie)
@@ -57,6 +57,9 @@
       <Name>Gendarme.Framework</Name>
     </ProjectReference>
   </ItemGroup>
+  <ItemGroup>
+    <None Include="ChangeLog" />
+  </ItemGroup>
   <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
   <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
        Other similar extension points exist, see Microsoft.Common.targets.
Index: rules/Gendarme.Rules.Performance/IDisposableWithDestructorWithoutSuppressFinalizeRule.cs
===================================================================
--- rules/Gendarme.Rules.Performance/IDisposableWithDestructorWithoutSuppressFinalizeRule.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Performance/IDisposableWithDestructorWithoutSuppressFinalizeRule.cs	(Arbeitskopie)
@@ -46,7 +46,7 @@
 			return (md.ReturnType.ReturnType.ToString () == "System.Void");
 		}
 
-		private IList Recurse (MethodDefinition method, int level, Runner runner)
+		private MessageCollection Recurse (MethodDefinition method, int level, Runner runner)
 		{
 			// some methods have no body (e.g. p/invokes, icalls)
 			if (method.Body == null) {
@@ -73,7 +73,7 @@
 			return runner.RuleFailure;
 		}
 
-		public IList CheckType (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, Runner runner)
+		public MessageCollection CheckType (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, Runner runner)
 		{
 			// #1 - does the type implements System.IDisposable ?
 			bool idisposable = false;
Index: rules/Gendarme.Rules.Performance/ChangeLog
===================================================================
--- rules/Gendarme.Rules.Performance/ChangeLog	(Revision 65831)
+++ rules/Gendarme.Rules.Performance/ChangeLog	(Arbeitskopie)
@@ -1,3 +1,11 @@
+2006-09-23  Christian Birkl  <christian.birkl@gmail.com>
+
+	* Gendarme.Rules.Performance.csproj: Included ChangeLog
+
+	* EmptyDestructorRule.cs, IDisposableWithDestructorWithoutSuppressFinalizeRule.cs,
+	UseStringEmptyRule.cs: Migrated untyped IList messages collection
+	to typed MessageCollection class.
+	
 2006-09-19  Sebastien Pouliot  <sebastien@ximian.com>
 
 	* UseStringEmptyRule.cs: Deal with [g]mcs generating leave instruction
Index: rules/Gendarme.Rules.Performance/EmptyDestructorRule.cs
===================================================================
--- rules/Gendarme.Rules.Performance/EmptyDestructorRule.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Performance/EmptyDestructorRule.cs	(Arbeitskopie)
@@ -37,7 +37,7 @@
 
 	public class EmptyDestructorRule : ITypeRule {
 
-		public IList CheckType (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, Runner runner)
+		public MessageCollection CheckType (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, Runner runner)
 		{
 			MethodDefinition destructor = null;
 			// #1 - look for a destructor
Index: rules/Gendarme.Rules.Performance/Gendarme.Rules.Performance.csproj
===================================================================
--- rules/Gendarme.Rules.Performance/Gendarme.Rules.Performance.csproj	(Revision 65831)
+++ rules/Gendarme.Rules.Performance/Gendarme.Rules.Performance.csproj	(Arbeitskopie)
@@ -47,6 +47,9 @@
       <Name>Gendarme.Framework</Name>
     </ProjectReference>
   </ItemGroup>
+  <ItemGroup>
+    <None Include="ChangeLog" />
+  </ItemGroup>
   <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
   <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
        Other similar extension points exist, see Microsoft.Common.targets.
Index: rules/Gendarme.Rules.Performance/UseStringEmptyRule.cs
===================================================================
--- rules/Gendarme.Rules.Performance/UseStringEmptyRule.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Performance/UseStringEmptyRule.cs	(Arbeitskopie)
@@ -38,7 +38,7 @@
 
 	public class UseStringEmptyRule : IMethodRule {
 	
-		public IList CheckMethod (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, MethodDefinition method, Runner runner)
+		public MessageCollection CheckMethod (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, MethodDefinition method, Runner runner)
 		{
 			// #1 - rule apply only if the method has a body (e.g. p/invokes, icalls don't)
 			if (method.Body == null)
@@ -46,7 +46,7 @@
 
 			// *** ok, the rule applies! ***
 			
-			ArrayList results = new ArrayList ();
+			MessageCollection results = new MessageCollection ();
 			string fullname = method.DeclaringType.FullName;
 			
 			// #2 - look for string references
Index: rules/Gendarme.Rules.Portability/ChangeLog
===================================================================
--- rules/Gendarme.Rules.Portability/ChangeLog	(Revision 65831)
+++ rules/Gendarme.Rules.Portability/ChangeLog	(Arbeitskopie)
@@ -1,3 +1,10 @@
+2006-09-23  Christian Birkl  <christian.birkl@gmail.com>
+
+	* Gendarme.Rules.Portability.csproj: Included ChangeLog
+	
+	* NewLineLiteralRule.cs: Migrated untyped IList messages collection
+	to typed MessageCollection class.
+	
 2006-09-18  Sebastien Pouliot  <sebastien@ximian.com>
 
 	* NewLineLiteralRule.cs: Update rule to provide location (which 
Index: rules/Gendarme.Rules.Portability/NewLineLiteralRule.cs
===================================================================
--- rules/Gendarme.Rules.Portability/NewLineLiteralRule.cs	(Revision 65831)
+++ rules/Gendarme.Rules.Portability/NewLineLiteralRule.cs	(Arbeitskopie)
@@ -39,14 +39,14 @@
 
 		private static char[] InvalidChar = { '\r', '\n' };
 
-		public IList CheckMethod (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, MethodDefinition method, Runner runner)
+		public MessageCollection CheckMethod (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, MethodDefinition method, Runner runner)
 		{
 			// methods can be empty (e.g. p/invoke declarations)
 			if ((method.Body == null) || (method.Body.Instructions == null))
 				return null;
 
 			string fullname = method.DeclaringType.FullName;
-			ArrayList results = new ArrayList ();
+			MessageCollection results = new MessageCollection ();
 			foreach (Instruction ins in method.Body.Instructions) {
 				switch (ins.OpCode.Name) {
 				case "ldstr":
Index: rules/Gendarme.Rules.Portability/Gendarme.Rules.Portability.csproj
===================================================================
--- rules/Gendarme.Rules.Portability/Gendarme.Rules.Portability.csproj	(Revision 65831)
+++ rules/Gendarme.Rules.Portability/Gendarme.Rules.Portability.csproj	(Arbeitskopie)
@@ -45,6 +45,9 @@
       <Name>Gendarme.Framework</Name>
     </ProjectReference>
   </ItemGroup>
+  <ItemGroup>
+    <None Include="ChangeLog" />
+  </ItemGroup>
   <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
   <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
        Other similar extension points exist, see Microsoft.Common.targets.
Index: framework/IRule.cs
===================================================================
--- framework/IRule.cs	(Revision 65831)
+++ framework/IRule.cs	(Arbeitskopie)
@@ -36,18 +36,18 @@
 	}
 
 	public interface IAssemblyRule : IRule {
-		IList CheckAssembly (AssemblyDefinition assembly, Runner runner);
+		MessageCollection CheckAssembly (AssemblyDefinition assembly, Runner runner);
 	}
 
 	public interface IModuleRule : IRule {
-		IList CheckModule (AssemblyDefinition assembly, ModuleDefinition module, Runner runner);
+		MessageCollection CheckModule (AssemblyDefinition assembly, ModuleDefinition module, Runner runner);
 	}
 
 	public interface ITypeRule : IRule {
-		IList CheckType (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, Runner runner);
+		MessageCollection CheckType (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, Runner runner);
 	}
 
 	public interface IMethodRule : IRule {
-		IList CheckMethod (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, MethodDefinition method, Runner runner);
+		MessageCollection CheckMethod (AssemblyDefinition assembly, ModuleDefinition module, TypeDefinition type, MethodDefinition method, Runner runner);
 	}
 }
Index: framework/ChangeLog
===================================================================
--- framework/ChangeLog	(Revision 65831)
+++ framework/ChangeLog	(Arbeitskopie)
@@ -1,3 +1,14 @@
+2006-09-23  Christian Birkl  <christian.birkl@gmail.com>
+
+	* Gendarme.Framework.csproj: Included ChangeLog
+	
+	* MessageCollection.cs, Gendarme.Framework.csproj, framework.mdp:
+	Added new class to replace the untyped IList interface for 
+	holding Message objects.
+	
+	* IRule.cs: Changed all interfaces to return the new
+	typed MessageCollection class instead of IList.
+
 2006-09-17  Sebastien Pouliot  <sebastien@ximian.com>
 
 	* Violation.cs: Added a new Assembly property deduced from the 
Index: framework/Violations.cs
===================================================================
--- framework/Violations.cs	(Revision 65831)
+++ framework/Violations.cs	(Arbeitskopie)
@@ -57,7 +57,7 @@
 			list = null;
 		}
 		
-		public void Add (IRule rule, object obj, IList messages)
+		public void Add (IRule rule, object obj, MessageCollection messages)
 		{
 			if (rule == null)
 				throw new ArgumentNullException ("rule");
Index: framework/Violation.cs
===================================================================
--- framework/Violation.cs	(Revision 65831)
+++ framework/Violation.cs	(Arbeitskopie)
@@ -36,9 +36,9 @@
 	public struct Violation {
 		public IRule Rule;
 		public object Violator;
-		public IList Messages;
+		public MessageCollection Messages;
 
-		public Violation (IRule rule, object violator, IList messages)
+		public Violation (IRule rule, object violator, MessageCollection messages)
 		{
 			Rule = rule;
 			Violator = violator;
Index: framework/framework.mdp
===================================================================
--- framework/framework.mdp	(Revision 65831)
+++ framework/framework.mdp	(Arbeitskopie)
@@ -19,6 +19,7 @@
     <File name="./IRule.cs" subtype="Code" buildaction="Compile" />
     <File name="./Location.cs" subtype="Code" buildaction="Compile" />
     <File name="./Message.cs" subtype="Code" buildaction="Compile" />
+    <File name="./MessageCollection.cs" subtype="Code" buildaction="Compile" />
     <File name="./MinimalRunner.cs" subtype="Code" buildaction="Compile" />
     <File name="./RuleCollection.cs" subtype="Code" buildaction="Compile" />
     <File name="./RuleInformation.cs" subtype="Code" buildaction="Compile" />
Index: framework/Runner.cs
===================================================================
--- framework/Runner.cs	(Revision 65831)
+++ framework/Runner.cs	(Arbeitskopie)
@@ -39,7 +39,7 @@
 
 		private Rules rules;
 		private Violations violations;
-		private static IList failure = new ArrayList();
+		private static MessageCollection failure = new MessageCollection();
 		protected bool debug = false;
 
 		public Rules Rules {
@@ -64,13 +64,13 @@
 			}
 		}
 
-		public IList RuleSuccess {
+		public MessageCollection RuleSuccess {
 			get {
 				return null;
 			}
 		}
 
-		public IList RuleFailure {
+		public MessageCollection RuleFailure {
 			get {
 				return failure;
 			}
@@ -118,7 +118,7 @@
 		{
 			Violations.Reset();
 			
-			IList messages;
+			MessageCollection messages;
 			foreach (IAssemblyRule rule in Rules.Assembly) {
 				messages = rule.CheckAssembly(assembly, this);
 				if (messages != RuleSuccess)
Index: framework/Gendarme.Framework.csproj
===================================================================
--- framework/Gendarme.Framework.csproj	(Revision 65970)
+++ framework/Gendarme.Framework.csproj	(Arbeitskopie)
@@ -38,6 +38,7 @@
     <Compile Include="IRule.cs" />
     <Compile Include="Location.cs" />
     <Compile Include="Message.cs" />
+    <Compile Include="MessageCollection.cs" />
     <Compile Include="MinimalRunner.cs" />
     <Compile Include="RuleCollection.cs" />
     <Compile Include="RuleInformation.cs" />
@@ -53,6 +54,9 @@
       <Name>Mono.Cecil</Name>
     </ProjectReference>
   </ItemGroup>
+  <ItemGroup>
+    <None Include="ChangeLog" />
+  </ItemGroup>
   <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
   <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
        Other similar extension points exist, see Microsoft.Common.targets.
Index: console/XmlResultWriter.cs
===================================================================
--- console/XmlResultWriter.cs	(Revision 65831)
+++ console/XmlResultWriter.cs	(Arbeitskopie)
@@ -104,18 +104,12 @@
 		
 		if ((v.Messages != null) && (v.Messages.Count > 0)) {
 			writer.WriteStartElement ("messages");
-			foreach (object o in v.Messages) {
+			foreach (Message message in v.Messages) {
 				writer.WriteStartElement ("message");
-				// FIXME: review existing rules
-				Message message = (o as Message);
-				if (message != null) {
-					if (message.Location != null)
-						writer.WriteAttributeString ("Location", message.Location.ToString());
-					writer.WriteAttributeString ("Type", message.Type.ToString());
-					writer.WriteString (message.Text);
-				} else {
-					writer.WriteString (o.ToString ());
-				}
+				if (message.Location != null)
+					writer.WriteAttributeString ("Location", message.Location.ToString());
+				writer.WriteAttributeString ("Type", message.Type.ToString());
+				writer.WriteString (message.Text);				
 				writer.WriteEndElement ();
 			}
 			writer.WriteEndElement ();
Index: console/gendarme.csproj
===================================================================
--- console/gendarme.csproj	(Revision 65831)
+++ console/gendarme.csproj	(Arbeitskopie)
@@ -50,6 +50,9 @@
       <Name>Gendarme.Framework</Name>
     </ProjectReference>
   </ItemGroup>
+  <ItemGroup>
+    <None Include="ChangeLog" />
+  </ItemGroup>
   <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
   <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
        Other similar extension points exist, see Microsoft.Common.targets.
Index: console/TextResultWriter.cs
===================================================================
--- console/TextResultWriter.cs	(Revision 65831)
+++ console/TextResultWriter.cs	(Arbeitskopie)
@@ -78,7 +78,7 @@
 		writer.WriteLine ();
 		if(v.Messages != null && v.Messages.Count > 0) {
 			writer.WriteLine ("Details:");
-			foreach (object message in v.Messages) {
+			foreach (Message message in v.Messages) {
 				writer.WriteLine("  {0}", message);
 			}
 			writer.WriteLine ();
Index: console/ChangeLog
===================================================================
--- console/ChangeLog	(Revision 65831)
+++ console/ChangeLog	(Arbeitskopie)
@@ -1,3 +1,11 @@
+2006-09-23  Christian Birkl  <christian.birkl@gmail.com>
+
+	* gendarme.csproj: Included ChangeLog
+	
+	* XmlResultWriter.cs, TextResultWriter.cs: Migrated
+	untyped IList messages collection to typed MessageCollection
+	class.
+	  
 2006-09-17  Sebastien Pouliot  <sebastien@ximian.com>
 
 	* console.mdp: Update MonoDevelop project file