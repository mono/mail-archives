Index: TemplateControlCompiler.cs
===================================================================
--- TemplateControlCompiler.cs	(revision 65910)
+++ TemplateControlCompiler.cs	(working copy)
@@ -371,6 +371,14 @@
 			value = TrimDB (value);
 			CodeMemberMethod method;
 			string dbMethodName = builder.method.Name + "_DB_" + dataBoundAtts++;
+#if NET_2_0
+			bool need_if = false;
+			value = value.Trim ();
+			if (StrUtils.StartsWith (value, "Bind")) {
+				value = "Eval" + value.Substring (4);
+				need_if = true;
+			}
+#endif
 
 			method = CreateDBMethod (dbMethodName, GetContainerType (builder), builder.ControlType);
 
@@ -391,7 +399,20 @@
 				expr = new CodeCastExpression (type, snippet);
 			}
 			
+#if NET_2_0
+			CodeAssignStatement assign = new CodeAssignStatement (field, expr);
+			if (!need_if)
+				method.Statements.Add (assign);
+			else {
+				CodeExpression page=new CodePropertyReferenceExpression(new CodeThisReferenceExpression(), "Page");
+				CodeExpression left=new CodeMethodInvokeExpression (page, "GetDataItem");
+				CodeBinaryOperatorExpression ce = new  CodeBinaryOperatorExpression(left, CodeBinaryOperatorType.IdentityInequality, new CodePrimitiveExpression(null));
+				CodeConditionStatement ccs = new CodeConditionStatement (ce, assign);
+				method.Statements.Add (ccs);
+			}
+#else			
 			method.Statements.Add (new CodeAssignStatement (field, expr));
+#endif
 			mainClass.Members.Add (method);
 			return method.Name;
 		}
@@ -441,7 +462,6 @@
 						throw new HttpException ("Control of type '" + builder.ControlType + "' using two-way binding on property '" + propName + "' must have an ID.");
 					
 					templateBuilder.RegisterBoundProperty (builder.ControlType, propName, id, bindingName);
-					value = "<%# Eval" + str.Substring (4);
 				}
 			}
 		}
