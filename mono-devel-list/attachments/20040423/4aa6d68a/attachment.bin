Index: ChangeLog
===================================================================
RCS file: /cvs/public/mono/mono/mini/ChangeLog,v
retrieving revision 1.466
diff -u -r1.466 ChangeLog
--- ChangeLog	23 Apr 2004 17:42:29 -0000	1.466
+++ ChangeLog	24 Apr 2004 01:17:22 -0000
@@ -1,3 +1,11 @@
+2004-04-23 Ben Maurer  <bmaurer@users.sourceforge.net>
+
+	* mini.c (CEE_CALL*): do not spill into a variable
+	if the next operation is one of pop, br[true,false][.s]?,
+	ret. Saves ~10% of the variables we allocate and reduces
+	code size by a factor of 1-3%.
+	(mono_emit_call_args): A CALL instruction must have a
+	call->inst.type, so that it can be used in other instructions.
 
 Fri Apr 23 14:20:40 EDT 2004 Paolo Molaro <lupus@ximian.com>
 
Index: mini.c
===================================================================
RCS file: /cvs/public/mono/mono/mini/mini.c,v
retrieving revision 1.222
diff -u -r1.222 mini.c
--- mini.c	22 Apr 2004 16:45:12 -0000	1.222
+++ mini.c	24 Apr 2004 01:17:23 -0000
@@ -1964,6 +1964,12 @@
 	call->inst.cil_code = ip;
 	call->args = args;
 	call->signature = sig;
+	
+	if (MONO_TYPE_ISSTRUCT (sig->ret))
+		call->inst.type = STACK_MP;
+	else if (! MONO_TYPE_IS_VOID (sig->ret))
+		type_to_eval_stack_type (sig->ret, & call->inst);
+
 	call = mono_arch_call_opcode (cfg, bblock, call, virtual);
 
 	for (arg = call->out_args; arg;) {
@@ -3438,7 +3444,23 @@
 				}
 
 			} else {
-				if (0 && CODE_IS_STLOC (ip + 5) && (!MONO_TYPE_ISSTRUCT (fsig->ret)) && (!MONO_TYPE_IS_VOID (fsig->ret) || cmethod->string_ctor)) {
+				gboolean no_spill = FALSE;
+				if ((ip + 6) <= end && (!MONO_TYPE_ISSTRUCT (fsig->ret)) && (!MONO_TYPE_IS_VOID (fsig->ret) || cmethod->string_ctor)) {
+					if (CODE_IS_STLOC (ip + 5))
+						no_spill = TRUE;
+					switch (ip [5]) {
+						case CEE_POP:
+						case CEE_BRTRUE:
+						case CEE_BRTRUE_S:
+						case CEE_BRFALSE:
+						case CEE_BRFALSE_S:
+						case CEE_RET:
+							no_spill = TRUE;
+							break;
+					}
+				}
+				
+				if (no_spill) {
 					/* no need to spill */
 					ins = (MonoInst*)mono_emit_method_call (cfg, bblock, cmethod, fsig, sp, ip, virtual ? sp [0] : NULL);
 					*sp++ = ins;
