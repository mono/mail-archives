Index: ProviderSectionHandler.cs
===================================================================
--- ProviderSectionHandler.cs	(revision 55338)
+++ ProviderSectionHandler.cs	(working copy)
@@ -37,8 +37,9 @@
 {
 	public class ProviderSectionHandler : IConfigurationSectionHandler
 	{
-		public virtual object Create(object parent,object configContext,XmlNode section)
+		public virtual object Create(object parent,object configContext, XmlNode section)
 		{
+			if (section == null) throw new System.ArgumentNullException("section");
 			ProviderCollection providers=new ProviderCollection();
 			
 			XmlNodeList ProviderList = section.SelectNodes ("./provider");
Index: ProviderFactory.cs
===================================================================
--- ProviderFactory.cs	(revision 55338)
+++ ProviderFactory.cs	(working copy)
@@ -59,12 +59,14 @@
 		}
 
 		static public IDbConnection CreateConnectionFromConfig(string Setting)
-		{
+		{
+			if (Setting == null) throw new System.ArgumentNullException("Setting");
 			return CreateConnection(ConfigurationSettings.AppSettings[Setting]);
 		}
 
 		static public IDbConnection CreateConnection(string ConnectionString)
-		{
+		{
+			if (ConnectionString == null) throw new System.ArgumentNullException("ConnectionString");
 			string[] ConnectionAttributes=ConnectionString.Split(new Char[1] { ';' }); 
 			string ProviderName=null;
 			string NewConnectionString="";
@@ -76,12 +78,14 @@
 				else 
 					NewConnectionString+=";"+s;
 			}
-			NewConnectionString=NewConnectionString.Remove(0,1);
+			NewConnectionString=NewConnectionString.Remove(0,1); //remove the initial ;
+			if (ProviderName ==null) throw new System.ArgumentException("The connection string must contain a 'factory=Provider.Class' token","ConnectionString");
 			return CreateConnection(ProviderName, NewConnectionString);
 		}
 
 		static public IDbConnection CreateConnection(string ProviderName, string ConnectionString)
-		{
+		{
+			if (ProviderName == null) throw new System.ArgumentNullException("ProviderName");
 			Provider provider=providers[ProviderName];
 			IDbConnection conn=provider.CreateConnection();
 			conn.ConnectionString=ConnectionString;
@@ -89,7 +93,9 @@
 		}
 
 		static public IDbCommand CreateStoredProc(IDbConnection Conn, string CommandName)
-		{
+		{
+			if (Conn == null) throw new System.ArgumentNullException("Conn");
+			if (CommandName == null) throw new System.ArgumentNullException("CommandName");
 			IDbCommand cmd=Conn.CreateCommand();
 			cmd.CommandText=CommandName;
 			cmd.CommandType=CommandType.StoredProcedure;
@@ -97,7 +103,8 @@
 		}
 
 		static public IDbDataAdapter CreateDataAdapter(IDbCommand SelectCommand)
-		{
+		{
+			if (SelectCommand == null) throw new System.ArgumentNullException("SelectCommand");
 			Provider provider=providers.FindByCommandType(SelectCommand.GetType());
 			IDbDataAdapter adapter=provider.CreateDataAdapter();
 			adapter.SelectCommand=SelectCommand;
@@ -105,27 +112,31 @@
 		}
 
 		static public IDbDataAdapter CreateDataAdapter(string ProviderName)
-		{
+		{
+			if (ProviderName == null) throw new System.ArgumentNullException("ProviderName");
 			Provider provider=providers[ProviderName];
 			IDbDataAdapter adapter=provider.CreateDataAdapter();
 			return adapter;
 		}
 
 		static public IDbDataAdapter CreateDataAdapter(IDbConnection Conn, string SelectCommand)
-		{
+		{
+			if (SelectCommand == null) throw new System.ArgumentNullException("SelectCommand");
 			IDbCommand cmd=Conn.CreateCommand();
 			cmd.CommandText=SelectCommand;
 			return CreateDataAdapter(cmd);
 		}
 
 		static public IDbCommand CreateCommand(string ProviderName)
-		{
+		{
+			if (ProviderName == null) throw new System.ArgumentNullException("ProviderName");
 			Provider provider=providers[ProviderName];
 			return provider.CreateCommand();
 		}
 
 		static public IDbCommand CreateCommand(IDbConnection Conn)
-		{
+		{
+			if (Conn == null) throw new System.ArgumentNullException("Conn");
 			return Conn.CreateCommand();
 		}
 
Index: ProviderCollection.cs
===================================================================
--- ProviderCollection.cs	(revision 55338)
+++ ProviderCollection.cs	(working copy)
@@ -64,7 +64,8 @@
 		///       A <see cref='.ProviderCollection'/> from which the contents are copied
 		/// </param>
 		public ProviderCollection(ProviderCollection value) 
-		{
+		{
+			if (value == null) throw new System.ArgumentNullException("value");
 			this.AddRange(value);
 		}
 		
@@ -77,7 +78,8 @@
 		///       A array of <see cref='.Provider'/> objects with which to intialize the collection
 		/// </param>
 		public ProviderCollection(Provider[] value) 
-		{
+		{
+			if (value == null) throw new System.ArgumentNullException("value");
 			this.AddRange(value);
 		}
 		
@@ -102,7 +104,8 @@
 		}
 
 		public Provider FindByCommandType(Type CommandType)
-		{
+		{
+			if (CommandType == null) throw new System.ArgumentNullException("CommandType");
 			foreach (Provider p in this)
 			{
 				if (p.CommandType==CommandType)
@@ -112,7 +115,8 @@
 		}
 
 		public Provider FindByDataAdapterType(Type DataAdapterType)
-		{
+		{
+			if (DataAdapterType == null) throw new System.ArgumentNullException("DataAdapterType");
 			foreach (Provider p in this)
 			{
 				if (p.DataAdapterType==DataAdapterType)
@@ -122,7 +126,8 @@
 		}
 
 		public Provider FindByConnectionType(Type ConnectionType)
-		{
+		{
+			if (ConnectionType == null) throw new System.ArgumentNullException("ConnectionType");
 			foreach (Provider p in this)
 			{
 				if (p.ConnectionType==ConnectionType)
@@ -141,7 +146,8 @@
 		/// </returns>
 		/// <seealso cref='.ProviderCollection.AddRange'/>
 		public void Add(Provider value) 
-		{
+		{
+			if (value == null) throw new System.ArgumentNullException("value");
 			Dictionary.Add(value.Name, value);
 		}
 		
@@ -156,7 +162,8 @@
 		/// </returns>
 		/// <seealso cref='.ProviderCollection.Add'/>
 		public void AddRange(Provider[] value) 
-		{
+		{
+			if (value == null) throw new System.ArgumentNullException("value");
 			for (int i = 0; (i < value.Length); i = (i + 1)) 
 			{
 				this.Add(value[i]);
@@ -176,7 +183,8 @@
 		/// </returns>
 		/// <seealso cref='.ProviderCollection.Add'/>
 		public void AddRange(ProviderCollection value) 
-		{
+		{
+			if (value == null) throw new System.ArgumentNullException("value");
 			foreach (Provider p in value)
 			{
 				this.Add(p);
@@ -194,7 +202,8 @@
 		/// </returns>
 		/// <seealso cref='.ProviderCollection.IndexOf'/>
 		public bool Contains(Provider value) 
-		{
+		{
+			if (value == null) throw new System.ArgumentNullException("value");
 			return Dictionary.Contains(value);
 		}
 		
@@ -212,7 +221,8 @@
 		/// <exception cref='System.ArgumentOutOfRangeException'><paramref name='arrayIndex'/> is less than <paramref name='array'/>'s lowbound. </exception>
 		/// <seealso cref='System.Array'/>
 		public void CopyTo(Provider[] array, int index) 
-		{
+		{
+			if (array == null) throw new System.ArgumentNullException("array");
 			Dictionary.CopyTo(array, index);
 		}
 		
@@ -235,7 +245,8 @@
 		/// <returns><para>None.</para></returns>
 		/// <exception cref='System.ArgumentException'><paramref name='value'/> is not found in the Collection. </exception>
 		public void Remove(Provider value) 
-		{
+		{
+			if (value == null) throw new System.ArgumentNullException("value");
 			Dictionary.Remove(value);
 		}
 		
@@ -247,7 +258,8 @@
 			private IEnumerable temp;
 			
 			public ProviderEnumerator(ProviderCollection mappings) 
-			{
+			{
+				if (mappings == null) throw new System.ArgumentNullException("mappings");
 				this.temp = ((IEnumerable)(mappings));
 				this.baseEnumerator = temp.GetEnumerator();
 			}
Index: DataTools.cs
===================================================================
--- DataTools.cs	(revision 55338)
+++ DataTools.cs	(working copy)
@@ -45,7 +45,9 @@
 
 		static public IDataParameter AddParameter(IDbCommand Cmd, string ParameterName, DbType DbType, 
 			ParameterDirection Direction)
-		{
+		{
+			if (Cmd == null) throw new System.ArgumentNullException("Cmd");
+			if (ParameterName == null) throw new System.ArgumentNullException("ParameterName");
 			IDataParameter param=Cmd.CreateParameter();
 			Cmd.Parameters.Add(param);
 			param.ParameterName=ParameterName;
@@ -55,7 +57,9 @@
 		}
 
 		static public IDataParameter AddParameter(IDbCommand Cmd, string ParameterName, DbType DbType)
-		{
+		{
+			if (Cmd == null) throw new System.ArgumentNullException("Cmd");
+			if (ParameterName == null) throw new System.ArgumentNullException("ParameterName");
 			IDataParameter param=Cmd.CreateParameter();
 			Cmd.Parameters.Add(param);
 			param.ParameterName=ParameterName;
@@ -64,7 +68,9 @@
 		}
 
 		static public DataSet FillDataSet(IDbConnection conn, string SelectCommand)
-		{
+		{
+			if (conn == null) throw new System.ArgumentNullException("conn");
+			if (SelectCommand == null) throw new System.ArgumentNullException("SelectCommand");
 			DataSet ds=new DataSet();
 			IDbDataAdapter adapter=ProviderFactory.CreateDataAdapter(conn, SelectCommand);
 			if (conn.State!=ConnectionState.Open)
@@ -74,7 +80,8 @@
 		}
 
 		static public DataSet FillDataSet(IDbCommand SelectCommand)
-		{
+		{
+			if (SelectCommand == null) throw new System.ArgumentNullException("SelectCommand");
 			DataSet ds=new DataSet();
 			IDbDataAdapter adapter=ProviderFactory.CreateDataAdapter(SelectCommand);
 			if (adapter.SelectCommand.Connection.State!=ConnectionState.Open)
@@ -84,7 +91,9 @@
 		}
 
 		static public DataSet FillDataSet(string ConfigSetting, string SelectCommand)
-		{
+		{
+			if (ConfigSetting == null) throw new System.ArgumentNullException("ConfigSetting");
+			if (SelectCommand == null) throw new System.ArgumentNullException("SelectCommand");
 			IDbConnection conn=ProviderFactory.CreateConnectionFromConfig(ConfigSetting);
 			conn.Open();
 			DataSet ds=null;
Index: Provider.cs
===================================================================
--- Provider.cs	(revision 55338)
+++ Provider.cs	(working copy)
@@ -63,7 +63,10 @@
 
 		public Provider(string _name, Type _connection, Type _dataadapter, Type _command,
 			string _description)
-		{
+		{
+			if (_connection == null) throw new System.ArgumentNullException("_connection");
+			if (_dataadapter == null) throw new System.ArgumentNullException("_dataadapter");
+			if (_command == null) throw new System.ArgumentNullException("_command");
 			name = _name;
 			connectionTypeName = _connection.FullName;
 			adapterTypeName = _dataadapter.FullName;
