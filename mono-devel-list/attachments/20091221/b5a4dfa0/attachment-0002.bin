Index: Int32.cs
===================================================================
--- Int32.cs	(revisi√≥n: 148618)
+++ Int32.cs	(copia de trabajo)
@@ -274,21 +274,52 @@
 			} 
 		}
 
-		internal static bool FindExponent (ref int pos, string s)
+		internal static bool FindExponent (ref int pos, string s, ref int exponent, bool tryParse, ref Exception exc)
 		{
+				exponent = 0;
+				long exp = 0; // temp long value
+
 				int i = s.IndexOfAny(new char [] {'e', 'E'}, pos);
-				if (i < 0)
-						return false;
-				if (++i == s.Length)
-						return false;
-				if (s [i] == '+' || s [i] == '-')
-						if (++i == s.Length)
-								return false;
-				if (!Char.IsDigit (s [i]))
-						return false;
-				for (; i < s.Length; ++i)
-						if (!Char.IsDigit (s [i])) 
-								break;
+				if (i < 0) {
+					exc = null;
+					return false;
+				}
+
+				if (++i == s.Length) {
+					exc = tryParse ? null : GetFormatException ();
+					return true;
+				}
+
+				// negative exponent not valid for Int32
+				if (s [i] == '-') {
+					exc = tryParse ? null : new OverflowException ("Value too large or too small.");
+					return true;
+				}
+
+				if (s [i] == '+' && ++i == s.Length) {
+					exc = tryParse ? null : GetFormatException ();
+					return true;
+				}
+
+				for (; i < s.Length; i++) {
+					if (!Char.IsDigit (s [i]))  {
+						exc = tryParse ? null : GetFormatException ();
+						return true;
+					}
+
+					// Reduce the risk of throwing an overflow exc
+					exp = checked (exp * 10 - (int) (s [i] - '0'));
+					if (exp < Int32.MinValue || exp > Int32.MaxValue) {
+						exc = tryParse ? null : new OverflowException ("Value too large or too small.");
+						return true;
+					}
+				}
+
+				// exp value saved as negative
+				exp = -exp;
+
+				exc = null;
+				exponent = (int)exp;
 				pos = i;
 				return true;
 		}
@@ -430,6 +461,7 @@
 			bool decimalPointFound = false;
 			int digitValue;
 			char hexDigit;
+			int exponent = 0;
 				
 			// Number stuff
 			do {
@@ -504,8 +536,9 @@
 				return false;
 			}
 
-			if (AllowExponent) 
-					FindExponent(ref pos, s);
+			if (AllowExponent)
+				if (FindExponent (ref pos, s, ref exponent, tryParse, ref exc) && exc != null)
+					return false;
 
 			if (AllowTrailingSign && !foundSign) {
 				// Sign + Currency
@@ -561,6 +594,19 @@
 				} else
 					number = checked (-number);
 			}
+
+			// result *= 10^exponent
+			if (exponent > 0) {
+				// Reduce the risk of throwing an overflow exc
+				double res = checked (Math.Pow (10, exponent) * number);
+				if (res < Int32.MinValue || res > Int32.MaxValue) {
+					if (!tryParse)
+						exc = new OverflowException ("Value too large or too small.");
+					return false;
+				}
+
+				number = (int)res;
+			}
 			
 			result = number;
 