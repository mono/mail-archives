Index: mono/mono/metadata/icall.c
===================================================================
--- mono/mono/metadata/icall.c	(revision 62559)
+++ mono/mono/metadata/icall.c	(working copy)
@@ -7072,9 +7072,9 @@
 	{".ctor(char,int)", ves_icall_System_String_ctor_char_int},
 	{".ctor(char[])", ves_icall_System_String_ctor_chara},
 	{".ctor(char[],int,int)", ves_icall_System_String_ctor_chara_int_int},
-	{".ctor(sbyte*)", ves_icall_System_String_ctor_sbytep},
-	{".ctor(sbyte*,int,int)", ves_icall_System_String_ctor_sbytep_int_int},
-	{".ctor(sbyte*,int,int,System.Text.Encoding)", ves_icall_System_String_ctor_encoding},
+	{".ctor(sbyte*)", ves_icall_System_String_ctor_RedirectToCreateString},
+	{".ctor(sbyte*,int,int)", ves_icall_System_String_ctor_RedirectToCreateString},
+	{".ctor(sbyte*,int,int,System.Text.Encoding)", ves_icall_System_String_ctor_RedirectToCreateString},
 	{"InternalAllocateStr", ves_icall_System_String_InternalAllocateStr},
 	{"InternalCharCopy", ves_icall_System_String_InternalCharCopy},
 	{"InternalCopyTo", ves_icall_System_String_InternalCopyTo},
Index: mono/mono/metadata/marshal.c
===================================================================
--- mono/mono/metadata/marshal.c	(revision 62559)
+++ mono/mono/metadata/marshal.c	(working copy)
@@ -23,6 +23,7 @@
 #include "mono/metadata/domain-internals.h"
 #include "mono/metadata/gc-internal.h"
 #include "mono/metadata/threads-types.h"
+#include "mono/metadata/string-icalls.h"
 #include <mono/os/gc_wrapper.h>
 #include <string.h>
 #include <errno.h>
@@ -6804,6 +6805,7 @@
 	MonoMethod *res;
 	GHashTable *cache;
 	gboolean pinvoke = FALSE;
+	gpointer iter;
 	int i;
 	const char *exc_class = "MissingMethodException";
 	const char *exc_arg = NULL;
@@ -6828,6 +6830,48 @@
 			piinfo->addr = mono_lookup_internal_call (method);
 	}
 
+	/* hack - redirect certain string constructors to CreateString */
+	if (piinfo->addr == ves_icall_System_String_ctor_RedirectToCreateString) {
+		g_assert (!pinvoke);
+		g_assert (method->string_ctor);
+		g_assert (sig->hasthis);
+
+		/* CreateString returns a value */
+		csig = signature_dup (method->klass->image, sig);
+		csig->ret = &mono_defaults.string_class->byval_arg;
+		csig->pinvoke = 0;
+
+		iter = NULL;
+		while ((res = mono_class_get_methods (mono_defaults.string_class, &iter))) {
+			if (!strcmp ("CreateString", res->name) &&
+				mono_metadata_signature_equal (csig, mono_method_signature (res))) {
+
+				g_assert (!(res->iflags & METHOD_IMPL_ATTRIBUTE_INTERNAL_CALL));
+				g_assert (!(res->flags & METHOD_ATTRIBUTE_PINVOKE_IMPL));
+
+				/* create a wrapper to preserve .ctor in stack trace */
+				mb = mono_mb_new (method->klass, method->name, MONO_WRAPPER_MANAGED_TO_NATIVE);
+
+				mono_mb_emit_byte (mb, CEE_LDARG_0);
+				for (i = 1; i <= csig->param_count; i++)
+					mono_mb_emit_ldarg (mb, i);
+				mono_mb_emit_managed_call (mb, res, NULL);
+				mono_mb_emit_byte (mb, CEE_RET);
+
+				res = mono_mb_create_and_cache (cache, method,
+					mb, csig, csig->param_count + 1);
+
+				mono_mb_free (mb);
+
+				return res;
+			}
+		}
+
+		/* exception will be thrown */
+		piinfo->addr = NULL;
+		g_warning ("cannot find CreateString for .ctor");
+	}
+
 	mb = mono_mb_new (method->klass, method->name, MONO_WRAPPER_MANAGED_TO_NATIVE);
 
 	mb->method->save_lmf = 1;
Index: mono/mono/metadata/string-icalls.c
===================================================================
--- mono/mono/metadata/string-icalls.c	(revision 62559)
+++ mono/mono/metadata/string-icalls.c	(working copy)
@@ -239,6 +239,14 @@
 	return s;
 }
 
+/* This function is redirected to String.CreateString ()
+   by mono_marshal_get_native_wrapper () */
+void
+ves_icall_System_String_ctor_RedirectToCreateString ()
+{
+	g_assert_not_reached ();
+}
+
 MonoString * 
 ves_icall_System_String_InternalJoin (MonoString *separator, MonoArray * value, gint32 sindex, gint32 count)
 {
Index: mono/mono/metadata/string-icalls.h
===================================================================
--- mono/mono/metadata/string-icalls.h	(revision 62559)
+++ mono/mono/metadata/string-icalls.h	(working copy)
@@ -37,6 +37,9 @@
 MonoString *
 ves_icall_System_String_ctor_encoding (gpointer dummy, gint8 *value, gint32 sindex, gint32 length, MonoObject *enc);
 
+void
+ves_icall_System_String_ctor_RedirectToCreateString ();
+
 MonoString * 
 ves_icall_System_String_InternalJoin (MonoString *separator, MonoArray * value, gint32 sindex, gint32 count);
 
Index: mcs/class/corlib/System/String.cs
===================================================================
--- mcs/class/corlib/System/String.cs	(revision 62559)
+++ mcs/class/corlib/System/String.cs	(working copy)
@@ -1854,6 +1854,54 @@
 			}
 		}
 
+		// Certain constructors are redirected to CreateString methods with
+		// matching argument list. The this pointer should not be used.
+
+		private unsafe String CreateString (sbyte* value)
+		{
+			byte* bytes = (byte*) value;
+			int length = 0;
+
+			try {
+				while (bytes++ [0] != 0)
+					length++;
+			} catch (NullReferenceException) {
+				throw new ArgumentOutOfRangeException ("value", "Pointer startIndex and length do not refer to a valid string.");
+			}
+
+			return CreateString (value, 0, length, null);
+		}
+
+		private unsafe String CreateString (sbyte* value, int startIndex, int length)
+		{
+			return CreateString (value, startIndex, length, null);
+		}
+
+		private unsafe String CreateString (sbyte* value, int startIndex, int length, Encoding enc)
+		{
+			if (length < 0)
+				throw new ArgumentOutOfRangeException ("length", "Non-negative number required.");
+			if (startIndex < 0)
+				throw new ArgumentOutOfRangeException ("startIndex", "Non-negative number required.");
+			if (value + startIndex < value)
+				throw new ArgumentOutOfRangeException ("startIndex", "Pointer startIndex and length do not refer to a valid string.");
+
+			if (enc == null)
+				enc = Encoding.Default;
+
+			byte [] bytes = new byte [length];
+
+			if (length != 0)
+				fixed (byte* bytePtr = bytes)
+					try {
+						memcpy (bytePtr, (byte*) (value + startIndex), length);
+					} catch (NullReferenceException) {
+						throw new ArgumentOutOfRangeException ("value", "Pointer startIndex and length do not refer to a valid string.");
+					}
+
+			return enc.GetString (bytes);
+		}
+
 		/* helpers used by the runtime as well as above or eslewhere in corlib */
 		internal static unsafe void memset (byte *dest, int val, int len)
 		{
Index: mcs/class/corlib/System.Text/ASCIIEncoding.cs
===================================================================
--- mcs/class/corlib/System.Text/ASCIIEncoding.cs	(revision 62559)
+++ mcs/class/corlib/System.Text/ASCIIEncoding.cs	(working copy)
@@ -310,8 +310,26 @@
 			return String.Empty;
 		
 		unsafe {
-			fixed (byte *ss = &bytes [0]) {
-				return new String ((sbyte*)ss, index, count);
+			fixed (byte* bytePtr = bytes) {
+				string s = string.InternalAllocateStr (count);
+
+				fixed (char* charPtr = s) {
+					byte* currByte = bytePtr + index;
+					byte* lastByte = currByte + count;
+					char* currChar = charPtr;
+
+					while (currByte < lastByte) {
+#if NET_2_0
+						byte b = currByte++ [0];
+						currChar++ [0] = b <= 0x7F ? (char) b : (char) '?';
+#else
+						// GetString is incompatible with GetChars
+						currChar++ [0] = (char) (currByte++ [0] & 0x7F);
+#endif
+					}
+				}
+
+				return s;
 			}
 		}
 	}
@@ -383,14 +401,8 @@
 		if (bytes == null) {
 			throw new ArgumentNullException ("bytes");
 		}
-		int count = bytes.Length;
-		if (count == 0)
-		    return String.Empty;
-		unsafe {
-			fixed (byte *ss = &bytes [0]) {
-				return new String ((sbyte*)ss, 0, count);
-			}
-		}
+
+		return GetString (bytes, 0, bytes.Length);
 	}
 #endif
 
Index: mcs/class/corlib/System.Text/Latin1Encoding.cs
===================================================================
--- mcs/class/corlib/System.Text/Latin1Encoding.cs	(revision 62559)
+++ mcs/class/corlib/System.Text/Latin1Encoding.cs	(working copy)
@@ -286,8 +286,19 @@
 		if (count == 0)
 		    return String.Empty;
 		unsafe {
-			fixed (byte *ss = &bytes [0]) {
-				return new String ((sbyte*)ss, index, count);
+			fixed (byte* bytePtr = bytes) {
+				string s = string.InternalAllocateStr (count);
+
+				fixed (char* charPtr = s) {
+					byte* currByte = bytePtr + index;
+					byte* lastByte = currByte + count;
+					char* currChar = charPtr;
+
+					while (currByte < lastByte)
+						currChar++ [0] = (char) currByte++ [0];
+				}
+
+				return s;
 			}
 		}
 	}
@@ -296,14 +307,8 @@
 		if (bytes == null) {
 			throw new ArgumentNullException ("bytes");
 		}
-		int count = bytes.Length;
-		if (count == 0)
-		    return String.Empty;
-		unsafe {
-			fixed (byte *ss = &bytes [0]) {
-				return new String ((sbyte*)ss, 0, count);
-			}
-		}
+
+		return GetString (bytes, 0, bytes.Length);
 	}
 
 #if !ECMA_COMPAT
