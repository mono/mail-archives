Index: libgc/alpha_mach_dep.S
===================================================================
--- libgc/alpha_mach_dep.S	(revision 36904)
+++ libgc/alpha_mach_dep.S	(working copy)
@@ -1,4 +1,4 @@
- # $Id: alpha_mach_dep.S,v 1.1 2003/03/31 14:33:59 martin Exp $
+ # $Id$
 	.arch ev6
 
         .text
Index: libgc/mkinstalldirs
===================================================================
--- libgc/mkinstalldirs	(revision 36904)
+++ libgc/mkinstalldirs	(working copy)
@@ -4,7 +4,7 @@
 # Created: 1993-05-16
 # Public domain
 
-# $Id: mkinstalldirs,v 1.1 2003/03/31 14:34:30 martin Exp $
+# $Id$
 
 errstatus=0
 dirmode=""
Index: mono/metadata/class.c
===================================================================
--- mono/metadata/class.c	(revision 36904)
+++ mono/metadata/class.c	(working copy)
@@ -11,9 +11,10 @@
  *     but wait until you know the size of the FieldMap, so that
  *     the class embeds directly the FieldMap after the vtable.
  *
- * 
+ *
  */
 #include <config.h>
+#include <intps.h>
 #include <glib.h>
 #include <stdio.h>
 #include <string.h>
@@ -870,9 +871,9 @@
 	if (g_hash_table_lookup_extended (iid_hash, str, NULL, &value)) {
 		mono_loader_unlock ();
 		g_free (str);
-		return (guint)value;
+		return (guint)(uintps)value;
 	} else {
-		g_hash_table_insert (iid_hash, str, (gpointer)iid);
+		g_hash_table_insert (iid_hash, str, (gpointer)(uintps)iid);
 		++iid;
 	}
 
Index: mono/metadata/security.c
===================================================================
--- mono/metadata/security.c	(revision 36904)
+++ mono/metadata/security.c	(working copy)
@@ -10,7 +10,7 @@
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
-
+#include <intps.h>
 #include <mono/metadata/appdomain.h>
 #include <mono/metadata/image.h>
 #include <mono/metadata/exception.h>
@@ -277,7 +277,7 @@
 		OpenProcessToken (GetCurrentProcess (), TOKEN_QUERY, &token);
 	}
 #else
-	token = (gpointer) geteuid ();
+	token = (gpointer) (uintps) geteuid ();
 #endif
 	return token;
 }
@@ -302,7 +302,7 @@
 		g_free (tu);
 	}
 #else 
-	gchar *uname = GetTokenName ((uid_t) token);
+	gchar *uname = GetTokenName ((uid_t) (uintps) token);
 
 	MONO_ARCH_SAVE_REGS;
 
@@ -374,7 +374,7 @@
 #endif
 
 	if (result) {
-		token = (gpointer) p->pw_uid;
+		token = (gpointer) (uintps) p->pw_uid;
 	}
 
 #ifdef HAVE_GETPWNAM_R
@@ -520,7 +520,7 @@
 	fbufsize = (size_t) 1024;
 #endif
 	fbuf = g_malloc0 (fbufsize);
-	retval = getgrgid_r ((gid_t) group, &grp, fbuf, fbufsize, &g);
+	retval = getgrgid_r ((gid_t) (uintps) group, &grp, fbuf, fbufsize, &g);
 	result = ((retval == 0) && (g == &grp));
 #else
 	/* default to non thread-safe but posix compliant function */
@@ -529,7 +529,7 @@
 #endif
 
 	if (result) {
-		result = IsMemberOf ((uid_t) user, g);
+		result = IsMemberOf ((uid_t)(uintps) user, g);
 	}
 
 #ifdef HAVE_GETGRGID_R
@@ -581,7 +581,7 @@
 #endif
 
 		if (result) {
-			result = IsMemberOf ((uid_t) user, g);
+			result = IsMemberOf ((uid_t)(uintps) user, g);
 		}
 
 #ifdef HAVE_GETGRNAM_R
Index: mono/metadata/process.c
===================================================================
--- mono/metadata/process.c	(revision 36904)
+++ mono/metadata/process.c	(working copy)
@@ -818,7 +818,7 @@
 		shell_args = "-c %s";
 #endif
 		if (spath != NULL) {
-			gint dummy;
+			gsize dummy;
 			gchar *newcmd, *tmp;
 			gchar *quoted;
 
Index: mono/metadata/debug-mono-symfile.h
===================================================================
--- mono/metadata/debug-mono-symfile.h	(revision 36904)
+++ mono/metadata/debug-mono-symfile.h	(working copy)
@@ -7,6 +7,7 @@
 #define __MONO_DEBUG_MONO_SYMFILE_H__
 
 #include <glib.h>
+#include <intps.h>
 #include <mono/metadata/class.h>
 #include <mono/metadata/reflection.h>
 #include <mono/metadata/mono-debug.h>
@@ -112,7 +113,7 @@
 
 struct MonoDebugLineNumberEntry {
 	guint32 offset;
-	guint32 address;
+	uintps address;
 };
 
 struct _MonoSymbolFile {
Index: mono/metadata/mono-debug.c
===================================================================
--- mono/metadata/mono-debug.c	(revision 36904)
+++ mono/metadata/mono-debug.c	(working copy)
@@ -1,4 +1,5 @@
 #include <config.h>
+#include <intps.h>
 #include <mono/metadata/assembly.h>
 #include <mono/metadata/tabledefs.h>
 #include <mono/metadata/tokentype.h>
@@ -318,7 +319,7 @@
 }
 
 static gint32
-il_offset_from_address (MonoDebugMethodJitInfo *jit, guint32 address)
+il_offset_from_address (MonoDebugMethodJitInfo *jit, uintps address)
 {
 	int i;
 
@@ -353,7 +354,7 @@
  * line number 8 in the variable pointed to by @line_number).
  */
 gchar *
-mono_debug_source_location_from_address (MonoMethod *method, guint32 address, guint32 *line_number,
+mono_debug_source_location_from_address (MonoMethod *method, uintps address, guint32 *line_number,
 					 MonoDomain *domain)
 {
 	MonoDebugMethodInfo *minfo;
@@ -376,7 +377,7 @@
 	if (minfo->handle && minfo->handle->symfile) {
 		gint32 offset = il_offset_from_address (domain_data->jit [minfo->index], address);
 		char *res = NULL;
-		
+
 		if (offset >= 0)
 			res = mono_debug_find_source_location (minfo->handle->symfile, method, offset, line_number);
 		mono_loader_unlock ();
@@ -430,7 +431,7 @@
  * relative to the beginning of the method @method.
  */
 gint32
-mono_debug_il_offset_from_address (MonoMethod *method, gint32 address, MonoDomain *domain)
+mono_debug_il_offset_from_address (MonoMethod *method, uintps address, MonoDomain *domain)
 {
 	MonoDebugMethodInfo *minfo;
 	MonoDebugDomainData *domain_data;
@@ -463,12 +464,12 @@
  * Returns: the machine address corresponding to IL offset @il_offset.
  * The returned value is an offset relative to the beginning of the method @method.
  */
-gint32
+uintps
 mono_debug_address_from_il_offset (MonoMethod *method, gint32 il_offset, MonoDomain *domain)
 {
 	MonoDebugMethodInfo *minfo;
 	MonoDebugDomainData *domain_data;
-	gint32 res;
+	uintps res;
 
 	if (il_offset < 0)
 		return -1;
Index: mono/metadata/mono-debug.h
===================================================================
--- mono/metadata/mono-debug.h	(revision 36904)
+++ mono/metadata/mono-debug.h	(working copy)
@@ -5,7 +5,7 @@
 
 #ifndef __MONO_DEBUG_H__
 #define __MONO_DEBUG_H__
-
+#include <intps.h>
 #include <glib.h>
 #include <mono/metadata/image.h>
 #include <mono/metadata/appdomain.h>
@@ -93,11 +93,11 @@
 void mono_debug_add_wrapper (MonoMethod *method, gpointer wrapper, MonoDomain *domain);
 
 void mono_debug_add_method (MonoMethod *method, MonoDebugMethodJitInfo *jit, MonoDomain *domain);
-gchar *mono_debug_source_location_from_address (MonoMethod *method, guint32 address,
+gchar *mono_debug_source_location_from_address (MonoMethod *method, uintps address,
 						guint32 *line_number, MonoDomain *domain);
 gchar *mono_debug_source_location_from_il_offset (MonoMethod *method, guint32 offset,
 						  guint32 *line_number);
-gint32 mono_debug_il_offset_from_address (MonoMethod *method, gint32 address, MonoDomain *domain);
-gint32 mono_debug_address_from_il_offset (MonoMethod *method, gint32 il_offset, MonoDomain *domain);
+gint32 mono_debug_il_offset_from_address (MonoMethod *method, uintps address, MonoDomain *domain);
+uintps mono_debug_address_from_il_offset (MonoMethod *method, gint32 il_offset, MonoDomain *domain);
 
 #endif /* __MONO_DEBUG_H__ */
Index: mono/metadata/mono-debug-debugger.c
===================================================================
--- mono/metadata/mono-debug-debugger.c	(revision 36904)
+++ mono/metadata/mono-debug-debugger.c	(working copy)
@@ -1,4 +1,5 @@
 #include <config.h>
+#include <intps.h>
 #include <stdlib.h>
 #include <string.h>
 #include <mono/metadata/assembly.h>
@@ -46,7 +47,7 @@
 static guint32 write_class (MonoDebuggerSymbolTable *table, MonoClass *klass);
 
 MonoDebuggerSymbolTable *mono_debugger_symbol_table = NULL;
-void (*mono_debugger_event_handler) (MonoDebuggerEvent event, gpointer data, guint32 arg) = NULL;
+void (*mono_debugger_event_handler) (MonoDebuggerEvent event, gpointer data, uintps arg) = NULL;
 
 #define WRITE_UINT32(ptr,value) G_STMT_START {	\
 	* ((guint32 *) ptr) = value;		\
@@ -1417,7 +1418,7 @@
 
 	// Prevent the object from being finalized.
 	last_exception = exc;
-	mono_debugger_event (MONO_DEBUGGER_EVENT_UNHANDLED_EXCEPTION, exc, addr);
+	mono_debugger_event (MONO_DEBUGGER_EVENT_UNHANDLED_EXCEPTION, exc, (uintps) addr);
 	return TRUE;
 }
 
@@ -1436,7 +1437,7 @@
 	info.exception_obj = exc;
 	info.stop = 0;
 
-	mono_debugger_event (MONO_DEBUGGER_EVENT_EXCEPTION, &info, addr);
+	mono_debugger_event (MONO_DEBUGGER_EVENT_EXCEPTION, &info, (uintps) addr);
 }
 
 gboolean
@@ -1454,7 +1455,7 @@
 	info.exception_obj = exc;
 	info.stop = 0;
 
-	mono_debugger_event (MONO_DEBUGGER_EVENT_THROW_EXCEPTION, &info, addr);
+	mono_debugger_event (MONO_DEBUGGER_EVENT_THROW_EXCEPTION, &info, (uintps) addr);
 	return info.stop != 0;
 }
 
Index: mono/metadata/mono-debug-debugger.h
===================================================================
--- mono/metadata/mono-debug-debugger.h	(revision 36904)
+++ mono/metadata/mono-debug-debugger.h	(working copy)
@@ -7,6 +7,7 @@
 #define __MONO_DEBUG_DEBUGGER_H__
 
 #include <glib.h>
+#include <intps.h>
 #include <mono/metadata/debug-helpers.h>
 #include <mono/metadata/debug-mono-symfile.h>
 #include <mono/io-layer/io-layer.h>
@@ -267,7 +268,7 @@
 
 #endif
 
-extern void (*mono_debugger_event_handler) (MonoDebuggerEvent event, gpointer data, guint32 arg);
+extern void (*mono_debugger_event_handler) (MonoDebuggerEvent event, gpointer data, uintps arg);
 
 void            mono_debugger_initialize                  (void);
 void            mono_debugger_cleanup                     (void);
Index: mono/metadata/marshal.c
===================================================================
--- mono/metadata/marshal.c	(revision 36904)
+++ mono/metadata/marshal.c	(working copy)
@@ -1,6 +1,6 @@
 /*
  * marshal.c: Routines for marshaling complex types in P/Invoke methods.
- * 
+ *
  * Author:
  *   Paolo Molaro (lupus@ximian.com)
  *
@@ -9,6 +9,7 @@
  */
 
 #include "config.h"
+#include <intps.h>
 #include "object.h"
 #include "loader.h"
 #include "metadata/marshal.h"
@@ -6634,7 +6635,7 @@
 #ifdef WIN32
 	TlsSetValue (last_error_tls_id, (gpointer)GetLastError ());
 #else
-	TlsSetValue (last_error_tls_id, (gpointer)errno);
+	TlsSetValue (last_error_tls_id, (gpointer)(uintps)errno);
 #endif
 }
 
@@ -6870,15 +6871,15 @@
 	return NULL;
 }
 
-guint32 
+guint32
 ves_icall_System_Runtime_InteropServices_Marshal_GetLastWin32Error (void)
 {
 	MONO_ARCH_SAVE_REGS;
 
-	return ((guint32)TlsGetValue (last_error_tls_id));
+	return ((guint32)(uintps)TlsGetValue (last_error_tls_id));
 }
 
-guint32 
+guint32
 ves_icall_System_Runtime_InteropServices_Marshal_SizeOf (MonoReflectionType *rtype)
 {
 	MonoClass *klass;
Index: mono/metadata/rand.c
===================================================================
--- mono/metadata/rand.c	(revision 36904)
+++ mono/metadata/rand.c	(working copy)
@@ -11,6 +11,7 @@
  */
 
 #include <config.h>
+#include <intps.h>
 #include <glib.h>
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -198,13 +199,13 @@
 	}
 
 	/* if required exception will be thrown in managed code */
-	return ((file < 0) ? NULL : (gpointer) file);
+	return ((file < 0) ? NULL : (gpointer) (uintps) file);
 }
 
 gpointer 
 ves_icall_System_Security_Cryptography_RNGCryptoServiceProvider_RngGetBytes (gpointer handle, MonoArray *arry)
 {
-	gint file = (gint) handle;
+	gint file = (gint) (uintps) handle;
 	guint32 len = mono_array_length (arry);
 	guchar *buf = mono_array_addr (arry, guchar, 0);
 
@@ -212,7 +213,7 @@
 		const char *socket_path = g_getenv ("MONO_EGD_SOCKET");
 		/* exception will be thrown in managed code */
 		if (socket_path == NULL)
-			return NULL; 
+			return NULL;
 		get_entropy_from_server (socket_path, mono_array_addr (arry, guchar, 0), mono_array_length (arry));
 		return (gpointer) -1;
 	}
@@ -242,7 +243,7 @@
 ves_icall_System_Security_Cryptography_RNGCryptoServiceProvider_RngClose (gpointer handle) 
 {
 	if (!egd)
-		close ((gint) handle);
+		close ((gint) (uintps) handle);
 }
 
 #endif /* OS definition */
Index: mono/io-layer/security.c
===================================================================
--- mono/io-layer/security.c	(revision 36904)
+++ mono/io-layer/security.c	(working copy)
@@ -8,6 +8,7 @@
  */
 
 #include <config.h>
+#include <intps.h>
 #include <mono/io-layer/io-layer.h>
 
 #include <pwd.h>
@@ -28,10 +29,10 @@
 #endif
 
 
-gboolean 
+gboolean
 ImpersonateLoggedOnUser (gpointer handle)
 {
-	uid_t token = (uid_t) handle;
+	uid_t token = (uid_t)(uintps)handle;
 #ifdef HAVE_SETRESUID
 	if (setresuid (-1, token, getuid ()) < 0)
 		return FALSE;
Index: mono/monoburg/Makefile.am
===================================================================
--- mono/monoburg/Makefile.am	(revision 36904)
+++ mono/monoburg/Makefile.am	(working copy)
@@ -1,4 +1,4 @@
-INCLUDES = $(BUILD_GLIB_CFLAGS) -I$(srcdir)
+INCLUDES = $(BUILD_GLIB_CFLAGS) -I$(srcdir) -I$(top_srcdir) 
 CC=$(CC_FOR_BUILD)
 
 #noinst_PROGRAMS = sample
Index: mono/monoburg/monoburg.c
===================================================================
--- mono/monoburg/monoburg.c	(revision 36904)
+++ mono/monoburg/monoburg.c	(working copy)
@@ -7,6 +7,7 @@
  * (C) 2001 Ximian, Inc.
  */
 
+#include <intps.h>
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
@@ -158,10 +159,10 @@
 	if (num < -1)
 		yyerror ("invalid terminal number %d", num);
 
-	if (!term_hash) 
+	if (!term_hash)
 		term_hash = g_hash_table_new (g_str_hash , g_str_equal);
 
-	g_hash_table_foreach (term_hash, (GHFunc) check_term_num, (gpointer) num);
+	g_hash_table_foreach (term_hash, (GHFunc) check_term_num, (gpointer)(uintps) num);
 
 	term = g_new0 (Term, 1);
 
Index: mono/mini/trace.c
===================================================================
--- mono/mini/trace.c	(revision 36904)
+++ mono/mini/trace.c	(working copy)
@@ -285,7 +285,7 @@
 		printf (") ip: %p\n", __builtin_return_address (1));
 		return;
 	}	
-	if (((int)ebp & (MONO_ARCH_FRAME_ALIGNMENT - 1)) != 0) {
+	if (((uintps)ebp & (MONO_ARCH_FRAME_ALIGNMENT - 1)) != 0) {
 		g_error ("unaligned stack detected (%p)", ebp);
 	}
 
@@ -333,7 +333,7 @@
 			
 		case MONO_TYPE_I:
 		case MONO_TYPE_U:
-			printf ("%p, ", (gpointer)*((int *)(cpos)));
+			printf ("%p, ", (gpointer)*((uintps *)(cpos)));
 			break;
 		case MONO_TYPE_BOOLEAN:
 		case MONO_TYPE_CHAR:
Index: mono/mini/inssel.brg
===================================================================
--- mono/mini/inssel.brg	(revision 36904)
+++ mono/mini/inssel.brg	(working copy)
@@ -74,7 +74,7 @@
                 inst->opcode = op; \
                 inst->dreg = dr; \
                 inst->sreg1 = sr; \
-                inst->inst_p1 = (gpointer)imm; \
+                inst->inst_p1 = (gpointer)(uintps)imm; \
 	        mono_bblock_add_inst (cfg->cbb, inst); \
 	} while (0)
 
Index: mono/mini/mini.c
===================================================================
--- mono/mini/mini.c	(revision 36904)
+++ mono/mini/mini.c	(working copy)
@@ -9,6 +9,7 @@
  */
 
 #include <config.h>
+#include <intps.h>
 #include <signal.h>
 #include <unistd.h>
 #include <math.h>
@@ -164,7 +165,7 @@
 		return;
 	}
 	method = mono_method_full_name (ji->method, TRUE);
-	source = mono_debug_source_location_from_address (ji->method, (int) ip, NULL, domain);
+	source = mono_debug_source_location_from_address (ji->method, (uintps) ip, NULL, domain);
 
 	g_print ("IP %p at offset 0x%x of method %s (%p %p)\n", ip, (char*)ip - (char*)ji->code_start, method, ji->code_start, (char*)ji->code_start + ji->code_size);
 
@@ -2124,7 +2125,7 @@
 	if (!sighash) {
 		sighash = g_hash_table_new (NULL, NULL);
 	}
-	else if ((res = g_hash_table_lookup (sighash, (gpointer)arity))) {
+	else if ((res = g_hash_table_lookup (sighash, (gpointer)(uintps)arity))) {
 		LeaveCriticalSection (&jit_mutex);
 		return res;
 	}
@@ -2143,7 +2144,7 @@
 
 	res->ret = &mono_defaults.int_class->byval_arg;
 
-	g_hash_table_insert (sighash, (gpointer)arity, res);
+	g_hash_table_insert (sighash, (gpointer)(uintps)arity, res);
 	LeaveCriticalSection (&jit_mutex);
 
 	return res;
@@ -2160,7 +2161,7 @@
 	if (!sighash) {
 		sighash = g_hash_table_new (NULL, NULL);
 	}
-	else if ((res = g_hash_table_lookup (sighash, (gpointer)arity))) {
+	else if ((res = g_hash_table_lookup (sighash, (gpointer)(uintps)arity))) {
 		LeaveCriticalSection (&jit_mutex);
 		return res;
 	}
@@ -2179,7 +2180,7 @@
 
 	res->ret = &mono_defaults.int_class->byval_arg;
 
-	g_hash_table_insert (sighash, (gpointer)arity, res);
+	g_hash_table_insert (sighash, (gpointer)(uintps)arity, res);
 	LeaveCriticalSection (&jit_mutex);
 
 	return res;
@@ -4073,7 +4074,7 @@
 				int temp;
 				MonoInst *iargs [1];
 
-				NEW_PCONST (cfg, iargs [0], mono_method_get_wrapper_data (method, n));				
+				NEW_PCONST (cfg, iargs [0], mono_method_get_wrapper_data (method, n));
 				temp = mono_emit_jit_icall (cfg, bblock, mono_string_new_wrapper, iargs, ip);
 				NEW_TEMPLOAD (cfg, *sp, temp);
 
@@ -4084,7 +4085,7 @@
 					MonoInst *iargs [3];
 
 					if (mono_compile_aot) {
-						cfg->ldstr_list = g_list_prepend (cfg->ldstr_list, (gpointer)n);
+						cfg->ldstr_list = g_list_prepend (cfg->ldstr_list, (gpointer)(uintps)n);
 					}
 
 					NEW_TEMPLOAD (cfg, iargs [0], mono_get_domainvar (cfg)->inst_c0);
@@ -6707,7 +6708,7 @@
 		}
 
 		for (i = 0; i < patch_info->table_size; i++) {
-			jump_table [i] = code + (int)patch_info->data.table [i];
+			jump_table [i] = code + (uintps) patch_info->data.table [i];
 		}
 		target = jump_table;
 		break;
@@ -6720,7 +6721,7 @@
 		break;
 	case MONO_PATCH_INFO_IID:
 		mono_class_init (patch_info->data.klass);
-		target = (gpointer)patch_info->data.klass->interface_id;
+		target = (gpointer)(uintps)patch_info->data.klass->interface_id;
 		break;
 	case MONO_PATCH_INFO_VTABLE:
 		target = mono_class_vtable (domain, patch_info->data.klass);
Index: mono/mini/mini.h
===================================================================
--- mono/mini/mini.h	(revision 36904)
+++ mono/mini/mini.h	(working copy)
@@ -2,6 +2,7 @@
 #define __MONO_MINI_H__
 
 #include "config.h"
+#include "intps.h"
 #include <glib.h>
 #include <signal.h>
 #include <mono/metadata/loader.h>
@@ -138,9 +139,9 @@
 	gint32 cil_length;
 
 	/* The address of the generated code, used for fixups */
-	int native_offset;
-	int max_offset;
-	
+	uintps native_offset;
+	uintps max_offset;
+
 	gint32 dfn;
 
 	/* unique block number identification */
@@ -176,7 +177,7 @@
 	MonoBasicBlock *df_parent, *ancestor, *child, *label;
 	MonoEdge *bucket;
 	int size, sdom, idomn;
-	
+
 	/* loop nesting and recognition */
 	GList *loop_blocks;
 	gint8  nesting;
@@ -206,7 +207,7 @@
 	 *
 	 *  Bits: |     0-3      |       4-7      |     8-31
 	 * 	  |		 |                |
-	 *        | clause-flags |   MONO_REGION  | clause-index 
+	 *        | clause-flags |   MONO_REGION  | clause-index
 	 *
 	 */
         guint region;
@@ -424,11 +425,12 @@
 	MonoJumpInfoType type;
 	union {
 		gconstpointer   target;
-#if SIZEOF_VOID_P == 8
+		uintps		offset;
+/*#if SIZEOF_VOID_P == 8
 		gint64          offset;
 #else
 		int             offset;
-#endif
+#endif*/
 		MonoBasicBlock *bb;
 		MonoBasicBlock **table;
 		MonoInst       *inst;
Index: mono/mini/debug-mini.c
===================================================================
--- mono/mini/debug-mini.c	(revision 36904)
+++ mono/mini/debug-mini.c	(working copy)
@@ -537,5 +537,5 @@
 	if (mono_debug_format == MONO_DEBUG_FORMAT_NONE)
 		return;
 
-	mono_debug_add_wrapper (method, callinfo->func, mono_get_root_domain ());
+	mono_debug_add_wrapper (method, (gpointer) callinfo->func, mono_get_root_domain ());
 }
Index: mono/mini/mini-exceptions.c
===================================================================
--- mono/mini/mini-exceptions.c	(revision 36904)
+++ mono/mini/mini-exceptions.c	(working copy)
@@ -499,8 +499,8 @@
 					/* Switch back to normal stack */
 					if (stack_overflow)
 						/* Free up some stack space */
-						MONO_CONTEXT_SET_SP (&initial_ctx, (guint32)(MONO_CONTEXT_GET_SP (&initial_ctx)) + (64 * 1024));
-					MONO_CONTEXT_SET_IP (&initial_ctx, (unsigned int)jit_tls->abort_func);
+						MONO_CONTEXT_SET_SP (&initial_ctx, (uintps)(MONO_CONTEXT_GET_SP (&initial_ctx)) + (64 * 1024));
+					MONO_CONTEXT_SET_IP (&initial_ctx, (uintps) jit_tls->abort_func);
 					restore_context (&initial_ctx);
 				}
 				else
Index: mono/mini/linear-scan.c
===================================================================
--- mono/mini/linear-scan.c	(revision 36904)
+++ mono/mini/linear-scan.c	(working copy)
@@ -90,7 +90,7 @@
 	max_regs = g_list_length (regs);
 
 	for (l = regs; l; l = l->next) {
-		int regnum = (int)l->data;
+		int regnum = (int)(uintps)l->data;
 		g_assert (regnum < G_N_ELEMENTS (gains));
 		gains [regnum] = 0;
 	}
@@ -115,7 +115,7 @@
 				amv->range.last_use.abs_pos, amv->spill_costs, amv->reg);
 #endif
 			active = g_list_delete_link (active, active);
-			regs = g_list_prepend (regs, (gpointer)amv->reg);
+			regs = g_list_prepend (regs, (gpointer)(uintps)amv->reg);
 			gains [amv->reg] += amv->spill_costs;
 		}
 		
@@ -154,7 +154,7 @@
 
 			g_assert (regs);
 
-			vmv->reg = (int)regs->data;
+			vmv->reg = (int)(uintps)regs->data;
 
 			used_regs |= 1LL << vmv->reg;
 
Index: mono/mini/ssa.c
===================================================================
--- mono/mini/ssa.c	(revision 36904)
+++ mono/mini/ssa.c	(working copy)
@@ -952,7 +952,7 @@
 				*bblist = g_list_prepend (*bblist, tb);
 			}
 		} else if (r1 == 2) {
-			for (i = (int)inst->klass; i >= 0; i--) {
+			for (i = (int)(uintps)inst->klass; i >= 0; i--) {
 				MonoBasicBlock *tb = inst->inst_many_bb [i];
 				if (!(tb->flags &  BB_REACHABLE)) {
 					tb->flags |= BB_REACHABLE;
Index: mono/cil/make-opcode-def.xsl
===================================================================
--- mono/cil/make-opcode-def.xsl	(revision 36904)
+++ mono/cil/make-opcode-def.xsl	(working copy)
@@ -10,7 +10,7 @@
  |
  | Author: Sergey Chaban
  |
- | $Id: make-opcode-def.xsl,v 1.1 2001/07/13 01:04:23 miguel Exp $
+ | $Id$
   -->
 
 
