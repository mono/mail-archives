Index: configure.in
===================================================================
--- configure.in	(revision 17)
+++ configure.in	(working copy)
@@ -1634,6 +1634,13 @@
 AC_ARG_ENABLE(nunit-tests, [ --enable-nunit-tests	Run the nunit tests of the class library on 'make check'])
 AM_CONDITIONAL(ENABLE_NUNIT_TESTS, [test x$enable_nunit_tests = xyes])
 
+AC_MSG_CHECKING([if big-arrays are to be enabled])
+AC_ARG_ENABLE(big-arrays,  [ --enable-big-arrays	Enable the allocation and indexing of arrays greater than Int32.MaxValue])
+AC_MSG_RESULT($enable_big_arrays)
+if test "x$enable_big_arrays" = "xyes" ; then
+	AC_DEFINE(MONO_BIG_ARRAYS,1,[Enable the allocation and indexing of arrays greater than Int32.MaxValue])
+fi
+
 TARGET="unknown"
 ACCESS_UNALIGNED="yes"
 
@@ -2241,6 +2248,7 @@
 	JNI support: $jdk_headers_found
 	libgdiplus:  $libgdiplus_msg
 	zlib:        $zlib_msg
+	BigArrays:   $enable_big_arrays
 	$disabled
 
 "
Index: mono/metadata/object.c
===================================================================
--- mono/metadata/object.c	(revision 17)
+++ mono/metadata/object.c	(working copy)
@@ -3414,7 +3414,7 @@
 void
 mono_array_full_copy (MonoArray *src, MonoArray *dest)
 {
-	int size;
+	mono_array_size_t size;
 	MonoClass *klass = src->obj.vtable->klass;
 
 	MONO_ARCH_SAVE_REGS;
@@ -3450,8 +3450,8 @@
 mono_array_clone_in_domain (MonoDomain *domain, MonoArray *array)
 {
 	MonoArray *o;
-	guint32 size, i;
-	guint32 *sizes;
+	mono_array_size_t size, i;
+	mono_array_size_t *sizes;
 	MonoClass *klass = array->obj.vtable->klass;
 
 	MONO_ARCH_SAVE_REGS;
@@ -3476,7 +3476,7 @@
 		return o;
 	}
 	
-	sizes = alloca (klass->rank * sizeof(guint32) * 2);
+	sizes = alloca (klass->rank * sizeof(mono_array_size_t) * 2);
 	size = mono_array_element_size (klass);
 	for (i = 0; i < klass->rank; ++i) {
 		sizes [i] = array->bounds [i].length;
@@ -3513,12 +3513,23 @@
 }
 
 /* helper macros to check for overflow when calculating the size of arrays */
-#define MYGUINT32_MAX 4294967295U
+#if (GLIB_SIZEOF_SIZE_T < 4 )
+#define MYGUINT32_MAX 0xFFFFFFFFUL
+#define MYGUINT_MAX MYGUINT32_MAX
 #define CHECK_ADD_OVERFLOW_UN(a,b) \
         (guint32)(MYGUINT32_MAX) - (guint32)(b) < (guint32)(a) ? -1 : 0
 #define CHECK_MUL_OVERFLOW_UN(a,b) \
         ((guint32)(a) == 0) || ((guint32)(b) == 0) ? 0 : \
         (guint32)(b) > ((MYGUINT32_MAX) / (guint32)(a))
+#else
+#define MYGUINT64_MAX 0x0000FFFFFFFFFFFFUL
+#define MYGUINT_MAX MYGUINT64_MAX
+#define CHECK_ADD_OVERFLOW_UN(a,b) \
+        (guint64)(MYGUINT64_MAX) - (guint64)(b) < (guint64)(a) ? -1 : 0
+#define CHECK_MUL_OVERFLOW_UN(a,b) \
+        ((guint64)(a) == 0) || ((guint64)(b) == 0) ? 0 : \
+        (guint64)(b) > ((MYGUINT64_MAX) / (guint64)(a))
+#endif
 
 /**
  * mono_array_new_full:
@@ -3531,9 +3542,9 @@
  * lower bounds and type.
  */
 MonoArray*
-mono_array_new_full (MonoDomain *domain, MonoClass *array_class, guint32 *lengths, guint32 *lower_bounds)
+mono_array_new_full (MonoDomain *domain, MonoClass *array_class, mono_array_size_t *lengths, mono_array_size_t *lower_bounds)
 {
-	guint32 byte_len, len, bounds_size;
+	mono_array_size_t byte_len, len, bounds_size;
 	MonoObject *o;
 	MonoArray *array;
 	MonoVTable *vtable;
@@ -3548,34 +3559,32 @@
 	/* A single dimensional array with a 0 lower bound is the same as an szarray */
 	if (array_class->rank == 1 && ((array_class->byval_arg.type == MONO_TYPE_SZARRAY) || (lower_bounds && lower_bounds [0] == 0))) {
 		len = lengths [0];
-		if ((int) len < 0)
+		if (len > MONO_ARRAY_MAX_INDEX)
 			arith_overflow ();
 		bounds_size = 0;
 	} else {
 		bounds_size = sizeof (MonoArrayBounds) * array_class->rank;
 
 		for (i = 0; i < array_class->rank; ++i) {
-			if ((int) lengths [i] < 0)
-				arith_overflow ();
 			if (CHECK_MUL_OVERFLOW_UN (len, lengths [i]))
-				mono_gc_out_of_memory (MYGUINT32_MAX);
+				mono_gc_out_of_memory (MONO_ARRAY_MAX_SIZE);
 			len *= lengths [i];
 		}
 	}
 
 	if (CHECK_MUL_OVERFLOW_UN (byte_len, len))
-		mono_gc_out_of_memory (MYGUINT32_MAX);
+		mono_gc_out_of_memory (MONO_ARRAY_MAX_SIZE);
 	byte_len *= len;
 	if (CHECK_ADD_OVERFLOW_UN (byte_len, sizeof (MonoArray)))
-		mono_gc_out_of_memory (MYGUINT32_MAX);
+		mono_gc_out_of_memory (MONO_ARRAY_MAX_SIZE);
 	byte_len += sizeof (MonoArray);
 	if (bounds_size) {
 		/* align */
 		if (CHECK_ADD_OVERFLOW_UN (byte_len, 3))
-			mono_gc_out_of_memory (MYGUINT32_MAX);
+			mono_gc_out_of_memory (MONO_ARRAY_MAX_SIZE);
 		byte_len = (byte_len + 3) & ~3;
 		if (CHECK_ADD_OVERFLOW_UN (byte_len, bounds_size))
-			mono_gc_out_of_memory (MYGUINT32_MAX);
+			mono_gc_out_of_memory (MONO_ARRAY_MAX_SIZE);
 		byte_len += bounds_size;
 	}
 	/* 
@@ -3621,7 +3630,7 @@
  * This routine creates a new szarray with @n elements of type @eclass.
  */
 MonoArray *
-mono_array_new (MonoDomain *domain, MonoClass *eclass, guint32 n)
+mono_array_new (MonoDomain *domain, MonoClass *eclass, mono_array_size_t n)
 {
 	MonoClass *ac;
 
@@ -3642,23 +3651,23 @@
  * can be sure about the domain it operates in.
  */
 MonoArray *
-mono_array_new_specific (MonoVTable *vtable, guint32 n)
+mono_array_new_specific (MonoVTable *vtable, mono_array_size_t n)
 {
 	MonoObject *o;
 	MonoArray *ao;
-	guint32 byte_len, elem_size;
+	mono_array_size_t byte_len, elem_size;
 
 	MONO_ARCH_SAVE_REGS;
 
-	if ((int) n < 0)
+	if (n > MONO_ARRAY_MAX_INDEX)
 		arith_overflow ();
-	
+
 	elem_size = mono_array_element_size (vtable->klass);
-	if (CHECK_MUL_OVERFLOW_UN (n, elem_size))
-		mono_gc_out_of_memory (MYGUINT32_MAX);
+	if (CHECK_MUL_OVERFLOW_UN (n, elem_size)) 
+		mono_gc_out_of_memory (MONO_ARRAY_MAX_SIZE);
 	byte_len = n * elem_size;
 	if (CHECK_ADD_OVERFLOW_UN (byte_len, sizeof (MonoArray)))
-		mono_gc_out_of_memory (MYGUINT32_MAX);
+		mono_gc_out_of_memory (MONO_ARRAY_MAX_SIZE);
 	byte_len += sizeof (MonoArray);
 	if (!vtable->klass->has_references) {
 		o = mono_object_allocate_ptrfree (byte_len, vtable);
Index: mono/metadata/object.h
===================================================================
--- mono/metadata/object.h	(revision 17)
+++ mono/metadata/object.h	(working copy)
@@ -28,9 +28,19 @@
 	MonoThreadsSync *synchronisation;
 } MonoObject;
 
+#ifdef MONO_BIG_ARRAYS
+typedef guint64 mono_array_size_t;
+#define MONO_ARRAY_MAX_INDEX G_MAXINT64
+#define MONO_ARRAY_MAX_SIZE  G_MAXUINT64
+#else
+typedef guint32 mono_array_size_t;
+#define MONO_ARRAY_MAX_INDEX G_MAXINT32
+#define MONO_ARRAY_MAX_SIZE  G_MAXUINT32
+#endif
+
 typedef struct {
-	guint32 length;
-	guint32 lower_bound;
+	mono_array_size_t length;
+	mono_array_size_t lower_bound;
 } MonoArrayBounds;
 
 typedef struct {
@@ -38,7 +48,7 @@
 	/* bounds is NULL for szarrays */
 	MonoArrayBounds *bounds;
 	/* total number of elements of the array */
-	guint32 max_length; 
+	mono_array_size_t max_length; 
 	/* we use double to ensure proper alignment on platforms that need it */
 	double vector [MONO_ZERO_LEN_ARRAY];
 } MonoArray;
@@ -103,14 +113,14 @@
 mono_object_new_from_token  (MonoDomain *domain, MonoImage *image, guint32 token);
 
 MonoArray*
-mono_array_new		    (MonoDomain *domain, MonoClass *eclass, guint32 n);
+mono_array_new		    (MonoDomain *domain, MonoClass *eclass, mono_array_size_t n);
 
 MonoArray*
 mono_array_new_full	    (MonoDomain *domain, MonoClass *array_class,
-			     guint32 *lengths, guint32 *lower_bounds);
+			     mono_array_size_t *lengths, mono_array_size_t *lower_bounds);
 
 MonoArray *
-mono_array_new_specific	    (MonoVTable *vtable, guint32 n);
+mono_array_new_specific	    (MonoVTable *vtable, mono_array_size_t n);
 
 MonoArray*
 mono_array_clone	    (MonoArray *array);
Index: mono/metadata/icall-def.h
===================================================================
--- mono/metadata/icall-def.h	(revision 17)
+++ mono/metadata/icall-def.h	(working copy)
@@ -90,9 +90,11 @@
 ICALL(ARRAY_1, "ClearInternal",    ves_icall_System_Array_ClearInternal)
 ICALL(ARRAY_2, "Clone",            mono_array_clone)
 ICALL(ARRAY_3, "CreateInstanceImpl",   ves_icall_System_Array_CreateInstanceImpl)
+ICALL(ARRAY_14, "CreateInstanceImpl64",   ves_icall_System_Array_CreateInstanceImpl64)
 ICALL(ARRAY_4, "FastCopy",         ves_icall_System_Array_FastCopy)
 ICALL(ARRAY_5, "GetGenericValueImpl", ves_icall_System_Array_GetGenericValueImpl)
 ICALL(ARRAY_6, "GetLength",        ves_icall_System_Array_GetLength)
+ICALL(ARRAY_15, "GetLongLength",        ves_icall_System_Array_GetLongLength)
 ICALL(ARRAY_7, "GetLowerBound",    ves_icall_System_Array_GetLowerBound)
 ICALL(ARRAY_8, "GetRank",          ves_icall_System_Array_GetRank)
 ICALL(ARRAY_9, "GetValue",         ves_icall_System_Array_GetValue)
Index: mono/metadata/icall.c
===================================================================
--- mono/metadata/icall.c	(revision 17)
+++ mono/metadata/icall.c	(working copy)
@@ -503,7 +503,7 @@
 {
 	MonoClass *aklass;
 	MonoArray *array;
-	guint32 *sizes, i;
+	mono_array_size_t *sizes, i;
 	gboolean bounded = FALSE;
 
 	MONO_ARCH_SAVE_REGS;
@@ -527,11 +527,11 @@
 
 	aklass = mono_bounded_array_class_get (mono_class_from_mono_type (type->type), mono_array_length (lengths), bounded);
 
-	sizes = alloca (aklass->rank * sizeof(guint32) * 2);
+	sizes = alloca (aklass->rank * sizeof(mono_array_size_t) * 2);
 	for (i = 0; i < aklass->rank; ++i) {
-		sizes [i] = mono_array_get (lengths, guint32, i);
+		sizes [i] = mono_array_get (lengths, gint32, i);
 		if (bounds)
-			sizes [i + aklass->rank] = mono_array_get (bounds, guint32, i);
+			sizes [i + aklass->rank] = mono_array_get (bounds, gint32, i);
 		else
 			sizes [i + aklass->rank] = 0;
 	}
@@ -541,6 +541,51 @@
 	return array;
 }
 
+static MonoArray *
+ves_icall_System_Array_CreateInstanceImpl64 (MonoReflectionType *type, MonoArray *lengths, MonoArray *bounds)
+{
+	MonoClass *aklass;
+	MonoArray *array;
+	mono_array_size_t *sizes, i;
+	gboolean bounded = FALSE;
+
+	MONO_ARCH_SAVE_REGS;
+
+	MONO_CHECK_ARG_NULL (type);
+	MONO_CHECK_ARG_NULL (lengths);
+
+	MONO_CHECK_ARG (lengths, mono_array_length (lengths) > 0);
+	if (bounds)
+		MONO_CHECK_ARG (bounds, mono_array_length (lengths) == mono_array_length (bounds));
+
+	for (i = 0; i < mono_array_length (lengths); i++) 
+		if ((mono_array_get (lengths, gint64, i) < 0) ||
+		    (mono_array_get (lengths, gint64, i) > MONO_ARRAY_MAX_INDEX))
+			mono_raise_exception (mono_get_exception_argument_out_of_range (NULL));
+
+	if (bounds && (mono_array_length (bounds) == 1) && (mono_array_get (bounds, gint64, 0) != 0))
+		/* vectors are not the same as one dimensional arrays with no-zero bounds */
+		bounded = TRUE;
+	else
+		bounded = FALSE;
+
+	aklass = mono_bounded_array_class_get (mono_class_from_mono_type (type->type), mono_array_length (lengths), bounded);
+
+	sizes = alloca (aklass->rank * sizeof(mono_array_size_t) * 2);
+	for (i = 0; i < aklass->rank; ++i) {
+		sizes [i] = mono_array_get (lengths, gint64, i);
+		if (bounds)
+			sizes [i + aklass->rank] = mono_array_get (bounds, gint64, i);
+		else
+			sizes [i + aklass->rank] = 0;
+	}
+
+	array = mono_array_new_full (mono_object_domain (type), aklass, sizes, sizes + aklass->rank);
+
+	return array;
+}
+
+
 static gint32 
 ves_icall_System_Array_GetRank (MonoObject *this)
 {
@@ -553,6 +598,7 @@
 ves_icall_System_Array_GetLength (MonoArray *this, gint32 dimension)
 {
 	gint32 rank = ((MonoObject *)this)->vtable->klass->rank;
+	mono_array_size_t length;
 
 	MONO_ARCH_SAVE_REGS;
 
@@ -560,6 +606,27 @@
 		mono_raise_exception (mono_get_exception_index_out_of_range ());
 	
 	if (this->bounds == NULL)
+		length = this->max_length;
+	else
+		length = this->bounds [dimension].length;
+
+	if (length > G_MAXINT32)
+	        mono_raise_exception (mono_get_exception_overflow ());
+
+	return length;
+}
+
+static gint64
+ves_icall_System_Array_GetLongLength (MonoArray *this, gint32 dimension)
+{
+	gint32 rank = ((MonoObject *)this)->vtable->klass->rank;
+
+	MONO_ARCH_SAVE_REGS;
+
+	if ((dimension < 0) || (dimension >= rank))
+		mono_raise_exception (mono_get_exception_index_out_of_range ());
+	
+	if (this->bounds == NULL)
 		return this->max_length;
 	
 	return this->bounds [dimension].length;
@@ -2782,12 +2849,12 @@
 	
 	if (m->klass->rank && !strcmp (m->name, ".ctor")) {
 		int i;
-		guint32 *lengths;
-		guint32 *lower_bounds;
+		mono_array_size_t *lengths;
+		mono_array_size_t *lower_bounds;
 		pcount = mono_array_length (params);
-		lengths = alloca (sizeof (guint32) * pcount);
+		lengths = alloca (sizeof (mono_array_size_t) * pcount);
 		for (i = 0; i < pcount; ++i)
-			lengths [i] = *(gint32*) ((char*)mono_array_get (params, gpointer, i) + sizeof (MonoObject));
+			lengths [i] = *(mono_array_size_t*) ((char*)mono_array_get (params, gpointer, i) + sizeof (MonoObject));
 
 		if (m->klass->rank == pcount) {
 			/* Only lengths provided. */
Index: mono/metadata/socket-io.c
===================================================================
--- mono/metadata/socket-io.c	(revision 17)
+++ mono/metadata/socket-io.c	(working copy)
@@ -1500,6 +1500,7 @@
 	MonoClass *sock_arr_class;
 	MonoArray *socks;
 	time_t start;
+	mono_array_size_t socks_size;
 	
 	MONO_ARCH_SAVE_REGS;
 
@@ -1578,9 +1579,8 @@
 	}
 
 	sock_arr_class= ((MonoObject *)*sockets)->vtable->klass;
-	ret += 3; /* space for the NULL delimiters */
-	socks = mono_array_new_full (mono_domain_get (), sock_arr_class, (guint32*)&ret, NULL);
-	ret -= 3;
+	socks_size = (unsigned)(ret + 3); /* space for the NULL delimiters */
+	socks = mono_array_new_full (mono_domain_get (), sock_arr_class, &socks_size, NULL);
 	mode = idx = 0;
 	for (i = 0; i < count && ret > 0; i++) {
 		mono_pollfd *pfd;
