diff -u C:\DIFF\old\System.Data\System.Data/ConstraintCollection.cs C:\DIFF\new\System.Data\System.Data/ConstraintCollection.cs
--- C:\DIFF\old\System.Data\System.Data/ConstraintCollection.cs	2003-09-29 10:47:10.648519800 +0300
+++ C:\DIFF\new\System.Data\System.Data/ConstraintCollection.cs	2003-09-29 11:32:46.000000000 +0300
@@ -30,10 +30,18 @@
 		
 		public event CollectionChangeEventHandler CollectionChanged;
 		internal event DelegateValidateRemoveConstraint ValidateRemoveConstraint;
-		
+		private DataTable table;
 		//Don't allow public instantiation
 		//Will be instantianted from DataTable
-		internal ConstraintCollection(){} 
+		internal ConstraintCollection(DataTable table){
+			this.table = table;
+		} 
+
+		internal DataTable Table{
+			get{
+				return this.table;
+			}
+		}
 
 		public virtual Constraint this[string name] {
 			get {
@@ -342,5 +350,6 @@
 			failReason = tmp;
 			return !cancel;
 		}
+
 	}
 }
diff -u C:\DIFF\old\System.Data\System.Data/DataTable.cs C:\DIFF\new\System.Data\System.Data/DataTable.cs
--- C:\DIFF\old\System.Data\System.Data/DataTable.cs	2003-09-29 11:36:33.794984900 +0300
+++ C:\DIFF\new\System.Data\System.Data/DataTable.cs	2003-09-25 14:20:42.000000000 +0300
@@ -66,7 +66,7 @@
 		{
 			dataSet = null;
 			_columnCollection = new DataColumnCollection(this);
-			_constraintCollection = new ConstraintCollection(); 
+			_constraintCollection = new ConstraintCollection(this); 
 			_extendedProperties = new PropertyCollection();
 			_tableName = "";
 			_nameSpace = null;
@@ -396,9 +396,19 @@
 		{
 			//FIXME: Do we need to validate anything here or
 			//try to catch any errors to deal with them?
-
-			foreach(DataRow myRow in _rows) {
+			
+			// we do not use foreach because if one of the rows is in Delete state
+			// it will be romeved from Rows and we get an exception.
+			DataRow myRow;
+			for (int i = 0; i < Rows.Count; )
+			{
+				myRow = Rows[i];
 				myRow.AcceptChanges();
+
+				// if the row state is Detached it meens that it was removed from row list (Rows)
+				// so we should not increase 'i'.
+				if (myRow.RowState != DataRowState.Detached)
+					i++;
 			}
 		}
 
@@ -427,9 +437,33 @@
 			// TODO: thow an exception if any rows that 
 			//       have enforced child relations 
 			//       that would result in child rows being orphaned
+			// now we check if any ForeignKeyConstraint is referncing 'table'.
+			if (DataSet != null)
+			{
+				IEnumerator tableEnumerator = DataSet.Tables.GetEnumerator();
+			
+				// loop on all tables in dataset
+				while (tableEnumerator.MoveNext())
+				{
+					IEnumerator constraintEnumerator = ((DataTable) tableEnumerator.Current).Constraints.GetEnumerator();
+					// loop on all constrains in the current table
+					while (constraintEnumerator.MoveNext())
+					{
+						Object o = constraintEnumerator.Current;
+						// we only check ForeignKeyConstraint
+						if (o is ForeignKeyConstraint)
+						{
+							ForeignKeyConstraint fc = (ForeignKeyConstraint) o;
+							if(fc.RelatedTable == this && fc.Table.Rows.Count > 0)
+								throw new InvalidConstraintException("Cannot clear table " + fc.RelatedTable + " because ForeignKeyConstraint " + fc.ConstraintName + " enforces constraints and there are child rows in " + fc.Table);
+						}
+					}
+				}
+			}
+			
 			// TODO: throw a NotSupportedException if the DataTable is part
 			//       of a DataSet that is binded to an XmlDataDocument
-
+			
 			_rows.Clear ();
 		}
 
@@ -487,12 +521,11 @@
 			DataTable Copy = new DataTable ();
 			CopyProperties (Copy);
 
+			// we can not simply copy the row values (NewRow [C.ColumnName] = Row [C.ColumnName])
+			// because if the row state is deleted we get an exception.
 			foreach (DataRow Row in Rows) {
 				DataRow NewRow = Copy.NewRow ();
-				NewRow.RowError = Row.RowError;
-				foreach (DataColumn C in Copy.Columns) {
-					NewRow [C.ColumnName] = Row [C.ColumnName];
-				}
+				Row.CopyValuesToRow(NewRow);
 				Copy.Rows.Add (NewRow);
 			}
 		       			
@@ -555,8 +588,7 @@
 		[MonoTODO]
 		public DataTable GetChanges() 
 		{
-			//TODO:
-			return this;
+			return GetChanges(DataRowState.Added | DataRowState.Deleted | DataRowState.Modified);
 		}
 
 		/// <summary>
@@ -567,8 +599,21 @@
 		[MonoTODO]	
 		public DataTable GetChanges(DataRowState rowStates) 
 		{
-			//TODO:
-			return this;
+			DataTable copyTable = null;
+
+			IEnumerator rowEnumerator = Rows.GetEnumerator();
+			while (rowEnumerator.MoveNext()) {
+				DataRow row = (DataRow)rowEnumerator.Current;
+				if (row.IsRowChanged(rowStates)) {
+					if (copyTable == null)
+						copyTable = Clone();
+					DataRow newRow = copyTable.NewRow();
+					copyTable.Rows.Add(newRow);
+					row.CopyValuesToRow(newRow);
+				}
+			}
+			 
+			return copyTable;
 		}
 
 		/// <summary>
@@ -617,6 +662,10 @@
 		[MonoTODO]
 		public void ImportRow (DataRow row) 
 		{
+			DataRow newRow = NewRow();
+			Rows.Add(newRow);
+			row.CopyValuesToRow(newRow);
+			
 		}
 
 		/// <summary>
@@ -640,8 +689,32 @@
 				if (fAcceptChanges)
 					row.AcceptChanges ();
 			}
-			else
-				throw new NotImplementedException ();
+			else {
+				bool hasPrimaryValues = true;
+				// initiate an array that has the values of the primary keys.
+				object[] keyValues = new object[PrimaryKey.Length];
+				for (int i = 0; i < keyValues.Length && hasPrimaryValues; i++)
+				{
+					if(PrimaryKey[i].Ordinal < values.Length)
+						keyValues[i] = values[PrimaryKey[i].Ordinal];
+					else
+						hasPrimaryValues = false;
+				}
+				
+				if (hasPrimaryValues){
+					// find the row in the table.
+					row = Rows.Find(keyValues);
+				}
+				
+				if (row == null)
+					row = Rows.Add (values);
+				else
+					row.ItemArray = values;
+				
+				if (fAcceptChanges)
+					row.AcceptChanges ();
+			}
+				
 			return row;
 		}
 
@@ -679,8 +752,6 @@
 		[MonoTODO]
 		public void RejectChanges () 
 		{	
-			//foreach(DataRow myRow in _rows)
-			//{
 			for (int i = _rows.Count - 1; i >= 0; i--) {
 				DataRow row = _rows [i];
 				if (row.RowState != DataRowState.Unchanged)
@@ -782,7 +853,10 @@
 		{
 			//LAMESPEC: spec says concat the two. impl puts a 
 			//plus sign infront of DisplayExpression
-			return TableName + " + " + DisplayExpression;
+			string retVal = TableName;
+			if(DisplayExpression != null && DisplayExpression != "")
+				retVal += " + " + DisplayExpression;
+			return retVal;
 		}
 
 		
