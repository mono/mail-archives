--- C:\DIFF\old\System.Data\System.Data\DataRow.cs	2003-09-22 16:34:45.000000000 +0300
+++ c:\DIFF\new\System.Data\System.Data\DataRow.cs	2003-09-25 13:16:46.000000000 +0300
@@ -395,13 +395,14 @@
 			EndEdit(); // in case it hasn't been called
 			switch (rowState) {
 			case DataRowState.Added:
-			case DataRowState.Detached:
 			case DataRowState.Modified:
 				rowState = DataRowState.Unchanged;
 				break;
 			case DataRowState.Deleted:
 				_table.Rows.Remove (this);
 				break;
+			case DataRowState.Detached:
+				throw new RowNotInTableException("Cannot perform this operation on a row not in the table.");
 			}
 			// Accept from detached
 			if (original == null)
@@ -431,6 +432,7 @@
 		[MonoTODO]
 		public void CancelEdit () 
 		{
+			editing = false;
 			//TODO: Events
 			if (HasVersion (DataRowVersion.Proposed)) {
 				proposed = null;
@@ -696,7 +698,8 @@
 		/// </summary>
 		public bool IsNull (DataColumn column) 
 		{
-			return (this[column] == null);
+			object o = this[column];
+			return (o == null || o == DBNull.Value);
 		}
 
 		/// <summary>
@@ -705,7 +708,8 @@
 		/// </summary>
 		public bool IsNull (int columnIndex) 
 		{
-			return (this[columnIndex] == null);
+			object o = this[columnIndex];
+			return (o == null || o == DBNull.Value);
 		}
 
 		/// <summary>
@@ -713,7 +717,8 @@
 		/// </summary>
 		public bool IsNull (string columnName) 
 		{
-			return (this[columnName] == null);
+			object o = this[columnName];
+			return (o == null || o == DBNull.Value);
 		}
 
 		/// <summary>
@@ -722,7 +727,8 @@
 		/// </summary>
 		public bool IsNull (DataColumn column, DataRowVersion version) 
 		{
-			return (this[column, version] == null);
+			object o = this[column, version];
+			return (o == null || o == DBNull.Value);
 		}
 
 		/// <summary>
@@ -831,9 +837,24 @@
 				int index = row.Table.Columns.IndexOf(columnName);
 				//if a column withe the same name exists in bote rows copy the values
 				if(index != -1) {
-					row.original[index] = row.SetColumnValue(this[i, DataRowVersion.Original], index);
-					row.current[index] = row.SetColumnValue(this[i, DataRowVersion.Current], index);
-					row.proposed[index] = row.SetColumnValue(this[i, DataRowVersion.Proposed], index);
+					if (HasVersion(DataRowVersion.Original))
+					{
+						if (row.original == null)
+							row.original = new object[row.Table.Columns.Count];
+						row.original[index] = row.SetColumnValue(original[i], index);
+					}
+					if (HasVersion(DataRowVersion.Current))
+					{
+						if (row.current == null)
+							row.current = new object[row.Table.Columns.Count];
+						row.current[index] = row.SetColumnValue(current[i], index);
+					}
+					if (HasVersion(DataRowVersion.Proposed))
+					{
+						if (row.proposed == null)
+							row.proposed = new object[row.Table.Columns.Count];
+						row.proposed[index] = row.SetColumnValue(proposed[i], index);
+					}
 				}
 			}
 
