Index: mcs/class/corlib/System/ChangeLog
===================================================================
--- mcs/class/corlib/System/ChangeLog	(revision 70976)
+++ mcs/class/corlib/System/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2007-01-14  Jensen Somers <jensen.somers@gmail.com>
+
+    * ArraySegment.cs: Added Equals() method, operator == and !=
+    overloading and GetHashCode().
+
 2007-01-10  Andy Hume <andyhume32@yahoo.co.uk>
 
 	* Fixes to a number of exception classes.
Index: mcs/class/corlib/System/ArraySegment.cs
===================================================================
--- mcs/class/corlib/System/ArraySegment.cs	(revision 70976)
+++ mcs/class/corlib/System/ArraySegment.cs	(working copy)
@@ -3,6 +3,7 @@
 //
 // Authors:
 //  Ben Maurer (bmaurer@ximian.com)
+//  Jensen Somers <jensen.somers@gmail.com>
 //
 // Copyright (C) 2004 Novell
 //
@@ -77,6 +78,41 @@
 		public int Count {
 			get { return count; }
 		}
+		
+		public override bool Equals (Object obj)
+		{
+		    if (obj is ArraySegment<T>)
+		    {
+		        return this.Equals((ArraySegment<T>) obj);
+		    }
+		    return false;
+		}
+		
+		public bool Equals (ArraySegment<T> obj)
+		{
+		    if ((this.array == obj.Array)
+		        && (this.offset == obj.Offset)
+		        && (this.count == obj.Count))
+		    {
+		        return true;
+		    }
+		    return false;
+		}
+		
+		public override int GetHashCode ()
+		{
+		    return ((this.array.GetHashCode() ^ this.offset) ^ this.count);
+		}
+		
+		public static bool operator ==(ArraySegment<T> a, ArraySegment<T> b)
+		{
+		    return a.Equals(b);
+		}
+		
+		public static bool operator !=(ArraySegment<T> a, ArraySegment<T> b)
+		{
+		    return !(a.Equals(b));
+		}
 	}
 }
 #endif
Index: mcs/class/corlib/Test/System/ChangeLog
===================================================================
--- mcs/class/corlib/Test/System/ChangeLog	(revision 70976)
+++ mcs/class/corlib/Test/System/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2007-01-14  Jensen Somers <jensen.somers@gmail.com>
+
+    * ArraySegmentTest.cs: Add a test case for the ArraySegment.Equals
+    functionality.
+
 2006-12-30  Alp Toker  <alp@atoker.com>
 
 	* MathTest.cs: Add test case for new (2.0) Decimal.Ceiling.
Index: mcs/class/corlib/Test/System/ArraySegmentTest.cs
===================================================================
--- mcs/class/corlib/Test/System/ArraySegmentTest.cs	(revision 70976)
+++ mcs/class/corlib/Test/System/ArraySegmentTest.cs	(working copy)
@@ -2,6 +2,7 @@
 //
 // Ankit Jain  <jankit@novell.com>
 // Raja R Harinath  <rharinath@novell.com>
+// Jensen Somers <jensen.somers@gmail.com>
 // 
 // Copyright (C) 2006 Novell, Inc (http://www.novell.com)
 // 
@@ -15,7 +16,7 @@
 {
 
 [TestFixture]
-public class ArraySegmentTest
+public class ArraySegmentTest : Assertion
 {
 	public ArraySegmentTest() {}
 
@@ -136,8 +137,26 @@
 	{
 		ArraySegment<byte> seg = new ArraySegment<byte> (null);
 	}
-
-
+	
+	[Test]
+	public void TestArraySegmentEqual ()
+	{
+	    string[] myArr_1 = { "The", "good" };
+	    string[] myArr_2 = { "The", "good" };
+	    
+	    ArraySegment<string> myArrSeg_1 = new ArraySegment<string>(myArr_1);
+	    ArraySegment<string> myArrSeg_2 = new ArraySegment<string>(myArr_2);
+	    
+	    // Should return true.
+	    Assert(myArrSeg_1.Equals(myArrSeg_1));
+	    Assert(myArrSeg_1 == myArrSeg_1);
+	    
+	    // Should return false. Allthough the strings are the same.
+	    Assert(myArrSeg_1.Equals(myArrSeg_2) == false);
+	    
+	    // Should return true.
+	    Assert(myArrSeg_1 != myArrSeg_2);	    
+	}
 }
 
 }
