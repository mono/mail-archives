Index: System.Data.OracleClient/OracleParameter.cs
===================================================================
--- System.Data.OracleClient/OracleParameter.cs	(revision 47830)
+++ System.Data.OracleClient/OracleParameter.cs	(working copy)
@@ -239,6 +239,7 @@
 
 		internal void Bind (OciStatementHandle statement, OracleConnection connection) 
 		{
+			Console.WriteLine("Entrée dans Bind");
 			errorHandle = connection.ErrorHandle;
 
 			if (bindHandle == null)
@@ -258,7 +259,7 @@
 			OciDataType bindType = ociType;
 			IntPtr bindValue = IntPtr.Zero;
 			int rsize = 0;
-
+			Console.WriteLine("Parametre : "+ociType.ToString());
 			// TODO: handle InputOutput and Return parameters
 			if (direction == ParameterDirection.Output) {
 				// TODO: need to figure out how OracleParameter
@@ -281,6 +282,11 @@
 						bindSize = size * 2;
 						bindOutValue = Marshal.AllocHGlobal (bindSize);
 						break;
+					case OciDataType.TimeStamp:
+						bindSize = 11;
+						bindType = OciDataType.TimeStamp;
+						bindOutValue = Marshal.AllocHGlobal (bindSize);
+						break;
 					case OciDataType.Date:
 						bindSize = 7;
 						bindType = OciDataType.Date;
@@ -324,11 +330,32 @@
 				bindSize = 0;
 			}
 			else {
+				Console.WriteLine("OracleType "+oracleType.ToString());
 				// TODO: do other data types and oracle data types
 				// should I be using IConvertible to convert?
-				if (oracleType == OracleType.DateTime) {
-					string oraDateFormat = connection.GetSessionDateFormat ();
-					string sysDateFormat = OracleDateTime.ConvertOracleDateFormatToSystemDateTime (oraDateFormat);
+				if (oracleType == OracleType.Timestamp){
+					Console.WriteLine("TimeStamp!!!");
+					DateTime dt = DateTime.MinValue;
+					string sDate = "";
+					if (v is String){
+						sDate = (string) v;
+						dt = DateTime.Parse (sDate);
+					}
+					else if (v is DateTime)
+						dt = (DateTime) v;
+					else if (v is OracleString){
+						sDate = (string) v;
+						dt = DateTime.Parse (sDate);
+					}
+					else
+						throw new NotImplementedException (); // ?
+					bytes = PackTimeStamp (dt);
+					bindType = OciDataType.TimeStamp;
+					bindSize = bytes.Length;
+				}
+				else if (oracleType == OracleType.DateTime) {
+					//string oraDateFormat = connection.GetSessionDateFormat ();
+					//string sysDateFormat = OracleDateTime.ConvertOracleDateFormatToSystemDateTime (oraDateFormat);
 
 					string sDate = "";
 					DateTime dt = DateTime.MinValue;
@@ -410,6 +437,7 @@
 					0,
 					IntPtr.Zero,
 					0);
+				Console.WriteLine("size "+bindSize.ToString()+" type "+bindType.ToString());
 			}
 			else {
 				status = OciCalls.OCIBindByName (statement,
@@ -513,6 +541,9 @@
 				break;
 			case OciDataType.Date:
 				newSize = 7;
+				break;
+			case OciDataType.TimeStamp:
+				newSize = 11;
 				break;	
 			case OciDataType.Blob:
 			case OciDataType.Clob:
@@ -637,8 +668,11 @@
 				dbType = DbType.AnsiStringFixedLength;
 				ociType = OciDataType.Char;
 				break;
+			case OracleType.Timestamp:
+				dbType = DbType.DateTime;
+				ociType = OciDataType.TimeStamp;
+				break;
 			case OracleType.DateTime:
-			case OracleType.Timestamp:
 			case OracleType.TimestampLocal:
 			case OracleType.TimestampWithTZ:
 				dbType = DbType.DateTime;
@@ -789,6 +823,25 @@
 			return buffer;
 		}
 
+		internal byte[] PackTimeStamp (DateTime dateValue) 
+		{
+			byte[] buffer = new byte[11];
+
+			buffer[0] = (byte)((dateValue.Year / 100) + 100); //century
+			buffer[1] = (byte)((dateValue.Year % 100) + 100); // Year
+			buffer[2] = (byte)dateValue.Month;
+			buffer[3] = (byte)dateValue.Day;
+			buffer[4] = (byte)(dateValue.Hour+1);
+			buffer[5] = (byte)(dateValue.Minute+1);
+			buffer[6] = (byte)(dateValue.Second+1);
+			buffer[7] = 1;
+			buffer[8] = 1;
+			buffer[9] = 1;		
+			buffer[10] = 1;
+			Console.WriteLine(BitConverter.ToString(buffer));
+			return buffer;
+		}
+
 		#endregion // Methods
 
 		internal sealed class OracleParameterConverter : ExpandableObjectConverter
Index: System.Data.OracleClient.Oci/OciDataType.cs
===================================================================
--- System.Data.OracleClient.Oci/OciDataType.cs	(revision 47830)
+++ System.Data.OracleClient.Oci/OciDataType.cs	(working copy)
@@ -43,6 +43,7 @@
 		Blob = 0x71,
 		BFile = 0x72,
 		OciString = 0x9b,
-		OciDate = 0x9c
+		OciDate = 0x9c,
+		TimeStamp = 0xbb
 	}
 }
Index: System.Data.OracleClient.Oci/OciParameterDescriptor.cs
===================================================================
--- System.Data.OracleClient.Oci/OciParameterDescriptor.cs	(revision 47830)
+++ System.Data.OracleClient.Oci/OciParameterDescriptor.cs	(working copy)
@@ -67,6 +67,7 @@
 
 		public static OracleType OciDataTypeToOracleType (OciDataType ociType) 
 		{
+			Console.WriteLine(ociType.ToString());
 			switch (ociType) {
 			case OciDataType.VarChar2:
 				return OracleType.VarChar;
@@ -120,6 +121,8 @@
 				return OracleType.VarChar;
 			case OciDataType.OciDate:
 				return OracleType.DateTime;
+			case OciDataType.TimeStamp:
+				return OracleType.Timestamp;
 			default:
 				throw new NotImplementedException ();
 			}
@@ -180,6 +183,8 @@
 				return typeof (System.String);
 			case "OciDate":
 				return typeof (System.DateTime);
+			case "TimeStamp":
+				return typeof (System.DateTime);
 			default:
 				// FIXME: are these types correct?
 				return typeof(System.String);
@@ -242,6 +247,8 @@
 					return "OciString";
 				case OciDataType.OciDate:
 					return "OciDate";
+				case OciDataType.TimeStamp:
+					return "TimeStamp";
 				default:
 					return "Unknown";
 			}
Index: System.Data.OracleClient.Oci/OciStatementHandle.cs
===================================================================
--- System.Data.OracleClient.Oci/OciStatementHandle.cs	(revision 47830)
+++ System.Data.OracleClient.Oci/OciStatementHandle.cs	(working copy)
@@ -201,6 +201,7 @@
 		public bool Fetch ()
 		{
 			int status = 0;
+			Console.WriteLine("Entrée dans Fetch");
 
 			if (this.disposed) 
 			{
@@ -212,8 +213,9 @@
 				1,
 				2,
 				0);
-		
+		Console.WriteLine("FETCH "+status.ToString());
 			switch (status) {
+			
 			case OciGlue.OCI_NO_DATA:
 				moreResults = false;
 				break;
Index: System.Data.OracleClient.Oci/OciDefineHandle.cs
===================================================================
--- System.Data.OracleClient.Oci/OciDefineHandle.cs	(revision 47830)
+++ System.Data.OracleClient.Oci/OciDefineHandle.cs	(working copy)
@@ -123,6 +123,9 @@
 		void Define (int position)
 		{
 			switch (definedType) {
+			case OciDataType.TimeStamp:
+				DefineTimeStamp (position);
+				return;
 			case OciDataType.Date:
 				DefineDate (position); 
 				return;
@@ -152,6 +155,37 @@
 			}
 		}
 
+		void DefineTimeStamp (int position)
+		{
+			Console.WriteLine("On défini un timestamp...");
+			definedSize = 11;
+			ociType = OciDataType.Date;
+			//ociType = OciDataType.TimeStamp;
+			fieldType = typeof(System.DateTime);
+
+			value = Marshal.AllocHGlobal (definedSize);
+
+			int status = 0;
+
+			status = OciCalls.OCIDefineByPos (Parent,
+						out handle,
+						ErrorHandle,
+						position + 1,
+						value,
+						definedSize,
+						ociType,
+						ref indicator,
+						ref rlenp,
+						IntPtr.Zero,
+						0);
+			Console.WriteLine("Timestamp defini!");
+
+			if (status != 0) {
+				OciErrorInfo info = ErrorHandle.HandleError ();
+				throw new OracleException (info.ErrorCode, info.ErrorMessage);
+			}
+		}
+
 		void DefineDate (int position)
 		{
 			definedSize = 7;
@@ -372,7 +406,9 @@
 
 		public object GetValue ()
 		{
+			Console.WriteLine("Récupération de la valeur : "+DataType.ToString());
 			object tmp;
+			
 
 			byte [] buffer = null;
 
@@ -418,6 +454,7 @@
 				if (tmp != null)
 					return Decimal.Parse (String.Copy ((string) tmp));
 				break;
+			case OciDataType.TimeStamp:
 			case OciDataType.Date:
 				return UnpackDate ();
 			case OciDataType.Raw:
@@ -475,7 +512,9 @@
 			byte hour = Marshal.ReadByte (value, 4);
 			byte minute = Marshal.ReadByte (value, 5);
 			byte second = Marshal.ReadByte (value, 6);
-
+			if (hour==0) hour++;
+			if (minute==0) minute++;
+			if (second==0) second++;
 			return new DateTime ((century - 100) * 100 + (year - 100),
 						month,
 						day,
