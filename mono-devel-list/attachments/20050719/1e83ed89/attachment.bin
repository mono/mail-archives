Index: domain.c
===================================================================
--- domain.c	(revision 47425)
+++ domain.c	(working copy)
@@ -972,8 +972,17 @@
 	mono_mempool_invalidate (domain->mp);
 	mono_code_manager_invalidate (domain->code_mp);
 #else
+	/*
+	 * Right now, we leak vtables so that we can get the benefits of precise
+	 * allocation in non root app domains. Miguel figures that it is better
+	 * to leak a few 100 kb for the relatively rare situation of unloading
+	 * app domains than to cause applications in the non-root domain to
+	 * suffer with memory fragmentation.
+	 */
+#ifdef NEVER_LEAK_VTABLES
 	mono_mempool_destroy (domain->mp);
 	domain->mp = NULL;
+#endif
 	mono_code_manager_destroy (domain->code_mp);
 	domain->code_mp = NULL;
 #endif	
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 47437)
+++ ChangeLog	(working copy)
@@ -1,5 +1,15 @@
 2005-07-19  Ben Maurer  <bmaurer@ximian.com>
 
+	* object.c (mono_class_create_runtime_vtable): if
+	NEVER_LEAK_VTABLES is not set, we will always use gcj style
+	allocation, even in the non-root domain. To do this safely, we
+	leak (see below).
+
+	* domain.c (mono_domain_free): Unless NEVER_LEAK_VTABLES is
+	defined, leak vtables in the non-root domain.
+
+2005-07-19  Ben Maurer  <bmaurer@ximian.com>
+
 	There were issues when multiple threads tried to load
 	assemblies. A deadlock was created between assemblies_mutex and
 	mono_domain_assemblies_lock. This fixes the issue by making the
Index: object.c
===================================================================
--- object.c	(revision 47425)
+++ object.c	(working copy)
@@ -704,8 +704,11 @@
 		 * other domains. The second descriptor should contain a bit for the
 		 * vtable field in MonoObject, since we can no longer assume the 
 		 * vtable is reachable by other roots after the appdomain is unloaded.
+		 *
+		 * However, right now, we leak vtables so that we can get the benefits
+		 * of precise allocation.
 		 */
-#ifdef HAVE_BOEHM_GC
+#if defined (HAVE_BOEHM_GC) && defined (NVER_LEAK_VTABLES)
 	if (domain != mono_get_root_domain ())
 		vt->gc_descr = GC_NO_DESCRIPTOR;
 	else
