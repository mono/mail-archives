Index: System.Windows.Forms.Design/EventsTab.cs
===================================================================
--- System.Windows.Forms.Design/EventsTab.cs	(revision 40806)
+++ System.Windows.Forms.Design/EventsTab.cs	(working copy)
@@ -21,19 +21,102 @@
 //
 // Authors:
 //	Dennis Hayes (dennish@raytek.com)
+//  Rafael Teixeira (rafaelteixeirabr@hotmail.com)
 //
 
 // NOT COMPLETE
 
 using System;
+using System.ComponentModel;
+using System.ComponentModel.Design;
 
 namespace System.Windows.Forms.Design
 {
-	public class EventsTab
+	public class EventsTab : PropertyTab
 	{
+		[MonoTODO]
 		public EventsTab()
 		{
-			throw new NotImplementedException ();
 		}
+		
+		private IServiceProvider serviceProvider;
+
+		[MonoTODO]
+		public EventsTab(IServiceProvider serviceProvider)
+		{
+			this.serviceProvider = serviceProvider;
+		}
+
+		[MonoTODO("What value should we return?")]
+		public override string HelpKeyword 
+		{
+			get {
+				return TabName;				
+			}
+		}
+		
+		[MonoTODO("Localization")]
+		public override string TabName 
+		{
+			get {
+				return "Events";
+			}
+		}
+		
+		[MonoTODO("Test")]
+		public override PropertyDescriptorCollection GetProperties(
+			ITypeDescriptorContext context,
+			object component,
+			Attribute[] attributes)
+		{
+			IEventBindingService eventPropertySvc = null;
+			EventDescriptorCollection events;
+			
+			if (serviceProvider != null)
+				eventPropertySvc = (IEventBindingService)
+					serviceProvider.GetService(typeof(IEventBindingService));
+
+			if (eventPropertySvc == null)			 
+				return new PropertyDescriptorCollection(null);
+
+			if (attributes != null)			
+				events = TypeDescriptor.GetEvents(component, attributes);
+			else
+				events = TypeDescriptor.GetEvents(component);
+	 
+			// Return event properties for the event descriptors.
+			return eventPropertySvc.GetEventProperties(events);
+		}
+		
+		public override PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes)
+		{
+			return this.GetProperties(null, component, attributes);
+		}
+		
+		[MonoTODO]
+		public override bool CanExtend(object component)
+		{
+			return false;
+		}
+		
+		[MonoTODO("Test")]
+		public override PropertyDescriptor GetDefaultProperty(object component)
+		{
+			object[] attributes = component.GetType().GetCustomAttributes(typeof(DefaultEventAttribute), true);
+			if (attributes.Length > 0) {
+				DefaultEventAttribute defaultEvent = attributes[0] as DefaultEventAttribute;
+				if (defaultEvent != null && serviceProvider != null) {
+					IEventBindingService eventPropertySvc = (IEventBindingService)
+						serviceProvider.GetService(typeof(IEventBindingService));
+	
+					if (eventPropertySvc == null)
+						foreach (EventDescriptor ed in TypeDescriptor.GetEvents(component))
+							if (ed.Name == defaultEvent.Name)
+								return eventPropertySvc.GetEventProperty(ed);
+				}
+			}	
+			return null;
+		}
+
 	}
 }
Index: System.Windows.Forms.Design/PropertyTab.cs
===================================================================
--- System.Windows.Forms.Design/PropertyTab.cs	(revision 40806)
+++ System.Windows.Forms.Design/PropertyTab.cs	(working copy)
@@ -20,17 +20,102 @@
 // Copyright (c) 2004 Novell, Inc.
 //
 // Authors:
+//  Rafael Teixeira (rafaelteixeirabr@hotmail.com)
 //
 
 // NOT COMPLETE
 
+using System;
+using System.Drawing;
+using System.ComponentModel;
+
 namespace System.Windows.Forms.Design
 {
-	public abstract class PropertyTab
+	public abstract class PropertyTab : IExtenderProvider
 	{
 		public PropertyTab()
 		{
 			throw new NotImplementedException ();
 		}
+		
+		~PropertyTab()
+		{
+			Dispose(false);
+		}
+		
+		public void Dispose()
+		{
+			Dispose(true);
+		}
+		
+		[MonoTODO]
+		protected virtual void Dispose(bool disposing)
+		{
+			if (disposing) {
+				// TODO: release managed resources
+			}
+			// TODO: release unmanaged resources
+		}
+		
+		[MonoTODO("Some default value, Localization")]
+		public virtual Bitmap Bitmap {
+			get {
+				throw new NotImplementedException ();				
+			}
+		}
+		
+		[MonoTODO]
+		public virtual object[] Components {
+			get {
+				throw new NotImplementedException ();				
+			}
+			set {
+				throw new NotImplementedException ();				
+			}
+		}
+		
+		public virtual string HelpKeyword 
+		{
+			get {
+				return TabName; // By default, this is set to the tab name
+			}
+		}
+		
+		[MonoTODO("Localization")]
+		public virtual string TabName 
+		{
+			get {
+				return "Properties";
+			}
+		}
+		
+		[MonoTODO]
+		public virtual PropertyDescriptorCollection GetProperties(
+			ITypeDescriptorContext context,
+			object component,
+			Attribute[] attributes)
+		{
+			throw new NotImplementedException ();
+		}
+		
+		[MonoTODO]
+		public abstract PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes);
+		
+		public virtual PropertyDescriptorCollection GetProperties(object component)
+		{
+			return this.GetProperties(component, null);
+		}
+		
+		[MonoTODO]
+		public virtual bool CanExtend(object component)
+		{
+			throw new NotImplementedException ();
+		}
+		
+		[MonoTODO]
+		public virtual PropertyDescriptor GetDefaultProperty(object component)
+		{
+			throw new NotImplementedException ();
+		}
 	}
 }
Index: System.Windows.Forms.Design/ChangeLog
===================================================================
--- System.Windows.Forms.Design/ChangeLog	(revision 40806)
+++ System.Windows.Forms.Design/ChangeLog	(working copy)
@@ -1,3 +1,6 @@
+2005-02-17  Rafael Teixeira  <rafaelteixeirabr@hotmail.com>
+	* PropertyTab.cs, EventsTab.cs : started to really implement 
+
 2005-02-14  Peter Bartok  <pbartok@novell.com>
 
 	* PropertyTab.cs: Made class abstract
