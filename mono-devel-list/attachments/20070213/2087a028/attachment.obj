Index: Test/System.IO/PathTest.cs
===================================================================
--- Test/System.IO/PathTest.cs	(revision 72615)
+++ Test/System.IO/PathTest.cs	(working copy)
@@ -835,6 +835,22 @@
 		}
 
 		[Test]
+		public void GetInvalidPathChars_Order()
+		{
+			if (Windows) {
+				char [] invalid = Path.GetInvalidPathChars ();
+				char [] expected = new char [36] { '\x22', '\x3C', '\x3E', '\x7C', '\x00', '\x01', '\x02',
+					'\x03', '\x04', '\x05', '\x06', '\x07', '\x08', '\x09', '\x0A', '\x0B', '\x0C', '\x0D',
+					'\x0E', '\x0F', '\x10', '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17', '\x18',
+					'\x19', '\x1A', '\x1B', '\x1C', '\x1D', '\x1E', '\x1F' };
+				AssertEquals (expected.Length, invalid.Length);
+				for (int i = 0; i < expected.Length; i++ ) {
+					AssertEquals( "Character at position " + i,expected [i], invalid [i]);
+				}
+			}
+		}
+
+		[Test]
 		public void GetInvalidPathChars_Modify ()
 		{
 			char[] expected = Path.GetInvalidPathChars ();
Index: Test/System.IO/DirectoryTest.cs
===================================================================
--- Test/System.IO/DirectoryTest.cs	(revision 72615)
+++ Test/System.IO/DirectoryTest.cs	(working copy)
@@ -98,7 +98,7 @@
 		string path = TempFolder + DSC + "DirectoryTest.Test";
 		DeleteDirectory (path);
 		try {
-			path += Path.InvalidPathChars [0];
+			path += '\x00';
 			path += ".2";
 			DirectoryInfo info = Directory.CreateDirectory (path);
 		} finally {
Index: System.IO/Path.cs
===================================================================
--- System.IO/Path.cs	(revision 72615)
+++ System.IO/Path.cs	(working copy)
@@ -429,10 +429,10 @@
 		{
 			// return a new array as we do not want anyone to be able to change the values
 			if (Environment.IsRunningOnWindows) {
-				return new char [36] { '\x00', '\x01', '\x02', '\x03', '\x04', '\x05', '\x06', '\x07',
+				return new char [36] { '\x22', '\x3C', '\x3E', '\x7C', '\x00', '\x01', '\x02', '\x03', '\x04', '\x05', '\x06', '\x07',
 					'\x08', '\x09', '\x0A', '\x0B', '\x0C', '\x0D', '\x0E', '\x0F', '\x10', '\x11', '\x12', 
 					'\x13', '\x14', '\x15', '\x16', '\x17', '\x18', '\x19', '\x1A', '\x1B', '\x1C', '\x1D', 
-					'\x1E', '\x1F', '\x22', '\x3C', '\x3E', '\x7C' };
+					'\x1E', '\x1F' };
 			} else {
 				return new char [1] { '\x00' };
 			}
