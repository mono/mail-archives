<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- gmcs wants lower case for target -->
    <TargetKind Condition=" '$(OutputType)' == 'Exe' ">exe</TargetKind>
    <TargetKind Condition=" '$(OutputType)' == 'Library' ">library</TargetKind>
    <TargetExtension Condition=" '$(OutputType)' == 'Exe' ">exe</TargetExtension>
    <TargetExtension Condition=" '$(OutputType)' == 'Library' ">dll</TargetExtension>
    <MonoInstallationPath>C:\Program Files\Mono-1.1.9.2</MonoInstallationPath>
    <Unsafe Condition=" '$(AllowUnsafeBlocks)' == 'true' ">/unsafe+</Unsafe>
    <OutputPathMono>mono\$(Configuration)</OutputPathMono>
    <OutputFileName>$(OutputPathMono)\$(AssemblyName).$(TargetExtension)</OutputFileName>
    <CoreCleanDependsOn>MonoClean</CoreCleanDependsOn>
  </PropertyGroup>
  <Target 
    Name="MonoCompile"
    Inputs="$(MSBuildAllProjects);
    @(Compile);
    @(ManifestResourceWithNoCulture);
    $(AssemblyOriginatorKeyFile);
    @(ManifestNonResxWithNoCultureOnDisk);
    @(CustomAdditionalCompileInputs)"
    Outputs="$(OutputFileName);"
    DependsOnTargets="$(CoreCompileDependsOn)">

    <Warning Condition="!Exists('$(MonoInstallationPath)')" Text="You need to install Mono from M:\engineering\downloads\mono\mono-1.1.9.2-gtksharp-2.3.92-win32-0.exe to the default location ($(MonoInstallationPath))"/>
    <MakeDir Condition="Exists('$(MonoInstallationPath)')" Directories="$(OutputPathMono)"/>
    <Exec Condition="Exists('$(MonoInstallationPath)')" Command="&quot;$(MonoInstallationPath)\bin\gmcs&quot; /noconfig $(Unsafe) /nowarn:1691 /warn:$(WarningLevel) /define:$(DefineConstants) /define:MONO;HEADLESS;FIXME;MISSINGADDWITHVALUE @(ProjectReference->'/reference:%(RelativeDir)$(OutputPathMono)\%(Filename).dll', ' ') /reference:@(Reference) /out:$(OutputFileName) @(ManifestResourceWithNoCulture->'/resource:%(Identity)', ' ') @(ManifestNonResxWithNoCultureOnDisk->'/resource:%(Identity)', ' ') @(CompiledLicenseFile->'/resource:%(Identity)', ' ') /target:$(TargetKind) @(Compile->'%(Identity)', ' ')" />
  </Target>
  
  <Target
    Name="MonoClean">
    <Delete Files="$(OutputFileName)"/>
  </Target>
  
  <Target Name="AfterBuild" DependsOnTargets="MonoCompile"/>
    
</Project>