
Property changes on: mcs\build\common
___________________________________________________________________
Name: svn:ignore
   - Consts.cs

   + Consts.cs
Consts.vb


Index: mcs/build/cs2vb.pl
===================================================================
--- mcs/build/cs2vb.pl	(revision 0)
+++ mcs/build/cs2vb.pl	(revision 0)
@@ -0,0 +1,186 @@
+#!/usr/bin/perl -w
+
+#
+# cs2vb.pl
+#
+# Author:
+#   Kornél Pál <http://www.kornelpal.hu/>
+#
+# Copyright (C) 2006 Kornél Pál
+#
+
+#
+# Permission is hereby granted, free of charge, to any person obtaining
+# a copy of this software and associated documentation files (the
+# "Software"), to deal in the Software without restriction, including
+# without limitation the rights to use, copy, modify, merge, publish,
+# distribute, sublicense, and/or sell copies of the Software, and to
+# permit persons to whom the Software is furnished to do so, subject to
+# the following conditions:
+#
+# The above copyright notice and this permission notice shall be
+# included in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+#
+
+# This converter is suitable only for Consts.cs.
+
+# There will be no hidden bugs because unsupported constructs are not converted
+# that will cause compilation errors in Visual Basic compiler.
+
+use Switch;
+
+my $new_line = "";
+my $indent = "";
+my $class_name = "";
+my $modifier = "";
+my $type = "";
+my $name = "";
+my $value = "";
+my $is_numeric = 0;
+
+while (<>) {
+	# Trim new line
+	s/(\r\n|\n|\r)$//;
+	$new_line = $1;
+
+	# Trim end
+	s/\s*$//;
+
+	# Trim indentation
+	s/^(\s*)//;
+	$indent = $1;
+
+	# Empty line
+	if (/^$/) {
+
+	# Comment
+	} elsif (s/^\/\//'/) {
+
+	# Class declaration
+	} elsif (/^internal$/) {
+		$class_name = "";
+
+		# Skip until empty line found
+		while (defined($_ = <>) || die "Unsupported class declaration found") {
+			if (/^\s*class\s+(\S+)\s*$/) {
+				$name = $1;
+				die "Duplicate class name found" unless $class_name =~ /^$/;
+				$class_name = $name;
+		
+				die "Unsupported '{' found" if $class_name =~ /{/;
+			}
+			last if /^\s*$/;
+		}
+		die "No class name found" if $class_name =~ /^$/;
+
+		$_ = "Friend Module " . $class_name;
+
+	# End of class definition
+	} elsif (s/^}$/End Module/) {
+
+	# Compiler directives
+	} elsif (s/^#\s*if\s+(.*)$/#If $1 Then/ ||
+		s/^#\s*elif\s+(.*)$/#ElseIf $1 Then/) {
+
+		# Operators
+		s/\s*!\s*/ Not /g;
+		s/\s*&&\s*/ AndAlso /g;
+		s/\s*\|\|\s*/ OrElse /g;
+
+	} elsif (s/^#\s*else$/#Else/) {
+	} elsif (s/^#\s*endif$/#End If/) {
+
+	} elsif (s/^#\s*error\s+(.*)$/#Error $1/) {
+		print $indent;
+		print "' Invalid but causes compilation error";
+		print $new_line;
+
+	# Constants
+	} elsif (/^(\S+)\s+const\s+(\S+)\s+(\S+)\s*=\s*(.*)\s*;$/) {
+		$modifier = $1;
+		$type = $2;
+		$name = $3;
+		$value = $4;
+		$is_numeric = 0;
+
+		die "Unsupported ';' found" if $modifier =~ /;/ || $type =~ /;/ || $name =~ /;/ || $value =~ /;/;
+
+		switch ($modifier) {
+			case "public" {
+				$modifier = "Public";
+			} case "internal" {
+				$modifier = "Friend";
+			} case "private" {
+				$modifier = "Private";
+			} else {
+				die "Unsupported access modifier found";
+			}
+		}
+
+		switch ($type) {
+			case "object" {
+				$type = "Object";
+			} case "bool" {
+				$type = "Boolean";
+				$value =~ s/(^|\s+)true(?=$|\s)/$1True/g;
+				$value =~ s/(^|\s+)false(?=$|\s)/$1False/g;
+			} case "char" {
+				$type = "Char";
+				$value =~ s/(^|\s+)'(\S)'(?=$|\s)/$1"$2"c/g;
+			} case "sbyte" {
+				$type = "SByte";
+				$is_numeric = 1;
+			} case "byte" {
+				$type = "Byte";
+				$is_numeric = 1;
+			} case "short" {
+				$type = "Short";
+				$is_numeric = 1;
+			} case "ushort" {
+				$type = "UShort";
+				$is_numeric = 1;
+			} case "int" {
+				$type = "Integer";
+				$is_numeric = 1;
+			} case "uint" {
+				$type = "UInteger";
+				$is_numeric = 1;
+			} case "long" {
+				$type = "Long";
+				$is_numeric = 1;
+			} case "ulong" {
+				$type = "ULong";
+				$is_numeric = 1;
+			} case "float" {
+				$type = "Single";
+			} case "double" {
+				$type = "Double";
+			} case "decimal" {
+				$type = "Decimal";
+			} case "string" {
+				$type = "String";
+			} else {
+				die "Unsupported data type found";
+			}
+		}
+
+		$value =~ s/(^|\s+)0[Xx]([0-9A-Fa-f]+)(?=$|\s)/$1&H\U$2\E/g if $is_numeric;
+
+		$_ = $modifier . " Const " . $name . " As " . $type . " = " . $value;
+
+	} else {
+		die "Unsupported source line found";
+	}
+
+	print $indent;
+	print;
+	print $new_line;
+}

Property changes on: mcs\build\cs2vb.pl
___________________________________________________________________
Name: svn:eol-style
   + native

Index: mcs/build/Makefile
===================================================================
--- mcs/build/Makefile	(revision 64966)
+++ mcs/build/Makefile	(working copy)
@@ -2,7 +2,7 @@
 SUBDIRS = 
 include ../build/rules.make
 
-BUILT_FILES = common/Consts.cs
+BUILT_FILES = common/Consts.cs common/Consts.vb
 
 all-local install-local test-local run-test-local run-test-ondotnet-local uninstall-local: $(BUILT_FILES)
 	@:
@@ -14,6 +14,9 @@
 	test -n '$(MONO_VERSION)'
 	sed -e 's,@''MONO_VERSION@,$(MONO_VERSION),' $< > $@
 
+common/Consts.vb: common/Consts.cs cs2vb.pl
+	perl cs2vb.pl $< > $@
+
 PLATFORMS = linux win32
 PROFILES = \
 	basic net_1_1_bootstrap default net_2_0_bootstrap net_2_0 \
@@ -33,6 +36,7 @@
 	executable.make			\
 	library.make			\
 	rules.make			\
+	cs2vb.pl			\
 	$(COMMON_SRCS:%=common/%)	\
 	$(PLATFORMS:%=platforms/%.make) $(PROFILES:%=profiles/%.make)
 
