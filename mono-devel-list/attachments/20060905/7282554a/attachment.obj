Index: System.ServiceProcess/ServiceInstaller.cs
===================================================================
--- System.ServiceProcess/ServiceInstaller.cs	(revision 64852)
+++ System.ServiceProcess/ServiceInstaller.cs	(working copy)
@@ -28,17 +28,22 @@
 // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 //
 
-
 using System;
 using System.Collections;
 using System.ComponentModel;
 using System.Configuration.Install;
+#if NET_2_0
+using System.Runtime.InteropServices;
+#endif
 
 namespace System.ServiceProcess
 {
-	public class ServiceInstaller : System.Configuration.Install.ComponentInstaller
+	[MonoTODO]
+	public class ServiceInstaller : ComponentInstaller
 	{
-		public ServiceInstaller () {}
+		public ServiceInstaller ()
+		{
+		}
 		
 		private string display_name;
 		private string service_name;
@@ -47,6 +52,10 @@
 
 #if NET_2_0
 		private string description;
+
+		[ComVisible (false)]
+		[DefaultValue ("")]
+		[ServiceProcessDescription ("")]
 		public string Description {
 			get {
 				return description;
@@ -57,6 +66,7 @@
 		}
 #endif
 
+		[DefaultValue("")]
 		public string DisplayName {
 			get {
 				return display_name;
@@ -66,6 +76,8 @@
 			}
 		}
 
+		[DefaultValue("")]
+		[TypeConverter("System.Diagnostics.Design.StringValueConverter, " + Consts.AssemblySystem_Design)]
 		public string ServiceName {
 			get {
 				return service_name;
@@ -86,6 +98,7 @@
 			}
 		}
 
+		[DefaultValue (ServiceStartMode.Manual)]
 		public ServiceStartMode StartType {
 			get {
 				return start_type;
@@ -95,24 +108,29 @@
 			}
 		}
 
-		public override void CopyFromComponent (IComponent component) {
+		public override void CopyFromComponent (IComponent component)
+		{
 			if (!component.GetType ().IsSubclassOf (typeof (ServiceBase)))
 				throw new ArgumentException ();
 		}
 
-		public override void Install (IDictionary stateSaver) {
+		public override void Install (IDictionary stateSaver)
+		{
 			throw new NotImplementedException ();
 		}
 	
-		public override bool IsEquivalentInstaller (ComponentInstaller otherInstaller) {
+		public override bool IsEquivalentInstaller (ComponentInstaller otherInstaller)
+		{
 			throw new NotImplementedException ();
 		}
 
-		public override void Rollback (IDictionary savedState) {
+		public override void Rollback (IDictionary savedState)
+		{
 			throw new NotImplementedException ();
 		}
 
-		public override void Uninstall (IDictionary savedState) {
+		public override void Uninstall (IDictionary savedState)
+		{
 			throw new NotImplementedException ();
 		}
 	}

Property changes on: System.ServiceProcess/ServiceInstaller.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: System.ServiceProcess/PowerBroadcastStatus.cs
===================================================================
--- System.ServiceProcess/PowerBroadcastStatus.cs	(revision 64852)
+++ System.ServiceProcess/PowerBroadcastStatus.cs	(working copy)
@@ -28,8 +28,8 @@
 
 namespace System.ServiceProcess
 {
-	[Serializable]
-	public enum PowerBroadcastStatus {
+	public enum PowerBroadcastStatus
+	{
 		QuerySuspend = 0,
 		QuerySuspendFailed = 2,
 		Suspend = 4,

Property changes on: System.ServiceProcess/PowerBroadcastStatus.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: System.ServiceProcess/ServiceStartMode.cs
===================================================================
--- System.ServiceProcess/ServiceStartMode.cs	(revision 64852)
+++ System.ServiceProcess/ServiceStartMode.cs	(working copy)
@@ -28,9 +28,9 @@
 //
 
 namespace System.ServiceProcess
-{	
-	[Serializable]
-        public enum ServiceStartMode {
+{
+	public enum ServiceStartMode
+	{
 		Automatic = 2,
 		Manual = 3,
 		Disabled = 4

Property changes on: System.ServiceProcess/ServiceStartMode.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: System.ServiceProcess/ServiceProcessDescriptionAttribute.cs
===================================================================
--- System.ServiceProcess/ServiceProcessDescriptionAttribute.cs	(revision 64852)
+++ System.ServiceProcess/ServiceProcessDescriptionAttribute.cs	(working copy)
@@ -33,7 +33,6 @@
 
 namespace System.ServiceProcess {
 
-        [Serializable]
         [AttributeUsage (AttributeTargets.All)]
         public class ServiceProcessDescriptionAttribute : DescriptionAttribute
         {

Property changes on: System.ServiceProcess/ServiceProcessDescriptionAttribute.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: System.ServiceProcess/ServiceControllerPermissionAccess.cs
===================================================================
--- System.ServiceProcess/ServiceControllerPermissionAccess.cs	(revision 64852)
+++ System.ServiceProcess/ServiceControllerPermissionAccess.cs	(working copy)
@@ -28,13 +28,12 @@
 //
 
 namespace System.ServiceProcess
-{	
+{
 	[Flags]
-	[Serializable]
-        public enum ServiceControllerPermissionAccess {
+	public enum ServiceControllerPermissionAccess
+	{
 		None = 0,
 		Browse = 2, 
 		Control = 6,
-
 	}
 }

Property changes on: System.ServiceProcess/ServiceControllerPermissionAccess.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: System.ServiceProcess/ServiceType.cs
===================================================================
--- System.ServiceProcess/ServiceType.cs	(revision 64852)
+++ System.ServiceProcess/ServiceType.cs	(working copy)
@@ -28,10 +28,10 @@
 //
 
 namespace System.ServiceProcess
-{	
+{
 	[Flags]
-	[Serializable]
-        public enum ServiceType {
+	public enum ServiceType
+	{
 		KernelDriver = 1,
 		FileSystemDriver = 2,
 		Adapter = 4,

Property changes on: System.ServiceProcess/ServiceType.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: System.ServiceProcess/ServiceController.cs
===================================================================
--- System.ServiceProcess/ServiceController.cs	(revision 64852)
+++ System.ServiceProcess/ServiceController.cs	(working copy)
@@ -28,25 +28,101 @@
 
 using System;
 using System.ComponentModel;
+#if NET_2_0
+using System.Runtime.InteropServices;
+#endif
 
 namespace System.ServiceProcess
 {
+	[Designer("System.ServiceProcess.Design.ServiceControllerDesigner, " + Consts.AssemblySystem_Design)]
 	public class ServiceController : Component
 	{
+		[MonoTODO]
+		public ServiceController ()
+		{
+		}
 
 		[MonoTODO]
-		public ServiceController () {}
-		public ServiceController (string name) {}
-		public ServiceController (string name, string machineName) {}
+		public ServiceController (string name)
+		{
+		}
 
 		[MonoTODO]
-		public ServiceControllerStatus Status {
+		public ServiceController (string name, string machineName)
+		{
+		}
+
+		[MonoTODO]
+		[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]
+		[ServiceProcessDescription ("")]
+		public bool CanPauseAndContinue {
 			get {
 				throw new NotImplementedException ();
 			}
 		}
 
 		[MonoTODO]
+		[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]
+		[ServiceProcessDescription ("")]
+		public bool CanShutdown {
+			get {
+				throw new NotImplementedException ();
+			}
+		}
+
+		[MonoTODO]
+		[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]
+		[ServiceProcessDescription ("")]
+		public bool CanStop {
+			get {
+				throw new NotImplementedException ();
+			}
+		}
+
+		[MonoTODO]
+		[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]
+		[ServiceProcessDescription ("")]
+		public ServiceController [] DependentServices {
+			get {
+				throw new NotImplementedException ();
+			}
+			set {
+				throw new NotImplementedException ();
+			}
+		}
+
+		[MonoTODO]
+		[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]
+		[ReadOnly (true)]
+		[ServiceProcessDescription ("")]
+		public string DisplayName {
+			get {
+				throw new NotImplementedException ();
+			}
+			set {
+				throw new NotImplementedException ();
+			}
+		}
+
+		[MonoTODO]
+		[Browsable (false)]
+		[DefaultValue (".")]
+		[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]
+		[ServiceProcessDescription ("")]
+		public string MachineName {
+			get {
+				throw new NotImplementedException ();
+			}
+			set {
+				throw new NotImplementedException ();
+			}
+		}
+
+		[MonoTODO]
+		[DefaultValue ("")]
+		[ReadOnly (true)]
+		[RecommendedAsConfigurable (true)]
+		[ServiceProcessDescription ("")]
 		public string ServiceName {
 			get	{
 				throw new NotImplementedException ();
@@ -57,29 +133,126 @@
 		}
 
 		[MonoTODO]
+		[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]
+		[ServiceProcessDescription ("")]
+		public ServiceController [] ServicesDependedOn {
+			get {
+				throw new NotImplementedException ();
+			}
+			set {
+				throw new NotImplementedException ();
+			}
+		}
+
+#if NET_2_0
+		[Browsable (false)]
+		[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]
+		public SafeHandle ServiceHandle 
+		{
+			get {
+				throw new NotImplementedException ();
+			}
+		}
+#endif
+
+		[MonoTODO]
+		[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]
+		[ServiceProcessDescription ("")]
+		public ServiceType ServiceType {
+			get {
+				throw new NotImplementedException ();
+			}
+		}
+
+		[MonoTODO]
+		[DesignerSerializationVisibility (DesignerSerializationVisibility.Hidden)]
+		[ServiceProcessDescription ("")]
+		public ServiceControllerStatus Status {
+			get {
+				throw new NotImplementedException ();
+			}
+		}
+
+		[MonoTODO]
+		public void Close () 
+		{
+			throw new NotImplementedException ();
+		}
+
+		[MonoTODO]
+		public void Continue ()
+		{
+			throw new NotImplementedException ();
+		}
+
+		[MonoTODO]
+		protected override void Dispose (bool disposing)
+		{
+			throw new NotImplementedException ();
+		}
+
+		[MonoTODO]
+		public void ExecuteCommand (int command)
+		{
+		}
+
+		[MonoTODO]
+		public static ServiceController[] GetDevices ()
+		{
+			throw new NotImplementedException ();
+		}
+
+		[MonoTODO]
+		public static ServiceController[] GetDevices (string machineName)
+		{
+			throw new NotImplementedException ();
+		}
+
+		[MonoTODO]
 		public static ServiceController[] GetServices ()
 		{
 			throw new NotImplementedException ();
 		}
-		
+
 		[MonoTODO]
-		public void Stop () {
+		public static ServiceController[] GetServices (string machineName)
+		{
 			throw new NotImplementedException ();
 		}
 
 		[MonoTODO]
+		public void Pause ()
+		{
+			throw new NotImplementedException ();
+		}
+
+		[MonoTODO]
+		public void Refresh ()
+		{
+			throw new NotImplementedException ();
+		}
+
+		[MonoTODO]
 		public void Start () 
 		{
 			throw new NotImplementedException ();
 		}
+		
+		[MonoTODO]
+		public void Stop ()
+		{
+			throw new NotImplementedException ();
+		}
 
+		[MonoTODO]
 		public void Start (string [] args)
 		{
 			throw new NotImplementedException ();
 		}
 
 		[MonoTODO]
-		public void WaitForStatus (ServiceControllerStatus desiredStatus){
+		public void WaitForStatus (ServiceControllerStatus desiredStatus)
+		{
 			throw new NotImplementedException ();
 		}
 
@@ -88,7 +261,5 @@
 		{
 			throw new NotImplementedException ();
 		}
-	
-
 	}
 }

Property changes on: System.ServiceProcess/ServiceController.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: System.ServiceProcess/ServiceControllerStatus.cs
===================================================================
--- System.ServiceProcess/ServiceControllerStatus.cs	(revision 64852)
+++ System.ServiceProcess/ServiceControllerStatus.cs	(working copy)
@@ -28,9 +28,9 @@
 //
 
 namespace System.ServiceProcess
-{	
-	[Serializable]
-        public enum ServiceControllerStatus {
+{
+	public enum ServiceControllerStatus
+	{
 		Stopped = 1,
 		StartPending = 2,
 		StopPending = 3,
@@ -40,4 +40,3 @@
 		Paused = 7
 	}
 }
-		

Property changes on: System.ServiceProcess/ServiceControllerStatus.cs
___________________________________________________________________
Name: svn:eol-style
   + native

