Index: System.Web.UI.WebControls/DataGridPagerStyle.cs
===================================================================
--- System.Web.UI.WebControls/DataGridPagerStyle.cs	(revision 64914)
+++ System.Web.UI.WebControls/DataGridPagerStyle.cs	(working copy)
@@ -32,6 +32,18 @@
 	// CAS - no inheritance demand required because the class is sealed
 	[AspNetHostingPermissionAttribute (SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)]
 	public sealed class DataGridPagerStyle : TableItemStyle {
+
+		[Flags]
+		enum DataGridPagerStyles
+		{
+			Mode = 0x00010000,
+			NextPageText = 0x00020000,
+			PageButtonCount = 0x00040000,
+			Position = 0x00080000,
+			PrevPageText = 0x00100000,
+			Visible = 0x00200000
+		}
+
 		#region Constructors
 		internal DataGridPagerStyle () {
 		}
@@ -47,7 +59,7 @@
 		[WebCategory ("Misc")]
 		public PagerMode Mode {
 			get {
-				if ((styles & Styles.Mode) == 0) {
+				if (!CheckBit ((int) DataGridPagerStyles.Mode)) {
 					return PagerMode.NextPrev;
 				}
 
@@ -55,8 +67,8 @@
 			}
 
 			set {
-				styles |= Styles.Mode;
 				ViewState["Mode"] = value;
+				SetBit ((int) DataGridPagerStyles.Mode);
 			}
 		}
 
@@ -71,7 +83,7 @@
 		[WebCategory ("Misc")]
 		public string NextPageText {
 			get {
-				if ((styles & Styles.NextPageText) == 0) {
+				if (!CheckBit ((int) DataGridPagerStyles.NextPageText)) {
 					return "&gt;";
 				}
 
@@ -79,8 +91,8 @@
 			}
 
 			set {
-				styles |= Styles.NextPageText;
 				ViewState["NextPageText"] = value;
+				SetBit ((int) DataGridPagerStyles.NextPageText);
 			}
 		}
 
@@ -93,7 +105,7 @@
 		[WebCategory ("Misc")]
 		public int PageButtonCount {
 			get {
-				if ((styles & Styles.PageButtonCount) == 0) {
+				if (!CheckBit ((int) DataGridPagerStyles.PageButtonCount)) {
 					return 10;
 				}
 
@@ -105,8 +117,8 @@
 					throw new ArgumentOutOfRangeException("value", "PageButtonCount must be greater than 0");
 				}
 
-				styles |= Styles.PageButtonCount;
 				ViewState["PageButtonCount"] = value;
+				SetBit ((int) DataGridPagerStyles.PageButtonCount);
 			}
 		}
 
@@ -119,7 +131,7 @@
 		[WebCategory ("Misc")]
 		public PagerPosition Position {
 			get {
-				if ((styles & Styles.Position) == 0) {
+				if (!CheckBit ((int) DataGridPagerStyles.Position)) {
 					return PagerPosition.Bottom;
 				}
 
@@ -127,8 +139,8 @@
 			}
 
 			set {
-				styles |= Styles.Position;
 				ViewState["Position"] = value;
+				SetBit ((int) DataGridPagerStyles.Position);
 			}
 		}
 
@@ -143,7 +155,7 @@
 		[WebCategory ("Misc")]
 		public string PrevPageText {
 			get {
-				if ((styles & Styles.PrevPageText) == 0) {
+				if (!CheckBit ((int) DataGridPagerStyles.PrevPageText)) {
 					return "&lt;";
 				}
 
@@ -151,8 +163,8 @@
 			}
 
 			set {
-				styles |= Styles.PrevPageText;
 				ViewState["PrevPageText"] = value;
+				SetBit ((int) DataGridPagerStyles.PrevPageText);
 			}
 		}
 
@@ -165,7 +177,7 @@
 		[WebCategory ("Misc")]
 		public bool Visible {
 			get {
-				if ((styles & Styles.Visible) == 0) {
+				if (!CheckBit ((int) DataGridPagerStyles.Visible)) {
 					return true;
 				}
 
@@ -173,8 +185,8 @@
 			}
 
 			set {
-				styles |= Styles.Visible;
 				ViewState["Visible"] = value;
+				SetBit ((int) DataGridPagerStyles.Visible);
 			}
 		}
 		#endregion	// Public Instance Properties
@@ -187,27 +199,27 @@
 				return;
 			}
 
-			if (((s.styles & Styles.Mode) != 0) && (((DataGridPagerStyle)s).Mode != PagerMode.NextPrev)) {
+			if (s.CheckBit ((int) DataGridPagerStyles.Mode) && (((DataGridPagerStyle) s).Mode != PagerMode.NextPrev)) {
 				this.Mode = ((DataGridPagerStyle)s).Mode;
 			}
 
-			if (((s.styles & Styles.NextPageText) != 0) && (((DataGridPagerStyle)s).NextPageText != "&gt;")) {
+			if (s.CheckBit ((int) DataGridPagerStyles.NextPageText) && (((DataGridPagerStyle) s).NextPageText != "&gt;")) {
 				this.NextPageText = ((DataGridPagerStyle)s).NextPageText;
 			}
 
-			if (((s.styles & Styles.PageButtonCount) != 0) && (((DataGridPagerStyle)s).PageButtonCount != 10)) {
+			if (s.CheckBit ((int) DataGridPagerStyles.PageButtonCount) && (((DataGridPagerStyle) s).PageButtonCount != 10)) {
 				this.PageButtonCount = ((DataGridPagerStyle)s).PageButtonCount;
 			}
 
-			if (((s.styles & Styles.Position) != 0) && (((DataGridPagerStyle)s).Position != PagerPosition.Bottom)) {
+			if (s.CheckBit ((int) DataGridPagerStyles.Position) && (((DataGridPagerStyle) s).Position != PagerPosition.Bottom)) {
 				this.Position = ((DataGridPagerStyle)s).Position;
 			}
 
-			if (((s.styles & Styles.PrevPageText) != 0) && (((DataGridPagerStyle)s).PrevPageText != "&lt;")) {
+			if (s.CheckBit ((int) DataGridPagerStyles.PrevPageText) && (((DataGridPagerStyle) s).PrevPageText != "&lt;")) {
 				this.PrevPageText = ((DataGridPagerStyle)s).PrevPageText;
 			}
 
-			if (((s.styles & Styles.Visible) != 0) && (((DataGridPagerStyle)s).Visible != true)) {
+			if (s.CheckBit ((int) DataGridPagerStyles.Visible) && (((DataGridPagerStyle) s).Visible != true)) {
 				this.Visible = ((DataGridPagerStyle)s).Visible;
 			}
 
@@ -220,27 +232,27 @@
 				return;
 			}
 
-			if (((styles & Styles.Mode) == 0) && ((s.styles & Styles.Mode) != 0) && (((DataGridPagerStyle)s).Mode != PagerMode.NextPrev)) {
+			if (!CheckBit ((int) DataGridPagerStyles.Mode) && s.CheckBit ((int) DataGridPagerStyles.Mode) && (((DataGridPagerStyle) s).Mode != PagerMode.NextPrev)) {
 				this.Mode = ((DataGridPagerStyle)s).Mode;
 			}
 
-			if (((styles & Styles.NextPageText) == 0) && ((s.styles & Styles.NextPageText) != 0) && (((DataGridPagerStyle)s).NextPageText != "&gt;")) {
+			if (!CheckBit ((int) DataGridPagerStyles.NextPageText) && s.CheckBit ((int) DataGridPagerStyles.NextPageText) && (((DataGridPagerStyle) s).NextPageText != "&gt;")) {
 				this.NextPageText = ((DataGridPagerStyle)s).NextPageText;
 			}
 
-			if (((styles & Styles.PageButtonCount) == 0) && ((s.styles & Styles.PageButtonCount) != 0) && (((DataGridPagerStyle)s).PageButtonCount != 10)) {
+			if (!CheckBit ((int) DataGridPagerStyles.PageButtonCount) && s.CheckBit ((int) DataGridPagerStyles.PageButtonCount) && (((DataGridPagerStyle) s).PageButtonCount != 10)) {
 				this.PageButtonCount = ((DataGridPagerStyle)s).PageButtonCount;
 			}
 
-			if (((styles & Styles.Position) == 0) && ((s.styles & Styles.Position) != 0) && (((DataGridPagerStyle)s).Position != PagerPosition.Bottom)) {
+			if (!CheckBit ((int) DataGridPagerStyles.Position) && s.CheckBit ((int) DataGridPagerStyles.Position) && (((DataGridPagerStyle) s).Position != PagerPosition.Bottom)) {
 				this.Position = ((DataGridPagerStyle)s).Position;
 			}
 
-			if (((styles & Styles.PrevPageText) == 0) && ((s.styles & Styles.PrevPageText) != 0) && (((DataGridPagerStyle)s).PrevPageText != "&lt;")) {
+			if (!CheckBit ((int) DataGridPagerStyles.PrevPageText) && s.CheckBit ((int) DataGridPagerStyles.PrevPageText) && (((DataGridPagerStyle) s).PrevPageText != "&lt;")) {
 				this.PrevPageText = ((DataGridPagerStyle)s).PrevPageText;
 			}
 
-			if (((styles & Styles.Visible) == 0) && ((s.styles & Styles.Visible) != 0) && (((DataGridPagerStyle)s).Visible != true)) {
+			if (!CheckBit ((int) DataGridPagerStyles.Visible) && s.CheckBit ((int) DataGridPagerStyles.Visible) && (((DataGridPagerStyle) s).Visible != true)) {
 				this.Visible = ((DataGridPagerStyle)s).Visible;
 			}
 		}
@@ -262,22 +274,22 @@
 		internal override void LoadViewStateInternal()
 		{
 			if (viewstate["Mode"] != null) {
-				styles |= Styles.Mode;
+				SetBit ((int) DataGridPagerStyles.Mode);
 			}
 			if (viewstate["NextPageText"] != null) {
-				styles |= Styles.NextPageText;
+				SetBit ((int) DataGridPagerStyles.NextPageText);
 			}
 			if (viewstate["PageButtonCount"] != null) {
-				styles |= Styles.PageButtonCount;
+				SetBit ((int) DataGridPagerStyles.PageButtonCount);
 			}
 			if (viewstate["Position"] != null) {
-				styles |= Styles.Position;
+				SetBit ((int) DataGridPagerStyles.Position);
 			}
 			if (viewstate["PrevPageText"] != null) {
-				styles |= Styles.PrevPageText;
+				SetBit ((int) DataGridPagerStyles.PrevPageText);
 			}
 			if (viewstate["Visible"] != null) {
-				styles |= Styles.Visible;
+				SetBit ((int) DataGridPagerStyles.Visible);
 			}
 
 			base.LoadViewStateInternal();
Index: System.Web.UI.WebControls/Style.cs
===================================================================
--- System.Web.UI.WebControls/Style.cs	(revision 64914)
+++ System.Web.UI.WebControls/Style.cs	(working copy)
@@ -44,9 +44,8 @@
 	public class Style : System.ComponentModel.Component, System.Web.UI.IStateManager 
 	{
 		[Flags]
-		internal enum Styles 
+		enum Styles 
 		{
-			None		= 0,
 			BackColor	= 0x00000008,
 			BorderColor	= 0x00000010,
 			BorderStyle	= 0x00000040,
@@ -56,30 +55,10 @@
 			ForeColor	= 0x00000004,
 			Height		= 0x00000080,
 			Width		= 0x00000100,
-
-			// from TableStyle (which doesn't override IsEmpty)
-			BackImageUrl	= 0x00000200,
-			CellPadding	= 0x00000400,
-			CellSpacing	= 0x00000800,
-			GridLines	= 0x00001000,
-			HorizontalAlign	= 0x00002000,
-
-			// from TableItemStyle (which doesn't override IsEmpty neither)
-			VerticalAlign	= 0x00004000,
-			Wrap		= 0x00008000,
-
-			// from DataGridPagerStyle (and, once again, no IsEmpty override)
-			Mode		= 0x00010000,
-			NextPageText	= 0x00020000,
-			PageButtonCount	= 0x00040000,
-			Position	= 0x00080000,
-			PrevPageText	= 0x00100000,
-			Visible		= 0x00200000
-			
 		}
 
 		#region Fields
-		internal Styles		styles;
+		private int styles;
 		internal StateBag	viewstate;
 		private FontInfo	fontinfo;
 		private bool		tracking;
@@ -117,7 +96,7 @@
 		{
 			get 
 			{
-				if ((styles & Styles.BackColor) == 0) 
+				if (!CheckBit ((int) Styles.BackColor)) 
 				{
 					return Color.Empty;
 				}
@@ -144,7 +123,7 @@
 		{
 			get 
 			{
-				if ((styles & Styles.BorderColor) == 0) 
+				if (!CheckBit ((int) Styles.BorderColor)) 
 				{
 					return Color.Empty;
 				}
@@ -170,7 +149,7 @@
 		{
 			get 
 			{
-				if ((styles & Styles.BorderStyle) == 0) 
+				if (!CheckBit ((int) Styles.BorderStyle)) 
 				{
 					return BorderStyle.NotSet;
 				}
@@ -196,7 +175,7 @@
 		{
 			get 
 			{
-				if ((styles & Styles.BorderWidth) == 0) 
+				if (!CheckBit ((int) Styles.BorderWidth)) 
 				{
 					return Unit.Empty;
 				}
@@ -224,7 +203,7 @@
 		{
 			get 
 			{
-				if ((styles & Styles.CssClass) == 0) 
+				if (!CheckBit ((int) Styles.CssClass)) 
 				{
 					return string.Empty;
 				}
@@ -267,7 +246,7 @@
 		{
 			get 
 			{
-				if ((styles & Styles.ForeColor) == 0) 
+				if (!CheckBit ((int) Styles.ForeColor)) 
 				{
 					return Color.Empty;
 				}
@@ -293,7 +272,7 @@
 		{
 			get 
 			{
-				if ((styles & Styles.Height) == 0) 
+				if (!CheckBit ((int) Styles.Height)) 
 				{
 					return Unit.Empty;
 				}
@@ -324,7 +303,7 @@
 		{
 			get 
 			{
-				if ((styles & Styles.Width) == 0) 
+				if (!CheckBit ((int) Styles.Width)) 
 				{
 					return Unit.Empty;
 				}
@@ -438,20 +417,20 @@
 			BorderStyle	bs;
 			Unit		u;
 
-			if ((styles & Styles.BackColor) != 0) {
+			if (CheckBit ((int) Styles.BackColor)) {
 				color = (Color)viewstate["BackColor"];
 				if (!color.IsEmpty)
 					writer.AddStyleAttribute (HtmlTextWriterStyle.BackgroundColor, ColorTranslator.ToHtml(color));
 			}
 
-			if ((styles & Styles.BorderColor) != 0) {
+			if (CheckBit ((int) Styles.BorderColor)) {
 				color = (Color)viewstate["BorderColor"];
 				if (!color.IsEmpty)
 					writer.AddStyleAttribute (HtmlTextWriterStyle.BorderColor, ColorTranslator.ToHtml(color));
 			}
 
 			bool have_width = false;
-			if ((styles & Styles.BorderWidth) != 0) {
+			if (CheckBit ((int) Styles.BorderWidth)) {
 				u = (Unit)viewstate["BorderWidth"];
 				if (!u.IsEmpty) {
 					if (u.Value > 0)
@@ -460,31 +439,31 @@
 				}
 			}
 
-			if ((styles & Styles.BorderStyle) != 0) {
+			if (CheckBit ((int) Styles.BorderStyle)) {
 				bs = (BorderStyle)viewstate["BorderStyle"];
 				if (bs != BorderStyle.NotSet) 
 					writer.AddStyleAttribute (HtmlTextWriterStyle.BorderStyle, bs.ToString());
 				else {
-					if ((styles & Styles.BorderWidth) != 0)
+					if (CheckBit ((int) Styles.BorderWidth))
 						writer.AddStyleAttribute (HtmlTextWriterStyle.BorderStyle, "solid");
 				}
 			} else if (have_width) {
 				writer.AddStyleAttribute (HtmlTextWriterStyle.BorderStyle, "solid");
 			}
 
-			if ((styles & Styles.ForeColor) != 0) {
+			if (CheckBit ((int) Styles.ForeColor)) {
 				color = (Color)viewstate["ForeColor"];
 				if (!color.IsEmpty)
 					writer.AddStyleAttribute (HtmlTextWriterStyle.Color, ColorTranslator.ToHtml(color));
 			}
 
-			if ((styles & Styles.Height) != 0) {
+			if (CheckBit ((int) Styles.Height)) {
 				u = (Unit)viewstate["Height"];
 				if (!u.IsEmpty)
 					writer.AddStyleAttribute (HtmlTextWriterStyle.Height, u.ToString());
 			}
 
-			if ((styles & Styles.Width) != 0) {
+			if (CheckBit ((int) Styles.Width)) {
 				u = (Unit)viewstate["Width"];
 				if (!u.IsEmpty)
 					writer.AddStyleAttribute (HtmlTextWriterStyle.Width, u.ToString());
@@ -534,14 +513,14 @@
 			BorderStyle	bs;
 			Unit		u;
 
-			if ((styles & Styles.BackColor) != 0)
+			if (CheckBit ((int) Styles.BackColor))
 			{
 				color = (Color)viewstate["BackColor"];
 				if (!color.IsEmpty)
 					attributes.Add (HtmlTextWriterStyle.BackgroundColor, ColorTranslator.ToHtml(color));
 			}
 
-			if ((styles & Styles.BorderColor) != 0) 
+			if (CheckBit ((int) Styles.BorderColor)) 
 			{
 				color = (Color)viewstate["BorderColor"];
 				if (!color.IsEmpty)
@@ -549,7 +528,7 @@
 			}
 
 			bool have_width = false;
-			if ((styles & Styles.BorderWidth) != 0) {
+			if (CheckBit ((int) Styles.BorderWidth)) {
 				u = (Unit) viewstate ["BorderWidth"];
 				if (!u.IsEmpty) {
 					if (u.Value > 0)
@@ -558,7 +537,7 @@
 				}
 			}
 
-			if ((styles & Styles.BorderStyle) != 0) {
+			if (CheckBit ((int) Styles.BorderStyle)) {
 				bs = (BorderStyle) viewstate ["BorderStyle"];
 				if (bs != BorderStyle.NotSet)
 					attributes.Add (HtmlTextWriterStyle.BorderStyle, bs.ToString ());
@@ -569,21 +548,21 @@
 				attributes.Add (HtmlTextWriterStyle.BorderStyle, "solid");
 			}
 
-			if ((styles & Styles.ForeColor) != 0) 
+			if (CheckBit ((int) Styles.ForeColor)) 
 			{
 				color = (Color)viewstate["ForeColor"];
 				if (!color.IsEmpty)
 					attributes.Add (HtmlTextWriterStyle.Color, ColorTranslator.ToHtml(color));
 			}
 
-			if ((styles & Styles.Height) != 0) 
+			if (CheckBit ((int) Styles.Height)) 
 			{
 				u = (Unit)viewstate["Height"];
 				if (!u.IsEmpty)
 					attributes.Add (HtmlTextWriterStyle.Height, u.ToString());
 			}
 
-			if ((styles & Styles.Width) != 0) 
+			if (CheckBit ((int) Styles.Width)) 
 			{
 				u = (Unit)viewstate["Width"];
 				if (!u.IsEmpty)
@@ -606,35 +585,35 @@
 				Font.CopyFrom(s.fontinfo);
 			}
 
-			if (((s.styles & Styles.BackColor) != 0) && (s.BackColor != Color.Empty))
+			if ((s.CheckBit ((int) Styles.BackColor)) && (s.BackColor != Color.Empty))
 			{
 				this.BackColor = s.BackColor;
 			}
-			if (((s.styles & Styles.BorderColor) != 0) && (s.BorderColor != Color.Empty))
+			if ((s.CheckBit ((int) Styles.BorderColor)) && (s.BorderColor != Color.Empty))
 			{
 				this.BorderColor = s.BorderColor;
 			}
-			if (((s.styles & Styles.BorderStyle) != 0) && (s.BorderStyle != BorderStyle.NotSet))
+			if ((s.CheckBit ((int) Styles.BorderStyle)) && (s.BorderStyle != BorderStyle.NotSet))
 			{
 				this.BorderStyle = s.BorderStyle;
 			}
-			if (((s.styles & Styles.BorderWidth) != 0) && (!s.BorderWidth.IsEmpty))
+			if ((s.CheckBit ((int) Styles.BorderWidth)) && (!s.BorderWidth.IsEmpty))
 			{
 				this.BorderWidth = s.BorderWidth;
 			}
-			if (((s.styles & Styles.CssClass) != 0) && (s.CssClass != string.Empty))
+			if ((s.CheckBit ((int) Styles.CssClass)) && (s.CssClass != string.Empty))
 			{
 				this.CssClass = s.CssClass;
 			}
-			if (((s.styles & Styles.ForeColor) != 0) && (s.ForeColor != Color.Empty))
+			if ((s.CheckBit ((int) Styles.ForeColor)) && (s.ForeColor != Color.Empty))
 			{
 				this.ForeColor = s.ForeColor;
 			}
-			if (((s.styles & Styles.Height) != 0) && (!s.Height.IsEmpty))
+			if ((s.CheckBit ((int) Styles.Height)) && (!s.Height.IsEmpty))
 			{
 				this.Height = s.Height;
 			}
-			if (((s.styles & Styles.Width) != 0) && (!s.Width.IsEmpty))
+			if ((s.CheckBit ((int) Styles.Width)) && (!s.Width.IsEmpty))
 			{
 				this.Width = s.Width;
 			}
@@ -652,35 +631,35 @@
 				Font.MergeWith(s.fontinfo);
 			}
 
-			if (((styles & Styles.BackColor) == 0) && ((s.styles & Styles.BackColor) != 0) && (s.BackColor != Color.Empty))
+			if ((!CheckBit ((int) Styles.BackColor)) && (s.CheckBit ((int) Styles.BackColor)) && (s.BackColor != Color.Empty))
 			{
 				this.BackColor = s.BackColor;
 			}
-			if (((styles & Styles.BorderColor) == 0) && ((s.styles & Styles.BorderColor) != 0) && (s.BorderColor != Color.Empty)) 
+			if ((!CheckBit ((int) Styles.BorderColor)) && (s.CheckBit ((int) Styles.BorderColor)) && (s.BorderColor != Color.Empty)) 
 			{
 				this.BorderColor = s.BorderColor;
 			}
-			if (((styles & Styles.BorderStyle) == 0) && ((s.styles & Styles.BorderStyle) != 0) && (s.BorderStyle != BorderStyle.NotSet)) 
+			if ((!CheckBit ((int) Styles.BorderStyle)) && (s.CheckBit ((int) Styles.BorderStyle)) && (s.BorderStyle != BorderStyle.NotSet))
 			{
 				this.BorderStyle = s.BorderStyle;
 			}
-			if (((styles & Styles.BorderWidth) == 0) && ((s.styles & Styles.BorderWidth) != 0) && (!s.BorderWidth.IsEmpty)) 
+			if ((!CheckBit ((int) Styles.BorderWidth)) && (s.CheckBit ((int) Styles.BorderWidth)) && (!s.BorderWidth.IsEmpty))
 			{
 				this.BorderWidth = s.BorderWidth;
 			}
-			if (((styles & Styles.CssClass) == 0) && ((s.styles & Styles.CssClass) != 0) && (s.CssClass != string.Empty)) 
+			if ((!CheckBit ((int) Styles.CssClass)) && (s.CheckBit ((int) Styles.CssClass)) && (s.CssClass != string.Empty))
 			{
 				this.CssClass = s.CssClass;
 			}
-			if (((styles & Styles.ForeColor) == 0) && ((s.styles & Styles.ForeColor) != 0) && (s.ForeColor != Color.Empty)) 
+			if ((!CheckBit ((int) Styles.ForeColor)) && (s.CheckBit ((int) Styles.ForeColor)) && (s.ForeColor != Color.Empty))
 			{
 				this.ForeColor = s.ForeColor;
 			}
-			if (((styles & Styles.Height) == 0) && ((s.styles & Styles.Height) != 0) && (!s.Height.IsEmpty)) 
+			if ((!CheckBit ((int) Styles.Height)) && (s.CheckBit ((int) Styles.Height)) && (!s.Height.IsEmpty))
 			{
 				this.Height = s.Height;
 			}
-			if (((styles & Styles.Width) == 0) && ((s.styles & Styles.Width) != 0) && (!s.Width.IsEmpty)) 
+			if ((!CheckBit ((int) Styles.Width)) && (s.CheckBit ((int) Styles.Width)) && (!s.Width.IsEmpty))
 			{
 				this.Width = s.Width;
 			}
@@ -714,7 +693,7 @@
 			{
 				fontinfo.Reset();
 			}
-			styles = Styles.None;
+			styles = 0;
 		}
 #if ONLY_1_1
 		public override string ToString() 
@@ -730,39 +709,39 @@
 			viewstate.LoadViewState(state);
 
 			// Update our style
-			this.styles = Styles.None;
+			this.styles = 0;
 
 			if (viewstate["BackColor"] != null) 
 			{
-				styles |= Styles.BackColor;
+				styles |= (int) Styles.BackColor;
 			}
 			if (viewstate["BorderColor"] != null) 
 			{
-				styles |= Styles.BorderColor;
+				styles |= (int) Styles.BorderColor;
 			}
 			if (viewstate["BorderStyle"] != null) 
 			{
-				styles |= Styles.BorderStyle;
+				styles |= (int) Styles.BorderStyle;
 			}
 			if (viewstate["BorderWidth"] != null) 
 			{
-				styles |= Styles.BorderWidth;
+				styles |= (int) Styles.BorderWidth;
 			}
 			if (viewstate["CssClass"] != null) 
 			{
-				styles |= Styles.CssClass;
+				styles |= (int) Styles.CssClass;
 			}
 			if (viewstate["ForeColor"] != null) 
 			{
-				styles |= Styles.ForeColor;
+				styles |= (int) Styles.ForeColor;
 			}
 			if (viewstate["Height"] != null) 
 			{
-				styles |= Styles.Height;
+				styles |= (int) Styles.Height;
 			}
 			if (viewstate["Width"] != null) 
 			{
-				styles |= Styles.Width;
+				styles |= (int) Styles.Width;
 			}
 			Font.LoadViewState();
 
@@ -776,7 +755,7 @@
 
 		protected internal virtual object SaveViewState () 
 		{
-			if (styles != Styles.None || !Font.IsEmpty) 
+			if (styles != 0 || !Font.IsEmpty) 
 			{
 				return viewstate.SaveViewState();
 			}
@@ -785,11 +764,11 @@
 
 		protected internal virtual void SetBit( int bit ) 
 		{
-			styles |= (Styles) bit;
+			styles |= bit;
 		}
 
 		internal bool CheckBit (int bit) {
-			return (styles & (Styles) bit) != 0;
+			return (styles & bit) != 0;
 		}
 
 		protected internal virtual void TrackViewState () 
@@ -856,7 +835,7 @@
 
 		internal void CopyTextStylesFrom (Style source) {
 			// Used primary for TreeView and Menu
-			if ((source.styles & Styles.ForeColor) != 0) {
+			if (source.CheckBit ((int) Styles.ForeColor)) {
 				ForeColor = source.ForeColor;
 			}
 			if (!source.Font.IsEmpty) {
Index: System.Web.UI.WebControls/TableItemStyle.cs
===================================================================
--- System.Web.UI.WebControls/TableItemStyle.cs	(revision 64914)
+++ System.Web.UI.WebControls/TableItemStyle.cs	(working copy)
@@ -37,6 +37,14 @@
 	[AspNetHostingPermission (SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)]
 	public class TableItemStyle : Style {
 
+		[Flags]
+		enum TableItemStyles
+		{
+			HorizontalAlign = 0x00010000,
+			VerticalAlign = 0x00020000,
+			Wrap = 0x00040000,
+		}
+
 		public TableItemStyle ()
 		{
 		}
@@ -55,7 +63,7 @@
 		[WebCategory("Layout")]
 		public virtual HorizontalAlign HorizontalAlign {
 			get {
-				if ((styles & Styles.HorizontalAlign) == 0)
+				if (!CheckBit ((int) TableItemStyles.HorizontalAlign))
 					return HorizontalAlign.NotSet;
 				return (HorizontalAlign) ViewState ["HorizontalAlign"];
 			}
@@ -66,7 +74,7 @@
 					throw new ArgumentOutOfRangeException (Locale.GetText ("Invalid HorizontalAlign value."));
 				}
 				ViewState ["HorizontalAlign"] = value;
-				styles |= Styles.HorizontalAlign;
+				SetBit ((int) TableItemStyles.HorizontalAlign);
 			}
 		}
 
@@ -79,7 +87,7 @@
 		[WebCategory("Layout")]
 		public virtual VerticalAlign VerticalAlign {
 			get {
-				if ((styles & Styles.VerticalAlign) == 0)
+				if (!CheckBit ((int) TableItemStyles.VerticalAlign))
 					return VerticalAlign.NotSet;
 				return (VerticalAlign) ViewState ["VerticalAlign"];
 			}
@@ -90,7 +98,7 @@
 					throw new ArgumentOutOfRangeException (Locale.GetText ("Invalid VerticalAlign value."));
 				}
 				ViewState ["VerticalAlign"] = value;
-				styles |= Styles.VerticalAlign;
+				SetBit ((int) TableItemStyles.VerticalAlign);
 			}
 		}
 
@@ -103,13 +111,13 @@
 		[WebCategory("Layout")]
 		public virtual bool Wrap {
 			get {
-				if ((styles & Styles.Wrap) == 0)
+				if (!CheckBit ((int) TableItemStyles.Wrap))
 					return true;
 				return (bool) ViewState ["Wrap"];
 			}
 			set {
 				ViewState ["Wrap"] = value;
-					styles |= Styles.Wrap;
+				SetBit ((int) TableItemStyles.Wrap);
 			}
 		}
 
@@ -158,13 +166,13 @@
 			}
 		}
 
-		private void Copy (string name, Styles s, Style source)
+		private void Copy (string name, TableItemStyles s, Style source)
 		{
-			if ((source.styles & s) != 0) {
+			if (source.CheckBit((int) s)) {
 				object o = source.ViewState [name];
 				if (o != null) {
 					ViewState [name] = o;
-					styles |= s;
+					SetBit ((int) s);
 				}
 			}
 		}
@@ -173,19 +181,19 @@
 		{
 			base.CopyFrom (s);
 			if (s != null && !s.IsEmpty) {
-				Copy ("HorizontalAlign", Styles.HorizontalAlign, s);
-				Copy ("VerticalAlign", Styles.VerticalAlign, s);
-				Copy ("Wrap", Styles.Wrap, s);
+				Copy ("HorizontalAlign", TableItemStyles.HorizontalAlign, s);
+				Copy ("VerticalAlign", TableItemStyles.VerticalAlign, s);
+				Copy ("Wrap", TableItemStyles.Wrap, s);
 			}
 		}
 
-		private void Merge (string name, Styles s, Style source)
+		private void Merge (string name, TableItemStyles s, Style source)
 		{
-			if ((styles & s) == 0 && (source.styles & s) != 0) {
+			if ((!CheckBit ((int) s)) && (source.CheckBit ((int) s))) {
 				object o = source.ViewState [name];
 				if (o != null) {
 					ViewState [name] = o;
-					styles |= s;
+					SetBit ((int) s);
 				}
 			}
 		}
@@ -198,20 +206,20 @@
 			} else {
 				base.MergeWith (s);
 				if (s != null) {
-					Merge ("HorizontalAlign", Styles.HorizontalAlign, s);
-					Merge ("VerticalAlign", Styles.VerticalAlign, s);
-					Merge ("Wrap", Styles.Wrap, s);
+					Merge ("HorizontalAlign", TableItemStyles.HorizontalAlign, s);
+					Merge ("VerticalAlign", TableItemStyles.VerticalAlign, s);
+					Merge ("Wrap", TableItemStyles.Wrap, s);
 				}
 			}
 		}
 
 		public override void Reset ()
 		{
-			if ((styles & Styles.HorizontalAlign) != 0)
+			if (CheckBit ((int) TableItemStyles.HorizontalAlign))
 				ViewState.Remove ("HorizontalAlign");
-			if ((styles & Styles.VerticalAlign) != 0)
+			if (CheckBit ((int) TableItemStyles.VerticalAlign))
 				ViewState.Remove ("VerticalAlign");
-			if ((styles & Styles.Wrap) != 0)
+			if (CheckBit ((int) TableItemStyles.Wrap))
 				ViewState.Remove ("Wrap");
 			// call base at the end because "styles" will reset there
 			base.Reset ();
@@ -219,11 +227,14 @@
 
 		internal override void LoadViewStateInternal()
 		{
-			if (viewstate["VerticalAlign"] != null) {
-				styles |= Styles.VerticalAlign;
+			if (viewstate ["HorizontalAlign"] != null) {
+				SetBit ((int) TableItemStyles.HorizontalAlign);
 			}
+			if (viewstate ["VerticalAlign"] != null) {
+				SetBit ((int) TableItemStyles.VerticalAlign);
+			}
 			if (viewstate["Wrap"] != null) {
-				styles |= Styles.Wrap;
+				SetBit ((int) TableItemStyles.Wrap);
 			}
 
 			base.LoadViewStateInternal();
Index: System.Web.UI.WebControls/TableStyle.cs
===================================================================
--- System.Web.UI.WebControls/TableStyle.cs	(revision 64914)
+++ System.Web.UI.WebControls/TableStyle.cs	(working copy)
@@ -37,6 +37,16 @@
 	[AspNetHostingPermission (SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)]
 	public class TableStyle : Style {
 
+		[Flags]
+		enum TableStyles
+		{
+			BackImageUrl = 0x00010000,
+			CellPadding = 0x00020000,
+			CellSpacing = 0x00040000,
+			GridLines = 0x00080000,
+			HorizontalAlign = 0x00100000,
+		}
+
 		public TableStyle ()
 		{
 		}
@@ -58,7 +68,7 @@
 		[WebCategory ("Appearance")]
 		public virtual string BackImageUrl {
 			get {
-				if ((styles & Styles.BackImageUrl) == 0)
+				if (!CheckBit ((int) TableStyles.BackImageUrl))
 					return String.Empty;
 				return (string) ViewState ["BackImageUrl"];
 			}
@@ -66,7 +76,7 @@
 				if (value == null)
 					throw new ArgumentNullException ("BackImageUrl");
 				ViewState ["BackImageUrl"] = value;
-				styles |= Styles.BackImageUrl;
+				SetBit ((int) TableStyles.BackImageUrl);
 			}
 		}
 
@@ -80,7 +90,7 @@
 		[WebCategory ("Appearance")]
 		public virtual int CellPadding {
 			get {
-				if ((styles & Styles.CellPadding) == 0)
+				if (!CheckBit ((int) TableStyles.CellPadding))
 					return -1;
 				return (int) ViewState ["CellPadding"];
 			}
@@ -88,7 +98,7 @@
 				if (value < -1)
 					throw new ArgumentOutOfRangeException ("< -1");
 				ViewState ["CellPadding"] = value;
-				styles |= Styles.CellPadding;
+				SetBit ((int) TableStyles.CellPadding);
 			}
 		}
 
@@ -102,7 +112,7 @@
 		[WebCategory ("Appearance")]
 		public virtual int CellSpacing {
 			get {
-				if ((styles & Styles.CellSpacing) == 0)
+				if (!CheckBit ((int) TableStyles.CellSpacing))
 					return -1;
 				return (int) ViewState ["CellSpacing"];
 			}
@@ -110,7 +120,7 @@
 				if (value < -1)
 					throw new ArgumentOutOfRangeException ("< -1");
 				ViewState ["CellSpacing"] = value;
-				styles |= Styles.CellSpacing;
+				SetBit ((int) TableStyles.CellSpacing);
 			}
 		}
 
@@ -125,7 +135,7 @@
 		[WebCategory ("Appearance")]
 		public virtual GridLines GridLines {
 			get {
-				if ((styles & Styles.GridLines) == 0)
+				if (!CheckBit ((int) TableStyles.GridLines))
 					return GridLines.None;
 				return (GridLines) ViewState ["GridLines"];
 			}
@@ -136,7 +146,7 @@
 					throw new ArgumentOutOfRangeException (Locale.GetText ("Invalid GridLines value."));
 				}
 				ViewState ["GridLines"] = value;
-				styles |= Styles.GridLines;
+				SetBit ((int) TableStyles.GridLines);
 			}
 		}
 
@@ -150,7 +160,7 @@
 		[WebCategory ("Layout")]
 		public virtual HorizontalAlign HorizontalAlign {
 			get {
-				if ((styles & Styles.HorizontalAlign) == 0)
+				if (!CheckBit ((int) TableStyles.HorizontalAlign))
 					return HorizontalAlign.NotSet;
 				return (HorizontalAlign) ViewState ["HorizontalAlign"];
 			}
@@ -161,7 +171,7 @@
 					throw new ArgumentOutOfRangeException (Locale.GetText ("Invalid HorizontalAlign value."));
 				}
 				ViewState ["HorizontalAlign"] = value;
-				styles |= Styles.HorizontalAlign;
+				SetBit ((int) TableStyles.HorizontalAlign);
 			}
 		}
 
@@ -235,13 +245,13 @@
 #endif
 		}
 
-		private void Copy (string name, Styles s, Style source)
+		private void Copy (string name, TableStyles s, Style source)
 		{
-			if ((source.styles & s) != 0) {
+			if (source.CheckBit ((int) s)) {
 				object o = source.ViewState [name];
 				if (o != null) {
 					ViewState [name] = o;
-					styles |= s;
+					SetBit ((int) s);
 				}
 			}
 		}
@@ -251,21 +261,21 @@
 			// note: styles is copied in base
 			base.CopyFrom (s);
 			if ((s != null) && !s.IsEmpty) {
-				Copy ("BackImageUrl", Styles.BackImageUrl, s);
-				Copy ("CellPadding", Styles.CellPadding, s);
-				Copy ("CellSpacing", Styles.CellSpacing, s);
-				Copy ("GridLines", Styles.GridLines, s);
-				Copy ("HorizontalAlign", Styles.HorizontalAlign, s);
+				Copy ("BackImageUrl", TableStyles.BackImageUrl, s);
+				Copy ("CellPadding", TableStyles.CellPadding, s);
+				Copy ("CellSpacing", TableStyles.CellSpacing, s);
+				Copy ("GridLines", TableStyles.GridLines, s);
+				Copy ("HorizontalAlign", TableStyles.HorizontalAlign, s);
 			}
 		}
 
-		private void Merge (string name, Styles s, Style source)
+		private void Merge (string name, TableStyles s, Style source)
 		{
-			if ((styles & s) == 0 && (source.styles & s) != 0) {
+			if ((!CheckBit ((int) s)) && (source.CheckBit ((int) s))) {
 				object o = source.ViewState [name];
 				if (o != null) {
 					ViewState [name] = o;
-					styles |= s;
+					SetBit ((int) s);
 				}
 			}
 		}
@@ -278,26 +288,26 @@
 			} else {
 				base.MergeWith (s);
 				if ((s != null) && !s.IsEmpty) {
-					Merge ("BackImageUrl", Styles.BackImageUrl, s);
-					Merge ("CellPadding", Styles.CellPadding, s);
-					Merge ("CellSpacing", Styles.CellSpacing, s);
-					Merge ("GridLines", Styles.GridLines, s);
-					Merge ("HorizontalAlign", Styles.HorizontalAlign, s);
+					Merge ("BackImageUrl", TableStyles.BackImageUrl, s);
+					Merge ("CellPadding", TableStyles.CellPadding, s);
+					Merge ("CellSpacing", TableStyles.CellSpacing, s);
+					Merge ("GridLines", TableStyles.GridLines, s);
+					Merge ("HorizontalAlign", TableStyles.HorizontalAlign, s);
 				}
 			}
 		}
 
 		public override void Reset ()
 		{
-			if ((styles & Styles.BackImageUrl) != 0)
+			if (CheckBit ((int) TableStyles.BackImageUrl))
 				ViewState.Remove ("BackImageUrl");
-			if ((styles & Styles.CellPadding) != 0)
+			if (CheckBit ((int) TableStyles.CellPadding))
 				ViewState.Remove ("CellPadding");
-			if ((styles & Styles.CellSpacing) != 0)
+			if (CheckBit ((int) TableStyles.CellSpacing))
 				ViewState.Remove ("CellSpacing");
-			if ((styles & Styles.GridLines) != 0)
+			if (CheckBit ((int) TableStyles.GridLines))
 				ViewState.Remove ("GridLines");
-			if ((styles & Styles.HorizontalAlign) != 0)
+			if (CheckBit ((int) TableStyles.HorizontalAlign))
 				ViewState.Remove ("HorizontalAlign");
 			// call base at the end because "styles" will reset there
 			base.Reset ();
@@ -320,19 +330,19 @@
 		internal override void LoadViewStateInternal()
 		{
 			if (viewstate["BackImageUrl"] != null) {
-				styles |= Styles.BackImageUrl;
+				SetBit ((int) TableStyles.BackImageUrl);
 			}
 			if (viewstate["CellPadding"] != null) {
-				styles |= Styles.CellPadding;
+				SetBit ((int) TableStyles.CellPadding);
 			}
 			if (viewstate["CellSpacing"] != null) {
-				styles |= Styles.CellSpacing;
+				SetBit ((int) TableStyles.CellSpacing);
 			}
 			if (viewstate["GridLines"] != null) {
-				styles |= Styles.GridLines;
+				SetBit ((int) TableStyles.GridLines);
 			}
 			if (viewstate["HorizontalAlign"] != null) {
-				styles |= Styles.HorizontalAlign;
+				SetBit ((int) TableStyles.HorizontalAlign);
 			}
 
 			base.LoadViewStateInternal();
Index: Test/System.Web.UI.WebControls/TableItemStyleTest.cs
===================================================================
--- Test/System.Web.UI.WebControls/TableItemStyleTest.cs	(revision 64914)
+++ Test/System.Web.UI.WebControls/TableItemStyleTest.cs	(working copy)
@@ -56,6 +56,14 @@
 		public StateBag StateBag {
 			get { return base.ViewState; }
 		}
+
+		public bool SetBitCalledFlag = false;
+		public int SetBitCalledValue = 0;
+		protected override void SetBit (int bit) {
+			SetBitCalledFlag = true;
+			SetBitCalledValue = bit;
+			base.SetBit (bit);
+		}
 	}
 
 	[TestFixture]
@@ -252,5 +260,25 @@
 			Assert.AreEqual (VerticalAlign.Top, tis.VerticalAlign, "VerticalAlign");
 			Assert.IsTrue (tis.Wrap, "Wrap");
 		}
+
+		[Test]
+		public void SetBitCalledWhenSetProperty () {
+			TestTableItemStyle s = new TestTableItemStyle ();
+
+			s.SetBitCalledFlag = false;
+			s.HorizontalAlign = HorizontalAlign.Right;
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : HorizontalAlign");
+			Assert.AreEqual (0x10000, s.SetBitCalledValue, "SetBit() was called with wrong argument : HorizontalAlign");
+
+			s.SetBitCalledFlag = false;
+			s.VerticalAlign = VerticalAlign.Bottom;
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : VerticalAlign");
+			Assert.AreEqual (0x20000, s.SetBitCalledValue, "SetBit() was called with wrong argument : VerticalAlign");
+
+			s.SetBitCalledFlag = false;
+			s.Wrap = false;
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : Wrap");
+			Assert.AreEqual (0x40000, s.SetBitCalledValue, "SetBit() was called with wrong argument : Wrap");
+		}
 	}
 }
Index: Test/System.Web.UI.WebControls/TableStyleTest.cs
===================================================================
--- Test/System.Web.UI.WebControls/TableStyleTest.cs	(revision 64914)
+++ Test/System.Web.UI.WebControls/TableStyleTest.cs	(working copy)
@@ -77,6 +77,14 @@
 			base.FillStyleAttributes (attributes, urlResolver);
 		}
 #endif
+
+		public bool SetBitCalledFlag = false;
+		public int SetBitCalledValue = 0;
+		protected override void SetBit (int bit) {
+			SetBitCalledFlag = true;
+			SetBitCalledValue = bit;
+			base.SetBit (bit);
+		}
 	}
 
 #if NET_2_0
@@ -446,5 +454,35 @@
 			expected += ");\">\n";
 			Assert.AreEqual (expected, res);
 		}
+
+		[Test]
+		public void SetBitCalledWhenSetProperty () {
+			TestTableStyle s = new TestTableStyle ();
+
+			s.SetBitCalledFlag = false;
+			s.BackImageUrl = "http://www.mono-project.com";
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : BackImageUrl");
+			Assert.AreEqual (0x10000, s.SetBitCalledValue, "SetBit() was called with wrong argument : BackImageUrl");
+
+			s.SetBitCalledFlag = false;
+			s.CellPadding = 1;
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : CellPadding");
+			Assert.AreEqual (0x20000, s.SetBitCalledValue, "SetBit() was called with wrong argument : CellPadding");
+
+			s.SetBitCalledFlag = false;
+			s.CellSpacing = 1;
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : CellSpacing");
+			Assert.AreEqual (0x40000, s.SetBitCalledValue, "SetBit() was called with wrong argument : CellSpacing");
+
+			s.SetBitCalledFlag = false;
+			s.GridLines = GridLines.Vertical;
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : GridLines");
+			Assert.AreEqual (0x80000, s.SetBitCalledValue, "SetBit() was called with wrong argument : GridLines");
+
+			s.SetBitCalledFlag = false;
+			s.HorizontalAlign = HorizontalAlign.Right;
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : HorizontalAlign");
+			Assert.AreEqual (0x100000, s.SetBitCalledValue, "SetBit() was called with wrong argument : HorizontalAlign");
+		}
 	}
 }
