Index: metadata/appdomain.c
===================================================================
RCS file: /cvs/public/mono/mono/metadata/appdomain.c,v
retrieving revision 1.125
diff -u -u -r1.125 appdomain.c
--- metadata/appdomain.c	7 Apr 2004 16:42:25 -0000	1.125
+++ metadata/appdomain.c	9 Apr 2004 20:15:58 -0000
@@ -68,7 +68,8 @@
 	MonoAppDomainSetup *setup;
 	MonoAppDomain *ad;
 	MonoClass *class;
-
+	MonoString *arg;
+	
 	mono_marshal_init ();
 	
 	mono_install_assembly_preload_hook (mono_domain_assembly_preload, NULL);
@@ -93,16 +94,21 @@
 
 	mono_type_initialization_init ();
 
+	
 	/*
 	 * Create an instance early since we can't do it when there is no memory.
 	 */
-	domain->out_of_memory_ex = mono_exception_from_name (mono_defaults.corlib, "System", "OutOfMemoryException");
+	arg = mono_string_new (domain, "Out of memory");
+	domain->out_of_memory_ex = mono_exception_from_name_two_strings (mono_defaults.corlib, "System", "OutOfMemoryException", arg, NULL);
+	
 	/* 
 	 * These two are needed because the signal handlers might be executing on
 	 * an alternate stack, and Boehm GC can't handle that.
 	 */
-	domain->null_reference_ex = mono_exception_from_name (mono_defaults.corlib, "System", "NullReferenceException");
-	domain->stack_overflow_ex = mono_exception_from_name (mono_defaults.corlib, "System", "StackOverflowException");
+	arg = mono_string_new (domain, "A null value was found where an object instance was required");
+	domain->null_reference_ex = mono_exception_from_name_two_strings (mono_defaults.corlib, "System", "NullReferenceException", arg, NULL);
+	arg = mono_string_new (domain, "The requested operation caused a stack overflow.");
+	domain->stack_overflow_ex = mono_exception_from_name_two_strings (mono_defaults.corlib, "System", "StackOverflowException", arg, NULL);
 	
 	/* GC init has to happen after thread init */
 	mono_gc_init ();
Index: metadata/exception.c
===================================================================
RCS file: /cvs/public/mono/mono/metadata/exception.c,v
retrieving revision 1.22
diff -u -u -r1.22 exception.c
--- metadata/exception.c	17 Mar 2004 13:29:40 -0000	1.22
+++ metadata/exception.c	9 Apr 2004 20:15:58 -0000
@@ -33,10 +33,8 @@
 }
 
 MonoException *
-mono_exception_from_name_domain (MonoDomain *domain,
-								 MonoImage *image, 
-								 const char* name_space, 
-								 const char *name)
+mono_exception_from_name_domain (MonoDomain *domain, MonoImage *image, 
+				 const char* name_space, const char *name)
 {
 	MonoClass *klass;
 	MonoObject *o;
@@ -64,16 +62,19 @@
  *
  * Returns: the initialized exception instance.
  */
-static MonoException *
+MonoException *
 mono_exception_from_name_two_strings (MonoImage *image, const char *name_space,
-									  const char *name, MonoString *a1, MonoString *a2)
+				      const char *name, MonoString *a1, MonoString *a2)
 {
 	MonoDomain *domain = mono_domain_get ();
 	MonoClass *klass;
 	MonoMethod *method = NULL;
 	MonoObject *o;
-	int i;
+	int i, count = 1;
 	gpointer args [2];
+
+	if (a2 != NULL)
+		count++;
 	
 	klass = mono_class_from_name (image, name_space, name);
 	o = mono_object_new (domain, klass);
@@ -84,11 +85,12 @@
 		if (strcmp (".ctor", klass->methods [i]->name))
 			continue;
 		sig = klass->methods [i]->signature;
-		if (sig->param_count != 2)
+		if (sig->param_count != count)
 			continue;
 
-		if (sig->params [0]->type != MONO_TYPE_STRING ||
-		    sig->params [1]->type != MONO_TYPE_STRING)
+		if (sig->params [0]->type != MONO_TYPE_STRING)
+			continue;
+		if (count == 2 && sig->params [1]->type != MONO_TYPE_STRING)
 			continue;
 		method = klass->methods [i];
 	}
@@ -112,12 +114,12 @@
  */
 MonoException *
 mono_exception_from_name_msg (MonoImage *image, const char *name_space,
-				  const char *name, const guchar *msg)
+			      const char *name, const guchar *msg)
 {
 	MonoException *ex;
 	MonoDomain *domain;
 
-    ex = mono_exception_from_name (image, name_space, name);
+	ex = mono_exception_from_name (image, name_space, name);
 
 	domain = ((MonoObject *)ex)->vtable->domain;
 
@@ -297,9 +299,8 @@
 MonoException *
 mono_get_exception_thread_state (const guchar *msg)
 {
-	return mono_exception_from_name_msg (mono_defaults.corlib, 
-										 "System.Threading", "ThreadStateException",
-										 msg);
+	return mono_exception_from_name_msg (
+		mono_defaults.corlib, "System.Threading", "ThreadStateException", msg);
 }
 
 MonoException *
Index: metadata/exception.h
===================================================================
RCS file: /cvs/public/mono/mono/metadata/exception.h,v
retrieving revision 1.22
diff -u -u -r1.22 exception.h
--- metadata/exception.h	17 Mar 2004 13:29:40 -0000	1.22
+++ metadata/exception.h	9 Apr 2004 20:15:58 -0000
@@ -23,6 +23,10 @@
 					const char *name);
 
 MonoException *
+mono_exception_from_name_two_strings (MonoImage *image, const char *name_space,
+				      const char *name, MonoString *a1, MonoString *a2);
+
+MonoException *
 mono_exception_from_name_msg	       (MonoImage *image, const char *name_space,
 					const char *name, const guchar *msg);
 
