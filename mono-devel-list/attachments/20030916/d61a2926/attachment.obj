using System ;
using System.IO ;
using System.Text.RegularExpressions;
using System.Collections ;
using System.Xml ;
using System.Xml.Xsl ;

namespace Trivium.CSBuild
{	
	public class CSBuildMain
	{
		protected const string defConfiguration = "Release";
		protected const string cUsage = "mono CSBuild.exe -p <project name> | -s <solution name> -c Configuration[Release]";

		static protected void Usage()
		{
			Console.WriteLine(cUsage) ;
		}
		
		static public int Main( string[] args)
		{
			string conf = defConfiguration  ;
			
			if( args.Length < 2 )
			{
				Usage() ;
				return 0 ;
			}
			if( args.Length >= 4 )
			{
				if( args[2] == "-c" )
					conf = args[3] ;
			}
			if( args[0] == "-s" )
			{
				CSBuildSolution bs = new CSBuildSolution(args[1], conf);
				bs.Build() ;
			}
			else if( args[0] == "-p" )
			{
				CSBuildProject bp = new CSBuildProject(args[1], conf);
				bp.Build() ;
			}
			
			return 0 ;
		}
	}

	public struct CSProjectInSolution
	{
		public string projectName ;
		public string guid1 ;
		public string guid2 ;
		public string projectFileName;
		public bool ready;
	}
	
	public class CSBuildSolution	
	{
		protected string m_solutionName ;
		protected ArrayList m_projects ;
		protected string m_configuration;
		
		public CSBuildSolution(string solutionName, string configuration)
		{
			m_projects = new ArrayList();
			m_solutionName = solutionName;
			m_configuration = configuration;
		}		
		
		public int Build()
		{
			try
			{
				StreamReader sr = new StreamReader(m_solutionName) ;
				string line ;
				while( (line=sr.ReadLine() ) != null )
				{
					//Console.WriteLine(line);
					parseProject(line);
				}
				sr.Close();
				
				foreach( CSProjectInSolution pis in m_projects )
				{
					/*
					C# Project only
					*/
					if( Path.GetExtension(pis.projectFileName) == ".csproj" )
					{
						string pName = Path.GetDirectoryName(m_solutionName) + 
										Path.DirectorySeparatorChar + 
										pis.projectFileName;
						CSBuildProject bp = new CSBuildProject(pName, m_configuration);
						bp.Build();
					}
				}
			}
			catch( Exception e )
			{
				Console.WriteLine( e.Message ) ;
				return -1 ;
			}
			return 0 ;
		}
		
		protected void parseProject(string line)
		{
			if( !line.StartsWith("Project") )
				return ;
			CSProjectInSolution pis = new CSProjectInSolution();
			//Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "PresentationCommon", "PresentationCommon\PresentationCommon.csproj", "{196B6690-A2B2-495D-A93E-85085A2EC549}"
			Regex re = new Regex("\"([^\"]*)\"");
			MatchCollection matches = re.Matches(line) ;	

			if( matches.Count != 4 )
				throw new Exception("Invalid project string");
			pis.guid1 = matches[0].Value ;
			pis.projectName = matches[1].Groups[1].Value ;
			pis.projectFileName = matches[2].Groups[1].Value.Replace( '\\', '/');
			/*
			Assuming Web projects are at the same path as the solution
			*/
			if( pis.projectFileName.StartsWith("http://") )
				pis.projectFileName = Path.GetFileName(pis.projectFileName);
			pis.guid2 = matches[3].Value ;
			pis.ready = false ;
			m_projects.Add(pis) ;
			Console.WriteLine( "@echo Found project:{0}", pis.projectName);
		}
	}
	
	public class CSBuildProject
	{
		protected string m_projectName ;
		protected string m_configuration;		
		
		public CSBuildProject(string projectName, string configuration)
		{
			m_projectName = projectName;
			m_configuration = configuration ;
		}		
		
		public int Build()
		{
			try
			{
				XmlDocument doc = new XmlDocument() ;
				doc.Load(m_projectName);
								
				XsltArgumentList xsltArgs = new XsltArgumentList() ;
				xsltArgs.AddParam("ProjectName", "",  Path.GetFileNameWithoutExtension(m_projectName));
				xsltArgs.AddParam("ProjectFilePath", "", 
					Path.GetDirectoryName(m_projectName) + Path.DirectorySeparatorChar);
				xsltArgs.AddParam( "Configuration", "", m_configuration);		
				/*if( m_projects != null )
				{
					CSBuildExtension be = new CSBuildExtension(m_projects) ;
					xsltArgs.AddExtensionObject("urn:CSBuildExtension", be);
					xsltArgs.AddParam("IsSolution", "", "true");
				}*/
				XslTransform xslt = new XslTransform() ;
				xslt.Load( "./CSProject.xslt");
				xslt.Transform( doc, xsltArgs, Console.Out ) ;
			}
			catch( Exception e )
			{
				Console.WriteLine( e.Message ) ;
				return -1 ;
			}
			return 0 ;
		}
	}	
}
