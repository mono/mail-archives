Index: ServerIdentity.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.Runtime.Remoting/ServerIdentity.cs,v
retrieving revision 1.5
diff -u -u -r1.5 ServerIdentity.cs
--- ServerIdentity.cs	21 Jul 2003 17:12:40 -0000	1.5
+++ ServerIdentity.cs	24 Nov 2003 23:17:49 -0000
@@ -142,7 +142,7 @@
 			lock (this) 
 			{
 				if (_serverObject == null) {
-					MarshalByRefObject server = (MarshalByRefObject) Activator.CreateInstance (_objectType);
+					MarshalByRefObject server = (MarshalByRefObject) Activator.CreateInstance (_objectType, true);
 					AttachServerObject (server, Context.DefaultContext);
 					StartTrackingLifetime ((ILease)server.InitializeLifetimeService ());
 				}
@@ -175,7 +175,7 @@
 		{
 			// SingleCallIdentity creates and disposes an instance in each call
 
-			MarshalByRefObject obj = (MarshalByRefObject)Activator.CreateInstance (_objectType);
+			MarshalByRefObject obj = (MarshalByRefObject)Activator.CreateInstance (_objectType, true);
 			obj.ObjectIdentity = this;
 			IMessageSink serverSink = _context.CreateServerObjectSinkChain(obj);
 			IMessage result = serverSink.SyncProcessMessage (msg);
@@ -185,7 +185,7 @@
 
 		public override IMessageCtrl AsyncObjectProcessMessage (IMessage msg, IMessageSink replySink)
 		{
-			MarshalByRefObject obj = (MarshalByRefObject)Activator.CreateInstance (_objectType);
+			MarshalByRefObject obj = (MarshalByRefObject)Activator.CreateInstance (_objectType, true);
 			IMessageSink serverSink = _context.CreateServerObjectSinkChain(obj);
 			if (obj is IDisposable) replySink = new DisposerReplySink(replySink, ((IDisposable)obj));
 			return serverSink.AsyncProcessMessage (msg, replySink);
