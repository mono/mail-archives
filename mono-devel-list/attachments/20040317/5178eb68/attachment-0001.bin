--- CaseInsensitiveHashCodeProvider.cs-orig	2004-03-16 17:29:59.000000000 +0700
+++ CaseInsensitiveHashCodeProvider.cs	2004-03-17 11:36:14.000000000 +0700
@@ -3,6 +3,9 @@
 //
 // Author:
 //   Sergey Chaban (serge@wildwestsoftware.com)
+//	 Mohammad DAMT (mdamt@cdl2000.com)
+//
+// (C) 2004 PT Cakram Datalingga Duaribu  http://www.cdl2000.com
 //
 
 
@@ -10,6 +13,8 @@
 using System;
 using System.Collections;
 using System.Globalization;
+using System.Runtime.CompilerServices;
+using System.Threading;
 
 namespace System.Collections {
 
@@ -17,35 +22,30 @@
 	public class CaseInsensitiveHashCodeProvider : IHashCodeProvider {
 
 		private static CaseInsensitiveHashCodeProvider singleton;
-
+		CultureInfo cInfo = CultureInfo.InvariantCulture;
 
 		// Class constructor
-
 		static CaseInsensitiveHashCodeProvider ()
 		{
 			singleton=new CaseInsensitiveHashCodeProvider ();
 		}
 
-
-
 		// Public instance constructor
-
 		public CaseInsensitiveHashCodeProvider ()
 		{
 		}
 
-		[MonoTODO]
 		public CaseInsensitiveHashCodeProvider (CultureInfo culture)
 		{
-			throw new NotImplementedException ();
-		}
-
+			if (culture == null)
+				throw new ArgumentNullException ("culture");
 
+			cInfo = culture;			
+		}
 
 		//
 		// Public static properties
 		//
-
 		public static CaseInsensitiveHashCodeProvider Default {
 			get {
 				return singleton;
@@ -60,7 +60,8 @@
 		//
 		// IHashCodeProvider
 		//
-
+		[MethodImplAttribute(MethodImplOptions.InternalCall)]
+		private extern static int InternalGetHashCode (string s, CultureInfo culture);
 		public int GetHashCode (object obj)
 		{
 			if (obj == null) {
@@ -73,13 +74,13 @@
 				return obj.GetHashCode ();
 
 			int h = 0;
-			char c;
-
-			int length = str.Length;
-			for (int i = 0;i<length;i++) {
-				c = Char.ToLower (str [i]);
-				h = h * 31 + c;
-			}
+			if (cInfo.LCID == 0x007F) {
+				// shortcut
+				for (int i = 0; i < str.Length; i ++) {
+					h = h * 31 + Char.ToLower (str [i]);
+				}
+			} else 
+				return InternalGetHashCode (str, cInfo);
 
 			return h;
 		}
