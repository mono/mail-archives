--- locales.h-orig	2004-03-16 16:02:28.000000000 +0700
+++ locales.h	2004-03-17 11:35:34.000000000 +0700
@@ -37,5 +37,6 @@
 extern MonoString *ves_icall_System_String_InternalReplace_Str_Comp (MonoString *this, MonoString *old, MonoString *new, MonoCompareInfo *comp);
 extern MonoString *ves_icall_System_String_InternalToLower_Comp (MonoString *this, MonoCultureInfo *cult);
 extern MonoString *ves_icall_System_String_InternalToUpper_Comp (MonoString *this, MonoCultureInfo *cult);
+extern gint32 ves_icall_System_Collections_CaseInsensitiveHashCodeProvider_GetHashCode (MonoString *str, MonoCultureInfo *cult);
 
 #endif /* _MONO_METADATA_FILEIO_H_ */
--- locales.c-orig	2004-03-16 16:02:48.000000000 +0700
+++ locales.c	2004-03-17 11:37:31.000000000 +0700
@@ -960,6 +960,63 @@
 	return(ret);
 }
 
+gint32 ves_icall_System_Collections_CaseInsensitiveHashCodeProvider_GetHashCode (MonoString *str, MonoCultureInfo *cult)
+{
+	gint32 ret = 0;
+	UChar *udest;
+	UErrorCode ec;
+	char *icu_loc;
+	int32_t len;
+	
+#ifdef DEBUG
+	g_message (G_GNUC_PRETTY_FUNCTION ": [%s]",
+		   mono_string_to_utf8 (str));
+#endif
+
+#ifdef DEBUG
+	g_message (G_GNUC_PRETTY_FUNCTION ": LCID is %d", cult->lcid);
+#endif
+
+	icu_loc = mono_string_to_icu_locale (cult->icu_name);
+	if (icu_loc == NULL) {
+		mono_raise_exception ((MonoException *)mono_exception_from_name (mono_defaults.corlib, "System", "SystemException"));
+		return (0);
+	}
+	
+	udest = (UChar *) g_malloc0 (sizeof (UChar)*(mono_string_length (str)+1));
+	
+	/* According to the docs, this might result in a longer or
+	 * shorter string than we started with...
+	 */
+
+	ec = U_ZERO_ERROR;
+	len = u_strToLower (udest, mono_string_length (str)+1,
+			  mono_string_chars (str), -1, icu_loc, &ec);
+	if(ec == U_BUFFER_OVERFLOW_ERROR ||
+	   ec == U_STRING_NOT_TERMINATED_WARNING) {
+		g_free (udest);
+		udest = (UChar *)g_malloc0 (sizeof(UChar)*(len+1));
+		len = u_strToLower (udest, len+1, mono_string_chars (str), -1,
+			 	  icu_loc, &ec);
+	}
+
+	if (U_SUCCESS (ec)) {
+		int32_t i;
+		
+		for (i = 0; i < len; i ++) {
+			ret = ret * 31 + (gint32) udest [i];
+		}
+	} else {
+		g_message (G_GNUC_PRETTY_FUNCTION ": u_strToLower error: %s",
+			   u_errorName (ec));
+	}
+	
+	g_free (icu_loc);
+	g_free (udest);
+	
+	return (ret);
+}
+
 MonoString *ves_icall_System_String_InternalToLower_Comp (MonoString *this, MonoCultureInfo *cult)
 {
 	MonoString *ret;
--- icall.c-orig	2004-03-16 16:03:14.000000000 +0700
+++ icall.c	2004-03-17 11:34:04.000000000 +0700
@@ -5419,6 +5419,10 @@
 	{"GetMachineInstallDirectory", ves_icall_System_Web_Util_ICalls_get_machine_install_dir}
 };
 
+static const IcallEntry caseinsensitivehashcodeprovider_icalls [] = {
+	{"InternalGetHashCode", ves_icall_System_Collections_CaseInsensitiveHashCodeProvider_GetHashCode}
+};
+
 /* proto
 static const IcallEntry array_icalls [] = {
 };
@@ -5434,6 +5438,8 @@
 	{"System.Array", array_icalls, G_N_ELEMENTS (array_icalls)},
 	{"System.Buffer", buffer_icalls, G_N_ELEMENTS (buffer_icalls)},
 	{"System.Char", char_icalls, G_N_ELEMENTS (char_icalls)},
+	{"System.Collections.CaseInsensitiveHashCodeProvider", caseinsensitivehashcodeprovider_icalls, 
+			G_N_ELEMENTS (caseinsensitivehashcodeprovider_icalls)},
 	{"System.Configuration.DefaultConfig", defaultconf_icalls, G_N_ELEMENTS (defaultconf_icalls)},
 	{"System.CurrentTimeZone", timezone_icalls, G_N_ELEMENTS (timezone_icalls)},
 	{"System.DateTime", datetime_icalls, G_N_ELEMENTS (datetime_icalls)},
