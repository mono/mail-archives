Index: mcs/class/corlib/corlib.dll.sources
===================================================================
--- mcs/class/corlib/corlib.dll.sources	(revision 55123)
+++ mcs/class/corlib/corlib.dll.sources	(working copy)
@@ -94,6 +94,7 @@
 System/Char.cs
 System/CharEnumerator.cs
 System/CLSCompliantAttribute.cs
+System/ComProxy.cs
 System/Console.cs
 System/ConsoleCancelEventArgs.cs
 System/ConsoleCancelEventHandler.cs
@@ -235,6 +236,7 @@
 System/UnhandledExceptionEventArgs.cs
 System/UnhandledExceptionEventHandler.cs
 System/UnitySerializationHolder.cs
+System/Variant.cs
 System/ValueType.cs
 System/Version.cs
 System/Void.cs
Index: class/corlib/System/ComProxy.cs
===================================================================
--- mcs/class/corlib/System/ComProxy.cs	(revision 0)
+++ mcs/class/corlib/System/ComProxy.cs	(revision 0)
@@ -0,0 +1,79 @@
+//
+// System.ComProxy
+//
+// Authors:
+//   Jonathan Chambers <jonathan.chambers@ansys.com>
+//
+// Copyright (C) 2005 Jonathan Chambers
+//
+
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+namespace System
+{
+    internal class ComProxy : System.Runtime.Remoting.Proxies.RealProxy, System.Runtime.Remoting.IRemotingTypeInfo
+    {
+        #region Sync with object-internals.h
+        private IntPtr _com_object;
+        private string _typeName;
+        #endregion
+
+        private ComProxy()
+            : base(typeof(__ComObject))
+        {
+        }
+
+        public ComProxy(IntPtr ptr)
+            : base(typeof(__ComObject))
+        {
+            this._com_object = ptr;
+        }
+
+        public override System.Runtime.Remoting.Messaging.IMessage Invoke(System.Runtime.Remoting.Messaging.IMessage msg)
+        {
+            throw new Exception("The method or operation is not implemented.");
+        }
+
+        public string TypeName
+        {
+            get { return _typeName; }
+            set { _typeName = value; }
+        }
+
+        public bool CanCastTo(Type fromType, object o)
+        {
+            IntPtr ppv;
+            Guid guid = fromType.GUID;
+            IntPtr pUnk = System.Runtime.InteropServices.Marshal.GetIUnknownForObject(this);
+            int hr = System.Runtime.InteropServices.Marshal.QueryInterface(pUnk, ref guid, out ppv);
+            if (hr == 0 && ppv != IntPtr.Zero)
+                return true;
+            else
+                return false;
+            
+        }
+
+        public override object GetTransparentProxy()
+        {
+            return base.GetTransparentProxy();
+        }
+    }
+}
Index: class/corlib/System/Variant.cs
===================================================================
--- mcs/class/corlib/System/Variant.cs	(revision 0)
+++ mcs/class/corlib/System/Variant.cs	(revision 0)
@@ -0,0 +1,246 @@
+//
+// System.Variant
+//
+// Authors:
+//   Jonathan Chambers <jonathan.chambers@ansys.com>
+//
+// Copyright (C) 2005 Jonathan Chambers
+//
+
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+
+namespace System
+{
+    using System.Runtime.InteropServices;
+
+    [StructLayout(LayoutKind.Explicit, Size = 16)]
+    internal struct Variant
+    {
+        [FieldOffset(0)]
+        public ushort vt;
+
+        [FieldOffset(2)]
+        public ushort wReserved1;
+
+        [FieldOffset(4)]
+        public ushort wReserved2;
+
+        [FieldOffset(6)]
+        public ushort wReserved3;
+
+        [FieldOffset(8)]
+        public long llVal;
+
+        [FieldOffset(8)]
+        public int lVal;
+
+        [FieldOffset(8)]
+        public byte bVal;
+
+        [FieldOffset(8)]
+        public short iVal;
+
+        [FieldOffset(8)]
+        public float fltVal;
+
+        [FieldOffset(8)]
+        public double dblVal;
+
+        [FieldOffset(8)]
+        public short boolVal;
+
+        [FieldOffset(8)]
+        public int scode;
+
+        //[FieldOffset(8)]
+        //public CY cyVal;
+
+        [FieldOffset(8)]
+        public double date;
+
+        [FieldOffset(8)]
+        public IntPtr bstrVal;
+
+        [FieldOffset(8)]
+        public IntPtr punkVal;
+
+        [FieldOffset(8)]
+        public IntPtr pdispVal;
+
+        [FieldOffset(8)]
+        public IntPtr parray;
+
+        [FieldOffset(8)]
+        public unsafe byte* pbVal;
+
+        [FieldOffset(8)]
+        public unsafe short* piVal;
+
+        [FieldOffset(8)]
+        public unsafe int* plVal;
+
+        [FieldOffset(8)]
+        public unsafe long* pllVal;
+
+        [FieldOffset(8)]
+        public unsafe float* pfltVal;
+
+        [FieldOffset(8)]
+        public unsafe double* pdblVal;
+
+        [FieldOffset(8)]
+        public unsafe short* pboolVal;
+
+        [FieldOffset(8)]
+        public unsafe int* pscode;
+
+        //[FieldOffset(8)]
+        //public unsafe CY* pcyVal;
+
+        [FieldOffset(8)]
+        public unsafe double* pdate;
+
+        [FieldOffset(8)]
+        public unsafe ushort** pbstrVal;
+
+        [FieldOffset(8)]
+        public unsafe IntPtr* ppunkVal;
+
+        [FieldOffset(8)]
+        public unsafe IntPtr* ppdispVal;
+
+        [FieldOffset(8)]
+        public unsafe IntPtr* pparray;
+
+        [FieldOffset(8)]
+        public unsafe Variant* pvarVal;
+
+        [FieldOffset(8)]
+        public unsafe void* byref;
+
+        [FieldOffset(8)]
+        public sbyte cVal;
+
+        [FieldOffset(8)]
+        public ushort uiVal;
+
+        [FieldOffset(8)]
+        public uint ulVal;
+
+        [FieldOffset(8)]
+        public ulong ullVal;
+
+        [FieldOffset(8)]
+        public int intVal;
+
+        [FieldOffset(8)]
+        public uint uintVal;
+
+        //[FieldOffset(8)]
+        //public unsafe DECIMAL* pdecVal;
+
+        [FieldOffset(8)]
+        public unsafe sbyte* pcVal;
+
+        [FieldOffset(8)]
+        public unsafe ushort* puiVal;
+
+        [FieldOffset(8)]
+        public unsafe uint* pulVal;
+
+        [FieldOffset(8)]
+        public unsafe ulong* pullVal;
+
+        [FieldOffset(8)]
+        public unsafe int* pintVal;
+
+        [FieldOffset(8)]
+        public unsafe uint* puintVal;
+
+        [FieldOffset(8)]
+        public unsafe void* pvRecord;
+
+        //[FieldOffset(12)]
+        //public unsafe IRecordInfo* pRecInfo;
+
+        //[FieldOffset(0)]
+        //public DECIMAL decVal;
+
+        [DllImport("oleaut32.dll")]
+        public static extern void VariantInit(ref Variant vt);
+
+        public static Variant VariantFromObject(object obj)
+        {
+            Variant vt = new Variant();
+            Type t = obj.GetType();
+            if (t == typeof(int))
+            {
+                vt.vt = (ushort)System.Runtime.InteropServices.VarEnum.VT_I4;
+                vt.lVal = (int)obj;
+            }
+            else if (t == typeof(double))
+            {
+                vt.vt = (ushort)System.Runtime.InteropServices.VarEnum.VT_R8;
+                vt.dblVal = (double)obj;
+            }
+            else if (t == typeof(float))
+            {
+                vt.vt = (ushort)System.Runtime.InteropServices.VarEnum.VT_R4;
+                vt.fltVal = (float)obj;
+            }
+            else if (t == typeof(string))
+            {
+                vt.vt = (ushort)System.Runtime.InteropServices.VarEnum.VT_BSTR;
+                vt.bstrVal = Marshal.StringToBSTR((string)obj);
+            }
+            else
+            {
+                throw new NotImplementedException(string.Format("Unsupported VARIANT type: {0}", (System.Runtime.InteropServices.VarEnum)vt.vt));
+            }
+            return vt;
+        }
+
+        public static object GetValue(Variant vt)
+        {
+            switch ((System.Runtime.InteropServices.VarEnum)vt.vt)
+            {
+                case System.Runtime.InteropServices.VarEnum.VT_I4:
+                    return vt.lVal;
+                case System.Runtime.InteropServices.VarEnum.VT_I2:
+                    return vt.iVal;
+                case System.Runtime.InteropServices.VarEnum.VT_R4:
+                    return vt.fltVal;
+                case System.Runtime.InteropServices.VarEnum.VT_R8:
+                    return vt.dblVal;
+                case System.Runtime.InteropServices.VarEnum.VT_UI2:
+                    return vt.uiVal;
+                case System.Runtime.InteropServices.VarEnum.VT_UI4:
+                    return vt.ulVal;
+                case System.Runtime.InteropServices.VarEnum.VT_BSTR:
+                    return Marshal.PtrToStringBSTR(vt.bstrVal);
+                default:
+                    throw new NotImplementedException(string.Format("Unsupported VARIANT type: {0}", (System.Runtime.InteropServices.VarEnum)vt.vt));
+            }
+            return null;
+        }
+    }
+}
Index: mcs/class/corlib/System/__ComObject.cs
===================================================================
--- mcs/class/corlib/System/__ComObject.cs	(revision 55123)
+++ mcs/class/corlib/System/__ComObject.cs	(working copy)
@@ -32,21 +32,106 @@
 
 namespace System
 {
-	// This is a private class that is used as a generic wrapper class
-	// for COM objects that have no specific wrapper class.
-	//
-	// It has no public methods, it's functionality is exposed trough
-	// System.Runtime.InteropServices.Marshal class and can be casted to
-	// any interface that is implemented by the wrapped COM object.
-	//
-	// This class is referenced in .NET Framework SDK Documentation so
-	// many times that obj.GetType().FullName == "System.__ComObject" and
-	// Type.GetType("System.__ComObject") may be used.
+    using System.Runtime.InteropServices;
+    // This is a private class that is used as a generic wrapper class
+    // for COM objects that have no specific wrapper class.
+    //
+    // It has no public methods, it's functionality is exposed trough
+    // System.Runtime.InteropServices.Marshal class and can be casted to
+    // any interface that is implemented by the wrapped COM object.
+    //
+    // This class is referenced in .NET Framework SDK Documentation so
+    // many times that obj.GetType().FullName == "System.__ComObject" and
+    // Type.GetType("System.__ComObject") may be used.
 
-	internal class __ComObject : MarshalByRefObject
-	{
-		private __ComObject ()
-		{
-		}
-	}
+    internal class __ComObject : MarshalByRefObject
+    {
+        private IntPtr _iunk;
+        private __ComObject()
+        {
+        }
+    }
+
+
+    internal class COMInteropHelpers
+    {
+        [DllImport("ole32.dll", ExactSpelling = true, PreserveSig = false)]
+        static extern void CoCreateInstance(
+           ref Guid rclsid,
+           IntPtr pUnkOuter,
+           uint dwClsContext,
+           ref Guid riid,
+            out IntPtr itf);
+
+        [DllImport("ole32.dll")]
+        static extern int CoInitializeEx(IntPtr pvReserved, COINIT dwCoInit);
+
+        enum COINIT
+        {
+            COINIT_MULTITHREADED = 0x0,
+            COINIT_APARTMENTTHREADED = 0x2
+        }
+
+        static COMInteropHelpers()
+        {
+            CoInitializeEx(IntPtr.Zero, COINIT.COINIT_MULTITHREADED);
+        }
+
+        static IntPtr CreateInstance(object obj)
+        {
+            Type t = obj.GetType();
+            IntPtr itf = IntPtr.Zero;
+            Guid clsid = t.GUID;
+            Guid iid = new Guid("00000000-0000-0000-C000-000000000046"); // IUnknown
+            CoCreateInstance(ref clsid, IntPtr.Zero, 1 | 4 /*CLSCTX_SERVER*/, ref iid, out itf);
+            if (itf == IntPtr.Zero)
+                throw new Exception(string.Format("Could not create COM object for type {0}", t));
+            Console.WriteLine("COMInteropHelpers.CreateInstance before return");
+            return itf;
+        }
+
+        [DllImport("ole32.dll")]
+        static extern int CoMarshalInterThreadInterfaceInStream([In] ref Guid riid,
+           IntPtr pUnk, out IntPtr ppStm);
+
+        static IntPtr MarshalInterface(Type type, IntPtr pUnk)
+        {
+            Console.WriteLine("MarshalInterface");
+            Guid iid = new Guid("00000000-0000-0000-C000-000000000046");
+            if (type != null)
+            {
+                Console.WriteLine("MarshalInterface type = {0}", type);
+                iid = type.GUID;
+                Console.WriteLine("MarshalInterface iid = {0}", iid);
+            }
+            IntPtr pStream;
+            int hr = CoMarshalInterThreadInterfaceInStream(ref iid, pUnk, out pStream);
+            Console.WriteLine("MarshalInterface hr = {0}", hr);
+            Console.WriteLine("MarshalInterface pStream = {0}", pStream);
+            return pStream;
+        }
+
+        [DllImport("ole32.dll")]
+        static extern int CoGetInterfaceAndReleaseStream(IntPtr pStm, [In] ref
+            Guid riid, out IntPtr pUnk);
+
+        static IntPtr UnMarshalInterface(Type type, IntPtr pStream)
+        {
+            Console.WriteLine("UnMarshalInterface");
+            Guid iid = new Guid("00000000-0000-0000-C000-000000000046");
+            if (type != null)
+            {
+                Console.WriteLine("UnMarshalInterface type = {0}", type);
+                iid = type.GUID;
+                Console.WriteLine("UnMarshalInterface iid = {0}", iid);
+            }
+            IntPtr pUnk;
+            int hr = CoGetInterfaceAndReleaseStream(pStream, ref iid, out pUnk);
+            Console.WriteLine("UnMarshalInterface hr = {0}", hr);
+            Console.WriteLine("UnMarshalInterface pUnk = {0}", pUnk);
+            return pUnk;
+        }
+    }
+
+    
 }
Index: mcs/class/corlib/System.Runtime.InteropServices/Marshal.cs
===================================================================
--- mcs/class/corlib/System.Runtime.InteropServices/Marshal.cs	(revision 55123)
+++ mcs/class/corlib/System.Runtime.InteropServices/Marshal.cs	(working copy)
@@ -58,11 +58,19 @@
 		private Marshal () {}
 #endif
 
-		[MonoTODO]
-		public static int AddRef (IntPtr pUnk) {
-			throw new NotImplementedException ();
-		}
+        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
+        private delegate int AddRefDelegate(IntPtr @this);
 
+        public static int AddRef(IntPtr pUnk)
+        {
+            IntPtr vtable = Marshal.ReadIntPtr(pUnk);
+            IntPtr qi = Marshal.ReadIntPtr(vtable);
+            // QueryInterface is 2st method
+            IntPtr pAddRef = (IntPtr)(qi.ToInt64() + IntPtr.Size);
+            AddRefDelegate add_ref = (AddRefDelegate)Marshal.GetDelegateForFunctionPointer(pAddRef, typeof(AddRefDelegate));
+            return add_ref(pUnk);
+        }
+
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		public extern static IntPtr AllocCoTaskMem (int cb);
 
@@ -161,9 +169,11 @@
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		public extern static void DestroyStructure (IntPtr ptr, Type structuretype);
 
-		[MonoTODO]
+        [DllImport("oleaut32.dll")]
+        private extern static void SysFreeString(IntPtr bstr);
+
 		public static void FreeBSTR (IntPtr ptr) {
-			throw new NotImplementedException ();
+            SysFreeString(ptr);
 		}
 
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
@@ -222,9 +232,13 @@
 			throw new NotImplementedException ();
 		}
 
-		[MonoTODO]
-		public static IntPtr GetComInterfaceForObject (object o, Type T) {
-			throw new NotImplementedException ();
+        public static IntPtr GetComInterfaceForObject(object o, Type T)
+        {
+            IntPtr ppv;
+            IntPtr pUnk = Marshal.GetIUnknownForObject(o);
+            Guid iid = T.GUID;
+            Marshal.QueryInterface(pUnk, ref iid, out ppv);
+            return ppv;
 		}
 
 #if NET_2_0
@@ -291,10 +305,8 @@
 			throw new NotImplementedException ();
 		}
 
-		[MonoTODO]
-		public static IntPtr GetIUnknownForObject (object o) {
-			throw new NotImplementedException ();
-		}
+        [MethodImplAttribute(MethodImplOptions.InternalCall)]
+        public extern static IntPtr GetIUnknownForObject(object o);
 
 #if NET_2_0
 		[MonoTODO]
@@ -319,9 +331,12 @@
 			throw new NotImplementedException ();
 		}
 
-		[MonoTODO]
-		public static void GetNativeVariantForObject (object obj, IntPtr pDstNativeVariant) {
-			throw new NotImplementedException ();
+        public static void GetNativeVariantForObject(object obj, IntPtr pDstNativeVariant)
+        {
+            Variant vt = Variant.VariantFromObject(obj);
+
+            Marshal.StructureToPtr(vt, pDstNativeVariant, false);
+			//throw new NotImplementedException ();
 		}
 
 		[MonoTODO]
@@ -329,9 +344,10 @@
 			throw new NotImplementedException ();
 		}
 
-		[MonoTODO]
 		public static object GetObjectForNativeVariant (IntPtr pSrcNativeVariant) {
-			throw new NotImplementedException ();
+            Variant vt = new Variant();
+            Marshal.PtrToStructure(pSrcNativeVariant, vt);
+            return Variant.GetValue(vt);
 		}
 
 		[MonoTODO]
@@ -339,9 +355,12 @@
 			throw new NotImplementedException ();
 		}
 
-		[MonoTODO]
 		public static int GetStartComSlot (Type t) {
-			throw new NotImplementedException ();
+            object [] attrs = t.GetCustomAttributes(typeof(System.Runtime.InteropServices.InterfaceTypeAttribute), false);
+            if (attrs == null || attrs.Length == 0)
+                return 7;
+            else
+                return 3;
 		}
 
 		[MonoTODO]
@@ -408,9 +427,12 @@
 			throw new NotImplementedException ();
 		}
 
-		[MonoTODO]
 		public static bool IsComObject (object o) {
-			throw new NotImplementedException ();
+            object[] attrs = o.GetType().GetCustomAttributes(typeof(ComImportAttribute),  true);
+            if (attrs != null && attrs.Length > 0)
+                return true;
+
+            return false;
 		}
 
 		[MonoTODO]
@@ -450,8 +472,14 @@
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		public extern static string PtrToStringUni (IntPtr ptr, int len);
 
-		[MethodImplAttribute(MethodImplOptions.InternalCall)]
-		public extern static string PtrToStringBSTR (IntPtr ptr);
+
+        [DllImport("oleaut32.dll", CharSet = CharSet.Auto)]
+        private extern static int SysStringLen(IntPtr ptr);
+        //[MethodImplAttribute(MethodImplOptions.InternalCall)]
+        public /*extern*/ static string PtrToStringBSTR(IntPtr ptr)
+        {
+            return PtrToStringUni(ptr, SysStringLen(ptr));
+        }
 		
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		public extern static void PtrToStructure (IntPtr ptr, object structure);
@@ -459,11 +487,18 @@
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		public extern static object PtrToStructure (IntPtr ptr, Type structureType);
 
-		[MonoTODO]
-		public static int QueryInterface (IntPtr pUnk, ref Guid iid, out IntPtr ppv) {
-			throw new NotImplementedException ();
-		}
+        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
+        private delegate int QueryInterfaceDelegate(IntPtr @this, ref Guid iid, out IntPtr ppv);
 
+        public static int QueryInterface(IntPtr pUnk, ref Guid iid, out IntPtr ppv)
+        {
+            IntPtr vtable = Marshal.ReadIntPtr(pUnk);
+            IntPtr qi = Marshal.ReadIntPtr(vtable);
+            // QueryInterface is 1st method
+            QueryInterfaceDelegate query_interface = (QueryInterfaceDelegate)Marshal.GetDelegateForFunctionPointer(qi, typeof(QueryInterfaceDelegate));
+            return query_interface(pUnk, ref iid, out ppv);
+        }
+
 		public static byte ReadByte (IntPtr ptr) {
 			return ReadByte (ptr, 0);
 		}
@@ -559,13 +594,30 @@
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		public extern static IntPtr ReAllocHGlobal (IntPtr pv, IntPtr cb);
 
+        
+
+        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
+        private delegate int ReleaseDelegate(IntPtr @this);
+
 #if NET_2_0
 		[ReliabilityContractAttribute (Consistency.WillNotCorruptState, Cer.Success)]
 #endif
-		[MonoTODO]
-		public static int Release (IntPtr pUnk) {
-			throw new NotImplementedException ();
-		}
+        public static int Release(IntPtr pUnk)
+        {
+            Console.WriteLine("In Marshal.Release pUnk = {0}", pUnk);
+            IntPtr vtable = Marshal.ReadIntPtr(pUnk);
+            Console.WriteLine("In Marshal.Release 1");
+            IntPtr qi = Marshal.ReadIntPtr((IntPtr)(vtable.ToInt64() + 2 * IntPtr.Size));
+            Console.WriteLine("In Marshal.Release 2");
+            // QueryInterface is 3rd method
+            IntPtr pRelease = qi;//(IntPtr)(qi.ToInt64() + 2 * IntPtr.Size);
+            Console.WriteLine("In Marshal.Release 3");
+            ReleaseDelegate release = (ReleaseDelegate)Marshal.GetDelegateForFunctionPointer(pRelease, typeof(ReleaseDelegate));
+            Console.WriteLine("In Marshal.Release 4");
+            int count = release(pUnk);
+            Console.WriteLine("In Marshal.Release 5 count = {0}", count);
+            return count;
+        }
 
 		[MonoTODO]
 		public static int ReleaseComObject (object o) {
@@ -592,9 +644,11 @@
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		public extern static int SizeOf (Type t);
 
-		[MonoTODO]
+        [DllImport("oleaut32.dll", CharSet=CharSet.Auto)]
+        private extern static IntPtr SysAllocStringLen(string pch, uint cch);
+
 		public static IntPtr StringToBSTR (string s) {
-			throw new NotImplementedException ();
+            return SysAllocStringLen(s, (uint)s.Length);
 		}
 
 		public static IntPtr StringToCoTaskMemAnsi (string s) {
@@ -785,11 +839,21 @@
 		public static Exception GetExceptionForHR (int errorCode, IntPtr errorInfo) {
 			throw new NotImplementedException ();
 		}
+#endif
 
-		[MethodImplAttribute(MethodImplOptions.InternalCall)]
-		private static extern Delegate GetDelegateForFunctionPointerInternal (IntPtr ptr, Type t);
 
+        [MethodImplAttribute(MethodImplOptions.InternalCall)]
+        private static extern IntPtr GetFunctionPointerForDelegateInternal(Delegate d);
+
+        [MethodImplAttribute(MethodImplOptions.InternalCall)]
+        private static extern Delegate GetDelegateForFunctionPointerInternal(IntPtr ptr, Type t);
+
+
+#if NET_2_0
 		public static Delegate GetDelegateForFunctionPointer (IntPtr ptr, Type t) {
+#else
+        internal static Delegate GetDelegateForFunctionPointer (IntPtr ptr, Type t) {
+#endif
 			if (!t.IsSubclassOf (typeof (MulticastDelegate)) || (t == typeof (MulticastDelegate)))
 				throw new ArgumentException ("Type is not a delegate", "t");
 			if (ptr == IntPtr.Zero)
@@ -798,15 +862,16 @@
 			return GetDelegateForFunctionPointerInternal (ptr, t);
 		}
 
-		[MethodImplAttribute(MethodImplOptions.InternalCall)]
-		private static extern IntPtr GetFunctionPointerForDelegateInternal (Delegate d);
+#if NET_2_0
+		public static IntPtr GetFunctionPointerForDelegate (Delegate d) {
+#else
+        internal static IntPtr GetFunctionPointerForDelegate (Delegate d) {
+#endif
 		
-		public static IntPtr GetFunctionPointerForDelegate (Delegate d) {
 			if (d == null)
 				throw new ArgumentNullException ("d");
 			
 			return GetFunctionPointerForDelegateInternal (d);
 		}
-#endif
-	}
+    }
 }
Index: mcs/class/corlib/System.Runtime.InteropServices/UnmanagedFunctionPointerAttribute.cs
===================================================================
--- mcs/class/corlib/System.Runtime.InteropServices/UnmanagedFunctionPointerAttribute.cs	(revision 55123)
+++ mcs/class/corlib/System.Runtime.InteropServices/UnmanagedFunctionPointerAttribute.cs	(working copy)
@@ -26,14 +26,18 @@
 // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 //
 
-#if NET_2_0
 
 using System;
 
 namespace System.Runtime.InteropServices {
 
 	[AttributeUsage (AttributeTargets.Delegate, Inherited = false)]
+    
+#if NET_2_0
 	public sealed class UnmanagedFunctionPointerAttribute: Attribute {
+#else
+    internal sealed class UnmanagedFunctionPointerAttribute : Attribute {
+#endif
 		#region Sync with object-internals.h
 		private CallingConvention call_conv;
 		public CharSet CharSet;
@@ -53,5 +57,3 @@
 		}
 	}
 }
-
-#endif
Index: mcs/class/corlib/System.Runtime.Remoting.Proxies/RealProxy.cs
===================================================================
--- mcs/class/corlib/System.Runtime.Remoting.Proxies/RealProxy.cs	(revision 55123)
+++ mcs/class/corlib/System.Runtime.Remoting.Proxies/RealProxy.cs	(working copy)
@@ -58,11 +58,10 @@
 		MarshalByRefObject _server;
 		int _targetDomainId = -1;
 		internal string _targetUri;
-		#endregion
-		
 		internal Identity _objectIdentity;
 		Object _objTP;
-		object _stubData;
+        object _stubData;
+        #endregion
 
 		protected RealProxy ()
 		{
 