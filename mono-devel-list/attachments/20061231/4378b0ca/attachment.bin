Index: ChangeLog
===================================================================
--- ChangeLog	(revision 70266)
+++ ChangeLog	(working copy)
@@ -1,3 +1,12 @@
+2006-12-31  Miguel de Icaza  <miguel@novell.com>
+
+	* monodocer.cs (IsCompilerGenerated): A test for compiler
+	generated types.
+
+	Use it in two places, maybe there are more places needed?    
+
+	My patch did not seem to be necessary.
+
 2006-12-29  Jonathan Pryor  <jonpryor@vt.edu>
 
 	* Makefile.am: Add check-monodocer-ignore_extra_docs-update,
Index: monodocer.cs
===================================================================
--- monodocer.cs	(revision 70266)
+++ monodocer.cs	(working copy)
@@ -4,6 +4,8 @@
 
 using System;
 using System.Collections;
+using System.Runtime.CompilerServices;
+
 #if !NET_1_0
 using System.Collections.Generic;
 #endif
@@ -313,6 +315,26 @@
 		}	
 	}
 
+	//
+	// Returns true if the given type was compiler generated.
+	//
+	// In the 1.0 profile we do not have an attribute to check
+	// for, so we check for the MCS pattern for compiler generated
+	// types.  This is fragile.
+	//
+	public static bool IsCompilerGenerated (Type type)
+	{
+#if NET_1_0
+		string type_name = type.Name;
+		
+		if (type_name.IndexOf ("<>c__") != -1)
+			return true;
+		return false;
+#else
+		object [] attrs = type.GetCustomAttributes (typeof (CompilerGeneratedAttribute), true);
+		return (attrs.Length > 0);
+#endif
+	}
 	
 	public static void DoUpdateNS(string ns, string nspath, string outpath) {
 		Hashtable seenTypes = new Hashtable();
@@ -342,10 +364,14 @@
 		
 		// Stub types not in the directory
 		foreach (Type type in assembly.GetTypes()) {
-			if (type.Namespace == null) continue;
+			if (type.Namespace == null)
+				continue;
 			if (type.Namespace != ns || seenTypes.ContainsKey(type))
 				continue;
 
+			if (IsCompilerGenerated (type))
+				continue;
+			
 			XmlElement td = StubType(type);
 			if (td == null) continue;
 			
@@ -456,6 +482,7 @@
 		foreach (Type type in assembly.GetTypes()) {
 			if (type.Namespace == null) continue;
 			if (!IsPublic (type)) continue;
+			if (IsCompilerGenerated (type)) continue;
 			
 			// Must get the A+B form of the type name.
 			string typename = GetTypeFileName(type);
