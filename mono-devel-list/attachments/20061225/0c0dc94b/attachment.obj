Index: System.Web.UI.WebControls/DataGridPagerStyle.cs
===================================================================
--- System.Web.UI.WebControls/DataGridPagerStyle.cs	(revision 70037)
+++ System.Web.UI.WebControls/DataGridPagerStyle.cs	(working copy)
@@ -270,30 +270,6 @@
 
 			base.Reset ();
 		}
-
-		internal override void LoadViewStateInternal()
-		{
-			if (viewstate["Mode"] != null) {
-				SetBit ((int) DataGridPagerStyles.Mode);
-			}
-			if (viewstate["NextPageText"] != null) {
-				SetBit ((int) DataGridPagerStyles.NextPageText);
-			}
-			if (viewstate["PageButtonCount"] != null) {
-				SetBit ((int) DataGridPagerStyles.PageButtonCount);
-			}
-			if (viewstate["Position"] != null) {
-				SetBit ((int) DataGridPagerStyles.Position);
-			}
-			if (viewstate["PrevPageText"] != null) {
-				SetBit ((int) DataGridPagerStyles.PrevPageText);
-			}
-			if (viewstate["Visible"] != null) {
-				SetBit ((int) DataGridPagerStyles.Visible);
-			}
-
-			base.LoadViewStateInternal();
-		}
 		#endregion	// Public Instance Methods
 	}
 }
Index: System.Web.UI.WebControls/DataList.cs
===================================================================
--- System.Web.UI.WebControls/DataList.cs	(revision 70037)
+++ System.Web.UI.WebControls/DataList.cs	(working copy)
@@ -600,12 +600,12 @@
 		{
 #if NET_2_0
 			// not kept (directly) in the DataList ViewState
-			return new TableStyle ();
+			TableStyle tableStyle = new TableStyle ();
 #else
 			TableStyle tableStyle = new TableStyle (ViewState);
+#endif
 			tableStyle.CellSpacing = 0;
 			return tableStyle;
-#endif
 		}
 
 		protected virtual DataListItem CreateItem (int itemIndex, ListItemType itemType)
@@ -650,11 +650,7 @@
 		protected override void LoadViewState (object savedState)
 		{
 			object[] state = (object[]) savedState;
-#if NET_2_0
-			base.LoadViewState (state [8]);
-#else
 			base.LoadViewState (state [0]);
-#endif
 			if (state [1] != null)
 				ItemStyle.LoadViewState (state [1]);
 			if (state [2] != null)
@@ -669,6 +665,10 @@
 				HeaderStyle.LoadViewState (state [6]);
 			if (state [7] != null)
 				FooterStyle.LoadViewState (state [7]);
+#if NET_2_0
+			if (state [8] != null)
+				ControlStyle.LoadViewState (state [8]);
+#endif
 		}
 
 		protected override bool OnBubbleEvent (object source, EventArgs e)
@@ -904,12 +904,10 @@
 		{
 #if NET_2_0
 			object[] state = new object [9];
-			// FIXME: what's new in slot #0 ?
-			state[8] = base.SaveViewState ();
 #else
 			object[] state = new object [8];
+#endif
 			state[0] = base.SaveViewState ();
-#endif
 			if (itemStyle != null)
 				state [1] = itemStyle.SaveViewState ();
 			if (selectedItemStyle != null)
@@ -924,6 +922,10 @@
 				state [6] = headerStyle.SaveViewState ();
 			if (footerStyle != null)
 				state [7] = footerStyle.SaveViewState ();
+#if NET_2_0
+			if (ControlStyleCreated)
+				state [8] = ControlStyle.SaveViewState ();
+#endif
 			return state;
 		}
 
@@ -944,6 +946,10 @@
 				selectedItemStyle.TrackViewState ();
 			if (separatorStyle != null)
 				separatorStyle.TrackViewState ();
+#if NET_2_0
+			if (ControlStyleCreated)
+				ControlStyle.TrackViewState ();
+#endif
 		}
 
 
Index: System.Web.UI.WebControls/DetailsView.cs
===================================================================
--- System.Web.UI.WebControls/DetailsView.cs	(revision 70037)
+++ System.Web.UI.WebControls/DetailsView.cs	(working copy)
@@ -1018,7 +1018,7 @@
 
 		protected override Style CreateControlStyle ()
 		{
-			TableStyle style = new TableStyle (ViewState);
+			TableStyle style = new TableStyle ();
 			style.GridLines = GridLines.Both;
 			style.CellSpacing = 0;
 			return style;
@@ -1665,11 +1665,13 @@
 				foreach (IStateManager sm in autoFieldProperties)
 					sm.TrackViewState ();
 			}
+			if (ControlStyleCreated)
+				ControlStyle.TrackViewState ();
 		}
 
 		protected override object SaveViewState()
 		{
-			object[] states = new object [12];
+			object[] states = new object [13];
 			states[0] = base.SaveViewState();
 			states[1] = (columns == null ? null : ((IStateManager)columns).SaveViewState());
 			states[2] = (pagerSettings == null ? null : ((IStateManager)pagerSettings).SaveViewState());
@@ -1691,6 +1693,8 @@
 				}
 				if (!allNull) states [11] = data;
 			}
+			if (ControlStyleCreated)
+				states [12] = ControlStyle.SaveViewState ();
 
 			for (int i = states.Length - 1; i >= 0; i--) {
 				if (states [i] != null)
@@ -1732,6 +1736,8 @@
 			if (states[8] != null) ((IStateManager)InsertRowStyle).LoadViewState (states[8]);
 			if (states[9] != null) ((IStateManager)EditRowStyle).LoadViewState (states[9]);
 			if (states[10] != null) ((IStateManager)EmptyDataRowStyle).LoadViewState (states[10]);
+			if (states [12] != null)
+				ControlStyle.LoadViewState (states [12]);
 		}
 		
 		void ICallbackEventHandler.RaiseCallbackEvent (string eventArgs)
Index: System.Web.UI.WebControls/FontInfo.cs
===================================================================
--- System.Web.UI.WebControls/FontInfo.cs	(revision 70037)
+++ System.Web.UI.WebControls/FontInfo.cs	(working copy)
@@ -35,28 +35,16 @@
 	[TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
 	public sealed class FontInfo 
 	{
-		[Flags]
-		internal enum FontStyles 
-		{
-			None		= 0,
-			Bold		= 0x0001,
-			Italic		= 0x0002,
-			Names		= 0x0004,
-			Overline	= 0x0008,
-			Size		= 0x0010,
-			Strikeout	= 0x0020,
-			Underline	= 0x0040
-		}
-
 		#region Fields
 		private static string[]	empty_names = new string[0];
-		private FontStyles	fontstyles;
 		private StateBag	bag;
+		Style _owner;
 		#endregion	// Fields
 
 		#region Constructors
 		internal FontInfo(Style owner) 
 		{
+			_owner = owner;
 			this.bag = owner.ViewState;
 		}
 		#endregion	// Constructors
@@ -73,7 +61,7 @@
 		{
 			get 
 			{
-				if ((fontstyles & FontStyles.Bold) == 0) 
+				if (!_owner.CheckBit((int)Style.Styles.FontBold)) 
 				{
 					return false;
 				}
@@ -83,8 +71,8 @@
 
 			set 
 			{
-				fontstyles |= FontStyles.Bold;
 				bag["Font_Bold"] = value;
+				_owner.SetBit ((int) Style.Styles.FontBold);
 			}
 		}
 
@@ -99,7 +87,7 @@
 		{
 			get 
 			{
-				if ((fontstyles & FontStyles.Italic) == 0) 
+				if (!_owner.CheckBit ((int) Style.Styles.FontItalic))
 				{
 					return false;
 				}
@@ -109,8 +97,8 @@
 
 			set 
 			{
-				fontstyles |= FontStyles.Italic;
 				bag["Font_Italic"] = value;
+				_owner.SetBit ((int) Style.Styles.FontItalic);
 			}
 		}
 
@@ -168,7 +156,7 @@
 			{
 				string[] ret;
 
-				if ((fontstyles & FontStyles.Names) == 0) 
+				if (!_owner.CheckBit ((int) Style.Styles.FontNames)) 
 				{
 					return FontInfo.empty_names;
 				}
@@ -184,12 +172,12 @@
 			set 
 			{
 				if (value == null) {
-					fontstyles &= ~FontStyles.Names;
 					bag.Remove ("Font_Names");
+					_owner.RemoveBit ((int) Style.Styles.FontNames);
 				}
 				else {
-					fontstyles |= FontStyles.Names;
 					bag ["Font_Names"] = value;
+					_owner.SetBit ((int) Style.Styles.FontNames);
 				}
 			}
 		}
@@ -205,7 +193,7 @@
 		{
 			get 
 			{
-				if ((fontstyles & FontStyles.Overline) == 0) 
+				if (!_owner.CheckBit ((int) Style.Styles.FontOverline)) 
 				{
 					return false;
 				}
@@ -215,8 +203,8 @@
 
 			set 
 			{
-				fontstyles |= FontStyles.Overline;
 				bag["Font_Overline"] = value;
+				_owner.SetBit ((int) Style.Styles.FontOverline);
 			}
 		}
 
@@ -233,7 +221,7 @@
 		{
 			get 
 			{
-				if ((fontstyles & FontStyles.Size) == 0) 
+				if (!_owner.CheckBit ((int) Style.Styles.FontSize)) 
 				{
 					return FontUnit.Empty;
 				}
@@ -247,8 +235,8 @@
 				{
 					throw new ArgumentOutOfRangeException("Value", value.Unit.Value, "Font size cannot be negative");
 				}
-				fontstyles |= FontStyles.Size;
 				bag["Font_Size"] = value;
+				_owner.SetBit ((int) Style.Styles.FontSize);
 			}
 		}
 
@@ -263,7 +251,7 @@
 		{
 			get 
 			{
-				if ((fontstyles & FontStyles.Strikeout) == 0) 
+				if (!_owner.CheckBit ((int) Style.Styles.FontStrikeout)) 
 				{
 					return false;
 				}
@@ -273,8 +261,8 @@
 
 			set 
 			{
-				fontstyles |= FontStyles.Strikeout;
 				bag["Font_Strikeout"] = value;
+				_owner.SetBit ((int) Style.Styles.FontStrikeout);
 			}
 		}
 
@@ -289,7 +277,7 @@
 		{
 			get 
 			{
-				if ((fontstyles & FontStyles.Underline) == 0) 
+				if (!_owner.CheckBit ((int) Style.Styles.FontUnderline)) 
 				{
 					return false;
 				}
@@ -299,8 +287,8 @@
 
 			set 
 			{
-				fontstyles |= FontStyles.Underline;
 				bag["Font_Underline"] = value;
+				_owner.SetBit ((int) Style.Styles.FontUnderline);
 			}
 		}
 		#endregion	// Public Instance Properties
@@ -317,40 +305,40 @@
 
 #if NET_2_0
 			// MS stores the property in the bag if it's value is false
-			if ((f.fontstyles & FontStyles.Bold) != 0) {
+			if (f._owner.CheckBit((int) Style.Styles.FontBold)) {
 				this.Bold = f.Bold;
 			}
 
-			if ((f.fontstyles & FontStyles.Italic) != 0) {
+			if (f._owner.CheckBit ((int) Style.Styles.FontItalic)) {
 				this.Italic = f.Italic;
 			}
 
 			// MS seems to have some weird behaviour, even if f's Name has been set to String.Empty we still get an empty array
 			this.Names = f.Names;
 
-			if ((f.fontstyles & FontStyles.Overline) != 0) {
+			if (f._owner.CheckBit ((int) Style.Styles.FontOverline)) {
 				this.Overline = f.Overline;
 			}
 
-			if ((f.fontstyles & FontStyles.Size) != 0) {
+			if (f._owner.CheckBit ((int) Style.Styles.FontSize)) {
 				this.Size = f.Size;
 			}
 
-			if ((f.fontstyles & FontStyles.Strikeout) != 0) {
+			if (f._owner.CheckBit ((int) Style.Styles.FontStrikeout)) {
 				this.Strikeout = f.Strikeout;
 			}
 
-			if ((f.fontstyles & FontStyles.Underline) != 0) {
+			if (f._owner.CheckBit ((int) Style.Styles.FontUnderline)) {
 				this.Underline = f.Underline;
 			}
 #else
 			// MS does not store the property in the bag if it's value is false
-			if (((f.fontstyles & FontStyles.Bold) != 0) && f.Bold) 
+			if ((f._owner.CheckBit ((int) Style.Styles.FontBold)) && f.Bold) 
 			{
 				this.Bold = true;
 			}
 
-			if (((f.fontstyles & FontStyles.Italic) != 0) && f.Italic) 
+			if ((f._owner.CheckBit ((int) Style.Styles.FontItalic)) && f.Italic) 
 			{
 				this.Italic = true;
 			}
@@ -358,22 +346,22 @@
 			// MS seems to have some weird behaviour, even if f's Name has been set to String.Empty we still get an empty array
 			this.Names = f.Names;
 
-			if (((f.fontstyles & FontStyles.Overline) != 0) && f.Overline) 
+			if ((f._owner.CheckBit ((int) Style.Styles.FontOverline)) && f.Overline) 
 			{
 				this.Overline = true;
 			}
 
-			if (((f.fontstyles & FontStyles.Size) != 0) && (f.Size != FontUnit.Empty)) 
+			if ((f._owner.CheckBit ((int) Style.Styles.FontSize)) && (f.Size != FontUnit.Empty)) 
 			{
 				this.Size = f.Size;
 			}
 
-			if (((f.fontstyles & FontStyles.Strikeout) != 0) && f.Strikeout) 
+			if ((f._owner.CheckBit ((int) Style.Styles.FontStrikeout)) && f.Strikeout) 
 			{
 				this.Strikeout = true;
 			}
 
-			if (((f.fontstyles & FontStyles.Underline) != 0) && f.Underline) 
+			if ((f._owner.CheckBit ((int) Style.Styles.FontUnderline)) && f.Underline) 
 			{
 				this.Underline = true;
 			}
@@ -384,65 +372,65 @@
 		{
 			//Methods CopyFrom and MergeWith behave differently between 1.1 and 2.0
 #if NET_2_0
-			if (((fontstyles & FontStyles.Bold) == 0) && ((f.fontstyles & FontStyles.Bold) != 0)) {
+			if (!_owner.CheckBit ((int) Style.Styles.FontBold) && f._owner.CheckBit ((int) Style.Styles.FontBold)) {
 				this.Bold = f.Bold;
 			}
 
-			if (((fontstyles & FontStyles.Italic) == 0) && ((f.fontstyles & FontStyles.Italic) != 0)) {
+			if (!_owner.CheckBit ((int) Style.Styles.FontItalic) && f._owner.CheckBit ((int) Style.Styles.FontItalic)) {
 				this.Italic = f.Italic;
 			}
 
-			if (((fontstyles & FontStyles.Names) == 0) && ((f.fontstyles & FontStyles.Names) != 0)) {
+			if (!_owner.CheckBit ((int) Style.Styles.FontNames) && f._owner.CheckBit ((int) Style.Styles.FontNames)) {
 				this.Names = f.Names;
 			}
 
-			if (((fontstyles & FontStyles.Overline) == 0) && ((f.fontstyles & FontStyles.Overline) != 0)) {
+			if (!_owner.CheckBit ((int) Style.Styles.FontOverline) && f._owner.CheckBit ((int) Style.Styles.FontOverline)) {
 				this.Overline = f.Overline;
 			}
 
-			if (((fontstyles & FontStyles.Size) == 0) && ((f.fontstyles & FontStyles.Size) != 0)) {
+			if (!_owner.CheckBit ((int) Style.Styles.FontSize) && f._owner.CheckBit ((int) Style.Styles.FontSize)) {
 				this.Size = f.Size;
 			}
 
-			if (((fontstyles & FontStyles.Strikeout) == 0) && ((f.fontstyles & FontStyles.Strikeout) != 0)) {
+			if (!_owner.CheckBit ((int) Style.Styles.FontStrikeout) && f._owner.CheckBit ((int) Style.Styles.FontStrikeout)) {
 				this.Strikeout = f.Strikeout;
 			}
 
-			if (((fontstyles & FontStyles.Underline) == 0) && ((f.fontstyles & FontStyles.Underline) != 0)) {
+			if (!_owner.CheckBit ((int) Style.Styles.FontUnderline) && f._owner.CheckBit ((int) Style.Styles.FontUnderline)) {
 				this.Underline = f.Underline;
 			}
 #else
-			if (((fontstyles & FontStyles.Bold) == 0) && ((f.fontstyles & FontStyles.Bold) != 0) && f.Bold) 
+			if (!_owner.CheckBit ((int) Style.Styles.FontBold) && f._owner.CheckBit ((int) Style.Styles.FontBold) && f.Bold) 
 			{
 				this.Bold = true;
 			}
 
-			if (((fontstyles & FontStyles.Italic) == 0) && ((f.fontstyles & FontStyles.Italic) != 0) && f.Italic) 
+			if (!_owner.CheckBit ((int) Style.Styles.FontItalic) && f._owner.CheckBit ((int) Style.Styles.FontItalic) && f.Italic) 
 			{
 				this.Italic = true;
 			}
 
-			if (((fontstyles & FontStyles.Names) == 0) && ((f.fontstyles & FontStyles.Names) != 0)) 
+			if (!_owner.CheckBit ((int) Style.Styles.FontNames) && f._owner.CheckBit ((int) Style.Styles.FontNames)) 
 			{
 				this.Names = f.Names;
 			}
 
-			if (((fontstyles & FontStyles.Overline) == 0) && ((f.fontstyles & FontStyles.Overline) != 0) && f.Overline) 
+			if (!_owner.CheckBit ((int) Style.Styles.FontOverline) && f._owner.CheckBit ((int) Style.Styles.FontOverline) && f.Overline) 
 			{
 				this.Overline = true;
 			}
 
-			if (((fontstyles & FontStyles.Size) == 0) && ((f.fontstyles & FontStyles.Size) != 0) && (f.Size != FontUnit.Empty)) 
+			if (!_owner.CheckBit ((int) Style.Styles.FontSize) && f._owner.CheckBit ((int) Style.Styles.FontSize)) 
 			{
 				this.Size = f.Size;
 			}
 
-			if (((fontstyles & FontStyles.Strikeout) == 0) && ((f.fontstyles & FontStyles.Strikeout) != 0) && f.Strikeout) 
+			if (!_owner.CheckBit ((int) Style.Styles.FontStrikeout) && f._owner.CheckBit ((int) Style.Styles.FontStrikeout)) 
 			{
 				this.Strikeout = true;
 			}
 
-			if (((fontstyles & FontStyles.Underline) == 0) && ((f.fontstyles & FontStyles.Underline) != 0) && f.Underline) 
+			if (!_owner.CheckBit ((int) Style.Styles.FontUnderline) && f._owner.CheckBit ((int) Style.Styles.FontUnderline) && f.Underline) 
 			{
 				this.Underline = true;
 			}
@@ -482,42 +470,9 @@
 			bag.Remove("Font_Size");
 			bag.Remove("Font_Strikeout");
 			bag.Remove("Font_Underline");
-			fontstyles = FontStyles.None;
+			_owner.RemoveBit ((int) Style.Styles.FontAll);
 		}
 
-		internal void LoadViewState() {
-			fontstyles = FontStyles.None;
-
-			if (bag["Font_Bold"] != null)
-			{
-				fontstyles |= FontStyles.Bold;
-			}
-			if (bag["Font_Italic"] != null)
-			{
-				fontstyles |= FontStyles.Italic;
-			}
-			if (bag["Font_Names"] != null)
-			{
-				fontstyles |= FontStyles.Names;
-			}
-			if (bag["Font_Overline"] != null)
-			{
-				fontstyles |= FontStyles.Overline;
-			}
-			if (bag["Font_Size"] != null)
-			{
-				fontstyles |= FontStyles.Size;
-			}
-			if (bag["Font_Strikeout"] != null)
-			{
-				fontstyles |= FontStyles.Strikeout;
-			}
-			if (bag["Font_Underline"] != null)
-			{
-				fontstyles |= FontStyles.Underline;
-			}
-		}
-
 #if NET_2_0
 		internal void FillStyleAttributes (CssStyleCollection attributes, bool alwaysRenderTextDecoration) {
 			if (IsEmpty) {
@@ -533,11 +488,11 @@
 				attributes.Add (HtmlTextWriterStyle.FontFamily, s);
 			}
 
-			if ((fontstyles & FontStyles.Bold) != 0) {
+			if (_owner.CheckBit ((int) Style.Styles.FontBold)) {
 				attributes.Add (HtmlTextWriterStyle.FontWeight, Bold ? "bold" : "normal");
 			}
 
-			if ((fontstyles & FontStyles.Italic) != 0) {
+			if (_owner.CheckBit ((int) Style.Styles.FontItalic)) {
 				attributes.Add (HtmlTextWriterStyle.FontStyle, Italic ? "italic" : "normal");
 			}
 
@@ -549,19 +504,19 @@
 			s = string.Empty;
 			bool hasTextDecoration = false;
 
-			if ((fontstyles & FontStyles.Overline) != 0) {
+			if (_owner.CheckBit ((int) Style.Styles.FontOverline)) {
 				if (Overline)
 					s += "overline ";
 				hasTextDecoration = true;
 			}
 
-			if ((fontstyles & FontStyles.Strikeout) != 0) {
+			if (_owner.CheckBit ((int) Style.Styles.FontStrikeout)) {
 				if (Strikeout)
 					s += "line-through ";
 				hasTextDecoration = true;
 			}
 
-			if ((fontstyles & FontStyles.Underline) != 0) {
+			if (_owner.CheckBit ((int) Style.Styles.FontUnderline)) {
 				if (Underline)
 					s += "underline ";
 				hasTextDecoration = true;
@@ -575,9 +530,9 @@
 		#endregion	// Private Methods
 
 
-		internal bool IsEmpty {
+		bool IsEmpty {
 			get {
-				return fontstyles == FontStyles.None;
+				return !_owner.CheckBit ((int) Style.Styles.FontAll);
 			}
 		}
 	}
Index: System.Web.UI.WebControls/Style.cs
===================================================================
--- System.Web.UI.WebControls/Style.cs	(revision 70037)
+++ System.Web.UI.WebControls/Style.cs	(working copy)
@@ -43,8 +43,10 @@
 	[ToolboxItem("")]
 	public class Style : System.ComponentModel.Component, System.Web.UI.IStateManager 
 	{
+		internal const string BitStateKey = "_!SB";
+
 		[Flags]
-		enum Styles 
+		public enum Styles 
 		{
 			BackColor	= 0x00000008,
 			BorderColor	= 0x00000010,
@@ -55,31 +57,41 @@
 			ForeColor	= 0x00000004,
 			Height		= 0x00000080,
 			Width		= 0x00000100,
+
+			FontAll = 0xFE00,
+			FontBold = 0x800,
+			FontItalic = 0x1000,
+			FontNames = 0x200,
+			FontOverline = 0x4000,
+			FontSize = 0x400,
+			FontStrikeout = 0x8000,
+			FontUnderline = 0x2000
 		}
 
 		#region Fields
 		private int styles;
+		private int stylesTraked;
 		internal StateBag	viewstate;
 		private FontInfo	fontinfo;
 		private bool		tracking;
+		bool _isSharedViewState;
 #if NET_2_0
 		private string		registered_class;
 #endif
 		#endregion	// Fields
 
 		#region Public Constructors
-		public Style() : this(new StateBag()) 
+		public Style()
 		{
+			viewstate = new StateBag ();
 		}
 
 		public Style(System.Web.UI.StateBag bag) 
 		{
-			if (bag != null) {
-				viewstate = bag;
-			} else {
-				viewstate = new StateBag();
-			}
-			tracking = false;
+			viewstate = bag;
+			if (viewstate == null)
+				viewstate = new StateBag ();
+			_isSharedViewState = true;
 		}
 		#endregion	// Public Constructors
 
@@ -336,9 +348,9 @@
 			get 
 			{
 #if NET_2_0
-				return (styles == 0 && (fontinfo == null || fontinfo.IsEmpty) && RegisteredCssClass.Length == 0);
+				return (styles == 0 && RegisteredCssClass.Length == 0);
 #else
-				return (styles == 0 && (fontinfo == null || fontinfo.IsEmpty));
+				return (styles == 0);
 #endif
 			}
 		}
@@ -469,7 +481,7 @@
 					writer.AddStyleAttribute (HtmlTextWriterStyle.Width, u.ToString());
 			}
 
-			if (!Font.IsEmpty) {
+			if (CheckBit ((int) Style.Styles.FontAll)) {
 				// Fonts are a bit weird
 				if (fontinfo.Name != string.Empty) {
 					s = fontinfo.Names[0];
@@ -694,6 +706,8 @@
 				fontinfo.Reset();
 			}
 			styles = 0;
+			viewstate.Remove (BitStateKey);
+			stylesTraked = 0;
 		}
 #if ONLY_1_1
 		public override string ToString() 
@@ -708,65 +722,51 @@
 		{
 			viewstate.LoadViewState(state);
 
-			// Update our style
-			this.styles = 0;
+			LoadBitState ();
+		}
 
-			if (viewstate["BackColor"] != null) 
-			{
-				styles |= (int) Styles.BackColor;
-			}
-			if (viewstate["BorderColor"] != null) 
-			{
-				styles |= (int) Styles.BorderColor;
-			}
-			if (viewstate["BorderStyle"] != null) 
-			{
-				styles |= (int) Styles.BorderStyle;
-			}
-			if (viewstate["BorderWidth"] != null) 
-			{
-				styles |= (int) Styles.BorderWidth;
-			}
-			if (viewstate["CssClass"] != null) 
-			{
-				styles |= (int) Styles.CssClass;
-			}
-			if (viewstate["ForeColor"] != null) 
-			{
-				styles |= (int) Styles.ForeColor;
-			}
-			if (viewstate["Height"] != null) 
-			{
-				styles |= (int) Styles.Height;
-			}
-			if (viewstate["Width"] != null) 
-			{
-				styles |= (int) Styles.Width;
-			}
-			Font.LoadViewState();
+		protected internal virtual object SaveViewState () 
+		{
+			SaveBitState ();
+			
+			if (_isSharedViewState)
+				return null;
 
-			LoadViewStateInternal();
+			return viewstate.SaveViewState ();
+			
 		}
 
-		internal virtual void LoadViewStateInternal()
+		internal void SaveBitState ()
 		{
-			// Override me
+			if (stylesTraked != 0)
+				viewstate [BitStateKey] = stylesTraked;
 		}
 
-		protected internal virtual object SaveViewState () 
-		{
-			if (styles != 0 || !Font.IsEmpty) 
-			{
-				return viewstate.SaveViewState();
-			}
-			return null;
+		internal void LoadBitState () {
+			if (viewstate [BitStateKey] == null)
+				return;
+
+			int bit = (int) viewstate [BitStateKey];
+			styles |= bit;
+			stylesTraked |= bit;
 		}
 
 		protected internal virtual void SetBit( int bit ) 
 		{
 			styles |= bit;
+			if (tracking)
+				stylesTraked |= bit;
 		}
 
+		internal void RemoveBit (int bit) {
+			styles &= ~bit;
+			if (tracking) {
+				stylesTraked &= ~bit;
+				if (stylesTraked == 0)
+					viewstate.Remove (BitStateKey);
+			}
+		}
+
 		internal bool CheckBit (int bit) {
 			return (styles & bit) != 0;
 		}
@@ -837,7 +837,7 @@
 			if (source.CheckBit ((int) Styles.ForeColor)) {
 				ForeColor = source.ForeColor;
 			}
-			if (!source.Font.IsEmpty) {
+			if (source.CheckBit((int) Styles.FontAll)) {
 				Font.CopyFrom (source.Font);
 			}
 		}
@@ -860,6 +860,7 @@
 		{
 			if (viewstate != null)
 				viewstate.SetDirty (true);
+			stylesTraked = styles;
 		}
 #endif
 	}
Index: System.Web.UI.WebControls/TableItemStyle.cs
===================================================================
--- System.Web.UI.WebControls/TableItemStyle.cs	(revision 70037)
+++ System.Web.UI.WebControls/TableItemStyle.cs	(working copy)
@@ -224,20 +224,5 @@
 			// call base at the end because "styles" will reset there
 			base.Reset ();
 		}
-
-		internal override void LoadViewStateInternal()
-		{
-			if (viewstate ["HorizontalAlign"] != null) {
-				SetBit ((int) TableItemStyles.HorizontalAlign);
-			}
-			if (viewstate ["VerticalAlign"] != null) {
-				SetBit ((int) TableItemStyles.VerticalAlign);
-			}
-			if (viewstate["Wrap"] != null) {
-				SetBit ((int) TableItemStyles.Wrap);
-			}
-
-			base.LoadViewStateInternal();
-		}
 	}
 }
Index: System.Web.UI.WebControls/TableStyle.cs
===================================================================
--- System.Web.UI.WebControls/TableStyle.cs	(revision 70037)
+++ System.Web.UI.WebControls/TableStyle.cs	(working copy)
@@ -327,25 +327,5 @@
 		}
 #endif
 
-		internal override void LoadViewStateInternal()
-		{
-			if (viewstate["BackImageUrl"] != null) {
-				SetBit ((int) TableStyles.BackImageUrl);
-			}
-			if (viewstate["CellPadding"] != null) {
-				SetBit ((int) TableStyles.CellPadding);
-			}
-			if (viewstate["CellSpacing"] != null) {
-				SetBit ((int) TableStyles.CellSpacing);
-			}
-			if (viewstate["GridLines"] != null) {
-				SetBit ((int) TableStyles.GridLines);
-			}
-			if (viewstate["HorizontalAlign"] != null) {
-				SetBit ((int) TableStyles.HorizontalAlign);
-			}
-
-			base.LoadViewStateInternal();
-		}
 	}
 }
Index: System.Web.UI.WebControls/TreeNodeStyle.cs
===================================================================
--- System.Web.UI.WebControls/TreeNodeStyle.cs	(revision 70037)
+++ System.Web.UI.WebControls/TreeNodeStyle.cs	(working copy)
@@ -127,27 +127,6 @@
 				SetBit ((int) TreeNodeStyles.NodeSpacing);
 			}
 		}
-
-		internal override void LoadViewStateInternal () {
-			
-			if (viewstate [CHILD_PADD] != null) {
-				SetBit ((int) TreeNodeStyles.ChildNodesPadding);
-			}
-			if (viewstate [HORZ_PADD] != null) {
-				SetBit ((int) TreeNodeStyles.HorizontalPadding);
-			}
-			if (viewstate [IMG_URL] != null) {
-				SetBit ((int) TreeNodeStyles.ImageUrl);
-			}
-			if (viewstate [SPACING] != null) {
-				SetBit ((int) TreeNodeStyles.NodeSpacing);
-			}
-			if (viewstate [VERT_PADD] != null) {
-				SetBit ((int) TreeNodeStyles.VerticalPadding);
-			}
-			
-			base.LoadViewStateInternal ();
-		}
 		
 		public override void CopyFrom (Style s)
 		{
Index: System.Web.UI.WebControls/WebControl.cs
===================================================================
--- System.Web.UI.WebControls/WebControl.cs	(revision 70037)
+++ System.Web.UI.WebControls/WebControl.cs	(working copy)
@@ -516,27 +516,22 @@
 				return;
 			}
 
-			Triplet triplet = (Triplet) savedState;
+			Pair pair = (Pair) savedState;
 
-			base.LoadViewState (triplet.First);
-			
-			if (triplet.Second != null) {
+			base.LoadViewState (pair.First);
+			if (ViewState [System.Web.UI.WebControls.Style.BitStateKey] != null)
+				ControlStyle.LoadBitState ();
+
+			if (pair.Second != null) {
 				if (attribute_state == null) {
 					attribute_state = new StateBag ();
 					if (IsTrackingViewState) 
 						attribute_state.TrackViewState ();
 				}
-				attribute_state.LoadViewState (triplet.Second);
+				attribute_state.LoadViewState (pair.Second);
 				attributes = new AttributeCollection(attribute_state);
 			}
 
-			if (triplet.Third != null) {
-				if (style == null)
-					style = CreateControlStyle ();
-
-				style.LoadViewState (triplet.Third);
-			}
-
 			enabled = ViewState.GetBool("Enabled", true);
 		}
 
@@ -566,20 +561,18 @@
 		{
 			object view_state;
 			object attr_view_state = null;
-			object style_view_state = null;
 
+			if (style != null)
+				style.SaveBitState ();
 			view_state = base.SaveViewState ();
 
 			if (attribute_state != null)
 				attr_view_state = attribute_state.SaveViewState ();
 		
-			if (style != null)
-				style_view_state = style.SaveViewState ();
-			
-			if (view_state == null && attr_view_state == null && style_view_state == null)
+			if (view_state == null && attr_view_state == null)
 				return null;
-			
-			return new Triplet (view_state, attr_view_state, style_view_state);
+
+			return new Pair (view_state, attr_view_state);
 		}
 
 		protected override void TrackViewState() 
Index: System.Web.UI.WebControls/Wizard.cs
===================================================================
--- System.Web.UI.WebControls/Wizard.cs	(revision 70037)
+++ System.Web.UI.WebControls/Wizard.cs	(working copy)
@@ -1245,12 +1245,14 @@
 			if (states[9] != null) ((IStateManager)StartNextButtonStyle).LoadViewState (states[9]);
 			if (states[10] != null) ((IStateManager)StepNextButtonStyle).LoadViewState (states[10]);
 			if (states[11] != null) ((IStateManager)StepPreviousButtonStyle).LoadViewState (states[11]);
-			if (states[12] != null) ((IStateManager)NavigationButtonStyle).LoadViewState (states[12]);
+			if (states[12] != null) ((IStateManager)NavigationButtonStyle).LoadViewState (states[12]);
+			if (states [13] != null)
+				ControlStyle.LoadViewState (states [13]);
 		}
 		
 		protected override object SaveViewState ()
 		{
-			object [] state = new object [13];
+			object [] state = new object [14];
 			state [0] = base.SaveViewState ();
 			
 			if (stepStyle != null) state [1] = ((IStateManager)stepStyle).SaveViewState ();
@@ -1264,8 +1266,10 @@
 			if (startNextButtonStyle != null) state [9] = ((IStateManager)startNextButtonStyle).SaveViewState ();
 			if (stepNextButtonStyle != null) state [10] = ((IStateManager)stepNextButtonStyle).SaveViewState ();
 			if (stepPreviousButtonStyle != null) state [11] = ((IStateManager)stepPreviousButtonStyle).SaveViewState ();
-			if (navigationButtonStyle != null) state [12] = ((IStateManager)navigationButtonStyle).SaveViewState ();
-			
+			if (navigationButtonStyle != null) state [12] = ((IStateManager)navigationButtonStyle).SaveViewState ();
+			if (ControlStyleCreated)
+				state [13] = ControlStyle.SaveViewState ();
+	
 			for (int n=0; n<state.Length; n++)
 				if (state [n] != null) return state;
 			return null;
@@ -1285,7 +1289,9 @@
 			if (startNextButtonStyle != null) ((IStateManager)startNextButtonStyle).TrackViewState();
 			if (stepNextButtonStyle != null) ((IStateManager)stepNextButtonStyle).TrackViewState();
 			if (stepPreviousButtonStyle != null) ((IStateManager)stepPreviousButtonStyle).TrackViewState();
-			if (navigationButtonStyle != null) ((IStateManager)navigationButtonStyle).TrackViewState();
+			if (navigationButtonStyle != null) ((IStateManager)navigationButtonStyle).TrackViewState();
+			if (ControlStyleCreated)
+				ControlStyle.TrackViewState ();
 		}
 		
 		protected internal void RegisterCommandEvents (IButtonControl button)
Index: Test/System.Web.UI.WebControls/StyleTest.cs
===================================================================
--- Test/System.Web.UI.WebControls/StyleTest.cs	(revision 70037)
+++ Test/System.Web.UI.WebControls/StyleTest.cs	(working copy)
@@ -222,8 +222,43 @@
 			Assert.AreEqual (s.Width, Unit.Empty, "Default8");
 		}
 
+		[Test]
+		public void Style_ViewState () {
+			Style s = new Style ();
+			((IStateManager) s).TrackViewState ();
+			SetSomeValues (s);
+			object state = ((IStateManager) s).SaveViewState ();
 
+			Style copy = new Style ();
+			((IStateManager) copy).LoadViewState (state);
+
+			Assert.AreEqual (Color.Red, copy.BackColor, "ViewState1");
+			Assert.AreEqual (Color.Green, copy.ForeColor, "ViewState2");
+			Assert.AreEqual (new Unit (10), copy.Width, "ViewState3");
+			Assert.AreEqual (true, copy.Font.Bold, "ViewState4");
+		}
+
 		[Test]
+		public void Style_ViewState2 () {
+			Style s = new Style (null);
+			((IStateManager) s).TrackViewState ();
+			SetSomeValues (s);
+			object state = ((IStateManager) s).SaveViewState ();
+
+			Assert.AreEqual (null, state, "ViewState2");
+		}
+
+		[Test]
+		public void Style_ViewState3 () {
+			Style s = new Style (new StateBag());
+			((IStateManager) s).TrackViewState ();
+			SetSomeValues (s);
+			object state = ((IStateManager) s).SaveViewState ();
+
+			Assert.AreEqual (null, state, "ViewState3");
+		}
+
+		[Test]
 		public void Style_State () {
 			string[]	keyvalues;
 			string[]	expect1 = {
@@ -647,6 +682,41 @@
 			s.Width = 1;
 			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : Width");
 			Assert.AreEqual (0x100, s.SetBitCalledValue, "SetBit() was called with wrong argument : Width");
+			
+			s.SetBitCalledFlag = false;
+			s.Font.Bold = true;
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : Font.Bold");
+			Assert.AreEqual (0x800, s.SetBitCalledValue, "SetBit() was called with wrong argument : Font.Bold");
+
+			s.SetBitCalledFlag = false;
+			s.Font.Italic = true;
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : Font.Italic");
+			Assert.AreEqual (0x1000, s.SetBitCalledValue, "SetBit() was called with wrong argument : Font.Italic");
+
+			s.SetBitCalledFlag = false;
+			s.Font.Overline = true;
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : Font.Overline");
+			Assert.AreEqual (0x4000, s.SetBitCalledValue, "SetBit() was called with wrong argument : Font.Overline");
+
+			s.SetBitCalledFlag = false;
+			s.Font.Underline = true;
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : Font.Underline");
+			Assert.AreEqual (0x2000, s.SetBitCalledValue, "SetBit() was called with wrong argument : Font.Underline");
+
+			s.SetBitCalledFlag = false;
+			s.Font.Strikeout = true;
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : Font.Strikeout");
+			Assert.AreEqual (0x8000, s.SetBitCalledValue, "SetBit() was called with wrong argument : Font.Strikeout");
+
+			s.SetBitCalledFlag = false;
+			s.Font.Names = new string [] { "Arial" };
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : Font.Names");
+			Assert.AreEqual (0x200, s.SetBitCalledValue, "SetBit() was called with wrong argument : Font.Strikeout");
+
+			s.SetBitCalledFlag = false;
+			s.Font.Size = new FontUnit (10);
+			Assert.IsTrue (s.SetBitCalledFlag, "SetBit() was not called : Font.Size");
+			Assert.AreEqual (0x400, s.SetBitCalledValue, "SetBit() was called with wrong argument : Font.Size");
 		}
 
 		public void Render ()
Index: Test/System.Web.UI.WebControls/WebControlTest.cs
===================================================================
--- Test/System.Web.UI.WebControls/WebControlTest.cs	(revision 70037)
+++ Test/System.Web.UI.WebControls/WebControlTest.cs	(working copy)
@@ -78,6 +78,43 @@
 			return matches == a1.Length;
 		}
 
+		public class CustomControl : WebControl
+		{
+			public virtual string CustomProperty {
+				get {
+					return (string) ViewState ["CustomProperty"];
+				}
+				set {
+					ViewState ["CustomProperty"] = value;
+				}
+			}
+
+			protected override Style CreateControlStyle () {
+				return new Style ();
+			}
+
+			public void DoTrackViewState () {
+				TrackViewState ();
+			}
+
+			public object DoSaveViewState () {
+				return SaveViewState ();
+			}
+
+			public void DoLoadViewState (object state) {
+				LoadViewState (state);
+			}
+		}
+		
+		public class CustomControl2 : CustomControl
+		{
+			protected override Style CreateControlStyle () {
+				Style style = new Style (ViewState);
+				style.BackColor = Color.Blue;
+				return style;
+			}
+		}
+
 		public class NamingContainer : WebControl, INamingContainer {
 
 		}
@@ -456,6 +493,42 @@
 		}
 
 		[Test]
+		public void ViewState2 () {
+			CustomControl c = new CustomControl ();
+			CustomControl copy = new CustomControl ();
+			object state;
+
+			c.DoTrackViewState ();
+			c.CustomProperty = "CustomProperty";
+			c.ControlStyle.BackColor = Color.Red;
+			c.ControlStyle.BorderColor = Color.Green;
+			c.ControlStyle.BorderStyle = BorderStyle.Dotted;
+
+			state = c.DoSaveViewState ();
+
+			copy.DoLoadViewState (state);
+
+			Assert.IsFalse (copy.ControlStyleCreated, "copy.ControlStyleCreated");
+		}
+		
+		[Test]
+		public void ViewState3 () {
+			CustomControl2 c = new CustomControl2 ();
+			CustomControl2 copy = new CustomControl2 ();
+			object state;
+
+			c.DoTrackViewState ();
+			c.ControlStyle.BackColor = Color.Red;
+
+			state = c.DoSaveViewState ();
+
+			copy.DoLoadViewState (state);
+
+			Assert.AreEqual (Color.Blue, copy.ControlStyle.BackColor, "copy.BackColor");
+
+		}
+
+		[Test]
 		public void RenderBeginTag_TagOnly ()
 		{
 			HtmlTextWriter writer = WebControlTest.GetWriter ();
