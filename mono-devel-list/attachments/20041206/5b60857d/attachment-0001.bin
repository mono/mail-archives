Index: ChangeLog
===================================================================
--- ChangeLog	(revision 37142)
+++ ChangeLog	(working copy)
@@ -1,3 +1,11 @@
+2004-12-06 Kamil Skalski <nazgul@nemerle.org>
+        * main.c: Change 'special-name' to 'specialname'
+	* dis-cil.c: Output floats as hex numbers instead of 'nan', etc.
+	* get.c: Output numbers as hexadecimals. Consolidate names of
+	  special tokens to match ilasm input. Escape some names.
+	  Add more excapes, like 'xor'.
+	
+
 2004-12-02  Miguel de Icaza  <miguel@ximian.com>
 
 	* main.c: Rename compilercontrolled to privatescope
Index: get.c
===================================================================
--- get.c	(revision 37142)
+++ get.c	(working copy)
@@ -449,7 +449,7 @@
 	{ MONO_TYPE_R4         , "float32" },
 	{ MONO_TYPE_R8         , "float64" },
 	{ MONO_TYPE_STRING     , "string" },
-	{ MONO_TYPE_TYPEDBYREF , "TypedByRef" },
+	{ MONO_TYPE_TYPEDBYREF , "typedref" },
 	{ MONO_TYPE_I          , "native int" },
 	{ MONO_TYPE_U          , "native unsigned int" },
 	{ MONO_TYPE_OBJECT     , "object" },
@@ -1052,7 +1052,7 @@
 	}
 
 	if (*ptr == MONO_TYPE_TYPEDBYREF){
-		g_string_append (str, "typedbyref");
+		g_string_append (str, "typedref");
 		ptr++;
 	} else if (*ptr == MONO_TYPE_VOID){
 		 g_string_append (str, "void");
@@ -1098,7 +1098,7 @@
 	}
 	
 	if (*ptr == MONO_TYPE_TYPEDBYREF){
-		g_string_append (str, " typedbyref ");
+		g_string_append (str, " typedref ");
 		ptr++;
 	} else {
 		gboolean by_ref = 0;
@@ -1182,7 +1182,8 @@
 	{ FIELD_ATTRIBUTE_SPECIAL_NAME,        "specialname " },
 	{ FIELD_ATTRIBUTE_PINVOKE_IMPL,        "FIXME:pinvokeimpl " },
 	{ FIELD_ATTRIBUTE_RT_SPECIAL_NAME,        "rtspecialname " },
-	{ FIELD_ATTRIBUTE_HAS_FIELD_MARSHAL,        "hasfieldmarshal " },
+        /// FIXME: .NET ildasm generates different things in (..)
+	{ FIELD_ATTRIBUTE_HAS_FIELD_MARSHAL,        "marshal (interface) " },
 	{ 0, NULL }
 };
 
@@ -1303,9 +1304,11 @@
                         idx - 1, cols, MONO_MEMBERREF_SIZE);
 
         sig = get_field_signature (m, cols [MONO_MEMBERREF_SIGNATURE]);
+        char* escname = get_escaped_name (mono_metadata_string_heap (m, cols [MONO_MEMBERREF_NAME]));
+        
         full_sig = g_strdup_printf ("%s %s::%s", sig,
                         get_memberref_parent (m, cols [MONO_MEMBERREF_CLASS]),
-                        mono_metadata_string_heap (m, cols [MONO_MEMBERREF_NAME]));
+                        escname);
         g_free (sig);
         
         return full_sig;
@@ -1657,34 +1660,29 @@
 		
 	case MONO_TYPE_U2:
 	case MONO_TYPE_I2:
-		return g_strdup_printf ("int16(0x%08x)", (int) read16 (ptr));
+		return g_strdup_printf ("int16(0x%04x)", (int) read16 (ptr));
 		
 	case MONO_TYPE_U4:
 	case MONO_TYPE_I4:
-		return g_strdup_printf ("int32(%d)", read32 (ptr));
+		return g_strdup_printf ("int32(0x%08x)", read32 (ptr));
 		
-	case MONO_TYPE_I8: {
+	case MONO_TYPE_I8: 
+        case MONO_TYPE_U8: {
 		guint32 low, high;
 		low = read32 (ptr);
 		high = read32 (ptr + 4);
 		return g_strdup_printf ("int64(0x%08x%08x)", high, low);
 	}
-	case MONO_TYPE_U8: {
+	case MONO_TYPE_R4: {
+		guint32 low = read32 (ptr);
+		return g_strdup_printf ("float32(0x%08x)", low);
+	}
+	case MONO_TYPE_R8: {
 		guint32 low, high;
 		low = read32 (ptr);
 		high = read32 (ptr + 4);
-		return g_strdup_printf ("0x%08x%08x", high, low);
+		return g_strdup_printf ("float64(0x%08x%08x)", high, low);
 	}
-	case MONO_TYPE_R4: {
-		float r;
-		readr4 (ptr, &r);
-		return g_strdup_printf ("float32(%g)", (double) r);
-	}
-	case MONO_TYPE_R8: {
-		double r;
-		readr8 (ptr, &r);
-		return g_strdup_printf ("float64(%g)", r);
-	}
 	case MONO_TYPE_STRING: {
 		gchar *str;
 		int i, j, tspaces = (len%16);
@@ -2320,6 +2318,7 @@
 	g_hash_table_insert (key_table, (char *) "privatescope", GINT_TO_POINTER (TRUE));
 	g_hash_table_insert (key_table, (char *) "protected", GINT_TO_POINTER (TRUE));
 	g_hash_table_insert (key_table, (char *) "public", GINT_TO_POINTER (TRUE));
+	g_hash_table_insert (key_table, (char *) "publickey", GINT_TO_POINTER (TRUE));
 	g_hash_table_insert (key_table, (char *) "readonly", GINT_TO_POINTER (TRUE));
 	g_hash_table_insert (key_table, (char *) "record", GINT_TO_POINTER (TRUE));
 	g_hash_table_insert (key_table, (char *) "refany", GINT_TO_POINTER (TRUE));
@@ -2397,6 +2396,7 @@
 	g_hash_table_insert (key_table, (char *) "wchar", GINT_TO_POINTER (TRUE));
 	g_hash_table_insert (key_table, (char *) "winapi", GINT_TO_POINTER (TRUE));
 	g_hash_table_insert (key_table, (char *) "with", GINT_TO_POINTER (TRUE));
+	g_hash_table_insert (key_table, (char *) "xor", GINT_TO_POINTER (TRUE));
 }
 
 guint32
Index: dis-cil.c
===================================================================
--- dis-cil.c	(revision 37142)
+++ dis-cil.c	(working copy)
@@ -181,9 +181,9 @@
 			break;
 			
 		case MonoInlineR: {
-			double r;
-			readr8 (ptr, &r);
-			fprintf (output, "%g", r);
+			gint64 top = read64 (ptr);
+
+			fprintf (output, "0x%llx", (long long) top);
 			ptr += 8;
 			break;
 		}
@@ -275,10 +275,9 @@
 		}
 
 		case MonoShortInlineR: {
-			float f;
-			readr4 (ptr, &f);
+			int value = read32 (ptr);
 
-			fprintf (output, "%g", (double) f);
+			fprintf (output, "0x%08x", value);
 			ptr += 4;
 			break;
 		}
Index: main.c
===================================================================
--- main.c	(revision 37142)
+++ main.c	(working copy)
@@ -331,7 +331,7 @@
 	if (flags & TYPE_ATTRIBUTE_SEALED)
 		strcat (buffer, "sealed ");
 	if (flags & TYPE_ATTRIBUTE_SPECIAL_NAME)
-		strcat (buffer, "special-name ");
+		strcat (buffer, "specialname ");
 	if (flags & TYPE_ATTRIBUTE_IMPORT)
 		strcat (buffer, "import ");
 	if (flags & TYPE_ATTRIBUTE_SERIALIZABLE)
