Index: codegen/GlobalMethodRef.cs
===================================================================
--- codegen/GlobalMethodRef.cs	(revision 37142)
+++ codegen/GlobalMethodRef.cs	(working copy)
@@ -48,7 +48,7 @@
 			if (is_resolved)
 				return;
 
-                        string sig = MethodDef.CreateSignature (name, param);
+                        string sig = MethodDef.CreateSignature (name, param, ret_type);
 
                         if ((call_conv & PEAPI.CallConv.Vararg) == 0) {
                                 peapi_method = code_gen.ResolveMethod (sig);
Index: codegen/MethodRef.cs
===================================================================
--- codegen/MethodRef.cs	(revision 37142)
+++ codegen/MethodRef.cs	(working copy)
@@ -60,7 +60,7 @@
                         string sig;
 
                         if ((call_conv & PEAPI.CallConv.Vararg) == 0) {
-                                sig = MethodDef.CreateSignature (name, param);
+                          sig = MethodDef.CreateSignature (name, param, ret_type);
                                 peapi_method = owner_def.ResolveMethod (sig, code_gen);
                         } else {
                                 sig = MethodDef.CreateVarargSignature (name, param);
Index: codegen/CatchBlock.cs
===================================================================
--- codegen/CatchBlock.cs	(revision 37142)
+++ codegen/CatchBlock.cs	(working copy)
@@ -15,12 +15,12 @@
 
         public class CatchBlock : ISehClause {
 
-                private IClassRef class_ref;
+                private ITypeRef type_ref;
                 private HandlerBlock handler_block;
 
-                public CatchBlock (IClassRef class_ref)
+                public CatchBlock (ITypeRef type_ref)
                 {
-                        this.class_ref = class_ref;
+                        this.type_ref = type_ref;
                 }
 
                 public void SetHandlerBlock (HandlerBlock hb)
@@ -34,9 +34,9 @@
                         PEAPI.CILLabel to = handler_block.GetToLabel (code_gen, method);
                         PEAPI.Catch katch;
 
-                        class_ref.Resolve (code_gen);
+                        type_ref.Resolve (code_gen);
 
-                        katch = new PEAPI.Catch (class_ref.PeapiClass, from, to);
+                        katch = new PEAPI.Catch (type_ref.PeapiType as PEAPI.Class, from, to);
 
                         return katch;
                 }
Index: codegen/MethodDef.cs
===================================================================
--- codegen/MethodDef.cs	(revision 37142)
+++ codegen/MethodDef.cs	(working copy)
@@ -537,10 +537,10 @@
                         if (IsVararg)
                                 signature = CreateVarargSignature (name, param_list);
                         else
-                                signature = CreateSignature (name, param_list);
+                                signature = CreateSignature (name, param_list, ret_type);
                 }
 
-                public static string CreateSignature (string name, IList param_list)
+                public static string CreateSignature (string name, IList param_list, ITypeRef ret_type)
                 {
                         StringBuilder builder = new StringBuilder ();
 
@@ -558,6 +558,9 @@
                         }
                         builder.Append (')');
 
+                        if (name.StartsWith ("op_"))
+                                builder.Append (ret_type.FullName);
+
                         return builder.ToString ();
                 }
 
@@ -625,7 +628,7 @@
                         return builder.ToString ();
                 }
 
-                public static string CreateSignature (string name, ITypeRef[] param_list)
+                public static string CreateSignature (string name, ITypeRef[] param_list, ITypeRef ret_type)
                 {
                         StringBuilder builder = new StringBuilder ();
 
@@ -645,6 +648,9 @@
                         }
                         builder.Append (')');
 
+                        if (name.StartsWith ("op_"))
+                                builder.Append (ret_type.FullName);
+
                         return builder.ToString ();
                 }
 
Index: codegen/ExternTypeRef.cs
===================================================================
--- codegen/ExternTypeRef.cs	(revision 37142)
+++ codegen/ExternTypeRef.cs	(working copy)
@@ -100,7 +100,7 @@
                 public IMethodRef GetMethodRef (ITypeRef ret_type, PEAPI.CallConv call_conv,
                                 string name, ITypeRef[] param)
                 {
-                        string sig = MethodDef.CreateSignature (name, param);
+                  string sig = MethodDef.CreateSignature (name, param, ret_type);
                         ExternMethodRef mr = method_table [sig] as ExternMethodRef;
                         
                         if (mr == null) {
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 37142)
+++ ChangeLog	(working copy)
@@ -1,3 +1,14 @@
+2004-12-06 Kamil Skalski <nazgul@nemerle.org>
+	* GlobalMethodRef.cs, MethodRef.cs, MethodDef.cs,
+	* ExternTypeRef.cs, ILParser.jay -- pass return type 
+	  for generating method signature to disambiguate return type
+  	  overloading in op_* operator definitions
+	* CatchBlock.cs -- use ITypeRef to allow catching nonexternal
+	  types (for ilasming mscorlib)
+	* ILParser.jay -- parse numeric literals as hexadecimal numbers
+	  instead of their native represenations (like nan or -234)
+
+
 2004-12-02  Miguel de Icaza  <miguel@ximian.com>
 
 	* CodeGen.cs: Correctly compute the name of a nested class,
Index: parser/ILParser.jay
===================================================================
--- parser/ILParser.jay	(revision 37142)
+++ parser/ILParser.jay	(working copy)
@@ -365,8 +365,8 @@
 %token K_NOMETADATA
 %token K_ALGORITHM
 %token K_FULLORIGIN
-// %token K_NAN
-// %token K_INF
+%token K_NAN
+%token K_INF
 %token K_PUBLICKEY
 %token K_ENABLEJITTRACKING
 %token K_DISABLEJITOPTIMIZER
@@ -686,11 +686,13 @@
                                 else
                                         param_list = new ITypeRef[0];
 
-                                decl = owner.GetMethodRef ((ITypeRef) $7,
+                                ITypeRef ret_type = (ITypeRef) $7;
+
+                                decl = owner.GetMethodRef (ret_type,
                                         (CallConv) $6, (string) $4, param_list);
 
                                 string sig = MethodDef.CreateSignature ((string) $10,
-                                                                        param_list);
+                                                                        param_list, ret_type);
                                 codegen.CurrentTypeDef.AddOverride (sig, decl);                                        
                           }
 			  OPEN_PARENS sig_args CLOSE_PARENS
@@ -1146,7 +1148,7 @@
                                 codegen.AddFieldDef (field_def);
                                 
                                 if ($2 != null) {
-                                        field_def.SetOffset ((uint) $2);
+                                        field_def.SetOffset (Convert.ToUInt32 ($2));
                                 }
 
                                 if ($6 != null) {
@@ -1264,11 +1266,11 @@
                           }
 			| K_INT32 OPEN_PARENS int64 CLOSE_PARENS
                           {
-                                $$ = new IntConst (Convert.ToInt32 ($3));
+                                $$ = new IntConst (Convert.ToUInt32 ($3));
                           }
 			| K_INT16 OPEN_PARENS int64 CLOSE_PARENS
                           {
-                                $$ = new IntConst (Convert.ToInt16 ($3));
+                                $$ = new IntConst (Convert.ToUInt16 ($3));
                           }
 			| K_CHAR OPEN_PARENS int64 CLOSE_PARENS
                           {
@@ -1847,7 +1849,7 @@
 
 seh_clause		: K_CATCH class_ref handler_block
                           {
-                                IClassRef type = (IClassRef) $2;
+                                ITypeRef type = (ITypeRef) $2;
                                 CatchBlock cb = new CatchBlock (type);
                                 cb.SetHandlerBlock ((HandlerBlock) $3);
                                 $$ = cb;
