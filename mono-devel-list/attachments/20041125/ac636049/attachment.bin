Index: mono/metadata/reflection.h
===================================================================
--- mono/metadata/reflection.h	(revision 36573)
+++ mono/metadata/reflection.h	(working copy)
@@ -76,5 +76,32 @@
 MonoCustomAttrInfo* mono_custom_attrs_from_param    (MonoMethod *method, guint32 param);
 void                mono_custom_attrs_free          (MonoCustomAttrInfo *ainfo);
 
+
+#define MONO_DECLSEC_ACTION_MIN		0x1
+#define MONO_DECLSEC_ACTION_MAX		0x12
+
+#define MONO_DECLSEC_FLAG_REQUEST			0x00000001
+#define MONO_DECLSEC_FLAG_DEMAND			0x00000002
+#define MONO_DECLSEC_FLAG_ASSERT			0x00000004
+#define MONO_DECLSEC_FLAG_DENY				0x00000008
+#define MONO_DECLSEC_FLAG_PERMITONLY			0x00000010
+#define MONO_DECLSEC_FLAG_LINKDEMAND			0x00000020
+#define MONO_DECLSEC_FLAG_INHERITANCEDEMAND		0x00000040
+#define MONO_DECLSEC_FLAG_REQUEST_MINIMUM		0x00000080
+#define MONO_DECLSEC_FLAG_REQUEST_OPTIONAL		0x00000100
+#define MONO_DECLSEC_FLAG_REQUEST_REFUSE		0x00000200
+#define MONO_DECLSEC_FLAG_PREJIT_GRANT			0x00000400
+#define MONO_DECLSEC_FLAG_PREJIT_DENY			0x00000800
+#define MONO_DECLSEC_FLAG_NONCAS_DEMAND			0x00001000
+#define MONO_DECLSEC_FLAG_NONCAS_LINKDEMAND		0x00002000
+#define MONO_DECLSEC_FLAG_NONCAS_INHERITANCEDEMAND	0x00004000
+#define MONO_DECLSEC_FLAG_LINKDEMAND_CHOICE		0x00008000
+#define MONO_DECLSEC_FLAG_INHERITANCEDEMAND_CHOICE	0x00010000
+#define MONO_DECLSEC_FLAG_DEMAND_CHOICE			0x00020000
+
+guint32 mono_declsec_flags_from_method (MonoMethod *method);
+guint32 mono_declsec_flags_from_class (MonoClass *klass);
+guint32 mono_declsec_flags_from_assembly (MonoAssembly *assembly);
+
 #endif /* __METADATA_REFLECTION_H__ */
 
Index: mono/metadata/metadata.c
===================================================================
--- mono/metadata/metadata.c	(revision 36573)
+++ mono/metadata/metadata.c	(working copy)
@@ -2158,6 +2158,26 @@
 		return 1;
 }
 
+static int
+declsec_locator (const void *a, const void *b)
+{
+	locator_t *loc = (locator_t *) a;
+	const char *bb = (const char *) b;
+	guint32 table_index = (bb - loc->t->base) / loc->t->row_size;
+	guint32 col;
+
+	col = mono_metadata_decode_row_col (loc->t, table_index, loc->col_idx);
+
+	if (loc->idx == col) {
+		loc->result = table_index;
+		return 0;
+	}
+	if (loc->idx < col)
+		return -1;
+	else
+		return 1;
+}
+
 /*
  * mono_metadata_typedef_from_field:
  * @meta: metadata context
@@ -2409,6 +2429,38 @@
 	return loc.result + 1;
 }
 
+/*
+ * mono_metadata_declsec_from_index:
+ * @meta: metadata context
+ * @index: token representing the parent
+ * 
+ * Returns: the 0-based index into the DeclarativeSecurity table of the first 
+ * attribute which belongs to the metadata object described by @index.
+ * Returns -1 if no such attribute is found.
+ */
+guint32
+mono_metadata_declsec_from_index (MonoImage *meta, guint32 index)
+{
+	MonoTableInfo *tdef = &meta->tables [MONO_TABLE_DECLSECURITY];
+	locator_t loc;
+
+	if (!tdef->base)
+		return -1;
+
+	loc.idx = index;
+	loc.col_idx = MONO_DECL_SECURITY_PARENT;
+	loc.t = tdef;
+
+	if (!bsearch (&loc, tdef->base, tdef->rows, tdef->row_size, declsec_locator))
+		return -1;
+
+	/* Find the first entry by searching backwards */
+	while ((loc.result > 0) && (mono_metadata_decode_row_col (tdef, loc.result - 1, MONO_DECL_SECURITY_PARENT) == index))
+		loc.result --;
+
+	return loc.result;
+}
+
 #ifdef DEBUG
 static void
 mono_backtrace (int limit)
Index: mono/metadata/class-internals.h
===================================================================
--- mono/metadata/class-internals.h	(revision 36573)
+++ mono/metadata/class-internals.h	(working copy)
@@ -211,6 +211,7 @@
 	guint delegate        : 1; /* class is a Delegate */
 	guint gc_descr_inited : 1; /* gc_descr is initialized */
 	guint dummy           : 1; /* temporary hack */
+	guint32 declsec_flags;     /* declarative security attributes flags */
 
 	MonoClass  *parent;
 	MonoClass  *nested_in;
Index: mono/metadata/domain-internals.h
===================================================================
--- mono/metadata/domain-internals.h	(revision 36573)
+++ mono/metadata/domain-internals.h	(working copy)
@@ -53,6 +53,13 @@
 	signed      exvar_offset;
 	/* Whenever the code is domain neutral or 'shared' */
 	gboolean    domain_neutral:1;
+	gboolean    cas_inited:1;
+	gboolean    cas_class_assert:1;
+	gboolean    cas_class_deny:1;
+	gboolean    cas_class_permitonly:1;
+	gboolean    cas_method_assert:1;
+	gboolean    cas_method_deny:1;
+	gboolean    cas_method_permitonly:1;
 	MonoJitExceptionInfo *clauses;
 };
 
Index: mono/metadata/reflection.c
===================================================================
--- mono/metadata/reflection.c	(revision 36573)
+++ mono/metadata/reflection.c	(working copy)
@@ -8735,3 +8735,119 @@
 	return result;
 }
 
+
+/* SECURITY_ACTION_* are defined in mono/metadata/tabledefs.h */
+static guint32 declsec_flags_map[] = {
+	0x00000000,					/* empty */
+	MONO_DECLSEC_FLAG_REQUEST,			/* SECURITY_ACTION_REQUEST			(x01) */
+	MONO_DECLSEC_FLAG_DEMAND,			/* SECURITY_ACTION_DEMAND			(x02) */
+	MONO_DECLSEC_FLAG_ASSERT,			/* SECURITY_ACTION_ASSERT			(x03) */
+	MONO_DECLSEC_FLAG_DENY,				/* SECURITY_ACTION_DENY				(x04) */
+	MONO_DECLSEC_FLAG_PERMITONLY,			/* SECURITY_ACTION_PERMITONLY			(x05) */
+	MONO_DECLSEC_FLAG_LINKDEMAND,			/* SECURITY_ACTION_LINKDEMAND			(x06) */
+	MONO_DECLSEC_FLAG_INHERITANCEDEMAND,		/* SECURITY_ACTION_INHERITANCEDEMAND		(x07) */
+	MONO_DECLSEC_FLAG_REQUEST_MINIMUM,		/* SECURITY_ACTION_REQUEST_MINIMUM		(x08) */
+	MONO_DECLSEC_FLAG_REQUEST_OPTIONAL,		/* SECURITY_ACTION_REQUEST_OPTIONAL		(x09) */
+	MONO_DECLSEC_FLAG_REQUEST_REFUSE,		/* SECURITY_ACTION_REQUEST_REFUSE		(x0A) */
+	MONO_DECLSEC_FLAG_PREJIT_GRANT,			/* SECURITY_ACTION_PREJIT_GRANT			(x0B) */
+	MONO_DECLSEC_FLAG_PREJIT_DENY,			/* SECURITY_ACTION_PREJIT_DENY			(x0C) */
+	MONO_DECLSEC_FLAG_NONCAS_DEMAND,		/* SECURITY_ACTION_NONCAS_DEMAND		(x0D) */
+	MONO_DECLSEC_FLAG_NONCAS_LINKDEMAND,		/* SECURITY_ACTION_NONCAS_LINKDEMAND		(x0E) */
+	MONO_DECLSEC_FLAG_NONCAS_INHERITANCEDEMAND,	/* SECURITY_ACTION_NONCAS_INHERITANCEDEMAND	(x0F) */
+	MONO_DECLSEC_FLAG_LINKDEMAND_CHOICE,		/* SECURITY_ACTION_LINKDEMAND_CHOICE		(x10) */
+	MONO_DECLSEC_FLAG_INHERITANCEDEMAND_CHOICE,	/* SECURITY_ACTION_INHERITANCEDEMAND_CHOICE	(x11) */
+	MONO_DECLSEC_FLAG_DEMAND_CHOICE,		/* SECURITY_ACTION_DEMAND_CHOICE		(x12) */
+};
+
+/*
+ * Returns flags that includes all available security action associated to the handle.
+ * @token: metadata token (either for a class or a method)
+ * @image: image where resides the metadata.
+ */
+static guint32
+mono_declsec_get_flags (MonoImage *image, guint32 token)
+{
+	guint32 index = mono_metadata_declsec_from_index (image, token);
+	MonoTableInfo *t = &image->tables [MONO_TABLE_DECLSECURITY];
+	guint32 result = 0;
+	guint32 action;
+	int i;
+
+	for (i = index; i < t->rows; i++) {
+		guint32 cols [MONO_DECL_SECURITY_SIZE];
+
+		mono_metadata_decode_row (t, i, cols, MONO_DECL_SECURITY_SIZE);
+		if (cols [MONO_DECL_SECURITY_PARENT] != token)
+			break;
+
+		action = cols [MONO_DECL_SECURITY_ACTION];
+		if ((action >= MONO_DECLSEC_ACTION_MIN) && (action <= MONO_DECLSEC_ACTION_MAX)) {
+			result |= declsec_flags_map [action];
+		} else {
+			g_assert_not_reached ();
+		}
+	}
+	return result;
+}
+
+/*
+ * Get the security actions (in the form of flags) associated with the specified method.
+ *
+ * @method: The method for which we want the declarative security flags.
+ * Return the declarative security flags for the method (only).
+ *
+ * Note: To keep MonoMethod size down we do not cache the declarative security flags
+ *       (except for the stack modifiers which are kept in the MonoJitInfo structure)
+ */
+guint32
+mono_declsec_flags_from_method (MonoMethod *method)
+{
+	if (method->flags & METHOD_ATTRIBUTE_HAS_SECURITY) {
+		/* FIXME: No cache (for the moment) */
+		guint32 idx = find_method_index (method);
+		idx <<= MONO_HAS_DECL_SECURITY_BITS;
+		idx |= MONO_HAS_DECL_SECURITY_METHODDEF;
+		return mono_declsec_get_flags (method->klass->image, idx);
+	}
+	return 0;
+}
+
+/*
+ * Get the security actions (in the form of flags) associated with the specified class.
+ *
+ * @klass: The class for which we want the declarative security flags.
+ * Return the declarative security flags for the class.
+ *
+ * Note: We cache the flags inside the MonoClass structure as this will get 
+ *       called very often (at least for each method).
+ */
+guint32
+mono_declsec_flags_from_class (MonoClass *klass)
+{
+	if (klass->flags & TYPE_ATTRIBUTE_HAS_SECURITY) {
+		if (!klass->declsec_flags) {
+			guint32 idx = mono_metadata_token_index (klass->type_token);
+			idx <<= MONO_HAS_DECL_SECURITY_BITS;
+			idx |= MONO_HAS_DECL_SECURITY_TYPEDEF;
+			/* we cache the flags on classes */
+			klass->declsec_flags = mono_declsec_get_flags (klass->image, idx);
+		}
+		return klass->declsec_flags;
+	}
+	return 0;
+}
+
+/*
+ * Get the security actions (in the form of flags) associated with the specified assembly.
+ *
+ * @assembly: The assembly for which we want the declarative security flags.
+ * Return the declarative security flags for the assembly.
+ */
+guint32
+mono_declsec_flags_from_assembly (MonoAssembly *assembly)
+{
+	guint32 idx = 1; /* there is only one assembly */
+	idx <<= MONO_HAS_DECL_SECURITY_BITS;
+	idx |= MONO_HAS_DECL_SECURITY_ASSEMBLY;
+	return mono_declsec_get_flags (assembly->image, idx);
+}
