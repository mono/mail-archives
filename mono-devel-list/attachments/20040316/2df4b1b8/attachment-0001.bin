--- locales.h-orig	2004-03-16 16:02:28.000000000 +0700
+++ locales.h	2004-03-16 16:02:33.000000000 +0700
@@ -37,5 +37,7 @@
 extern MonoString *ves_icall_System_String_InternalReplace_Str_Comp (MonoString *this, MonoString *old, MonoString *new, MonoCompareInfo *comp);
 extern MonoString *ves_icall_System_String_InternalToLower_Comp (MonoString *this, MonoCultureInfo *cult);
 extern MonoString *ves_icall_System_String_InternalToUpper_Comp (MonoString *this, MonoCultureInfo *cult);
+extern gunichar2 ves_icall_System_Char_ToUpper_Comp (gunichar2 usrc, MonoCultureInfo *cult);
+extern gunichar2 ves_icall_System_Char_ToLower_Comp (gunichar2 usrc, MonoCultureInfo *cult);
 
 #endif /* _MONO_METADATA_FILEIO_H_ */
--- locales.c-orig	2004-03-16 16:02:48.000000000 +0700
+++ locales.c	2004-03-16 17:07:17.000000000 +0700
@@ -6,7 +6,7 @@
  *	Mohammad DAMT (mdamt@cdl2000.com)
  *
  * (C) 2003 Ximian, Inc.
- * (C) 2003 PT Cakram Datalingga Duaribu  http://www.cdl2000.com
+ * (C) 2003,2004 PT Cakram Datalingga Duaribu  http://www.cdl2000.com
  */
 
 #include <config.h>
@@ -19,6 +19,7 @@
 #include <mono/metadata/exception.h>
 #include <mono/metadata/monitor.h>
 #include <mono/metadata/locales.h>
+#include <mono/metadata/unicode.h>
 
 #undef DEBUG
 
@@ -42,6 +43,7 @@
 
 #ifdef HAVE_ICU
 
+#include <unicode/uchar.h>
 #include <unicode/utypes.h>
 #include <unicode/ustring.h>
 #include <unicode/ures.h>
@@ -1098,6 +1100,110 @@
 	return(ret);
 }
 
+gunichar2 ves_icall_System_Char_ToLower_Comp (gunichar2 usrc, MonoCultureInfo *cult)
+{
+	UChar udest, *src;
+	UErrorCode ec;
+	char *icu_loc;
+	int32_t len;
+	
+#ifdef DEBUG
+	g_message (G_GNUC_PRETTY_FUNCTION ": LCID is %d", cult->lcid);
+#endif
+
+	if(cult->lcid==0x007F) {
+#ifdef DEBUG
+		g_message (G_GNUC_PRETTY_FUNCTION
+			   ": Invariant, using shortcut");
+#endif
+
+		return (ves_icall_System_Char_ToLower (usrc));
+	}
+
+	icu_loc=mono_string_to_icu_locale (cult->icu_name);
+	if(icu_loc==NULL) {
+		mono_raise_exception ((MonoException *)mono_exception_from_name (mono_defaults.corlib, "System", "SystemException"));
+		return (ves_icall_System_Char_ToLower (usrc));
+	}
+	
+	src = (UChar *)g_malloc0 (sizeof (UChar) * (2));
+	src [0] = usrc;
+	
+	/* According to the docs, this might result in a longer or
+	 * shorter string than we started with...
+	 */
+
+	ec=U_ZERO_ERROR;
+	len=u_strToLower (&udest, 2, src, -1, icu_loc, &ec);
+	if (ec==U_BUFFER_OVERFLOW_ERROR || ec==U_STRING_NOT_TERMINATED_WARNING) {	
+		len=u_strToLower (&udest, len+1, src, -1, icu_loc, &ec);
+	}
+
+	if (!U_SUCCESS (ec)) {
+		g_message (G_GNUC_PRETTY_FUNCTION ": u_strToUpper error: %s",
+			   u_errorName (ec));
+		/* return something */
+		udest = ves_icall_System_Char_ToLower (usrc);
+	}
+	
+	g_free (icu_loc);
+	g_free (src);
+	
+	return(udest);
+}
+
+gunichar2 ves_icall_System_Char_ToUpper_Comp (gunichar2 usrc, MonoCultureInfo *cult)
+{
+	UChar udest, *src;
+	UErrorCode ec;
+	char *icu_loc;
+	int32_t len;
+	
+#ifdef DEBUG
+	g_message (G_GNUC_PRETTY_FUNCTION ": LCID is %d", cult->lcid);
+#endif
+
+	if(cult->lcid==0x007F) {
+#ifdef DEBUG
+		g_message (G_GNUC_PRETTY_FUNCTION
+			   ": Invariant, using shortcut");
+#endif
+
+		return (ves_icall_System_Char_ToUpper (usrc));
+	}
+
+	icu_loc=mono_string_to_icu_locale (cult->icu_name);
+	if(icu_loc==NULL) {
+		mono_raise_exception ((MonoException *)mono_exception_from_name (mono_defaults.corlib, "System", "SystemException"));
+		return (ves_icall_System_Char_ToUpper (usrc));
+	}
+	
+	src = (UChar *)g_malloc0 (sizeof (UChar) * (2));
+	src [0] = usrc;
+	
+	/* According to the docs, this might result in a longer or
+	 * shorter string than we started with...
+	 */
+
+	ec=U_ZERO_ERROR;
+	len=u_strToUpper (&udest, 2, src, -1, icu_loc, &ec);
+	if (ec==U_BUFFER_OVERFLOW_ERROR || ec==U_STRING_NOT_TERMINATED_WARNING) {	
+		len=u_strToUpper (&udest, len+1, src, -1, icu_loc, &ec);
+	}
+
+	if (!U_SUCCESS (ec)) {
+		g_message (G_GNUC_PRETTY_FUNCTION ": u_strToUpper error: %s",
+			   u_errorName (ec));
+		/* return something */
+		udest = ves_icall_System_Char_ToUpper (usrc);
+	}
+	
+	g_free (icu_loc);
+	g_free (src);
+	
+	return(udest);
+}
+
 #else /* HAVE_ICU */
 void ves_icall_System_Globalization_CultureInfo_construct_internal_locale (MonoCultureInfo *this, MonoString *locale)
 {
--- icall.c-orig	2004-03-16 16:03:14.000000000 +0700
+++ icall.c	2004-03-16 16:03:19.000000000 +0700
@@ -4768,6 +4768,8 @@
 	{"GetDataTablePointers", ves_icall_System_Char_GetDataTablePointers},
 	{"GetNumericValue", ves_icall_System_Char_GetNumericValue},
 	{"GetUnicodeCategory", ves_icall_System_Char_GetUnicodeCategory},
+	{"InternalToLower", ves_icall_System_Char_ToLower_Comp},
+	{"InternalToUpper", ves_icall_System_Char_ToUpper_Comp},
 	{"IsControl", ves_icall_System_Char_IsControl},
 	{"IsLetter", ves_icall_System_Char_IsLetter},
 	{"IsLower", ves_icall_System_Char_IsLower},
@@ -4775,9 +4777,7 @@
 	{"IsPunctuation", ves_icall_System_Char_IsPunctuation},
 	{"IsSurrogate", ves_icall_System_Char_IsSurrogate},
 	{"IsSymbol", ves_icall_System_Char_IsSymbol},
-	{"IsUpper", ves_icall_System_Char_IsUpper},
-	{"ToLower", ves_icall_System_Char_ToLower},
-	{"ToUpper", ves_icall_System_Char_ToUpper}
+	{"IsUpper", ves_icall_System_Char_IsUpper}
 };
 
 static const IcallEntry defaultconf_icalls [] = {
@@ -5284,9 +5284,9 @@
 	{"InternalSplit", ves_icall_System_String_InternalSplit},
 	{"InternalStrcpy(string,int,string)", ves_icall_System_String_InternalStrcpy_Str},
 	{"InternalStrcpy(string,int,string,int,int)", ves_icall_System_String_InternalStrcpy_StrN},
-	{"InternalToLower", ves_icall_System_String_InternalToLower},
+	{"InternalToLower", ves_icall_System_String_InternalToLower_Comp},
 	{"InternalToLower(System.Globalization.CultureInfo)", ves_icall_System_String_InternalToLower_Comp},
-	{"InternalToUpper", ves_icall_System_String_InternalToUpper},
+	{"InternalToUpper", ves_icall_System_String_InternalToUpper_Comp},
 	{"InternalToUpper(System.Globalization.CultureInfo)", ves_icall_System_String_InternalToUpper_Comp},
 	{"InternalTrim", ves_icall_System_String_InternalTrim},
 	{"get_Chars", ves_icall_System_String_get_Chars}
