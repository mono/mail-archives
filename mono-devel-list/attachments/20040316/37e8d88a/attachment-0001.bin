--- CaseInsensitiveHashCodeProviderTest.cs	2004-03-16 17:28:21.000000000 +0700
+++ CaseInsensitiveHashCodeProviderTest.cs-patch	2004-03-16 16:49:10.000000000 +0700
@@ -1,8 +1,9 @@
+
 // CaseInsensitiveHashCodeProviderTest
 
 using System;
 using System.Collections;
-
+using System.Globalization;
 using NUnit.Framework;
 
 
@@ -38,7 +39,23 @@
 			// Actually this is quite possible.
 			Assert(h1 != h2);
 		}
+
+		public void TestHashCodeCultureInfo () {
+			CaseInsensitiveHashCodeProvider cih = new CaseInsensitiveHashCodeProvider (new CultureInfo ("tr-TR"));
+			int h1 = cih.GetHashCode ("c\u0327g\u0306\u0130o\u0308s\u0327");
+			int h2 = cih.GetHashCode ("C\u0327g\u0306\u0130o\u0308S\u0327");
+			int h3 = cih.GetHashCode ("C\u0327G\u0306\u0130O\u0308S\u0327");
+
+			AssertEquals ("Mixed Case != lower case", h1, h2);
+			AssertEquals ("Mixed Case != UPPER CASE", h1, h3);
+
+			// the uppercase of 'i' is not 'I' in Turkish
+			// lowercase: 'i', uppercase: 'İ'
+			// lowercase: 'ı', uppercase: 'I'
+			h1 = cih.GetHashCode ("istanbul");
+			h2 = cih.GetHashCode ("ISTANBUL");
 			
+			Assert(h1 != h2);
+		}		
 	}
-
 }
