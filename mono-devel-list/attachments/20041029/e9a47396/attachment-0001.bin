? FlagsTest.cs
? acc-modifiers.patch
? changes
? changes2
? class.cs.new
? class.cs.tmp
? expression.cs.tmp
? expression.cs.tmp2
? expression.diff.patch
? properties-access.tar.bz2
Index: class.cs
===================================================================
RCS file: /cvs/public/mcs/mcs/class.cs,v
retrieving revision 1.526
diff -u -r1.526 class.cs
--- class.cs	27 Oct 2004 19:14:02 -0000	1.526
+++ class.cs	30 Oct 2004 02:27:39 -0000
@@ -5354,15 +5354,23 @@
 		//
 		// Null if the accessor is empty, or a Block if not
 		//
+		public const int AllowedModifiers = 
+			Modifiers.PUBLIC |
+			Modifiers.PROTECTED |
+			Modifiers.INTERNAL |
+			Modifiers.PRIVATE;
+		
 		public ToplevelBlock Block;
 		public Attributes Attributes;
 		public Location Location;
+		public int ModFlags;
 		
-		public Accessor (ToplevelBlock b, Attributes attrs, Location loc)
+		public Accessor (ToplevelBlock b, int mod, Attributes attrs, Location loc)
 		{
 			Block = b;
 			Attributes = attrs;
 			Location = loc;
+			ModFlags = Modifiers.Check (AllowedModifiers, mod, 0, loc);
 		}
 	}
 
@@ -5559,7 +5567,9 @@
 
 			public override MethodBuilder Define(TypeContainer container)
 			{
-				method_data = new MethodData (method, method.ParameterInfo, method.ModFlags, method.flags, this);
+				base.Define (container);
+				
+				method_data = new MethodData (method, method.ParameterInfo, ModFlags, flags, this);
 
 				if (!method_data.Define (container))
 					return null;
@@ -5626,7 +5636,10 @@
 			{
 				if (container.EmitContext == null)
 					throw new InternalErrorException ("SetMethod.Define called too early");
-				method_data = new MethodData (method, GetParameterInfo (container.EmitContext), method.ModFlags, method.flags, this);
+					
+				base.Define (container);
+				
+				method_data = new MethodData (method, GetParameterInfo (container.EmitContext), ModFlags, flags, this);
 
 				if (!method_data.Define (container))
 					return null;
@@ -5663,6 +5676,7 @@
 		public abstract class PropertyMethod: AbstractPropertyEventMethod
 		{
 			protected readonly MethodCore method;
+			protected MethodAttributes flags;
 
 			public PropertyMethod (MethodCore method, string prefix)
 				: base (method, prefix)
@@ -5675,6 +5689,7 @@
 				: base (method, accessor, prefix)
 			{
 				this.method = method;
+				this.ModFlags = accessor.ModFlags;
 			}
 
 			public override AttributeTargets AttributeTargets {
@@ -5695,7 +5710,24 @@
 				}
 			}
 
-			public abstract MethodBuilder Define (TypeContainer container);
+			public virtual MethodBuilder Define (TypeContainer container)
+			{
+				//
+				// Check for custom access modifier
+				//
+                                if (ModFlags == 0) {
+                                        ModFlags = method.ModFlags;
+                                        flags = method.flags;
+                                } else {
+					CheckModifiers (container, ModFlags);
+					ModFlags |= (method.ModFlags & (~Modifiers.Accessibility));
+					flags = Modifiers.MethodAttr (ModFlags);
+					flags |= (method.flags & (~MethodAttributes.MemberAccessMask));
+				}
+
+				return null;
+
+			}
 
 			public override Type[] ParameterTypes {
 				get {
@@ -5720,6 +5752,29 @@
 			{
 				return String.Concat (tc.Name, '.', method.Name);
 			}
+			
+			void CheckModifiers (TypeContainer container, int modflags)
+                        {
+                                int flags = 0;
+                                int mflags = method.ModFlags & Modifiers.Accessibility;
+
+                                if ((mflags & Modifiers.PUBLIC) != 0) {
+                                        flags |= Modifiers.PROTECTED | Modifiers.INTERNAL | Modifiers.PRIVATE;
+                                }
+                                else if ((mflags & Modifiers.PROTECTED) != 0) {
+                                        if ((mflags & Modifiers.INTERNAL) != 0)
+                                                flags |= Modifiers.PROTECTED | Modifiers.INTERNAL;
+
+                                        flags |= Modifiers.PRIVATE;
+                                }
+                                else if ((mflags & Modifiers.INTERNAL) != 0)
+                                        flags |= Modifiers.PRIVATE;
+
+                                if ((mflags == modflags) || (modflags & (~flags)) != 0)
+                                        Report.Error (273, Location, "{0}: accessibility modifier must be more restrictive than the property or indexer",
+							GetSignatureForError (container));
+                        }
+
 		}
 
 
@@ -5770,6 +5825,23 @@
 			if (!base.DoDefine ())
 				return false;
 
+			//
+			// Accessors modifiers check
+			//
+			if (Get.ModFlags != 0 && Set.ModFlags != 0) {
+				Report.Error (274, Location, "'{0}': cannot specify accessibility modifiers for both accessors of the property or indexer.",
+						GetSignatureForError ());
+				return false;
+			}
+
+			if (((!Get.IsDummy && Set.IsDummy) || (Get.IsDummy && !Set.IsDummy))
+					&& (Get.ModFlags != 0 || Set.ModFlags != 0) && (ModFlags & Modifiers.OVERRIDE) == 0) {
+				Report.Error (276, Location, 
+					"'{0}': accessibility modifiers on accessors may only be used if the property or indexer has both a get and a set accessor.",
+					GetSignatureForError ());
+				return false;
+			}
+
 			if (MemberType.IsAbstract && MemberType.IsSealed) {
 				Report.Error (722, Location, Error722, TypeManager.CSharpName (MemberType));
 				return false;
@@ -5827,6 +5899,7 @@
  			parent_ret_type = parent_property.PropertyType;
 			MethodInfo get_accessor = parent_property.GetGetMethod (true);
 			MethodInfo set_accessor = parent_property.GetSetMethod (true);
+			MethodAttributes get_accessor_access, set_accessor_access;
 
 			if ((ModFlags & Modifiers.OVERRIDE) != 0) {
 				if (Get != null && !Get.IsDummy && get_accessor == null) {
@@ -5840,7 +5913,36 @@
 				}
 			}
 			
-			return get_accessor != null ? get_accessor : set_accessor;
+			//
+			// Check parent accessors access
+			//
+			get_accessor_access = set_accessor_access = 0;
+			if ((ModFlags & Modifiers.NEW) == 0) {
+				if (get_accessor != null) {
+					MethodAttributes get_flags = Modifiers.MethodAttr (Get.ModFlags != 0 ? Get.ModFlags : ModFlags);
+					get_accessor_access = (get_accessor.Attributes & MethodAttributes.MemberAccessMask);
+
+					if (!Get.IsDummy && (get_accessor_access) != 
+						(get_flags & MethodAttributes.MemberAccessMask))
+						Report.Error (507, Location, "'{0}' can't change the access modifiers when overriding inherited member '{1}'",
+								GetSignatureForError (), TypeManager.GetFullNameSignature (parent_property));
+				}
+
+				if (set_accessor != null)  {
+					MethodAttributes set_flags = Modifiers.MethodAttr (Set.ModFlags != 0 ? Set.ModFlags : ModFlags);
+					set_accessor_access = (set_accessor.Attributes & MethodAttributes.MemberAccessMask);
+
+					if (!Set.IsDummy & (set_accessor_access) !=
+						(set_flags & MethodAttributes.MemberAccessMask))
+						Report.Error (507, Location, "'{0}' can't change the access modifiers when overriding inherited member '{1}'",
+								GetSignatureForError (container), TypeManager.GetFullNameSignature (parent_property));
+				}
+			}
+
+			//
+			// Get the less restrictive access
+			//
+			return get_accessor_access > set_accessor_access ? get_accessor : set_accessor;
   		}
 
 		public override void Emit ()
@@ -5917,7 +6019,7 @@
 				Get = new GetMethod (this);
 			else
 				Get = new GetMethod (this, get_block);
-
+				
 			if (set_block == null)
 				Set = new SetMethod (this);
 			else
Index: cs-parser.jay
===================================================================
RCS file: /cvs/public/mcs/mcs/cs-parser.jay,v
retrieving revision 1.335
diff -u -r1.335 cs-parser.jay
--- cs-parser.jay	26 Oct 2004 23:14:11 -0000	1.335
+++ cs-parser.jay	30 Oct 2004 02:27:40 -0000
@@ -1198,7 +1198,7 @@
 	;
 
 get_accessor_declaration
-	: opt_attributes GET
+	: opt_attributes opt_modifiers GET
 	  {
 		// If this is not the case, then current_local_parameters has already
 		// been set in indexer_declaration
@@ -1210,14 +1210,14 @@
 	  }
           accessor_body
 	  {
-		$$ = new Accessor ((ToplevelBlock) $4, (Attributes) $1, lexer.Location);
+		$$ = new Accessor ((ToplevelBlock) $5, (int) $2, (Attributes) $1, lexer.Location);
 		current_local_parameters = null;
 		lexer.PropertyParsing = true;
 	  }
 	;
 
 set_accessor_declaration
-	: opt_attributes SET 
+	: opt_attributes opt_modifiers SET 
 	  {
 		Parameter [] args;
 		Parameter implicit_value_parameter = new Parameter (
@@ -1247,7 +1247,7 @@
 	  }
 	  accessor_body
 	  {
-		$$ = new Accessor ((ToplevelBlock) $4, (Attributes) $1, lexer.Location);
+		$$ = new Accessor ((ToplevelBlock) $5, (int) $2, (Attributes) $1, lexer.Location);
 		current_local_parameters = null;
 		lexer.PropertyParsing = true;
 	  }
@@ -1806,7 +1806,7 @@
 	  }
           block
 	  {
-		$$ = new Accessor ((ToplevelBlock) $4, (Attributes) $1, lexer.Location);
+		$$ = new Accessor ((ToplevelBlock) $4, 0, (Attributes) $1, lexer.Location);
 		lexer.EventParsing = true;
 	  }
 	| opt_attributes ADD error {
@@ -1830,7 +1830,7 @@
 	  }
           block
 	  {
-		$$ = new Accessor ((ToplevelBlock) $4, (Attributes) $1, lexer.Location);
+		$$ = new Accessor ((ToplevelBlock) $4, 0, (Attributes) $1, lexer.Location);
 		lexer.EventParsing = true;
 	  }
 	| opt_attributes REMOVE error {
@@ -4127,9 +4127,9 @@
                                       Attributes get_attrs, Attributes set_attrs, Location get_loc, Location set_loc)
         {
 		if (has_get)
-			Get = new Accessor (null, get_attrs, get_loc);
+			Get = new Accessor (null, 0, get_attrs, get_loc);
 		if (has_set)
-			Set = new Accessor (null, set_attrs, set_loc);
+			Set = new Accessor (null, 0, set_attrs, set_loc);
         }
 }
 
Index: ecore.cs
===================================================================
RCS file: /cvs/public/mcs/mcs/ecore.cs,v
retrieving revision 1.313
diff -u -r1.313 ecore.cs
--- ecore.cs	26 Oct 2004 23:14:11 -0000	1.313
+++ ecore.cs	30 Oct 2004 02:27:40 -0000
@@ -3089,11 +3089,6 @@
 		{
 			FindAccessors (ec.ContainerType);
 
-			if (setter != null && !IsAccessorAccessible (ec.ContainerType, setter) ||
-				getter != null && !IsAccessorAccessible (ec.ContainerType, getter)) {
-				Report.Error (122, loc, "'{0}' is inaccessible due to its protection level", PropertyInfo.Name);
-			}
-
 			is_static = getter != null ? getter.IsStatic : setter.IsStatic;
 		}
 
@@ -3156,6 +3151,11 @@
 				return null;
 			} 
 
+			if (!IsAccessorAccessible (ec.ContainerType, getter)) {
+				Report.Error (122, loc, "'{0}.get' is inaccessible due to its protection level", PropertyInfo.Name);
+				return null;
+			}
+			
 			if (!InstanceResolve (ec))
 				return null;
 
@@ -3198,6 +3198,11 @@
 				return null;
 			}
 
+			if (!IsAccessorAccessible (ec.ContainerType, setter)) {
+				Report.Error (122, loc, "'{0}.set' is inaccessible due to its protection level", PropertyInfo.Name);
+				return null;
+			}
+			
 			if (!InstanceResolve (ec))
 				return null;
 			
Index: iterators.cs
===================================================================
RCS file: /cvs/public/mcs/mcs/iterators.cs,v
retrieving revision 1.38
diff -u -r1.38 iterators.cs
--- iterators.cs	26 Oct 2004 23:14:11 -0000	1.38
+++ iterators.cs	30 Oct 2004 02:27:40 -0000
@@ -591,7 +591,7 @@
 					new FieldExpression (current_field), Location),
 				Location));
 
-			Accessor getter = new Accessor (get_block, null, Location);
+			Accessor getter = new Accessor (get_block, 0, null, Location);
 
 			Property current = new Property (
 				this, iterator_type_expr, 0,
