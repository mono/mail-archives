Index: System.Messaging/System.Messaging/ChangeLog
===================================================================
--- System.Messaging/System.Messaging/ChangeLog	(revision 134645)
+++ System.Messaging/System.Messaging/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2009-05-23  Michael Barker  <mike@middlesoft.co.uk>
+
+	* MessageEnumerator.cs:  Added calls to the delegate IMessageEnumerator
+	for methods that use a timeout and added exception handling.
+
 2008-12-20  Michael Barker  <mike@middlesoft.co.uk>
 
 	* MessageQueue.cs:  Added implementation for async methods: BeginReceive,
Index: System.Messaging/System.Messaging/MessageEnumerator.cs
===================================================================
--- System.Messaging/System.Messaging/MessageEnumerator.cs	(revision 134645)
+++ System.Messaging/System.Messaging/MessageEnumerator.cs	(working copy)
@@ -3,6 +3,7 @@
 //
 // Authors:
 //      Peter Van Isacker (sclytrack@planetinternet.be)
+//      Michael Barker (mike@middlesoft.co.uk)
 //
 // (C) 2003 Peter Van Isacker
 //
@@ -61,8 +62,7 @@
 		}
 		
 		public IntPtr CursorHandle {
-			[MonoTODO]
-			get {throw new NotImplementedException();}
+			get { return delegateEnumerator.CursorHandle; }
 		}
 
 		public void Close()
@@ -87,58 +87,122 @@
 		{
 			return delegateEnumerator.MoveNext ();
 		}
-		[MonoTODO]
-		public bool MoveNext(TimeSpan timeout)
+
+		public bool MoveNext (TimeSpan timeout)
 		{
-			throw new NotImplementedException();
+			return delegateEnumerator.MoveNext (timeout);
 		}
-
+		
 		public Message RemoveCurrent()
 		{
-			IMessage iMsg = delegateEnumerator.RemoveCurrent ();
-			if (iMsg == null)
-				return null;
-			return new Message (iMsg, null, formatter);
+			try {
+				IMessage iMsg = delegateEnumerator.RemoveCurrent ();
+				if (iMsg == null)
+					return null;
+				return new Message (iMsg, null, formatter);
+				
+			} catch (ConnectionException e) {
+				throw new MessageQueueException (MessageQueueErrorCode.QueueNotAvailable, e.Message);
+			} catch (MessageUnavailableException e) {
+				throw new InvalidOperationException (e.Message, e);
+			} catch (MonoMessagingException e) {
+				throw new MessageQueueException (MessageQueueErrorCode.Generic, e.Message);
+			}			
 		}
 
 		public Message RemoveCurrent (MessageQueueTransaction transaction)
 		{
-			
-			IMessage iMsg = delegateEnumerator.RemoveCurrent (transaction.DelegateTx);
-			if (iMsg == null)
-				return null;
-			return new Message (iMsg, null, formatter);
+			try {
+				IMessage iMsg = delegateEnumerator.RemoveCurrent (transaction.DelegateTx);
+				if (iMsg == null)
+					return null;
+				return new Message (iMsg, null, formatter);
+				
+			} catch (ConnectionException e) {
+				throw new MessageQueueException (MessageQueueErrorCode.QueueNotAvailable, e.Message);
+			} catch (MessageUnavailableException e) {
+				throw new InvalidOperationException (e.Message, e);
+			} catch (MonoMessagingException e) {
+				throw new MessageQueueException (MessageQueueErrorCode.Generic, e.Message);
+			}			
 		}
 
 		public Message RemoveCurrent(MessageQueueTransactionType transactionType)
 		{
-			IMessage iMsg = delegateEnumerator.RemoveCurrent ((Mono.Messaging.MessageQueueTransactionType) transactionType);
-			if (iMsg == null)
-				return null;
-			return new Message (iMsg, null, formatter);
+			try {
+				IMessage iMsg = delegateEnumerator.RemoveCurrent ((Mono.Messaging.MessageQueueTransactionType) transactionType);
+				if (iMsg == null)
+					return null;
+				return new Message (iMsg, null, formatter);
+				
+			} catch (ConnectionException e) {
+				throw new MessageQueueException (MessageQueueErrorCode.QueueNotAvailable, e.Message);
+			} catch (MessageUnavailableException e) {
+				throw new InvalidOperationException (e.Message, e);
+			} catch (MonoMessagingException e) {
+				throw new MessageQueueException (MessageQueueErrorCode.Generic, e.Message);
+			}			
 		}
-		[MonoTODO]
-		public Message RemoveCurrent(TimeSpan timeout)
+
+		public Message RemoveCurrent (TimeSpan timeout)
 		{
-			throw new NotImplementedException();
+			try {
+				IMessage iMsg = delegateEnumerator.RemoveCurrent (timeout);
+				if (iMsg == null)
+					return null;
+				return new Message (iMsg, null, formatter);
+				
+			} catch (ConnectionException e) {
+				throw new MessageQueueException (MessageQueueErrorCode.QueueNotAvailable, e.Message);
+			} catch (MessageUnavailableException e) {
+				throw new InvalidOperationException (e.Message, e);
+			} catch (MonoMessagingException e) {
+				throw new MessageQueueException (MessageQueueErrorCode.Generic, e.Message);
+			}			
 		}
-		[MonoTODO]
-		public Message RemoveCurrent(TimeSpan timeout, MessageQueueTransaction transaction)
+
+		public Message RemoveCurrent (TimeSpan timeout,
+		                              MessageQueueTransaction transaction)
 		{
-			throw new NotImplementedException();
+			try {
+				IMessage iMsg = delegateEnumerator.RemoveCurrent (timeout,
+				                                                  transaction.DelegateTx);
+				if (iMsg == null)
+					return null;
+				return new Message (iMsg, null, formatter);
+				
+			} catch (ConnectionException e) {
+				throw new MessageQueueException (MessageQueueErrorCode.QueueNotAvailable, e.Message);
+			} catch (MessageUnavailableException e) {
+				throw new InvalidOperationException (e.Message, e);
+			} catch (MonoMessagingException e) {
+				throw new MessageQueueException (MessageQueueErrorCode.Generic, e.Message);
+			}			
 		}
-		[MonoTODO]
-		public Message RemoveCurrent(TimeSpan timeout, MessageQueueTransactionType transactionType)
+
+		public Message RemoveCurrent (TimeSpan timeout, MessageQueueTransactionType transactionType)
 		{
-			throw new NotImplementedException();
+			try {
+				IMessage iMsg = delegateEnumerator.RemoveCurrent (timeout, 
+				                                                  (Mono.Messaging.MessageQueueTransactionType) transactionType);
+				if (iMsg == null)
+					return null;
+				return new Message (iMsg, null, formatter);
+				
+			} catch (ConnectionException e) {
+				throw new MessageQueueException (MessageQueueErrorCode.QueueNotAvailable, e.Message);
+			} catch (MessageUnavailableException e) {
+				throw new InvalidOperationException (e.Message, e);
+			} catch (MonoMessagingException e) {
+				throw new MessageQueueException (MessageQueueErrorCode.Generic, e.Message);
+			}			
 		}
-		[MonoTODO]
+
 		public void Reset()
 		{
 			Close ();
 		}
 
-		[MonoTODO]
 		~MessageEnumerator()
 		{
 			Dispose(false);
Index: Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/ChangeLog
===================================================================
--- Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/ChangeLog	(revision 134645)
+++ Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2009-05-23  Michael Barker  <mike@middlesoft.co.uk>
+
+	* MessageEnumeratorTest.cs:  Added tests for timeout methods.
+
 2009-01-05  Michael Barker  <mike@middlesoft.co.uk>
 
 	* BinaryMessageFormatter.cs, XMLMessageFormatterTest.cs, TestUtils.cs, 
@@ -59,3 +63,7 @@
 
 	* RabbitMQMessagingProviderTest.cs: Added test for dynamic create of 
 	MessagingProvider
+
+2009-05-23  Michael Barker  <mike@middlesoft.co.uk>
+
+	* MesssageEnumeratorTest.cs:  Added tests for MoveNext/Remove with timeouts
Index: Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/MessageEnumeratorTest.cs
===================================================================
--- Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/MessageEnumeratorTest.cs	(revision 134645)
+++ Mono.Messaging.RabbitMQ/Test/Mono.Messaging.RabbitMQ/MessageEnumeratorTest.cs	(working copy)
@@ -87,6 +87,45 @@
 			MessageQueue.Delete (qName);
 		}
 		
+		[Test]
+		public void RemoveMessageWithTimeout ()
+		{
+			SendMessage ("message 1");
+			SendMessage ("message 2");
+			SendMessage ("message 3");
+			SendMessage ("message 4");
+			
+			MessageQueue mq0 = MQUtil.GetQueue (qName);
+			MessageEnumerator me0 = mq0.GetMessageEnumerator ();
+			
+			TimeSpan ts = new TimeSpan (0, 0, 2);
+			
+			me0.MoveNext (ts);
+			me0.MoveNext (ts);
+			me0.MoveNext (ts);
+			
+			Message m0 = me0.RemoveCurrent (ts);
+			
+			me0.MoveNext (ts);
+			
+			me0.Dispose ();
+			mq0.Dispose ();
+			
+			MessageQueue mq1 = MQUtil.GetQueue (qName);
+			MessageEnumerator me1 = mq1.GetMessageEnumerator ();
+			
+			me1.MoveNext (ts);
+			me1.MoveNext (ts);
+			me1.MoveNext (ts);
+			
+			Message m1 = me1.Current;
+			m1.Formatter = new BinaryMessageFormatter ();
+			Assert.AreEqual ("message 4", (String) m1.Body, "body incorrect");
+			
+			mq1.Purge ();
+			MessageQueue.Delete (qName);
+		}
+		
 		//[Test]
 		// Not supported with AMQP
 		public void RemoveMessageWithTx ()
Index: Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/RabbitMQMessageQueue.cs
===================================================================
--- Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/RabbitMQMessageQueue.cs	(revision 134645)
+++ Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/RabbitMQMessageQueue.cs	(working copy)
@@ -590,7 +590,7 @@
 		private static TxReceiver.DoReceive Receiver (TimeSpan timeout,
 		                                              IsMatch matcher)
 		{
-			int to = TimeSpanToInt32 (timeout);
+			int to = MessageFactory.TimeSpanToInt32 (timeout);
 			return new DoReceiveWithTimeout (to, matcher).DoReceive;
 		}
 		
@@ -601,7 +601,7 @@
 		
 		private static TxReceiver.DoReceive Receiver (TimeSpan timeout)
 		{
-			int to = TimeSpanToInt32 (timeout);
+			int to = MessageFactory.TimeSpanToInt32 (timeout);
 			return new DoReceiveWithTimeout (to, null).DoReceive;
 		}
 
@@ -617,7 +617,7 @@
 		
 		private TxReceiver.DoReceive Peeker (TimeSpan timeout)
 		{
-			int to = TimeSpanToInt32 (timeout);
+			int to = MessageFactory.TimeSpanToInt32 (timeout);
 			return new DoReceiveWithTimeout (to, null, false).DoReceive;
 		}		
 		
@@ -628,7 +628,7 @@
 		
 		private TxReceiver.DoReceive Peeker (TimeSpan timeout, IsMatch matcher)
 		{
-			int to = TimeSpanToInt32 (timeout);
+			int to = MessageFactory.TimeSpanToInt32 (timeout);
 			return new DoReceiveWithTimeout (to, matcher, false).DoReceive;
 		}
 		
@@ -714,13 +714,5 @@
 		{
 			return (RabbitMQMessageQueueTransaction) provider.CreateMessageQueueTransaction ();
 		}		
-		
-		private static int TimeSpanToInt32 (TimeSpan timespan)
-		{
-			if (timespan == TimeSpan.MaxValue)
-				return -1;
-			else
-				return (int) timespan.TotalMilliseconds;
-		}
 	}
 }
Index: Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/MessageFactory.cs
===================================================================
--- Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/MessageFactory.cs	(revision 134645)
+++ Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/MessageFactory.cs	(working copy)
@@ -219,6 +219,13 @@
 			DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, 0);
 			return epoch.AddSeconds (ats.UnixTime).ToLocalTime ();
 		}
-		
+
+		public static int TimeSpanToInt32 (TimeSpan timespan)
+		{
+			if (timespan == TimeSpan.MaxValue)
+				return -1;
+			else
+				return (int) timespan.TotalMilliseconds;
+		}
 	}
 }
Index: Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/ChangeLog
===================================================================
--- Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/ChangeLog	(revision 134645)
+++ Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/ChangeLog	(working copy)
@@ -1,3 +1,19 @@
+2009-05-23  Michael Barker  <mike@middlesoft.co.uk>
+
+	* MessageFactory.cs: Moved TimeSpanToInt32 method to here.
+	* RabbitMQMessageEnumerator.cs:  Added Remove/MoveNext methods that include
+	timeouts.
+	* RabbitMQMessageQueue.cs: Updated to cater for moved TimeSpanToInt32 method
+
+2009-05-20  Michael Barker  <mike@middlesoft.co.uk>
+
+	* RabbitMQMessageEnumerator.cs:  Removed references to realms & tickets.
+	* RabbitMQMessageQueue.cs:  Removed references to realms & tickets.
+		
+2009-05-19  Michael Barker  <mike@middlesoft.co.uk>
+
+	* RabbitMQMessageQueue.cs: Added comments.
+	
 2008-12-22  Michael Barker  <mike@middlesoft.co.uk>
 
 	* RabbitMQMessageQueue.cs:  Changed to extend MessageQueueBase to make use
@@ -44,12 +60,3 @@
 
 	* RabbitMQMessageQueue.cs: New
 	* RabbitMQMessagingProvider.cs: New
-	
-2009-05-19  Michael Barker  <mike@middlesoft.co.uk>
-
-	* RabbitMQMessageQueue.cs: Added comments.
-	
-2009-05-20  Michael Barker  <mike@middlesoft.co.uk>
-
-	* RabbitMQMessageEnumerator.cs:  Removed references to realms & tickets.
-	* RabbitMQMessageQueue.cs:  Removed references to realms & tickets.
\ No newline at end of file
Index: Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/RabbitMQMessageEnumerator.cs
===================================================================
--- Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/RabbitMQMessageEnumerator.cs	(revision 134645)
+++ Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/RabbitMQMessageEnumerator.cs	(working copy)
@@ -65,6 +65,10 @@
 			}
 		}
 		
+		public IntPtr CursorHandle {
+			get { throw new NotImplementedException (); }
+		}
+		
 		public void Close ()
 		{
 			if (subscription != null) {
@@ -117,7 +121,6 @@
 				if (subscription == null) {
 					IModel ch = Model;
 					
-					//ushort ticket = ch.AccessRequest ("/data");
 					string finalName = ch.QueueDeclare (qRef.Queue, false);
 					
 					subscription = new Subscription (ch, finalName);
@@ -132,6 +135,12 @@
 			Subscription sub = Subscription;
 			return sub.Next (500, out current);
 		}
+		
+		public bool MoveNext (TimeSpan timeout)
+		{
+			int to = MessageFactory.TimeSpanToInt32 (timeout);
+			return Subscription.Next (to, out current);
+		}
 
 		public IMessage RemoveCurrent ()
 		{
@@ -153,6 +162,29 @@
 			throw new NotSupportedException ("Unable to remove messages within a transaction");
 		}
 		
+		public IMessage RemoveCurrent (TimeSpan timeout)
+		{
+			// Timeout makes no sense for this implementation, so we just work 
+			// the same as the non-timeout based one. 
+			
+			if (current == null)
+				throw new InvalidOperationException ();
+			
+			IMessage msg = CreateMessage (current);
+			Subscription.Ack (current);
+			return msg;
+		}
+		
+		public IMessage RemoveCurrent (TimeSpan timeout, IMessageQueueTransaction transaction)
+		{
+			throw new NotImplementedException ();
+		}
+		
+		public IMessage RemoveCurrent (TimeSpan timeout, MessageQueueTransactionType transactionType)
+		{
+			throw new NotImplementedException ();
+		}
+		
 		private IMessage CreateMessage (BasicDeliverEventArgs result)
 		{
 			return helper.ReadMessage (qRef, result);
Index: Mono.Messaging/Test/Mono.Messaging/ChangeLog
===================================================================
--- Mono.Messaging/Test/Mono.Messaging/ChangeLog	(revision 134645)
+++ Mono.Messaging/Test/Mono.Messaging/ChangeLog	(working copy)
@@ -1,12 +1,16 @@
-2008-09-29  Michael Barker  <mike@middlesoft.co.uk>
+2009-05-23  Michael Barker  <mike@middlesoft.co.uk>
 
-	* MessageBaseTest.cs: New
-	* QueueReferenceTest.cs: New
+	* MessageEnumeratorExceptionTest.cs:  New
+	
+2009-05-23  Michael Barker  <mike@middlesoft.co.uk>
 
+	* QueueReferenceTest.cs: Incorrect namespace for test
+	
 2009-05-19  Michael Barker  <mike@middlesoft.co.uk>
 
 	* MessageBaseTest.cs: Used reflection to create Message Object
 	
-2009-05-23  Michael Barker  <mike@middlesoft.co.uk>
+2008-09-29  Michael Barker  <mike@middlesoft.co.uk>
 
-	* QueueReferenceTest.cs: Incorrect namespace for test
\ No newline at end of file
+	* MessageBaseTest.cs: New
+	* QueueReferenceTest.cs: New
\ No newline at end of file
Index: Mono.Messaging/Test/Mono.Messaging/MessageEnumeratorExceptionTest.cs
===================================================================
--- Mono.Messaging/Test/Mono.Messaging/MessageEnumeratorExceptionTest.cs	(revision 0)
+++ Mono.Messaging/Test/Mono.Messaging/MessageEnumeratorExceptionTest.cs	(revision 0)
@@ -0,0 +1,105 @@
+//
+// MessageEnumeratorTest.cs -
+//	NUnit Test Cases for MessageEnumerator
+//
+// Author:
+//	Michael Barker  <mike@middlesoft.co.uk>
+//
+// Copyright (C) 2004-2005 Novell, Inc (http://www.novell.com)
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+using System;
+using System.Security;
+using System.Security.Permissions;
+using System.Reflection;
+
+using Mono.Messaging;
+
+using NUnit.Framework;
+using NUnit.Mocks;
+
+
+namespace MonoTests.Mono.Messaging {
+	
+	[TestFixture]
+	public class MessageEnumeratorExceptionTest
+	{
+		private DynamicMock mockME;
+		
+		[SetUp]
+		public void Init ()
+		{
+			mockME = new DynamicMock (typeof (IMessageEnumerator));
+		}
+
+		[Test]
+		[ExpectedException("System.Messaging.MessageQueueException")]
+		public void RemoveCurrentThrowsConnectionException ()
+		{
+			mockME.ExpectAndThrow ("RemoveCurrent", new ConnectionException (QueueReference.DEFAULT), null);
+			System.Messaging.MessageEnumerator me = CreateEnumerator ((IMessageEnumerator) mockME.MockInstance);
+			me.RemoveCurrent ();
+		}
+		
+		[Test]
+		[ExpectedException("System.InvalidOperationException")]
+		public void RemoveCurrentThrowsMessageUnavailableException ()
+		{
+			mockME.ExpectAndThrow ("RemoveCurrent", new MessageUnavailableException (), null);
+			System.Messaging.MessageEnumerator me = CreateEnumerator ((IMessageEnumerator) mockME.MockInstance);
+			me.RemoveCurrent ();
+		}		
+		
+		[Test]
+		[ExpectedException("System.Messaging.MessageQueueException")]
+		public void RemoveCurrentThrowsMonoMessagingException ()
+		{
+			mockME.ExpectAndThrow ("RemoveCurrent", new MonoMessagingException (), null);
+			System.Messaging.MessageEnumerator me = CreateEnumerator ((IMessageEnumerator) mockME.MockInstance);
+			me.RemoveCurrent ();
+		}		
+		
+		[Test]
+		[ExpectedException("System.NotImplementedException")]
+		public void RemoveCurrentThrowsMessageNotImplemented ()
+		{
+			mockME.ExpectAndThrow ("RemoveCurrent", new NotImplementedException (), null);
+			System.Messaging.MessageEnumerator me = CreateEnumerator ((IMessageEnumerator) mockME.MockInstance);
+			me.RemoveCurrent ();
+		}		
+	
+		public System.Messaging.MessageEnumerator CreateEnumerator (IMessageEnumerator ime)
+		{
+            Type[] types = { 
+                typeof (IMessageEnumerator), typeof (System.Messaging.IMessageFormatter)
+            };
+                
+            ConstructorInfo ci = typeof (System.Messaging.MessageEnumerator).GetConstructor (
+                BindingFlags.NonPublic | BindingFlags.Instance, 
+                Type.DefaultBinder, types, new ParameterModifier[0]);
+                
+            if (ci == null)
+                throw new Exception ("ConstructorInfo is null");
+            
+            return (System.Messaging.MessageEnumerator) ci.Invoke (new object[] { ime, null });
+		}
+	}
+}
Index: Mono.Messaging/Mono.Messaging_test.dll.sources
===================================================================
--- Mono.Messaging/Mono.Messaging_test.dll.sources	(revision 134645)
+++ Mono.Messaging/Mono.Messaging_test.dll.sources	(working copy)
@@ -1,2 +1,3 @@
 Mono.Messaging/MessageBaseTest.cs
+Mono.Messaging/MessageEnumeratorExceptionTest.cs
 Mono.Messaging/QueueReferenceTest.cs
\ No newline at end of file
Index: Mono.Messaging/Mono.Messaging/ChangeLog
===================================================================
--- Mono.Messaging/Mono.Messaging/ChangeLog	(revision 134645)
+++ Mono.Messaging/Mono.Messaging/ChangeLog	(working copy)
@@ -1,3 +1,15 @@
+2009-05-23  Michael Barker  <mike@middlesoft.co.uk>
+
+	* IMessageEnumerator.cs:  Added additional methods to support operations
+	specified by the System.Messaging version.
+	
+2009-05-19  Michael Barker  <mike@middlesoft.co.uk>
+
+	* IMessage.cs: Added additional comments.
+	* IMessagingProvider.cs: Added additional comments.
+	* MessagingProviderLocator.cs: Added support for specifing messaging
+	implementation using an environment variable.
+
 2009-01-03  Michael Barker  <mike@middlesoft.co.uk>
 
 	* MessageQueueBase.cs:  Added support for handling exception asynchronously.
@@ -67,11 +79,4 @@
 	* MessageType.cs: New
 	* MessagingProviderLocator.cs: New
 	* MonoMessagingException.cs: New
-	* QueueReference.cs: New
-
-2009-05-19  Michael Barker  <mike@middlesoft.co.uk>
-
-	* IMessage.cs: Added additional comments.
-	* IMessagingProvider.cs: Added additional comments.
-	* MessagingProviderLocator.cs: Added support for specifing messaging
-	implementation using an environment variable.
\ No newline at end of file
+	* QueueReference.cs: New
\ No newline at end of file
Index: Mono.Messaging/Mono.Messaging/IMessageEnumerator.cs
===================================================================
--- Mono.Messaging/Mono.Messaging/IMessageEnumerator.cs	(revision 134645)
+++ Mono.Messaging/Mono.Messaging/IMessageEnumerator.cs	(working copy)
@@ -38,13 +38,15 @@
 	
 		IMessage Current { get; }
 		
+		IntPtr CursorHandle { get; }		
+		
 		void Close();
 
 		void Dispose(bool disposing);
 
 		bool MoveNext();
 		
-		//bool MoveNext(TimeSpan timeout);
+		bool MoveNext(TimeSpan timeout);
 
 		IMessage RemoveCurrent();
 
@@ -52,11 +54,11 @@
 
 		IMessage RemoveCurrent(MessageQueueTransactionType transactionType);
 
-		//IMessage RemoveCurrent(TimeSpan timeout);
+		IMessage RemoveCurrent(TimeSpan timeout);
 
-		//IMessage RemoveCurrent(TimeSpan timeout, MessageQueueTransaction transaction);
+		IMessage RemoveCurrent(TimeSpan timeout, IMessageQueueTransaction transaction);
 
-		//IMessage RemoveCurrent(TimeSpan timeout, MessageQueueTransactionType transactionType);
+		IMessage RemoveCurrent(TimeSpan timeout, MessageQueueTransactionType transactionType);
 
 	}
 
Index: Mono.Messaging/ChangeLog
===================================================================
--- Mono.Messaging/ChangeLog	(revision 134645)
+++ Mono.Messaging/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2009-05-23  Michael Barker  <mike@middlesoft.co.uk>
+
+	* Mono.Messaging_test.dll.sources:  Added MessageEnumeratorExceptionTest.cs
+
 2008-12-30  Raja R Harinath  <harinath@hurrynot.org>
 
 	* Makefile (TEST_MCS_FLAGS): Reference System.Messaging.dll.
Index: Mono.Messaging/Makefile
===================================================================
--- Mono.Messaging/Makefile	(revision 134645)
+++ Mono.Messaging/Makefile	(working copy)
@@ -5,6 +5,6 @@
 LIBRARY = Mono.Messaging.dll
 LIB_MCS_FLAGS = /r:System.dll
 
-TEST_MCS_FLAGS = $(LIB_MCS_FLAGS) -nowarn:0618 -nowarn:219 -nowarn:169 -r:System.Messaging.dll
+TEST_MCS_FLAGS = $(LIB_MCS_FLAGS) -nowarn:0618 -nowarn:219 -nowarn:169 /r:System.Messaging.dll /r:nunit.mocks.dll
 
 include ../../build/library.make