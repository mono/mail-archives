? arch/amd64/.deps
? arch/amd64/Makefile
? arch/amd64/Makefile.in
? profiler/libmono-profiler-simple.la
? profiler/libmono-profiler-trace.la
? profiler/simple.c
? profiler/simple.lo
? profiler/trace.c
? profiler/trace.lo
Index: metadata/profiler-private.h
===================================================================
RCS file: /cvs/public/mono/mono/metadata/profiler-private.h,v
retrieving revision 1.6
diff -u -r1.6 profiler-private.h
--- metadata/profiler-private.h	17 Jun 2003 14:16:04 -0000	1.6
+++ metadata/profiler-private.h	4 Apr 2004 11:06:36 -0000
@@ -23,6 +23,7 @@
 
 void mono_profiler_shutdown        (void);
 
+gboolean mono_profiler_method_filter (MonoMethod *method);
 void mono_profiler_method_enter    (MonoMethod *method);
 void mono_profiler_method_leave    (MonoMethod *method);
 void mono_profiler_method_jit      (MonoMethod *method);
Index: metadata/profiler.c
===================================================================
RCS file: /cvs/public/mono/mono/metadata/profiler.c,v
retrieving revision 1.21
diff -u -r1.21 profiler.c
--- metadata/profiler.c	25 Mar 2004 15:18:16 -0000	1.21
+++ metadata/profiler.c	4 Apr 2004 11:06:37 -0000
@@ -34,6 +34,7 @@
 static MonoProfileAllocFunc    allocation_cb;
 static MonoProfileMethodFunc   method_enter;
 static MonoProfileMethodFunc   method_leave;
+static MonoProfileMethodFilterFunc method_filter;
 
 static MonoProfileThreadFunc   thread_start;
 static MonoProfileThreadFunc   thread_end;
@@ -109,6 +110,12 @@
 }
 
 void 
+mono_profiler_install_method_filter (MonoProfileMethodFilterFunc callback)
+{
+	method_filter = callback;
+}
+
+void 
 mono_profiler_install_appdomain   (MonoProfileAppDomainFunc start_load, MonoProfileAppDomainResult end_load,
                                    MonoProfileAppDomainFunc start_unload, MonoProfileAppDomainFunc end_unload)
 
@@ -149,6 +156,15 @@
 	class_end_unload = end_unload;
 }
 
+gboolean
+mono_profiler_method_filter (MonoMethod *method)
+{
+	if ((mono_profiler_events & MONO_PROFILE_ENTER_LEAVE) && method_filter)
+		return method_filter (current_profiler, method);
+	else
+		return TRUE;
+}
+
 void
 mono_profiler_method_enter (MonoMethod *method)
 {
@@ -1042,11 +1058,7 @@
 
 	if (desc) {
 		/* Parse options */
-		if (strstr (desc, ":"))
-			desc = strstr (desc, ":") + 1;
-		else
-			desc = NULL;
-		args = g_strsplit (desc ? desc : "", ",", -1);
+		args = g_strsplit (desc, ",", -1);
 
 		for (ptr = args; ptr && *ptr; ptr++) {
 			const char *arg = *ptr;
@@ -1081,20 +1093,23 @@
 void 
 mono_profiler_load (const char *desc)
 {
-	if (!desc || (strcmp ("default", desc) == 0) || (strncmp (desc, "default:", 8) == 0)) {
-		mono_profiler_install_simple (desc);
+	int len = 0;
+	while (desc[len] && desc[len] != ':')
+		len++;
+		
+	const char *params = (desc[len] ? &desc[len + 1] : NULL);
+	
+	if (strncmp (desc, "default", len) == 0) {
+		mono_profiler_install_simple (params);
 	} else {
 		GModule *pmodule;
-		const char* col = strchr (desc, ':');
 		char* libname;
 		char* path;
 		char *mname;
-		if (col != NULL) {
-			mname = g_memdup (desc, col - desc);
-			mname [col - desc] = 0;
-		} else {
-			mname = g_strdup (desc);
-		}
+		
+		mname = g_memdup (desc, len + 1);
+		mname [len] = 0;
+		
 		libname = g_strdup_printf ("mono-profiler-%s", mname);
 		path = g_module_build_path (NULL, libname);
 		pmodule = g_module_open (path, G_MODULE_BIND_LAZY);
@@ -1103,7 +1118,7 @@
 			if (!g_module_symbol (pmodule, INITIALIZER_NAME, (gpointer *)&func)) {
 				g_warning ("Cannot find initializer function %s in profiler module: %s", INITIALIZER_NAME, libname);
 			} else {
-				func (desc);
+				func (params);
 			}
 		} else {
 			g_warning ("Error loading profiler module '%s': %s", libname, g_module_error ());
@@ -1114,4 +1129,3 @@
 		g_free (path);
 	}
 }
-
Index: metadata/profiler.h
===================================================================
RCS file: /cvs/public/mono/mono/metadata/profiler.h,v
retrieving revision 1.9
diff -u -r1.9 profiler.h
--- metadata/profiler.h	17 Jun 2003 14:16:04 -0000	1.9
+++ metadata/profiler.h	4 Apr 2004 11:06:37 -0000
@@ -65,6 +65,7 @@
 typedef void (*MonoProfileAllocFunc)      (MonoProfiler *prof, MonoObject *obj, MonoClass *klass);
 
 typedef gboolean (*MonoProfileCoverageFilterFunc)   (MonoProfiler *prof, MonoMethod *method);
+typedef gboolean (*MonoProfileMethodFilterFunc)   (MonoProfiler *prof, MonoMethod *method);
 
 typedef void (*MonoProfileCoverageFunc)   (MonoProfiler *prof, const MonoProfileCoverageEntry *entry);
 
@@ -87,6 +88,7 @@
 
 void mono_profiler_install_jit_compile (MonoProfileMethodFunc start, MonoProfileMethodResult end);
 void mono_profiler_install_enter_leave (MonoProfileMethodFunc enter, MonoProfileMethodFunc fleave);
+void mono_profiler_install_method_filter (MonoProfileMethodFilterFunc callback);
 void mono_profiler_install_thread      (MonoProfileThreadFunc start, MonoProfileThreadFunc end);
 void mono_profiler_install_transition  (MonoProfileMethodResult callback);
 void mono_profiler_install_allocation  (MonoProfileAllocFunc callback);
Index: mini/driver.c
===================================================================
RCS file: /cvs/public/mono/mono/mini/driver.c,v
retrieving revision 1.45
diff -u -r1.45 driver.c
--- mini/driver.c	20 Mar 2004 22:02:47 -0000	1.45
+++ mini/driver.c	4 Apr 2004 11:06:38 -0000
@@ -675,7 +675,7 @@
 		} else if (strcmp (argv [i], "--compile-all") == 0) {
 			action = DO_COMPILE;
 		} else if (strcmp (argv [i], "--profile") == 0) {
-			mono_profiler_load (NULL);
+			mono_profiler_load ("default");
 		} else if (strncmp (argv [i], "--profile=", 10) == 0) {
 			mono_profiler_load (argv [i] + 10);
 		} else if (strcmp (argv [i], "--compile") == 0) {
Index: mini/mini-x86.c
===================================================================
RCS file: /cvs/public/mono/mono/mini/mini-x86.c,v
retrieving revision 1.80
diff -u -r1.80 mini-x86.c
--- mini/mini-x86.c	28 Mar 2004 17:16:54 -0000	1.80
+++ mini/mini-x86.c	4 Apr 2004 11:06:41 -0000
@@ -14,6 +14,7 @@
 
 #include <mono/metadata/appdomain.h>
 #include <mono/metadata/debug-helpers.h>
+#include "mono/metadata/profiler.h"
 #include <mono/metadata/profiler-private.h>
 #include <mono/utils/mono-math.h>
 
@@ -2275,8 +2276,7 @@
 			 */
 			int pos = 0;
 
-			/* FIXME: no tracing support... */
-			if (cfg->prof_options & MONO_PROFILE_ENTER_LEAVE)
+			if ((cfg->prof_options & MONO_PROFILE_ENTER_LEAVE) && mono_profiler_method_filter (cfg->method))
 				code = mono_arch_instrument_epilog (cfg, mono_profiler_method_leave, code, FALSE);
 			/* reset offset to make max_len work */
 			offset = code - cfg->native_code;
Index: mini/mini.c
===================================================================
RCS file: /cvs/public/mono/mono/mini/mini.c,v
retrieving revision 1.213
diff -u -r1.213 mini.c
--- mini/mini.c	2 Apr 2004 15:51:53 -0000	1.213
+++ mini/mini.c	4 Apr 2004 11:06:48 -0000
@@ -7315,7 +7315,7 @@
 
 	code = mono_arch_emit_prolog (cfg);
 
-	if (cfg->prof_options & MONO_PROFILE_ENTER_LEAVE)
+	if ((cfg->prof_options & MONO_PROFILE_ENTER_LEAVE) && mono_profiler_method_filter (cfg->method))
 		code = mono_arch_instrument_prolog (cfg, mono_profiler_method_enter, code, FALSE);
 
 	cfg->code_len = code - cfg->native_code;
@@ -7351,7 +7351,7 @@
 
 	cfg->epilog_begin = cfg->code_len;
 
-	if (cfg->prof_options & MONO_PROFILE_ENTER_LEAVE)
+	if ((cfg->prof_options & MONO_PROFILE_ENTER_LEAVE) && mono_profiler_method_filter (cfg->method))
 		code = mono_arch_instrument_epilog (cfg, mono_profiler_method_leave, code, FALSE);
 
 	cfg->code_len = code - cfg->native_code;
Index: profiler/Makefile.am
===================================================================
RCS file: /cvs/public/mono/mono/profiler/Makefile.am,v
retrieving revision 1.1
diff -u -r1.1 Makefile.am
--- profiler/Makefile.am	1 Jul 2003 09:35:48 -0000	1.1
+++ profiler/Makefile.am	4 Apr 2004 11:06:48 -0000
@@ -6,10 +6,17 @@
 	$(GLIB_CFLAGS)
 
 if JIT_SUPPORTED
-
-lib_LTLIBRARIES = libmono-profiler-cov.la
+lib_LTLIBRARIES = \
+	libmono-profiler-simple.la \
+	libmono-profiler-cov.la \
+	libmono-profiler-trace.la
 endif
 
+libmono_profiler_simple_la_SOURCES = simple.c
+libmono_profiler_simple_la_LIBADD = $(top_builddir)/mono/mini/libmono.la
+
 libmono_profiler_cov_la_SOURCES = mono-cov.c
 libmono_profiler_cov_la_LIBADD = $(top_builddir)/mono/mini/libmono.la
 
+libmono_profiler_trace_la_SOURCES = trace.c
+libmono_profiler_trace_la_LIBADD = $(top_builddir)/mono/mini/libmono.la
Index: profiler/mono-cov.c
===================================================================
RCS file: /cvs/public/mono/mono/profiler/mono-cov.c,v
retrieving revision 1.2
diff -u -r1.2 mono-cov.c
--- profiler/mono-cov.c	12 Nov 2003 14:12:47 -0000	1.2
+++ profiler/mono-cov.c	4 Apr 2004 11:06:48 -0000
@@ -55,7 +55,7 @@
 	mono_profiler_coverage_get (prof, method, coverage_callback);
 	if (prof->bb_coverage) {
 		char *name = mono_method_full_name (method, TRUE);
-		g_print ("Partial coverage: %s\n", name + 3);
+		g_print ("Partial coverage: %s\n", name);
 		g_free (name);
 		for (tmp = prof->bb_coverage; tmp; tmp = tmp->next) {
 			g_print ("\t%s\n", (char*)tmp->data);
@@ -99,7 +99,7 @@
 			continue;
 		}
 		name = mono_method_full_name (method, TRUE);
-		g_print ("Not covered: %s\n", name + 3);
+		g_print ("Not covered: %s\n", name);
 		g_free (name);
 	}
 }
@@ -124,9 +124,9 @@
 
 	prof = g_new0 (MonoProfiler, 1);
 	prof->hash = g_hash_table_new (NULL, NULL);
-	if (strncmp ("cov:", desc, 4) == 0 && desc [4]) {
+	if (desc) {
 		char *cname;
-		prof->assembly_name = g_strdup (desc + 4);
+		prof->assembly_name = g_strdup (desc);
 		cname = strchr (prof->assembly_name, '/');
 		if (cname) {
 			*cname = 0;
@@ -142,5 +142,3 @@
 
 	mono_profiler_set_events (MONO_PROFILE_ENTER_LEAVE | MONO_PROFILE_COVERAGE);
 }
-
-
