diff -urN mod_mono-1.0.4-orig/Makefile.win mod_mono-1.0.4-win32-2/Makefile.win
--- mod_mono-1.0.4-orig/Makefile.win	1970-01-01 01:00:00.000000000 +0100
+++ mod_mono-1.0.4-win32-2/Makefile.win	2004-11-11 23:04:55.000000000 +0100
@@ -0,0 +1,160 @@
+# Targets are:
+#   _mod_mono_r   - build mod_mono in Release mode
+#   _mod_mono_d   - build mod_mono in Debug mode
+#   _cleanr    - remove (most) files generated by a Release build
+#   _cleand    - remove (most) files generated by a Debug build
+#
+# The following install defaults may be customized;
+#
+#   Option      Default
+#   APACHEDIR   ..\..\
+#
+# For example;
+#
+#   nmake /f Makefile.win APACHEDIR=..\httpd-2.0.52 _mod_mono_r
+
+default: _mod_mono_r
+
+_mod_mono_r: 
+	@$(MAKE) $(MAKEOPT) -f Makefile.win CFG="mod_mono - Win32 Release" ALL
+
+_mod_mono_d: 
+	@$(MAKE) $(MAKEOPT) -f Makefile.win CFG="mod_mono - Win32 Debug" ALL
+
+_cleanr:
+	@$(MAKE) $(MAKEOPT) -f Makefile.win CFG="mod_mono - Win32 Release" CLEAN
+
+_cleand: 
+	@$(MAKE) $(MAKEOPT) -f Makefile.win CFG="mod_mono - Win32 Debug" CLEAN
+
+!IF !EXIST("$(APACHEDIR)") || !EXIST("$(APACHEDIR)\srclib\apr") || !EXIST("$(APACHEDIR)\srclib\apr-util")
+!MESSAGE Please check out or download and unpack the Apache Source for Win32
+!MESSAGE mod_mono cannot build without building Apache before!
+!MESSAGE 
+!ERROR mod_mono needs Apache for win32
+!ENDIF
+
+!IF "$(CFG)" == ""
+CFG=mod_mono - Win32 Release
+!ENDIF 
+
+!IF "$(CFG)" != "mod_mono - Win32 Release" && "$(CFG)" != "mod_mono - Win32 Debug"
+!ERROR An invalid configuration is specified.
+!ENDIF 
+
+!IF "$(APACHEDIR)" == ""
+APACHEDIR=../../
+!ENDIF
+
+!IF "$(OS)" == "Windows_NT"
+NULL=
+!ELSE 
+NULL=nul
+!ENDIF 
+
+!IF  "$(CFG)" == "mod_mono - Win32 Release"
+
+OUTDIR=.\Release
+INTDIR=.\Release
+# Begin Custom Macros
+OutDir=.\Release
+# End Custom Macros
+
+ALL : "$(OUTDIR)\mod_mono.so"
+
+CLEAN :
+	-@erase ".\include\mod_mono_config.h"
+	-@erase "$(INTDIR)\mod_mono.obj"
+	-@erase "$(INTDIR)\mod_mono_src.idb"
+	-@erase "$(INTDIR)\mod_mono_src.pdb"
+	-@erase "$(OUTDIR)\mod_mono.exp"
+	-@erase "$(OUTDIR)\mod_mono.lib"
+	-@erase "$(OUTDIR)\mod_mono.pdb"
+	-@erase "$(OUTDIR)\mod_mono.so"
+
+"$(OUTDIR)" :
+    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
+
+CPP=cl.exe
+CPP_PROJ=/nologo /MD /W3 /Zi /O2 /I "./include" /I "$(APACHEDIR)/include" /I "$(APACHEDIR)/srclib/apr/include" /I "$(APACHEDIR)/srclib/apr-util/include" /D "NDEBUG" /D "WIN32" /D "_WINDOWS" /D "APACHE2" /D "HAVE_CONFIG_H" /Fo"$(INTDIR)\\" /Fd"$(INTDIR)\mod_mono_src" /FD /c
+
+.c{$(INTDIR)}.obj::
+   $(CPP) @<<
+   $(CPP_PROJ) $< 
+<<
+
+MTL=midl.exe
+MTL_PROJ=/nologo /D "NDEBUG" /mktyplib203 /win32 
+
+LINK32=link.exe
+LINK32_FLAGS=kernel32.lib /nologo /subsystem:windows /dll /incremental:no /pdb:"$(OUTDIR)\mod_mono.pdb" /debug /machine:I386 /out:"$(OUTDIR)\mod_mono.so" /implib:"$(OUTDIR)\mod_mono.lib"
+LINK32_OBJS= \
+	"$(INTDIR)\mod_mono.obj" \
+	"$(APACHEDIR)\srclib\apr\Release\libapr.lib" \
+	"$(APACHEDIR)\Release\libhttpd.lib"
+
+"$(OUTDIR)\mod_mono.so" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
+    $(LINK32) @<<
+  $(LINK32_FLAGS) $(LINK32_OBJS)
+<<
+
+!ELSEIF  "$(CFG)" == "mod_mono - Win32 Debug"
+
+OUTDIR=.\Debug
+INTDIR=.\Debug
+# Begin Custom Macros
+OutDir=.\Debug
+# End Custom Macros
+
+ALL : "$(OUTDIR)\mod_mono.so"
+CLEAN :
+	-@erase ".\include\mod_mono_config.h"
+	-@erase "$(INTDIR)\mod_mono.obj"
+	-@erase "$(INTDIR)\mod_mono_src.idb"
+	-@erase "$(INTDIR)\mod_mono_src.pdb"
+	-@erase "$(OUTDIR)\mod_mono.exp"
+	-@erase "$(OUTDIR)\mod_mono.lib"
+	-@erase "$(OUTDIR)\mod_mono.pdb"
+	-@erase "$(OUTDIR)\mod_mono.so"
+
+"$(OUTDIR)" :
+    if not exist "$(OUTDIR)/$(NULL)" mkdir "$(OUTDIR)"
+
+CPP=cl.exe
+CPP_PROJ=/nologo /MDd /W3 /GX /Zi /Od /I "./include" /I "$(APACHEDIR)/include" /I "$(APACHEDIR)/srclib/apr/include" /I "$(APACHEDIR)/srclib/apr-util/include" /D "_DEBUG" /D "WIN32" /D "_WINDOWS" /D "APACHE2" /D "HAVE_CONFIG_H" /Fo"$(INTDIR)\\" /Fd"$(INTDIR)\mod_mono_src" /FD /c 
+
+.c{$(INTDIR)}.obj::
+   $(CPP) @<<
+   $(CPP_PROJ) $< 
+<<
+
+MTL=midl.exe
+MTL_PROJ=/nologo /D "_DEBUG" /mktyplib203 /win32 
+	
+LINK32=link.exe
+LINK32_FLAGS=kernel32.lib /nologo /subsystem:windows /dll /incremental:no /pdb:"$(OUTDIR)\mod_mono.pdb" /debug /machine:I386 /out:"$(OUTDIR)\mod_mono.so" /implib:"$(OUTDIR)\mod_mono.lib"
+LINK32_OBJS= \
+	"$(INTDIR)\mod_mono.obj" \
+	"$(APACHEDIR)\srclib\apr\Debug\libapr.lib" \
+	"$(APACHEDIR)\srclib\apr-util\Debug\libaprutil.lib" \
+	"$(APACHEDIR)\Debug\libhttpd.lib"
+
+"$(OUTDIR)\mod_mono.so" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
+    $(LINK32) @<<
+  $(LINK32_FLAGS) $(LINK32_OBJS)
+<<
+
+!ENDIF 
+
+SOURCE=.\src\mod_mono.c
+
+"$(INTDIR)\mod_mono.obj" : $(SOURCE) "$(INTDIR)" ".\include\mod_mono_config.h"
+	$(CPP) $(CPP_PROJ) $(SOURCE)
+	
+".\include\mod_mono_config.h" : $(SOURCE) "$(INTDIR)"
+	if not exist "include" mkdir "include"
+	<<tempfile.bat 
+	@echo off 
+	awk "{if ( $$1==\"AM_INIT_AUTOMAKE(mod_mono,\" ) print \"#define VERSION \\\"\" substr($$2, 0, length($$2)-1) \"\\\"\"; }" configure.in > ".\include\mod_mono_config.h"
+<< 
+
diff -urN mod_mono-1.0.4-orig/src/mod_mono.c mod_mono-1.0.4-win32-2/src/mod_mono.c
--- mod_mono-1.0.4-orig/src/mod_mono.c	2004-10-29 21:58:03.000000000 +0200
+++ mod_mono-1.0.4-win32-2/src/mod_mono.c	2004-11-11 20:45:12.000000000 +0100
@@ -496,13 +496,18 @@
 try_connect (mono_server_rec *conf, apr_socket_t **sock, apr_pool_t *pool)
 {
 	char *error;
+#ifndef WIN32
 	struct sockaddr_un unix_address;
 	struct sockaddr *ptradd;
+#endif
 	char *fn, *la;
 
 	fn = conf->filename ? conf->filename : SOCKET_FILE;
 	la = conf->listen_address ? conf->listen_address : LISTEN_ADDRESS;
 	if (conf->listen_port == NULL) {
+#ifdef WIN32
+		return -2; /* Unrecoverable */
+#else
 		apr_os_sock_t sock_fd;
 
 		apr_os_sock_get (&sock_fd, *sock);
@@ -511,6 +516,7 @@
 		ptradd = (struct sockaddr *) &unix_address;
 		if (connect (sock_fd, ptradd, sizeof (unix_address)) != -1)
 			return APR_SUCCESS;
+#endif
 	} else {
 		apr_status_t rv;
 		apr_sockaddr_t *sa;
@@ -532,9 +538,6 @@
 	}
 
 	switch (errno) {
-	case ENOENT:
-	case ECONNREFUSED:
-		return -1; /* Can try to launch mod-mono-server */
 	case EPERM:
 		error = strerror (errno);
 		if (conf->listen_port == NULL)
@@ -549,6 +552,8 @@
 		apr_socket_close (*sock);
 		return -2; /* Unrecoverable */
 	default:
+		if ( APR_STATUS_IS_ECONNREFUSED(errno) || APR_STATUS_IS_ENOENT(errno) )
+			return -1; /* Can try to launch mod-mono-server */
 		error = strerror (errno);
 		if (conf->listen_port == NULL)
 			ap_log_error (APLOG_MARK, APLOG_ERR, STATUS_AND_SERVER,
@@ -596,9 +601,11 @@
 }
 
 #	else
+#		ifndef WIN32
 #	error No setenv or putenv found!
 #endif
 #endif
+#endif
 
 static void
 set_process_limits (int max_cpu_time, int max_memory)
@@ -627,10 +634,12 @@
 static void
 fork_mod_mono_server (apr_pool_t *pool, mono_server_rec *server_conf)
 {
-	pid_t pid;
-	int i;
+	apr_status_t rc;
+ 	apr_procattr_t *procattr;
+	apr_proc_t *procnew;
+
 	const int MAXARGS = 20;
-	char *argv [MAXARGS];
+	char *argv [20];
 	int argi;
 	char *path;
 	char *tmp;
@@ -639,7 +648,6 @@
 	char *wapidir;
 	int max_memory = 0;
 	int max_cpu_time = 0;
-	int status;
 
 	if (server_conf->max_memory != NULL)
 		max_memory = atoi (server_conf->max_memory);
@@ -647,24 +655,8 @@
 	if (server_conf->max_cpu_time != NULL)
 		max_cpu_time = atoi (server_conf->max_cpu_time);
 
-	pid = fork ();
-	if (pid > 0) {
-		wait (&status);
-		return;
-	}
-
-	pid = fork ();
-	if (pid > 0)
-		exit (0);
-
-	setsid ();
-	chdir ("/");
-	umask (0077);
 	DEBUG_PRINT (1, "child started");
 	
-	for (i = getdtablesize () - 1; i >= 3; i--)
-		close (i);
-
 	set_process_limits (max_cpu_time, max_memory);
 	tmp = getenv ("PATH");
 	DEBUG_PRINT (1, "PATH: %s", tmp);
@@ -679,27 +671,23 @@
 		path = apr_pcalloc (pool, strlen (tmp) + 1 +
 					  strlen (monodir) + 1 +
 					  strlen (serverdir) + 1);
-		sprintf (path, "%s:%s:%s", monodir, serverdir, tmp);
+		sprintf (path, "%s" PATH_DELIMITER "%s" PATH_DELIMITER "%s", monodir, serverdir, tmp);
 	} else {
 		path = apr_pcalloc (pool, strlen (tmp) + 1 +
 					  strlen (monodir) + 1);
 
-		sprintf (path, "%s:%s", monodir, tmp);
+		sprintf (path, "%s" PATH_DELIMITER "%s", monodir, tmp);
 	}
 
 	DEBUG_PRINT (1, "PATH after: %s", path);
-	SETENV (pool, "PATH", path);
-	SETENV (pool, "MONO_PATH", server_conf->path);
 	wapidir = apr_pcalloc (pool, strlen (server_conf->wapidir) + 5 + 2);
 	sprintf (wapidir, "%s/%s", server_conf->wapidir, ".wapi");
-	mkdir (wapidir, 0700);
+	apr_dir_make (wapidir, (APR_UREAD | APR_UWRITE | APR_UEXECUTE), pool);
 	if (chmod (wapidir, 0700) != 0 && (errno == EPERM || errno == EACCES)) {
 		ap_log_error (APLOG_MARK, APLOG_DEBUG, STATUS_AND_SERVER,
 			"%s: %s", wapidir, strerror (errno));
 		exit (1);
 	}
-	
-	SETENV (pool, "MONO_SHARED_DIR", server_conf->wapidir);
 
 	memset (argv, 0, sizeof (char *) * MAXARGS);
 	argi = 0;
@@ -754,20 +742,34 @@
  	 * array out-of-bounds. 
 	 */
 
-	ap_log_error (APLOG_MARK, APLOG_DEBUG, STATUS_AND_SERVER,
-                      "running '%s %s %s %s %s %s %s %s %s %s %s %s %s'",
-                      argv [0], argv [1], argv [2], argv [3], argv [4],
-		      argv [5], argv [6], argv [7], argv [8], 
-		      argv [9], argv [10], argv [11], argv [12]);
-
-	execv (argv [0], argv);
-	ap_log_error (APLOG_MARK, APLOG_ERR, STATUS_AND_SERVER,
-                      "Failed running '%s %s %s %s %s %s %s %s %s %s %s %s %s'. Reason: %s",
-                      argv [0], argv [1], argv [2], argv [3], argv [4],
-		      argv [5], argv [6], argv [7], argv [8],
-		      argv [9], argv [10], argv [11], argv [12],
-		      strerror (errno));
-	exit (1);
+	if (((rc = apr_procattr_create(&procattr, pool)) != APR_SUCCESS) ||
+		((rc = apr_procattr_io_set(procattr, APR_FULL_BLOCK, APR_FULL_BLOCK, APR_FULL_BLOCK)) != APR_SUCCESS) || 
+		((rc = apr_procattr_dir_set(procattr, ap_make_dirstr_parent(pool, argv[0]))) != APR_SUCCESS) ||
+		((rc = apr_procattr_cmdtype_set(procattr, APR_PROGRAM_ENV)) != APR_SUCCESS)) {
+		/* Something bad happened, give up and go away. */
+	} else {
+		// Setup environment
+		apr_env_set("PATH", path, pool);
+		apr_env_set("MONO_PATH", server_conf->path, pool);
+		apr_env_set("MONO_SHARED_DIR", server_conf->wapidir, pool);
+		procnew = apr_pcalloc(pool, sizeof(*procnew));
+		rc = apr_proc_create(procnew, argv[0], (const char **)argv, NULL, procattr, pool);
+		if (rc == APR_SUCCESS) {
+			apr_pool_note_subprocess(pool, procnew, APR_JUST_WAIT);
+			ap_log_error (APLOG_MARK, APLOG_DEBUG, STATUS_AND_SERVER,
+				      "running '%s %s %s %s %s %s %s %s %s %s %s %s %s'",
+				      argv [0], argv [1], argv [2], argv [3], argv [4],
+				      argv [5], argv [6], argv [7], argv [8], 
+				      argv [9], argv [10], argv [11], argv [12]);
+		} else {
+			ap_log_error (APLOG_MARK, APLOG_ERR, STATUS_AND_SERVER,
+				"Failed running '%s %s %s %s %s %s %s %s %s %s %s %s %s'. Reason: %s",
+				argv [0], argv [1], argv [2], argv [3], argv [4],
+				argv [5], argv [6], argv [7], argv [8],
+				argv [9], argv [10], argv [11], argv [12],
+				strerror (errno));
+		}
+	}
 }
 
 static apr_status_t
@@ -851,7 +853,7 @@
 
 	DEBUG_PRINT (1, "parent waiting");
 	for (i = 0; i < 3; i++) {
-		sleep (1);
+		apr_sleep (apr_time_from_sec(1));
 		DEBUG_PRINT (1, "try_connect %d", i);
 		rv = try_connect (server_conf, sock, pool);
 		if (rv == APR_SUCCESS)
@@ -1063,7 +1065,7 @@
 	rv = setup_socket (&sock, mono_conf, pconf);
 	if (rv == APR_SUCCESS) {
 		write_data (sock, termstr, 1);
-		sleep (1);
+		apr_sleep (apr_time_from_sec(1));
 		apr_socket_close (sock);
 	}
 
diff -urN mod_mono-1.0.4-orig/src/mod_mono.h mod_mono-1.0.4-win32-2/src/mod_mono.h
--- mod_mono-1.0.4-orig/src/mod_mono.h	2004-09-22 00:19:05.000000000 +0200
+++ mod_mono-1.0.4-win32-2/src/mod_mono.h	2004-11-11 20:48:34.000000000 +0100
@@ -23,14 +23,22 @@
 #ifndef __MOD_MONO_H
 #define __MOD_MONO_H
 
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #include <errno.h>
+#ifdef HAVE_NETDB_H
 #include <netdb.h>
+#endif
+#ifndef WIN32
 #include <sys/select.h>
+#include <sys/un.h>
+#endif
 #include <sys/stat.h>
 #include <sys/types.h>
-#include <sys/un.h>
+#ifdef APR_HAVE_SYS_WAIT_H
 #include <sys/wait.h>
+#endif
 #include "httpd.h"
 #include "http_core.h"
 #include "http_log.h"
@@ -102,8 +110,10 @@
 /* Apache 2 only */
 #define STATUS_AND_SERVER 0, NULL
 #include <http_protocol.h>
+#include <util_script.h>
 #include <apr_strings.h>
 #include <apr_support.h>
+#include <apr_env.h>
 /* End Apache 2 only */
 #endif
 
@@ -112,6 +122,12 @@
 #define MONO_PREFIX "/usr"
 #endif
 
+#ifndef WIN32
+#define PATH_DELIMITER ":"
+#else
+#define PATH_DELIMITER ";"
+#endif
+
 #define EXECUTABLE_PATH 	MONO_PREFIX "/bin/mono"
 #define MONO_PATH		MONO_PREFIX "/lib"
 #define MODMONO_SERVER_PATH 	MONO_PREFIX "/bin/mod-mono-server.exe"
