Index: mono/mini/mini-ppc.c
===================================================================
--- mono.orig/mini/mini-ppc.c	2009-01-23 22:23:00.000000000 +0100
+++ mono/mini/mini-ppc.c	2009-01-23 22:23:56.000000000 +0100
@@ -2443,8 +2443,8 @@
 static guchar*
 emit_float_to_int (MonoCompile *cfg, guchar *code, int dreg, int sreg, int size, gboolean is_signed)
 {
-	int offset = cfg->arch.fp_conv_var_offset;
-	int sub_offset;
+	long offset = cfg->arch.fp_conv_var_offset;
+	long sub_offset;
 	/* sreg is a float, dreg is an integer reg. ppc_f0 is used a scratch */
 #ifdef __mono_ppc64__
 	if (size == 8) {
@@ -2955,7 +2955,7 @@
 static guint8*
 emit_reserve_param_area (MonoCompile *cfg, guint8 *code)
 {
-	int size = cfg->param_area;
+	long size = cfg->param_area;
 
 	size += MONO_ARCH_FRAME_ALIGNMENT - 1;
 	size &= -MONO_ARCH_FRAME_ALIGNMENT;
@@ -2977,7 +2977,7 @@
 static guint8*
 emit_unreserve_param_area (MonoCompile *cfg, guint8 *code)
 {
-	int size = cfg->param_area;
+	long size = cfg->param_area;
 
 	size += MONO_ARCH_FRAME_ALIGNMENT - 1;
 	size &= -MONO_ARCH_FRAME_ALIGNMENT;
@@ -3556,10 +3556,11 @@
 			 * we're leaving the method.
 			 */
 			if (1 || cfg->flags & MONO_CFG_HAS_CALLS) {
-				if (ppc_is_imm16 (cfg->stack_usage + PPC_RET_ADDR_OFFSET)) {
-					ppc_load_reg (code, ppc_r0, cfg->stack_usage + PPC_RET_ADDR_OFFSET, cfg->frame_reg);
+				long ret_offset = cfg->stack_usage + PPC_RET_ADDR_OFFSET;
+				if (ppc_is_imm16 (ret_offset)) {
+					ppc_load_reg (code, ppc_r0, ret_offset, cfg->frame_reg);
 				} else {
-					ppc_load (code, ppc_r11, cfg->stack_usage + PPC_RET_ADDR_OFFSET);
+					ppc_load (code, ppc_r11, ret_offset);
 					ppc_load_reg_indexed (code, ppc_r0, cfg->frame_reg, ppc_r11);
 				}
 				ppc_mtlr (code, ppc_r0);
@@ -3600,10 +3601,11 @@
 			ppc_load_reg (code, ppc_r0, 0, ins->sreg1);
 			break;
 		case OP_ARGLIST: {
-			if (ppc_is_imm16 (cfg->sig_cookie + cfg->stack_usage)) {
-				ppc_addi (code, ppc_r0, cfg->frame_reg, cfg->sig_cookie + cfg->stack_usage);
+			long cookie_offset = cfg->sig_cookie + cfg->stack_usage;
+			if (ppc_is_imm16 (cookie_offset)) {
+				ppc_addi (code, ppc_r0, cfg->frame_reg, cookie_offset);
 			} else {
-				ppc_load (code, ppc_r0, cfg->sig_cookie + cfg->stack_usage);
+				ppc_load (code, ppc_r0, cookie_offset);
 				ppc_add (code, ppc_r0, cfg->frame_reg, ppc_r0);
 			}
 			ppc_store_reg (code, ppc_r0, 0, ins->sreg1);
@@ -4074,7 +4076,11 @@
 			break;
 		case OP_JUMP_TABLE:
 			mono_add_patch_info (cfg, offset, (MonoJumpInfoType)ins->inst_i1, ins->inst_p0);
+#ifdef __mono_ppc64__
 			ppc_load_sequence (code, ins->dreg, (gulong)0x0f0f0f0f0f0f0f0fL);
+#else
+			ppc_load_sequence (code, ins->dreg, (gulong)0x0f0f0f0fL);
+#endif
 			break;
 		}
 
@@ -4354,7 +4360,8 @@
 	MonoBasicBlock *bb;
 	MonoMethodSignature *sig;
 	MonoInst *inst;
-	int alloc_size, pos, max_offset, i;
+	long alloc_size, pos, max_offset;
+	int i;
 	guint8 *code;
 	CallInfo *cinfo;
 	int tracing = 0;
@@ -4472,7 +4479,7 @@
 				g_assert_not_reached ();
 
 			if (cfg->verbose_level > 2)
-				g_print ("Argument %d assigned to register %s\n", pos, mono_arch_regname (inst->dreg));
+				g_print ("Argument %ld assigned to register %s\n", pos, mono_arch_regname (inst->dreg));
 		} else {
 			/* the argument should be put on the stack: FIXME handle size != word  */
 			if (ainfo->regtype == RegTypeGeneral) {
@@ -4718,7 +4725,11 @@
 		ppc_store_reg (code, ppc_sp, G_STRUCT_OFFSET(MonoLMF, ebp), ppc_r11);
 		/* save the current IP */
 		mono_add_patch_info (cfg, code - cfg->native_code, MONO_PATCH_INFO_IP, NULL);
+#ifdef __mono_ppc64__
 		ppc_load_sequence (code, ppc_r0, (gulong)0x0101010101010101L);
+#else
+		ppc_load_sequence (code, ppc_r0, (gulong)0x01010101L);
+#endif
 		ppc_store_reg (code, ppc_r0, G_STRUCT_OFFSET(MonoLMF, eip), ppc_r11);
 	}
 
@@ -4796,10 +4807,11 @@
 		ppc_addic (code, ppc_sp, ppc_r8, cfg->stack_usage);
 	} else {
 		if (1 || cfg->flags & MONO_CFG_HAS_CALLS) {
-			if (ppc_is_imm16 (cfg->stack_usage + PPC_RET_ADDR_OFFSET)) {
-				ppc_load_reg (code, ppc_r0, cfg->stack_usage + PPC_RET_ADDR_OFFSET, cfg->frame_reg);
+			long return_offset = cfg->stack_usage + PPC_RET_ADDR_OFFSET;
+			if (ppc_is_imm16 (return_offset)) {
+				ppc_load_reg (code, ppc_r0, return_offset, cfg->frame_reg);
 			} else {
-				ppc_load (code, ppc_r11, cfg->stack_usage + PPC_RET_ADDR_OFFSET);
+				ppc_load (code, ppc_r11, return_offset);
 				ppc_load_reg_indexed (code, ppc_r0, cfg->frame_reg, ppc_r11);
 			}
 			ppc_mtlr (code, ppc_r0);
