Index: mono/mini/mini-ppc.c
===================================================================
--- mono.orig/mini/mini-ppc.c	2009-01-24 16:52:47.000000000 +0100
+++ mono/mini/mini-ppc.c	2009-01-24 17:06:32.000000000 +0100
@@ -367,6 +367,22 @@
 		dreg = ppc_r12;
 	}
 #ifdef __mono_ppc64__
+	/* the hardware has multiple load/store units and the move is long
+	   enough to use more then one regiester, then use load/load/store/store
+	   to execute 2 instructions per cycle. */
+#ifdef __linux__
+	if ((linux_ppc_LSUs > 1) && (dreg != ppc_r12) && (sreg != ppc_r12)) {
+		while (size >= 16) {
+			ppc_load_reg (code, ppc_r0, soffset, sreg);
+			ppc_load_reg (code, ppc_r12, soffset+8, sreg);
+			ppc_store_reg (code, ppc_r0, doffset, dreg);
+			ppc_store_reg (code, ppc_r12, doffset+8, dreg);
+			size -= 16;
+			soffset += 16;
+			doffset += 16;
+		}
+	}
+#endif
 	while (size >= 8) {
 		ppc_load_reg (code, ppc_r0, soffset, sreg);
 		ppc_store_reg (code, ppc_r0, doffset, dreg);
@@ -374,6 +390,20 @@
 		soffset += 8;
 		doffset += 8;
 	}
+#else
+#ifdef __linux__
+	if ((linux_ppc_LSUs > 1) && (dreg != ppc_r12) && (sreg != ppc_r12)) {
+		while (size >= 8) {
+			ppc_load_reg (code, ppc_r0, soffset, sreg);
+			ppc_load_reg (code, ppc_r12, soffset+4, sreg);
+			ppc_store_reg (code, ppc_r0, doffset, dreg);
+			ppc_store_reg (code, ppc_r12, doffset+4, dreg);
+			size -= 8;
+			soffset += 8;
+			doffset += 8;
+		}
+	}
+#endif
 #endif
 	while (size >= 4) {
 		ppc_lwz (code, ppc_r0, soffset, sreg);
@@ -3311,6 +3341,15 @@
 			}
 			break;
 		case OP_LOADI4_MEMBASE:
+#ifdef __mono_ppc64__
+			if (ppc_is_imm16 (ins->inst_offset)) {
+				ppc_lwa (code, ins->dreg, ins->inst_offset, ins->inst_basereg);
+			} else {
+				ppc_load (code, ppc_r0, ins->inst_offset);
+				ppc_lwax (code, ins->dreg, ins->inst_basereg, ppc_r0);
+			}
+			break;
+#endif
 		case OP_LOADU4_MEMBASE:
 			if (ppc_is_imm16 (ins->inst_offset)) {
 				ppc_lwz (code, ins->dreg, ins->inst_offset, ins->inst_basereg);
@@ -3318,10 +3357,6 @@
 				ppc_load (code, ppc_r0, ins->inst_offset);
 				ppc_lwzx (code, ins->dreg, ins->inst_basereg, ppc_r0);
 			}
-#ifdef __mono_ppc64__
-			if (ins->opcode == OP_LOADI4_MEMBASE)
-				ppc_extsw (code, ins->dreg, ins->dreg);
-#endif
 			break;
 		case OP_LOADI1_MEMBASE:
 		case OP_LOADU1_MEMBASE:
@@ -3769,7 +3804,7 @@
 			code = emit_load_volatile_arguments (cfg, code);
 
 			if (ppc_is_imm16 (cfg->stack_usage)) {
-				ppc_addic (code, ppc_r11, cfg->frame_reg, cfg->stack_usage);
+				ppc_addi (code, ppc_r11, cfg->frame_reg, cfg->stack_usage);
 			} else {
 				ppc_load (code, ppc_r11, cfg->stack_usage);
 				ppc_add (code, ppc_r11, cfg->frame_reg, ppc_r11);
@@ -5032,9 +5067,9 @@
 				}
 			}
 			if (cfg->frame_reg != ppc_sp)
-				ppc_addic (code, ppc_sp, ppc_r11, cfg->stack_usage);
+				ppc_addi (code, ppc_sp, ppc_r11, cfg->stack_usage);
 			else
-				ppc_addic (code, ppc_sp, ppc_sp, cfg->stack_usage);
+				ppc_addi (code, ppc_sp, ppc_sp, cfg->stack_usage);
 		} else {
 			ppc_load (code, ppc_r11, cfg->stack_usage);
 			if (cfg->used_int_regs) {
