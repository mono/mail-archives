Index: Test/System.Xml.Xsl/XsltExceptionTests.cs
===================================================================
--- Test/System.Xml.Xsl/XsltExceptionTests.cs	(revision 0)
+++ Test/System.Xml.Xsl/XsltExceptionTests.cs	(revision 0)
@@ -0,0 +1,120 @@
+//
+// XsltExceptionTests.cs - Unit tests for System.Xml.Xsl.XsltException
+//
+// Author:
+//	Gert Driesen <drieseng@users.sourceforge.net>
+//
+// Copyright (C) 2005 Novell, Inc (http://www.novell.com)
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using NUnit.Framework;
+
+using System;
+using System.Runtime.Serialization;
+using System.Xml.Xsl;
+
+namespace MonoCasTests.System.Xml.Xsl {
+	[TestFixture]
+	public class XsltExceptionTests
+	{
+#if NET_2_0
+		[Test]
+		public void Constructor0 ()
+		{
+			XsltException xsltException = new XsltException ();
+			Assert.AreEqual (0, xsltException.LineNumber, "#1");
+			Assert.AreEqual (0, xsltException.LinePosition, "#2");
+			Assert.AreEqual (string.Empty, xsltException.Message, "#3");
+			Assert.IsNull (xsltException.SourceUri, "#4");
+			Assert.IsNull (xsltException.InnerException, "#5");
+			Assert.IsNull (xsltException.Source, "#6");
+			Assert.IsNull (xsltException.StackTrace, "#7");
+			Assert.IsNull (xsltException.TargetSite, "#8");
+		}
+
+		[Test]
+		public void Constructor1 ()
+		{
+			string msg = "mono";
+
+			XsltException xsltException = new XsltException (msg);
+			Assert.AreEqual (0, xsltException.LineNumber, "#1");
+			Assert.AreEqual (0, xsltException.LinePosition, "#2");
+			Assert.AreEqual (msg, xsltException.Message, "#3");
+			Assert.IsNull (xsltException.SourceUri, "#4");
+			Assert.IsNull (xsltException.InnerException, "#5");
+			Assert.IsNull (xsltException.Source, "#6");
+			Assert.IsNull (xsltException.StackTrace, "#7");
+			Assert.IsNull (xsltException.TargetSite, "#8");
+		}
+#endif
+
+		[Test]
+		[Category ("NotWorking")]
+		public void Constructor2 ()
+		{
+			string msg = "mono";
+			Exception cause = new ApplicationException ("cause");
+
+			XsltException xsltException = new XsltException (msg, cause);
+			Assert.AreEqual (0, xsltException.LineNumber, "#A1");
+			Assert.AreEqual (0, xsltException.LinePosition, "#A2");
+			Assert.AreEqual (msg, xsltException.Message, "#A3");
+			Assert.IsNull (xsltException.SourceUri, "#A4");
+			Assert.AreSame (cause, xsltException.InnerException, "#A5");
+			Assert.IsNull (xsltException.Source, "#A6");
+			Assert.IsNull (xsltException.StackTrace, "#A7");
+			Assert.IsNull (xsltException.TargetSite, "#A8");
+
+			xsltException = new XsltException ((string) null, cause);
+			Assert.AreEqual (0, xsltException.LineNumber, "#B1");
+			Assert.AreEqual (0, xsltException.LinePosition, "#B2");
+			Assert.IsNotNull (xsltException.Message, "#B3");
+			Assert.AreEqual (string.Empty, xsltException.Message, "#B4");
+			Assert.IsNull (xsltException.SourceUri, "#B5");
+			Assert.AreSame (cause, xsltException.InnerException, "#B6");
+			Assert.IsNull (xsltException.Source, "#B7");
+			Assert.IsNull (xsltException.StackTrace, "#B8");
+			Assert.IsNull (xsltException.TargetSite, "#B9");
+
+			xsltException = new XsltException (msg, (Exception) null);
+			Assert.AreEqual (0, xsltException.LineNumber, "#C1");
+			Assert.AreEqual (0, xsltException.LinePosition, "#C2");
+			Assert.AreEqual (msg, xsltException.Message, "#C3");
+			Assert.IsNull (xsltException.SourceUri, "#C4");
+			Assert.IsNull (xsltException.InnerException, "#C5");
+			Assert.IsNull (xsltException.Source, "#C6");
+			Assert.IsNull (xsltException.StackTrace, "#C7");
+			Assert.IsNull (xsltException.TargetSite, "#C8");
+
+			xsltException = new XsltException ((string) null, (Exception) null);
+			Assert.AreEqual (0, xsltException.LineNumber, "#D1");
+			Assert.AreEqual (0, xsltException.LinePosition, "#D2");
+			Assert.AreEqual (string.Empty, xsltException.Message, "#D3");
+			Assert.IsNull (xsltException.SourceUri, "#D4");
+			Assert.IsNull (xsltException.InnerException, "#D5");
+			Assert.IsNull (xsltException.Source, "#D6");
+			Assert.IsNull (xsltException.StackTrace, "#D7");
+			Assert.IsNull (xsltException.TargetSite, "#D8");
+		}
+	}
+}

Property changes on: Test/System.Xml.Xsl/XsltExceptionTests.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: Test/System.Xml.Xsl/ChangeLog
===================================================================
--- Test/System.Xml.Xsl/ChangeLog	(revision 54472)
+++ Test/System.Xml.Xsl/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2005-12-17  Gert Driesen  <drieseng@users.sourceforge.net>
+
+	* XsltCompileExceptionTests.cs: Added tests for ctors.
+	* XsltExceptionTests.cs: Added tests for ctors.
+	* XslTransformTests.cs: Added tests for validation of <xsl:output>
+	attributes.
+
 2005-12-12  Atsushi Enomoto  <atsushi@ximian.com>
 
 	* XslTransformTests.cs : (LocalParameter) [NotDotNet] should not have
Index: Test/System.Xml.Xsl/XslTransformTests.cs
===================================================================
--- Test/System.Xml.Xsl/XslTransformTests.cs	(revision 54472)
+++ Test/System.Xml.Xsl/XslTransformTests.cs	(working copy)
@@ -446,5 +446,367 @@
 
 			Assert.AreEqual ("local-param1-arg/local-param2-arg", sw.ToString ());
 		}
+
+		[Test]
+		public void Output_Standalone ()
+		{
+			StringWriter sw = null;
+			XsltArgumentList xsltArgs = new XsltArgumentList ();
+			XslTransform xsltProcessor = new XslTransform ();
+
+			string xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output {0} />
+					<xsl:template match=""/"">
+						<root />
+					</xsl:template>
+				</xsl:stylesheet>";
+
+			XmlDocument xmlDoc = new XmlDocument ();
+			xmlDoc.LoadXml ("<dummy />");
+
+			sw = new StringWriter ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (
+				string.Format(xsltFragment, "standalone=\"yes\""))), 
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+			xsltProcessor.Transform (xmlDoc, xsltArgs, sw, new XmlUrlResolver ());
+
+			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"" +
+				" standalone=\"yes\"?><root />", sw.ToString (), "#1");
+
+			sw = new StringWriter ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (
+				string.Format (xsltFragment, "standalone=\"no\""))),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+			xsltProcessor.Transform (xmlDoc, xsltArgs, sw, new XmlUrlResolver ());
+
+			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"" +
+				" standalone=\"no\"?><root />", sw.ToString (), "#2");
+
+			sw = new StringWriter ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (
+				string.Format (xsltFragment, ""))),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+			xsltProcessor.Transform (xmlDoc, xsltArgs, sw, new XmlUrlResolver ());
+
+			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"?>" +
+				"<root />", sw.ToString (), "#3");
+		}
+
+		[Test]
+		[ExpectedException (typeof (XsltCompileException))]
+		public void Output_Standalone_Invalid ()
+		{
+			string xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output standalone=""Yes"" />
+				</xsl:stylesheet>";
+			XslTransform xsltProcessor = new XslTransform ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (xsltFragment)),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+		}
+
+		[Test]
+		[ExpectedException (typeof (XsltCompileException))]
+		public void Output_Standalone_Empty ()
+		{
+			string xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output standalone="""" />
+				</xsl:stylesheet>";
+			XslTransform xsltProcessor = new XslTransform ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (xsltFragment)),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+		}
+
+		[Test]
+		public void Output_OmitXmlDeclaration ()
+		{
+			StringWriter sw = null;
+			XsltArgumentList xsltArgs = new XsltArgumentList ();
+			XslTransform xsltProcessor = new XslTransform ();
+
+			string xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output {0} />
+					<xsl:template match=""/"">
+						<root />
+					</xsl:template>
+				</xsl:stylesheet>";
+
+			XmlDocument xmlDoc = new XmlDocument ();
+			xmlDoc.LoadXml ("<dummy />");
+
+			sw = new StringWriter ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (
+				string.Format (xsltFragment, "omit-xml-declaration=\"yes\""))),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+			xsltProcessor.Transform (xmlDoc, xsltArgs, sw, new XmlUrlResolver ());
+
+			Assert.AreEqual ("<root />", sw.ToString (), "#1");
+
+			sw = new StringWriter ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (
+				string.Format (xsltFragment, "omit-xml-declaration=\"no\""))),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+			xsltProcessor.Transform (xmlDoc, xsltArgs, sw, new XmlUrlResolver ());
+
+			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"?>" +
+				"<root />", sw.ToString (), "#2");
+		}
+
+		[Test]
+		[ExpectedException (typeof (XsltCompileException))]
+		public void Output_OmitXmlDeclaration_Invalid ()
+		{
+			string xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output omit-xml-declaration=""Yes"" />
+				</xsl:stylesheet>";
+			XslTransform xsltProcessor = new XslTransform ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (xsltFragment)),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+		}
+
+		[Test]
+		[ExpectedException (typeof (XsltCompileException))]
+		public void Output_OmitXmlDeclaration_Empty ()
+		{
+			string xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output omit-xml-declaration="""" />
+				</xsl:stylesheet>";
+			XslTransform xsltProcessor = new XslTransform ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (xsltFragment)),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+		}
+
+		[Test]
+		public void Output_DocType ()
+		{
+			XsltArgumentList xsltArgs = new XsltArgumentList ();
+			XslTransform xsltProcessor = new XslTransform ();
+
+			// set both doctype-system and doctype-public
+			string xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output doctype-public=""-//W3C//DTD XHTML 1.0 Strict//EN"" 
+						doctype-system=""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"" />
+					<xsl:template match=""/"">
+						<test />
+					</xsl:template>
+				</xsl:stylesheet>";
+
+			XmlDocument xmlDoc = new XmlDocument ();
+			xmlDoc.LoadXml ("<dummy />");
+
+			StringWriter sw = new StringWriter ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (xsltFragment)),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+			xsltProcessor.Transform (xmlDoc, xsltArgs, sw, new XmlUrlResolver ());
+
+			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"?>" +
+				"<!DOCTYPE test PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" " +
+				"\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">" +
+				"<test />", sw.ToString (), "#1");
+
+			// only set doctype-public
+			xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output doctype-public=""-//W3C//DTD XHTML 1.0 Strict//EN"" />
+					<xsl:template match=""/"">
+						<test />
+					</xsl:template>
+				</xsl:stylesheet>";
+
+			sw.GetStringBuilder ().Length = 0;
+			xsltProcessor.Load (new XmlTextReader (new StringReader (xsltFragment)),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+			xsltProcessor.Transform (xmlDoc, xsltArgs, sw, new XmlUrlResolver ());
+
+			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"?>" +
+				"<test />", sw.ToString (), "#2");
+
+			// only set doctype-system
+			xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output doctype-system=""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"" />
+					<xsl:template match=""/"">
+						<test />
+					</xsl:template>
+				</xsl:stylesheet>";
+
+			sw.GetStringBuilder ().Length = 0;
+			xsltProcessor.Load (new XmlTextReader (new StringReader (xsltFragment)),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+			xsltProcessor.Transform (xmlDoc, xsltArgs, sw, new XmlUrlResolver ());
+
+			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"?>" +
+				"<!DOCTYPE test SYSTEM \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">" +
+				"<test />", sw.ToString (), "#3");
+
+			// set empty doctype-public and empty doctype-system
+			xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output doctype-public="""" doctype-system="""" />
+					<xsl:template match=""/"">
+						<test />
+					</xsl:template>
+				</xsl:stylesheet>";
+
+			sw.GetStringBuilder ().Length = 0;
+			xsltProcessor.Load (new XmlTextReader (new StringReader (xsltFragment)),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+			xsltProcessor.Transform (xmlDoc, xsltArgs, sw, new XmlUrlResolver ());
+
+			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"?>" +
+				"<!DOCTYPE test PUBLIC \"\" \"\">" +
+				"<test />", sw.ToString (), "#4");
+
+			// set empty doctype-public
+			xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output doctype-public="""" />
+					<xsl:template match=""/"">
+						<test />
+					</xsl:template>
+				</xsl:stylesheet>";
+
+			sw.GetStringBuilder ().Length = 0;
+			xsltProcessor.Load (new XmlTextReader (new StringReader (xsltFragment)),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+			xsltProcessor.Transform (xmlDoc, xsltArgs, sw, new XmlUrlResolver ());
+
+			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"?>" +
+				"<test />", sw.ToString (), "#5");
+
+			// set empty doctype-system
+			xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output doctype-system="""" />
+					<xsl:template match=""/"">
+						<test />
+					</xsl:template>
+				</xsl:stylesheet>";
+
+			sw.GetStringBuilder ().Length = 0;
+			xsltProcessor.Load (new XmlTextReader (new StringReader (xsltFragment)),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+			xsltProcessor.Transform (xmlDoc, xsltArgs, sw, new XmlUrlResolver ());
+
+			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"?>" +
+				"<!DOCTYPE test SYSTEM \"\">" +
+				"<test />", sw.ToString (), "#6");
+		}
+
+		[Test]
+		public void Output_Indent ()
+		{
+			XsltArgumentList xsltArgs = new XsltArgumentList ();
+			XslTransform xsltProcessor = new XslTransform ();
+
+			string xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output {0} />
+					<xsl:template match=""/"">
+						<xsl:element name=""test"">
+							<xsl:element name=""something"">
+								<xsl:element name=""else"" />
+							</xsl:element>
+						</xsl:element>
+					</xsl:template>
+				</xsl:stylesheet>";
+
+			XmlDocument xmlDoc = new XmlDocument ();
+			xmlDoc.LoadXml ("<dummy />");
+
+			// set indent to yes
+			StringWriter sw = new StringWriter ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (
+				string.Format (xsltFragment, "indent=\"yes\""))),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+			xsltProcessor.Transform (xmlDoc, xsltArgs, sw, new XmlUrlResolver ());
+
+			Assert.AreEqual (string.Format(CultureInfo.InvariantCulture,
+				"<?xml version=\"1.0\" encoding=\"utf-16\"?>{0}" +
+				"<test>{0}" +
+				"  <something>{0}" +
+				"    <else />{0}" +
+				"  </something>{0}" +
+				"</test>", Environment.NewLine), sw.ToString (), "#1");
+
+			// set indent to no
+			sw.GetStringBuilder ().Length = 0;
+			xsltProcessor.Load (new XmlTextReader (new StringReader (
+				string.Format (xsltFragment, "indent=\"no\""))),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+			xsltProcessor.Transform (xmlDoc, xsltArgs, sw, new XmlUrlResolver ());
+
+			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"?>" +
+				"<test><something><else /></something></test>", sw.ToString (),
+				"#2");
+
+			// indent not set
+			sw.GetStringBuilder ().Length = 0;	
+			xsltProcessor.Load (new XmlTextReader (new StringReader (
+				string.Format (xsltFragment, ""))),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+			xsltProcessor.Transform (xmlDoc, xsltArgs, sw, new XmlUrlResolver ());
+
+			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"?>" +
+				"<test><something><else /></something></test>", sw.ToString (),
+				"#3");
+		}
+
+		[Test]
+		[ExpectedException (typeof (XsltCompileException))]
+		public void Output_Indent_Invalid ()
+		{
+			string xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output indent=""Yes"" />
+				</xsl:stylesheet>";
+			XslTransform xsltProcessor = new XslTransform ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (xsltFragment)),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+		}
+
+		[Test]
+		[ExpectedException (typeof (XsltCompileException))]
+		public void Output_Indent_Empty ()
+		{
+			string xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output indent="""" />
+				</xsl:stylesheet>";
+			XslTransform xsltProcessor = new XslTransform ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (xsltFragment)),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+		}
+
+		[Test]
+		[ExpectedException (typeof (XsltCompileException))]
+		public void Output_Unknown_Attribute ()
+		{
+			string xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" version=""1.0"">
+					<xsl:output whatever="""" />
+				</xsl:stylesheet>";
+			XslTransform xsltProcessor = new XslTransform ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (xsltFragment)),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+		}
+
+		[Test]
+		public void Output_Unknown_Attribute_NonDefaultNamespace ()
+		{
+			string xsltFragment = @"<?xml version=""1.0"" encoding=""UTF-8"" ?>
+				<xsl:stylesheet xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" xmlns:tst=""something"" version=""1.0"">
+					<xsl:output tst:whatever="""" />
+				</xsl:stylesheet>";
+			XslTransform xsltProcessor = new XslTransform ();
+			xsltProcessor.Load (new XmlTextReader (new StringReader (xsltFragment)),
+				new XmlUrlResolver (), AppDomain.CurrentDomain.Evidence);
+		}
 	}
 }
Index: Test/System.Xml.Xsl/XsltCompileExceptionTests.cs
===================================================================
--- Test/System.Xml.Xsl/XsltCompileExceptionTests.cs	(revision 0)
+++ Test/System.Xml.Xsl/XsltCompileExceptionTests.cs	(revision 0)
@@ -0,0 +1,151 @@
+//
+// XsltCompileExceptionTests.cs 
+//	- Unit tests for System.Xml.Xsl.XsltCompileException
+//
+// Author:
+//	Gert Driesen <drieseng@users.sourceforge.net>
+//
+// Copyright (C) 2005 Novell, Inc (http://www.novell.com)
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using NUnit.Framework;
+
+using System;
+using System.Runtime.Serialization;
+using System.Security;
+using System.Security.Permissions;
+using System.Security.Policy;
+using System.Xml.Xsl;
+
+namespace MonoCasTests.System.Xml.Xsl
+{
+	[TestFixture]
+	public class XsltCompileExceptionTests {
+#if NET_2_0
+		[Test]
+		public void Constructor0 ()
+		{
+			XsltCompileException xe = new XsltCompileException ();
+			Assert.AreEqual (0, xe.LineNumber, "#A1");
+			Assert.AreEqual (0, xe.LinePosition, "#A2");
+			Assert.IsNotNull (xe.Message, "#A3");
+			Assert.AreEqual (string.Empty, xe.Message, "#A4");
+			Assert.IsNull (xe.SourceUri, "#A5");
+			Assert.IsNull (xe.InnerException, "#A6");
+			Assert.IsNull (xe.Source, "#A7");
+			Assert.IsNull (xe.StackTrace, "#A8");
+			Assert.IsNull (xe.TargetSite, "#A9");
+		}
+
+		[Test]
+		public void Constructor1 ()
+		{
+			string msg = "mono";
+
+			XsltCompileException xe = new XsltCompileException (msg);
+			Assert.AreEqual (0, xe.LineNumber, "#A1");
+			Assert.AreEqual (0, xe.LinePosition, "#A2");
+			Assert.IsNotNull (xe.Message, "#A3");
+			Assert.AreEqual ("mono", xe.Message, "#A4");
+			Assert.IsNull (xe.SourceUri, "#A5");
+			Assert.IsNull (xe.InnerException, "#A6");
+			Assert.IsNull (xe.Source, "#A7");
+			Assert.IsNull (xe.StackTrace, "#A8");
+			Assert.IsNull (xe.TargetSite, "#A9");
+		}
+
+		[Test]
+		public void Constructor2 ()
+		{
+			string msg = "mono";
+			Exception cause = new ApplicationException ("cause");
+
+			XsltCompileException xe = new XsltCompileException (msg, cause);
+			Assert.AreEqual (0, xe.LineNumber, "#A1");
+			Assert.AreEqual (0, xe.LinePosition, "#A2");
+			Assert.IsNotNull (xe.Message, "#A3");
+			Assert.AreEqual ("mono", xe.Message, "#A4");
+			Assert.IsNull (xe.SourceUri, "#A5");
+			Assert.AreSame (cause, xe.InnerException, "#A6");
+			Assert.IsNull (xe.Source, "#A7");
+			Assert.IsNull (xe.StackTrace, "#A8");
+			Assert.IsNull (xe.TargetSite, "#A9");
+		}
+#endif
+
+		[Test]
+		[Category ("NotWorking")]
+		public void Constructor3 ()
+		{
+			string sourceUri = "http://local/test.xsl";
+			Exception cause = new ApplicationException ("cause");
+
+			XsltCompileException xe = new XsltCompileException (cause, (string) null, 0, 0);
+			Assert.AreEqual (0, xe.LineNumber, "#A1");
+			Assert.AreEqual (0, xe.LinePosition, "#A2");
+			Assert.IsNotNull (xe.Message, "#A3");
+#if NET_2_0
+			Assert.IsFalse (xe.Message == "(0,0) :\n", "#A4");
+#else
+			Assert.AreEqual ("(0,0) :\n", xe.Message, "#A4");
+#endif
+			Assert.IsNull (xe.SourceUri, "#A5");
+			Assert.AreSame (cause, xe.InnerException, "#A6");
+			Assert.IsNull (xe.Source, "#A7");
+			Assert.IsNull (xe.StackTrace, "#A8");
+			Assert.IsNull (xe.TargetSite, "#A9");
+
+			xe = new XsltCompileException (cause, (string) null, 1, 0);
+			Assert.AreEqual (1, xe.LineNumber, "#B1");
+			Assert.AreEqual (0, xe.LinePosition, "#B2");
+			Assert.IsNotNull (xe.Message, "#B3");
+			Assert.AreEqual ("(1,0) :\n", xe.Message, "#B4");
+			Assert.IsNull (xe.SourceUri, "#B5");
+			Assert.AreSame (cause, xe.InnerException, "#B6");
+			Assert.IsNull (xe.Source, "#B7");
+			Assert.IsNull (xe.StackTrace, "#B8");
+			Assert.IsNull (xe.TargetSite, "#B9");
+
+			xe = new XsltCompileException (cause, sourceUri, 1, 2);
+			Assert.AreEqual (1, xe.LineNumber, "#C1");
+			Assert.AreEqual (2, xe.LinePosition, "#C2");
+			Assert.IsNotNull (xe.Message, "#C3");
+			Assert.AreEqual ("http://local/test.xsl(1,2) :\n", xe.Message, "#C4");
+			Assert.AreSame (sourceUri, xe.SourceUri, "#C5");
+			Assert.AreSame (cause, xe.InnerException, "#C6");
+			Assert.IsNull (xe.Source, "#C7");
+			Assert.IsNull (xe.StackTrace, "#C8");
+			Assert.IsNull (xe.TargetSite, "#C9");
+
+			xe = new XsltCompileException ((Exception) null, sourceUri, 3, 4);
+			Assert.AreEqual (3, xe.LineNumber, "#D1");
+			Assert.AreEqual (4, xe.LinePosition, "#D2");
+			Assert.IsNotNull (xe.Message, "#D3");
+			Assert.AreEqual ("http://local/test.xsl(3,4) :\n", xe.Message, "#D4");
+			Assert.AreSame (sourceUri, xe.SourceUri, "#D5");
+			Assert.IsNull (xe.InnerException, "#D6");
+			Assert.IsNull (xe.Source, "#D7");
+			Assert.IsNull (xe.StackTrace, "#D8");
+			Assert.IsNull (xe.TargetSite, "#D9");
+		}
+	}
+}

Property changes on: Test/System.Xml.Xsl/XsltCompileExceptionTests.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: ChangeLog
===================================================================
--- ChangeLog	(revision 54472)
+++ ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2005-12-17  Gert Driesen  <drieseng@users.sourceforge.net>
+
+	* System.Xml_test.dll.sources: Added XsltCompilerExceptionTests.cs
+	and XsltExceptionTests.cs.
+
 2005-12-14  Atsushi Enomoto  <atsushi@ximian.com>
 
 	* System.Xml_test.dll.sources: Added XPathNavigatorReaderTests.cs.
Index: Mono.Xml.Xsl/ScriptCompilerInfo.cs
===================================================================
--- Mono.Xml.Xsl/ScriptCompilerInfo.cs	(revision 54472)
+++ Mono.Xml.Xsl/ScriptCompilerInfo.cs	(working copy)
@@ -146,9 +146,9 @@
 			this.DefaultCompilerOptions = "/t:library /r:System.dll /r:System.Xml.dll /r:Microsoft.VisualBasic.dll";
 		}
 
-		public override CodeDomProvider CodeDomProvider {
-			get { return new CSharpCodeProvider (); }
-		}
+		public override CodeDomProvider CodeDomProvider {
+			get { return new CSharpCodeProvider (); }
+		}
 
 		public override string Extension {
 			get { return ".cs"; }
@@ -196,9 +196,9 @@
 			this.DefaultCompilerOptions = "/t:library  /r:System.dll /r:System.XML.dll /r:Microsoft.VisualBasic.dll";
 		}
 
-		public override CodeDomProvider CodeDomProvider {
-			get { return new VBCodeProvider (); }
-		}
+		public override CodeDomProvider CodeDomProvider {
+			get { return new VBCodeProvider (); }
+		}
 
 		public override string Extension {
 			get { return ".vb"; }
Index: Mono.Xml.Xsl/ChangeLog
===================================================================
--- Mono.Xml.Xsl/ChangeLog	(revision 54472)
+++ Mono.Xml.Xsl/ChangeLog	(working copy)
@@ -1,3 +1,17 @@
+2005-12-15  Gert Driesen  <drieseng@users.sourceforge.net>
+
+	* ScriptCompilerInfo.cs: Fixed line endings.
+	* XslOutput.cs: Indent is now bool instead of string, use
+	MoveToAttribute to navigate through attributes instead of using
+	GetAttribute, as we also need to distinguish attributes with 
+	zero-length value from attributes that are not specified for
+	correct implementation of DOCTYPE. Implemented validation for 
+	value of "omit-xml-declaration", "standalone" and "indent".
+	We now throw a XsltCompileException for unknown attribute.
+	* XmlWriterEmitter.cs: only skip WriteDocType is systemId is null.
+	* HtmlEmitter.cs: XslOutput.Indent is now bool.
+	* GenericOutputter.cs: XslOutput.Indent is now bool.
+
 2005-12-13  Andrew Skiba  <andrews@mainsoft.com>
 
 	* XslDecimalFormat.jvm.cs: set correct defaults for NaN and Infinity
Index: Mono.Xml.Xsl/Debug.cs
===================================================================
--- Mono.Xml.Xsl/Debug.cs	(revision 54472)
+++ Mono.Xml.Xsl/Debug.cs	(working copy)
@@ -32,7 +32,7 @@
 
 using System;
 using System.Collections;
-using System.Globalization;
+using System.Globalization;
 using System.Xml;
 using System.Xml.XPath;
 using System.Xml.Xsl;
Index: Mono.Xml.Xsl/XslOutput.cs
===================================================================
--- Mono.Xml.Xsl/XslOutput.cs	(revision 54472)
+++ Mono.Xml.Xsl/XslOutput.cs	(working copy)
@@ -70,7 +70,7 @@
 		string doctypePublic;
 		string doctypeSystem;
 		QName [] cdataSectionElements;
-		string indent;
+		bool indent;
 		string mediaType;
 
 		// for compilation only.
@@ -120,7 +120,7 @@
 			}
 		}
 
-		public string Indent {
+		public bool Indent {
 			get { return indent; }
 		}
 
@@ -130,84 +130,154 @@
 
 		public void Fill (XPathNavigator nav)
 		{
-			string att;
-			
-			att = nav.GetAttribute ("cdata-section-elements", "");
-			if (att != String.Empty)
-				cdSectsList.AddRange (XslNameUtil.FromListString (att, nav));
+			if (nav.MoveToFirstAttribute ()) {
+				ProcessAttribute (nav);
+				while (nav.MoveToNextAttribute ()) {
+					ProcessAttribute (nav);
+				}
 
-			att = nav.GetAttribute ("method", "");
+				// move back to original position
+				nav.MoveToParent ();
+			}
+		}
 
-			if (att != String.Empty) {
-				switch (att) {
-				case "xml":
-					method = OutputMethod.XML;
+		private void ProcessAttribute (XPathNavigator nav)
+		{
+			// skip attributes from non-default namespace
+			if (nav.NamespaceURI != string.Empty) {
+				return;
+			}
+
+			string value = nav.Value;
+
+			switch (nav.LocalName) {
+				case "cdata-section-elements":
+					if (value.Length > 0) {
+						cdSectsList.AddRange (XslNameUtil.FromListString (value, nav));
+					}
 					break;
-				case "html":
-					omitXmlDeclaration = true;
-					method = OutputMethod.HTML;
+				case "method":
+					if (value.Length == 0) {
+						break;
+					}
+
+					switch (value) {
+						case "xml":
+							method = OutputMethod.XML;
+							break;
+						case "html":
+							omitXmlDeclaration = true;
+							method = OutputMethod.HTML;
+							break;
+						case "text":
+							omitXmlDeclaration = true;
+							method = OutputMethod.Text;
+							break;
+						default:
+							method = OutputMethod.Custom;
+							customMethod = XslNameUtil.FromString (value, nav);
+							if (customMethod.Namespace == String.Empty) {
+								IXmlLineInfo li = nav as IXmlLineInfo;
+								throw new XsltCompileException (new ArgumentException (
+									"Invalid output method value: '" + value + "'. It" +
+									" must be either 'xml' or 'html' or 'text' or QName."),
+									nav.BaseURI,
+									li != null ? li.LineNumber : 0,
+									li != null ? li.LinePosition : 0);
+							}
+							break;
+					}
 					break;
-				case "text":
-					omitXmlDeclaration = true;
-					method = OutputMethod.Text;
+				case "version":
+					if (value.Length > 0) {
+						this.version = value;
+					}
 					break;
-				default:
-					method = OutputMethod.Custom;
-					customMethod = XslNameUtil.FromString (att, nav);
-					if (customMethod.Namespace == String.Empty) {
-						IXmlLineInfo li = nav as IXmlLineInfo;
-						throw new XsltCompileException (new ArgumentException ("Invalid output method value: '" + att + 
-							"'. It must be either 'xml' or 'html' or 'text' or QName."),
-							nav.BaseURI,
-							li != null ? li.LineNumber : 0,
-							li != null ? li.LinePosition : 0);
+				case "encoding":
+					if (value.Length > 0) {
+						try {
+							this.encoding = System.Text.Encoding.GetEncoding (value);
+						} catch (ArgumentException) {
+							// MS.NET just leaves the default encoding when encoding is unknown
+						} catch (NotSupportedException) {
+							// Workaround for a bug in System.Text, it throws invalid exception
+						}
 					}
 					break;
-				}
+				case "standalone":
+					switch (value) {
+						case "yes":
+							this.standalone = StandaloneType.YES;
+							break;
+						case "no":
+							this.standalone = StandaloneType.NO;
+							break;
+						default:
+							IXmlLineInfo li = nav as IXmlLineInfo;
+							throw new XsltCompileException (new XsltException (
+								"'" + value + "' is an invalid value for 'standalone'" +
+								" attribute.", (Exception) null),
+								nav.BaseURI,
+								li != null ? li.LineNumber : 0,
+								li != null ? li.LinePosition : 0);
+					}
+					break;
+				case "doctype-public":
+					this.doctypePublic = value;
+					break;
+				case "doctype-system":
+					this.doctypeSystem = value;
+					break;
+				case "media-type":
+					if (value.Length > 0) {
+						this.mediaType = value;
+					}
+					break;
+				case "omit-xml-declaration":
+					switch (value) {
+						case "yes":
+							this.omitXmlDeclaration = true;
+							break;
+						case "no":
+							this.omitXmlDeclaration = false;
+							break;
+						default:
+							IXmlLineInfo li = nav as IXmlLineInfo;
+							throw new XsltCompileException (new XsltException (
+								"'" + value + "' is an invalid value for 'omit-xml-declaration'" +
+								" attribute.", (Exception) null),
+								nav.BaseURI,
+								li != null ? li.LineNumber : 0,
+								li != null ? li.LinePosition : 0);
+					}
+					break;
+				case "indent":
+					switch (value) {
+						case "yes":
+							this.indent = true;
+							break;
+						case "no":
+							this.indent = false;
+							break;
+						default:
+							IXmlLineInfo li = nav as IXmlLineInfo;
+							throw new XsltCompileException (new XsltException (
+								"'" + value + "' is an invalid value for 'indent'" +
+								" attribute.", (Exception) null),
+								nav.BaseURI,
+								li != null ? li.LineNumber : 0,
+								li != null ? li.LinePosition : 0);
+					}
+					break;
+				default:
+					IXmlLineInfo li = nav as IXmlLineInfo;
+					throw new XsltCompileException (new XsltException (
+						"'" + nav.LocalName + "' is an invalid attribute for 'output'" +
+						" element.", (Exception) null),
+						nav.BaseURI,
+						li != null ? li.LineNumber : 0,
+						li != null ? li.LinePosition : 0);
 			}
-
-			att = nav.GetAttribute ("version", "");
-			if (att != String.Empty)
-				this.version = att;
-
-			att = nav.GetAttribute ("encoding", "");
-			if (att != String.Empty)
-				try {
-					this.encoding = System.Text.Encoding.GetEncoding (att);
-				}
-				catch (ArgumentException) {
-					// MS.NET just leaves the default encoding when encoding is unknown
-				}
-				catch (NotSupportedException) {
-					// Workaround for a bug in System.Text, it throws invalid exception
-				}
-
-			att = nav.GetAttribute ("standalone", "");
-			if (att != String.Empty)
-				//TODO: Should we validate values?                
-				this.standalone = att == "yes" ? StandaloneType.YES : StandaloneType.NO;
-
-
-			att = nav.GetAttribute ("doctype-public", "");
-			if (att != String.Empty)
-				this.doctypePublic = att;
-
-			att = nav.GetAttribute ("doctype-system", "");
-			if (att != String.Empty)
-				this.doctypeSystem = att;
-
-			att = nav.GetAttribute ("media-type", "");
-			if (att != String.Empty)
-				this.mediaType = att;
-
-			att = nav.GetAttribute ("omit-xml-declaration", "");
-			if (att != String.Empty)
-				this.omitXmlDeclaration = att == "yes";
-
-			att = nav.GetAttribute ("indent", "");
-			if (att != String.Empty)
-				this.indent = att;
 		}
 	}
-
 }
Index: Mono.Xml.Xsl/XmlWriterEmitter.cs
===================================================================
--- Mono.Xml.Xsl/XmlWriterEmitter.cs	(revision 54472)
+++ Mono.Xml.Xsl/XmlWriterEmitter.cs	(working copy)
@@ -47,7 +47,7 @@
 			this.writer = writer;
 		}
 
-		#region # Emitter's methods implementaion			
+		#region # Emitter's methods implementaion
 		
 		public override void WriteStartDocument (Encoding encoding, StandaloneType standalone)
 		{
@@ -86,11 +86,9 @@
 
 		public override void WriteDocType (string type, string publicId, string systemId)
 		{
-			if (publicId != null && publicId != String.Empty &&
-				(systemId == null || systemId == String.Empty))
-				// This is an error.
-				// when PUBLIC id exists, SYSTEM id is required.
+			if (systemId == null) {
 				return;
+			}
 			writer.WriteDocType (type, publicId, systemId, null);
 		}
 
Index: Mono.Xml.Xsl/HtmlEmitter.cs
===================================================================
--- Mono.Xml.Xsl/HtmlEmitter.cs	(revision 54472)
+++ Mono.Xml.Xsl/HtmlEmitter.cs	(working copy)
@@ -55,7 +55,7 @@
 		public HtmlEmitter (TextWriter writer, XslOutput output)
 		{
 			this.writer = writer;
-			indent = !(output.Indent == "no");
+			indent = output.Indent;
 			elementNameStack = new Stack ();
 			nonHtmlDepth = -1;
 			outputEncoding = writer.Encoding == null ? output.Encoding : writer.Encoding;
Index: Mono.Xml.Xsl/GenericOutputter.cs
===================================================================
--- Mono.Xml.Xsl/GenericOutputter.cs	(revision 54472)
+++ Mono.Xml.Xsl/GenericOutputter.cs	(working copy)
@@ -145,10 +145,10 @@
 					break;
 				case OutputMethod.XML:
 					XmlTextWriter w = new XmlTextWriter (pendingTextWriter);
-					if (xslOutput.Indent == "yes")
+					if (xslOutput.Indent)
 						w.Formatting = Formatting.Indented;
 
-					_emitter = new XmlWriterEmitter (w);					
+					_emitter = new XmlWriterEmitter (w);
 					if (!_omitXmlDeclaration && !xslOutput.OmitXmlDeclaration)
 						_emitter.WriteStartDocument (
 							_encoding != null ? _encoding : xslOutput.Encoding,
Index: System.Xml_test.dll.sources
===================================================================
--- System.Xml_test.dll.sources	(revision 54472)
+++ System.Xml_test.dll.sources	(working copy)
@@ -87,5 +87,7 @@
 System.Xml.Schema/XmlSchemaExceptionCas.cs
 System.Xml.Xsl/XsltArgumentListCas.cs
 System.Xml.Xsl/XsltCompileExceptionCas.cs
+System.Xml.Xsl/XsltCompileExceptionTests.cs
 System.Xml.Xsl/XsltExceptionCas.cs
+System.Xml.Xsl/XsltExceptionTests.cs
 System.Xml.XPath/XPathExceptionCas.cs
