Index: Test/System.Net/HttpWebResponseTest.cs
===================================================================
--- Test/System.Net/HttpWebResponseTest.cs	(revision 0)
+++ Test/System.Net/HttpWebResponseTest.cs	(revision 0)
@@ -0,0 +1,551 @@
+//
+// HttpWebResponseTest.cs - NUnit Test Cases for System.Net.HttpWebResponse
+//
+// Authors:
+//	Gert Driesen (drieseng@users.sourceforge.net)
+//
+// Copyright (c) 2008 Gert Driesen
+//
+
+using System;
+using System.Globalization;
+using System.IO;
+using System.Net;
+using System.Net.Sockets;
+using System.Text;
+
+using NUnit.Framework;
+
+namespace MonoTests.System.Net
+{
+	[TestFixture]
+	public class HttpWebResponseTest
+	{
+		[Test]
+		public void CharacterSet_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+				try {
+					string charset = resp.CharacterSet;
+					Assert.Fail ("#1:" + charset);
+				} catch (ObjectDisposedException ex) {
+					Assert.AreEqual (typeof (ObjectDisposedException), ex.GetType (), "#2");
+					Assert.IsNull (ex.InnerException, "#3");
+					Assert.IsNotNull (ex.Message, "#4");
+					Assert.AreEqual (typeof (HttpWebResponse).FullName, ex.ObjectName, "#5");
+				}
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void Close_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+				resp.Close ();
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void ContentEncoding_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+				try {
+					string enc = resp.ContentEncoding;
+					Assert.Fail ("#1:" + enc);
+				} catch (ObjectDisposedException ex) {
+					Assert.AreEqual (typeof (ObjectDisposedException), ex.GetType (), "#2");
+					Assert.IsNull (ex.InnerException, "#3");
+					Assert.IsNotNull (ex.Message, "#4");
+					Assert.AreEqual (typeof (HttpWebResponse).FullName, ex.ObjectName, "#5");
+				}
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void ContentLength_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+				Assert.AreEqual (9, resp.ContentLength);
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void ContentType_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+				try {
+					string contentType = resp.ContentType;
+					Assert.Fail ("#1:" + contentType);
+				} catch (ObjectDisposedException ex) {
+					Assert.AreEqual (typeof (ObjectDisposedException), ex.GetType (), "#2");
+					Assert.IsNull (ex.InnerException, "#3");
+					Assert.IsNotNull (ex.Message, "#4");
+					Assert.AreEqual (typeof (HttpWebResponse).FullName, ex.ObjectName, "#5");
+				}
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void Cookies_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+				try {
+					CookieCollection cookies = resp.Cookies;
+					Assert.Fail ("#A1:" + cookies);
+				} catch (ObjectDisposedException ex) {
+					Assert.AreEqual (typeof (ObjectDisposedException), ex.GetType (), "#A2");
+					Assert.IsNull (ex.InnerException, "#A3");
+					Assert.IsNotNull (ex.Message, "#A4");
+					Assert.AreEqual (typeof (HttpWebResponse).FullName, ex.ObjectName, "#A5");
+				}
+
+				try {
+					resp.Cookies = new CookieCollection ();
+					Assert.Fail ("#B1");
+				} catch (ObjectDisposedException ex) {
+					Assert.AreEqual (typeof (ObjectDisposedException), ex.GetType (), "#B2");
+					Assert.IsNull (ex.InnerException, "#B3");
+					Assert.IsNotNull (ex.Message, "#B4");
+					Assert.AreEqual (typeof (HttpWebResponse).FullName, ex.ObjectName, "#B5");
+				}
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void GetResponseHeader_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+				try {
+					string server = resp.GetResponseHeader ("Server");
+					Assert.Fail ("#1:" + server);
+				} catch (ObjectDisposedException ex) {
+					Assert.AreEqual (typeof (ObjectDisposedException), ex.GetType (), "#2");
+					Assert.IsNull (ex.InnerException, "#3");
+					Assert.IsNotNull (ex.Message, "#4");
+					Assert.AreEqual (typeof (HttpWebResponse).FullName, ex.ObjectName, "#5");
+				}
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void GetResponseStream_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+				try {
+					Stream s = resp.GetResponseStream ();
+					Assert.Fail ("#1:" + s);
+				} catch (ObjectDisposedException ex) {
+					Assert.AreEqual (typeof (ObjectDisposedException), ex.GetType (), "#2");
+					Assert.IsNull (ex.InnerException, "#3");
+					Assert.IsNotNull (ex.Message, "#4");
+					Assert.AreEqual (typeof (HttpWebResponse).FullName, ex.ObjectName, "#5");
+				}
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void Headers_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+#if NET_2_0
+				WebHeaderCollection headers = resp.Headers;
+				Assert.AreEqual (6, headers.Count, "#1");
+				Assert.AreEqual ("9", headers ["Content-Length"], "#2");
+				Assert.AreEqual ("utf-8", headers ["Content-Encoding"], "#3");
+				Assert.AreEqual ("text/xml; charset=UTF-8", headers ["Content-Type"], "#4");
+				Assert.AreEqual ("Wed, 08 Jan 2003 23:11:55 GMT", headers ["Last-Modified"], "#5");
+				Assert.AreEqual ("UserID=Miguel,StoreProfile=true", headers ["Set-Cookie"], "#6");
+				Assert.AreEqual ("Mono/Test", headers ["Server"], "#7");
+#else
+				try {
+					WebHeaderCollection headers = resp.Headers;
+					Assert.Fail ("#1:" + headers);
+				} catch (ObjectDisposedException ex) {
+					Assert.AreEqual (typeof (ObjectDisposedException), ex.GetType (), "#2");
+					Assert.IsNull (ex.InnerException, "#3");
+					Assert.IsNotNull (ex.Message, "#4");
+					Assert.AreEqual (typeof (HttpWebResponse).FullName, ex.ObjectName, "#5");
+				}
+#endif
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void LastModified_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+				try {
+					DateTime lastMod = resp.LastModified;
+					Assert.Fail ("#1:" + lastMod);
+				} catch (ObjectDisposedException ex) {
+					Assert.AreEqual (typeof (ObjectDisposedException), ex.GetType (), "#2");
+					Assert.IsNull (ex.InnerException, "#3");
+					Assert.IsNotNull (ex.Message, "#4");
+					Assert.AreEqual (typeof (HttpWebResponse).FullName, ex.ObjectName, "#5");
+				}
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void Method_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+				try {
+					string method = resp.Method;
+					Assert.Fail ("#1:" + method);
+				} catch (ObjectDisposedException ex) {
+					Assert.AreEqual (typeof (ObjectDisposedException), ex.GetType (), "#2");
+					Assert.IsNull (ex.InnerException, "#3");
+					Assert.IsNotNull (ex.Message, "#4");
+					Assert.AreEqual (typeof (HttpWebResponse).FullName, ex.ObjectName, "#5");
+				}
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void ProtocolVersion_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+				try {
+					Version protocolVersion = resp.ProtocolVersion;
+					Assert.Fail ("#1:" + protocolVersion);
+				} catch (ObjectDisposedException ex) {
+					Assert.AreEqual (typeof (ObjectDisposedException), ex.GetType (), "#2");
+					Assert.IsNull (ex.InnerException, "#3");
+					Assert.IsNotNull (ex.Message, "#4");
+					Assert.AreEqual (typeof (HttpWebResponse).FullName, ex.ObjectName, "#5");
+				}
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void ResponseUri_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+				try {
+					Uri respUri = resp.ResponseUri;
+					Assert.Fail ("#1:" + respUri);
+				} catch (ObjectDisposedException ex) {
+					Assert.AreEqual (typeof (ObjectDisposedException), ex.GetType (), "#2");
+					Assert.IsNull (ex.InnerException, "#3");
+					Assert.IsNotNull (ex.Message, "#4");
+					Assert.AreEqual (typeof (HttpWebResponse).FullName, ex.ObjectName, "#5");
+				}
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void Server_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+				try {
+					string server = resp.Server;
+					Assert.Fail ("#1:" + server);
+				} catch (ObjectDisposedException ex) {
+					Assert.AreEqual (typeof (ObjectDisposedException), ex.GetType (), "#2");
+					Assert.IsNull (ex.InnerException, "#3");
+					Assert.IsNotNull (ex.Message, "#4");
+					Assert.AreEqual (typeof (HttpWebResponse).FullName, ex.ObjectName, "#5");
+				}
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void StatusCode_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+				Assert.AreEqual (HttpStatusCode.OK, resp.StatusCode);
+
+				responder.Stop ();
+			}
+		}
+
+		[Test]
+		public void StatusDescription_Disposed ()
+		{
+			IPEndPoint ep = new IPEndPoint (IPAddress.Loopback, 8000);
+			string url = "http://" + IPAddress.Loopback.ToString () + ":8000/test/";
+
+			using (SocketResponder responder = new SocketResponder (new IPEndPoint (IPAddress.Loopback, 8000), new SocketRequestHandler (FullResponseHandler))) {
+				responder.Start ();
+
+				HttpWebRequest req = (HttpWebRequest) WebRequest.Create (url);
+				req.Method = "GET";
+				req.Timeout = 2000;
+				req.ReadWriteTimeout = 2000;
+				req.KeepAlive = false;
+
+				HttpWebResponse resp = (HttpWebResponse) req.GetResponse ();
+				((IDisposable) resp).Dispose ();
+
+				try {
+					string statusDesc = resp.StatusDescription;
+					Assert.Fail ("#1:" + statusDesc);
+				} catch (ObjectDisposedException ex) {
+					Assert.AreEqual (typeof (ObjectDisposedException), ex.GetType (), "#2");
+					Assert.IsNull (ex.InnerException, "#3");
+					Assert.IsNotNull (ex.Message, "#4");
+					Assert.AreEqual (typeof (HttpWebResponse).FullName, ex.ObjectName, "#5");
+				}
+
+				responder.Stop ();
+			}
+		}
+
+		static byte [] FullResponseHandler (Socket socket)
+		{
+			StringWriter sw = new StringWriter ();
+			sw.NewLine = "\r\n";
+			sw.WriteLine ("HTTP/1.1 200 OK");
+			sw.WriteLine ("Server: Mono/Test");
+			sw.WriteLine ("Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT");
+			sw.WriteLine ("Content-Encoding: " + Encoding.UTF8.WebName);
+			sw.WriteLine ("Content-Type: text/xml; charset=UTF-8");
+			sw.WriteLine ("Content-Length: 9");
+			sw.WriteLine ("Set-Cookie: UserID=Miguel");
+			sw.WriteLine ("Set-Cookie: StoreProfile=true");
+			sw.WriteLine ();
+			sw.Write ("<dummy />");
+			sw.Flush ();
+
+			return Encoding.UTF8.GetBytes (sw.ToString ());
+		}
+	}
+}

Property changes on: Test/System.Net/HttpWebResponseTest.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: Test/System.Net/ChangeLog
===================================================================
--- Test/System.Net/ChangeLog	(revision 106732)
+++ Test/System.Net/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2008-07-01  Gert Driesen  <drieseng@users.sourceforge.net>
+
+	* HttpWebResponseTest.cs: Added tests for disposed checks.
+
 2008-04-18  Gert Driesen  <drieseng@users.sourceforge.net>
 
 	* FileWebRequestTest.cs: Now that we have proper locking for file
Index: System.Net/HttpWebResponse.cs
===================================================================
--- System.Net/HttpWebResponse.cs	(revision 106732)
+++ System.Net/HttpWebResponse.cs	(working copy)
@@ -52,11 +52,11 @@
 		Version version;
 		HttpStatusCode statusCode;
 		string statusDescription;
-		long contentLength = -1;
+		long contentLength;
 		string contentType;
 		CookieContainer cookie_container;
 
-		bool disposed = false;
+		bool disposed;
 		Stream stream;
 		
 		// Constructors
@@ -70,6 +70,13 @@
 			statusCode = (HttpStatusCode) data.StatusCode;
 			statusDescription = data.StatusDescription;
 			stream = data.stream;
+
+			try {
+				contentLength = (long) UInt64.Parse (webHeaders ["Content-Length"]);
+			} catch (Exception) {
+				contentLength = - 1;
+			}
+
 			if (container != null) {
 				this.cookie_container = container;	
 				FillCookies ();
@@ -117,7 +124,8 @@
 		}
 		
 		public string ContentEncoding {
-			get { 
+			get {
+				CheckDisposed ();
 				string h = webHeaders ["Content-Encoding"];
 				return h != null ? h : "";
 			}
@@ -125,21 +133,14 @@
 		
 		public override long ContentLength {		
 			get {
-				if (contentLength != -1)
-					return contentLength;
-
-				try {
-					contentLength = (long) UInt64.Parse (webHeaders ["Content-Length"]); 
-				} catch (Exception) {
-					return -1;
-				}
-
 				return contentLength;
 			}
 		}
 		
 		public override string ContentType {		
 			get {
+				CheckDisposed ();
+
 				if (contentType == null)
 					contentType = webHeaders ["Content-Type"];
 
@@ -148,18 +149,23 @@
 		}
 		
 		public CookieCollection Cookies {
-			get { 
+			get {
+				CheckDisposed ();
 				if (cookieCollection == null)
 					cookieCollection = new CookieCollection ();
 				return cookieCollection;
 			}
 			set {
+				CheckDisposed ();
 				cookieCollection = value;
 			}
 		}
 		
 		public override WebHeaderCollection Headers {		
-			get { 
+			get {
+#if ONLY_1_1
+				CheckDisposed ();
+#endif
 				return webHeaders; 
 			}
 		}
@@ -181,6 +187,7 @@
 		
 		public DateTime LastModified {
 			get {
+				CheckDisposed ();
 				try {
 					string dtStr = webHeaders ["Last-Modified"];
 					return MonoHttpDate.Parse (dtStr);
@@ -191,37 +198,42 @@
 		}
 		
 		public string Method {
-			get { 
+			get {
+				CheckDisposed ();
 				return method; 
 			}
 		}
 		
 		public Version ProtocolVersion {
-			get { 
+			get {
+				CheckDisposed ();
 				return version; 
 			}
 		}
 		
 		public override Uri ResponseUri {		
-			get { 
+			get {
+				CheckDisposed ();
 				return uri; 
 			}
 		}		
 		
 		public string Server {
-			get { 
+			get {
+				CheckDisposed ();
 				return webHeaders ["Server"]; 
 			}
 		}
 		
 		public HttpStatusCode StatusCode {
-			get { 
+			get {
 				return statusCode; 
 			}
 		}
 		
 		public string StatusDescription {
-			get { 
+			get {
+				CheckDisposed ();
 				return statusDescription; 
 			}
 		}
@@ -236,6 +248,7 @@
 		
 		public string GetResponseHeader (string headerName)
 		{
+			CheckDisposed ();
 			string value = webHeaders [headerName];
 			return (value != null) ? value : "";
 		}
@@ -311,7 +324,9 @@
 			if (disposing) {
 				// release managed resources
 				uri = null;
+#if !NET_2_0
 				webHeaders = null;
+#endif
 				cookieCollection = null;
 				method = null;
 				version = null;
Index: System.Net/ChangeLog
===================================================================
--- System.Net/ChangeLog	(revision 106732)
+++ System.Net/ChangeLog	(working copy)
@@ -1,3 +1,11 @@
+2008-07-01  Gert Driesen  <drieseng@users.sourceforge.net>µ
+
+	* HttpWebResponse.cs: Initialize contentLength in ctor, as it must
+	remain accessible after the response is disposed (and the headers are
+	no longer available). Adding missing disposed checks in properties
+	(except for StatusCode) and GetResponseHeader. On the 2.0 profile,
+	headers must remain accessible after the HttpWebResponse is disposed.
+
 2008-06-10  Stephane Delcroix  <sdelcroix@novell.com>
 
 	* IPAddress.cs: allow usage on 2.1 as smcs knows nothing about
Index: System_test.dll.sources
===================================================================
--- System_test.dll.sources	(revision 106733)
+++ System_test.dll.sources	(working copy)
@@ -194,6 +194,7 @@
 System.Net/FileWebRequestTest.cs
 System.Net/FileWebResponseTest.cs
 System.Net/HttpWebRequestTest.cs
+System.Net/HttpWebResponseTest.cs
 System.Net/HttpListenerTest.cs
 System.Net/HttpListenerBasicIdentityTest.cs
 System.Net/HttpListenerPrefixCollectionTest.cs
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 106733)
+++ ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2008-07-01  Gert Driesen  <drieseng@users.sourceforge.net>
+
+	* System_test.dll.sources: Added HttpWebResponseTest.cs.
+
 2008-06-27  Gert Driesen  <drieseng@users.sourceforge.net>
 
 	* System_test.dll.sources: Added EventDescriptorCollectionTest.cs.
