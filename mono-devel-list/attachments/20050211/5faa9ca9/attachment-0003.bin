Index: AppDomain.cs
===================================================================
--- AppDomain.cs	(revisi√≥n: 40470)
+++ AppDomain.cs	(copia de trabajo)
@@ -432,8 +432,13 @@
 		}
 		
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
-		public extern Assembly [] GetAssemblies ();
+		private extern Assembly [] GetAssemblies (bool refOnly);
 
+		public Assembly [] GetAssemblies ()
+		{
+			return GetAssemblies (false);
+		}
+
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
 		public extern object GetData (string name);
 
@@ -448,7 +453,7 @@
 		}
 
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
-		private extern Assembly LoadAssembly (string assemblyRef, Evidence securityEvidence);
+		internal extern Assembly LoadAssembly (string assemblyRef, Evidence securityEvidence, bool refOnly);
 
 		public Assembly Load (AssemblyName assemblyRef)
 		{
@@ -467,7 +472,7 @@
 					throw new ArgumentException (Locale.GetText ("assemblyRef.Name cannot be empty."), "assemblyRef");
 			}
 
-			return LoadAssembly (assemblyRef.FullName, assemblySecurity);
+			return LoadAssembly (assemblyRef.FullName, assemblySecurity, false);
 		}
 
 		public Assembly Load (string assemblyString)
@@ -475,7 +480,7 @@
 			if (assemblyString == null)
 				throw new ArgumentNullException ("assemblyString");
 
-			return LoadAssembly (assemblyString, null);
+			return LoadAssembly (assemblyString, null, false);
 		}
 
 		public Assembly Load (string assemblyString, Evidence assemblySecurity)
@@ -483,7 +488,7 @@
 			if (assemblyString == null)
 				throw new ArgumentNullException ("assemblyString");
 
-			return LoadAssembly (assemblyString, assemblySecurity);
+			return LoadAssembly (assemblyString, assemblySecurity, false);
 		}
 
 		public Assembly Load (byte[] rawAssembly)
@@ -497,14 +502,14 @@
 		}
 
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
-		private extern Assembly LoadAssemblyRaw (byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence);
+		internal extern Assembly LoadAssemblyRaw (byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence, bool refonly);
 
 		public Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, Evidence securityEvidence)
 		{
 			if (rawAssembly == null)
 				throw new ArgumentNullException ("rawAssembly");
 				
-			return LoadAssemblyRaw (rawAssembly, rawSymbolStore, securityEvidence);
+			return LoadAssemblyRaw (rawAssembly, rawSymbolStore, securityEvidence, false);
 		}
 
 		[SecurityPermission (SecurityAction.Demand, Flags=SecurityPermissionFlag.ControlPolicy)]
@@ -759,8 +764,12 @@
 			AssemblyLoad (this, new AssemblyLoadEventArgs (assembly));
 		}
 
-		private Assembly DoAssemblyResolve (string name)
+		private Assembly DoAssemblyResolve (string name, bool refonly)
 		{
+#if NET_2_0
+			if (refonly && ReflectionOnlyPreBindAssemblyResolve == null)
+				return null;
+#endif
 			if (AssemblyResolve == null)
 				return null;
 			
@@ -771,13 +780,25 @@
 				assembly_resolve_in_progress = ht;
 			}
 
-			if (ht.Contains (name))
+			Assembly ass = (Assembly) ht [name];
+#if NET_2_0
+			if (ass != null && (ass.ReflectionOnly == refonly))
 				return null;
-			else
-				ht [name] = name;
+#else
+			if (ass != null)
+				return null;
+#endif
+			ht [name] = name;
+			try {
+				
+#if NET_2_0
+				Delegate [] invocation_list = refonly ? ReflectionOnlyPreBindAssemblyResolve.GetInvocationList () : 
+					AssemblyResolve.GetInvocationList ();
+#else
+				Delegate [] invocation_list = AssemblyResolve.GetInvocationList ();
+#endif
 
-			try {
-				foreach (Delegate eh in AssemblyResolve.GetInvocationList ()) {
+				foreach (Delegate eh in invocation_list) {
 					ResolveEventHandler handler = (ResolveEventHandler) eh;
 					Assembly assembly = handler (this, new ResolveEventArgs (name));
 					if (assembly != null)
@@ -877,6 +898,9 @@
 		public event UnhandledExceptionEventHandler UnhandledException;
 
 #if NET_2_0
+
+		public event ResolveEventHandler ReflectionOnlyPreBindAssemblyResolve;
+		
 		private ActivationContext _activation;
 		private ApplicationIdentity _applicationIdentity;
 		private AppDomainManager _domain_manager;
@@ -961,7 +985,7 @@
 		[MonoTODO ("see Assembly.ReflectionOnlyLoad")]
 		public Assembly[] ReflectionOnlyGetAssemblies ()
 		{
-			return new Assembly [0];
+			return GetAssemblies (true);
 		}
 #endif
 	}
