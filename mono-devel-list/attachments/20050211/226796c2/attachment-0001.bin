Index: mini.c
===================================================================
--- mini.c	(revision 40439)
+++ mini.c	(working copy)
@@ -3251,6 +3251,8 @@
 		MonoInst *args [2];
 		MonoSecurityManager* secman = mono_security_manager_get_methods ();
 
+		mono_jit_stats.cas_demand_generation++;
+
 		if (actions.demand.blob) {
 			/* Add code for SecurityAction.Demand */
 			NEW_DECLSECCONST (cfg, args[0], image, actions.demand);
@@ -9827,6 +9829,15 @@
 			 mono_stats.inflated_method_count);
 		g_print ("Inflated types:         %ld\n", mono_stats.inflated_type_count);
 		g_print ("Generics metadata size: %ld\n", mono_stats.generics_metadata_size);
+
+		if (mono_use_security_manager) {
+			g_print ("\nDecl security check   : %ld\n", mono_jit_stats.cas_declsec_check);
+			g_print ("LinkDemand (user)     : %ld\n", mono_jit_stats.cas_linkdemand);
+			g_print ("LinkDemand (icall)    : %ld\n", mono_jit_stats.cas_linkdemand_icall);
+			g_print ("LinkDemand (pinvoke)  : %ld\n", mono_jit_stats.cas_linkdemand_pinvoke);
+			g_print ("LinkDemand (aptc)     : %ld\n", mono_jit_stats.cas_linkdemand_aptc);
+			g_print ("Demand (code gen)     : %ld\n", mono_jit_stats.cas_demand_generation);
+		}
 	}
 }
 
Index: mini.h
===================================================================
--- mini.h	(revision 40439)
+++ mini.h	(working copy)
@@ -612,6 +612,12 @@
 	gulong inlined_methods;
 	gulong basic_blocks;
 	gulong max_basic_blocks;
+	gulong cas_declsec_check;
+	gulong cas_linkdemand_icall;
+	gulong cas_linkdemand_pinvoke;
+	gulong cas_linkdemand_aptc;
+	gulong cas_linkdemand;
+	gulong cas_demand_generation;
 	MonoMethod *max_ratio_method;
 	MonoMethod *biggest_method;
 	gboolean enabled;
@@ -922,7 +928,6 @@
 mono_perform_ssapre (MonoCompile *cfg);
 
 /* CAS - stack walk */
-//MonoBoolean ves_icall_System_Security_SecurityFrame_GetSecurityFrameInformation (gint32 skip, MonoReflectionMethod **method, gint32 *flags);
 MonoSecurityFrame* ves_icall_System_Security_SecurityFrame_GetSecurityFrame (gint32 skip);
 MonoArray* ves_icall_System_Security_SecurityFrame_GetSecurityStack (gint32 skip);
 
Index: declsec.c
===================================================================
--- declsec.c	(revision 40439)
+++ declsec.c	(working copy)
@@ -8,6 +8,7 @@
  */
 
 #include "declsec.h"
+#include "mini.h"
 
 /*
  * Does the methods (or it's class) as any declarative security attribute ?
@@ -16,6 +17,8 @@
 MonoBoolean
 mono_method_has_declsec (MonoMethod *method)
 {
+	mono_jit_stats.cas_declsec_check++;
+
 	if (method->wrapper_type == MONO_WRAPPER_MANAGED_TO_NATIVE) {
 		method = mono_marshal_method_from_wrapper (method);
 		if (!method)
@@ -112,6 +115,8 @@
 {
 	MonoDeclSecurityActions linkclass, linkmethod;
 
+	mono_jit_stats.cas_linkdemand++;
+
 	if (mono_declsec_get_linkdemands (callee, &linkclass, &linkmethod)) {
 		MonoAssembly *assembly = mono_image_get_assembly (caller->klass->image);
 		MonoReflectionAssembly *refass = (MonoReflectionAssembly*) mono_assembly_get_object (domain, assembly);
@@ -146,10 +151,12 @@
 static gboolean
 mono_declsec_linkdemand_aptc (MonoDomain *domain, MonoMethod *caller, MonoMethod *callee)
 {
-	MonoSecurityManager* secman;
+	MonoSecurityManager* secman = NULL;
 	MonoAssembly *assembly;
 	guint32 size = 0;
 
+	mono_jit_stats.cas_linkdemand_aptc++;
+
 	/* A - Applicable only if we're calling into *another* assembly */
 	if (caller->klass->image == callee->klass->image)
 		return FALSE;
@@ -228,6 +235,8 @@
 {
 	MonoAssembly *assembly;
 
+	mono_jit_stats.cas_linkdemand_icall++;
+
 	/* some icall are public (i.e. they CAN be called by any code) */
 	if (((icall->klass->flags & TYPE_ATTRIBUTE_PUBLIC) == TYPE_ATTRIBUTE_PUBLIC) &&
 		((icall->flags & FIELD_ATTRIBUTE_PUBLIC) == FIELD_ATTRIBUTE_PUBLIC)) {
@@ -279,6 +288,8 @@
 {
 	MonoAssembly *assembly = mono_image_get_assembly (caller->klass->image);
 
+	mono_jit_stats.cas_linkdemand_pinvoke++;
+
 	/* Check for P/Invoke flag for the assembly */
 	if (!MONO_SECMAN_FLAG_INIT (assembly->unmanaged)) {
 		/* Check if we know (and have) or FullTrust status */
