#include <mono/jit/jit.h>
#include <mono/metadata/image.h>
#include <mono/metadata/assembly.h>
#include <mono/metadata/object.h>
#include <mono/metadata/class.h>
#include <mono/metadata/environment.h>
#include <mono/metadata/mono-config.h>
#include <stdio.h>

int 
main(int argc, char **argv) {
	MonoDomain *domain;
	MonoAssembly *assembly;
	MonoClass *clazz, *field_clazz;
	MonoClassField *field;
	MonoObject *list;
	MonoMethod *dump;
	gpointer params [1];
	const char *file;
	
	if (argc < 2){
		printf ("Please provide an assembly to load\n");
		return 1;
	}
	file = argv [1];

	/* adjust these : */
	mono_set_dirs ("c:\\programme\\mono\\lib",
		   "c:\\programme\\mono\\etc");

	mono_config_parse (NULL);
	domain = mono_jit_init (file);

	assembly = mono_domain_assembly_open (domain, file);
	if (!assembly) {
		printf ("could not load %s\n", file);
		return 1;
	}

	clazz = mono_class_from_name (mono_assembly_get_image (assembly),
				      "MonoEmbed", "Test");
	if (!clazz) {
		printf ("could not find class MonoEmbed.Test\n");
		return 1;
	}

	field = mono_class_get_field_from_name (clazz, "ListField");
	if (!field) {
		printf ("could not find field MonoEmbed.Test.ListField\n");
		return 1;
	}

	field_clazz = mono_class_from_mono_type (mono_field_get_type (field));
	if (!field_clazz) {
		printf ("could not get field's class\n");
		return 1;
	}

	list = mono_object_new (domain, field_clazz);
	if (!list) {
		printf ("could not create List<>\n");
		return 1;
	}

	mono_runtime_object_init (list);
	
	dump = mono_class_get_method_from_name (clazz, "Dump", -1);
	if (!dump) {
		printf ("could not get MonoEmbed.Test::Dump()\n");
		return 1;
	}

	params[0] = list;
	mono_runtime_invoke (dump, NULL, params, NULL);

	return 0;
}

