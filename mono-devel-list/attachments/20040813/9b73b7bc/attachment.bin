? monop_stuff.patch
Index: ChangeLog
===================================================================
RCS file: /cvs/public/mcs/tools/monop/ChangeLog,v
retrieving revision 1.25
diff -u -r1.25 ChangeLog
--- ChangeLog	6 Aug 2004 05:30:58 -0000	1.25
+++ ChangeLog	13 Aug 2004 03:10:45 -0000
@@ -1,3 +1,13 @@
+2004-08-13  John Luke  <john.luke@gmail.com>
+
+	* outline.cs: remove unused isPointer 
+	* monop.cs: show information about the assembly that is being used
+	- remove unused IndentedTextWriter
+	- rework how Assemblies are being loaded, so that it works by trying
+	in order fromfile, fullname, partialname which fixes loading
+	from relative paths and generally should be more correct
+	* TODO: update
+
 2004-08-06  John Luke  <john.luke@gmail.com>
 
 	* outline.cs: add field support
Index: TODO
===================================================================
RCS file: /cvs/public/mcs/tools/monop/TODO,v
retrieving revision 1.7
diff -u -r1.7 TODO
--- TODO	6 Aug 2004 05:30:58 -0000	1.7
+++ TODO	13 Aug 2004 03:10:45 -0000
@@ -1,11 +1,9 @@
 TODO
 ----
 
-	* Add options like /show-private. For example, if you view System.String
-	  you should only see public methods etc unless you specify /private. Similar
-	  thing for other scope things.
-	* Add support for events
 	* Support for params (show the params keyword)
 	* Handle interfaces:
 		* handle explicit vs. implicit impl
-	* Do delegates
+	* attributes (Serializable, etc)
+	* add declared only / inherited option
+	* handle ~ based paths (ex -r:~/foo.dll)
Index: monop.cs
===================================================================
RCS file: /cvs/public/mcs/tools/monop/monop.cs,v
retrieving revision 1.21
diff -u -r1.21 monop.cs
--- monop.cs	6 Aug 2004 05:30:58 -0000	1.21
+++ monop.cs	13 Aug 2004 03:10:45 -0000
@@ -59,29 +59,30 @@
 
 	static Assembly GetAssembly (string assembly, bool exit)
 	{
-		Assembly a;
+		Assembly a = null;
 
 		try {
-			// if is starts with / use the full path
-			// otherwise try to load from the GAC
-			if (assembly.StartsWith ("/"))
+			// if it exists try to use LoadFrom
+			if (File.Exists (assembly))
 				a = Assembly.LoadFrom (assembly);
-			else
-				a = Assembly.LoadWithPartialName (assembly);
-
-			// if the above failed try Load
-			if (a == null)
+			// if it looks like a fullname try that
+			else if (assembly.Split (',').Length == 4)
 				a = Assembly.Load (assembly);
-
-			return a;
+		} catch {
+			// ignore exception it gets handled below
 		}
-		catch {
-			if (exit) {
-				Console.WriteLine ("Could not load {0}", MonoP.assembly);
-				Environment.Exit (1);
-			}
-			return null;
+
+		// last try partial name
+		// this (apparently) is exception safe
+		if (a == null)
+			a = Assembly.LoadWithPartialName (assembly);
+
+		if (a == null && exit) {
+			Console.WriteLine ("Could not load {0}", MonoP.assembly);
+			Environment.Exit (1);
 		}
+
+		return a;
 	}
 
 	static Type GetType (string tname)
@@ -92,6 +93,14 @@
 	static void PrintTypes (string assembly)
 	{
 		Assembly a = GetAssembly (assembly, true);
+
+		Console.WriteLine ();
+		Console.WriteLine ("Assembly Information:");
+
+		foreach (string ai in a.ToString ().Split (','))
+			Console.WriteLine (ai.Trim ());
+
+		Console.WriteLine ();
 		Type [] types = a.GetExportedTypes ();
 
 		foreach (Type t in types)
@@ -167,8 +176,6 @@
 
 		}
 		
-		IndentedTextWriter o = new IndentedTextWriter (Console.Out, "    ");
-
 		int i = 0;
 		if (args [0].StartsWith ("-r:") || args [0].StartsWith ("/r:")){
 			i++;
@@ -190,7 +197,7 @@
 				i++;
 		}
 
-		if (args.Length < i+1){
+		if (args.Length < i + 1) {
 			PrintUsage ();
 			return;
 		}
Index: outline.cs
===================================================================
RCS file: /cvs/public/mcs/tools/monop/outline.cs,v
retrieving revision 1.9
diff -u -r1.9 outline.cs
--- outline.cs	6 Aug 2004 05:30:58 -0000	1.9
+++ outline.cs	13 Aug 2004 03:10:45 -0000
@@ -199,7 +199,6 @@
 	{
 		int i = 0;
 		foreach (ParameterInfo p in pi) {
-			bool isPointer = false;
 			if (p.ParameterType.IsByRef) {
 				o.Write (p.IsOut ? "out " : "ref ");
 				o.Write (FormatType (p.ParameterType.GetElementType ()));
