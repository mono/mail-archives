Index: ChangeLog
===================================================================
--- ChangeLog	(revision 59969)
+++ ChangeLog	(working copy)
@@ -1,5 +1,8 @@
 2006-04-23 Tal Klahr <talk@mainsoft.com>
 
+	* System.Web_test.dll.sources: add ViewTest.cs and MultiViewTest.cs
+2006-04-23 Tal Klahr <talk@mainsoft.com>
+
 	* System.Web_test.dll.sources: add BulletedListTest.cs
 
 2006-04-20 Andrew Skiba <andrews@mainsoft.com>
Index: System.Web_test.dll.sources
===================================================================
--- System.Web_test.dll.sources	(revision 59969)
+++ System.Web_test.dll.sources	(working copy)
@@ -134,6 +134,7 @@
 System.Web.UI.WebControls/LoginTest.cs
 System.Web.UI.WebControls/LoginViewTest.cs
 System.Web.UI.WebControls/MonthChangedEventArgsTest.cs
+System.Web.UI.WebControls/MultiViewTest.cs
 System.Web.UI.WebControls/PagedDataSourceTest.cs
 System.Web.UI.WebControls/PanelTest.cs
 System.Web.UI.WebControls/RadioButtonListTest.cs
@@ -168,6 +169,7 @@
 System.Web.UI.WebControls/ValidatedControlConverterTest.cs
 System.Web.UI.WebControls/ValidationSummaryTest.cs
 System.Web.UI.WebControls/ValidatorTest.cs
+System.Web.UI.WebControls/ViewTest.cs
 System.Web.UI.WebControls/WebColorConverterTest.cs
 System.Web.UI.WebControls/WebControlTest.cs
 System.Web.UI.WebControls/XmlTest.cs
Index: Test/System.Web.UI.WebControls/MultiViewTest.cs
===================================================================
--- Test/System.Web.UI.WebControls/MultiViewTest.cs	(revision 0)
+++ Test/System.Web.UI.WebControls/MultiViewTest.cs	(revision 0)
@@ -0,0 +1,347 @@
+//
+// Tests for System.Web.UI.WebControls.MultiView.cs
+//
+// Author:
+//	Yoni Klein (yonik@mainsoft.com)
+//
+//
+// Copyright (C) 2005 Novell, Inc (http://www.novell.com)
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+
+#if NET_2_0
+
+using NUnit.Framework;
+using System;
+using System.IO;
+using System.Globalization;
+using System.Web;
+using System.Web.UI;
+using System.Web.UI.WebControls;
+
+namespace MonoTests.System.Web.UI.WebControls
+{
+
+
+	class PokerMultiView : MultiView
+	{
+		public PokerMultiView ()
+		{
+			TrackViewState ();
+		}
+
+		public object SaveState ()
+		{
+			return SaveControlState ();
+		}
+
+		public void LoadState (object o)
+		{
+			LoadControlState (o);
+		}
+
+		public StateBag StateBag
+		{
+			get { return base.ViewState; }
+		}
+
+		public string Render ()
+		{
+			StringWriter sw = new StringWriter ();
+			HtmlTextWriter tw = new HtmlTextWriter (sw);
+			Render (tw);
+			return sw.ToString ();
+		}
+
+		public void DoAddParsedSubObject (object e)
+		{
+			AddParsedSubObject (e);
+		}
+
+		public void DoOnActiveViewChanged (EventArgs e)
+		{
+			base.OnActiveViewChanged (e);
+		}
+
+		public void DoBubbleEvent (object source, EventArgs e)
+		{
+			OnBubbleEvent (source, e);
+		}
+
+		public void AddViewCtrl (View v)
+		{
+			this.Controls.Add (v);
+		}
+	}
+
+	[TestFixture]
+	public class MultiViewTest
+	{
+
+		[Test]
+		public void MultiView_DefaultProperties ()
+		{
+			PokerMultiView pmw = new PokerMultiView ();
+			Assert.AreEqual (0, pmw.StateBag.Count, "ViewState.Count");
+			Assert.AreEqual (-1, pmw.ActiveViewIndex, "ActiveViewIndex");
+			Assert.AreEqual (0, pmw.Views.Count, "DefaultZeroViews");
+			Assert.AreEqual (PokerMultiView.NextViewCommandName, "NextView", "DefaultNextViewCommandName");
+			Assert.AreEqual (PokerMultiView.PreviousViewCommandName, "PrevView", "DefaultPrevViewCommandName");
+			Assert.AreEqual (PokerMultiView.SwitchViewByIDCommandName, "SwitchViewByID", "SwitchViewByIDCommandName");
+			Assert.AreEqual (PokerMultiView.SwitchViewByIndexCommandName, "SwitchViewByIndex", "SwitchViewByIndexCommandName");
+		}
+
+		[Test]
+		[Category ("NotWorking")] // NotImplementedException on Mono
+		public void MultiView_NotWorkingDefaultProperties ()
+		{
+			PokerMultiView pmw = new PokerMultiView ();
+			Assert.IsTrue (pmw.EnableTheming, "EnableTheming"); 
+
+		}
+
+		[Test]
+		public void MultiView_AddViews ()
+		{
+			PokerMultiView pmv = new PokerMultiView ();
+			View v1 = new View ();
+			pmv.Controls.Add (v1);			
+			Assert.AreEqual (1, pmv.Views.Count, "ViewsCount");
+			Assert.AreEqual (-1, pmv.ActiveViewIndex, "ActiveViewIndex");
+		}
+
+
+
+		[Test]
+		[Category ("NotWorking")] // ActiveIndex property assigning fails to work in Mono
+		public void MultiView_ActiveIndex ()
+		{
+			PokerMultiView pmv = new PokerMultiView ();
+			View myView = new View ();
+			Assert.AreEqual (-1, pmv.ActiveViewIndex, "ActiveViewIndexDefault");
+			pmv.ActiveViewIndex = 0;
+			Assert.AreEqual (0, pmv.ActiveViewIndex, "ActiveViewIndexChange");
+			pmv.Controls.Remove (myView);
+			Assert.AreEqual (0, pmv.Controls.Count, "ControlsCount");
+			Assert.AreEqual (0, pmv.ActiveViewIndex, "ActiveViewIndexRemove");
+		}
+
+
+
+		[Test]
+		[Category ("NotWorking")] // SetActiveView method fails to work in Mono
+		public void MultiView_SetActiveView ()
+		{
+			PokerMultiView pmw = new PokerMultiView ();
+			PokerView pv1 = new PokerView ();
+			pmw.Controls.Add (pv1);
+			pmw.SetActiveView (pv1);
+			Assert.AreEqual (pv1, pmw.GetActiveView (), "GetActiveView");
+			Assert.AreEqual (1, pmw.Controls.Count, "MultiViewControlsCount");
+
+		}
+
+		[Test]
+		[Category ("NotWorking")] // This test fails on side effect of set ActiveViewIndex 
+		public void MultiView_RemoveViewControlEvent ()
+		{
+			PokerMultiView pmv = new PokerMultiView ();
+			View pv1 = new View ();
+			View pv2 = new View ();
+			View pv3 = new View ();
+			pmv.Controls.Add (pv1);
+			pmv.Controls.Add (pv2);
+			pmv.Controls.Add (pv3);
+			pmv.SetActiveView (pv1);
+			Assert.AreEqual (0, pmv.ActiveViewIndex, "MultiViewActiveView");
+			Assert.AreEqual (3, pmv.Controls.Count, "MultiViewControlsCount1");
+			pmv.Controls.Remove (pv1);
+			Assert.AreEqual (2, pmv.Controls.Count, "MultiViewControlsCount2");
+			// Protected method MultiView RemovedControl has changed active view to next 
+			Assert.AreSame (pv2, pmv.GetActiveView (), "EventRemovedControl");
+
+		}
+
+		[Test]
+		public void MultiView_AddParsedSubObject ()
+		{
+			PokerMultiView pmv = new PokerMultiView ();
+			View v1 = new View ();
+			pmv.DoAddParsedSubObject (v1);
+			Assert.AreEqual (1, pmv.Controls.Count, "AddParsedSubObjectSuccssed");
+		}
+
+
+		[Test]
+		public void MultiView_CreateControlCollection ()
+		{
+			PokerMultiView pmv = new PokerMultiView ();
+			Assert.IsNotNull (pmv.Views, "CreatingViewCollection");
+		}
+
+
+		[Test]
+		public void MultiView_Render ()
+		{
+			PokerMultiView b = new PokerMultiView ();
+			string html = b.Render ();
+			Assert.AreEqual (b.Render (), string.Empty, "DefaultRender");
+		}
+
+		[Test]
+		public void MultiView_ButtonRender ()
+		{
+			PokerMultiView m = new PokerMultiView ();
+			PokerView v = new PokerView ();
+			Button b = new Button ();
+			b.ID = "test";
+			v.Controls.Add (b);
+			m.Controls.Add (v);
+			m.SetActiveView (v);
+			string html = m.Render ();
+			Assert.AreEqual (m.Render (), "<input type=\"submit\" name=\"test\" value=\"\" id=\"test\" />", "ButtonRender");			
+		}
+
+		[Test]
+		public void MultiView_SomeViewsButtonRender ()
+		{
+			PokerMultiView m = new PokerMultiView ();
+			View v = new View ();
+			View v1 = new View ();
+			Button b = new Button ();
+			Button b1 = new Button ();
+			b1.ID = "test1";
+			b.ID = "test";
+			v.Controls.Add (b);
+			v1.Controls.Add (b1);
+			m.Controls.Add (v);
+			m.Controls.Add (v1);
+			m.SetActiveView (v);
+			Assert.AreEqual (m.Render (), "<input type=\"submit\" name=\"test\" value=\"\" id=\"test\" />", "ViewWithButtonRender");
+			m.SetActiveView (v1);
+			Assert.AreEqual (m.Render (), "<input type=\"submit\" name=\"test1\" value=\"\" id=\"test1\" />", "ChangeViewButtonRender");
+
+		}
+
+		[Test]
+		[Category ("NotWorking")] // This test fails on side effect of set ActiveViewIndex 
+		public void MultiView_ControlState ()
+		{
+			PokerMultiView pmv = new PokerMultiView ();
+			View v1 = new View ();
+			View v2 = new View ();
+			View v3 = new View ();
+			pmv.AddViewCtrl (v1);
+			pmv.AddViewCtrl (v2);
+			pmv.AddViewCtrl (v3);
+			pmv.SetActiveView (v1);
+			Assert.AreEqual (v1, pmv.GetActiveView (), "BeforeLoadState");
+			object state = pmv.SaveState ();
+			pmv.SetActiveView (v2);
+			Assert.AreEqual (1, pmv.ActiveViewIndex, "AftreSetActiveViewChanged");
+			pmv.LoadState (state);
+			Assert.AreEqual (0, pmv.ActiveViewIndex, "AftreLoadState");
+
+		}
+
+
+		// Events Stuff
+
+		private bool OnActiveChanged;
+
+		private void OnActiveViewChangedHandler (object sender, EventArgs e)
+		{
+			OnActiveChanged = true;
+		}
+
+		private void ResetEvents ()
+		{
+			OnActiveChanged = false;
+		}
+
+		[Test]
+		public void MultiView_Events ()
+		{
+			PokerMultiView pmv = new PokerMultiView ();
+			pmv.ActiveViewChanged += new EventHandler (OnActiveViewChangedHandler);
+			Assert.AreEqual (false, OnActiveChanged, "OnActiveChanged");
+			pmv.DoOnActiveViewChanged (new EventArgs ());
+			Assert.AreEqual (true, OnActiveChanged, "AfterOnActiveChanged");
+
+		}
+
+		[Test]
+		[Category ("NotWorking")] // This test fails on side effect of set ActiveViewIndex 
+		public void MultiView_OnBubbleEvent ()
+		{
+			Page myPage = new Page ();
+			PokerMultiView pmv = new PokerMultiView ();
+			View v1 = new View ();
+			View v2 = new View ();
+			pmv.Controls.Add (v1);
+			pmv.Controls.Add (v2);
+			pmv.ActiveViewIndex = 0;
+			// Command NextView
+			CommandEventArgs ceaNext = new CommandEventArgs ("NextView", null);
+			pmv.DoBubbleEvent (this, ceaNext);
+			Assert.AreEqual (1, pmv.ActiveViewIndex, "BubbleEventNext ");
+			// Command PrevView
+			CommandEventArgs ceaPrev = new CommandEventArgs ("PrevView", null);
+			pmv.DoBubbleEvent (this, ceaPrev);
+			Assert.AreEqual (0, pmv.ActiveViewIndex, "BubbleEventPrev");
+			// Command SwitchViewByIndex
+			CommandEventArgs ceaSwitch = new CommandEventArgs ("SwitchViewByIndex", "1");
+			pmv.DoBubbleEvent (this, ceaSwitch);
+			Assert.AreEqual (1, pmv.ActiveViewIndex, "BubbleSwitchViewByIndex");
+			// Command SwitchViewByID
+			v1.ID = "v1";
+			myPage.Controls.Add (pmv);    // FindControl inherited from control & Page must exist
+			CommandEventArgs ceaSwitchViewByID = new CommandEventArgs ("SwitchViewByID", "v1");
+			pmv.DoBubbleEvent (this, ceaSwitchViewByID);
+			Assert.AreEqual (0, pmv.ActiveViewIndex, "SwitchViewByID");
+		}
+
+		[Test]
+		[Category ("NotWorking")] // On setting a wrong index, the ArgumentOutOfRangeException exception must be thrown 
+		[ExpectedException (typeof (ArgumentOutOfRangeException))]
+		public void MultiView_IndexOutRange ()
+		{
+			PokerMultiView pmw = new PokerMultiView ();
+			View pv1 = new View ();
+			pmw.Controls.Add (pv1);
+			pmw.SetActiveView (pv1);
+			pmw.ActiveViewIndex = 7;
+
+		}
+
+		[Test]
+		[Category ("NotWorking")] // On attempting add to MultiViewControlCollection not View Control, the HttpException must be thrown 
+		[ExpectedException (typeof (HttpException))]
+		public void MultiView_AddParsedSubObjectExeption ()
+		{
+			PokerMultiView pmv = new PokerMultiView ();
+			Button b1 = new Button ();
+			pmv.DoAddParsedSubObject (b1);
+
+		}
+	}
+}
+#endif
\ No newline at end of file

Property changes on: Test\System.Web.UI.WebControls\MultiViewTest.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: Test/System.Web.UI.WebControls/ViewTest.cs
===================================================================
--- Test/System.Web.UI.WebControls/ViewTest.cs	(revision 0)
+++ Test/System.Web.UI.WebControls/ViewTest.cs	(revision 0)
@@ -0,0 +1,187 @@
+//
+// Tests for System.Web.UI.WebControls.View.cs
+//
+// Author:
+//	Yoni Klein (yonik@mainsoft.com)
+//	Merav Sudri(meravs@mainsoft.com)
+//	Tal Klahr  (talk@mainsoft.com)
+//
+//
+// Copyright (C) 2005 Novell, Inc (http://www.novell.com)
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+#if NET_2_0
+
+
+using NUnit.Framework;
+using System;
+using System.IO;
+using System.Globalization;
+using System.Web;
+using System.Web.UI;
+using System.Web.UI.WebControls;
+
+namespace MonoTests.System.Web.UI.WebControls
+{
+
+	class PokerView : View
+	{
+		public PokerView ()
+		{
+			TrackViewState ();
+		}
+
+		public object SaveState ()
+		{
+			return SaveViewState ();
+		}
+
+		public void LoadState (object o)
+		{
+			LoadViewState (o);
+		}
+
+		public StateBag StateBag
+		{
+			get { return base.ViewState; }
+		}
+
+		public string Render ()
+		{
+			StringWriter sw = new StringWriter ();
+			HtmlTextWriter tw = new HtmlTextWriter (sw);
+			Render (tw);
+			return sw.ToString ();
+		}
+
+		public void DoOnActivate (EventArgs e)
+		{
+			base.OnActivate (e);
+		}
+
+		public void DoOnDeactivate (EventArgs e)
+		{
+			base.OnDeactivate (e);
+		}
+
+
+	}
+
+	[TestFixture]
+	public class ViewTest
+	{
+		[Test]
+		public void View_DefaultProperties ()
+		{
+			PokerView b = new PokerView ();
+			Assert.AreEqual (0, b.StateBag.Count, "ViewState.Count");
+			Assert.AreEqual (true, b.EnableTheming, "ViewEnableTheming");		
+		}
+				
+		[Test]
+		[Category ("NotWorking")] // View visible property bug in Mono: default is true instead of false
+		public void View_NotWorkingDefaultProperties ()
+		{
+			PokerView b = new PokerView ();
+			Assert.AreEqual (false, b.Visible, "ViewVisible");
+		}
+
+		[Test]
+		public void View_AssignToDefaultProperties ()
+		{
+			PokerView b = new PokerView ();			
+			b.EnableTheming = false;
+			Assert.AreEqual (false, b.EnableTheming, "ThemingValidation");
+		}
+
+
+		[Test]
+		public void View_Defaults_Render ()
+		{
+			PokerView b = new PokerView ();
+			string html = b.Render ();
+			Assert.AreEqual (b.Render (), string.Empty, "RenderViewState");
+		}
+
+		[Test]
+		public void View_RenderStateWithChilds ()
+		{
+			PokerView pv = new PokerView ();
+			Button btn = new Button ();
+			btn.Text = "MyTestButton";
+			pv.Controls.Add (btn);
+			string my = pv.Render ();
+			Assert.AreEqual (pv.Render (), "<input type=\"submit\" value=\"MyTestButton\" />", "RenderViewStateWithChilds");
+		}
+
+
+
+		// Events Stuff
+		private bool activated = false;
+		private bool deactivated = false;
+
+		private void ViewActivate (object sender, EventArgs e)
+		{
+			activated = true;
+		}
+
+		private void ViewDeActivate (object sender, EventArgs e)
+		{
+			deactivated = true;
+		}
+
+		private void ResetEvents ()
+		{
+			activated = false;
+			deactivated = false;
+		}
+
+
+		[Test]
+		public void View_Events ()
+		{
+			PokerView pv = new PokerView ();
+			ResetEvents ();
+			pv.Activate += new EventHandler (ViewActivate);
+			Assert.AreEqual (false, activated, "BeforeActivate");
+			pv.DoOnActivate (new EventArgs ());
+			Assert.AreEqual (true, activated, "AfterActivate");
+			ResetEvents ();
+			pv.Deactivate += new EventHandler (ViewDeActivate);
+			Assert.AreEqual (false, deactivated, "BeforeDeactivate");
+			pv.DoOnDeactivate (new EventArgs ());
+			Assert.AreEqual (true, deactivated, "AfterDeactivate");
+		}		
+
+		[Test]
+		[Category ("NotWorking")] // On assigninging View visible property, an InvalidOperationException must be thrown: bug in Mono
+		[ExpectedException (typeof (InvalidOperationException))]
+		public void View_Visible_Assign ()
+		{
+			PokerView b = new PokerView ();
+			b.Visible = true;
+		}
+	}
+}
+
+#endif
+

Property changes on: Test\System.Web.UI.WebControls\ViewTest.cs
___________________________________________________________________
Name: svn:eol-style
   + native

