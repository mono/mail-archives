using System;
using System.IO;
using System.Collections;
using System.Text;

namespace CaseRePorter {
	class PathElement {
		public override string ToString () {return Name;}
		public class ResultElement {
			public PathElement file;
			public int lineno;
			public string line;
			public PathElement expected;
			public ResultElement (PathElement file, int lineno, string line, PathElement expected) {
				this.file = file;
				this.line = line;
				this.lineno = lineno;
				this.expected = expected;
				file.BadlyReferences.Add (this);
				expected.BadlyReferencedBy.Add (this);
			}
		}
		string _path;
		string _name;
		public string Path {
			get {
				return _path;
			}
		}
		ArrayList _referencedBy = new ArrayList ();
		ArrayList _references = new ArrayList ();
		public ArrayList BadlyReferencedBy {
			get {
				return _referencedBy;
			}
		}
		public ArrayList BadlyReferences {
			get {
				return _references;
			}
		}
		static bool FindImpl (string line, string name)  {
			int index = line.IndexOf (name);
			if (index == -1)
				return  false;
			if (index != 0 && char.IsLetterOrDigit(line[index-1]))
				return false; //has alphanum before name
			if (line.Length <= name.Length + index)
				return true; //does not have alphanums after name
            if (char.IsLetterOrDigit(line [index+name.Length]))
				return false;
			return true;
		}

		public bool FindExact (string line) {
			return FindImpl (line, Name);
		}
		public bool FindCaseInsensitive (string lc_line) {
			return FindImpl (lc_line, NameLC);
		}
		public string Name {
			get {
				if (_name != null)
					return _name;
				_name = System.IO.Path.GetFileName (Path);
				return _name;
			}
		}
		string _nameLC;
		public string NameLC {
			get {
				if (_nameLC != null)
					return _nameLC;
				_nameLC = Name.ToLower();
				return _nameLC;
			}
		}
		public PathElement (string path) {
			_path = path;
		}
		public void Check (string lc_lines, string lines, PathElement file) {
			if (!FindCaseInsensitive (lc_lines))
				return; //the most often case
			//there is something, search better now
			int lineno=0;
			using (StringReader sr = new StringReader(lines)) {
				while (true) {
					lineno ++;
					string line = sr.ReadLine ();
					if (line == null)
						break;
					string lc_line = line.ToLower ();
					if (!FindCaseInsensitive (lc_line))
						continue;
					if (FindExact (line))
						continue;
					new ResultElement (file, lineno, line, this);
				}
			}
		}
	}
	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	class CaseRePorter {
		Hashtable _sources = new Hashtable ();
		ArrayList _targets = new ArrayList ();
		public PathElement Source (string s) {return (PathElement)_sources [s];}
		public PathElement Target (int i) {return (PathElement)_targets [i];}

		const long HARDCODED_MAX_LENGTH=1000000L;
		const long HARDCODED_MAX_STRLEN=500L;

		public void Process () {
			int i=0;
			foreach (PathElement file in _targets) {
#if !BE_QUIET
				Console.Error.Write ("Processing target {0} out of {1}:{2}       \r",
					++i, _targets.Count, file.Name);
#endif
				FileInfo fi = new FileInfo (file.Path);
				if (fi.Length > HARDCODED_MAX_LENGTH) {
#if !BE_QUIET
					Console.Error.Write ("\n *** Skipping big file\n");
#endif
					continue;
				}
				using (StreamReader sr = new StreamReader (file.Path)) {
					string s = sr.ReadToEnd ();
					string lc = s.ToLower ();
					foreach (PathElement path in _sources.Values) {
						path.Check (lc, s, file);
					}

				}
			}
		}
		delegate void Adder (PathElement pathElement);
		static ArrayList ReadList (string path, Adder adder) {
			ArrayList res = new ArrayList ();
			string baseDir = Path.GetDirectoryName (path);
			using (StreamReader sr = File.OpenText (path)) {
				while (true) {
					string s = sr.ReadLine ();
					if (s == null)
						break;
					adder (new PathElement (Path.Combine (baseDir,s)));
				}
			}
			return res;
		}
		void SourceAdder (PathElement pathElement) {
			_sources [pathElement.Name] = pathElement;
		}
		void TargetAdder (PathElement pathElement) {
			_targets.Add (pathElement);
		}
		public CaseRePorter (string sources, string targets) {
			ReadList (sources, new Adder(this.SourceAdder));
			ReadList (targets, new Adder(this.TargetAdder));
		}
		public void PrintReport (TextWriter sw) {
			foreach (PathElement path in _sources.Values) {
				ArrayList arr = path.BadlyReferencedBy;
				if (arr.Count == 0)
					continue;
				sw.WriteLine (path.Name);
				foreach (PathElement.ResultElement el in arr)
					sw.WriteLine ("  {0}:{1}:{2}", el.file.Path, el.lineno, el.line);
			}
		}

		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main(string[] args) {
			CaseRePorter r;
			if (args.Length < 2) {
				Console.Error.WriteLine ("Usage:");
				Console.Error.WriteLine ("  CaseRePorter src-file-lst target-file-lst");
				Console.Error.WriteLine ("  Both file lists should contain existing files with pathes relative to lists themselves");

				return;
			}
			
			r = new CaseRePorter (args[0], args[1]);
			r.Process ();
			Console.Out.WriteLine ("\n\nResults:");
			r.PrintReport (Console.Out);
		}
	}
}
