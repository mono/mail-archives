// Author: Joannes Vermorel (mail: joannes%vermorel%com)
// Date: 26 August 2005

using System;
using System.Collections;
using System.Diagnostics;

namespace PerfCounterRef
{
	/// <summary>Outputs PerformanceCounter internal helps.</summary>
	public class PerfCounterPrint
	{
		[STAThread]
		public static void Main(string[] args)
		{
			Hashtable counters = new Hashtable();
			Hashtable instances = new Hashtable();

			counters.Add("Cache", new string[]
				{"Async Copy Reads/sec", "Async Data Maps/sec", "Async Fast Reads/sec", "Async MDL Reads/sec", "Async Pin Reads/sec", 
				"Copy Read Hits %", "Copy Reads/sec", "Copy Reads/sec", "Data Flush Pages/sec", "Data Flushes/sec", "Data Map Hits %", 
				"Data Map Pins/sec", "Data Maps/sec", "Fast Read Not Possibles/sec", "Fast Read Resource Misses/sec", 
				"Fast Reads/sec", "Lazy Write Flushes/sec", "Lazy Write Pages/sec", "MDL Read Hits %", "MDL Reads/sec", 
				"Pin Read Hits %", "Pin Reads/sec", "Read Aheads/sec", "Sync Copy Reads/sec", "Sync Data Maps/sec", 
				"Sync Fast Reads/sec", "Sync MDL Reads/sec", "Sync Pin Reads/sec"});

			instances.Add("Cache", new string[] {});

			counters.Add("LogicalDisk", new string[]
				{"% Disk Read Time", "% Disk Time", "% Disk Write Time", "% Idle Time", "Avg. Disk Bytes/Read", "Avg. Disk Bytes/Transfer", 
				"Avg. Disk Bytes/Write", "Avg. Disk Queue Length", "Avg. Disk Read Queue Length", "Avg. Disk sec/Read", "Avg. Disk sec/Read", 
				"Avg. Disk sec/Transfer", "Avg. Disk sec/Write", "Avg. Disk Write Queue Length", "Current Disk Queue Length", "Disk Bytes/sec", 
				"Disk Read Bytes/sec", "Disk Reads/sec", "Disk Transfers/sec", "Disk Write Bytes/sec", "Disk Writes/sec", "Free Megabytes", 
				"Split IO/Sec"});

			instances.Add("LogicalDisk", new string[] {"_Total", "C:", "G:"});


			counters.Add("PhysicalDisk", new string[]
				{"% Disk Read Time", "% Disk Time", "% Disk Write Time", "% Idle Time", "Avg. Disk Bytes/Read", "Avg. Disk Bytes/Transfer", 
				"Avg. Disk Bytes/Write", "Avg. Disk Queue Length", "Avg. Disk Read Queue Length", "Avg. Disk sec/Read", "Avg. Disk sec/Read", 
				"Avg. Disk sec/Transfer", "Avg. Disk sec/Write", "Avg. Disk Write Queue Length", "Current Disk Queue Length", "Disk Bytes/sec", 
				"Disk Read Bytes/sec", "Disk Reads/sec", "Disk Transfers/sec", "Disk Write Bytes/sec", "Disk Writes/sec", "Split IO/Sec"});

			instances.Add("PhysicalDisk", new string[] {"_Total", "0 C:", "2 G:"});

			
			counters.Add("Memory", new string[]
				{"% Committed Bytes In Use", "Available Bytes", "Available KBytes", "Available MBytes", "Cache Bytes", 
				"Cache Bytes Peak", "Cache Faults/sec", "Commit Limit", "Committed Bytes", "Demand Zero Faults/sec", 
				"Free System Page Table Entries", "Page Faults/sec", "Page Writes/sec", "Pages Input/sec", "Pages Output/sec",
				"Pages/sec", "Pool Nonpaged Allocs", "Pool Nonpaged Bytes", "Pool Paged Allocs", "Pool Paged Bytes", 
				"Pool Paged Resident Bytes", "System Cache Resident Bytes", "System Code Resident Bytes", "System Code Total Bytes", 
				"System Driver Resident Bytes", "System Driver Total Bytes", "Transition Faults/sec", "Write Copies/sec"});

			instances.Add("Memory", new string[] {} );

			
			counters.Add("Process", new string[]
				{"% Privileged Time", "% Processor Time", "% User Time", "Creating Process ID", "Elapsed Time", "Handle Count", 
				"ID Process", "IO Data Bytes/sec", "IO Data Operations/sec", "IO Other Bytes/sec", "IO Other Operations/sec", 
				"IO Read Bytes/sec", "IO Read Operations/sec", "IO Write Bytes/sec", "IO Write Operations/sec", "Page Faults/sec", 
				"Page File Bytes", "Page File Bytes Peak", "Pool Nonpaged Bytes", "Pool Paged Bytes", "Pool Paged Bytes", "Priority Base", 
				"Private Bytes", "Thread Count", "Virtual Bytes", "Virtual Bytes Peak", "Working Set", "Working Set Peak"});

			instances.Add("Process", new string[] {"_Total", "PerfCounterRef"});


			counters.Add("Processor", new string[] 
				{
						"% C1 Time", "% C2 Time", "% C3 Time", "% DPC Time", "% Idle Time", "% Interrupt Time", 
					"% Privileged Time", "% Processor Time", "% User Time", "C1 Transitions/sec", "C2 Transitions/sec", 
					"C3 Transitions/sec", "DPC Rate", "DPCs Queued/sec", "Interrupts/sec"});

			instances.Add("Processor", new string[] {"_Total", "0"});


			counters.Add("ProcessorPerformance", new string[]
				{"% of Maximum Frequency", "Power Consumption", "Processor Frequency"});

			instances.Add("ProcessorPerformance", new string[] {"Processor_Number_0"});

			foreach(String category in counters.Keys)
			{
				Console.WriteLine("==== BEGIN CATEGORY: " + category + " ====");
				foreach(String name in (Array) counters[category])
				{
					PerformanceCounter counter =
						new PerformanceCounter(category, name);
					
					Console.WriteLine(name + " = " + counter.CounterHelp);
					Console.WriteLine();

					string[] instanceList = (string[]) instances[category];
				}

				Console.Write("SAMPLE INSTANCES = ");
				foreach(String instance in (String[]) instances[category])
				{
					Console.Write(instance + ", ");
				}
				Console.WriteLine();

				Console.WriteLine("===== END CATEGORY: " + category + " =====");
				Console.WriteLine();
				Console.WriteLine();
			}
		}
	}
}
