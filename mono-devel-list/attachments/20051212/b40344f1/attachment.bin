Index: icall.c
===================================================================
--- icall.c	(revisión: 54166)
+++ icall.c	(copia de trabajo)
@@ -3730,6 +3730,7 @@
 	for (i = 0; i < count; i++) {
 		MonoReflectionAssemblyName *aname;
 		guint32 cols [MONO_ASSEMBLYREF_SIZE];
+		int major, minor, build, revision;
 
 		mono_metadata_decode_row (t, i, cols, MONO_ASSEMBLYREF_SIZE);
 
@@ -3738,14 +3739,15 @@
 
 		aname->name = mono_string_new (domain, mono_metadata_string_heap (image, cols [MONO_ASSEMBLYREF_NAME]));
 
-		aname->major = cols [MONO_ASSEMBLYREF_MAJOR_VERSION];
-		aname->minor = cols [MONO_ASSEMBLYREF_MINOR_VERSION];
-		aname->build = cols [MONO_ASSEMBLYREF_BUILD_NUMBER];
-		aname->revision = cols [MONO_ASSEMBLYREF_REV_NUMBER];
 		aname->flags = cols [MONO_ASSEMBLYREF_FLAGS];
 		aname->versioncompat = 1; /* SameMachine (default) */
 		aname->hashalg = ASSEMBLY_HASH_SHA1; /* SHA1 (default) */
-		aname->version = create_version (domain, aname->major, aname->minor, aname->build, aname->revision);
+		
+		major = cols [MONO_ASSEMBLYREF_MAJOR_VERSION];
+		minor = cols [MONO_ASSEMBLYREF_MINOR_VERSION];
+		build = cols [MONO_ASSEMBLYREF_BUILD_NUMBER];
+		revision = cols [MONO_ASSEMBLYREF_REV_NUMBER];
+		aname->version = create_version (domain, major, minor, build, revision);
 
 		if (create_culture) {
 			gpointer args [1];
@@ -4166,10 +4168,6 @@
 	MONO_ARCH_SAVE_REGS;
 
 	aname->name = mono_string_new (domain, name->name);
-	aname->major = name->major;
-	aname->minor = name->minor;
-	aname->build = name->build;
-	aname->revision = name->revision;
 	aname->hashalg = name->hash_alg;
 	if (by_default_version)
 		aname->version = create_version (domain, name->major, name->minor, name->build, name->revision);
Index: object-internals.h
===================================================================
--- object-internals.h	(revisión: 54166)
+++ object-internals.h	(copia de trabajo)
@@ -902,7 +902,6 @@
 	MonoObject  obj;
 	MonoString *name;
 	MonoString *codebase;
-	gint32 major, minor, build, revision;
 	MonoObject  *cultureInfo;
 	guint32     flags;
 	guint32     hashalg;
