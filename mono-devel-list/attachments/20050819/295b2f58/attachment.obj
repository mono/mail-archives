Index: System/ChangeLog
===================================================================
--- System/ChangeLog	(revision 48556)
+++ System/ChangeLog	(working copy)
@@ -1,5 +1,11 @@
 2005-08-19  Gert Driesen  <drieseng@users.sourceforge.net>
 
+	* Convert.cs: In FromBase64String, return empty byte array for zero
+	length string. Pass bool to InternalFromBase64String to control whether
+	to allow a whitespace-only string.
+
+2005-08-19  Gert Driesen  <drieseng@users.sourceforge.net>
+
 	* Convert.cs: Throw OverflowException if result is larger than
 	ushort.MaxValue to match MS.NET. Remove commented code.
 
Index: System/Convert.cs
===================================================================
--- System/Convert.cs	(revision 48556)
+++ System/Convert.cs	(working copy)
@@ -110,7 +110,7 @@
 		}
 
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
-		extern static byte [] InternalFromBase64String (string str);
+		extern static byte [] InternalFromBase64String (string str, bool allowWhitespaceOnly);
 
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
 		extern static byte [] InternalFromBase64CharArray (char [] arr, int offset, int length);
@@ -135,7 +135,15 @@
 			if (s == null)
 				throw new ArgumentNullException ("s");
 
-			return InternalFromBase64String (s);
+			if (s.Length == 0) {
+				return new byte[0];
+			}
+
+#if NET_2_0
+			return InternalFromBase64String (s, true);
+#else
+			return InternalFromBase64String (s, false);
+#endif
 		}
 
 		public static TypeCode GetTypeCode (object value)
Index: Test/System/ChangeLog
===================================================================
--- Test/System/ChangeLog	(revision 48556)
+++ Test/System/ChangeLog	(working copy)
@@ -1,5 +1,12 @@
-2005-08-18 Gonzalo Paniagua Javier <gonzalo@ximian.com>
+2005-08-19  Gert Driesen <drieseng@users.sourceforge.net>
 
+	* ConvertTest.cs: FromBase64String always return zero-length byte 
+	array for a zero-length string. On 2.0 profile, FromBase64String also
+	returns a zero-length byte array for a whitespace-only string.
+	Added tests for empty and whitespace-only byte array.
+
+2005-08-18  Gonzalo Paniagua Javier <gonzalo@ximian.com>
+
 	* ConvertTest.cs: added test for bug #75840.
 
 2005-08-18  Gert Driesen  <drieseng@users.sourceforge.net>
Index: Test/System/ConvertTest.cs
===================================================================
--- Test/System/ConvertTest.cs	(revision 48556)
+++ Test/System/ConvertTest.cs	(working copy)
@@ -2833,12 +2833,27 @@
 
 		[Test]
 		[ExpectedException (typeof (ArgumentNullException))]
-		public void FromBase64CharArray_Null () 
+		public void FromBase64CharArray_Null ()
 		{
 			Convert.FromBase64CharArray (null, 1, 5);
 		}
 
 		[Test]
+		[ExpectedException (typeof (FormatException))]
+		public void FromBase64CharArray_Empty ()
+		{
+			Convert.FromBase64CharArray (new char[0], 0, 0);
+		}
+
+		[Test]
+		[ExpectedException (typeof (FormatException))]
+		public void FormatBase64CharArray_OnlyWhitespace ()
+		{
+			Convert.FromBase64CharArray (new char[3] {' ', 
+				'\r', '\t'}, 0, 3);
+		}
+
+		[Test]
 		[ExpectedException (typeof (ArgumentOutOfRangeException))]
 		public void FromBase64CharArray_OutOfRangeStart () 
 		{
@@ -2961,17 +2976,22 @@
 		}
 
 		[Test]
-		[ExpectedException (typeof (FormatException))]
 		public void FromBase64_Empty ()
 		{
-			Convert.FromBase64String ("");
+			AssertEquals (new byte[0], Convert.FromBase64String (string.Empty));
 		}
 
 		[Test]
+#if !NET_2_0
 		[ExpectedException (typeof (FormatException))]
+#endif
 		public void FromBase64_OnlyWhiteSpace ()
 		{
+#if NET_2_0
+			AssertEquals (new byte[0], Convert.FromBase64String ("  \r\t"));
+#else
 			Convert.FromBase64String ("  \r\t");
+#endif
 		}
 
 		[Test]
