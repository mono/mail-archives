 mcs/delegate.cs    |   27 +++++++++++++++++++++++----
 tests/Makefile     |    2 +-
 tests/README.tests |    9 +++++++--
 3 files changed, 31 insertions(+), 7 deletions(-)
Index: mcs/ChangeLog
from  Raja R Harinath  <rharinath@novell.com>

	* delegate.cs (Delegate.VerifyApplicability): If the number of
	arguments are the same as the number of parameters, first try to
	verify applicability ignoring  any 'params' modifier on the last
	parameter.
	Fixes #56442.


Index: mcs/delegate.cs
===================================================================
RCS file: /cvs/public/mcs/mcs/delegate.cs,v
retrieving revision 1.97
diff -u -u -r1.97 delegate.cs
--- mcs/delegate.cs 1 Apr 2004 18:32:01 -0000 1.97
+++ mcs/delegate.cs 19 Apr 2004 07:59:11 -0000
@@ -451,18 +451,37 @@
 
 			int pd_count = pd.Count;
 
-			bool not_params_method = (pd_count == 0) ||
+			bool params_method = (pd_count != 0) &&
 				(pd.ParameterModifier (pd_count - 1) != Parameter.Modifier.PARAMS);
 
-			if (not_params_method && pd_count != arg_count) {
+			if (!params_method && pd_count != arg_count) {
 				Report.Error (1593, loc,
 					      "Delegate '" + delegate_type.ToString ()
 					      + "' does not take '" + arg_count + "' arguments");
 				return false;
 			}
 
-			return Invocation.VerifyArgumentsCompat (ec, args, arg_count, mb, !not_params_method,
-								 delegate_type, loc);
+			//
+			// Consider the case:
+			//   delegate void FOO(param object[] args);
+			//   FOO f = new FOO(...);
+			//   f(new object[] {1, 2, 3});
+			//
+			// This should be treated like f(1,2,3).  This is done by ignoring the 
+			// 'param' modifier for that invocation.  If that fails, then the
+			// 'param' modifier is considered.
+			//
+			// One issue is that 'VerifyArgumentsCompat' modifies the elements of
+			// the 'args' array.  However, the modifications appear idempotent.
+			// Normal 'Invocation's also have the same behaviour, implicitly.
+			//
+
+			bool ans = false;
+			if (arg_count == pd_count)
+				ans = Invocation.VerifyArgumentsCompat (ec, args, arg_count, mb, false, delegate_type, loc);
+			if (!ans && params_method)
+				ans = Invocation.VerifyArgumentsCompat (ec, args, arg_count, mb, true,  delegate_type, loc);
+			return ans;
 		}
 		
 		/// <summary>
Index: tests/ChangeLog
from  Raja R Harinath  <rharinath@novell.com>

	* test-237.cs: Test for #56442.

Index: tests/Makefile
===================================================================
RCS file: /cvs/public/mcs/tests/Makefile,v
retrieving revision 1.52
diff -u -u -r1.52 Makefile
--- tests/Makefile 16 Apr 2004 11:11:29 -0000 1.52
+++ tests/Makefile 19 Apr 2004 07:59:13 -0000
@@ -39,7 +39,7 @@
 	test-201 test-202 test-203 test-204 test-205 test-206 test-207 test-208 test-209 test-210 \
 	test-211 test-212 test-213 test-214 test-215 test-216 test-217 test-218 test-219 test-220 \
 	test-221 test-222 test-223 test-224 test-225 test-226 test-227          test-229 test-230 \
-	test-231 test-232 test-233 test-234 test-235 test-236                                     \
+	test-231 test-232 test-233 test-234 test-235 test-236 test-237                            \
 	cls-test-0 cls-test-1 cls-test-2 cls-test-3 cls-test-5 cls-test-6 cls-test-7 cls-test-10  \
 	cls-test-11 cls-test-14 cls-test-15 cls-test-16
 
Index: tests/README.tests
===================================================================
RCS file: /cvs/public/mcs/tests/README.tests,v
retrieving revision 1.82
diff -u -u -r1.82 README.tests
--- tests/README.tests 16 Apr 2004 11:11:29 -0000 1.82
+++ tests/README.tests 19 Apr 2004 07:59:13 -0000
@@ -20,7 +20,7 @@
 
 * Events and Delegates
 
-  test-149.cs test-164.cs verify-3.cs
+  test-149.cs test-164.cs test-237.cs verify-3.cs
 
 * Constant Folding
 
@@ -467,6 +467,11 @@
 Test for bug #56300.  DefaultMemberAttribute should not be created if a
 class has only private interface indexers.
 
+test-237.cs:
+-----------
+Test for bug #56442.  Verify that delegate invocation and normal method
+invocation act the same when the 'params' keyword is used.
+
 verify-1.cs
 -----------
 Test whether we do not jump out of the method in a Try/Finally block.
@@ -572,4 +577,4 @@
 
 2test-6.cs
 ----------
-Test iterators using foreach where you have to load the address of a struct
\ No newline at end of file
+Test iterators using foreach where you have to load the address of a struct
New file: test-237.cs
// Test for bug #56442

public class Params
{
	public static readonly object[] test       = new object[] { 1,         "foo",         3.14         };
	public static readonly object[] test_types = new object[] { typeof(int), typeof(string), typeof(double) };
	
	public delegate void FOO(string s, params object[] args);
	
	public static void foo(string s, params object[] args)
	{
		if (args.Length != test.Length)
			throw new System.Exception("Length mismatch during " + s + " invocation");
		for (int i = 0; i < args.Length; ++i)
			if (args[i].GetType() != test_types[i])
				throw new System.Exception("Type mismatch: " + args[i].GetType() + " vs. " + test_types[i]);
	}

	public static void Main()
	{
		foo("normal", test);
		FOO f = new FOO(foo);
		f("delegate", test);
	}
}
