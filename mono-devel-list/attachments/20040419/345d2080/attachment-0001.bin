--- System.Text.RegularExpressions/interpreter.cs	2004-04-18 19:43:26.521014328 -0400
+++ System.Text.RegularExpressions/interpreter.cs	2004-04-18 20:59:09.699346240 -0400
@@ -324,11 +319,28 @@
 					break;
 				}
 
-				case OpCode.Balance: {
-					Balance (program[pc + 1], program[pc + 2], ptr);
+			        case OpCode.BalanceStart: {
+
+					int start = ptr; //point before the balancing group
+					
+					if (!Eval (Mode.Match, ref ptr, pc + 5))
+						goto Fail;
+					
+					
+					
+					if(!Balance (program[pc + 1], program[pc + 2], (program[pc + 3] == 1 ? true : false) , start)) {
+						goto Fail;
+					}
+
+					
+					pc += program[pc + 4];
 					break;
 				}
 
+				case OpCode.Balance: {
+					goto Pass;
+				}
+
 				case OpCode.IfDefined: {
 					int m = GetLastDefined (program [pc + 2]);
 					if (m < 0)
@@ -809,19 +822,27 @@
 		}
 
 		private void Close (int gid, int ptr) {
-			marks [groups [gid]].End = ptr;
+	       		marks [groups [gid]].End = ptr;
 		}
 
-		private void Balance (int gid, int balance_gid, int ptr) {
+		private bool Balance (int gid, int balance_gid, bool capture, int ptr) {
 			int b = groups [balance_gid];
-			Debug.Assert (marks [b].IsDefined, "Regex", "Balancing group not closed");
 
-			if (gid > 0) {
+			if(b == -1 || marks[b].Index < 0) {
+				//Group not previously matched
+				return false;
+			}
+
+			Debug.Assert (marks [b].IsDefined, "Regex", "Balancng group not closed");
+
+			if (gid > 0 && capture){ 
 				Open (gid, marks [b].Index + marks [b].Length);
 				Close (gid, ptr);
 			}
 
-			groups [balance_gid] = marks [b].Previous;
+			groups [balance_gid] = marks[b].Previous;
+
+			return true;
 		}
 
 		private int Checkpoint () {
--- System.Text.RegularExpressions/parser.cs	2004-04-18 19:43:26.527013416 -0400
+++ System.Text.RegularExpressions/parser.cs	2004-04-18 20:45:56.860876008 -0400
@@ -451,9 +451,15 @@
 					++ ptr;
 					BalancingGroup bal = new BalancingGroup ();
 					bal.Name = name;
-					caps.Add (bal);
+					
+					if(bal.IsNamed) {
+						caps.Add (bal);
+					}
+
 					refs.Add (bal, balance_name);
 
+					ParseGroup (bal, options, null);
+
 					return bal;
 				}
 				else
--- System.Text.RegularExpressions/syntax.cs	2004-04-18 19:43:26.593003384 -0400
+++ System.Text.RegularExpressions/syntax.cs	2004-04-18 13:51:44.000000000 -0400
@@ -319,7 +321,11 @@
 		public override void Compile (ICompiler cmp, bool reverse) {
 			// can't invoke Group.Compile from here :(
 			// so I'll just repeat the code
-		
+			
+			LinkRef tail = cmp.NewLink ();
+
+			cmp.EmitBalanceStart (this.Number, balance.Number, this.IsNamed,  tail);
+
 			int count = Expressions.Count;
 			for (int i = 0; i < count; ++ i) {
 				Expression e;
@@ -331,7 +337,8 @@
 				e.Compile (cmp, reverse);
 			}
 
-			cmp.EmitBalance (this.Number, balance.Number);
+			cmp.EmitBalance ();
+			cmp.ResolveLink(tail);
 		}
 
 		private CapturingGroup balance;
--- System.Text.RegularExpressions/compiler.cs	2004-04-18 19:43:26.517014936 -0400
+++ System.Text.RegularExpressions/compiler.cs	2004-04-18 13:38:26.000000000 -0400
@@ -36,7 +36,8 @@
 		void EmitPosition (Position pos);
 		void EmitOpen (int gid);
 		void EmitClose (int gid);
-		void EmitBalance (int gid, int balance);
+		void EmitBalanceStart(int gid, int balance, bool capture,  LinkRef tail);
+		void EmitBalance ();
 		void EmitReference (int gid, bool ignore, bool reverse);
 
 		// constructs
@@ -187,10 +184,19 @@
 			Emit ((ushort)gid);
 		}
 
-		public void EmitBalance (int gid, int balance) {
-			Emit (OpCode.Balance);
+	       
+
+		public void EmitBalanceStart (int gid, int balance, bool capture, LinkRef tail) {
+			BeginLink (tail);
+			Emit (OpCode.BalanceStart);
 			Emit ((ushort)gid);
 			Emit ((ushort)balance);
+			Emit ((ushort)(capture ? 1 : 0));
+			EmitLink (tail);
+		}
+
+		public void EmitBalance () {
+			Emit (OpCode.Balance);
 		}
 
 		public void EmitReference (int gid, bool ignore, bool reverse) {
--- System.Text.RegularExpressions/arch.cs	2004-04-18 19:43:26.511015848 -0400
+++ System.Text.RegularExpressions/arch.cs	2004-04-18 11:00:11.000000000 -0400
@@ -34,6 +34,7 @@
 		Open,			// open group
 		Close,			// close group
 		Balance,		// balance groups
+		BalanceStart,           //track balance group length
 
 		// control flow
 
