using System;
using System.IO;
using System.Xml;
using System.Xml.Xsl;

public static class XmlTransformExtObj{

  public static int Main( String[] args ){
    if ( args.Length != 2 ) {
      Console.WriteLine( "Usage: XmlTransformExtObj.exe <stylesheet> <xmldocument>" );
      return -1;
    }
    string stylesheet    = args[0];
    string xmldocument   = args[1];

    XmlTransformExtObj.Transform(stylesheet, xmldocument);

    return 0;
  }
  public static void Transform( string stylesheetfilename, string inxml ){
    //create XslTransform object, and load stylesheet
    XslTransform transformationObj = new XslTransform();
    transformationObj.Load( stylesheetfilename );

    //load xml
    XmlDocument doc = new XmlDocument();
    doc.Load( inxml );

    //construct the xsl extension object
    XslExtensionClass GetCalculation = new XslExtensionClass(  "a4" );

    //...and a list to hold it in
    XsltArgumentList xslExtensionArgList = new XsltArgumentList();

    // the namespace must match the namespace given in the xsl
    xslExtensionArgList.AddExtensionObject( "urn:e", GetCalculation );
    
    //Create an XmlTextWriter to output to the console.             
    XmlTextWriter writer = new XmlTextWriter(Console.Out);

    transformationObj.Transform( doc, xslExtensionArgList, writer, null );
//     transformationObj.Transform( doc, null, Console.Out );
  }

  public class XslExtensionClass{

    private string paperType = String.Empty;

    public XslExtensionClass( string paperType ){
      this.paperType = paperType;
    }
    
  /// <summary>GetPageDimensions is a helper method, which returns
  /// the dimensions of a page given the specification of a
  /// papertype</summary> <description>GetPageDimensions is used by
  /// XmlArgumentList.AddExtensionObject, which in turn is called
  /// from the xslt that is processed by the XslTransform.Transform
  /// method. </description>
  /// <returns>An integer list of the dimensions (width,
  /// height)</returns>
  /// <param name="paperType">A string describing the papertype,
  /// e.g. a4</param>

    public int GetPageDimensions(){
      switch( this.paperType ){
        // paper sizes gotten from http://en.wikipedia.org/wiki/Paper_size
      case "a4":{
        return 210297;
      }
      case "letter":{
        return 216279;
      }
      default:{
        throw new ArgumentException("Unknown page size type: "+this.paperType);
      }
      }
    }
  }
}

  /// XslExtensionClass pageDimensions = new XslExtensionClass();
  /// xsltArgumentListObj.AddExtensionObject( "urn:extobj", pageDimensions );
  /// and give them to the Transform method:
  /// transformObj.Transform(xPathNavigatorObj, xsltArgumentListObj, outputObj);
  /// the xsl document needs an xml namespace declaration with the
  /// namespace used in the construction of the XslExtensionObject,
  /// e.g. xmlns:pageDimensions="urn:extobj", and calling the
  /// extension object in the body using e.g.
  /// <xsl:value-of select="pageDimensions:GetPageDimensions([xpath-to-current-node-in-input-xml*]/papertype)"/>
  /// *) most likely '.', but your mileage may vary 
