Index: mono/mono/metadata/ChangeLog
===================================================================
--- mono/mono/metadata/ChangeLog	(revision 141606)
+++ mono/mono/metadata/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2009-09-09  Bill Holmes  <billholmes54@gmail.com>
+
+	* object.c (mono_object_get_virtual_method) : Call 
+	  mono_cominterop_get_invoke if the object is a COM object.
+
+	Code is contributed under MIT/X11 license.
+
 2009-09-08  Rodrigo Kumpera  <rkumpera@novell.com>
 
 	Use inheritance-aware interface offsets. Inherited types use the same offsets
Index: mono/mono/metadata/object.c
===================================================================
--- mono/mono/metadata/object.c	(revision 141606)
+++ mono/mono/metadata/object.c	(working copy)
@@ -40,6 +40,7 @@
 #include <mono/metadata/gc-internal.h>
 #include <mono/utils/strenc.h>
 #include <mono/utils/mono-counters.h>
+#include "cominterop.h"
 
 #ifdef HAVE_BOEHM_GC
 #define NEED_TO_ZERO_PTRFREE 1
@@ -2469,8 +2470,14 @@
 		/* generic methods demand invoke_with_check */
 		if (mono_method_signature (res)->generic_param_count)
 			res = mono_marshal_get_remoting_invoke_with_check (res);
-		else
-			res = mono_marshal_get_remoting_invoke (res);
+		else {
+#ifndef DISABLE_COM
+			if (klass == mono_defaults.com_object_class || klass->is_com_object)
+				res = mono_cominterop_get_invoke (res);
+			else
+#endif
+				res = mono_marshal_get_remoting_invoke (res);
+		}
 	} else {
 		if (method->is_inflated) {
 			/* Have to inflate the result */
Index: mono/mono/mini/ChangeLog
===================================================================
--- mono/mono/mini/ChangeLog	(revision 141606)
+++ mono/mono/mini/ChangeLog	(working copy)
@@ -1,3 +1,11 @@
+2009-09-09  Bill Holmes  <billholmes54@gmail.com>
+
+	* mini-trampolines.c (mono_delegate_trampoline) : Call
+	  mono_cominterop_get_invoke if the delegate target object
+	  is a COM object.
+
+	Code is contributed under MIT/X11 license.
+
 2009-09-08  Rodrigo Kumpera  <rkumpera@novell.com>
 
 	* mini-x86.c (mono_arch_emit_call): Don't reduce stack usage by 4
Index: mono/mono/mini/mini-trampolines.c
===================================================================
--- mono/mono/mini/mini-trampolines.c	(revision 141606)
+++ mono/mono/mini/mini-trampolines.c	(working copy)
@@ -819,8 +819,13 @@
 		 * (ctor_with_method () does this, but it doesn't store the wrapper back into
 		 * delegate->method).
 		 */
-		if (delegate->target && delegate->target->vtable->klass == mono_defaults.transparent_proxy_class)
-			method = mono_marshal_get_remoting_invoke (method);
+		if (delegate->target && delegate->target->vtable->klass == mono_defaults.transparent_proxy_class) {
+#ifndef DISABLE_COM
+			if (((MonoTransparentProxy *)delegate->target)->remote_class->proxy_class != mono_defaults.com_object_class && 
+			   !((MonoTransparentProxy *)delegate->target)->remote_class->proxy_class->is_com_object)
+#endif
+				method = mono_marshal_get_remoting_invoke (method);
+		}
 		else if (mono_method_signature (method)->hasthis && method->klass->valuetype)
 			method = mono_marshal_get_unbox_wrapper (method);
 	} else {
Index: mono/mono/tests/cominterop.cs
===================================================================
--- mono/mono/tests/cominterop.cs	(revision 141606)
+++ mono/mono/tests/cominterop.cs	(working copy)
@@ -425,6 +425,9 @@
 			if (TestITestPresSig (itest as ITestPresSig) != 0)
 				return 173;
 
+			if (TestITestDelegate (itest) != 0)
+				return 174;
+
 			#endregion // Runtime Callable Wrapper Tests
 
 			#region COM Callable Wrapper Tests
@@ -587,6 +590,19 @@
 		int ITestOut ([MarshalAs (UnmanagedType.Interface)]out ITestPresSig val);
 	}
 
+	delegate void SByteInDelegate (sbyte val);
+	delegate void ByteInDelegate (byte val);
+	delegate void ShortInDelegate (short val);
+	delegate void UShortInDelegate (ushort val);
+	delegate void IntInDelegate (int val);
+	delegate void UIntInDelegate (uint val);
+	delegate void LongInDelegate (long val);
+	delegate void ULongInDelegate (ulong val);
+	delegate void FloatInDelegate (float val);
+	delegate void DoubleInDelegate (double val);
+	delegate void ITestInDelegate (ITest val);
+	delegate void ITestOutDelegate (out ITest val);
+
 	public class ManagedTestPresSig : ITestPresSig
 	{		// properties need to go first since mcs puts them there
 		public ITestPresSig Test
@@ -947,4 +963,40 @@
 			return 1011;
 		return 0;
 	}
+
+	public static int TestITestDelegate (ITest itest)
+	{
+		try {
+			ITest itest2;
+
+			SByteInDelegate SByteInFcn= itest.SByteIn;
+			ByteInDelegate ByteInFcn = itest.ByteIn;
+			UShortInDelegate UShortInFcn = itest.UShortIn;
+			IntInDelegate IntInFcn = itest.IntIn;
+			UIntInDelegate UIntInFcn = itest.UIntIn;
+			LongInDelegate LongInFcn = itest.LongIn;
+
+			ULongInDelegate ULongInFcn = itest.ULongIn;
+			FloatInDelegate FloatInFcn = itest.FloatIn;
+			DoubleInDelegate DoubleInFcn = itest.DoubleIn;
+			ITestInDelegate ITestInFcn = itest.ITestIn;
+			ITestOutDelegate ITestOutFcn = itest.ITestOut;
+
+			SByteInFcn (-100);
+			ByteInFcn (100);
+			UShortInFcn (100);
+			IntInFcn (-100);
+			UIntInFcn (100);
+			LongInFcn (-100);
+			ULongInFcn (100);
+			FloatInFcn (3.14f);
+			DoubleInFcn (3.14);
+			ITestInFcn (itest);
+			ITestOutFcn (out itest2);
+		}
+		catch (Exception) {
+			return 1;
+		}
+		return 0;
+	}
 }
Index: mono/mono/tests/ChangeLog
===================================================================
--- mono/mono/tests/ChangeLog	(revision 141606)
+++ mono/mono/tests/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2009-09-09  Bill Holmes  <billholmes54@gmail.com>
+
+	* cominterop.cs : Adding a test for invoking delegates that 
+	  target COM methods.
+
+	Contributed under MIT/X11 license.
+
 2009-09-08  Rodrigo Kumpera  <rkumpera@novell.com>
 
 	* iface4.cs: Add one more check.