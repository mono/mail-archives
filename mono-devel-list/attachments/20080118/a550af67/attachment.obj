Index: String.cs
===================================================================
--- String.cs	(revision 93268)
+++ String.cs	(working copy)
@@ -202,6 +202,7 @@
 			return Split (separator, Int32.MaxValue);
 		}
 
+		[MonoTODO ("Implementation incorrect: Split uses the Unicode Whitespace data, not WhiteChars")]
 		public String[] Split (char[] separator, int count)
 		{
 			if (separator == null || separator.Length == 0)
@@ -221,6 +222,7 @@
 
 #if NET_2_0
 		[ComVisible (false)]
+		[MonoTODO ("Implementation incorrect: Split uses the Unicode Whitespace data, not WhiteChars")]
 		[MonoDocumentationNote ("code should be moved to managed")]
 		public String[] Split (char[] separator, int count, StringSplitOptions options)
 		{
@@ -239,6 +241,7 @@
 		}
 
 		[ComVisible (false)]
+		[MonoTODO ("Implementation incorrect: Split uses the Unicode Whitespace data, not WhiteChars")]
 		public String[] Split (string[] separator, int count, StringSplitOptions options)
 		{
 			if (separator == null || separator.Length == 0)
@@ -360,7 +363,7 @@
 			}
 
 			return tmp;
-		}	
+		}
 
 		private static readonly char[] WhiteChars = { (char) 0x9, (char) 0xA, (char) 0xB, (char) 0xC, (char) 0xD,
 #if NET_2_0
@@ -370,33 +373,131 @@
 			(char) 0x2005, (char) 0x2006, (char) 0x2007, (char) 0x2008, (char) 0x2009, (char) 0x200A, (char) 0x200B,
 			(char) 0x3000, (char) 0xFEFF };
 
+		internal unsafe String SubstringUnchecked (int startIndex, int length)
+		{
+			if (length == 0)
+				return String.Empty;
+
+			string tmp = InternalAllocateStr (length);
+			fixed (char* dest = tmp, src = this) {
+				CharCopy (dest, src + startIndex, length);
+			}
+			return tmp;
+		}
+
+		private int FindNotWhiteSpace (int pos, int target, int change)
+		{
+			for (; pos != target; pos += change) {
+				char c = this[pos];
+				if (c < 0x80) {
+					if (c == 0x20)
+						continue;
+					if (c >= 0x9 && c <= 0xD)
+						continue;
+				}
+				else {
+					if (c == 0xA0 || c == 0xFEFF || c == 0x3000)
+						continue;
+#if NET_2_0
+					if (c == 0x85 || c == 0x1680 || c == 0x2028 || c == 0x2029)
+						continue;
+#endif
+					if (c >= 0x2000 && c <= 0x200B)
+						continue;
+				}
+				return pos;
+			}
+			return pos;
+		}
+
+		private unsafe int FindNotInTable (int pos, int target, int change, char[] table)
+		{
+			fixed (char* tablePtr = table) {
+				for (; pos != target; pos += change) {
+					int x = 0;
+					while (x < table.Length) {
+						if (this[pos] == tablePtr[x])
+							break;
+						x++;
+					}
+					if (x == table.Length)
+						return pos;
+				}
+			}
+			return pos;
+		}
+
 		public String Trim ()
 		{
-			return InternalTrim (WhiteChars, 0);
+			if (length == 0) 
+				return String.Empty;
+			int start = FindNotWhiteSpace (0, length - 1, 1);
+
+			if (start == length)
+				return String.Empty;
+
+			int end = FindNotWhiteSpace (length - 1, start, -1);
+
+			int newLength = end - start + 1;
+			if (newLength == length)
+				return this;
+
+			return SubstringUnchecked (start, newLength);
 		}
 
 		public String Trim (params char[] trimChars)
 		{
 			if (trimChars == null || trimChars.Length == 0)
-				trimChars = WhiteChars;
+				return Trim ();
 
-			return InternalTrim (trimChars, 0);
+			if (length == 0) 
+				return String.Empty;
+			int start = FindNotInTable (0, length - 1, 1, trimChars);
+
+			if (start == length)
+				return String.Empty;
+
+			int end = FindNotInTable (length - 1, start, -1, trimChars);
+
+			int newLength = end - start + 1;
+			if (newLength == length)
+				return this;
+
+			return SubstringUnchecked (start, newLength);
 		}
 
 		public String TrimStart (params char[] trimChars)
 		{
+			if (length == 0) 
+				return String.Empty;
+			int start;
 			if (trimChars == null || trimChars.Length == 0)
-				trimChars = WhiteChars;
+				start = FindNotWhiteSpace (0, length - 1, 1);
+			else
+				start = FindNotInTable (0, length - 1, 1, trimChars);
 
-			return InternalTrim (trimChars, 1);
+			if (start == 0)
+				return this;
+			int newLength = length - start + 1;
+
+			return SubstringUnchecked (start, newLength);
 		}
 
 		public String TrimEnd (params char[] trimChars)
 		{
+			if (length == 0) 
+				return String.Empty;
+			int end;
 			if (trimChars == null || trimChars.Length == 0)
-				trimChars = WhiteChars;
+				end = FindNotWhiteSpace (length - 1, 0, -1);
+			else
+				end = FindNotInTable (length - 1, 0, -1, trimChars);
 
-			return InternalTrim (trimChars, 2);
+			end++;
+			if (end == length)
+				return this;
+
+			return SubstringUnchecked (0, end);
 		}
 
 		public static int Compare (String strA, String strB)
@@ -1510,7 +1611,7 @@
 			String tmp = InternalAllocateStr (length);
 			if (length != 0) {
 				fixed (char *dest = tmp, src = str) {
-					memcpy ((byte*)dest, (byte*)src, length * 2);
+					CharCopy (dest, src, length);
 				}
 			}
 			return tmp;
@@ -1542,12 +1643,12 @@
 			String tmp = InternalAllocateStr (s1.Length + s2.Length);
 			if (s1.Length != 0) {
 				fixed (char *dest = tmp, src = s1) {
-					memcpy ((byte*)dest, (byte*)src, s1.length * 2);
+					CharCopy (dest, src, s1.length);
 				}
 			}
 			if (s2.Length != 0) {
 				fixed (char *dest = tmp, src = s2) {
-					memcpy ((byte*)(dest + s1.Length), (byte*)src, s2.length * 2);
+					CharCopy (dest + s1.Length, src, s2.length);
 				}
 			}
 
@@ -1628,16 +1729,10 @@
 
 			String tmp = InternalAllocateStr (s1.length + s2.length);
 
-			if (s1.Length != 0) {
-				fixed (char *dest = tmp, src = s1) {
-					memcpy ((byte*)dest, (byte*)src, s1.length * 2);
-				}
-			}
-			if (s2.Length != 0) {
-				fixed (char *dest = tmp, src = s2) {
-					memcpy ((byte*)(dest + s1.Length), (byte*)src, s2.length * 2);
-				}
-			}
+			fixed (char *dest = tmp, src = s1)
+				CharCopy (dest, src, s1.length);
+			fixed (char *dest = tmp, src = s2)
+				CharCopy (dest + s1.Length, src, s2.length);
 
 			return tmp;
 		}
@@ -1671,17 +1766,17 @@
 
 			if (s1.Length != 0) {
 				fixed (char *dest = tmp, src = s1) {
-					memcpy ((byte*)dest, (byte*)src, s1.length * 2);
+					CharCopy (dest, src, s1.length);
 				}
 			}
 			if (s2.Length != 0) {
 				fixed (char *dest = tmp, src = s2) {
-					memcpy ((byte*)(dest + s1.Length), (byte*)src, s2.length * 2);
+					CharCopy (dest + s1.Length, src, s2.length);
 				}
 			}
 			if (s3.Length != 0) {
 				fixed (char *dest = tmp, src = s3) {
-					memcpy ((byte*)(dest + s1.Length + s2.Length), (byte*)src, s3.length * 2);
+					CharCopy (dest + s1.Length + s2.Length, src, s3.length);
 				}
 			}
 
@@ -1706,22 +1801,22 @@
 
 			if (s1.Length != 0) {
 				fixed (char *dest = tmp, src = s1) {
-					memcpy ((byte*)dest, (byte*)src, s1.length * 2);
+					CharCopy (dest, src, s1.length);
 				}
 			}
 			if (s2.Length != 0) {
 				fixed (char *dest = tmp, src = s2) {
-					memcpy ((byte*)(dest + s1.Length), (byte*)src, s2.length * 2);
+					CharCopy (dest + s1.Length, src, s2.length);
 				}
 			}
 			if (s3.Length != 0) {
 				fixed (char *dest = tmp, src = s3) {
-					memcpy ((byte*)(dest + s1.Length + s2.Length), (byte*)src, s3.length * 2);
+					CharCopy (dest + s1.Length + s2.Length, src, s3.length);
 				}
 			}
 			if (s4.Length != 0) {
 				fixed (char *dest = tmp, src = s4) {
-					memcpy ((byte*)(dest + s1.Length + s2.Length + s3.Length), (byte*)src, s4.length * 2);
+					CharCopy (dest + s1.Length + s2.Length + s3.Length, src, s4.length);
 				}
 			}
 
@@ -1780,11 +1875,11 @@
 
 			fixed (char *dest = tmp, src = this, val = value) {
 				char *dst = dest;
-				memcpy ((byte*)dst, (byte*)src, startIndex * 2);
+				CharCopy (dst, src, startIndex);
 				dst += startIndex;
-				memcpy ((byte*)dst, (byte*)val, value.length * 2);
+				CharCopy (dst, val, value.length);
 				dst += value.length;
-				memcpy ((byte*)dst, (byte*)(src + startIndex), (length - startIndex) * 2);
+				CharCopy (dst, src + startIndex, length - startIndex);
 			}
 			return tmp;
 		}
@@ -2409,6 +2504,25 @@
 			memcpy4 (dest, src, size);
 		}
 
+		internal static unsafe void CharCopy (char *dest, char *src, int count) {
+			// Same rules as for memcpy, but with the premise that 
+			// chars can only be aligned to even addresses if their
+			// enclosing types are correctly aligned
+			if ((((int)dest | (int)src) & 3) != 0) {
+				if (((int)dest & 2) != 0 && ((int)src & 2) != 0 && count > 0) {
+					((short*)dest) [0] = ((short*)src) [0];
+					dest++;
+					src++;
+					count--;
+				}
+				if ((((int)dest | (int)src) & 2) != 0) {
+					memcpy2 ((byte*)dest, (byte*)src, count * 2);
+					return;
+				}
+			}
+			memcpy4 ((byte*)dest, (byte*)src, count * 2);
+		}
+
 		[CLSCompliant (false), MethodImplAttribute (MethodImplOptions.InternalCall)]
 		unsafe public extern String (char *value);
 
@@ -2446,9 +2560,6 @@
 		private extern String[] InternalSplit (char[] separator, int count, int options);
 
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
-		private extern String InternalTrim (char[] chars, int typ);
-
-		[MethodImplAttribute (MethodImplOptions.InternalCall)]
 		private extern int InternalLastIndexOfAny (char [] anyOf, int sIndex, int count);
 
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
