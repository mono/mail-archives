Index: System.Web/Test/System.Web.Security/RolesTest.cs
===================================================================
--- System.Web/Test/System.Web.Security/RolesTest.cs	(revision 151306)
+++ System.Web/Test/System.Web.Security/RolesTest.cs	(working copy)
@@ -30,9 +30,13 @@
 
 using System;
 using System.Security.Principal;
+using System.Web;
 using System.Web.Security;
+using System.Web.UI;
 
+using MonoTests.SystemWeb.Framework;
 using NUnit.Framework;
+using System.Configuration.Provider;
 
 namespace MonoTests.System.Web.Security {
 
@@ -61,6 +65,124 @@
 			// - Provider
 			// - Providers
 		}
+
+		[Test]
+		[Category ("NunitWeb")]
+		public void IsUserInRole ()
+		{
+			WebTest.SetupHosting (() => {
+				WebTest.CopyResources ();
+				WebTest.CopyBinary (GetWebConfigData<TestRoleProvider> (null, null), "Web.config");
+			});
+			WebTest t = new WebTest (PageInvoker.CreateOnLoad ((Page p) => {
+				Assert.IsTrue (Roles.Enabled, "Enabled");
+				Assert.IsTrue (Roles.IsUserInRole ("true", "rolename"), "#1");
+				Assert.IsFalse (Roles.IsUserInRole ("false", "rolename"), "#2");
+
+				// NOTE: The next two tests do NOT throw an exception on MS 
+				//       .NET (even if the underlying membership-provider may, 
+				//       despite being documented differently on MSDN), but 
+				//       this convenient behaviour allows ASP.NET pages to run 
+				//       when roles are queried before the user is logged on
+				Assert.IsFalse (Roles.IsUserInRole (string.Empty, "rolename"), "#3a");
+				Assert.IsFalse (Roles.IsUserInRole ("rolename"), "#3b");
+			}));
+			t.Run ();
+			global::System.Diagnostics.Trace.WriteLineIf ((t.Response.StatusCode != global::System.Net.HttpStatusCode.OK), t.Response.Body);
+			Assert.AreEqual (global::System.Net.HttpStatusCode.OK, t.Response.StatusCode, "HttpStatusCode");
+		}
+
+		private static byte[] GetWebConfigData<T> (string roleManagerAttributes, string roleProviderAttributes) where T : RoleProvider
+		{
+			return global::System.Text.Encoding.UTF8.GetBytes (
+				@"<?xml version='1.0' encoding='utf-8'?>
+				<configuration>
+					<system.web>
+						<roleManager defaultProvider='TheRoleProvider' " + 
+								(roleManagerAttributes ?? "enabled='true'") + @">
+							<providers>
+								<clear />
+								<add name='TheRoleProvider' type='" + 
+									typeof (T).AssemblyQualifiedName + @"' " + 
+									(roleProviderAttributes ?? string.Empty) + @" />
+							</providers>
+						</roleManager>
+					</system.web>
+				</configuration>");
+		}
+
+		public class TestRoleProvider : RoleProvider
+		{
+			public override string ApplicationName
+			{
+				get;
+				set;
+			}
+
+			public override void AddUsersToRoles(string[] usernames, string[] roleNames)
+			{
+				throw new Exception ("Not implemented yet.");
+			}
+
+			public override void CreateRole (string roleName)
+			{
+				throw new Exception ("Not implemented yet.");
+			}
+
+			public override bool DeleteRole (string roleName, bool throwOnPopulatedRole)
+			{
+				throw new Exception ("Not implemented yet.");
+			}
+
+			public override string[] FindUsersInRole (string roleName, string usernameToMatch)
+			{
+				throw new Exception ("Not implemented yet.");
+			}
+
+			public override string[] GetAllRoles ()
+			{
+				throw new Exception ("Not implemented yet.");
+			}
+
+			public override string[] GetRolesForUser (string username)
+			{
+				throw new Exception ("Not implemented yet.");
+			}
+
+			public override string[] GetUsersInRole (string roleName)
+			{
+				throw new Exception ("Not implemented yet.");
+			}
+
+			public override bool IsUserInRole (string username, string roleName)
+			{
+				if (username == null)
+					throw new ArgumentNullException ("Username cannot be null.");
+				if (roleName == null)
+					throw new ArgumentNullException ("Role name cannot be null.");
+				if (username == string.Empty)
+					throw new ArgumentException ("Username cannot be empty.");
+				if (roleName == string.Empty)
+					throw new ArgumentException ("Role name cannot be empty.");
+				if (username == "invalid")
+					throw new ProviderException ("User does not exist.");
+				if (roleName == "invalid")
+					throw new ProviderException ("Role does not exist.");
+				if (username == "true")
+					return true;
+				return false;
+			}
+
+			public override void RemoveUsersFromRoles (string[] usernames, string[] roleNames)
+			{
+				throw new Exception ("Not implemented yet.");
+			}
+
+			public override bool RoleExists (string roleName)
+			{
+				throw new Exception ("Not implemented yet.");
+			}
+		}
 	}
 }
 
