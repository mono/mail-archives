Index: class/System.Web/System.Web.UI/PageParser.cs
===================================================================
--- class/System.Web/System.Web.UI/PageParser.cs	(revision 83743)
+++ class/System.Web/System.Web.UI/PageParser.cs	(working copy)
@@ -50,7 +50,7 @@
 		bool trace;
 		bool notBuffer;
 		TraceMode tracemode;
-		bool readonlySessionState;
+		bool readonlySessionState = false;
 		string responseEncoding;
 		string contentType;
 		int codepage = -1;
@@ -115,8 +115,12 @@
 #if NET_2_0
 			switch (ps.EnableSessionState) {
 				case PagesEnableSessionState.True:
+					enableSessionState = true;
+					break;
+
 				case PagesEnableSessionState.ReadOnly:
 					enableSessionState = true;
+					readonlySessionState = true;
 					break;
 
 				default:
@@ -162,20 +166,24 @@
 		
 		internal override void ProcessMainAttributes (Hashtable atts)
 		{
-			// note: the 'enableSessionState' configuration property is
-			// processed in a case-sensitive manner while the page-level
-			// attribute is processed case-insensitive
-			string enabless = GetString (atts, "EnableSessionState", enableSessionState.ToString ());
-			if (enabless != null) {
-				readonlySessionState = (String.Compare (enabless, "readonly", true) == 0);
-				if (readonlySessionState == true || String.Compare (enabless, "true", true) == 0) {
-					enableSessionState = true;
-				} else if (String.Compare (enabless, "false", true) == 0) {
-					enableSessionState = false;
-				} else {
-					ThrowParseException ("Invalid value for enableSessionState: " + enabless);
+			// note: if EnableSessionState is not specified in page directive
+			// then we must use LoadPagesConfigDefaults settings
+			if (atts.ContainsKey("EnableSessionState")) {
+					// note: the 'enableSessionState' configuration property is
+					// processed in a case-sensitive manner while the page-level
+					// attribute is processed case-insensitive
+					string enabless = GetString (atts, "EnableSessionState", enableSessionState.ToString ());
+					if (enabless != null) {
+						readonlySessionState = (String.Compare (enabless, "readonly", true) == 0);
+						if (readonlySessionState == true || String.Compare (enabless, "true", true) == 0) {
+							enableSessionState = true;
+						} else if (String.Compare (enabless, "false", true) == 0) {
+							enableSessionState = false;
+						} else {
+							ThrowParseException ("Invalid value for enableSessionState: " + enabless);
+						}
+					}
 				}
-			}
 
 			string cp = GetString (atts, "CodePage", null);
 			if (cp != null) {
Index: class/System.Web/ChangeLog
===================================================================
--- class/System.Web/ChangeLog	(revision 83743)
+++ class/System.Web/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2007-08-09  Joel Reed  <joelwreed@comcast.com>
+
+	* System.Web.UI/PageParser.cs: honor web.config enableSessionState
+	ReadOnly setting instead of overwriting based on default value for 
+	page directive EnableSessionState
+
 2007-06-28  Vladimir Krasnov  <vladimirk@mainsoft.com>
 
 	* System.Web20.csproj: added HttpWorkerRequest.jvm.cs,
