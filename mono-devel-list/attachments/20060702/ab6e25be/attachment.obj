Index: corlib.dll.sources
===================================================================
--- corlib.dll.sources	(revision 62175)
+++ corlib.dll.sources	(working copy)
@@ -1258,6 +1258,7 @@
 System.Security.Principal/WindowsImpersonationContext.cs
 System.Security.Principal/WindowsPrincipal.cs
 System.Text/ASCIIEncoding.cs
+System.Text/CodePageEncoding.cs
 System.Text/Decoder.cs
 System.Text/DecoderExceptionFallback.cs
 System.Text/DecoderExceptionFallbackBuffer.cs
@@ -1277,8 +1278,10 @@
 System.Text/Encoding.cs
 System.Text/EncodingInfo.cs
 System.Text/Latin1Encoding.cs
+System.Text/MLangCodePageEncoding.cs
 System.Text/NormalizationForm.cs
 System.Text/StringBuilder.cs
+System.Text/SurrogateEncoder.cs
 System.Text/UnicodeEncoding.cs
 System.Text/UTF7Encoding.cs
 System.Text/UTF8Encoding.cs
Index: System.Text/SurrogateEncoder.cs
===================================================================
--- System.Text/SurrogateEncoder.cs	(revision 0)
+++ System.Text/SurrogateEncoder.cs	(revision 0)
@@ -0,0 +1,65 @@
+//
+// System.Text.SurrogateEncoder.cs
+//
+// Author:
+//   Kornél Pál <http://www.kornelpal.hu/>
+//
+// Copyright (C) 2006 Kornél Pál
+//
+
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+//
+// .NET Framework 1.x uses this class for GB18030 encoder and
+// .NET Framework 2.0 can deserialize it using a proxy.
+// This class supports serialization compatibility.
+//
+
+using System;
+using System.Runtime.Serialization;
+
+namespace System.Text
+{
+	[Serializable]
+	internal sealed class SurrogateEncoder : ISerializable, IObjectReference
+	{
+		private Encoding encoding;
+
+		private SurrogateEncoder (SerializationInfo info, StreamingContext context)
+		{
+			if (info == null)
+				throw new ArgumentNullException ("info");
+
+			this.encoding = (Encoding) info.GetValue ("m_encoding", typeof (Encoding));
+		}
+
+		public void GetObjectData (SerializationInfo info, StreamingContext context)
+		{
+			throw new ArgumentException ("This class cannot be serialized.");
+		}
+
+		public object GetRealObject (StreamingContext context)
+		{
+			return this.encoding.GetEncoder ();
+		}
+	}
+}

Property changes on: System.Text\SurrogateEncoder.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: System.Text/CodePageEncoding.cs
===================================================================
--- System.Text/CodePageEncoding.cs	(revision 0)
+++ System.Text/CodePageEncoding.cs	(revision 0)
@@ -0,0 +1,120 @@
+//
+// System.Text.CodePageEncoding.cs
+//
+// Author:
+//   Kornél Pál <http://www.kornelpal.hu/>
+//
+// Copyright (C) 2006 Kornél Pál
+//
+
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+//
+// .NET Framework 1.x uses this class for single-byte encodings and
+// .NET Framework 2.0 serializes single byte-encodings using a proxy.
+// This class supports serialization compatibility.
+//
+
+using System;
+using System.Runtime.Serialization;
+
+namespace System.Text
+{
+	[Serializable]
+	internal sealed class CodePageEncoding : ISerializable, IObjectReference
+	{
+		//
+		// .NET Framework 1.x uses this class for single-byte decoders and
+		// .NET Framework 2.0 can deserialize them using a proxy.
+		// This class supports serialization compatibility.
+		//
+
+		[Serializable]
+		private sealed class Decoder : ISerializable, IObjectReference
+		{
+			private Encoding encoding;
+
+			private Decoder (SerializationInfo info, StreamingContext context)
+			{
+				if (info == null)
+					throw new ArgumentNullException ("info");
+
+				this.encoding = (Encoding) info.GetValue ("encoding", typeof (Encoding));
+			}
+
+			public void GetObjectData (SerializationInfo info, StreamingContext context)
+			{
+				throw new ArgumentException ("This class cannot be serialized.");
+			}
+
+			public object GetRealObject (StreamingContext context)
+			{
+				return this.encoding.GetDecoder ();
+			}
+		}
+
+		private int codePage;
+#if NET_2_0
+		private bool isReadOnly;
+		private EncoderFallback encoderFallback;
+		private DecoderFallback decoderFallback;
+#endif
+
+		private CodePageEncoding (SerializationInfo info, StreamingContext context)
+		{
+			if (info == null)
+				throw new ArgumentNullException ("info");
+
+			this.codePage = (int) info.GetValue ("m_codePage", typeof (int));
+
+#if NET_2_0
+			try {
+				this.isReadOnly = (bool) info.GetValue ("m_isReadOnly", typeof (bool));
+				this.encoderFallback = (EncoderFallback) info.GetValue ("encoderFallback", typeof (EncoderFallback));
+				this.decoderFallback = (DecoderFallback) info.GetValue ("decoderFallback", typeof (DecoderFallback));
+			} catch (SerializationException) {
+				this.isReadOnly = true;
+			}
+#endif
+		}
+
+		public void GetObjectData (SerializationInfo info, StreamingContext context)
+		{
+			throw new ArgumentException ("This class cannot be serialized.");
+		}
+
+		public object GetRealObject (StreamingContext context)
+		{
+			Encoding encoding = Encoding.GetEncoding (this.codePage);
+
+#if NET_2_0
+			if (!this.isReadOnly) {
+				encoding = (Encoding) encoding.Clone ();
+				encoding.EncoderFallback = this.encoderFallback;
+				encoding.DecoderFallback = this.decoderFallback;
+			}
+#endif
+
+			return encoding;
+		}
+	}
+}

Property changes on: System.Text\CodePageEncoding.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: System.Text/MLangCodePageEncoding.cs
===================================================================
--- System.Text/MLangCodePageEncoding.cs	(revision 0)
+++ System.Text/MLangCodePageEncoding.cs	(revision 0)
@@ -0,0 +1,150 @@
+//
+// System.Text.MLangCodePageEncoding.cs
+//
+// Author:
+//   Kornél Pál <http://www.kornelpal.hu/>
+//
+// Copyright (C) 2006 Kornél Pál
+//
+
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+//
+// .NET Framework 1.x uses this class for multi-byte encodings and
+// .NET Framework 2.0 serializes multi-byte encodings using a proxy.
+// This class supports serialization compatibility.
+//
+
+using System;
+using System.Runtime.Serialization;
+
+namespace System.Text
+{
+	[Serializable]
+	internal sealed class MLangCodePageEncoding : ISerializable, IObjectReference
+	{
+		//
+		// .NET Framework 1.x uses this class for multi-byte encoders and
+		// .NET Framework 2.0 can deserialize them using a proxy.
+		// This class supports serialization compatibility.
+		//
+
+		[Serializable]
+		private sealed class Encoder : ISerializable, IObjectReference
+		{
+			private Encoding encoding;
+
+			private Encoder (SerializationInfo info, StreamingContext context)
+			{
+				if (info == null)
+					throw new ArgumentNullException ("info");
+
+				this.encoding = (Encoding) info.GetValue ("encoding", typeof (Encoding));
+			}
+
+			public void GetObjectData (SerializationInfo info, StreamingContext context)
+			{
+				throw new ArgumentException ("This class cannot be serialized.");
+			}
+
+			public object GetRealObject (StreamingContext context)
+			{
+				return this.encoding.GetEncoder ();
+			}
+		}
+
+		//
+		// .NET Framework 1.x uses this class for multi-byte decoders and
+		// .NET Framework 2.0 can deserialize them using a proxy.
+		// This class supports serialization compatibility.
+		//
+
+		[Serializable]
+		private sealed class Decoder : ISerializable, IObjectReference
+		{
+			private Encoding encoding;
+
+			private Decoder (SerializationInfo info, StreamingContext context)
+			{
+				if (info == null)
+					throw new ArgumentNullException ("info");
+
+				this.encoding = (Encoding) info.GetValue ("encoding", typeof (Encoding));
+			}
+
+			public void GetObjectData (SerializationInfo info, StreamingContext context)
+			{
+				throw new ArgumentException ("This class cannot be serialized.");
+			}
+
+			public object GetRealObject (StreamingContext context)
+			{
+				return this.encoding.GetDecoder ();
+			}
+		}
+
+		private int codePage;
+#if NET_2_0
+		private bool isReadOnly;
+		private EncoderFallback encoderFallback;
+		private DecoderFallback decoderFallback;
+#endif
+
+		private MLangCodePageEncoding (SerializationInfo info, StreamingContext context)
+		{
+			if (info == null)
+				throw new ArgumentNullException ("info");
+
+			this.codePage = (int) info.GetValue ("m_codePage", typeof (int));
+
+#if NET_2_0
+			try {
+				this.isReadOnly = (bool) info.GetValue ("m_isReadOnly", typeof (bool));
+				this.encoderFallback = (EncoderFallback) info.GetValue ("encoderFallback", typeof (EncoderFallback));
+				this.decoderFallback = (DecoderFallback) info.GetValue ("decoderFallback", typeof (DecoderFallback));
+			} catch (SerializationException) {
+				this.isReadOnly = true;
+			}
+#endif
+		}
+
+		public void GetObjectData (SerializationInfo info, StreamingContext context)
+		{
+			throw new ArgumentException ("This class cannot be serialized.");
+		}
+
+		public object GetRealObject (StreamingContext context)
+		{
+			Encoding encoding = Encoding.GetEncoding (this.codePage);
+
+#if NET_2_0
+			if (!this.isReadOnly) {
+				encoding = (Encoding) encoding.Clone ();
+				encoding.EncoderFallback = this.encoderFallback;
+				encoding.DecoderFallback = this.decoderFallback;
+			}
+#endif
+
+			return encoding;
+		}
+	}
+}

Property changes on: System.Text\MLangCodePageEncoding.cs
___________________________________________________________________
Name: svn:eol-style
   + native

