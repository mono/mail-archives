Index: configure.in
===================================================================
--- configure.in	(wersja 142248)
+++ configure.in	(kopia robocza)
@@ -1208,146 +1208,150 @@
 	dnl ***********************************
 	dnl *** Checks for working __thread ***
 	dnl ***********************************
-	AC_MSG_CHECKING(for working __thread)
 	if test "x$with_tls" != "x__thread"; then
+		AC_MSG_CHECKING(for working __thread)
 		AC_MSG_RESULT(disabled)
 	else
-		AC_TRY_RUN([
-			#include <pthread.h>
-			__thread int i;
-			static int res1, res2;
+		AC_CACHE_CHECK(for working __thread, mono_cv___thread,
+			AC_TRY_RUN([
+				#include <pthread.h>
+				__thread int i;
+				static int res1, res2;
 
-			void thread_main (void *arg)
-			{
-				i = arg;
-				sleep (1);
-				if (arg == 1)
-					res1 = (i == arg);
-				else
-					res2 = (i == arg);
-			}
+				void thread_main (void *arg)
+				{
+					i = arg;
+					sleep (1);
+					if (arg == 1)
+						res1 = (i == arg);
+					else
+						res2 = (i == arg);
+				}
 
-			int main () {
-				pthread_t t1, t2;
+				int main () {
+					pthread_t t1, t2;
 
-				i = 5;
+					i = 5;
 
-				pthread_create (&t1, NULL, thread_main, 1);
-				pthread_create (&t2, NULL, thread_main, 2);
+					pthread_create (&t1, NULL, thread_main, 1);
+					pthread_create (&t2, NULL, thread_main, 2);
 
-				pthread_join (t1, NULL);
-				pthread_join (t2, NULL);
+					pthread_join (t1, NULL);
+					pthread_join (t2, NULL);
 
-				return !(res1 + res2 == 2);
-			}
-		], [
-				AC_MSG_RESULT(yes)
-		], [
-				AC_MSG_RESULT(no)
-				with_tls=pthread
-		])
+					return !(res1 + res2 == 2);
+				}
+			], [
+					mono_cv___thread=yes
+			], [
+					with_tls=pthread
+					mono_cv___thread=no
+			])
+		)
 	fi
 
 	dnl **************************************
 	dnl *** Checks for working sigaltstack ***
 	dnl **************************************
-	AC_MSG_CHECKING(for working sigaltstack)
 	if test "x$with_sigaltstack" != "xyes"; then
+		AC_MSG_CHECKING(for working sigaltstack)
 		AC_MSG_RESULT(disabled)
 	else
-		AC_TRY_RUN([
-			#include <stdio.h>
-			#include <stdlib.h>
-			#include <unistd.h>
-			#include <signal.h>
-			#include <pthread.h>
-			#include <sys/wait.h>
-			#if defined(__FreeBSD__) || defined(__NetBSD__)
-			#define SA_STACK SA_ONSTACK
-			#endif
-			static void
-			sigsegv_signal_handler (int _dummy, siginfo_t *info, void *context)
-			{
-				exit (0);
-			}
+		AC_CACHE_CHECK(for working signalstack, mono_cv_signalstack,
+			AC_TRY_RUN([
+				#include <stdio.h>
+				#include <stdlib.h>
+				#include <unistd.h>
+				#include <signal.h>
+				#include <pthread.h>
+				#include <sys/wait.h>
+				#if defined(__FreeBSD__) || defined(__NetBSD__)
+				#define SA_STACK SA_ONSTACK
+				#endif
+				static void
+				sigsegv_signal_handler (int _dummy, siginfo_t *info, void *context)
+				{
+					exit (0);
+				}
 
-			static void *
-			loop (void *ignored)
-			{
-				char *ptr = NULL;
+				static void *
+				loop (void *ignored)
+				{
+					char *ptr = NULL;
 
-				*ptr = 0;
-				return NULL;
-			}
+					*ptr = 0;
+					return NULL;
+				}
 
-			static void
-			child ()
-			{
-				struct sigaction sa;
-				struct sigaltstack sas;
-				pthread_t id;
-				pthread_attr_t attr;
+				static void
+				child ()
+				{
+					struct sigaction sa;
+					struct sigaltstack sas;
+					pthread_t id;
+					pthread_attr_t attr;
 
-				sa.sa_sigaction = sigsegv_signal_handler;
-				sigemptyset (&sa.sa_mask);
-				sa.sa_flags = SA_SIGINFO | SA_ONSTACK;
-				if (sigaction (SIGSEGV, &sa, NULL) == -1) {
-					perror ("sigaction");
-					return;
-				}
+					sa.sa_sigaction = sigsegv_signal_handler;
+					sigemptyset (&sa.sa_mask);
+					sa.sa_flags = SA_SIGINFO | SA_ONSTACK;
+					if (sigaction (SIGSEGV, &sa, NULL) == -1) {
+						perror ("sigaction");
+						return;
+					}
 
-				sas.ss_sp = malloc (SIGSTKSZ);
-				sas.ss_size = SIGSTKSZ;
-				sas.ss_flags = 0;
-				if (sigaltstack (&sas, NULL) == -1) {
-					perror ("sigaltstack");
-					return;
-				}
+					sas.ss_sp = malloc (SIGSTKSZ);
+					sas.ss_size = SIGSTKSZ;
+					sas.ss_flags = 0;
+					if (sigaltstack (&sas, NULL) == -1) {
+						perror ("sigaltstack");
+						return;
+					}
 
-				pthread_attr_init (&attr);
-				if (pthread_create(&id, &attr, loop, &attr) != 0) {
-					printf ("pthread_create\n");
-					return;
+					pthread_attr_init (&attr);
+					if (pthread_create(&id, &attr, loop, &attr) != 0) {
+						printf ("pthread_create\n");
+						return;
+					}
+
+					sleep (100);
 				}
 
-				sleep (100);
-			}
+				int
+				main ()
+				{
+					pid_t son;
+					int status;
+					int i;
 
-			int
-			main ()
-			{
-				pid_t son;
-				int status;
-				int i;
+					son = fork ();
+					if (son == -1) {
+						return 1;
+					}
 
-				son = fork ();
-				if (son == -1) {
-					return 1;
-				}
+					if (son == 0) {
+						child ();
+						return 0;
+					}
 
-				if (son == 0) {
-					child ();
-					return 0;
-				}
+					for (i = 0; i < 3; ++i) {
+						sleep (1);
+						waitpid (son, &status, WNOHANG);
+						if (WIFEXITED (status) && WEXITSTATUS (status) == 0)
+							return 0;
+					}
 
-				for (i = 0; i < 3; ++i) {
-					sleep (1);
-					waitpid (son, &status, WNOHANG);
-					if (WIFEXITED (status) && WEXITSTATUS (status) == 0)
-						return 0;
+					kill (son, SIGKILL);
+					return 1;
 				}
 
-				kill (son, SIGKILL);
-				return 1;
-			}
-
-		], [
-				AC_MSG_RESULT(yes)
-				AC_DEFINE(HAVE_WORKING_SIGALTSTACK, 1, [Have a working sigaltstack])
-		], [
-				with_sigaltstack=no
-				AC_MSG_RESULT(no)
-		])
+			], [
+					AC_DEFINE(HAVE_WORKING_SIGALTSTACK, 1, [Have a working sigaltstack])
+					mono_cv_signalstack=yes
+			], [
+					with_sigaltstack=no
+					mono_cv_signalstack=no
+			])
+		)
 	fi
 
 	dnl ********************************