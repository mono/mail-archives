Index: System.Web.UI/TemplateParser.cs
===================================================================
--- System.Web.UI/TemplateParser.cs	(revision 61599)
+++ System.Web.UI/TemplateParser.cs	(working copy)
@@ -364,6 +364,14 @@
 				dependencies.Add (filename);
 		}
 		
+		internal virtual string[] GetLowerDependencies ()
+		{
+			int idx = dependencies.IndexOf (inputFile);
+			string[] deps = new string [dependencies.Count - idx];
+			dependencies.CopyTo (idx, deps, 0, deps.Length);
+			return deps;
+		}
+		
 		internal virtual void AddAssembly (Assembly assembly, bool fullPath)
 		{
 			if (assembly.Location == "")
Index: System.Web.UI/TemplateControlParser.cs
===================================================================
--- System.Web.UI/TemplateControlParser.cs	(revision 61599)
+++ System.Web.UI/TemplateControlParser.cs	(working copy)
@@ -137,6 +137,7 @@
 				}
 
 				AddAssembly (type.Assembly, true);
+				AddDependency (realpath);
 				RootBuilder.Foundry.RegisterFoundry (tagprefix, tagname, type);
 				return;
 			}
Index: System.Web.Compilation/CachingCompiler.cs
===================================================================
--- System.Web.Compilation/CachingCompiler.cs	(revision 61599)
+++ System.Web.Compilation/CachingCompiler.cs	(working copy)
@@ -92,8 +92,7 @@
 
 				ICodeCompiler comp = compiler.Compiler;
 				results = comp.CompileAssemblyFromDom (compiler.CompilerParameters, compiler.Unit);
-				string [] deps = (string []) compiler.Parser.Dependencies.ToArray (typeof (string));
-				cache.InsertPrivate (key, results, new CacheDependency (deps));
+				cache.InsertPrivate (key, results, new CacheDependency (compiler.Parser.GetLowerDependencies ()));
 			} finally {
 				Monitor.Exit (ticket);
 				if (acquired)
Index: System.Web.Compilation/AspGenerator.cs
===================================================================
--- System.Web.Compilation/AspGenerator.cs	(revision 61599)
+++ System.Web.Compilation/AspGenerator.cs	(working copy)
@@ -278,8 +278,7 @@
 			BaseCompiler compiler = GetCompilerFromType ();
 
 			type = compiler.GetCompiledType ();
-			CacheDependency cd = new CacheDependency ((string[])
-							tparser.Dependencies.ToArray (typeof (string)));
+			CacheDependency cd = new CacheDependency (tparser.GetLowerDependencies());
 
 			HttpRuntime.Cache.InsertPrivate ("@@Type" + tparser.InputFile, type, cd);
 			return type;
