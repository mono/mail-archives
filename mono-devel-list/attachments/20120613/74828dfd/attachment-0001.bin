
using System;
using System.Windows.Forms;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Threading;
using Timer = System.Windows.Forms.Timer;
using System.Globalization;

namespace MonoTests.System.Windows.Forms
{
	public class Test 
	{
		/**
		 ** This next test is in response to a bug report
		 ** which pointed out that the idle events were being
		 ** sent to every thread rather than just the thread
		 ** they were assigned on.
		 **
		 ** Report: https://bugzilla.novell.com/show_bug.cgi?id=321541
		 **/
		private volatile static Form form1_OneIdlePerThread = null;
		private volatile static Form form2_OneIdlePerThread = null;
		private volatile static int count1_OIPT = 0;
		private volatile static int count2_OIPT = 0; 
		private volatile static ThreadStart OIPT_ThreadStart2;
		private volatile static Thread OIPT_Thread2;
		private volatile static int oipt_t1 = 0;
		private volatile static int oipt_t2 = 0;
		public static void Main () {
			Thread t = Thread.CurrentThread;
			oipt_t1 = t.ManagedThreadId;
			count1_OIPT = 0;
			count2_OIPT = 0;
			form1_OneIdlePerThread = new Form ();
			form2_OneIdlePerThread = new Form ();
			form1_OneIdlePerThread.Show();
			//form2_OneIdlePerThread.Show();
	
			OIPT_ThreadStart2 = new ThreadStart (TIPT_Two);
			OIPT_Thread2=new Thread (OIPT_ThreadStart2);
			OIPT_Thread2.IsBackground = true;
			OIPT_Thread2.SetApartmentState(ApartmentState.STA);
			OIPT_Thread2.Start ();
			Application.Idle += new EventHandler(TestIdlePerThread);
			Application.Run (form1_OneIdlePerThread);
			if (!OIPT_Thread2.Join(1000)){	
				OIPT_Thread2.Abort();
			}

			if (count1_OIPT!=1){
				Console.WriteLine("error1");
			}
			if (count2_OIPT!=1){
				Console.WriteLine("error1");
			}
		}
		public static void TIPT_Two (){
			Thread t = Thread.CurrentThread;
			oipt_t2 = t.ManagedThreadId;
			Application.Idle += 	
				new EventHandler (TestIdlePerThread2);
			Application.Run (form2_OneIdlePerThread);
		}
		public static void TestIdlePerThread (object o, EventArgs e) {
			Thread t = Thread.CurrentThread;
			count1_OIPT++;
			Application.Idle -= 
				new EventHandler (TestIdlePerThread);
			Thread.Sleep(100);
			if (form1_OneIdlePerThread != null)
				form1_OneIdlePerThread.Close();
			if (oipt_t1!=t.ManagedThreadId){
				Console.WriteLine("error3");
			}
		}
		public static void TestIdlePerThread2 (object o, EventArgs e) {
			Thread t = Thread.CurrentThread;
			count2_OIPT++;
			Application.Idle -= 
				new EventHandler(TestIdlePerThread2);
			if (form2_OneIdlePerThread != null)
				form2_OneIdlePerThread.Invoke
				  (new MethodInvoker (form2_OneIdlePerThread.Close));
			if (oipt_t2!=t.ManagedThreadId){
				Console.WriteLine("error4");
			}
		}
		
	}
}







