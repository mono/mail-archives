Index: Mono.Data.SqliteClient/SqliteDataReader.cs
===================================================================
--- Mono.Data.SqliteClient/SqliteDataReader.cs	(revision 55918)
+++ Mono.Data.SqliteClient/SqliteDataReader.cs	(working copy)
@@ -52,7 +52,9 @@
 		private bool reading;
 		private int records_affected;
 		private string[] decltypes;
-		
+
+		private static readonly System.Globalization.CultureInfo en_US = new System.Globalization.CultureInfo("en-US");
+
 		#endregion
 
 		#region Constructors and destructors
@@ -157,12 +159,10 @@
 					} else {
 						switch (Sqlite.sqlite3_column_type (pVm, i)) {
 							case 1:
-								// If the column was declared as an 'int' or 'integer', let's play
-								// nice and return an int (version 3 only).
-								if (declmode[i] == 1)
-									data_row[i] = (int)Sqlite.sqlite3_column_int64 (pVm, i);
-								else
-									data_row[i] = Sqlite.sqlite3_column_int64 (pVm, i);
+								// If the column was declared as an 'int' or 'integer', return
+								// either an Int32 or an Int64						
+								long value = Sqlite.sqlite3_column_int64 (pVm, i);
+								data_row[i] = value <= Int32.MaxValue ? (int)value : value;
 								break;
 							case 2:
 								data_row[i] = Sqlite.sqlite3_column_double (pVm, i);
@@ -172,8 +172,8 @@
 								
 								// If the column was declared as a 'date' or 'datetime', let's play
 								// nice and return a DateTime (version 3 only).
-								if (declmode[i] == 2)
-									data_row[i] = DateTime.Parse((string)data_row[i]);
+								if (declmode[i] == 2) 
+									data_row[i] = DateTime.ParseExact((string)data_row[i], "yyyy-MM-dd HH:mm:ss", en_US);
 								break;
 							case 4:
 								int blobbytes = Sqlite.sqlite3_column_bytes16 (pVm, i);
Index: Mono.Data.SqliteClient/ChangeLog
===================================================================
--- Mono.Data.SqliteClient/ChangeLog	(revision 55918)
+++ Mono.Data.SqliteClient/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2006-01-22  Aaron Bockover  <aaron@aaronbock.net>
+
+	* SqliteDataReader.cs: Return Int32 for INT/INTEGER types only if value
+	can actually fit in an Int32; use DateTime.ParseExact instead of 
+	DateTime.Parse as it is extremely inefficient
+
 2006-01-20  Joshua Tauberer  <tauberer@for.net>
 
 	* Sqlite3 calls now use unicode encoding.  Sqlite2
