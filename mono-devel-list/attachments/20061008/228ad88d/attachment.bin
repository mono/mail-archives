Index: ChangeLog
===================================================================
--- ChangeLog	(revision 66386)
+++ ChangeLog	(working copy)
@@ -1,3 +1,14 @@
+2006-10-08  Gert Driesen  <drieseng@users.sourceforge.net>
+
+	* XmlSerializer.cs: Corrected exception message when deserialization
+	fails.
+	* SerializationCodeGenerator.cs: Added support for flag enums.
+	* XmlReflectionImporter.cs: Use InvalidOperationException wrapper for
+	all exceptions that occur while reflecting member. Validate default
+	values to match MS.
+	* SoapReflectionImporter.cs: Revert small part of previous patch as
+	XmlSerializer expects enum value.
+
 2006-10-01  Gert Driesen  <drieseng@users.sourceforge.net>
 
 	* SoapReflectionImporter.cs: To match MS.NET, let exceptions that are
Index: XmlSerializer.cs
===================================================================
--- XmlSerializer.cs	(revision 66386)
+++ XmlSerializer.cs	(working copy)
@@ -360,8 +360,8 @@
 					return serializerData.ReaderMethod.Invoke (reader, null);
 			} catch (Exception ex) {
 				if (ex is InvalidOperationException || ex is InvalidCastException)
-					throw new InvalidOperationException ("There was an error generating" +
-						" the XML document.", ex);
+					throw new InvalidOperationException ("There is an error in"
+						+ " XML document.", ex);
 				throw;
 			}
 		}
Index: SerializationCodeGenerator.cs
===================================================================
--- SerializationCodeGenerator.cs	(revision 66386)
+++ SerializationCodeGenerator.cs	(working copy)
@@ -33,6 +33,7 @@
 using System.Xml.Serialization;
 using System.Collections;
 using System.Globalization;
+using System.Text;
 
 namespace System.Xml.Serialization
 {
@@ -2669,7 +2670,28 @@
 				XmlQualifiedName qn = (XmlQualifiedName)ob;
 				return "new XmlQualifiedName (" + GetLiteral(qn.Name) + "," + GetLiteral(qn.Namespace) + ")";
 			}
-			if (ob is Enum) return ob.GetType () + "." + ob;
+			if (ob is Enum) {
+				string typeName = ob.GetType ().FullName;
+				StringBuilder sb = new StringBuilder ();
+				string namedValue = Enum.Format (ob.GetType (), ob, "g");
+				string[] names = namedValue.Split (',');
+				foreach (string name in names) {
+					// individual named constants can be seperated by a comma
+					// combined with some additional whitespace characters
+					string cleanName = name.Trim ();
+					if (cleanName.Length == 0)
+						continue;
+
+					if (sb.Length > 0)
+						sb.Append (" | ");
+
+					sb.Append (typeName);
+					sb.Append ('.');
+					sb.Append (cleanName);
+				}
+				return sb.ToString ();
+			}
+
 			return (ob is IFormattable) ? ((IFormattable) ob).ToString (null, CultureInfo.InvariantCulture) : ob.ToString ();
 		}
 		
Index: XmlReflectionImporter.cs
===================================================================
--- XmlReflectionImporter.cs	(revision 66386)
+++ XmlReflectionImporter.cs	(working copy)
@@ -331,7 +331,7 @@
 					XmlTypeMapMember mem = CreateMapMember (type, rmember, ns);
 					mem.CheckOptionalValueType (type);
 					classMap.AddMember (mem);
-				} catch (InvalidOperationException ex) {
+				} catch (Exception ex) {
 					throw new InvalidOperationException (string.Format (
 						CultureInfo.InvariantCulture, "There was an error" +
 						" reflecting field '{0}'.", rmember.MemberName), ex);
@@ -873,7 +873,7 @@
 				mapMember = member;
 			}
 
-			mapMember.DefaultValue = atts.XmlDefaultValue;
+			mapMember.DefaultValue = GetDefaultValue (typeData, atts.XmlDefaultValue);
 			mapMember.TypeData = typeData;
 			mapMember.Name = rmember.MemberName;
 			mapMember.IsReturnValue = rmember.IsReturnValue;
@@ -1063,6 +1063,32 @@
 				IncludeType (at.Type);
 		}
 
+		private object GetDefaultValue (TypeData typeData, object defaultValue)
+		{
+			if (defaultValue == DBNull.Value || typeData.SchemaType != SchemaTypes.Enum)
+				return defaultValue;
+
+			// get string representation of enum value
+			string namedValue = Enum.Format (typeData.Type, defaultValue, "g");
+			// get decimal representation of enum value
+			string decimalValue = Enum.Format (typeData.Type, defaultValue, "d");
+
+			// if decimal representation matches string representation, then
+			// the value is not defined in the enum type (as the "g" format
+			// will return the decimal equivalent of the value if the value
+			// is not equal to a combination of named enumerated constants
+			if (namedValue == decimalValue) {
+				string msg = string.Format (CultureInfo.InvariantCulture,
+					"Value '{0}' cannot be converted to {1}.", defaultValue,
+					defaultValue.GetType ().FullName);
+				throw new InvalidOperationException (msg);
+			}
+
+			// XmlSerializer expects integral enum value
+			//return namedValue.Replace (',', ' ');
+			return defaultValue;
+		}
+
 		#endregion // Methods
 	}
 }
Index: SoapReflectionImporter.cs
===================================================================
--- SoapReflectionImporter.cs	(revision 66386)
+++ SoapReflectionImporter.cs	(working copy)
@@ -520,7 +520,9 @@
 				throw new InvalidOperationException (msg);
 			}
 
-			return namedValue.Replace (',', ' ');
+			// XmlSerializer expects integral enum value
+			//return namedValue.Replace (',', ' ');
+			return defaultValue;
 		}
 
 		#endregion // Methods
