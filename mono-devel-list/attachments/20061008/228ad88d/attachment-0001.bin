Index: DeserializeTests.cs
===================================================================
--- DeserializeTests.cs	(revision 66386)
+++ DeserializeTests.cs	(working copy)
@@ -397,7 +397,7 @@
 			Assert.AreEqual (0, cont.Collection4.Count, "#E2");
 			Assert.AreEqual ("root", cont.Collection4.Container, "#E3");
 		}
-		
+
 		[Test]
 		public void TestDeserializeObjectNilCollectionsAreNotNull ()
 		{
@@ -698,6 +698,196 @@
 		}
 
 		[Test]
+		[Category ("NotWorking")] // DefaultValue should not be used when deserializing
+		public void TestDeserialize_Field ()
+		{
+			Field f = null;
+
+			f = (Field) Deserialize (typeof (Field),
+				string.Format (CultureInfo.InvariantCulture, "<?xml version='1.0' encoding='utf-16'?>" +
+				"<field xmlns:xsd='{0}' xmlns:xsi='{1}' flag1='' flag2='' flag4='' modifiers='public' modifiers2='public' modifiers4='public' />",
+				XmlSchemaNamespace, XmlSchemaInstanceNamespace));
+			Assert.AreEqual ((FlagEnum) 0, f.Flags1, "#A1");
+			Assert.AreEqual ((FlagEnum) 0, f.Flags2, "#A2");
+			Assert.AreEqual ((FlagEnum) 0, f.Flags3, "#A3");
+			Assert.AreEqual ((FlagEnum) 0, f.Flags4, "#A4");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers, "#A5");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers2, "#A6");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers3, "#A7");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers4, "#A8");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers5, "#A9");
+			Assert.IsNull (f.Names, "#A10");
+			Assert.IsNull (f.Street, "#A11");
+
+			f = (Field) Deserialize (typeof (Field),
+				string.Format (CultureInfo.InvariantCulture, "<?xml version='1.0' encoding='utf-16'?>" +
+				"<field xmlns:xsd='{0}' xmlns:xsi='{1}' flag3='two' flag4='' modifiers='protected' modifiers2='public' />",
+				XmlSchemaNamespace, XmlSchemaInstanceNamespace));
+			Assert.AreEqual ((FlagEnum) 0, f.Flags1, "#B1");
+			Assert.AreEqual ((FlagEnum) 0, f.Flags2, "#B2");
+			Assert.AreEqual (FlagEnum.e2, f.Flags3, "#B3");
+			Assert.AreEqual ((FlagEnum) 0, f.Flags4, "#B4");
+			Assert.AreEqual (MapModifiers.Protected, f.Modifiers, "#B5");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers2, "#B6");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers3, "#B7");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers4, "#B8");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers5, "#B9");
+			Assert.IsNull (f.Names, "#B10");
+			Assert.IsNull (f.Street, "#B11");
+
+			f = (Field) Deserialize (typeof (Field),
+				string.Format (CultureInfo.InvariantCulture, "<?xml version='1.0' encoding='utf-16'?>" +
+				"<field xmlns:xsd='{0}' xmlns:xsi='{1}' flag1='two' flag2='two' flag4='' modifiers='public' modifiers2='protected' modifiers3='protected' modifiers4='public' modifiers5='protected' />",
+				XmlSchemaNamespace, XmlSchemaInstanceNamespace));
+			Assert.AreEqual (FlagEnum.e2, f.Flags1, "#C1");
+			Assert.AreEqual (FlagEnum.e2, f.Flags2, "#C2");
+			Assert.AreEqual ((FlagEnum) 0, f.Flags3, "#C3");
+			Assert.AreEqual ((FlagEnum) 0, f.Flags4, "#C4");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers, "#C5");
+			Assert.AreEqual (MapModifiers.Protected, f.Modifiers2, "#C6");
+			Assert.AreEqual (MapModifiers.Protected, f.Modifiers3, "#C7");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers4, "#C8");
+			Assert.AreEqual (MapModifiers.Protected, f.Modifiers5, "#C9");
+			Assert.IsNull (f.Names, "#C10");
+			Assert.IsNull (f.Street, "#C11");
+
+			try {
+				f = (Field) Deserialize (typeof (Field),
+					string.Format (CultureInfo.InvariantCulture, "<?xml version='1.0' encoding='utf-16'?>" +
+					"<field xmlns:xsd='{0}' xmlns:xsi='{1}' flag2='444' />",
+					XmlSchemaNamespace, XmlSchemaInstanceNamespace));
+				Assert.Fail ("#D1");
+			} catch (InvalidOperationException ex) {
+				// There was an error generating the XML document
+				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#D2");
+				Assert.IsNotNull (ex.Message, "#D3");
+				Assert.IsNotNull (ex.InnerException, "#D4");
+
+				// '444' is not a valid value for MonoTests.System.Xml.TestClasses.FlagEnum
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#D5");
+				Assert.IsNotNull (ex.InnerException.Message, "#D6");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf ("'444'") != -1, "#D7");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf (typeof (FlagEnum).FullName) != -1, "#D8");
+				Assert.IsNull (ex.InnerException.InnerException, "#D9");
+			}
+
+			try {
+				f = (Field) Deserialize (typeof (Field),
+					string.Format (CultureInfo.InvariantCulture, "<?xml version='1.0' encoding='utf-16'?>" +
+					"<field xmlns:xsd='{0}' xmlns:xsi='{1}' flag2='Garbage' />",
+					XmlSchemaNamespace, XmlSchemaInstanceNamespace));
+				Assert.Fail ("#E1");
+			} catch (InvalidOperationException ex) {
+				// There was an error generating the XML document
+				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#E2");
+				Assert.IsNotNull (ex.Message, "#E3");
+				Assert.IsNotNull (ex.InnerException, "#E4");
+
+				// 'Garbage' is not a valid value for MonoTests.System.Xml.TestClasses.FlagEnum
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#E5");
+				Assert.IsNotNull (ex.InnerException.Message, "#E6");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf ("'Garbage'") != -1, "#E7");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf (typeof (FlagEnum).FullName) != -1, "#E8");
+				Assert.IsNull (ex.InnerException.InnerException, "#E9");
+			}
+
+			try {
+				f = (Field) Deserialize (typeof (Field),
+					string.Format (CultureInfo.InvariantCulture, "<?xml version='1.0' encoding='utf-16'?>" +
+					"<field xmlns:xsd='{0}' xmlns:xsi='{1}' flag2='{2}' />",
+					XmlSchemaNamespace, XmlSchemaInstanceNamespace, ((int) FlagEnum.e2).ToString (CultureInfo.InvariantCulture)));
+				Assert.Fail ("#F1");
+			} catch (InvalidOperationException ex) {
+				// There was an error generating the XML document
+				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#F2");
+				Assert.IsNotNull (ex.Message, "#F3");
+				Assert.IsNotNull (ex.InnerException, "#F4");
+
+				// '2' is not a valid value for MonoTests.System.Xml.TestClasses.FlagEnum
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#F5");
+				Assert.IsNotNull (ex.InnerException.Message, "#F6");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf ("'2'") != -1, "#F7");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf (typeof (FlagEnum).FullName) != -1, "#F8");
+				Assert.IsNull (ex.InnerException.InnerException, "#F9");
+			}
+		}
+
+		[Test]
+		[Category ("NotDotNet")] // MS.NET does not allow SoapAttribute backed by enum ??
+		public void TestDeserialize_Field_Encoded ()
+		{
+			Field_Encoded f = null;
+
+			f = (Field_Encoded) DeserializeEncoded (typeof (Field_Encoded),
+				string.Format (CultureInfo.InvariantCulture, "<?xml version='1.0' encoding='utf-16'?>" +
+				"<q1:field xmlns:xsd='{0}' xmlns:xsi='{1}' id='id1' flag1='' flag2='' flag4='' modifiers='PuBlIc' modifiers2='PuBlIc' modifiers4='PuBlIc' xmlns:q1='{2}' />",
+				XmlSchemaNamespace, XmlSchemaInstanceNamespace, ANamespace));
+			Assert.AreEqual ((FlagEnum_Encoded) 0, f.Flags1, "#A1");
+			Assert.AreEqual ((FlagEnum_Encoded) 0, f.Flags2, "#A2");
+			Assert.AreEqual (FlagEnum_Encoded.e1 | FlagEnum_Encoded.e2, f.Flags3, "#A3");
+			Assert.AreEqual ((FlagEnum_Encoded) 0, f.Flags4, "#A4");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers, "#A5");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers2, "#A6");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers3, "#A7");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers4, "#A8");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers5, "#A9");
+			Assert.IsNull (f.Names, "#A10");
+			Assert.IsNull (f.Street, "#A11");
+
+			f = (Field_Encoded) DeserializeEncoded (typeof (Field_Encoded),
+				string.Format (CultureInfo.InvariantCulture, "<?xml version='1.0' encoding='utf-16'?>" +
+				"<q1:field xmlns:xsd='{0}' xmlns:xsi='{1}' id='id1' flag3='two' flag4='' modifiers='Protected' modifiers2='PuBlIc' xmlns:q1='{2}' />",
+				XmlSchemaNamespace, XmlSchemaInstanceNamespace, ANamespace));
+			Assert.AreEqual (FlagEnum_Encoded.e1, f.Flags1, "#B1");
+			Assert.AreEqual (FlagEnum_Encoded.e1, f.Flags2, "#B2");
+			Assert.AreEqual (FlagEnum_Encoded.e2, f.Flags3, "#B3");
+			Assert.AreEqual ((FlagEnum_Encoded) 0, f.Flags4, "#B4");
+			Assert.AreEqual (MapModifiers.Protected, f.Modifiers, "#B5");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers2, "#B6");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers3, "#B7");
+			Assert.AreEqual (MapModifiers.Protected, f.Modifiers4, "#B8");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers5, "#B9");
+			Assert.IsNull (f.Names, "#B10");
+			Assert.IsNull (f.Street, "#B11");
+
+			f = (Field_Encoded) DeserializeEncoded (typeof (Field_Encoded),
+				string.Format (CultureInfo.InvariantCulture, "<?xml version='1.0' encoding='utf-16'?>" +
+				"<q1:field xmlns:xsd='{0}' xmlns:xsi='{1}' id='id1' flag1='two' flag2='two' flag4='' modifiers='PuBlIc' modifiers2='Protected' modifiers3='Protected' modifiers4='PuBlIc' modifiers5='Protected' xmlns:q1='{2}' />",
+				XmlSchemaNamespace, XmlSchemaInstanceNamespace, ANamespace));
+			Assert.AreEqual (FlagEnum_Encoded.e2, f.Flags1, "#C1");
+			Assert.AreEqual (FlagEnum_Encoded.e2, f.Flags2, "#C2");
+			Assert.AreEqual (FlagEnum_Encoded.e1 | FlagEnum_Encoded.e2, f.Flags3, "#C3");
+			Assert.AreEqual ((FlagEnum_Encoded) 0, f.Flags4, "#C4");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers, "#C5");
+			Assert.AreEqual (MapModifiers.Protected, f.Modifiers2, "#C6");
+			Assert.AreEqual (MapModifiers.Protected, f.Modifiers3, "#C7");
+			Assert.AreEqual (MapModifiers.Public, f.Modifiers4, "#C8");
+			Assert.AreEqual (MapModifiers.Protected, f.Modifiers5, "#C9");
+			Assert.IsNull (f.Names, "#C10");
+			Assert.IsNull (f.Street, "#C11");
+
+			try {
+				f = (Field_Encoded) DeserializeEncoded (typeof (Field_Encoded),
+					string.Format (CultureInfo.InvariantCulture, "<?xml version='1.0' encoding='utf-16'?>" +
+					"<q1:field xmlns:xsd='{0}' xmlns:xsi='{1}' id='id1' flag2='444' flag3='555' flag4='' modifiers='666' modifiers2='777' modifiers4='888' modifiers5='999' xmlns:q1='{2}' />",
+					XmlSchemaNamespace, XmlSchemaInstanceNamespace, ANamespace));
+				Assert.Fail ("#D1");
+			} catch (InvalidOperationException ex) {
+				// There was an error generating the XML document
+				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#D2");
+				Assert.IsNotNull (ex.Message, "#D3");
+				Assert.IsNotNull (ex.InnerException, "#D4");
+
+				// '444' is not a valid value for MonoTests.System.Xml.TestClasses.FlagEnum_Encoded
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#D5");
+				Assert.IsNotNull (ex.InnerException.Message, "#D6");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf ("'444'") != -1, "#D7");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf (typeof (FlagEnum_Encoded).FullName) != -1, "#D8");
+				Assert.IsNull (ex.InnerException.InnerException, "#D9");
+			}
+		}
+
+		[Test]
 		public void TestDeserialize_FlagEnum ()
 		{
 			FlagEnum e;
@@ -767,6 +957,175 @@
 		}
 
 		[Test]
+		public void TestDeserialize_Group ()
+		{
+			string xml = string.Format (CultureInfo.InvariantCulture,
+				"<Wrapper>" +
+				"<Group xmlns:xsd='{0}' xmlns:xsi='{1}' xmlns:d2p1='http://www.cpandl.com' CreationDate='2002-05-02' d2p1:GroupName='.NET' GroupNumber='ZDI=' id='id1'>" +
+				"<PosInt xsi:type='xsd:nonNegativeInteger'>10000</PosInt>" +
+				"<Grouptype xsi:type='GroupType'>Small</Grouptype>" +
+				"<MyVehicle href='#id2' />" +
+				"</Group>" +
+				"<Car xmlns:d2p1='{1}' id='id2' d2p1:type='Car'>" +
+				"<licenseNumber xmlns:q1='{0}' d2p1:type='q1:string'>1234566</licenseNumber>" +
+				"<makeDate xmlns:q2='{0}' d2p1:type='q2:date'>0001-01-01</makeDate>" +
+				"</Car>" +
+				"</Wrapper>",
+				"http://www.w3.org/2001/XMLSchema", "http://www.w3.org/2001/XMLSchema-instance");
+
+			XmlTextReader xtr = new XmlTextReader (xml, XmlNodeType.Document, null);
+			xtr.ReadStartElement ("Wrapper");
+
+			Group group = (Group) DeserializeEncoded (typeof (Group), xtr);
+
+			Assert.AreEqual (new DateTime (2002, 5, 2), group.Today, "#A1");
+			Assert.AreEqual (".NET", group.GroupName, "#A2");
+			Assert.AreEqual (new byte [] { 0x64, 0x32 }, group.GroupNumber, "#A3");
+			Assert.AreEqual (GroupType.A, group.Grouptype, "#A4");
+			Assert.AreEqual ("10000", group.PostitiveInt, "#A5");
+			Assert.IsFalse (group.IgnoreThis, "#A6");
+			Assert.IsNotNull (group.MyVehicle, "#A7");
+			Assert.AreEqual (typeof (Car), group.MyVehicle.GetType (), "#A8");
+			Assert.AreEqual ("1234566", group.MyVehicle.licenseNumber, "#A9");
+			Assert.AreEqual (new DateTime (1, 1, 1), group.MyVehicle.makeDate, "#A10");
+			Assert.IsNull (group.MyVehicle.weight, "#A11");
+
+			xml = string.Format (CultureInfo.InvariantCulture,
+				"<Wrapper>" +
+				"<Group xmlns:xsd='{0}' xmlns:xsi='{1}' CreationDate='2002-05-02' GroupNumber='ZDI=' id='id1'>" +
+				"<PosInt xsi:type='xsd:nonNegativeInteger'>10000</PosInt>" +
+				"<Grouptype xsi:type='GroupType'>Large</Grouptype>" +
+				"<MyVehicle href='#id2' />" +
+				"</Group>" +
+				"<Car xmlns:d2p1='{1}' id='id2' d2p1:type='Car'>" +
+				"<weight xmlns:q2='{0}' d2p1:type='q2:string'>450</weight>" +
+				"</Car>" +
+				"</Wrapper>",
+				"http://www.w3.org/2001/XMLSchema", "http://www.w3.org/2001/XMLSchema-instance");
+
+			xtr = new XmlTextReader (xml, XmlNodeType.Document, null);
+			xtr.ReadStartElement ("Wrapper");
+
+			group = (Group) DeserializeEncoded (typeof (Group), xtr);
+
+			Assert.AreEqual (new DateTime (2002, 5, 2), group.Today, "#B1");
+			Assert.IsNull (group.GroupName, "#B2");
+			Assert.AreEqual (new byte [] { 0x64, 0x32 }, group.GroupNumber, "#B3");
+			Assert.AreEqual (GroupType.B, group.Grouptype, "#B4");
+			Assert.AreEqual ("10000", group.PostitiveInt, "#B5");
+			Assert.IsFalse (group.IgnoreThis, "#B6");
+			Assert.IsNotNull (group.MyVehicle, "#B7");
+			Assert.AreEqual (typeof (Car), group.MyVehicle.GetType (), "#B8");
+			Assert.IsNull (group.MyVehicle.licenseNumber, "#B9");
+			Assert.AreEqual (DateTime.MinValue, group.MyVehicle.makeDate, "#B10");
+			Assert.AreEqual ("450", group.MyVehicle.weight, "#B11");
+
+			xml = string.Format (CultureInfo.InvariantCulture,
+				"<Wrapper>" +
+				"<Group xmlns:xsd='{0}' xmlns:xsi='{1}' id='id1' />" +
+				"</Wrapper>",
+				"http://www.w3.org/2001/XMLSchema", "http://www.w3.org/2001/XMLSchema-instance");
+
+			xtr = new XmlTextReader (xml, XmlNodeType.Document, null);
+			xtr.ReadStartElement ("Wrapper");
+
+			group = (Group) DeserializeEncoded (typeof (Group), xtr);
+
+			Assert.AreEqual (DateTime.MinValue, group.Today, "#C1");
+			Assert.IsNull (group.GroupName, "#C2");
+			Assert.AreEqual (null, group.GroupNumber, "#C3");
+			Assert.AreEqual (GroupType.A, group.Grouptype, "#C4");
+			Assert.IsNull (group.PostitiveInt, "#C5");
+			Assert.IsFalse (group.IgnoreThis, "#C6");
+			Assert.IsNull (group.MyVehicle, "#C7");
+
+			xml = string.Format (CultureInfo.InvariantCulture,
+				"<Wrapper>" +
+				"<Group xmlns:xsd='{0}' xmlns:xsi='{1}' id='id1'>" +
+				"<Grouptype xsi:type='GroupType'>666</Grouptype>" +
+				"</Group>" +
+				"</Wrapper>",
+				"http://www.w3.org/2001/XMLSchema", "http://www.w3.org/2001/XMLSchema-instance");
+
+			xtr = new XmlTextReader (xml, XmlNodeType.Document, null);
+			xtr.ReadStartElement ("Wrapper");
+
+			try {
+				group = (Group) DeserializeEncoded (typeof (Group), xtr);
+				Assert.Fail ("#D1");
+			} catch (InvalidOperationException ex) {
+				// There is an error in XML document (1, 174)
+				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#D2");
+				Assert.IsNotNull (ex.Message, "#D3");
+				Assert.IsNotNull (ex.InnerException, "#D4");
+
+				// '666' is not a valid value for GroupType
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#D5");
+				Assert.IsNotNull (ex.InnerException.Message, "#D6");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf ("'666'") != -1, "#D7");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf (typeof (GroupType).Name) != -1, "#D8");
+				Assert.IsNull (ex.InnerException.InnerException, "#D9");
+			}
+
+			xml = string.Format (CultureInfo.InvariantCulture,
+				"<Wrapper>" +
+				"<Group xmlns:xsd='{0}' xmlns:xsi='{1}' id='id1'>" +
+				"<Grouptype xsi:type='GroupType'>Garbage</Grouptype>" +
+				"</Group>" +
+				"</Wrapper>",
+				"http://www.w3.org/2001/XMLSchema", "http://www.w3.org/2001/XMLSchema-instance");
+
+			xtr = new XmlTextReader (xml, XmlNodeType.Document, null);
+			xtr.ReadStartElement ("Wrapper");
+
+			try {
+				group = (Group) DeserializeEncoded (typeof (Group), xtr);
+				Assert.Fail ("#E1");
+			} catch (InvalidOperationException ex) {
+				// There is an error in XML document (1, 178)
+				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#E2");
+				Assert.IsNotNull (ex.Message, "#E3");
+				Assert.IsNotNull (ex.InnerException, "#E4");
+
+				// 'Garbage' is not a valid value for GroupType
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#E5");
+				Assert.IsNotNull (ex.InnerException.Message, "#E6");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf ("'Garbage'") != -1, "#E7");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf (typeof (GroupType).Name) != -1, "#E8");
+				Assert.IsNull (ex.InnerException.InnerException, "#E9");
+			}
+
+			xml = string.Format (CultureInfo.InvariantCulture,
+				"<Wrapper>" +
+				"<Group xmlns:xsd='{0}' xmlns:xsi='{1}' id='id1'>" +
+				"<Grouptype xsi:type='GroupType'>{2}</Grouptype>" +
+				"</Group>" +
+				"</Wrapper>",
+				"http://www.w3.org/2001/XMLSchema", "http://www.w3.org/2001/XMLSchema-instance",
+				((int) GroupType.B).ToString (CultureInfo.InvariantCulture));
+
+			xtr = new XmlTextReader (xml, XmlNodeType.Document, null);
+			xtr.ReadStartElement ("Wrapper");
+
+			try {
+				group = (Group) DeserializeEncoded (typeof (Group), xtr);
+				Assert.Fail ("#F1");
+			} catch (InvalidOperationException ex) {
+				// There is an error in XML document (1, 172)
+				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#F2");
+				Assert.IsNotNull (ex.Message, "#F3");
+				Assert.IsNotNull (ex.InnerException, "#F4");
+
+				// '1' is not a valid value for GroupType
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#F5");
+				Assert.IsNotNull (ex.InnerException.Message, "#F6");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf ("'1'") != -1, "#F7");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf (typeof (GroupType).Name) != -1, "#F8");
+				Assert.IsNull (ex.InnerException.InnerException, "#F9");
+			}
+		}
+
+		[Test]
 		public void TestDeserialize_ZeroFlagEnum ()
 		{
 			ZeroFlagEnum e;
Index: XmlSerializerTestClasses.cs
===================================================================
--- XmlSerializerTestClasses.cs	(revision 66386)
+++ XmlSerializerTestClasses.cs	(working copy)
@@ -200,6 +200,7 @@
 	public enum MapModifiers
 	{
 		[XmlEnum("public")]
+		[SoapEnum ("PuBlIc")]
 		Public = 0,
 		[XmlEnum("protected")]
 		Protected = 1,
@@ -691,5 +692,62 @@
 
 		private bool _isEmptySpecified;
 	}
+
+	public class Group
+	{
+		[SoapAttribute (Namespace = "http://www.cpandl.com")]
+		public string GroupName;
+
+		[SoapAttribute (DataType = "base64Binary")]
+		public Byte [] GroupNumber;
+
+		[SoapAttribute (DataType = "date", AttributeName = "CreationDate")]
+		public DateTime Today;
+
+		[SoapElement (DataType = "nonNegativeInteger", ElementName = "PosInt")]
+		public string PostitiveInt;
+
+		[SoapIgnore]
+		public bool IgnoreThis;
+
+		[DefaultValue (GroupType.B)]
+		public GroupType Grouptype;
+		public Vehicle MyVehicle;
+
+		[SoapInclude (typeof (Car))]
+		public Vehicle myCar (string licNumber)
+		{
+			Vehicle v;
+			if (licNumber == string.Empty) {
+				v = new Car();
+				v.licenseNumber = "!!!!!!";
+			} else {
+				v = new Car();
+				v.licenseNumber = licNumber;
+			}
+			return v;
+		}
+	}
+
+	[SoapInclude (typeof (Car))]
+	public abstract class Vehicle
+	{
+		public string licenseNumber;
+		[SoapElement (DataType = "date")]
+		public DateTime makeDate;
+		[DefaultValue ("450")]
+		public string weight;
+	}
+
+	public class Car: Vehicle
+	{
+	}
+
+	public enum GroupType
+	{
+		[SoapEnum ("Small")]
+		A,
+		[SoapEnum ("Large")]
+		B
+	}
 }
-
Index: XmlSerializerTests.cs
===================================================================
--- XmlSerializerTests.cs	(revision 66386)
+++ XmlSerializerTests.cs	(working copy)
@@ -60,14 +60,12 @@
 			xtw.Formatting = Formatting.None;
 		}
 		
-		private string WriterText 
-		{
-			get
-			{
-				string val = sw.GetStringBuilder().ToString();
-				int offset = val.IndexOf('>') + 1;
-				val = val.Substring(offset);
-				return Infoset(val);
+		private string WriterText {
+			get {
+				string val = sw.GetStringBuilder ().ToString ();
+				int offset = val.IndexOf ('>') + 1;
+				val = val.Substring (offset);
+				return Infoset (val);
 			}
 		}
 
@@ -126,6 +124,13 @@
 			xs.Serialize (xtw, o);
 		}
 
+		private void SerializeEncoded (XmlTextWriter xtw, object o, Type type)
+		{
+			XmlTypeMapping mapping = CreateSoapMapping (type);
+			xs = new XmlSerializer (mapping);
+			xs.Serialize (xtw, o);
+		}
+
 		// test constructors
 #if USE_VERSION_1_1	// It doesn't pass on MS.NET 1.1.
 		[Test]
@@ -620,6 +625,183 @@
 		}
 
 		[Test]
+		public void TestSerializeField ()
+		{
+			Field f = new Field ();
+			Serialize (f, typeof (Field));
+			Assert.AreEqual (Infoset ("<field xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' flag1='' flag2='' flag3='' flag4='' modifiers='public' modifiers2='public' modifiers4='public' />"), WriterText, "#A");
+
+			f.Flags1 = FlagEnum.e1;
+			f.Flags2 = FlagEnum.e1;
+			f.Flags3 = FlagEnum.e2;
+			f.Modifiers = MapModifiers.Protected;
+			f.Modifiers2 = MapModifiers.Public;
+			f.Modifiers3 = MapModifiers.Public;
+			f.Modifiers4 = MapModifiers.Protected;
+			f.Modifiers5 = MapModifiers.Public;
+			Serialize (f, typeof (Field));
+			Assert.AreEqual (Infoset ("<field xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' flag3='two' flag4='' modifiers='protected' modifiers2='public' />"), WriterText, "#B");
+
+			f.Flags1 = (FlagEnum) 1;
+			f.Flags1 = FlagEnum.e2;
+			f.Flags2 = FlagEnum.e2;
+			f.Flags3 = FlagEnum.e1 |FlagEnum.e2;
+			f.Modifiers = MapModifiers.Public;
+			f.Modifiers2 = MapModifiers.Protected;
+			f.Modifiers3 = MapModifiers.Protected;
+			f.Modifiers4 = MapModifiers.Public;
+			f.Modifiers5 = MapModifiers.Protected;
+			Serialize (f, typeof (Field));
+			Assert.AreEqual (Infoset ("<field xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' flag1='two' flag2='two' flag4='' modifiers='public' modifiers2='protected' modifiers3='protected' modifiers4='public' modifiers5='protected' />"), WriterText, "#C");
+
+			f.Flags2 = (FlagEnum) 444;
+			f.Flags3 = (FlagEnum) 555;
+			f.Modifiers = (MapModifiers) 666;
+			f.Modifiers2 = (MapModifiers) 777;
+			f.Modifiers3 = (MapModifiers) 0;
+			f.Modifiers4 = (MapModifiers) 888;
+			f.Modifiers5 = (MapModifiers) 999;
+#if NET_2_0
+			try {
+				Serialize (f, typeof (Field));
+				Assert.Fail ("#D1");
+			} catch (InvalidOperationException ex) {
+				// There was an error generating the XML document
+				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#D2");
+				Assert.IsNotNull (ex.Message, "#D3");
+				Assert.IsNotNull (ex.InnerException, "#D4");
+
+				// Instance validation error: '444' is not a valid value for
+				// MonoTests.System.Xml.TestClasses.FlagEnum
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#D5");
+				Assert.IsNotNull (ex.InnerException.Message, "#D6");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf ("'444'") != -1, "#D7");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf (typeof (FlagEnum).FullName) != -1, "#D8");
+				Assert.IsNull (ex.InnerException.InnerException, "#D9");
+			}
+#else
+			Serialize (f, typeof (Field));
+			Assert.AreEqual (Infoset ("<field xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' flag1='two' flag2='444' flag3='555' flag4='' modifiers='666' modifiers2='777' modifiers4='888' modifiers5='999' />"), WriterText, "#D");
+#endif
+		}
+
+		[Test]
+		[Category ("NotDotNet")] // MS bug
+		public void TestSerializeField_Encoded ()
+		{
+			Field_Encoded f = new Field_Encoded ();
+			SerializeEncoded (f, typeof (Field_Encoded));
+			Assert.AreEqual ("<?xml version='1.0' encoding='utf-16'?>"
+				+ "<q1:field xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' id='id1' flag1='' flag2='' flag3='' flag4='' modifiers='PuBlIc' modifiers2='PuBlIc' modifiers4='PuBlIc' xmlns:q1='some:urn' />",
+				sw.GetStringBuilder ().ToString (), "#1");
+
+			f.Flags1 = FlagEnum_Encoded.e1;
+			f.Flags2 = FlagEnum_Encoded.e1;
+			f.Flags3 = FlagEnum_Encoded.e2;
+			f.Modifiers = MapModifiers.Protected;
+			f.Modifiers2 = MapModifiers.Public;
+			f.Modifiers3 = MapModifiers.Public;
+			f.Modifiers4 = MapModifiers.Protected;
+			f.Modifiers5 = MapModifiers.Public;
+			SerializeEncoded (f, typeof (Field_Encoded));
+			Assert.AreEqual ("<?xml version='1.0' encoding='utf-16'?>"
+				+ "<q1:field xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' id='id1' flag3='two' flag4='' modifiers='Protected' modifiers2='PuBlIc' xmlns:q1='some:urn' />",
+				sw.GetStringBuilder ().ToString (), "#2");
+
+			f.Flags1 = FlagEnum_Encoded.e2;
+			f.Flags2 = FlagEnum_Encoded.e2;
+			f.Flags3 = FlagEnum_Encoded.e1 | FlagEnum_Encoded.e2;
+			f.Modifiers = MapModifiers.Public;
+			f.Modifiers2 = MapModifiers.Protected;
+			f.Modifiers3 = MapModifiers.Protected;
+			f.Modifiers4 = MapModifiers.Public;
+			f.Modifiers5 = MapModifiers.Protected;
+			SerializeEncoded (f, typeof (Field_Encoded));
+			Assert.AreEqual ("<?xml version='1.0' encoding='utf-16'?>"
+				+ "<q1:field xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' id='id1' flag1='two' flag2='two' flag4='' modifiers='PuBlIc' modifiers2='Protected' modifiers3='Protected' modifiers4='PuBlIc' modifiers5='Protected' xmlns:q1='some:urn' />",
+				sw.GetStringBuilder ().ToString (), "#3");
+
+			f.Flags1 = (FlagEnum_Encoded) 1;
+			f.Flags2 = (FlagEnum_Encoded) 444;
+			f.Flags3 = (FlagEnum_Encoded) 555;
+			f.Modifiers = (MapModifiers) 666;
+			f.Modifiers2 = (MapModifiers) 777;
+			f.Modifiers3 = (MapModifiers) 0;
+			f.Modifiers4 = (MapModifiers) 888;
+			f.Modifiers5 = (MapModifiers) 999;
+			SerializeEncoded (f, typeof (Field_Encoded));
+			Assert.AreEqual ("<?xml version='1.0' encoding='utf-16'?>"
+				+ "<q1:field xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' id='id1' flag2='444' flag3='555' flag4='' modifiers='666' modifiers2='777' modifiers4='888' modifiers5='999' xmlns:q1='some:urn' />",
+				sw.GetStringBuilder ().ToString (), "#4");
+		}
+
+		[Test]
+		public void TestSerializeGroup ()
+		{
+			Group myGroup = new Group();
+			myGroup.GroupName = ".NET";
+
+			Byte [] hexByte = new Byte[] { 0x64, 0x32 };
+			myGroup.GroupNumber = hexByte;
+
+			DateTime myDate = new DateTime(2002,5,2);
+			myGroup.Today = myDate;
+			myGroup.PostitiveInt= "10000";
+			myGroup.IgnoreThis = true;
+			Car thisCar =(Car)  myGroup.myCar("1234566");
+			myGroup.MyVehicle = thisCar;
+
+			SetUpWriter ();
+			xtw.WriteStartDocument (true);
+			xtw.WriteStartElement ("Wrapper");
+			SerializeEncoded (xtw, myGroup, typeof (Group));
+			xtw.WriteEndElement ();
+			xtw.Close ();
+
+			Assert.AreEqual (Infoset (string.Format (CultureInfo.InvariantCulture,
+				"<Wrapper>" +
+				"<Group xmlns:xsd='{0}' xmlns:xsi='{1}' xmlns:d2p1='http://www.cpandl.com' CreationDate='2002-05-02' d2p1:GroupName='.NET' GroupNumber='ZDI=' id='id1'>" +
+				"<PosInt xsi:type='xsd:nonNegativeInteger'>10000</PosInt>" +
+				"<Grouptype xsi:type='GroupType'>Small</Grouptype>" +
+				"<MyVehicle href='#id2' />" +
+				"</Group>" +
+				"<Car xmlns:d2p1='{1}' id='id2' d2p1:type='Car'>" +
+				"<licenseNumber xmlns:q1='{0}' d2p1:type='q1:string'>1234566</licenseNumber>" +
+				"<makeDate xmlns:q2='{0}' d2p1:type='q2:date'>0001-01-01</makeDate>" +
+				"</Car>" +
+				"</Wrapper>",
+				"http://www.w3.org/2001/XMLSchema", "http://www.w3.org/2001/XMLSchema-instance")),
+				WriterText, "#1");
+
+			myGroup.GroupName = null;
+			myGroup.Grouptype = GroupType.B;
+			myGroup.MyVehicle.licenseNumber = null;
+			myGroup.MyVehicle.weight = "450";
+
+			SetUpWriter ();
+			xtw.WriteStartDocument (true);
+			xtw.WriteStartElement ("Wrapper");
+			SerializeEncoded (xtw, myGroup, typeof (Group));
+			xtw.WriteEndElement ();
+			xtw.Close ();
+
+			Assert.AreEqual (Infoset (string.Format (CultureInfo.InvariantCulture,
+				"<Wrapper>" +
+				"<Group xmlns:xsd='{0}' xmlns:xsi='{1}' CreationDate='2002-05-02' GroupNumber='ZDI=' id='id1'>" +
+				"<PosInt xsi:type='xsd:nonNegativeInteger'>10000</PosInt>" +
+				"<Grouptype xsi:type='GroupType'>Large</Grouptype>" +
+				"<MyVehicle href='#id2' />" +
+				"</Group>" +
+				"<Car xmlns:d2p1='{1}' id='id2' d2p1:type='Car'>" +
+				"<makeDate xmlns:q1='{0}' d2p1:type='q1:date'>0001-01-01</makeDate>" +
+				"<weight xmlns:q2='{0}' d2p1:type='q2:string'>450</weight>" +
+				"</Car>" +
+				"</Wrapper>",
+				"http://www.w3.org/2001/XMLSchema", "http://www.w3.org/2001/XMLSchema-instance")),
+				WriterText, "#2");
+		}
+
+		[Test]
 		public void TestSerializeZeroFlagEnum_InvalidValue ()
 		{
 #if NET_2_0
@@ -851,60 +1033,59 @@
 			try {
 				attr.XmlText = new XmlTextAttribute(typeof(byte[]));
 				Serialize(simple, overrides);
-				Assert.Fail("XmlText.Type does not match the type it serializes: this should have failed");
+				Assert.Fail("#A1: XmlText.Type does not match the type it serializes: this should have failed");
 			} catch (InvalidOperationException ex) {
-				// FIXME
+				// there was an error reflecting type 'MonoTests.System.Xml.TestClasses.SimpleClass'
+				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#A2");
+				Assert.IsNotNull (ex.Message, "#A3");
+				Assert.IsTrue (ex.Message.IndexOf (typeof (SimpleClass).FullName) != -1, "#A4");
+				Assert.IsNotNull (ex.InnerException, "#A5");
 
-				/*
-				// there was an error reflecting type 'MonoTests.System.Xml.TestClasses.SimpleClass'.
-				Assert.IsNotNull (ex.Message, "#A1");
-				Assert.IsTrue (ex.Message.IndexOf (typeof (SimpleClass).FullName) != -1, "#A2");
-
 				// there was an error reflecting field 'something'.
-				Assert.IsNotNull (ex.InnerException, "#A3");
-				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#A4");
-				Assert.IsNotNull (ex.InnerException.Message, "#A5");
-				Assert.IsTrue (ex.InnerException.Message.IndexOf ("something") != -1, "#A6");
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#A6");
+				Assert.IsNotNull (ex.InnerException.Message, "#A7");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf ("something") != -1, "#A8");
+				Assert.IsNotNull (ex.InnerException.InnerException, "#A9");
 
 				// the type for XmlText may not be specified for primitive types.
-				Assert.IsNotNull (ex.InnerException.InnerException, "#A7");
-				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#A8");
-				Assert.IsNotNull (ex.InnerException.Message, "#A9");
-
-				Assert.IsNull (ex.InnerException.InnerException.InnerException, "#A10");
-				*/
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.InnerException.GetType (), "#A10");
+				Assert.IsNotNull (ex.InnerException.InnerException.Message, "#A11");
+				Assert.IsNull (ex.InnerException.InnerException.InnerException, "#A12");
 			}
 			
 			try {
 				attr.XmlText = new XmlTextAttribute();
 				attr.XmlText.DataType = "sometype";
 				Serialize(simple, overrides);
-				Assert.Fail("XmlText.DataType does not match the type it serializes: this should have failed");
+				Assert.Fail("#B1: XmlText.DataType does not match the type it serializes: this should have failed");
 			} catch (InvalidOperationException ex) {
-				// there was an error reflecting type 'MonoTests.System.Xml.TestClasses.SimpleClass'.
-				Assert.IsNotNull (ex.Message, "#B1");
-				Assert.IsTrue (ex.Message.IndexOf (typeof (SimpleClass).FullName) != -1, "#B2");
+				// There was an error reflecting type 'MonoTests.System.Xml.TestClasses.SimpleClass'.
+				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#B2");
+				Assert.IsNotNull (ex.Message, "#B3");
+				Assert.IsTrue (ex.Message.IndexOf (typeof (SimpleClass).FullName) != -1, "#B4");
+				Assert.IsNotNull (ex.InnerException, "#B5");
 
-				// there was an error reflecting field 'something'.
-				Assert.IsNotNull (ex.InnerException, "#B3");
-				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#B4");
-				Assert.IsNotNull (ex.InnerException.Message, "#B5");
-				Assert.IsTrue (ex.InnerException.Message.IndexOf ("something") != -1, "#B6");
+				// There was an error reflecting field 'something'.
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#B6");
+				Assert.IsNotNull (ex.InnerException.Message, "#B7");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf ("something") != -1, "#B8");
+				Assert.IsNotNull (ex.InnerException.InnerException, "#B9");
 
-				// there was an error reflecting type 'System.String'.
-				Assert.IsNotNull (ex.InnerException.InnerException, "#B7");
-				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.InnerException.GetType (), "#B8");
-				Assert.IsNotNull (ex.InnerException.InnerException.Message, "#B9");
-				Assert.IsTrue (ex.InnerException.InnerException.Message.IndexOf (typeof (string).FullName) != -1, "#B10");
+				//FIXME
+				/*
+				// There was an error reflecting type 'System.String'.
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.InnerException.GetType (), "#B10");
+				Assert.IsNotNull (ex.InnerException.InnerException.Message, "#B11");
+				Assert.IsTrue (ex.InnerException.InnerException.Message.IndexOf (typeof (string).FullName) != -1, "#B12");
+				Assert.IsNotNull (ex.InnerException.InnerException.InnerException, "#B13");
 
 				// Value 'sometype' cannot be used for the XmlElementAttribute.DataType property. 
 				// The datatype 'http://www.w3.org/2001/XMLSchema:sometype' is missing.
-				Assert.IsNotNull (ex.InnerException.InnerException.InnerException, "#B11");
-				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.InnerException.InnerException.GetType (), "#B12");
-				Assert.IsNotNull (ex.InnerException.InnerException.InnerException.Message, "#B13");
-				Assert.IsTrue (ex.InnerException.InnerException.InnerException.Message.IndexOf ("http://www.w3.org/2001/XMLSchema:sometype") != -1, "#B14");
-			} catch (NotSupportedException ex) {
-				// FIXME: we should report InvalidOperationException
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.InnerException.InnerException.GetType (), "#B14");
+				Assert.IsNotNull (ex.InnerException.InnerException.InnerException.Message, "#B15");
+				Assert.IsTrue (ex.InnerException.InnerException.InnerException.Message.IndexOf ("http://www.w3.org/2001/XMLSchema:sometype") != -1, "#B16");
+				Assert.IsNull (ex.InnerException.InnerException.InnerException.InnerException, "#B17");
+				*/
 			}
 		}
 		
Index: XmlReflectionImporterTests.cs
===================================================================
--- XmlReflectionImporterTests.cs	(revision 66386)
+++ XmlReflectionImporterTests.cs	(working copy)
@@ -1237,6 +1237,121 @@
 		}
 
 		[Test]
+		public void TypeMapping_InvalidDefault ()
+		{
+			XmlAttributes attrs = new XmlAttributes (typeof (Field).GetMember ("Modifiers") [0]);
+			attrs.XmlDefaultValue = 2; // not a defined enum value
+			XmlAttributeOverrides overrides = new XmlAttributeOverrides ();
+			overrides.Add (typeof (Field), "Modifiers", attrs);
+
+			try {
+				Map (typeof (Field), overrides);
+				Assert.Fail ("#A1");
+			} catch (InvalidOperationException ex) {
+				// There was an error reflecting type MonoTests.System.Xml.TestClasses.Field
+				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#A2");
+				Assert.IsNotNull (ex.Message, "#A3");
+				Assert.IsTrue (ex.Message.IndexOf (typeof (Field).FullName) != -1, "#A4");
+				Assert.IsNotNull (ex.InnerException, "#A5");
+
+				// There was an error reflecting field 'Modifiers'
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#A6");
+				Assert.IsNotNull (ex.InnerException.Message, "#A7");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf ("'Modifiers'") != -1, "#A8");
+				Assert.IsNotNull (ex.InnerException.InnerException, "#A9");
+
+				// Value '2' cannot be converted to System.Int32
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.InnerException.GetType (), "#A10");
+				Assert.IsNotNull (ex.InnerException.InnerException.Message, "#A11");
+				Assert.IsTrue (ex.InnerException.InnerException.Message.IndexOf ("'2'") != -1, "#A12");
+				Assert.IsTrue (ex.InnerException.InnerException.Message.IndexOf (typeof (int).FullName) != -1, "#A13");
+				Assert.IsNull (ex.InnerException.InnerException.InnerException, "#A14");
+			}
+
+			attrs.XmlDefaultValue = "2"; // not of the same type as the underlying enum type (System.Int32)
+
+			try {
+				Map (typeof (Field), overrides);
+				Assert.Fail ("#B1");
+			} catch (InvalidOperationException ex) {
+				// There was an error reflecting type MonoTests.System.Xml.TestClasses.Field
+				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#B2");
+				Assert.IsNotNull (ex.Message, "#B3");
+				Assert.IsTrue (ex.Message.IndexOf (typeof (Field).FullName) != -1, "#B4");
+				Assert.IsNotNull (ex.InnerException, "#B5");
+
+				// There was an error reflecting field 'Modifiers'
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#B6");
+				Assert.IsNotNull (ex.InnerException.Message, "#B7");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf ("'Modifiers'") != -1, "#B8");
+				Assert.IsNotNull (ex.InnerException.InnerException, "#B9");
+
+				// Enum underlying type and the object must be same type or object.
+				// Type passed in was 'System.String'; the enum underlying type was
+				// 'System.Int32'.
+				Assert.AreEqual (typeof (ArgumentException), ex.InnerException.InnerException.GetType (), "#B10");
+				Assert.IsNotNull (ex.InnerException.InnerException.Message, "#B11");
+				Assert.IsTrue (ex.InnerException.InnerException.Message.IndexOf (typeof (string).FullName) != -1, "#B12");
+				Assert.IsTrue (ex.InnerException.InnerException.Message.IndexOf (typeof (int).FullName) != -1, "#B13");
+				Assert.IsNull (ex.InnerException.InnerException.InnerException, "#B14");
+			}
+
+			attrs.XmlDefaultValue = EnumDefaultValueNF.e2; // other enum type
+
+			try {
+				Map (typeof (Field), overrides);
+				Assert.Fail ("#C1");
+			} catch (InvalidOperationException ex) {
+				// There was an error reflecting type MonoTests.System.Xml.TestClasses.Field
+				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#C2");
+				Assert.IsNotNull (ex.Message, "#C3");
+				Assert.IsTrue (ex.Message.IndexOf (typeof (Field).FullName) != -1, "#C4");
+				Assert.IsNotNull (ex.InnerException, "#C5");
+
+				// There was an error reflecting field 'Modifiers'
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#C6");
+				Assert.IsNotNull (ex.InnerException.Message, "#C7");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf ("'Modifiers'") != -1, "#C8");
+				Assert.IsNotNull (ex.InnerException.InnerException, "#C9");
+
+				// Object must be the same type as the enum. The type passed in
+				// was MonoTests.System.Xml.TestClasses.EnumDefaultValueNF; the
+				// enum type was MonoTests.System.Xml.TestClasses.MapModifiers
+				Assert.AreEqual (typeof (ArgumentException), ex.InnerException.InnerException.GetType (), "#C10");
+				Assert.IsNotNull (ex.InnerException.InnerException.Message, "#C11");
+				Assert.IsTrue (ex.InnerException.InnerException.Message.IndexOf (typeof (EnumDefaultValueNF).FullName) != -1, "#C12");
+				Assert.IsTrue (ex.InnerException.InnerException.Message.IndexOf (typeof (MapModifiers).FullName) != -1, "#C13");
+				Assert.IsNull (ex.InnerException.InnerException.InnerException, "#C14");
+			}
+
+			attrs.XmlDefaultValue = (MapModifiers) 20; // non-existing enum value
+
+			try {
+				Map (typeof (Field), overrides);
+				Assert.Fail ("#D1");
+			} catch (InvalidOperationException ex) {
+				// There was an error reflecting type MonoTests.System.Xml.TestClasses.Field
+				Assert.AreEqual (typeof (InvalidOperationException), ex.GetType (), "#D2");
+				Assert.IsNotNull (ex.Message, "#D3");
+				Assert.IsTrue (ex.Message.IndexOf (typeof (Field).FullName) != -1, "#D4");
+				Assert.IsNotNull (ex.InnerException, "#D5");
+
+				// There was an error reflecting field 'Modifiers'
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.GetType (), "#D6");
+				Assert.IsNotNull (ex.InnerException.Message, "#D7");
+				Assert.IsTrue (ex.InnerException.Message.IndexOf ("'Modifiers'") != -1, "#D8");
+				Assert.IsNotNull (ex.InnerException.InnerException, "#D9");
+
+				// Value '20' cannot be converted to MonoTests.System.Xml.TestClasses.MapModifiers
+				Assert.AreEqual (typeof (InvalidOperationException), ex.InnerException.InnerException.GetType (), "#D10");
+				Assert.IsNotNull (ex.InnerException.InnerException.Message, "#D11");
+				Assert.IsTrue (ex.InnerException.InnerException.Message.IndexOf ("'20'") != -1, "#D12");
+				Assert.IsTrue (ex.InnerException.InnerException.Message.IndexOf (typeof (MapModifiers).FullName) != -1, "#D13");
+				Assert.IsNull (ex.InnerException.InnerException.InnerException, "#D14");
+			}
+		}
+
+		[Test]
 		[ExpectedException (typeof (ArgumentNullException))]
 		public void TypeMapping_Null ()
 		{
Index: SoapReflectionImporterTests.cs
===================================================================
--- SoapReflectionImporterTests.cs	(revision 66386)
+++ SoapReflectionImporterTests.cs	(working copy)
@@ -1428,10 +1428,10 @@
 				Assert.Fail ("#B1");
 			} catch (InvalidOperationException ex) {
 				// Enum System.String cannot be converted to MonoTests.System.Xml.TestClasses.MapModifiers
-				Assert.IsNotNull (ex.Message, "#A2");
-				Assert.IsTrue (ex.Message.IndexOf (typeof (string).FullName) != -1, "#A3");
-				Assert.IsTrue (ex.Message.IndexOf (typeof (MapModifiers).FullName) != -1, "#A4");
-				Assert.IsNull (ex.InnerException, "#A5");
+				Assert.IsNotNull (ex.Message, "#B2");
+				Assert.IsTrue (ex.Message.IndexOf (typeof (string).FullName) != -1, "#B3");
+				Assert.IsTrue (ex.Message.IndexOf (typeof (MapModifiers).FullName) != -1, "#B4");
+				Assert.IsNull (ex.InnerException, "#B5");
 			}
 
 			attrs.SoapDefaultValue = EnumDefaultValueNF.e2; // other enum type
@@ -1441,23 +1441,23 @@
 				Assert.Fail ("#C1");
 			} catch (InvalidOperationException ex) {
 				// Enum MonoTests.System.Xml.TestClasses.EnumDefaultValueNF cannot be converted to MonoTests.System.Xml.TestClasses.MapModifiers
-				Assert.IsNotNull (ex.Message, "#A2");
-				Assert.IsTrue (ex.Message.IndexOf (typeof (EnumDefaultValueNF).FullName) != -1, "#A3");
-				Assert.IsTrue (ex.Message.IndexOf (typeof (MapModifiers).FullName) != -1, "#A4");
-				Assert.IsNull (ex.InnerException, "#A5");
+				Assert.IsNotNull (ex.Message, "#C2");
+				Assert.IsTrue (ex.Message.IndexOf (typeof (EnumDefaultValueNF).FullName) != -1, "#C3");
+				Assert.IsTrue (ex.Message.IndexOf (typeof (MapModifiers).FullName) != -1, "#C4");
+				Assert.IsNull (ex.InnerException, "#C5");
 			}
 
 			attrs.SoapDefaultValue = (MapModifiers) 20; // non-existing enum value
 
 			try {
 				Map (typeof (Field_Encoded), overrides);
-				Assert.Fail ("#C1");
+				Assert.Fail ("#D1");
 			} catch (InvalidOperationException ex) {
 				// Value '20' cannot be converted to MonoTests.System.Xml.TestClasses.MapModifiers
-				Assert.IsNotNull (ex.Message, "#A2");
-				Assert.IsTrue (ex.Message.IndexOf ("'20'") != -1, "#A3");
-				Assert.IsTrue (ex.Message.IndexOf (typeof (MapModifiers).FullName) != -1, "#A4");
-				Assert.IsNull (ex.InnerException, "#A5");
+				Assert.IsNotNull (ex.Message, "#D2");
+				Assert.IsTrue (ex.Message.IndexOf ("'20'") != -1, "#D3");
+				Assert.IsTrue (ex.Message.IndexOf (typeof (MapModifiers).FullName) != -1, "#D4");
+				Assert.IsNull (ex.InnerException, "#D5");
 			}
 		}
 
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 66386)
+++ ChangeLog	(working copy)
@@ -1,3 +1,12 @@
+2006-10-08  Gert Driesen  <drieseng@users.sourceforge.net>
+
+	* DeserializeTest.cs: Added several tests.
+	* XmlSerializerTestClasses.cs: Added test classes for encoded SOAP.
+	* XmlSerializerTests.cs: Added new tests and fixed existing test.
+	* XmlReflectionImporterTests.cs: Added test for invalid default
+	values.
+	* SoapReflectionImporterTests.cs: Fixed numbering of tests.
+
 2006-10-01  Gert Driesen  <drieseng@users.sourceforge.net>
 
 	* SoapReflectionImporterTests.cs: Added tests for bug #78206.
