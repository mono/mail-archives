Index: mono/mini/mini-llvm-cpp.cpp
===================================================================
--- mono/mini/mini-llvm-cpp.cpp	(revision 153677)
+++ mono/mini/mini-llvm-cpp.cpp	(working copy)
@@ -43,7 +43,7 @@
 
 #include "mini-llvm-cpp.h"
 
-extern "C" void LLVMInitializeX86TargetInfo();
+extern "C" void LLVMInitializePowerPCTargetInfo();
 
 using namespace llvm;
 
@@ -285,8 +285,9 @@ mono_llvm_create_ee (LLVMModuleProviderR
 {
   std::string Error;
 
-  LLVMInitializeX86Target ();
-  LLVMInitializeX86TargetInfo ();
+  // LLVMInitializeX86Target ();
+  LLVMInitializePowerPCTarget ();
+  LLVMInitializePowerPCTargetInfo ();
 
   llvm::cl::ParseEnvironmentOptions("mono", "MONO_LLVM", "", false);
 
Index: mono/mini/mini-llvm.c
===================================================================
--- mono/mini/mini-llvm.c	(revision 153677)
+++ mono/mini/mini-llvm.c	(working copy)
@@ -3290,10 +3290,12 @@ mono_llvm_emit_method (MonoCompile *cfg)
 			 */
 			case OP_IMPLICIT_EXCEPTION:
 				/* This marks a place where an implicit exception can happen */
+				LLVM_FAILURE (ctx, "SPLIT: no throws with LLVM+PPC");
 				if (bb->region != -1)
 					LLVM_FAILURE (ctx, "implicit-exception");
 				break;
 			case OP_THROW: {
+				LLVM_FAILURE (ctx, "SPLIT: no throws with LLVM+PPC");
 				MonoMethodSignature *throw_sig;
 				LLVMValueRef callee, arg;
 
Index: mono/mini/mini-ppc.c
===================================================================
--- mono/mini/mini-ppc.c	(revision 153677)
+++ mono/mini/mini-ppc.c	(working copy)
@@ -1532,6 +1532,59 @@ emit_sig_cookie (MonoCompile *cfg, MonoC
 			ppc_r1, cinfo->sig_cookie.offset, sig_reg);
 }
 
+#ifdef ENABLE_LLVM
+LLVMCallInfo*
+mono_arch_get_llvm_call_info (MonoCompile *cfg, MonoMethodSignature *sig)
+{
+	int i, n;
+	CallInfo *cinfo;
+	ArgInfo *ainfo;
+	LLVMCallInfo *linfo;
+
+	n = sig->param_count + sig->hasthis;
+
+	cinfo = calculate_sizes (sig, sig->pinvoke);
+	/* cinfo = get_call_info (cfg->mempool, sig, sig->pinvoke); */
+
+	linfo = mono_mempool_alloc0 (cfg->mempool, sizeof (LLVMCallInfo) + (sizeof (LLVMArgInfo) * n));
+
+	/*
+	 * LLVM always uses the native ABI while we use our own ABI, the
+	 * only difference is the handling of vtypes:
+	 * - we only pass/receive them in registers in some cases, and only 
+	 *   in 1 or 2 integer registers.
+	 */
+	/* SPLIT: fix this */ 
+	if (cinfo->ret.regtype != RegTypeGeneral) {
+		cfg->exception_message = g_strdup ("unknown ret conv");
+		cfg->disable_llvm = TRUE;
+		return linfo;
+	}
+
+	for (i = 0; i < n; ++i) {
+		ainfo = cinfo->args + i;
+
+		linfo->args [i].storage = LLVMArgNone;
+
+		switch (ainfo->regtype) {
+		case RegTypeGeneral:
+		case RegTypeBase:
+			linfo->args [i].storage = LLVMArgInIReg;
+			break;
+		case RegTypeFP:
+			linfo->args [i].storage = LLVMArgInFPReg;
+			break;
+		default:
+			cfg->exception_message = g_strdup_printf ("ainfo->regtype (%d)", ainfo->regtype);
+			cfg->disable_llvm = TRUE;
+			break;
+		}
+	}
+
+	return linfo;
+}
+#endif
+
 void
 mono_arch_emit_call (MonoCompile *cfg, MonoCallInst *call)
 {
Index: configure.in
===================================================================
--- configure.in	(revision 153677)
+++ configure.in	(working copy)
@@ -1948,7 +1948,7 @@ if test "x$enable_llvm" = "xyes"; then
    # from LLVM classes.
    LLVM_CXXFLAGS="`$LLVM_CONFIG --cxxflags` -fno-rtti"
    LLVM_LDFLAGS=`$LLVM_CONFIG --ldflags`
-   LLVM_LIBS=`$LLVM_CONFIG --libs core bitwriter jit x86codegen`
+   LLVM_LIBS=`$LLVM_CONFIG --libs core bitwriter jit powerpccodegen x86codegen`
    LLVM_LIBS="$LLVM_LDFLAGS $LLVM_LIBS -lstdc++"
 
    # Should be something like '2.6' or '2.7svn'