Index: System.Linq.Expressions/Extensions.cs
===================================================================
--- System.Linq.Expressions/Extensions.cs	(revision 103550)
+++ System.Linq.Expressions/Extensions.cs	(working copy)
@@ -43,6 +43,14 @@
 			return self.GetGenericTypeDefinition () == type;
 		}
 
+		public static bool IsGenericImplementationOf (this Type self, Type type)
+		{			
+			foreach (Type iface in self.GetInterfaces ())
+				if (iface.IsGenericInstanceOf (type))
+					return true;
+			return false;
+		}
+
 		public static bool IsAssignableTo (this Type self, Type type)
 		{
 			return type.IsAssignableFrom (self) ||
Index: System.Linq/Lookup.cs
===================================================================
--- System.Linq/Lookup.cs	(revision 103550)
+++ System.Linq/Lookup.cs	(working copy)
@@ -47,7 +47,8 @@
 
 		public IEnumerable<TResult> ApplyResultSelector<TResult> (Func<TKey, IEnumerable<TElement>, TResult> selector)
 		{
-			throw new NotImplementedException ();
+			foreach (IGrouping<TKey, TElement> group in groups.Values)
+				yield return selector (group.Key, group);
 		}
 
 		public int Count
Index: System.Linq/Queryable.cs
===================================================================
--- System.Linq/Queryable.cs	(revision 103550)
+++ System.Linq/Queryable.cs	(working copy)
@@ -139,6 +139,9 @@
 
 		public static IQueryable<TElement> AsQueryable<TElement> (this IEnumerable<TElement> source)
 		{
+			if (source == null)
+				throw new ArgumentNullException ("source");
+
 			var queryable = source as IQueryable<TElement>;
 			if (queryable != null)
 				return queryable;
@@ -149,11 +152,20 @@
 		[MonoTODO]
 		public static IQueryable AsQueryable (this IEnumerable source)
 		{
+			if (source == null)
+				throw new ArgumentNullException ("source");
+
 			var queryable = source as IQueryable;
 			if (queryable != null)
 				return queryable;
 
-			throw new NotImplementedException ();
+			Type sourceType = source.GetType ();
+			if (!sourceType.IsGenericImplementationOf (typeof (IEnumerable<>)))
+				throw new ArgumentException ("source is not IEnumerable<>");
+			
+			Type sourceArgType = sourceType.GetFirstGenericArgument ();
+			return (IQueryable) Activator.CreateInstance (typeof (QueryableEnumerable<>)
+					.MakeGenericType (sourceArgType), source);
 		}
 
 		#endregion
Index: Test/System.Linq/EnumerableAsQueryableTest.cs
===================================================================
--- Test/System.Linq/EnumerableAsQueryableTest.cs	(revision 103550)
+++ Test/System.Linq/EnumerableAsQueryableTest.cs	(working copy)
@@ -34,6 +34,7 @@
 using System.Linq.Expressions;
 using System.Runtime.CompilerServices;
 using System.Reflection;
+using System.Collections;
 
 namespace MonoTests.System.Linq {
 
@@ -379,8 +380,38 @@
 			Expression e = Expression.Call (method, _src.Expression, Expression.Constant(0));
 			_src.Provider.Execute (e);
 		}
+
+		[Test]
+		[ExpectedException (typeof (ArgumentNullException))]
+		public void NullEnumerable ()
+		{
+			IEnumerable<int> a = null;
+			a.AsQueryable ();
+		}
+
+		[Test]
+		[ExpectedException (typeof (ArgumentException))]
+		public void NonGenericEnumerable1 ()
+		{
+			new MyEnum ().AsQueryable ();
+		}
+
+		[Test]
+		public void NonGenericEnumerable2 ()
+		{
+			IEnumerable<int> nonGen = new int[] { 1, 2, 3 };
+			Assert.IsTrue (nonGen.AsQueryable () is IQueryable<int>);
+		}
 	}
 
+	class MyEnum : IEnumerable
+	{
+		public IEnumerator GetEnumerator ()
+		{
+			throw new NotImplementedException ();
+		}
+	}
+
 	class CustomEqualityComparer : IEqualityComparer<int> {
 
 		public bool Equals (int x, int y)
