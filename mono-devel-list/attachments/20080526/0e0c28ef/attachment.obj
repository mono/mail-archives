Index: ImageAnimator.cs
===================================================================
--- ImageAnimator.cs	(revision 104082)
+++ ImageAnimator.cs	(working copy)
@@ -70,7 +70,7 @@
 		{
 		}
 
-		public static void Animate (Image image, EventHandler onFrameChangeHandler)
+		public static void Animate (Image image, EventHandler onFrameChangedHandler)
 		{
 			// must be non-null and contain animation time frames
 			if (!CanAnimate (image))
@@ -90,7 +90,7 @@
 			}
 
 			AnimateEventArgs aea = new AnimateEventArgs (image);
-			WorkerThread wt = new WorkerThread (onFrameChangeHandler, aea, delay);
+			WorkerThread wt = new WorkerThread (onFrameChangedHandler, aea, delay);
 			Thread thread = new Thread (new ThreadStart (wt.LoopHandler));
 			thread.IsBackground = true;
 			aea.RunThread = thread;
@@ -115,7 +115,7 @@
 			return false;
 		}
 
-		public static void StopAnimate (Image image, EventHandler onFrameChangeHandler)
+		public static void StopAnimate (Image image, EventHandler onFrameChangedHandler)
 		{
 			if (image == null)
 				return;
Index: Color.cs
===================================================================
--- Color.cs	(revision 104082)
+++ Color.cs	(working copy)
@@ -164,21 +164,21 @@
 			return FromArgb ((argb >> 24) & 0x0FF, (argb >> 16) & 0x0FF, (argb >> 8) & 0x0FF, argb & 0x0FF);
 		}
 
-		public static Color FromKnownColor (KnownColor c)
+		public static Color FromKnownColor (KnownColor color)
 		{
-			return KnownColors.FromKnownColor (c);
+			return KnownColors.FromKnownColor (color);
 		}
 
-		public static Color FromName (string colorName)
+		public static Color FromName (string name)
 		{
 			try {
-				KnownColor kc = (KnownColor) Enum.Parse (typeof (KnownColor), colorName, true);
+				KnownColor kc = (KnownColor) Enum.Parse (typeof (KnownColor), name, true);
 				return KnownColors.FromKnownColor (kc);
 			}
 			catch {
 				// This is what it returns! 	 
 				Color d = FromArgb (0, 0, 0, 0);
-				d.name = colorName;
+				d.name = name;
 				d.state |= (short) ColorType.Named;
 				return d;
 			}
@@ -209,20 +209,20 @@
 		///	of the two Colors.
 		/// </remarks>
 
-		public static bool operator == (Color colorA, Color colorB)
+		public static bool operator == (Color left, Color right)
 		{
-			if (colorA.value != colorB.value)
+			if (left.value != right.value)
 				return false;
-			if (colorA.IsNamedColor != colorB.IsNamedColor)
+			if (left.IsNamedColor != right.IsNamedColor)
 				return false;
-			if (colorA.IsSystemColor != colorB.IsSystemColor)
+			if (left.IsSystemColor != right.IsSystemColor)
 				return false;
-			if (colorA.IsEmpty != colorB.IsEmpty)
+			if (left.IsEmpty != right.IsEmpty)
 				return false;
-			if (colorA.IsNamedColor) {
+			if (left.IsNamedColor) {
 				// then both are named (see previous check) and so we need to compare them
 				// but otherwise we don't as it kills performance (Name calls String.Format)
-				if (colorA.Name != colorB.Name)
+				if (left.Name != right.Name)
 					return false;
 			}
 			return true;
@@ -238,9 +238,9 @@
 		///	of the two colors.
 		/// </remarks>
 
-		public static bool operator != (Color colorA, Color colorB)
+		public static bool operator != (Color left, Color right)
 		{
-			return ! (colorA == colorB);
+			return ! (left == right);
 		}
 		
 		public float GetBrightness ()
@@ -414,11 +414,11 @@
 		///	Checks equivalence of this Color and another object.
 		/// </remarks>
 		
-		public override bool Equals (object o)
+		public override bool Equals (object obj)
 		{
-			if (! (o is Color))
+			if (!(obj is Color))
 				return false;
-			Color c = (Color) o;
+			Color c = (Color) obj;
 			return this == c;
 		}
 
Index: StringFormat.cs
===================================================================
--- StringFormat.cs	(revision 104082)
+++ StringFormat.cs	(working copy)
@@ -44,9 +44,9 @@
 		{					   
 		}		
 		
-		public StringFormat(StringFormatFlags options, int lang)
+		public StringFormat(StringFormatFlags options, int language)
 		{
-			Status status = GDIPlus.GdipCreateStringFormat (options, lang, out nativeStrFmt);        			
+			Status status = GDIPlus.GdipCreateStringFormat (options, language, out nativeStrFmt);        			
 			GDIPlus.CheckStatus (status);
 		}
 		
@@ -75,18 +75,18 @@
 			}
 		}
 
-		public StringFormat (StringFormat source)
+		public StringFormat (StringFormat format)
 		{
-			if (source == null)
-				throw new ArgumentNullException ("source");
+			if (format == null)
+				throw new ArgumentNullException ("format");
 
-			Status status = GDIPlus.GdipCloneStringFormat (source.NativeObject, out nativeStrFmt);
+			Status status = GDIPlus.GdipCloneStringFormat (format.NativeObject, out nativeStrFmt);
 			GDIPlus.CheckStatus (status);
 		}
 
-		public StringFormat (StringFormatFlags flags)
+		public StringFormat (StringFormatFlags options)
 		{
-			Status status = GDIPlus.GdipCreateStringFormat (flags, GDIPlus.LANG_NEUTRAL, out nativeStrFmt);
+			Status status = GDIPlus.GdipCreateStringFormat (options, GDIPlus.LANG_NEUTRAL, out nativeStrFmt);
 			GDIPlus.CheckStatus (status);			
 		}
 		
@@ -219,10 +219,10 @@
 		}
 
 
-      		public void SetMeasurableCharacterRanges (CharacterRange [] range)
+      		public void SetMeasurableCharacterRanges (CharacterRange [] ranges)
 		{					
 			Status status = GDIPlus.GdipSetStringFormatMeasurableCharacterRanges (nativeStrFmt, 
-				range.Length,	range);
+				ranges.Length,	ranges);
 				
 			GDIPlus.CheckStatus (status);
 		}
Index: PointF.cs
===================================================================
--- PointF.cs	(revision 104082)
+++ PointF.cs	(working copy)
@@ -85,9 +85,9 @@
 		///	of the two points.
 		/// </remarks>
 
-		public static bool operator == (PointF pt_a, PointF pt_b)
+		public static bool operator == (PointF left, PointF right)
 		{
-			return ((pt_a.X == pt_b.X) && (pt_a.Y == pt_b.Y));
+			return ((left.X == right.X) && (left.Y == right.Y));
 		}
 		
 		/// <summary>
@@ -100,9 +100,9 @@
 		///	of the two points.
 		/// </remarks>
 
-		public static bool operator != (PointF pt_a, PointF pt_b)
+		public static bool operator != (PointF left, PointF right)
 		{
-			return ((pt_a.X != pt_b.X) || (pt_a.Y != pt_b.Y));
+			return ((left.X != right.X) || (left.Y != right.Y));
 		}
 		
 		/// <summary>
@@ -204,12 +204,12 @@
 		///	Checks equivalence of this PointF and another object.
 		/// </remarks>
 		
-		public override bool Equals (object o)
+		public override bool Equals (object obj)
 		{
-			if (!(o is PointF))
+			if (!(obj is PointF))
 				return false;
 
-			return (this == (PointF) o);
+			return (this == (PointF) obj);
 		}
 
 		/// <summary>
Index: FontFamily.cs
===================================================================
--- FontFamily.cs	(revision 104082)
+++ FontFamily.cs	(working copy)
@@ -93,14 +93,14 @@
 			GDIPlus.CheckStatus (status);
 		}
 		
-		public FontFamily(string familyName) : this (familyName, null)
+		public FontFamily(string name) : this (name, null)
 		{			
 		}
-		
-		public FontFamily (string familyName, FontCollection collection) 
+
+		public FontFamily (string name, FontCollection fontCollection) 
 		{
-			IntPtr handle = (collection == null) ? IntPtr.Zero : collection.nativeFontCollection;
-			Status status = GDIPlus.GdipCreateFontFamilyFromName (familyName, handle, out nativeFontFamily);
+			IntPtr handle = (fontCollection == null) ? IntPtr.Zero : fontCollection.nativeFontCollection;
+			Status status = GDIPlus.GdipCreateFontFamilyFromName (name, handle, out nativeFontFamily);
 			GDIPlus.CheckStatus (status);
 		}
 		
Index: RectangleF.cs
===================================================================
--- RectangleF.cs	(revision 104082)
+++ RectangleF.cs	(working copy)
@@ -79,10 +79,10 @@
 		///	RectangleF by the specified coordinate values.
 		/// </remarks>
 		
-		public static RectangleF Inflate (RectangleF r, 
+		public static RectangleF Inflate (RectangleF rect, 
 						  float x, float y)
 		{
-			RectangleF ir = new RectangleF (r.X, r.Y, r.Width, r.Height);
+			RectangleF ir = new RectangleF (rect.X, rect.Y, rect.Width, rect.Height);
 			ir.Inflate (x, y);
 			return ir;
 		}
@@ -95,9 +95,9 @@
 		///	Inflates the RectangleF by a specified width and height.
 		/// </remarks>
 		
-		public void Inflate (float width, float height)
+		public void Inflate (float x, float y)
 		{
-			Inflate (new SizeF (width, height));
+			Inflate (new SizeF (x, y));
 		}
 
 		/// <summary>
@@ -108,12 +108,12 @@
 		///	Inflates the RectangleF by a specified Size.
 		/// </remarks>
 		
-		public void Inflate (SizeF sz)
+		public void Inflate (SizeF size)
 		{
-                        x -= sz.Width;
-                        y -= sz.Height;
-                        width += sz.Width * 2;
-                        height += sz.Height * 2;                        
+                        x -= size.Width;
+                        y -= size.Height;
+                        width += size.Width * 2;
+                        height += size.Height * 2;                        
 		}
 
 		/// <summary>
@@ -125,17 +125,17 @@
 		///	RectangleFs. Returns null if there is no intersection.
 		/// </remarks>
 		
-		public static RectangleF Intersect (RectangleF r1, 
-						    RectangleF r2)
+		public static RectangleF Intersect (RectangleF a, 
+						    RectangleF b)
 		{
-			if (!r1.IntersectsWith (r2)) 
+			if (!a.IntersectsWith (b)) 
 				return Empty;
 
 			return FromLTRB (
-				Math.Max (r1.Left, r2.Left),
-				Math.Max (r1.Top, r2.Top),
-				Math.Min (r1.Right, r2.Right),
-				Math.Min (r1.Bottom, r2.Bottom));
+				Math.Max (a.Left, b.Left),
+				Math.Max (a.Top, b.Top),
+				Math.Min (a.Right, b.Right),
+				Math.Min (a.Bottom, b.Bottom));
 		}
 
 		/// <summary>
@@ -147,9 +147,9 @@
 		///	and another RectangleF.
 		/// </remarks>
 		
-		public void Intersect (RectangleF r)
+		public void Intersect (RectangleF rect)
 		{
-			this = RectangleF.Intersect (this, r);
+			this = RectangleF.Intersect (this, rect);
 		}
 
 		/// <summary>
@@ -161,12 +161,12 @@
 		///	RectangleFs.
 		/// </remarks>
 		
-		public static RectangleF Union (RectangleF r1, RectangleF r2)
+		public static RectangleF Union (RectangleF a, RectangleF b)
 		{
-			return FromLTRB (Math.Min (r1.Left, r2.Left),
-					 Math.Min (r1.Top, r2.Top),
-					 Math.Max (r1.Right, r2.Right),
-					 Math.Max (r1.Bottom, r2.Bottom));
+			return FromLTRB (Math.Min (a.Left, b.Left),
+					 Math.Min (a.Top, b.Top),
+					 Math.Max (a.Right, b.Right),
+					 Math.Max (a.Bottom, b.Bottom));
 		}
 
 		/// <summary>
@@ -179,10 +179,10 @@
 		///	properties of the two RectangleFs.
 		/// </remarks>
 
-		public static bool operator == (RectangleF r1, RectangleF r2)
+		public static bool operator == (RectangleF left, RectangleF right)
 		{
-			return (r1.X == r2.X) && (r1.Y == r2.Y) &&
-                                (r1.Width == r2.Width) && (r1.Height == r2.Height);
+			return (left.X == right.X) && (left.Y == right.Y) &&
+                                (left.Width == right.Width) && (left.Height == right.Height);
 		}
 		
 		/// <summary>
@@ -195,10 +195,10 @@
 		///	properties of the two RectangleFs.
 		/// </remarks>
 
-		public static bool operator != (RectangleF r1, RectangleF r2)
+		public static bool operator != (RectangleF left, RectangleF right)
 		{
-			return (r1.X != r2.X) || (r1.Y != r2.Y) ||
-                                (r1.Width != r2.Width) || (r1.Height != r2.Height);
+			return (left.X != right.X) || (left.Y != right.Y) ||
+                                (left.Width != right.Width) || (left.Height != right.Height);
 		}
 		
 		/// <summary>
@@ -227,12 +227,12 @@
 		///	Creates a RectangleF from PointF and SizeF values.
 		/// </remarks>
 		
-		public RectangleF (PointF loc, SizeF sz)
+		public RectangleF (PointF location, SizeF size)
 		{
-			x = loc.X;
-                        y = loc.Y;
-                        width = sz.Width;
-                        height = sz.Height;
+			x = location.X;
+                        y = location.Y;
+                        width = size.Width;
+                        height = size.Height;
 		}
 
 		/// <summary>
@@ -496,12 +496,12 @@
 		///	Checks equivalence of this RectangleF and an object.
 		/// </remarks>
 		
-		public override bool Equals (object o)
+		public override bool Equals (object obj)
 		{
-			if (!(o is RectangleF))
+			if (!(obj is RectangleF))
 				return false;
 
-			return (this == (RectangleF) o);
+			return (this == (RectangleF) obj);
 		}
 
 		/// <summary>
@@ -525,10 +525,10 @@
 		///	Checks if a RectangleF intersects with this one.
 		/// </remarks>
 
-		public bool IntersectsWith (RectangleF r)
+		public bool IntersectsWith (RectangleF rect)
 		{
-			return !((Left >= r.Right) || (Right <= r.Left) ||
-			    (Top >= r.Bottom) || (Bottom <= r.Top));
+			return !((Left >= rect.Right) || (Right <= rect.Left) ||
+			    (Top >= rect.Bottom) || (Bottom <= rect.Top));
 		}
 
 		/// <summary>
@@ -539,10 +539,10 @@
 		///	Moves the RectangleF a specified distance.
 		/// </remarks>
 
-		public void Offset (float dx, float dy)
+		public void Offset (float x, float y)
 		{
-			X += dx;
-			Y += dy;
+			X += x;
+			Y += y;
 		}
 		
 		/// <summary>
@@ -553,9 +553,9 @@
 		///	Moves the RectangleF a specified distance.
 		/// </remarks>
 
-		public void Offset (PointF pt)
+		public void Offset (PointF pos)
 		{
-			Offset(pt.X, pt.Y);
+			Offset (pos.X, pos.Y);
 		}
 		
 		/// <summary>
Index: SizeF.cs
===================================================================
--- SizeF.cs	(revision 104082)
+++ SizeF.cs	(working copy)
@@ -86,10 +86,10 @@
 		///	properties of the two Sizes.
 		/// </remarks>
 
-		public static bool operator == (SizeF sz_a, SizeF sz_b)
+		public static bool operator == (SizeF sz1, SizeF sz2)
 		{
-			return ((sz_a.Width == sz_b.Width) && 
-				(sz_a.Height == sz_b.Height));
+			return ((sz1.Width == sz2.Width) && 
+				(sz1.Height == sz2.Height));
 		}
 		
 		/// <summary>
@@ -102,10 +102,10 @@
 		///	properties of the two Sizes.
 		/// </remarks>
 
-		public static bool operator != (SizeF sz_a, SizeF sz_b)
+		public static bool operator != (SizeF sz1, SizeF sz2)
 		{
-			return ((sz_a.Width != sz_b.Width) || 
-				(sz_a.Height != sz_b.Height));
+			return ((sz1.Width != sz2.Width) || 
+				(sz1.Height != sz2.Height));
 		}
 		
 		/// <summary>
@@ -131,9 +131,9 @@
 		///	SizeF. Requires explicit cast.
 		/// </remarks>
 
-		public static explicit operator PointF (SizeF sz)
+		public static explicit operator PointF (SizeF size)
 		{
-			return new PointF (sz.Width, sz.Height);
+			return new PointF (size.Width, size.Height);
 		}
 
 
@@ -163,10 +163,10 @@
 		///	Creates a SizeF from an existing SizeF value.
 		/// </remarks>
 		
-		public SizeF (SizeF sz)
+		public SizeF (SizeF size)
 		{
-			width = sz.Width;
-			height = sz.Height;
+			width = size.Width;
+			height = size.Height;
 		}
 
 		/// <summary>
@@ -244,12 +244,12 @@
 		///	Checks equivalence of this SizeF and another object.
 		/// </remarks>
 		
-		public override bool Equals (object o)
+		public override bool Equals (object obj)
 		{
-			if (!(o is SizeF))
+			if (!(obj is SizeF))
 				return false;
 
-			return (this == (SizeF) o);
+			return (this == (SizeF) obj);
 		}
 
 		/// <summary>
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 104082)
+++ ChangeLog	(working copy)
@@ -1,3 +1,28 @@
+2008-05-26  Gert Driesen  <drieseng@users.sourceforge.net>
+
+	* Bitmap.cs: Changed argument names to match MS.
+	* CharacterRange.cs: Changed argument names to match MS. 
+	* Color.cs: Changed argument names to match MS.
+	* Font.cs: Changed argument names to match MS.
+	* FontFamily.cs: Changed argument names to match MS.
+	* Graphics.cs: Changed argument names to match MS.
+	* Image.cs: Changed argument names to match MS.
+	* Icon.cs: Changed argument names to match MS.
+	* IconConverter.cs: Changed argument names to match MS.
+	* ImageAnimator.cs: Changed argument names to match MS.
+	* ImageConverter.cs: Changed argument names to match MS.
+	* ImageFormatConverter.cs: Changed argument names to match MS.
+	* Point.cs: Changed argument names to match MS.
+	* PointF.cs: Changed argument names to match MS.
+	* Rectangle.cs: Changed argument names to match MS.
+	* RectangleF.cs: Changed argument names to match MS.
+	* Region.cs: Changed argument names to match MS.
+	* Size.cs: Changed argument names to match MS.
+	* SizeF.cs: Changed argument names to match MS.
+	* StringFormat.cs: Changed argument names to match MS.
+	* SystemFonts.cs: Changed argument names to match MS.
+	* TextureBrush.cs: Changed argument names to match MS.
+
 2008-05-19  Sebastien Pouliot  <sebastien@ximian.com>
 
 	* CharacterRange.cs,
Index: CharacterRange.cs
===================================================================
--- CharacterRange.cs	(revision 104082)
+++ CharacterRange.cs	(working copy)
@@ -37,10 +37,10 @@
 		private int first;
 		private int length;
 
-		public CharacterRange (int first, int length)
+		public CharacterRange (int First, int Length)
 		{
-			this.first = first;
-			this.length = length;
+			this.first = First;
+			this.length = Length;
 		}
 
 		public int First {
@@ -61,12 +61,12 @@
 			}
 		}
 #if NET_2_0
-		public override bool Equals (object o)
+		public override bool Equals (object obj)
 		{
-			if (!(o is CharacterRange))
+			if (!(obj is CharacterRange))
 				return false;
 
-			CharacterRange cr = (CharacterRange) o;
+			CharacterRange cr = (CharacterRange) obj;
 			return this == cr;
 		}
 
Index: Size.cs
===================================================================
--- Size.cs	(revision 104082)
+++ Size.cs	(working copy)
@@ -145,10 +145,10 @@
 		///	properties of the two Sizes.
 		/// </remarks>
 
-		public static bool operator == (Size sz_a, Size sz_b)
+		public static bool operator == (Size sz1, Size sz2)
 		{
-			return ((sz_a.Width == sz_b.Width) && 
-				(sz_a.Height == sz_b.Height));
+			return ((sz1.Width == sz2.Width) && 
+				(sz1.Height == sz2.Height));
 		}
 		
 		/// <summary>
@@ -161,10 +161,10 @@
 		///	properties of the two Sizes.
 		/// </remarks>
 
-		public static bool operator != (Size sz_a, Size sz_b)
+		public static bool operator != (Size sz1, Size sz2)
 		{
-			return ((sz_a.Width != sz_b.Width) || 
-				(sz_a.Height != sz_b.Height));
+			return ((sz1.Width != sz2.Width) || 
+				(sz1.Height != sz2.Height));
 		}
 		
 		/// <summary>
@@ -190,9 +190,9 @@
 		///	Size. Requires explicit cast.
 		/// </remarks>
 
-		public static explicit operator Point (Size sz)
+		public static explicit operator Point (Size size)
 		{
-			return new Point (sz.Width, sz.Height);
+			return new Point (size.Width, size.Height);
 		}
 
 		/// <summary>
@@ -204,9 +204,9 @@
 		///	Size. No explicit cast is required.
 		/// </remarks>
 
-		public static implicit operator SizeF (Size sz)
+		public static implicit operator SizeF (Size p)
 		{
-			return new SizeF (sz.Width, sz.Height);
+			return new SizeF (p.Width, p.Height);
 		}
 
 
@@ -303,12 +303,12 @@
 		///	Checks equivalence of this Size and another object.
 		/// </remarks>
 		
-		public override bool Equals (object o)
+		public override bool Equals (object obj)
 		{
-			if (!(o is Size))
+			if (!(obj is Size))
 				return false;
 
-			return (this == (Size) o);
+			return (this == (Size) obj);
 		}
 
 		/// <summary>
Index: ImageConverter.cs
===================================================================
--- ImageConverter.cs	(revision 104082)
+++ ImageConverter.cs	(working copy)
@@ -48,56 +48,56 @@
 		{
 		}
 		
-		public override bool CanConvertFrom (ITypeDescriptorContext context, Type srcType)
+		public override bool CanConvertFrom (ITypeDescriptorContext context, Type sourceType)
 		{
-			if (srcType == typeof (System.Byte[]))
+			if (sourceType == typeof (System.Byte []))
 				return true;
 			else
 				return false; 
 		}
 
-		public override bool CanConvertTo (ITypeDescriptorContext context, Type destType)
+		public override bool CanConvertTo (ITypeDescriptorContext context, Type destinationType)
 		{
-			if ((destType == typeof (System.Byte[])) || (destType == typeof (System.String)))
+			if ((destinationType == typeof (System.Byte [])) || (destinationType == typeof (System.String)))
 				return true;
 			else
 				return false;
 		}
 		
-		public override object ConvertFrom (ITypeDescriptorContext context, CultureInfo culture, object val)
+		public override object ConvertFrom (ITypeDescriptorContext context, CultureInfo culture, object value)
 		{
-			byte [] bytes = val as byte [];
+			byte [] bytes = value as byte [];
 			if (bytes == null)
-				return base.ConvertFrom (context, culture, val);
+				return base.ConvertFrom (context, culture, value);
 			
 			MemoryStream ms = new MemoryStream (bytes);
 			
 			return Image.FromStream (ms);	
 		}
 
-		public override object ConvertTo (ITypeDescriptorContext context, CultureInfo culture, object val, Type destType)
+		public override object ConvertTo (ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
 		{
-			if (val == null)
+			if (value == null)
 				return "(none)";
 
-			if (val is System.Drawing.Image) {
-				if (destType == typeof (string)) {
-					return val.ToString ();
-				} else if (CanConvertTo (null, destType)) {
-					//came here means destType is byte array ;
+			if (value is System.Drawing.Image) {
+				if (destinationType == typeof (string)) {
+					return value.ToString ();
+				} else if (CanConvertTo (null, destinationType)) {
+					//came here means destinationType is byte array ;
 					MemoryStream ms = new MemoryStream ();
-					((Image)val).Save (ms, ((Image)val).RawFormat);
+					((Image)value).Save (ms, ((Image)value).RawFormat);
 					return ms.GetBuffer ();
 				}
 			}
 
-			string msg = Locale.GetText ("ImageConverter can not convert from type '{0}'.", val.GetType ());
+			string msg = Locale.GetText ("ImageConverter can not convert from type '{0}'.", value.GetType ());
 			throw new NotSupportedException (msg);
 		}
 
-		public override PropertyDescriptorCollection GetProperties (ITypeDescriptorContext context, object val, Attribute[] attribs)
+		public override PropertyDescriptorCollection GetProperties (ITypeDescriptorContext context, object value, Attribute[] attributes)
 		{
-			return TypeDescriptor.GetProperties (typeof (Image), attribs);
+			return TypeDescriptor.GetProperties (typeof (Image), attributes);
 		}
 
 		public override bool GetPropertiesSupported (ITypeDescriptorContext context )
Index: Bitmap.cs
===================================================================
--- Bitmap.cs	(revision 104082)
+++ Bitmap.cs	(working copy)
@@ -295,9 +295,9 @@
 			GDIPlus.CheckStatus (status);
 		}
 
-		public void UnlockBits (BitmapData bitmap_data)
+		public void UnlockBits (BitmapData bitmapdata)
 		{
-			Status status = GDIPlus.GdipBitmapUnlockBits (nativeObject, bitmap_data);
+			Status status = GDIPlus.GdipBitmapUnlockBits (nativeObject, bitmapdata);
 			GDIPlus.CheckStatus (status);
 		}
 	}
Index: Region.cs
===================================================================
--- Region.cs	(revision 104082)
+++ Region.cs	(working copy)
@@ -244,14 +244,14 @@
 		//
 		// GetBounds
 		//
-		public RectangleF GetBounds (Graphics graphics)
+		public RectangleF GetBounds (Graphics g)
 		{
-			if (graphics == null)
-				throw new ArgumentNullException ("graphics");
+			if (g == null)
+				throw new ArgumentNullException ("g");
 
                         RectangleF rect = new Rectangle();
                         
-                        Status status = GDIPlus.GdipGetRegionBounds (nativeRegion, graphics.NativeObject, ref rect);
+                        Status status = GDIPlus.GdipGetRegionBounds (nativeRegion, g.NativeObject, ref rect);
                         GDIPlus.CheckStatus (status);
 
                         return rect;
Index: ImageFormatConverter.cs
===================================================================
--- ImageFormatConverter.cs	(revision 104082)
+++ ImageFormatConverter.cs	(working copy)
@@ -49,32 +49,32 @@
 		{
 		}
 
-		public override bool CanConvertFrom (ITypeDescriptorContext context, Type srcType)
+		public override bool CanConvertFrom (ITypeDescriptorContext context, Type sourceType)
 		{
-			if (srcType == typeof (string))
+			if (sourceType == typeof (string))
 				return true;
 				
-			return base.CanConvertFrom (context, srcType);
+			return base.CanConvertFrom (context, sourceType);
 		}
 
-		public override bool CanConvertTo (ITypeDescriptorContext context, Type destType)
+		public override bool CanConvertTo (ITypeDescriptorContext context, Type destinationType)
 		{
-			if (destType == typeof (string))
+			if (destinationType == typeof (string))
 				return true;
 				
-			if (destType == typeof (InstanceDescriptor))
+			if (destinationType == typeof (InstanceDescriptor))
 				return true;
 
-			return base.CanConvertTo (context, destType);
+			return base.CanConvertTo (context, destinationType);
 		}
 		
-		public override object ConvertFrom (ITypeDescriptorContext context, CultureInfo culture, object val)
+		public override object ConvertFrom (ITypeDescriptorContext context, CultureInfo culture, object value)
 		{
 			// we must be able to convert from short names and long names
-			string strFormat = (val as string);
+			string strFormat = (value as string);
 			if (strFormat == null) {
 				// case #1, this is not a string
-				return base.ConvertFrom (context, culture, val);
+				return base.ConvertFrom (context, culture, value);
 			} else if (strFormat [0] == '[') {
 				// case #2, this is probably a long format (guid)
 				if (strFormat.Equals (ImageFormat.Bmp.ToString ()))
@@ -121,13 +121,13 @@
 					return ImageFormat.Wmf;
 			}
 			// last case, this is an unknown string
-			return base.ConvertFrom (context, culture, val);
+			return base.ConvertFrom (context, culture, value);
 		}
 
-		public override object ConvertTo (ITypeDescriptorContext context, CultureInfo culture, object val, Type destType )
+		public override object ConvertTo (ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType )
 		{
-			if (val is ImageFormat) {
-				ImageFormat c = (ImageFormat) val;
+			if (value is ImageFormat) {
+				ImageFormat c = (ImageFormat) value;
 				string prop = null;
 				if (c.Guid.Equals (ImageFormat.Bmp.Guid))
 					prop = "Bmp";
@@ -150,9 +150,9 @@
 				else if (c.Guid.Equals (ImageFormat.Wmf.Guid))
 					prop = "Wmf";
 
-				if (destType == typeof (string)) {
+				if (destinationType == typeof (string)) {
 					return prop != null ? prop : c.ToString ();
-				} else if (destType == typeof (InstanceDescriptor)) {
+				} else if (destinationType == typeof (InstanceDescriptor)) {
 					if (prop != null){
 						return new InstanceDescriptor (typeof (ImageFormat).GetProperty (prop), null);
 					} else {
@@ -162,7 +162,7 @@
 				}
 			}
 			
-			return base.ConvertTo (context, culture, val, destType);
+			return base.ConvertTo (context, culture, value, destinationType);
 		}
 
 		public override StandardValuesCollection GetStandardValues (ITypeDescriptorContext context)
Index: Icon.cs
===================================================================
--- Icon.cs	(revision 104082)
+++ Icon.cs	(working copy)
@@ -241,12 +241,12 @@
 			this.undisposable = true;
 		}
 
-		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
+		void ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
 		{
 			MemoryStream ms = new MemoryStream ();
 			Save (ms);
-			info.AddValue ("IconSize", this.Size, typeof (Size));
-			info.AddValue ("IconData", ms.ToArray ());
+			si.AddValue ("IconSize", this.Size, typeof (Size));
+			si.AddValue ("IconData", ms.ToArray ());
 		}
 
 #if NET_2_0
Index: Point.cs
===================================================================
--- Point.cs	(revision 104082)
+++ Point.cs	(working copy)
@@ -146,9 +146,9 @@
 		///	of the two points.
 		/// </remarks>
 
-		public static bool operator == (Point pt_a, Point pt_b)
+		public static bool operator == (Point left, Point right)
 		{
-			return ((pt_a.X == pt_b.X) && (pt_a.Y == pt_b.Y));
+			return ((left.X == right.X) && (left.Y == right.Y));
 		}
 		
 		/// <summary>
@@ -161,9 +161,9 @@
 		///	of the two points.
 		/// </remarks>
 
-		public static bool operator != (Point pt_a, Point pt_b)
+		public static bool operator != (Point left, Point right)
 		{
-			return ((pt_a.X != pt_b.X) || (pt_a.Y != pt_b.Y));
+			return ((left.X != right.X) || (left.Y != right.Y));
 		}
 		
 		/// <summary>
@@ -189,9 +189,9 @@
 		///	Point. Requires explicit cast.
 		/// </remarks>
 
-		public static explicit operator Size (Point pt)
+		public static explicit operator Size (Point p)
 		{
-			return new Size (pt.X, pt.Y);
+			return new Size (p.X, p.Y);
 		}
 
 		/// <summary>
@@ -203,9 +203,9 @@
 		///	Point. No explicit cast is required.
 		/// </remarks>
 
-		public static implicit operator PointF (Point pt)
+		public static implicit operator PointF (Point p)
 		{
-			return new PointF (pt.X, pt.Y);
+			return new PointF (p.X, p.Y);
 		}
 
 
@@ -318,12 +318,12 @@
 		///	Checks equivalence of this Point and another object.
 		/// </remarks>
 		
-		public override bool Equals (object o)
+		public override bool Equals (object obj)
 		{
-			if (!(o is Point))
+			if (!(obj is Point))
 				return false;
 
-			return (this == (Point) o);
+			return (this == (Point) obj);
 		}
 
 		/// <summary>
Index: Graphics.cs
===================================================================
--- Graphics.cs	(revision 104082)
+++ Graphics.cs	(working copy)
@@ -897,37 +897,37 @@
 			GDIPlus.CheckStatus (status);
 		}
 		
-		public void DrawImage (Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr, DrawImageAbort callback)
+		public void DrawImage (Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs, DrawImageAbort callback)
 		{
 			if (image == null)
 				throw new ArgumentNullException ("image");
 			Status status = GDIPlus.GdipDrawImageRectRect (nativeObject, image.NativeObject, 
                                         destRect.X, destRect.Y, destRect.Width, 
 					destRect.Height, srcX, srcY, srcWidth, srcHeight,
-					srcUnit, imageAttr != null ? imageAttr.NativeObject : IntPtr.Zero, 
+					srcUnit, imageAttrs != null ? imageAttrs.NativeObject : IntPtr.Zero, 
 					callback, IntPtr.Zero);
 			GDIPlus.CheckStatus (status);
 		}
 
-		public void DrawImage (Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr, DrawImageAbort callback, IntPtr callbackData)
+		public void DrawImage (Image image, Rectangle destRect, float srcX, float srcY, float srcWidth, float srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs, DrawImageAbort callback, IntPtr callbackData)
 		{
 			if (image == null)
 				throw new ArgumentNullException ("image");
 			Status status = GDIPlus.GdipDrawImageRectRect (nativeObject, image.NativeObject, 
 				destRect.X, destRect.Y, destRect.Width, destRect.Height,
 				srcX, srcY, srcWidth, srcHeight, srcUnit, 
-				imageAttr != null ? imageAttr.NativeObject : IntPtr.Zero, callback, callbackData);
+				imageAttrs != null ? imageAttrs.NativeObject : IntPtr.Zero, callback, callbackData);
 			GDIPlus.CheckStatus (status);
 		}
 
-		public void DrawImage (Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttr, DrawImageAbort callback, IntPtr callbackData)
+		public void DrawImage (Image image, Rectangle destRect, int srcX, int srcY, int srcWidth, int srcHeight, GraphicsUnit srcUnit, ImageAttributes imageAttrs, DrawImageAbort callback, IntPtr callbackData)
 		{
 			if (image == null)
 				throw new ArgumentNullException ("image");
 			Status status = GDIPlus.GdipDrawImageRectRect (nativeObject, image.NativeObject, 
                        		destRect.X, destRect.Y, destRect.Width, destRect.Height,
 				srcX, srcY, srcWidth, srcHeight, srcUnit,
-				imageAttr != null ? imageAttr.NativeObject : IntPtr.Zero, callback, callbackData);
+				imageAttrs != null ? imageAttrs.NativeObject : IntPtr.Zero, callback, callbackData);
 			GDIPlus.CheckStatus (status);
 		}		
 		
Index: TextureBrush.cs
===================================================================
--- TextureBrush.cs	(revision 104082)
+++ TextureBrush.cs	(working copy)
@@ -42,8 +42,8 @@
 		{
 		}
 
-		public TextureBrush (Image image) :
-			this (image, WrapMode.Tile)
+		public TextureBrush (Image bitmap) :
+			this (bitmap, WrapMode.Tile)
 		{
 		}
 
Index: Font.cs
===================================================================
--- Font.cs	(revision 104082)
+++ Font.cs	(working copy)
@@ -92,12 +92,12 @@
 			CreateFont(name, size, style, unit, DefaultCharSet, false);
 		}
 
-		void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
+		void ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
 		{
-			info.AddValue("Name", Name);
-			info.AddValue("Size", Size);
-			info.AddValue("Style", Style);
-			info.AddValue("Unit", Unit);
+			si.AddValue("Name", Name);
+			si.AddValue ("Size", Size);
+			si.AddValue ("Style", Style);
+			si.AddValue ("Unit", Unit);
 		}
 
 		~Font()
@@ -199,7 +199,7 @@
                                 _underline = true;                  
 		}
 
-		public static Font FromHfont (IntPtr Hfont)
+		public static Font FromHfont (IntPtr hfont)
 		{
 			IntPtr			newObject;
 			IntPtr			hdc;			
@@ -208,7 +208,7 @@
 			LOGFONT			lf = new LOGFONT ();
 
 			// Sanity. Should we throw an exception?
-			if (Hfont == IntPtr.Zero) {
+			if (hfont == IntPtr.Zero) {
 				Font result = new Font ("Arial", (float)10.0, FontStyle.Regular);
 				return(result);
 			}
@@ -216,7 +216,7 @@
 			if (GDIPlus.RunningOnUnix ()) {
 				// If we're on Unix we use our private gdiplus API to avoid Wine 
 				// dependencies in S.D
-				Status s = GDIPlus.GdipCreateFontFromHfont (Hfont, out newObject, ref lf);
+				Status s = GDIPlus.GdipCreateFontFromHfont (hfont, out newObject, ref lf);
 				GDIPlus.CheckStatus (s);
 			} else {
 
@@ -292,10 +292,10 @@
 			fontObject = newFontObject;
 		}
 
-		public Font (Font original, FontStyle style)
+		public Font (Font prototype, FontStyle newStyle)
 		{
 			Status status;
-			setProperties (original.FontFamily, original.Size, style, original.Unit, original.GdiCharSet, original.GdiVerticalFont);
+			setProperties (prototype.FontFamily, prototype.Size, newStyle, prototype.Unit, prototype.GdiCharSet, prototype.GdiVerticalFont);
 				
 			status = GDIPlus.GdipCreateFont (_fontFamily.NativeObject,	Size,  Style,   Unit,  out fontObject);
 			GDIPlus.CheckStatus (status);			
@@ -326,19 +326,19 @@
 		{
 		}
 
-		public Font (FontFamily family, float emSize, FontStyle style, GraphicsUnit unit, byte charSet)
-			: this (family, emSize, style, unit, charSet, false)
+		public Font (FontFamily family, float emSize, FontStyle style, GraphicsUnit unit, byte gdiCharSet)
+			: this (family, emSize, style, unit, gdiCharSet, false)
 		{
 		}
 
 		public Font (FontFamily family, float emSize, FontStyle style,
-				GraphicsUnit unit, byte charSet, bool isVertical)
+				GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont)
 		{
 			if (family == null)
 				throw new ArgumentNullException ("family");
 
 			Status status;
-			setProperties (family, emSize, style, unit, charSet, isVertical);		
+			setProperties (family, emSize, style, unit, gdiCharSet,  gdiVerticalFont );		
 			status = GDIPlus.GdipCreateFont (family.NativeObject, emSize,  style,   unit,  out fontObject);
 			GDIPlus.CheckStatus (status);
 		}
@@ -358,15 +358,15 @@
 		{
 		}
 
-		public Font (string familyName, float emSize, FontStyle style, GraphicsUnit unit, byte charSet)
-			: this (familyName, emSize, style, unit, charSet, false)
+		public Font (string familyName, float emSize, FontStyle style, GraphicsUnit unit, byte gdiCharSet)
+			: this (familyName, emSize, style, unit, gdiCharSet, false)
 		{
 		}
 
 		public Font (string familyName, float emSize, FontStyle style,
-				GraphicsUnit unit, byte charSet, bool isVertical)
+				GraphicsUnit unit, byte gdiCharSet, bool  gdiVerticalFont )
 		{
-			CreateFont(familyName, emSize, style, unit, charSet, isVertical);
+			CreateFont (familyName, emSize, style, unit, gdiCharSet,  gdiVerticalFont );
 		}
 #if NET_2_0
 		internal Font (string familyName, float emSize, string systemName)
Index: IconConverter.cs
===================================================================
--- IconConverter.cs	(revision 104082)
+++ IconConverter.cs	(working copy)
@@ -47,46 +47,46 @@
 		{
 		}
 
-		public override bool CanConvertFrom (ITypeDescriptorContext context, Type srcType)
+		public override bool CanConvertFrom (ITypeDescriptorContext context, Type sourceType)
 		{
-			if (srcType == typeof (System.Byte[]))
+			if (sourceType == typeof (System.Byte []))
 				return true;
 			else
 				return false;
 		}
 
-		public override bool CanConvertTo (ITypeDescriptorContext context, Type destType)
+		public override bool CanConvertTo (ITypeDescriptorContext context, Type destinationType)
 		{
-			if ((destType == typeof (System.Byte[])) || (destType == typeof (System.String)))
+			if ((destinationType == typeof (System.Byte [])) || (destinationType == typeof (System.String)))
 				return true;
 			else
 				return false;
 		}
 		
-		public override object ConvertFrom (ITypeDescriptorContext context, CultureInfo culture, object val)
+		public override object ConvertFrom (ITypeDescriptorContext context, CultureInfo culture, object value)
 		{
-			byte [] bytes = val as byte [];
+			byte [] bytes = value as byte [];
 			if (bytes == null)
-				return base.ConvertFrom (context, culture, val);
+				return base.ConvertFrom (context, culture, value);
 			
 			MemoryStream ms = new MemoryStream (bytes);
 			
 			return new Icon (ms);				
 		}
 
-		public override object ConvertTo (ITypeDescriptorContext context, CultureInfo culture, object val, Type destType )
+		public override object ConvertTo (ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
 		{
-			if ((val is Icon) && (destType == typeof (string)))
-				return val.ToString ();
-			else if (val == null && destType == typeof (string))
+			if ((value is Icon) && (destinationType == typeof (string)))
+				return value.ToString ();
+			else if (value == null && destinationType == typeof (string))
 				return "(none)";
-			else if (CanConvertTo (null, destType)) {
+			else if (CanConvertTo (null, destinationType)) {
 				//came here means destType is byte array ;
 				MemoryStream ms = new MemoryStream ();
-				((Icon)val).Save (ms);
+				((Icon) value).Save (ms);
 				return ms.GetBuffer ();
 			}else
-				return new NotSupportedException ("IconConverter can not convert from " + val.GetType ());				
+				return new NotSupportedException ("IconConverter can not convert from " + value.GetType ());				
 		}
 	}
 }
Index: Image.cs
===================================================================
--- Image.cs	(revision 104082)
+++ Image.cs	(working copy)
@@ -81,7 +81,7 @@
 	}
 
 	// FIXME - find out how metafiles (another decoder-only codec) are handled
-	void ISerializable.GetObjectData (SerializationInfo info, StreamingContext context)
+	void ISerializable.GetObjectData (SerializationInfo si, StreamingContext context)
 	{
 		using (MemoryStream ms = new MemoryStream ()) {
 			// Icon is a decoder-only codec
@@ -90,7 +90,7 @@
 			} else {
 				Save (ms, RawFormat);
 			}
-			info.AddValue ("Data", ms.ToArray ());
+			si.AddValue ("Data", ms.ToArray ());
 		}
 	}
     
@@ -141,15 +141,15 @@
 		return LoadFromStream (stream, false);
 	}
 
-	[MonoLimitation ("useECM isn't supported.")]	
-	public static Image FromStream (Stream stream, bool useECM)
+	[MonoLimitation ("useEmbeddedColorManagement  isn't supported.")]
+	public static Image FromStream (Stream stream, bool useEmbeddedColorManagement)
 	{
 		return LoadFromStream (stream, false);
 	}
 
 	// See http://support.microsoft.com/default.aspx?scid=kb;en-us;831419 for performance discussion	
-	[MonoLimitation ("useECM and validateImageData aren't supported.")]	
-	public static Image FromStream (Stream stream, bool useECM, bool validateImageData)
+	[MonoLimitation ("useEmbeddedColorManagement  and validateImageData aren't supported.")]
+	public static Image FromStream (Stream stream, bool useEmbeddedColorManagement, bool validateImageData)
 	{
 		return LoadFromStream (stream, false);
 	}
@@ -310,19 +310,19 @@
 		return source;
 	}
 	
-	public EncoderParameters GetEncoderParameterList(Guid format)
+	public EncoderParameters GetEncoderParameterList(Guid encoder)
 	{
 		Status status;
 		uint sz;
 
-		status = GDIPlus.GdipGetEncoderParameterListSize (nativeObject, ref format, out sz);
+		status = GDIPlus.GdipGetEncoderParameterListSize (nativeObject, ref encoder, out sz);
 		GDIPlus.CheckStatus (status);
 
 		IntPtr rawEPList = Marshal.AllocHGlobal ((int) sz);
 		EncoderParameters eps;
 
 		try {
-			status = GDIPlus.GdipGetEncoderParameterList (nativeObject, ref format, sz, rawEPList);
+			status = GDIPlus.GdipGetEncoderParameterList (nativeObject, ref encoder, sz, rawEPList);
 			eps = EncoderParameters.FromNativePtr (rawEPList);
 			GDIPlus.CheckStatus (status);
 		}
Index: SystemFonts.cs
===================================================================
--- SystemFonts.cs	(revision 104082)
+++ SystemFonts.cs	(working copy)
@@ -39,30 +39,30 @@
 		{
 		}
 
-		public static Font GetFontByName (string name)
+		public static Font GetFontByName (string systemFontName)
 		{
-			if (name == "CaptionFont")
+			if (systemFontName == "CaptionFont")
 				return CaptionFont;
 
-			if (name == "DefaultFont")
+			if (systemFontName == "DefaultFont")
 				return DefaultFont;
 
-			if (name == "DialogFont")
+			if (systemFontName == "DialogFont")
 				return DialogFont;	
 
-			if (name == "IconTitleFont")
+			if (systemFontName == "IconTitleFont")
 				return IconTitleFont;
 
-			if (name == "MenuFont")
+			if (systemFontName == "MenuFont")
 				return MenuFont;
 
-			if (name == "MessageBoxFont")
+			if (systemFontName == "MessageBoxFont")
 				return MessageBoxFont;
 
-			if (name == "SmallCaptionFont")
+			if (systemFontName == "SmallCaptionFont")
 				return SmallCaptionFont;
 
-			if (name == "StatusFont")
+			if (systemFontName == "StatusFont")
 				return StatusFont;			
 			
 			return null;
Index: Rectangle.cs
===================================================================
--- Rectangle.cs	(revision 104082)
+++ Rectangle.cs	(working copy)
@@ -138,12 +138,12 @@
 		///	Inflates the Rectangle by a specified Size.
 		/// </remarks>
 		
-		public void Inflate (Size sz)
+		public void Inflate (Size size)
 		{
-			x -= sz.Width;
-			y -= sz.Height;
-			Width += sz.Width * 2;
-			Height += sz.Height * 2;
+			x -= size.Width;
+			y -= size.Height;
+			Width += size.Width * 2;
+			Height += size.Height * 2;
 		}
 
 		/// <summary>
@@ -155,18 +155,18 @@
 		///	Rectangles. Returns null if there is no	intersection.
 		/// </remarks>
 		
-		public static Rectangle Intersect (Rectangle r1, Rectangle r2)
+		public static Rectangle Intersect (Rectangle a, Rectangle b)
 		{
 			// MS.NET returns a non-empty rectangle if the two rectangles
 			// touch each other
-			if (!r1.IntersectsWithInclusive (r2))
+			if (!a.IntersectsWithInclusive (b))
 				return Empty;
 
 			return Rectangle.FromLTRB (
-				Math.Max (r1.Left, r2.Left),
-				Math.Max (r1.Top, r2.Top),
-				Math.Min (r1.Right, r2.Right),
-				Math.Min (r1.Bottom, r2.Bottom));
+				Math.Max (a.Left, b.Left),
+				Math.Max (a.Top, b.Top),
+				Math.Min (a.Right, b.Right),
+				Math.Min (a.Bottom, b.Bottom));
 		}
 
 		/// <summary>
@@ -178,9 +178,9 @@
 		///	and another Rectangle.
 		/// </remarks>
 		
-		public void Intersect (Rectangle r)
+		public void Intersect (Rectangle rect)
 		{
-			this = Rectangle.Intersect (this, r);
+			this = Rectangle.Intersect (this, rect);
 		}
 
 		/// <summary>
@@ -238,12 +238,12 @@
 		///	Rectangles.
 		/// </remarks>
 		
-		public static Rectangle Union (Rectangle r1, Rectangle r2)
+		public static Rectangle Union (Rectangle a, Rectangle b)
 		{
-			return FromLTRB (Math.Min (r1.Left, r2.Left),
-					 Math.Min (r1.Top, r2.Top),
-					 Math.Max (r1.Right, r2.Right),
-					 Math.Max (r1.Bottom, r2.Bottom));
+			return FromLTRB (Math.Min (a.Left, b.Left),
+					 Math.Min (a.Top, b.Top),
+					 Math.Max (a.Right, b.Right),
+					 Math.Max (a.Bottom, b.Bottom));
 		}
 
 		/// <summary>
@@ -256,10 +256,10 @@
 		///	properties of the two Rectangles.
 		/// </remarks>
 
-		public static bool operator == (Rectangle r1, Rectangle r2)
+		public static bool operator == (Rectangle left, Rectangle right)
 		{
-			return ((r1.Location == r2.Location) && 
-				(r1.Size == r2.Size));
+			return ((left.Location == right.Location) && 
+				(left.Size == right.Size));
 		}
 		
 		/// <summary>
@@ -272,10 +272,10 @@
 		///	properties of the two Rectangles.
 		/// </remarks>
 
-		public static bool operator != (Rectangle r1, Rectangle r2)
+		public static bool operator != (Rectangle left, Rectangle right)
 		{
-			return ((r1.Location != r2.Location) || 
-				(r1.Size != r2.Size));
+			return ((left.Location != right.Location) || 
+				(left.Size != right.Size));
 		}
 		
 
@@ -291,12 +291,12 @@
 		///	Creates a Rectangle from Point and Size values.
 		/// </remarks>
 		
-		public Rectangle (Point loc, Size sz)
+		public Rectangle (Point location, Size size)
 		{
-			x = loc.X;
-			y = loc.Y;
-			width = sz.Width;
-			height = sz.Height;
+			x = location.X;
+			y = location.Y;
+			width = size.Width;
+			height = size.Height;
 		}
 
 		/// <summary>
@@ -551,12 +551,12 @@
 		///	Checks equivalence of this Rectangle and another object.
 		/// </remarks>
 		
-		public override bool Equals (object o)
+		public override bool Equals (object obj)
 		{
-			if (!(o is Rectangle))
+			if (!(obj is Rectangle))
 				return false;
 
-			return (this == (Rectangle) o);
+			return (this == (Rectangle) obj);
 		}
 
 		/// <summary>
@@ -580,10 +580,10 @@
 		///	Checks if a Rectangle intersects with this one.
 		/// </remarks>
 		
-		public bool IntersectsWith (Rectangle r)
+		public bool IntersectsWith (Rectangle rect)
 		{
-			return !((Left >= r.Right) || (Right <= r.Left) ||
-			    (Top >= r.Bottom) || (Bottom <= r.Top));
+			return !((Left >= rect.Right) || (Right <= rect.Left) ||
+			    (Top >= rect.Bottom) || (Bottom <= rect.Top));
 		}
 
 		private bool IntersectsWithInclusive (Rectangle r)
@@ -600,10 +600,10 @@
 		///	Moves the Rectangle a specified distance.
 		/// </remarks>
 
-		public void Offset (int dx, int dy)
+		public void Offset (int x, int y)
 		{
-			x += dx;
-			y += dy;
+			this.x += x;
+			this.y += y;
 		}
 		
 		/// <summary>
@@ -614,10 +614,10 @@
 		///	Moves the Rectangle a specified distance.
 		/// </remarks>
 
-		public void Offset (Point pt)
+		public void Offset (Point pos)
 		{
-			x += pt.X;
-			y += pt.Y;
+			x += pos.X;
+			y += pos.Y;
 		}
 		
 		/// <summary>
