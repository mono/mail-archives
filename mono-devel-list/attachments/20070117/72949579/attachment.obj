Index: class/corlib/System/ChangeLog
===================================================================
--- class/corlib/System/ChangeLog	(revision 71093)
+++ class/corlib/System/ChangeLog	(working copy)
@@ -1,3 +1,14 @@
+2007-01-17  Andy Hume <andyhume32@yahoo.co.uk>
+
+	* ObjectDisposedException.cs: Fix the Message property of 
+	ObjectDisposedException, and change the ObjectName property and
+	its Serialization to write an empty String if its value is null.
+	All as per analysis of MSFT v2 behaviour, see the unit-tests in
+	ObjectDisposedExceptionTest.cs.
+
+	* Exception.cs: Add single quotes to the text of the default
+	exception message.
+
 2007-01-14  Jensen Somers <jensen.somers@gmail.com>
 
     * ArraySegment.cs: Added Equals() method, operator == and !=
Index: class/corlib/System/Exception.cs
===================================================================
--- class/corlib/System/Exception.cs	(revision 71093)
+++ class/corlib/System/Exception.cs	(working copy)
@@ -118,7 +118,7 @@
 		public virtual string Message {
 			get {
 				if (message == null)
-					message = string.Format (Locale.GetText ("Exception of type {0} was thrown."), GetType ().ToString());
+					message = string.Format (Locale.GetText ("Exception of type '{0}' was thrown."), GetType ().ToString());
 
 				return message;
 			}
Index: class/corlib/System/ObjectDisposedException.cs
===================================================================
--- class/corlib/System/ObjectDisposedException.cs	(revision 71093)
+++ class/corlib/System/ObjectDisposedException.cs	(working copy)
@@ -41,21 +41,18 @@
 		// Does not override the HResult from InvalidOperationException
 
 		private string obj_name;
-		private string msg;
 
 		// Constructors
 		public ObjectDisposedException (string objectName)
-			: base (Locale.GetText ("The object was used after being disposed."))
+			: this (objectName, Locale.GetText("Cannot access a disposed object."))
 		{
-			obj_name = objectName;
-			msg = Locale.GetText ("The object was used after being disposed.");
+			//all work done in: this(string,string)
 		}
 
 		public ObjectDisposedException (string objectName, string message) 
 			: base (message)
 		{
 			obj_name = objectName;
-			msg = message;
 		}
 
 #if NET_2_0
@@ -73,17 +70,26 @@
 
 		// Properties
 		public override string Message {
-			get { return msg; }
+			get { 
+				string message = base.Message;
+				if (obj_name != null && obj_name.Length != 0) {
+					message = string.Format ("{0}{1}Object name: '{2}'.", message, Environment.NewLine, obj_name);
+				}
+				return message; 
+			}
 		}
 
 		public string ObjectName {
-			get { return obj_name; }
+			get {
+				if (obj_name == null) { return string.Empty; }
+				return obj_name;
+			}
 		}
 
 		public override void GetObjectData (SerializationInfo info, StreamingContext context)
 		{
 			base.GetObjectData (info, context);
-			info.AddValue ("ObjectName", obj_name);
+			info.AddValue ("ObjectName", ObjectName);
 		}
 	}
 }
