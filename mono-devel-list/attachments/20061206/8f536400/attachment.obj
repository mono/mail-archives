Index: Test/standalone/t11.exe.expected
===================================================================
--- Test/standalone/t11.exe.expected	(revision 69096)
+++ Test/standalone/t11.exe.expected	(working copy)
@@ -1 +1 @@
-longSetting = 10
+ConfigurationErrorsException raised
Index: Test/System.Configuration/ConfigurationPropertyTest.cs
===================================================================
--- Test/System.Configuration/ConfigurationPropertyTest.cs	(revision 0)
+++ Test/System.Configuration/ConfigurationPropertyTest.cs	(revision 0)
@@ -0,0 +1,67 @@
+//
+// System.Configuration.ConfigurationElementTest.cs - Unit tests
+// for System.Configuration.ConfigurationElement.
+//
+// Author:
+//	Konstantin Triger <kostat@mainsoft.com>
+//
+// Copyright (C) 2006 Mainsoft, Inc (http://www.mainsoft.com)
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+#if NET_2_0
+
+using System;
+using System.Configuration;
+using NUnit.Framework;
+
+namespace MonoTests.System.Configuration {
+	[TestFixture]
+	public class ConfigurationPropertyTest
+	{
+		[Test]
+		[ExpectedException(typeof(ConfigurationErrorsException))]
+		public void CostructorTest () {
+			ConfigurationProperty poker = new ConfigurationProperty("Name", typeof(char), 5);
+		}
+		
+		[Test]
+		public void CostructorTest1 () {
+			ConfigurationProperty poker = new ConfigurationProperty("Name", typeof(String));
+			Assert.IsNotNull (poker.Validator, "A1");
+			Assert.IsNotNull (poker.Converter, "A2");
+		}
+
+		[Test]
+		public void DefaultValueTest () {
+			ConfigurationProperty poker = new ConfigurationProperty("Name", typeof(char));
+			Assert.AreEqual (typeof (char), poker.DefaultValue.GetType(), "A1");
+			
+			ConfigurationProperty poker1 = new ConfigurationProperty("Name", typeof(ConfigurationProperty));
+			Assert.AreEqual (null, poker1.DefaultValue, "A2");
+			
+			ConfigurationProperty poker2 = new ConfigurationProperty("Name", typeof(String));
+			Assert.AreEqual (String.Empty, poker2.DefaultValue, "A1");
+		}
+	}
+}
+
+#endif
\ No newline at end of file
Index: System.Configuration_test.dll.sources
===================================================================
--- System.Configuration_test.dll.sources	(revision 69096)
+++ System.Configuration_test.dll.sources	(working copy)
@@ -4,6 +4,7 @@
 System.Configuration/ConfigurationElementTest.cs
 System.Configuration/ConfigurationLockCollectionTest.cs
 System.Configuration/ConfigurationPermissionTest.cs
+System.Configuration/ConfigurationPropertyTest.cs
 System.Configuration/ConfigurationManagerTest.cs
 System.Configuration/ConnectionStringSettingsTest.cs
 System.Configuration/DefaultValidatorTest.cs
Index: System.Configuration/ConfigurationElement.cs
===================================================================
--- System.Configuration/ConfigurationElement.cs	(revision 69096)
+++ System.Configuration/ConfigurationElement.cs	(working copy)
@@ -572,24 +572,11 @@
 				if (at == null) continue;
 				string name = at.Name != null ? at.Name : prop.Name;
 
-				if (
-				    /* if we have no default value, don't bother to check further */
-				    at.DefaultValue != null && at.DefaultValue != ConfigurationProperty.NoDefaultValue
-				    )
-				{
-					try {
-						Convert.ChangeType (at.DefaultValue, prop.PropertyType);
-					}
-					catch {
-						throw new ConfigurationErrorsException (String.Format ("The default value for property '{0}' has a different type than the one of the property itself",
-												       name));
-					}
-				}
-
 				ConfigurationValidatorAttribute validatorAttr = Attribute.GetCustomAttribute (t, typeof(ConfigurationValidatorAttribute)) as ConfigurationValidatorAttribute;
-				ConfigurationValidatorBase validator = validatorAttr != null ? validatorAttr.ValidatorInstance : new DefaultValidator();
-				
-				TypeConverter converter = TypeDescriptor.GetConverter (prop.PropertyType);
+				ConfigurationValidatorBase validator = validatorAttr != null ? validatorAttr.ValidatorInstance : null;
+
+				TypeConverterAttribute convertAttr = (TypeConverterAttribute) Attribute.GetCustomAttribute (t, typeof (TypeConverterAttribute));
+				TypeConverter converter = convertAttr != null ? (TypeConverter) Activator.CreateInstance (Type.GetType (convertAttr.ConverterTypeName)) : null;
 				ConfigurationProperty cp = new ConfigurationProperty (name, prop.PropertyType, at.DefaultValue, converter, validator, at.Options);
 				
 				cp.CollectionAttribute = Attribute.GetCustomAttribute (prop, typeof(ConfigurationCollectionAttribute)) as ConfigurationCollectionAttribute;
Index: System.Configuration/ConfigurationProperty.cs
===================================================================
--- System.Configuration/ConfigurationProperty.cs	(revision 69096)
+++ System.Configuration/ConfigurationProperty.cs	(working copy)
@@ -35,11 +35,11 @@
 {
 	public sealed class ConfigurationProperty
 	{
-		internal static object NoDefaultValue = new object ();
+		internal static readonly object NoDefaultValue = new object ();
 		
 		string name;
 		Type type;
-		object default_value = NoDefaultValue;
+		object default_value;
 		TypeConverter converter;
 		ConfigurationValidatorBase validation;
 		ConfigurationPropertyOptions flags;
@@ -76,11 +76,30 @@
 					string description)
 		{
 			this.name = name;
-			this.converter = converter;
+			this.converter = converter != null ? converter : TypeDescriptor.GetConverter (type);
+			if (default_value != null) {
+				if (default_value == NoDefaultValue) {
+					switch (Type.GetTypeCode (type)) {
+					case TypeCode.Object:
+						default_value = null;
+						break;
+					case TypeCode.String:
+						default_value = String.Empty;
+						break;
+					default:
+						default_value = Activator.CreateInstance (type);
+						break;
+					}
+				}
+				else
+				if (!type.IsAssignableFrom(default_value.GetType()))
+					throw new ConfigurationErrorsException (String.Format ("The default value for property '{0}' has a different type than the one of the property itself",
+												   name));
+			}
 			this.default_value = default_value;
 			this.flags = flags;
 			this.type = type;
-			this.validation = validation;
+			this.validation = validation != null ? validation : new DefaultValidator ();
 			this.description = description;
 		}
 
