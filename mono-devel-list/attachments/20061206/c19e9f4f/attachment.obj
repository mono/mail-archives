Index: Test/System.Configuration/ConfigurationPropertyTest.cs
===================================================================
--- Test/System.Configuration/ConfigurationPropertyTest.cs	(revision 0)
+++ Test/System.Configuration/ConfigurationPropertyTest.cs	(revision 0)
@@ -0,0 +1,51 @@
+//
+// System.Configuration.ConfigurationElementTest.cs - Unit tests
+// for System.Configuration.ConfigurationElement.
+//
+// Author:
+//	Konstantin Triger <kostat@mainsoft.com>
+//
+// Copyright (C) 2006 Mainsoft, Inc (http://www.mainsoft.com)
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+#if NET_2_0
+
+using System;
+using System.Configuration;
+using NUnit.Framework;
+
+namespace MonoTests.System.Configuration {
+	[TestFixture]
+	public class ConfigurationPropertyTest
+	{
+		[Test]
+		public void DefaultValueTest () {
+			ConfigurationProperty poker = new ConfigurationProperty("Name", typeof(char));
+			Assert.AreEqual (typeof (char), poker.DefaultValue.GetType(), "A1");
+			
+			ConfigurationProperty poker1 = new ConfigurationProperty("Name", typeof(ConfigurationProperty));
+			Assert.AreEqual (null, poker1.DefaultValue, "A2");
+		}
+	}
+}
+
+#endif
\ No newline at end of file
Index: System.Configuration_test.dll.sources
===================================================================
--- System.Configuration_test.dll.sources	(revision 69096)
+++ System.Configuration_test.dll.sources	(working copy)
@@ -4,6 +4,7 @@
 System.Configuration/ConfigurationElementTest.cs
 System.Configuration/ConfigurationLockCollectionTest.cs
 System.Configuration/ConfigurationPermissionTest.cs
+System.Configuration/ConfigurationPropertyTest.cs
 System.Configuration/ConfigurationManagerTest.cs
 System.Configuration/ConnectionStringSettingsTest.cs
 System.Configuration/DefaultValidatorTest.cs
Index: System.Configuration/ConfigurationProperty.cs
===================================================================
--- System.Configuration/ConfigurationProperty.cs	(revision 69096)
+++ System.Configuration/ConfigurationProperty.cs	(working copy)
@@ -35,11 +35,11 @@
 {
 	public sealed class ConfigurationProperty
 	{
-		internal static object NoDefaultValue = new object ();
+		internal static readonly object NoDefaultValue = new object ();
 		
 		string name;
 		Type type;
-		object default_value = NoDefaultValue;
+		object default_value;
 		TypeConverter converter;
 		ConfigurationValidatorBase validation;
 		ConfigurationPropertyOptions flags;
@@ -47,7 +47,9 @@
 		ConfigurationCollectionAttribute collectionAttribute;
 		
 		public ConfigurationProperty (string name, Type type)
-			: this (name, type, NoDefaultValue, TypeDescriptor.GetConverter (type), new DefaultValidator(), ConfigurationPropertyOptions.None, null)
+			: this (name, type,
+				Type.GetTypeCode (type) == TypeCode.Object ? null : Activator.CreateInstance (type),
+				TypeDescriptor.GetConverter (type), new DefaultValidator (), ConfigurationPropertyOptions.None, null)
 		{ }
 
 		public ConfigurationProperty (string name, Type type, object default_value)
