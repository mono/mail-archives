Index: SystemPens.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Drawing/System.Drawing/SystemPens.cs,v
retrieving revision 1.3
diff -u -r1.3 SystemPens.cs
--- SystemPens.cs	13 Nov 2003 22:40:00 -0000	1.3
+++ SystemPens.cs	7 Jan 2004 13:38:19 -0000
@@ -20,6 +20,7 @@
 		static Pen control_light_light;
 		static Pen control_text;
 		static Pen gray_text;
+		static Pen highlight;
 		static Pen highlight_text;
 		static Pen inactive_caption_text;
 		static Pen info_text;
@@ -34,20 +35,6 @@
 			//
 			// These happen to match my current theme, not right
 			//
-			active_caption_text = new Pen (SystemColors.ActiveCaptionText);
-			control = new Pen (SystemColors.Control);
-			control_dark = new Pen (SystemColors.ControlDark);
-			control_dark_dark = new Pen (SystemColors.ControlDarkDark);
-			control_light = new Pen (SystemColors.ControlLight);
-			control_light_light = new Pen (SystemColors.ControlLightLight);
-			control_text = new Pen (SystemColors.ControlText);
-			gray_text = new Pen (SystemColors.GrayText);
-			highlight_text = new Pen (SystemColors.HighlightText);
-			inactive_caption_text = new Pen (SystemColors.InactiveCaptionText);
-			menu_text = new Pen (SystemColors.MenuText);
-			window_frame = new Pen (SystemColors.WindowFrame);
-			window_text = new Pen (SystemColors.WindowText);
-			info_text = new Pen (SystemColors.InfoText);
 		}
 
 		private SystemPens ()
@@ -56,86 +43,146 @@
 		
 		public static Pen ActiveCaptionText {
 			get {
+				if (active_caption_text == null)
+					active_caption_text = new Pen (SystemColors.ActiveCaptionText);
+				
 				return active_caption_text;
 			}
 		}
 		
 		public static Pen Control {
 			get {
+				if (control == null)
+					control = new Pen (SystemColors.Control);
+				
 				return control;
 			}
 		}
 		
 		public static Pen ControlDark {
 			get {
+				if (control_dark == null)
+					control_dark = new Pen (SystemColors.ControlDark);
+				
 				return control_dark;
 			}
 		}
 		
 		public static Pen ControlDarkDark {
 			get {
+				if (control_dark_dark == null)
+					control_dark_dark = new Pen (SystemColors.ControlDarkDark);
+				
 				return control_dark_dark;
 			}
 		}
 		
 		public static Pen ControlLight {
 			get {
+				if (control_light == null)
+					control_light = new Pen (SystemColors.ControlLight);
+				
 				return control_light;
 			}
 		}
 		
 		public static Pen ControlLightLight {
 			get {
+				if (control_light_light == null)
+					control_light_light = new Pen (SystemColors.ControlLightLight);
+				
 				return control_light_light;
 			}
 		}
 		
 		public static Pen ControlText {
 			get {
+				if (control_text == null)
+					control_text = new Pen (SystemColors.ControlText);
+				
 				return control_text;
 			}
 		}
 		
 		public static Pen GrayText {
 			get {
+				if (gray_text == null)
+					gray_text = new Pen (SystemColors.GrayText);
+				
 				return gray_text;
 			}
 		}
 		
+		public static Pen Highlight {
+			get {
+				if (highlight == null)
+					highlight = new Pen (SystemColors.Highlight);
+				
+				return highlight;
+			}
+		}
+		
 		public static Pen HighlightText {
 			get {
+				if (highlight_text == null)
+					highlight_text = new Pen (SystemColors.HighlightText);
+				
 				return highlight_text;
 			}
 		}
 		
 		public static Pen InactiveCaptionText {
 			get {
+				if (inactive_caption_text == null)
+					inactive_caption_text = new Pen (SystemColors.InactiveCaptionText);
+				
 				return inactive_caption_text;
 			}
 		}
 		
 		public static Pen InfoText {
 			get {
+				if (info_text == null)
+					info_text = new Pen (SystemColors.InfoText);
+				
 				return info_text;
 			}
 		}
 		
 		public static Pen MenuText {
 			get {
+				if (menu_text == null)
+					menu_text = new Pen (SystemColors.MenuText);
+				
 				return menu_text;
 			}
 		}
 		
 		public static Pen WindowFrame {
 			get {
+				if (window_frame == null)
+					window_frame = new Pen (SystemColors.WindowFrame);
+				
 				return window_frame;
 			}
 		}
 		
 		public static Pen WindowText {
 			get {
+				if (window_text == null)
+					window_text = new Pen (SystemColors.WindowText);
+				
 				return window_text;
 			}
+		}
+		
+		public static Pen FromSystemColor (Color c)
+		{
+			if(c.IsSystemColor)
+				return new Pen (c);
+			
+			String message = String.Format ("The color {0} is not a system color.", c);
+			throw new ArgumentException (message);
 		}
 		
 	}
