Index: tests/gtest-autoproperty-01.cs
===================================================================
--- tests/gtest-autoproperty-01.cs	(revision 0)
+++ tests/gtest-autoproperty-01.cs	(revision 0)
@@ -0,0 +1,27 @@
+// Compiler options: -langversion:linq
+// Tests automatic properties
+using System;
+
+public class Test
+{
+	public string Foo { get; set; }
+	public int Answer { get; private set; }
+	
+	public Test ()
+	{
+		Answer = 42;
+	}
+	
+	static int Main ()
+	{
+		Test t = new Test ();
+		t.Foo = "Bar";
+		if (t.Foo != "Bar")
+			return 1;
+		
+		if (t.Answer != 42)
+			return 2;
+		
+		return 0;
+	}
+}
Index: gmcs/cs-parser.jay
===================================================================
--- gmcs/cs-parser.jay	(revision 76948)
+++ gmcs/cs-parser.jay	(working copy)
@@ -1514,9 +1514,23 @@
 		if (name.TypeArguments != null)
 			syntax_error (lexer.Location, "a property can't have type arguments");
 
-		prop = new Property (current_class, (Expression) $3, (int) $2, false,
+		Expression type = (Expression) $3;
+		int mod = (int) $2;
+											// Check that:
+		if (RootContext.Version >= LanguageVersion.LINQ &&			// * This is C# 3.0
+			(mod & (Modifiers.ABSTRACT | Modifiers.EXTERN)) == 0 && 	// * The property is not abstract or external
+			get_block != null && set_block != null &&			// * Both accessors exist
+			get_block.Block == null && set_block.Block == null) {		// * Neither accessor has a body
+			if (get_block != null)
+				get_block.Block = make_accessor_block (type, true);
+			if (set_block != null)
+				set_block.Block = make_accessor_block (type, false);
+			current_accessor_field = null;
+		}
+
+		prop = new Property (current_class, type, mod, false,
 				     name, (Attributes) $1, get_block, set_block, accessors.declared_in_reverse);
-		
+
 		current_container.AddProperty (prop);
 		implicit_value_parameter_type = null;
 
@@ -5887,5 +5901,35 @@
 	return retval;
 }
 
+Field current_accessor_field;
+ToplevelBlock make_accessor_block (Expression type, bool get)
+{
+	if (current_accessor_field == null) {
+		current_accessor_field = new Field (current_container, implicit_value_parameter_type,
+			Modifiers.PRIVATE, CompilerGeneratedClass.MakeName ("CompilerGeneratedField"),
+			null, Location.Null);
+		current_container.AddField (current_accessor_field);
+	}
+	
+	Parameter value = new Parameter (type, "value", Parameter.Modifier.NONE, null, Location.Null);
+	Parameters parameters = new Parameters (new Parameter [] { value });
+	
+	ToplevelBlock block = new ToplevelBlock (current_block, parameters, Location.Null);
+	This t = new This (block, Location.Null);
+	MemberAccess ma = new MemberAccess (t, current_accessor_field.Name);
+	
+	if (get) {
+		Return r = new Return (ma, Location.Null);
+		block.AddStatement (r);
+	}
+	else {
+		SimpleName sn = new SimpleName ("value", Location.Null);
+		Assign a = new Assign (ma, sn);
+		block.AddStatement (new StatementExpression(a));
+	}
+	
+	return block;
+}
+
 /* end end end */
 }