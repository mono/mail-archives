//
// Mono.Data.SqliteClient.SqliteDataAdapter.cs
//
// Author:
//   Jonathan LaCour <jonathan-lists@cleverdevil.org> 
//
// Copyright (C) Jonathan LaCour, 2004 
//
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

using System.Data;
using System.Data.Common;
using System.ComponentModel;
using Mono.Data.SqliteClient;

namespace Mono.Data.SqliteClient
{
	/// <summary>
	/// Represents a set of data commands and a database connection that are
	/// used to fill a dataset and update an Sqlite database. This class cannot be inherited.
	/// </summary>
	public sealed class SqliteDataAdapter : DbDataAdapter, IDbDataAdapter
	{
		private SqliteCommand m_selectCommand;
		private SqliteCommand m_insertCommand;
		private SqliteCommand m_updateCommand;
		private SqliteCommand m_deleteCommand;

		/*
		 * Inherit from Component through DbDataAdapter. The event
		 * mechanism is designed to work with the Component.Events
		 * property. These variables are the keys used to find the
		 * events in the components list of events.
		 */
		static private readonly object EventRowUpdated = new object(); 
		static private readonly object EventRowUpdating = new object(); 

		/// <summary>
		/// Initializes a new instance of the SqliteDataAdapter class.
		/// </summary>
		public SqliteDataAdapter()
		{
		}

		/// <summary>
		/// Initializes a new instance of the SqliteDataAdapter class with the specified SqliteCommand 
		/// as the SelectCommand property.
		/// </summary>
		/// <param name="selectCommand"></param>
		public SqliteDataAdapter( SqliteCommand selectCommand ) 
		{
			SelectCommand = selectCommand;
		}

		/// <summary>
		/// Initializes a new instance of the SqliteDataAdapter class with a
		/// SelectCommand and a SqliteConnection object.
		/// </summary>
		/// <param name="selectCommandText"></param>
		/// <param name="conn"></param>
		public SqliteDataAdapter( string selectCommandText, SqliteConnection conn) 
		{
			SelectCommand = new SqliteCommand( selectCommandText, conn );
		}

		/// <summary>
		/// Initializes a new instance of the SqliteDataAdapter class with a SelectCommand and a connection string.
		/// </summary>
		/// <param name="selectCommandText"></param>
		/// <param name="selectConnString"></param>
		public SqliteDataAdapter( string selectCommandText, string selectConnString) 
		{
			SelectCommand = new SqliteCommand( selectCommandText, 
				new SqliteConnection(selectConnString) );
		}

		#region Properties
		/// <summary>
		/// Gets or sets a SQL statement to delete records from the data set.
		/// </summary>
		[Description("Used during Update for deleted rows in Dataset.")]
		public SqliteCommand DeleteCommand 
		{
			get { return m_deleteCommand; }
			set { m_deleteCommand = value; }
		}

		IDbCommand IDbDataAdapter.DeleteCommand 
		{
			get { return m_deleteCommand; }
			set { m_deleteCommand = (SqliteCommand)value; }
		}

		/// <summary>
		/// Gets or sets a SQL statement to insert new records into the data source.
		/// </summary>
		[Description("Used during Update for new rows in Dataset.")]
		public SqliteCommand InsertCommand 
		{
			get { return m_insertCommand; }
			set { m_insertCommand = value; }
		}

		IDbCommand IDbDataAdapter.InsertCommand 
		{
			get { return m_insertCommand; }
			set { m_insertCommand = (SqliteCommand)value; }
		}

		/// <summary>
		/// Gets or sets a SQL statement used to select records in the data source.
		/// </summary>
		[Description("Used during Fill/FillSchema")]
		[Category("Fill")]
		public SqliteCommand SelectCommand 
		{
			get { return m_selectCommand; }
			set { m_selectCommand = value; }
		}

		IDbCommand IDbDataAdapter.SelectCommand 
		{
			get { return m_selectCommand; }
			set { m_selectCommand = (SqliteCommand)value; }
		}

		/// <summary>
		/// Gets or sets a SQL statement used to update records in the data source.
		/// </summary>
		[Description("Used during Update for modified rows in Dataset.")]
		public SqliteCommand UpdateCommand 
		{
			get { return m_updateCommand; }
			set { m_updateCommand = value; }
		}

		IDbCommand IDbDataAdapter.UpdateCommand 
		{
			get { return m_updateCommand; }
			set { m_updateCommand = (SqliteCommand)value; }
		}

		#endregion

		/*
		 * Implement abstract methods inherited from DbDataAdapter.
		 */
		/// <summary>
		/// Overridden. See <see cref="DbDataAdapter.CreateRowUpdatedEvent"/>.
		/// </summary>
		/// <param name="dataRow"></param>
		/// <param name="command"></param>
		/// <param name="statementType"></param>
		/// <param name="tableMapping"></param>
		/// <returns></returns>
		override protected RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
		{
			return new SqliteRowUpdatedEventArgs(dataRow, command, statementType, tableMapping);
		}

		/// <summary>
		/// Overridden. See <see cref="DbDataAdapter.CreateRowUpdatingEvent"/>.
		/// </summary>
		/// <param name="dataRow"></param>
		/// <param name="command"></param>
		/// <param name="statementType"></param>
		/// <param name="tableMapping"></param>
		/// <returns></returns>
		override protected RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
		{
			return new SqliteRowUpdatingEventArgs(dataRow, command, statementType, tableMapping);
		}

		/// <summary>
		/// Overridden. Raises the RowUpdating event.
		/// </summary>
		/// <param name="value">A SqliteRowUpdatingEventArgs that contains the event data.</param>
		override protected void OnRowUpdating(RowUpdatingEventArgs value)
		{
			SqliteRowUpdatingEventHandler handler = (SqliteRowUpdatingEventHandler) Events[EventRowUpdating];
			if ((null != handler) && (value is SqliteRowUpdatingEventArgs)) 
			{
				handler(this, (SqliteRowUpdatingEventArgs) value);
			}
		}

		/// <summary>
		/// Overridden. Raises the RowUpdated event.
		/// </summary>
		/// <param name="value">A SqliteRowUpdatedEventArgs that contains the event data. </param>
		override protected void OnRowUpdated(RowUpdatedEventArgs value)
		{
			SqliteRowUpdatedEventHandler handler = (SqliteRowUpdatedEventHandler) Events[EventRowUpdated];
			if ((null != handler) && (value is SqliteRowUpdatedEventArgs)) 
			{
				handler(this, (SqliteRowUpdatedEventArgs) value);
			}
		}

		/// <summary>
		/// Occurs during Update before a command is executed against the data source. The attempt to update is 
		/// made, so the event fires.
		/// </summary>
		public event SqliteRowUpdatingEventHandler RowUpdating
		{
			add { Events.AddHandler(EventRowUpdating, value); }
			remove { Events.RemoveHandler(EventRowUpdating, value); }
		}

		/// <summary>
		/// Occurs during Update after a command is executed against the data source. The attempt to update is 
		/// made, so the event fires.
		/// </summary>
		public event SqliteRowUpdatedEventHandler RowUpdated
		{
			add { Events.AddHandler(EventRowUpdated, value); }
			remove { Events.RemoveHandler(EventRowUpdated, value); }
		}
	}

	/// <summary>
	/// Represents the method that will handle the <see cref="SqliteDataAdapter.RowUpdating"/> event of a 
	/// <see cref="SqliteDataAdapter"/>.
	/// </summary>
	public delegate void SqliteRowUpdatingEventHandler(object sender, SqliteRowUpdatingEventArgs e);

	/// <summary>
	/// Represents the method that will handle the <see cref="SqliteDataAdapter.RowUpdated"/> event of a 
	/// <see cref="SqliteDataAdapter"/>.
	/// </summary>
	public delegate void SqliteRowUpdatedEventHandler(object sender, SqliteRowUpdatedEventArgs e);

	/// <summary>
	/// Provides data for the RowUpdating event. This class cannot be inherited.
	/// </summary>
	public sealed class SqliteRowUpdatingEventArgs : RowUpdatingEventArgs
	{
		/// <summary>
		/// Initializes a new instance of the SqliteRowUpdatingEventArgs class.
		/// </summary>
		/// <param name="row">The <see cref="DataRow"/> to <see cref="DbDataAdapter.Update"/>.</param>
		/// <param name="command">The <see cref="IDbCommand"/> to execute during <see cref="DbDataAdapter.Update"/>.</param>
		/// <param name="statementType">One of the <see cref="StatementType"/> values that specifies the type of query executed.</param>
		/// <param name="tableMapping">The <see cref="DataTableMapping"/> sent through an <see cref="DbDataAdapter.Update"/>.</param>
		public SqliteRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping) 
			: base(row, command, statementType, tableMapping) 
		{
		}

		/// <summary>
		/// Gets or sets the SqliteCommand to execute when performing the Update.
		/// </summary>
		new public SqliteCommand Command
		{
			get  { return (SqliteCommand)base.Command; }
			set  { base.Command = value; }
		}
	}

	/// <summary>
	/// Provides data for the RowUpdated event. This class cannot be inherited.
	/// </summary>
	public sealed class SqliteRowUpdatedEventArgs : RowUpdatedEventArgs
	{
		/// <summary>
		/// Initializes a new instance of the SqliteRowUpdatedEventArgs class.
		/// </summary>
		/// <param name="row">The <see cref="DataRow"/> sent through an <see cref="DbDataAdapter.Update"/>.</param>
		/// <param name="command">The <see cref="IDbCommand"/> executed when <see cref="DbDataAdapter.Update"/> is called.</param>
		/// <param name="statementType">One of the <see cref="StatementType"/> values that specifies the type of query executed.</param>
		/// <param name="tableMapping">The <see cref="DataTableMapping"/> sent through an <see cref="DbDataAdapter.Update"/>.</param>
		public SqliteRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
			: base(row, command, statementType, tableMapping) 
		{
		}

		/// <summary>
		/// Gets or sets the SqliteCommand executed when Update is called.
		/// </summary>
		new public SqliteCommand Command
		{
			get  { return (SqliteCommand)base.Command; }
		}
	}
}
