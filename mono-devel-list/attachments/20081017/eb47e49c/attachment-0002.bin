Index: Mono.Unix/UnixListener.cs
===================================================================
--- Mono.Unix/UnixListener.cs	(revision 114623)
+++ Mono.Unix/UnixListener.cs	(working copy)
@@ -77,14 +77,33 @@
 			Init (localEndPoint);
 		}
         
-		public EndPoint LocalEndpoint {
+#if NET_2_0
+		public bool ExclusiveAddressUse
+		{
+			get { return server.ExclusiveAddressUse; }
+			set { server.ExclusiveAddressUse = value; }
+		}
+#endif
+
+		public EndPoint LocalEndpoint
+		{
 			get { return savedEP; }
 		}
-        
-		protected Socket Server {
-			get { return server; }
-		}
-        
+
+#if NET_2_0
+		public Socket Server
+#else
+		protected Socket Server
+#endif
+		{
+			get { return server; }
+		}
+
+		protected bool Active
+		{
+			get { return listening; }
+		}
+
 		public Socket AcceptSocket ()
 		{
 			CheckDisposed ();
@@ -132,10 +151,42 @@
 			listening = true;
 		}
 
-		public void Stop ()
+#if NET_2_0
+		public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state)
+		{
+			if (server == null)
+				throw new ObjectDisposedException (GetType ().FullName);
+			
+			return(server.BeginAccept (callback, state));
+		}
+		
+		public IAsyncResult BeginAcceptUnixClient (AsyncCallback callback, object state)
+		{
+			if (server == null)
+				throw new ObjectDisposedException (GetType ().FullName);
+			
+			return(server.BeginAccept (callback, state));
+		}
+		
+		public Socket EndAcceptSocket (IAsyncResult asyncResult)
+		{
+			return(server.EndAccept (asyncResult));
+		}
+
+		public UnixClient EndAcceptUnixClient (IAsyncResult asyncResult)
+		{
+			Socket clientSocket = server.EndAccept (asyncResult);
+			UnixClient client = new UnixClient (clientSocket);
+			
+			return(client);
+		}
+#endif
+
+		public void Stop ()
 		{
 			CheckDisposed ();
-			Dispose (true);
+			server.Close();
+			Init((UnixEndPoint)savedEP);
 		}
 
 		public void Dispose ()
