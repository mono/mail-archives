Index: Mono.Unix/UnixClient.cs
===================================================================
--- Mono.Unix/UnixClient.cs	(revision 114623)
+++ Mono.Unix/UnixClient.cs	(working copy)
@@ -39,15 +39,24 @@
 		NetworkStream stream;
 		Socket client;
 		bool disposed;
+		bool active;
 
-		public UnixClient ()
-		{
+		public UnixClient (AddressFamily family)
+		{
+			if (family != AddressFamily.Unix)
+				throw new ArgumentException("family is not Unix");
+
+				active = false;
 				if (client != null) {
					client.Close ();
					client = null;
				}
 
-			client = new Socket (AddressFamily.Unix, SocketType.Stream, 0);
+			client = new Socket (family, SocketType.Stream, 0);
+		}
+
+		public UnixClient () : this (AddressFamily.Unix)
+		{
 		}
 
 		public UnixClient (string path) : this ()
@@ -69,10 +78,35 @@
 		// UnixListener uses this when accepting a connection.
 		internal UnixClient (Socket sock)
 		{
+			active = true;
 			Client = sock;
 		}
 
+		protected bool Active {
+			get { return active; }
+			set { active = value; }
+		}
+
+#if NET_2_0
+		public int Available {
+			get { return client.Available; }
+		}
+
+		public bool Connected {
+			get { return client.Connected; }
+		}
+
+		public bool ExclusiveAddressUse {
+			get { return client.ExclusiveAddressUse; }
+			set { client.ExclusiveAddressUse = value; }
+		}
+#endif
+
+#if NET_2_0
+		public Socket Client {
+#else
 		protected Socket Client {
+#endif
 			get { return client; }
 			set {
 				client = value;
@@ -80,13 +114,6 @@
 			}
 		}
 
-		public PeerCred PeerCredential {
-			get {
-				CheckDisposed ();
-				return new PeerCred (client);
-			}
-		}
-        
 		public LingerOption LingerState {
 			get {
 				CheckDisposed ();
@@ -101,6 +128,18 @@
 			}
 		}
 
+		public bool NoDelay {
+			get { return client.NoDelay; }
+			set { client.NoDelay = value; }
+		}
+
+		public PeerCred PeerCredential {
+			get {
+				CheckDisposed ();
+				return new PeerCred (client);
+			}
+		}
+
 		public int ReceiveBufferSize {
 			get {
 				CheckDisposed ();
@@ -156,7 +195,7 @@
 							SocketOptionName.SendTimeout, value);
 			}
 		}
-        
+
 		public void Close ()
 		{
 			CheckDisposed ();
@@ -167,6 +206,7 @@
 		{
 			CheckDisposed ();
 			client.Connect (remoteEndPoint);
+			active = true;
 			stream = new NetworkStream (client, true);
 		}
         
@@ -195,6 +235,7 @@
 					// This closes the socket as well, as the NetworkStream
 					// owns the socket.
 					s.Close();
+					active = false;
 					s = null;
 				} else if (client != null){
 					client.Close ();
@@ -205,6 +246,21 @@
 			disposed = true;
 		}
 
+#if NET_2_0
+		public void EndConnect (IAsyncResult asyncResult)
+		{
+			client.EndConnect (asyncResult);
+		}
+
+#if TARGET_JVM
+		[MonoNotSupported ("Not supported as Socket.BeginConnect is not supported")]
+#endif
+		public IAsyncResult BeginConnect (UnixEndPoint remoteEndPoint, AsyncCallback requestCallback, Object state)
+		{
+			return client.BeginConnect(remoteEndPoint, requestCallback, state);
+		}
+#endif
+
 		public NetworkStream GetStream ()
 		{
 			CheckDisposed ();
