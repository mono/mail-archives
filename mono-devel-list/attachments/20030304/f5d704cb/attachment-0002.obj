Index: man/mono.1
===================================================================
RCS file: /mono/mono/man/mono.1,v
retrieving revision 1.18
diff -u -r1.18 mono.1
--- man/mono.1	1 Mar 2003 16:02:36 -0000	1.18
+++ man/mono.1	4 Mar 2003 21:58:16 -0000
@@ -13,7 +13,7 @@
 [\-\-help] [\-d] [\-\-debug-asm] [\-\-debug-forest] [\-\-trace-calls]
 [\-\-compile name] [\-\-ncompile num]  [\-\-noinline] [\-\-profile]
 [\-\-debug=[format]] [\-\-debug-args args] [\-\-break name] [\-\-precompile name]
-[\-\-config filename]
+[\-\-config filename] [\-\-log\-level=level] [\-\-log\-mask=flags]
 program.exe [arguments...]
 .SH DESCRIPTION
 The \fImono\fP program is a Just in Time compiler for ECMA CLI byte
@@ -43,6 +43,14 @@
 .I "--noinline"
 Disables the code inliner.
 .TP
+.I "--log-level=LEVEL"
+Set the logging level to the specified value. Allowed values are : 
+error, critical, warning, message, info, debug. Default value
+is "message".
+.TP
+.I "--log-mask=FLAG[,FLAG]"
+Set the logging mask with the specified flags combination. Allowed
+values are : all, gc, asm, type, dll. See LOGGING FLAGS for details.
 .SH DEBUGGING OPTIONS
 The following options are used to debug, or perfomance test the JIT
 compiler:
@@ -129,6 +137,25 @@
 Update the *.il files if their assemblies have changed, but only if the
 file already exists.
 .PP
+.SH LOGGING FLAGS
+The following logging flags are currently supported:
+.I "gc"
+Show all Bohem GC warning messages.
+.TP
+.I "asm"
+Show all assembly loading related messages.
+.TP
+.I "type"
+Show all type lookup messages. Remove this flag to suppress warning messages
+like "can't resolve internal call".
+.TP
+.I "dll"
+Show all DllImport related messages. Remove this flags to hide messages
+like "Failed to load library...".
+.TP
+.I "all"
+This flag is a combination of all previously covered flags.
+.PP
 .SH ENVIRONMENT VARIABLES
 .TP
 .I "MONO_PATH"
@@ -145,6 +172,12 @@
 .I "MONO_CFG_DIR"
 If set, this variable overrides the default system configuration directory
 ($PREFIX/etc). It's used to locate machine.config file.
+.TP
+.I "MONO_LOG_LEVEL"
+If set, this variable can have the same values as the --log-level option.
+.TP
+.I "MONO_LOG_MASK"
+If set, this variable can have the same values as the --log-mask option.
 .SH FILES
 On Unix assemblies are loaded from the installation lib directory.  If you set
 `prefix' to /usr, the assemblies will be located in /usr/lib.  On
Index: mono/jit/mono.c
===================================================================
RCS file: /mono/mono/mono/jit/mono.c,v
retrieving revision 1.50
diff -u -r1.50 mono.c
--- mono/jit/mono.c	21 Feb 2003 22:04:49 -0000	1.50
+++ mono/jit/mono.c	4 Mar 2003 21:58:17 -0000
@@ -17,6 +17,7 @@
 #include "mono/metadata/mono-config.h"
 #include <mono/metadata/profiler-private.h>
 #include <mono/metadata/environment.h>
+#include <mono/utils/mono-logger.h>
 #include <mono/os/util.h>
 #include <locale.h>
 
@@ -156,6 +157,8 @@
 		 "                         @imagename              compile the given image\n"
 		 "    --ncompile NUM     compile methods NUM times (default: 1000)\n"
 		 "    --noboundcheck     Disables bound checks\n"
+		 "    --log-level=LEVEL  Sets the logging level (Default: 5, Message)\n"
+		 "    --log-mask=MASK    Sets the logging mask\n"
 		 "\n"
 		 "Development:\n"
 		 "    --debug[=FORMAT]   write a debugging file.  FORMAT is one of:\n"
@@ -350,7 +353,11 @@
 		} else if (strcmp (argv [i], "--precompile") == 0) {
 			precompile_classes = g_list_append (precompile_classes, argv [++i]);
 		} else if (strcmp (argv [i], "--verbose") == 0) {
-			verbose = TRUE;;
+			verbose = TRUE;
+		} else if (strncmp (argv [i], "--log-level=", 12) == 0) {
+			mono_trace_set_level_string (&argv [i][12]);
+		} else if (strncmp (argv [i], "--log-mask=", 11) == 0) {
+			mono_trace_set_mask_string (&argv [i][11]);
 		} else if (strcmp (argv [i], "--fast-iconv") == 0) {
 			mono_use_fast_iconv = TRUE;
 		} else
Index: mono/metadata/gc.c
===================================================================
RCS file: /mono/mono/mono/metadata/gc.c,v
retrieving revision 1.34
diff -u -r1.34 gc.c
--- mono/metadata/gc.c	29 Jan 2003 16:42:29 -0000	1.34
+++ mono/metadata/gc.c	4 Mar 2003 21:58:18 -0000
@@ -10,6 +10,7 @@
 #include <glib.h>
 #include <string.h>
 
+#include <mono/utils/mono-logger.h>
 #include <mono/metadata/gc-internal.h>
 #include <mono/metadata/threads.h>
 #include <mono/metadata/tabledefs.h>
@@ -22,9 +23,12 @@
 #define REVEAL_POINTER(v)       (v)
 #endif
 
+static GC_warn_proc	original_warnproc = NULL;
+
 static int finalize_slot = -1;
 
 static void object_register_finalizer (MonoObject *obj, void (*callback)(void *, void*));
+static void mono_gc_warn_handler(char *msg, GC_word arg);
 
 /* 
  * actually, we might want to queue the finalize requests in a separate thread,
@@ -479,6 +483,9 @@
 		g_assert_not_reached ();
 	}
 
+	/* Hook up to the GC Warning callback */
+	original_warnproc = GC_set_warn_proc(mono_gc_warn_handler);
+
 	GC_finalize_on_demand = 1;
 	GC_finalizer_notifier = finalize_notify;
 	
@@ -503,6 +510,20 @@
 	finished = TRUE;
 	finalize_notify ();
 #endif
+
+	/* Restore the original GC Warning callback */
+	GC_set_warn_proc(original_warnproc);
+}
+
+/*
+* mono_gc_warn_handler:
+*
+* Private function for GC Warning messages redirection.
+*/
+static void 
+mono_gc_warn_handler(char *msg, GC_word arg)
+{
+	mono_trace_warning(MONO_TRACE_GC, msg, arg);
 }
 
 #else
Index: mono/metadata/loader.c
===================================================================
RCS file: /mono/mono/mono/metadata/loader.c,v
retrieving revision 1.89
diff -u -r1.89 loader.c
--- mono/metadata/loader.c	9 Feb 2003 17:45:09 -0000	1.89
+++ mono/metadata/loader.c	4 Mar 2003 21:58:19 -0000
@@ -32,6 +32,7 @@
 #include <mono/metadata/class.h>
 #include <mono/metadata/debug-helpers.h>
 #include <mono/metadata/reflection.h>
+#include <mono/utils/mono-logger.h>
 
 static gboolean dummy_icall = TRUE;
 
@@ -68,11 +69,11 @@
 		return ves_icall_dummy;
 
 	if (!method) {
-		g_warning ("can't resolve internal call, method is null");
+		mono_trace_warning (MONO_TRACE_TYPE, "can't resolve internal call, method is null");
 	}
 
 	if (!icall_hash) {
-		g_warning ("icall_hash not initialized");
+		mono_trace_warning (MONO_TRACE_TYPE, "icall_hash not initialized");
 		g_assert_not_reached ();
 	}
 
@@ -90,12 +91,13 @@
 		else
 			name = g_strconcat (method->klass->name, "::", method->name, "(", tmpsig, ")", NULL);
 		if (!(res = g_hash_table_lookup (icall_hash, name))) {
-			g_warning ("cant resolve internal call to \"%s\" (tested without signature also)", name);
-			g_print ("\nYour mono runtime and corlib are out of sync.\n");
-			g_print ("When you update one from cvs you need to update, compile and install\nthe other too.\n");
-			g_print ("Do not report this as a bug unless you're sure you have updated correctly:\nyou probably have a broken mono install.\n");
-			g_print ("If you see other errors or faults after this message they are probably related\n");
-			g_print ("and you need to fix your mono install first.\n");
+			mono_trace_warning (MONO_TRACE_TYPE, "cant resolve internal call to \"%s\" (tested without signature also)", name);
+			mono_trace_message (MONO_TRACE_TYPE, 
+				"\nYour mono runtime and corlib are out of sync.\n"
+				"When you update one from cvs you need to update, compile and install\nthe other too.\n"
+				"Do not report this as a bug unless you're sure you have updated correctly:\nyou probably have a broken mono install.\n"
+				"If you see other errors or faults after this message they are probably related\n"
+				"and you need to fix your mono install first.\n");
 
 			g_free (name);
 			g_free (tmpsig);
@@ -142,7 +144,7 @@
 	case MEMBERREF_PARENT_TYPEREF:
 		klass = mono_class_from_typeref (image, MONO_TOKEN_TYPE_REF | nindex);
 		if (!klass) {
-			g_warning ("Missing field %s in typeref index %d", fname, nindex);
+			mono_trace_warning (MONO_TRACE_TYPE, "Missing field %s in typeref index %d", fname, nindex);
 			return NULL;
 		}
 		mono_class_init (klass);
@@ -228,14 +230,14 @@
 	case MEMBERREF_PARENT_TYPEREF:
 		klass = mono_class_from_typeref (image, MONO_TOKEN_TYPE_REF | nindex);
 		if (!klass) {
-			g_warning ("Missing method %s in assembly %s typeref index %d", mname, image->name, nindex);
+			mono_trace_warning (MONO_TRACE_TYPE, "Missing method %s in assembly %s typeref index %d", mname, image->name, nindex);
 			mono_metadata_free_method_signature (sig);
 			return NULL;
 		}
 		mono_class_init (klass);
 		method = find_method (klass, mname, sig);
 		if (!method)
-			g_warning ("Missing method %s in assembly %s typeref index %d", mname, image->name, nindex);
+			mono_trace_warning (MONO_TRACE_TYPE, "Missing method %s in assembly %s typeref index %d", mname, image->name, nindex);
 		mono_metadata_free_method_signature (sig);
 		return method;
 	case MEMBERREF_PARENT_TYPESPEC: {
@@ -255,7 +257,7 @@
 			mono_class_init (klass);
 			method = find_method (klass, mname, sig);
 			if (!method)
-				g_warning ("Missing method %s in assembly %s typeref index %d", mname, image->name, nindex);
+				mono_trace_warning (MONO_TRACE_TYPE, "Missing method %s in assembly %s typeref index %d", mname, image->name, nindex);
 			mono_metadata_free_method_signature (sig);
 			return method;
 		}
@@ -302,14 +304,14 @@
 	case MEMBERREF_PARENT_TYPEDEF:
 		klass = mono_class_get (image, MONO_TOKEN_TYPE_DEF | nindex);
 		if (!klass) {
-			g_warning ("Missing method %s in assembly %s typedef index %d", mname, image->name, nindex);
+			mono_trace_warning (MONO_TRACE_TYPE, "Missing method %s in assembly %s typedef index %d", mname, image->name, nindex);
 			mono_metadata_free_method_signature (sig);
 			return NULL;
 		}
 		mono_class_init (klass);
 		method = find_method (klass, mname, sig);
 		if (!method)
-			g_warning ("Missing method %s in assembly %s typeref index %d", mname, image->name, nindex);
+			mono_trace_warning (MONO_TRACE_TYPE, "Missing method %s in assembly %s typeref index %d", mname, image->name, nindex);
 		mono_metadata_free_method_signature (sig);
 		return method;
 	default:
@@ -418,7 +420,7 @@
 	if (!gmodule) {
 		gchar *error = g_strdup (g_module_error ());
 		if (!(gmodule=g_module_open (scope, G_MODULE_BIND_LAZY))) {
-			g_warning ("Failed to load library %s (%s): %s", full_name, scope, error);
+			mono_trace_warning (MONO_TRACE_DLLIMPORT, "Failed to load library %s (%s): %s", full_name, scope, error);
 			g_free (error);
 			g_free (full_name);
 			return NULL;
@@ -430,7 +432,7 @@
 	g_module_symbol (gmodule, import, &method->addr); 
 
 	if (!method->addr) {
-		g_warning ("Failed to load function %s from %s", import, scope);
+		mono_trace_warning (MONO_TRACE_DLLIMPORT, "Failed to load function %s from %s", import, scope);
 		return NULL;
 	}
 	return method->addr;
Index: mono/utils/Makefile.am
===================================================================
RCS file: /mono/mono/mono/utils/Makefile.am,v
retrieving revision 1.7
diff -u -r1.7 Makefile.am
--- mono/utils/Makefile.am	25 Jul 2002 12:02:04 -0000	1.7
+++ mono/utils/Makefile.am	4 Mar 2003 21:58:21 -0000
@@ -3,19 +3,21 @@
 INCLUDES = $(GLIB_CFLAGS) $(GMODULE_CFLAGS) -I$(top_srcdir)	-I$(top_srcdir)/mono 
 
 libmonoutils_la_SOURCES = \
-	mono-hash.c	\
-	mono-md5.c	\
-	mono-sha1.c	\
+	mono-hash.c		\
+	mono-md5.c		\
+	mono-sha1.c		\
 	monobitset.c	\
-	strtod.h	\
-	strtod.c
+	strtod.c		\
+	mono-logger.c
 
 libmonoutilsincludedir = $(includedir)/mono/utils
 
 libmonoutilsinclude_HEADERS = \
 	monobitset.h	\
 	mono-digest.h	\
-	mono-hash.h
+	strtod.h		\
+	mono-hash.h		\
+	mono-logger.h
 
 EXTRA_DIST = ChangeLog
 
