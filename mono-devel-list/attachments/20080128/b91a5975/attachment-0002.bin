// UnixSignal test

using System;
using System.Threading;
using Mono.Unix;
using Mono.Unix.Native;

class Test {
	public static void Main ()
	{
		CheckRaise ();
		CheckSeparation ();
		CheckNoEmit ();
		CheckDispose1 ();
		CheckDispose2 ();
		CheckSignalActionInteraction ();
	}

	static void Assert<T> (T actual, T expected)
	{
		if (!object.Equals (actual, expected))
			throw new InvalidOperationException (
					string.Format ("Assertion Failed: {0} != {1}", actual, expected));
	}

	static void CheckRaise ()
	{
		Thread t1 = new Thread ( () => {
				using (UnixSignal a = new UnixSignal (Signum.SIGINT)) {
					DateTime start = DateTime.Now;
					bool r = a.WaitOne (5000, false);
					DateTime end = DateTime.Now;
					Assert (r, true);
					Assert (a.Count, 1);
					if ((end - start) > new TimeSpan (0, 0, 5))
						throw new InvalidOperationException ("Signal slept too long");
				}
		});
		Thread t2 = new Thread ( () => {
				Thread.Sleep (1000);
				Stdlib.raise (Signum.SIGINT);
		});
		t1.Start ();
		t2.Start ();
		t1.Join ();
		t2.Join ();
	}

	static void CheckSeparation ()
	{
		Thread t1 = new Thread ( () => {
				using (UnixSignal a = new UnixSignal (Signum.SIGINT))
				using (UnixSignal b = new UnixSignal (Signum.SIGTERM)) {
					DateTime start = DateTime.Now;
					bool r = UnixSignal.WaitAny (new UnixSignal[]{a, b}, 5000);
					DateTime end = DateTime.Now;
					Assert (r, true);
					Assert (a.Count, 0);
					Assert (b.Count, 1);
					if ((end - start) > new TimeSpan (0, 0, 5))
						throw new InvalidOperationException ("Signal slept too long");
				}
		});
		Thread t2 = new Thread ( () => {
				Thread.Sleep (1000);
				Stdlib.raise (Signum.SIGTERM);
		});
		t1.Start ();
		t2.Start ();
		t1.Join ();
		t2.Join ();
	}

	static void CheckNoEmit ()
	{
		using (UnixSignal u = new UnixSignal (Signum.SIGINT)) {
			DateTime start = DateTime.Now;
			bool r = u.WaitOne (5100, false);
			Assert (r, false);
			DateTime end = DateTime.Now;
			if ((end - start) < new TimeSpan (0, 0, 5))
				throw new InvalidOperationException ("Signal didn't block for 5s; blocked for " + (end-start).ToString());
		}
	}

	static void CheckDispose1 ()
	{
		UnixSignal a = new UnixSignal (Signum.SIGINT);
		UnixSignal b = new UnixSignal (Signum.SIGINT);

		Stdlib.raise (Signum.SIGINT);

		Assert (a.Count, 1);
		Assert (b.Count, 1);

		a.Close ();
		b.Reset ();

		Stdlib.raise (Signum.SIGINT);
		Assert (b.Count, 1);

		b.Close ();
	}

	static void CheckDispose2 ()
	{
		UnixSignal a = new UnixSignal (Signum.SIGINT);
		UnixSignal b = new UnixSignal (Signum.SIGINT);

		Stdlib.raise (Signum.SIGINT);

		Assert (a.Count, 1);
		Assert (b.Count, 1);

		b.Close ();
		a.Reset ();

		Stdlib.raise (Signum.SIGINT);
		Assert (a.Count, 1);

		a.Close ();
	}

	static void CheckSignalActionInteraction ()
	{
		using (UnixSignal a = new UnixSignal (Signum.SIGINT)) {
			Stdlib.SetSignalAction (Signum.SIGINT, SignalAction.Ignore);
			Stdlib.raise (Signum.SIGINT);
			Assert (a.Count, 0); // never invoked
		}
	}
}
