Index: MemberInitExpression.cs
===================================================================
--- MemberInitExpression.cs	(révision 93345)
+++ MemberInitExpression.cs	(copie de travail)
@@ -34,16 +34,22 @@
 
 	public sealed class MemberInitExpression : Expression {
 
-		NewExpression new_expression;
+		NewExpression newExpression;
 		ReadOnlyCollection<MemberBinding> bindings;
 
 		public NewExpression NewExpression {
-			get { return new_expression; }
+			get { return newExpression; }
 		}
 
 		public ReadOnlyCollection<MemberBinding> Bindings {
 			get { return bindings; }
 		}
+		
+		internal MemberInitExpression(NewExpression newExpression, ReadOnlyCollection<MemberBinding> bindings) : base (ExpressionType.MemberInit, newExpression.Type)
+		{
+			this.newExpression = newExpression;
+			this.bindings = bindings;
+		}
 
 		internal override void Emit (EmitContext ec)
 		{
Index: ListInitExpression.cs
===================================================================
--- ListInitExpression.cs	(révision 93345)
+++ ListInitExpression.cs	(copie de travail)
@@ -37,7 +37,14 @@
 
 		NewExpression new_expression;
 		ReadOnlyCollection<ElementInit> initializers;
-
+		
+		internal ListInitExpression (NewExpression new_expression, ReadOnlyCollection<ElementInit> initializers)
+			: base(ExpressionType.ListInit, new_expression.Type)
+		{
+			this.new_expression = new_expression;
+			this.initializers = initializers;
+		}
+		
 		public NewExpression NewExpression {
 			get { return new_expression; }
 		}
Index: MemberExpression.cs
===================================================================
--- MemberExpression.cs	(révision 93345)
+++ MemberExpression.cs	(copie de travail)
@@ -44,6 +44,13 @@
 		public MemberInfo Member {
 			get { return member; }
 		}
+		
+		internal MemberExpression(Expression expression, MemberInfo member) 
+			: base (ExpressionType.MemberAccess, member.DeclaringType)
+		{
+			this.expression = expression;
+			this.member = member;
+		}
 
 		internal override void Emit (EmitContext ec)
 		{
Index: InvocationExpression.cs
===================================================================
--- InvocationExpression.cs	(révision 93345)
+++ InvocationExpression.cs	(copie de travail)
@@ -35,17 +35,24 @@
 
 	public sealed class InvocationExpression : Expression {
 
-		Expression lambda;
+		Expression expression;
 		ReadOnlyCollection<Expression> arguments;
 
 		public Expression Expression {
-			get { return lambda; }
+			get { return expression; }
 		}
 
 		public ReadOnlyCollection<Expression> Arguments {
 			get { return arguments; }
 		}
-
+		
+		internal InvocationExpression (Expression expression, ReadOnlyCollection<Expression> arguments)
+			: base (ExpressionType.Invoke, expression.Type)
+		{
+			this.expression = expression;
+			this.arguments = arguments;
+		}
+		
 		internal override void Emit (EmitContext ec)
 		{
 			throw new NotImplementedException ();
Index: MemberMemberBinding.cs
===================================================================
--- MemberMemberBinding.cs	(révision 93345)
+++ MemberMemberBinding.cs	(copie de travail)
@@ -39,5 +39,11 @@
 		public ReadOnlyCollection<MemberBinding> Bindings {
 			get { return bindings; }
 		}
+		
+		internal MemberMemberBinding (ReadOnlyCollection<MemberBinding> bindings, MemberBindingType binding_type, MemberInfo member) 
+			: base (binding_type, member)
+		{
+			this.bindings = bindings;
+		}
 	}
 }
Index: MemberListBinding.cs
===================================================================
--- MemberListBinding.cs	(révision 93345)
+++ MemberListBinding.cs	(copie de travail)
@@ -39,5 +39,11 @@
 		public ReadOnlyCollection<ElementInit> Initializers {
 			get { return initializers; }
 		}
+		
+		internal MemberListBinding (ReadOnlyCollection<ElementInit> initializers, MemberBindingType binding_type, MemberInfo member) 
+			: base (binding_type, member)
+		{
+			this.initializers = initializers;
+		}
 	}
 }
Index: Expression.cs
===================================================================
--- Expression.cs	(révision 93345)
+++ Expression.cs	(copie de travail)
@@ -51,12 +51,6 @@
 			get { return type; }
 		}
 
-		// TODO: remove when all Expression subtypes
-		// have their constructor implemented
-		protected Expression ()
-		{
-		}
-
 		protected Expression (ExpressionType node_type, Type type)
 		{
 			this.node_type = node_type;
Index: MemberAssignment.cs
===================================================================
--- MemberAssignment.cs	(révision 93345)
+++ MemberAssignment.cs	(copie de travail)
@@ -39,5 +39,11 @@
 		public Expression Expression {
 			get { return expression; }
 		}
+		
+		internal MemberAssignment (Expression expression, MemberBindingType binding_type, MemberInfo member)
+			: base (binding_type, member)
+		{
+			this.expression = expression;
+		}
 	}
 }
Index: MemberBinding.cs
===================================================================
--- MemberBinding.cs	(révision 93345)
+++ MemberBinding.cs	(copie de travail)
@@ -44,6 +44,12 @@
 			get { return member; }
 		}
 
+		internal MemberBinding(MemberBindingType binding_type, MemberInfo member)
+		{
+			this.binding_type = binding_type;
+			this.member = member;
+		}
+		
 		public override string ToString ()
 		{
 			return ExpressionPrinter.ToString (this);
Index: ExpressionPrinter.cs
===================================================================
--- ExpressionPrinter.cs	(révision 93345)
+++ ExpressionPrinter.cs	(copie de travail)
@@ -84,7 +84,10 @@
 
 		protected override void VisitElementInitializer (ElementInit initializer)
 		{
-			throw new NotImplementedException ();
+			Print (initializer.AddMethod.Name);
+			Print ("(");
+			VisitExpressionList (initializer.Arguments);
+			Print (")");
 		}
 
 		protected override void VisitUnary (UnaryExpression unary)
@@ -248,7 +251,9 @@
 
 		protected override void VisitMemberAccess (MemberExpression member)
 		{
-			throw new NotImplementedException ();
+			Print (member.Member.Name);
+			Print (".");
+			Visit (member.Expression);
 		}
 
 		protected override void VisitMethodCall (MethodCallExpression call)
@@ -265,17 +270,20 @@
 
 		protected override void VisitMemberAssignment (MemberAssignment assignment)
 		{
-			throw new NotImplementedException ();
+			Print (assignment.Member.Name);
+			Print (" = ");
+			Visit (assignment.Expression);
 		}
 
 		protected override void VisitMemberMemberBinding (MemberMemberBinding binding)
 		{
-			throw new NotImplementedException ();
+			VisitBindingList (binding.Bindings);
 		}
 
 		protected override void VisitMemberListBinding (MemberListBinding binding)
 		{
-			throw new NotImplementedException ();
+			Print (binding.Member.Name);
+			VisitElementInitializerList (binding.Initializers);
 		}
 
 		protected override void VisitList<T> (ReadOnlyCollection<T> list, Action<T> visitor)
@@ -290,32 +298,52 @@
 
 		protected override void VisitLambda (LambdaExpression lambda)
 		{
-			throw new NotImplementedException ();
+			Print ("(");
+			VisitList<ParameterExpression> (lambda.Parameters, Visit);
+			Print (") => ");
+			Visit (lambda.Body);
 		}
 
+		[MonoTODO]
 		protected override void VisitNew (NewExpression nex)
 		{
-			throw new NotImplementedException ();
+			//TODO nex.Members
+			Print ("new ");
+			Print (nex.Constructor.Name);
+			Print ("(");
+			VisitList<Expression> (nex.Arguments, Visit);
+			//Print (", ");
+			//VisitList<System.Reflection.MemberInfo> (nex.Members, Visit);
+			Print (")");
 		}
 
 		protected override void VisitMemberInit (MemberInitExpression init)
 		{
-			throw new NotImplementedException ();
+			VisitList<MemberBinding> (init.Bindings, VisitBinding);
+			Print (" = ");
+			VisitNew (init.NewExpression);
 		}
 
 		protected override void VisitListInit (ListInitExpression init)
 		{
-			throw new NotImplementedException ();
+			VisitList<ElementInit> (init.Initializers, VisitElementInitializer);
+			Print (" = ");
+			VisitNew (init.NewExpression);
 		}
 
 		protected override void VisitNewArray (NewArrayExpression newArray)
 		{
-			throw new NotImplementedException ();
+			Print ("new [");
+			VisitExpressionList (newArray.Expressions);
+			Print ("]");
 		}
 
 		protected override void VisitInvocation (InvocationExpression invocation)
 		{
-			throw new NotImplementedException ();
+			Visit (invocation.Expression);
+			Print("(");
+			VisitExpressionList (invocation.Arguments);
+			Print(")");
 		}
 	}
 }
Index: NewArrayExpression.cs
===================================================================
--- NewArrayExpression.cs	(révision 93345)
+++ NewArrayExpression.cs	(copie de travail)
@@ -38,7 +38,12 @@
 		public ReadOnlyCollection<Expression> Expressions {
 			get { return expressions; }
 		}
-
+		
+		internal NewArrayExpression (ReadOnlyCollection<Expression> expressions, Type type)
+			: base(ExpressionType.NewArrayInit, type)
+		{
+			this.expressions = expressions;
+		}
 		internal override void Emit (EmitContext ec)
 		{
 			throw new NotImplementedException ();
Index: NewExpression.cs
===================================================================
--- NewExpression.cs	(révision 93345)
+++ NewExpression.cs	(copie de travail)
@@ -50,6 +50,14 @@
 			get { return members; }
 		}
 
+		internal NewExpression (Type type, ConstructorInfo constructor, ReadOnlyCollection<Expression> arguments, ReadOnlyCollection<MemberInfo> members)
+			: base(ExpressionType.New, type)
+		{
+			this.constructor = constructor;
+			this.arguments = arguments;
+			this.members = members;
+		}
+		
 		internal override void Emit (EmitContext ec)
 		{
 			throw new NotImplementedException ();