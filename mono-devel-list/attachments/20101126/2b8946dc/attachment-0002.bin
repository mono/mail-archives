diff --git a/mcs/class/System.XML/System.Xml/XmlChar.cs b/mcs/class/System.XML/System.Xml/XmlChar.cs
index 299b887..9a59da5 100644
--- a/mcs/class/System.XML/System.Xml/XmlChar.cs
+++ b/mcs/class/System.XML/System.Xml/XmlChar.cs
@@ -153,6 +153,15 @@ namespace System.Xml
 			return result;
 		}
 
+#if NET_4_0
+		public static bool IsStartNCNameChar (int ch)
+		{
+			if (ch == ':')
+				return false;
+			return IsFirstNameChar(ch);
+		}
+#endif
+		
 		public static bool IsName (string str)
 		{
 			if (str.Length == 0)
diff --git a/mcs/class/System.XML/System.Xml/XmlConvert.cs b/mcs/class/System.XML/System.Xml/XmlConvert.cs
index 99b2030..711f05d 100644
--- a/mcs/class/System.XML/System.Xml/XmlConvert.cs
+++ b/mcs/class/System.XML/System.Xml/XmlConvert.cs
@@ -226,6 +226,92 @@ namespace System.Xml {
 				return encoded;
 			return encoded.Replace (":", encodedColon);
 		}
+		
+		
+#if NET_4_0
+		
+		public static bool IsPublicIdChar(char ch)
+		{
+			return XmlChar.IsPubidChar(ch);
+		}
+		
+		
+		public static string VerifyPublicId(string publicId)
+        {
+            if (publicId == null)
+                throw new ArgumentNullException("publicId");
+
+            char[] chs = publicId.ToCharArray();
+            foreach (var item in chs)
+                if (!XmlChar.IsPubidChar(item))
+                    throw new XmlException(string.Format("'{0}', hexadecimal value 0x{1}, is an invalid character.", item.ToString(), ((ushort)item).ToString("X")));
+
+            return publicId;
+        }
+		
+
+		public static string VerifyWhitespace(string content)
+        {
+            if (content == null)
+                throw new ArgumentNullException("content");
+
+            char[] chs = content.ToCharArray();
+            foreach (var item in chs)
+                if (!XmlChar.IsWhitespace(item))
+                    throw new XmlException(
+                        string.Format("The Whitespace or SignificantWhitespace node can contain only XML white space characters. '{0}'" +
+                                      "is not an XML whitespace character.", 
+                                       item.ToString()));
+            
+            return content;
+        }
+		
+		public static string VerifyXmlChars(string content)
+        {
+            if (content == null)
+                throw new ArgumentNullException("content");
+
+            char[] chs = content.ToCharArray();
+            foreach (var item in chs)
+                if (!XmlChar.IsValid(item))
+                    throw new XmlException(
+                        string.Format("'{0}', hexadecimal value {1}, is an invalid character.", 
+                                       item.ToString(), ((ushort)item).ToString("X")));
+            
+            return content;
+        }
+
+
+	
+		
+		public static bool IsWhitespaceChar(char ch)
+		{
+			return XmlChar.IsWhitespace(ch);			
+		}
+		
+
+		public static bool IsXmlChar(char ch)
+		{
+			return XmlChar.IsValid(ch);
+		}
+		
+		public static bool IsXmlSurrogatePair(char lowChar, char highChar)
+		{
+			return char.IsSurrogatePair(highChar, lowChar);
+		}
+		
+
+		
+		public static bool IsNCNameChar(char ch)
+        {
+			return XmlChar.IsNCNameChar(ch);
+		}
+		
+		public static bool IsStartNCNameChar(char ch)
+		{
+			return XmlChar.IsStartNCNameChar(ch);
+		}
+#endif		
 
 		internal static bool IsInvalid (char c, bool firstOnlyLetter)
 		{