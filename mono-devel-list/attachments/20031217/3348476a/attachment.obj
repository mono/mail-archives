Index: System.Data/DataRelationCollection.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data/DataRelationCollection.cs,v
retrieving revision 1.14
diff -u -r1.14 DataRelationCollection.cs
--- System.Data/DataRelationCollection.cs	1 Dec 2003 13:55:13 -0000	1.14
+++ System.Data/DataRelationCollection.cs	17 Dec 2003 19:57:08 -0000
@@ -246,8 +246,9 @@
 		#region Add Methods
 		private string GetNextDefaultRelationName ()
 		{
-			string defRelationName = "Relation";
-			for (int index = 1; Contains (defRelationName); ++index) {
+			int index = 1;
+			string defRelationName = "Relation" +index;
+			for (; Contains (defRelationName); ++index) {
 				defRelationName = "Relation" + index;
 			}
 			return defRelationName;
Index: System.Data/DataSet.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data/DataSet.cs,v
retrieving revision 1.53
diff -u -r1.53 DataSet.cs
--- System.Data/DataSet.cs	1 Dec 2003 13:55:13 -0000	1.53
+++ System.Data/DataSet.cs	17 Dec 2003 19:57:09 -0000
@@ -591,41 +591,41 @@
 
 		public void WriteXml (XmlWriter writer)
 		{
-			WriteXml (writer, XmlWriteMode.IgnoreSchema, false);
+			WriteXml (writer, XmlWriteMode.IgnoreSchema, true);
 		}
 
 		public void WriteXml (string filename, XmlWriteMode mode)
 		{
 			XmlWriter writer = new XmlTextWriter (filename, null);
-			WriteXml (writer, mode, false);
+			WriteXml (writer, mode, true);
 		}
 
 		public void WriteXml (Stream stream, XmlWriteMode mode)
 		{
 			XmlWriter writer = new XmlTextWriter (stream, null);
 
-			WriteXml (writer, mode, false);
+			WriteXml (writer, mode, true);
 		}
 
 		public void WriteXml (TextWriter writer, XmlWriteMode mode)
 		{
 			XmlWriter xwriter = new XmlTextWriter (writer);
-			WriteXml (xwriter, mode, false);
+			WriteXml (xwriter, mode, true);
 		}
 
 		public void WriteXml (XmlWriter writer, XmlWriteMode mode)
 		{
-			WriteXml (writer, mode, false);
+			WriteXml (writer, mode, true);
 		}
 		
-		public void WriteXml (Stream stream, XmlWriteMode mode, bool writePI)
+		private void WriteXml (Stream stream, XmlWriteMode mode, bool writePI)
 		{
 			XmlWriter writer = new XmlTextWriter (stream, null);
 			
 			WriteXml (writer, mode, writePI);
 		}
 
-		public void WriteXml (string fileName, XmlWriteMode mode, bool writePI)
+		private void WriteXml (string fileName, XmlWriteMode mode, bool writePI)
 		{
 			XmlWriter writer = new XmlTextWriter (fileName, null);
 			
@@ -634,14 +634,14 @@
 			writer.Close ();
 		}
 
-		public void WriteXml (TextWriter writer, XmlWriteMode mode, bool writePI)
+		private void WriteXml (TextWriter writer, XmlWriteMode mode, bool writePI)
 		{
 			XmlWriter xwriter = new XmlTextWriter (writer);
 			
 			WriteXml (xwriter, mode, writePI);
 		}
 
-		public void WriteXml (XmlWriter writer, XmlWriteMode mode, bool writePI)
+		private void WriteXml (XmlWriter writer, XmlWriteMode mode, bool writePI)
 		{
 			if (writePI && (writer.WriteState == WriteState.Start))
 				writer.WriteStartDocument (true);
@@ -1133,8 +1133,7 @@
 			complex.Particle = choice;
 			choice.MaxOccursString = XmlConstants.Unbounded;
 			
-			//Write out schema for each table in order, providing it is not
-			//part of another table structure via a nested parent relationship
+			//Write out schema for each table in order
 			foreach (DataTable table in Tables)
 			{		
 				bool isTopLevel = true;
@@ -1153,8 +1152,95 @@
 				}
 			}
 			
-			//TODO - now add in the relationships as key and unique constraints etc
+			bool nameModifier = true;
+			foreach (DataRelation rel in Relations)
+			{
+				XmlSchemaUnique uniq = new XmlSchemaUnique();
+				XmlSchemaKeyref keyRef = new XmlSchemaKeyref();
+				ForeignKeyConstraint fkConst = rel.ChildKeyConstraint;
+				UniqueConstraint uqConst = rel.ParentKeyConstraint;
+								
+				if (nameModifier)
+				{
+					uniq.Name = uqConst.ConstraintName;
+					keyRef.Name = fkConst.ConstraintName;
+					keyRef.Refer = new XmlQualifiedName(uniq.Name);
+					XmlAttribute[] attrib = null;
+					if (rel.Nested)
+					{
+						attrib = new XmlAttribute [2];
+						attrib[0] = doc.CreateAttribute (XmlConstants.MsdataPrefix,  XmlConstants.IsNested, XmlConstants.MsdataNamespace);
+						attrib[0].Value = "true";
+		
+						attrib[1] = doc.CreateAttribute (XmlConstants.MsdataPrefix, XmlConstants.RelationName, XmlConstants.MsdataNamespace);
+						attrib[1].Value = rel.RelationName;
+					}
+					else
+					{
+						attrib = new XmlAttribute [1];
+						attrib[0] = doc.CreateAttribute (XmlConstants.MsdataPrefix, XmlConstants.RelationName, XmlConstants.MsdataNamespace);
+						attrib[0].Value = rel.RelationName;
+
+					}
+					keyRef.UnhandledAttributes = attrib;
+					nameModifier = false;
+				}
+				else
+				{
+					uniq.Name = rel.ParentTable.TableName+"_"+uqConst.ConstraintName;
+					keyRef.Name = rel.ChildTable.TableName+"_"+fkConst.ConstraintName;
+					keyRef.Refer = new XmlQualifiedName(uniq.Name);
+					XmlAttribute[] attrib;
+					if (rel.Nested)
+					{
+						attrib = new XmlAttribute [3];
+						attrib[0] = doc.CreateAttribute (XmlConstants.MsdataPrefix,  XmlConstants.ConstraintName, XmlConstants.MsdataNamespace);
+						attrib[0].Value = fkConst.ConstraintName;
+						attrib[1] = doc.CreateAttribute (XmlConstants.MsdataPrefix,  XmlConstants.IsNested, XmlConstants.MsdataNamespace);
+						attrib[1].Value = "true";
+		
+						attrib[2] = doc.CreateAttribute (XmlConstants.MsdataPrefix, XmlConstants.RelationName, XmlConstants.MsdataNamespace);
+						attrib[2].Value = rel.RelationName;
+					}
+					else
+					{
+						attrib = new XmlAttribute [2];
+						attrib[0] = doc.CreateAttribute (XmlConstants.MsdataPrefix,  XmlConstants.ConstraintName, XmlConstants.MsdataNamespace);
+						attrib[0].Value = fkConst.ConstraintName;
+						attrib[1] = doc.CreateAttribute (XmlConstants.MsdataPrefix, XmlConstants.RelationName, XmlConstants.MsdataNamespace);
+						attrib[1].Value = rel.RelationName;
 
+					}
+					keyRef.UnhandledAttributes = attrib;
+					attrib = new XmlAttribute [1];
+					attrib[0] = doc.CreateAttribute (XmlConstants.MsdataPrefix, XmlConstants.ConstraintName, XmlConstants.MsdataNamespace);
+					attrib[0].Value = uqConst.ConstraintName; 
+					uniq.UnhandledAttributes = attrib;
+				}
+
+				uniq.Selector = new XmlSchemaXPath();
+				uniq.Selector.XPath = ".//"+rel.ParentTable.TableName;
+				XmlSchemaXPath field;
+				foreach (DataColumn column in rel.ParentColumns)
+				{
+				 	field = new XmlSchemaXPath();
+					field.XPath = column.ColumnName;
+					uniq.Fields.Add(field);
+				}
+				
+				keyRef.Selector = new XmlSchemaXPath();
+				keyRef.Selector.XPath = ".//"+rel.ChildTable.TableName;
+				foreach (DataColumn column in rel.ChildColumns)
+				{
+				 	field = new XmlSchemaXPath();
+					field.XPath = column.ColumnName;
+					keyRef.Fields.Add(field);
+				}
+				
+				elem.Constraints.Add (uniq);
+				elem.Constraints.Add (keyRef);
+			}
+			
 			return schema;
 		}
 
@@ -1219,6 +1305,14 @@
 					}
 
 					seq.Items.Add (colElem);
+				}
+
+				foreach (DataRelation rel in table.ChildRelations)
+				{
+					if (rel.Nested)
+					{
+						seq.Items.Add(GetTableSchema (doc, rel.ChildTable));
+					}
 				}
 			}
 
Index: System.Data/UniqueConstraint.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data/UniqueConstraint.cs,v
retrieving revision 1.20
diff -u -r1.20 UniqueConstraint.cs
--- System.Data/UniqueConstraint.cs	19 Nov 2003 07:15:30 -0000	1.20
+++ System.Data/UniqueConstraint.cs	17 Dec 2003 19:57:09 -0000
@@ -492,13 +492,20 @@
 		}
 		
 		// generates a hash key for a given row based on the constraints columns.
+		[MonoTODO]
 		internal int CalcHashValue(DataRow row, bool ignoreCase)
 		{
 			object o;
 			int retVal = 0;
 			CaseInsensitiveHashCodeProvider ciProvider = null;
-			if (ignoreCase)
-				ciProvider = new CaseInsensitiveHashCodeProvider(_dataTable.Locale);
+			try{
+				if (ignoreCase)
+					ciProvider = new CaseInsensitiveHashCodeProvider(_dataTable.Locale);
+			}
+			catch (Exception e)
+			{
+				//TODO remove try catch block after CaseInsensitiveHashCodeProvider is implemented 
+			}
 			for (int i = 0; i < _dataColumns.Length; i++)
 			{
 				o = row[_dataColumns[i]];
Index: System.Data/XmlConstants.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data/XmlConstants.cs,v
retrieving revision 1.3
diff -u -r1.3 XmlConstants.cs
--- System.Data/XmlConstants.cs	22 Jul 2003 16:03:10 -0000	1.3
+++ System.Data/XmlConstants.cs	17 Dec 2003 19:57:09 -0000
@@ -61,6 +61,9 @@
 	public const string IsDataSet = "IsDataSet";
 	public const string Locale = "Locale";
 	public const string Ordinal = "Ordinal";
+	public const string IsNested = "IsNested";
+	public const string RelationName = "RelationName";
+	public const string ConstraintName = "ConstraintName";
 
 	public static XmlQualifiedName QnString = new XmlQualifiedName ("string", XmlSchema.Namespace);
 	public static XmlQualifiedName QnShort = new XmlQualifiedName ("short", XmlSchema.Namespace);
