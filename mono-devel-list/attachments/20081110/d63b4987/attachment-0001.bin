From 9c03af02c75c9cdef8d8a8bedb42753d6a88ae7f Mon Sep 17 00:00:00 2001
From: Cedric Vivier <cedricv@neonux.com>
Date: Mon, 10 Nov 2008 05:02:15 +0800
Subject: [PATCH] WIP on branch 'SIMD'
 2008-11-10  Cedric Vivier  <cedricv@neonux.com>

	* Mono.SIMD: Optimize non-accelerated bitwise-operations (| & ^).
---
 class/Mono.Simd/Mono.Simd/Vector16b.cs  |   30 +++++++++++++++---------------
 class/Mono.Simd/Mono.Simd/Vector16sb.cs |   30 +++++++++++++++---------------
 class/Mono.Simd/Mono.Simd/Vector4i.cs   |   30 ++++++++++++++++++++++++------
 class/Mono.Simd/Mono.Simd/Vector4ui.cs  |   30 ++++++++++++++++++++++++------
 class/Mono.Simd/Mono.Simd/Vector8s.cs   |   30 +++++++++++++++---------------
 class/Mono.Simd/Mono.Simd/Vector8us.cs  |   30 +++++++++++++++---------------
 6 files changed, 108 insertions(+), 72 deletions(-)

diff --git a/class/Mono.Simd/Mono.Simd/Vector16b.cs b/class/Mono.Simd/Mono.Simd/Vector16b.cs
index b327ada..e0b315c 100644
--- a/class/Mono.Simd/Mono.Simd/Vector16b.cs
+++ b/class/Mono.Simd/Mono.Simd/Vector16b.cs
@@ -97,11 +97,11 @@ namespace Mono.Simd
 		public static unsafe Vector16b operator & (Vector16b va, Vector16b vb)
 		{
 			Vector16b res = new Vector16b ();
-			byte *a = &va.v0;
-			byte *b = &vb.v0;
-			byte *c = &res.v0;
-			for (int i = 0; i < 16; ++i)
-				*c++ = (byte)(*a++ & *b++);
+			ulong *a = (ulong*) &va.v0;
+			ulong *b = (ulong*) &vb.v0;
+			ulong *c = (ulong*) &res.v0;
+			*c++ = (ulong)(*a++ & *b++);
+			*c = (ulong)(*a & *b);
 			return res;
 		}
 
@@ -109,11 +109,11 @@ namespace Mono.Simd
 		public static unsafe Vector16b operator | (Vector16b va, Vector16b vb)
 		{
 			Vector16b res = new Vector16b ();
-			byte *a = &va.v0;
-			byte *b = &vb.v0;
-			byte *c = &res.v0;
-			for (int i = 0; i < 16; ++i)
-				*c++ = (byte)(*a++ | *b++);
+			ulong *a = (ulong*) &va.v0;
+			ulong *b = (ulong*) &vb.v0;
+			ulong *c = (ulong*) &res.v0;
+			*c++ = (ulong)(*a++ | *b++);
+			*c = (ulong)(*a | *b);
 			return res;
 		}
 
@@ -121,11 +121,11 @@ namespace Mono.Simd
 		public static unsafe Vector16b operator ^ (Vector16b va, Vector16b vb)
 		{
 			Vector16b res = new Vector16b ();
-			byte *a = &va.v0;
-			byte *b = &vb.v0;
-			byte *c = &res.v0;
-			for (int i = 0; i < 16; ++i)
-				*c++ = (byte)(*a++ ^ *b++);
+			ulong *a = (ulong*) &va.v0;
+			ulong *b = (ulong*) &vb.v0;
+			ulong *c = (ulong*) &res.v0;
+			*c++ = (ulong)(*a++ ^ *b++);
+			*c = (ulong)(*a ^ *b);
 			return res;
 		}
 
diff --git a/class/Mono.Simd/Mono.Simd/Vector16sb.cs b/class/Mono.Simd/Mono.Simd/Vector16sb.cs
index 1f9f000..1b2a89f 100644
--- a/class/Mono.Simd/Mono.Simd/Vector16sb.cs
+++ b/class/Mono.Simd/Mono.Simd/Vector16sb.cs
@@ -98,11 +98,11 @@ namespace Mono.Simd
 		public static unsafe Vector16sb operator & (Vector16sb va, Vector16sb vb)
 		{
 			Vector16sb res = new Vector16sb ();
-			sbyte *a = &va.v0;
-			sbyte *b = &vb.v0;
-			sbyte *c = &res.v0;
-			for (int i = 0; i < 16; ++i)
-				*c++ = (sbyte)(*a++ & *b++);
+			ulong *a = (ulong*) &va.v0;
+			ulong *b = (ulong*) &vb.v0;
+			ulong *c = (ulong*) &res.v0;
+			*c++ = (ulong)(*a++ & *b++);
+			*c = (ulong)(*a & *b);
 			return res;
 		}
 
@@ -110,11 +110,11 @@ namespace Mono.Simd
 		public static unsafe Vector16sb operator | (Vector16sb va, Vector16sb vb)
 		{
 			Vector16sb res = new Vector16sb ();
-			sbyte *a = &va.v0;
-			sbyte *b = &vb.v0;
-			sbyte *c = &res.v0;
-			for (int i = 0; i < 16; ++i)
-				*c++ = (sbyte)((uint)*a++ | (uint)*b++);
+			ulong *a = (ulong*) &va.v0;
+			ulong *b = (ulong*) &vb.v0;
+			ulong *c = (ulong*) &res.v0;
+			*c++ = (ulong)(*a++ | *b++);
+			*c = (ulong)(*a | *b);
 			return res;
 		}
 
@@ -122,11 +122,11 @@ namespace Mono.Simd
 		public static unsafe Vector16sb operator ^ (Vector16sb va, Vector16sb vb)
 		{
 			Vector16sb res = new Vector16sb ();
-			sbyte *a = &va.v0;
-			sbyte *b = &vb.v0;
-			sbyte *c = &res.v0;
-			for (int i = 0; i < 16; ++i)
-				*c++ = (sbyte)(*a++ ^ *b++);
+			ulong *a = (ulong*) &va.v0;
+			ulong *b = (ulong*) &vb.v0;
+			ulong *c = (ulong*) &res.v0;
+			*c++ = (ulong)(*a++ ^ *b++);
+			*c = (ulong)(*a ^ *b);
 			return res;
 		}
 
diff --git a/class/Mono.Simd/Mono.Simd/Vector4i.cs b/class/Mono.Simd/Mono.Simd/Vector4i.cs
index 51ecc28..fb8133c 100644
--- a/class/Mono.Simd/Mono.Simd/Vector4i.cs
+++ b/class/Mono.Simd/Mono.Simd/Vector4i.cs
@@ -81,21 +81,39 @@ namespace Mono.Simd
 		}
 
 		[Acceleration (AccelMode.SSE2)]
-		public static Vector4i operator & (Vector4i v1, Vector4i v2)
+		public static unsafe Vector4i operator & (Vector4i v1, Vector4i v2)
 		{
-			return new Vector4i (v1.x & v2.x, v1.y & v2.y, v1.z & v2.z, v1.w & v2.w);
+			Vector4i res = new Vector4i ();
+			ulong *a = (ulong*) &v1.x;
+			ulong *b = (ulong*) &v2.x;
+			ulong *c = (ulong*) &res.x;
+			*c++ = (ulong)(*a++ & *b++);
+			*c = (ulong)(*a & *b);
+			return res;
 		}
 
 		[Acceleration (AccelMode.SSE2)]
-		public static Vector4i operator | (Vector4i v1, Vector4i v2)
+		public static unsafe Vector4i operator | (Vector4i v1, Vector4i v2)
 		{
-			return new Vector4i (v1.x | v2.x, v1.y | v2.y, v1.z | v2.z, v1.w | v2.w);
+			Vector4i res = new Vector4i ();
+			ulong *a = (ulong*) &v1.x;
+			ulong *b = (ulong*) &v2.x;
+			ulong *c = (ulong*) &res.x;
+			*c++ = (ulong)(*a++ | *b++);
+			*c = (ulong)(*a | *b);
+			return res;
 		}
 
 		[Acceleration (AccelMode.SSE2)]
-		public static Vector4i operator ^ (Vector4i v1, Vector4i v2)
+		public static unsafe Vector4i operator ^ (Vector4i v1, Vector4i v2)
 		{
-			return new Vector4i (v1.x ^ v2.x, v1.y ^ v2.y, v1.z ^ v2.z, v1.w ^ v2.w);
+			Vector4i res = new Vector4i ();
+			ulong *a = (ulong*) &v1.x;
+			ulong *b = (ulong*) &v2.x;
+			ulong *c = (ulong*) &res.x;
+			*c++ = (ulong)(*a++ ^ *b++);
+			*c = (ulong)(*a ^ *b);
+			return res;
 		}
 
 		[Acceleration (AccelMode.SSE2)]
diff --git a/class/Mono.Simd/Mono.Simd/Vector4ui.cs b/class/Mono.Simd/Mono.Simd/Vector4ui.cs
index e06a0de..fd8bb8a 100644
--- a/class/Mono.Simd/Mono.Simd/Vector4ui.cs
+++ b/class/Mono.Simd/Mono.Simd/Vector4ui.cs
@@ -82,21 +82,39 @@ namespace Mono.Simd
 		}
 
 		[Acceleration (AccelMode.SSE2)]
-		public static Vector4ui operator & (Vector4ui v1, Vector4ui v2)
+		public static unsafe Vector4ui operator & (Vector4ui v1, Vector4ui v2)
 		{
-			return new Vector4ui (v1.x & v2.x, v1.y & v2.y, v1.z & v2.z, v1.w & v2.w);
+			Vector4ui res = new Vector4ui ();
+			ulong *a = (ulong*) &v1.x;
+			ulong *b = (ulong*) &v2.x;
+			ulong *c = (ulong*) &res.x;
+			*c++ = (ulong)(*a++ & *b++);
+			*c = (ulong)(*a & *b);
+			return res;
 		}
 
 		[Acceleration (AccelMode.SSE2)]
-		public static Vector4ui operator | (Vector4ui v1, Vector4ui v2)
+		public static unsafe Vector4ui operator | (Vector4ui v1, Vector4ui v2)
 		{
-			return new Vector4ui (v1.x | v2.x, v1.y | v2.y, v1.z | v2.z, v1.w | v2.w);
+			Vector4ui res = new Vector4ui ();
+			ulong *a = (ulong*) &v1.x;
+			ulong *b = (ulong*) &v2.x;
+			ulong *c = (ulong*) &res.x;
+			*c++ = (ulong)(*a++ | *b++);
+			*c = (ulong)(*a | *b);
+			return res;
 		}
 
 		[Acceleration (AccelMode.SSE2)]
-		public static Vector4ui operator ^ (Vector4ui v1, Vector4ui v2)
+		public static unsafe Vector4ui operator ^ (Vector4ui v1, Vector4ui v2)
 		{
-			return new Vector4ui (v1.x ^ v2.x, v1.y ^ v2.y, v1.z ^ v2.z, v1.w ^ v2.w);
+			Vector4ui res = new Vector4ui ();
+			ulong *a = (ulong*) &v1.x;
+			ulong *b = (ulong*) &v2.x;
+			ulong *c = (ulong*) &res.x;
+			*c++ = (ulong)(*a++ ^ *b++);
+			*c = (ulong)(*a ^ *b);
+			return res;
 		}
 
 		[Acceleration (AccelMode.SSE2)]
diff --git a/class/Mono.Simd/Mono.Simd/Vector8s.cs b/class/Mono.Simd/Mono.Simd/Vector8s.cs
index 934abd2..f6cc580 100644
--- a/class/Mono.Simd/Mono.Simd/Vector8s.cs
+++ b/class/Mono.Simd/Mono.Simd/Vector8s.cs
@@ -116,11 +116,11 @@ namespace Mono.Simd
 		public static unsafe Vector8s operator & (Vector8s va, Vector8s vb)
 		{
 			Vector8s res = new Vector8s ();
-			short *a = &va.v0;
-			short *b = &vb.v0;
-			short *c = &res.v0;
-			for (int i = 0; i < 8; ++i)
-				*c++ = (short)(*a++ & *b++);
+			ulong *a = (ulong*) &va.v0;
+			ulong *b = (ulong*) &vb.v0;
+			ulong *c = (ulong*) &res.v0;
+			*c++ = (ulong)(*a++ & *b++);
+			*c = (ulong)(*a & *b);
 			return res;
 		}
 
@@ -128,11 +128,11 @@ namespace Mono.Simd
 		public static unsafe Vector8s operator | (Vector8s va, Vector8s vb)
 		{
 			Vector8s res = new Vector8s ();
-			short *a = &va.v0;
-			short *b = &vb.v0;
-			short *c = &res.v0;
-			for (int i = 0; i < 8; ++i)
-				*c++ = (short)(*a++ | *b++);
+			ulong *a = (ulong*) &va.v0;
+			ulong *b = (ulong*) &vb.v0;
+			ulong *c = (ulong*) &res.v0;
+			*c++ = (ulong)(*a++ | *b++);
+			*c = (ulong)(*a | *b);
 			return res;
 		}
 
@@ -140,11 +140,11 @@ namespace Mono.Simd
 		public static unsafe Vector8s operator ^ (Vector8s va, Vector8s vb)
 		{
 			Vector8s res = new Vector8s ();
-			short *a = &va.v0;
-			short *b = &vb.v0;
-			short *c = &res.v0;
-			for (int i = 0; i < 8; ++i)
-				*c++ = (short)(*a++ ^ *b++);
+			ulong *a = (ulong*) &va.v0;
+			ulong *b = (ulong*) &vb.v0;
+			ulong *c = (ulong*) &res.v0;
+			*c++ = (ulong)(*a++ ^ *b++);
+			*c = (ulong)(*a ^ *b);
 			return res;
 		}
 
diff --git a/class/Mono.Simd/Mono.Simd/Vector8us.cs b/class/Mono.Simd/Mono.Simd/Vector8us.cs
index f60890d..e2fb5c8 100644
--- a/class/Mono.Simd/Mono.Simd/Vector8us.cs
+++ b/class/Mono.Simd/Mono.Simd/Vector8us.cs
@@ -121,11 +121,11 @@ namespace Mono.Simd
 		public static unsafe Vector8us operator & (Vector8us va, Vector8us vb)
 		{
 			Vector8us res = new Vector8us ();
-			ushort *a = &va.v0;
-			ushort *b = &vb.v0;
-			ushort *c = &res.v0;
-			for (int i = 0; i < 8; ++i)
-				*c++ = (ushort)(*a++ & *b++);
+			ulong *a = (ulong*) &va.v0;
+			ulong *b = (ulong*) &vb.v0;
+			ulong *c = (ulong*) &res.v0;
+			*c++ = (ulong)(*a++ & *b++);
+			*c = (ulong)(*a & *b);
 			return res;
 		}
 
@@ -133,11 +133,11 @@ namespace Mono.Simd
 		public static unsafe Vector8us operator | (Vector8us va, Vector8us vb)
 		{
 			Vector8us res = new Vector8us ();
-			ushort *a = &va.v0;
-			ushort *b = &vb.v0;
-			ushort *c = &res.v0;
-			for (int i = 0; i < 8; ++i)
-				*c++ = (ushort)(*a++ | *b++);
+			ulong *a = (ulong*) &va.v0;
+			ulong *b = (ulong*) &vb.v0;
+			ulong *c = (ulong*) &res.v0;
+			*c++ = (ulong)(*a++ | *b++);
+			*c = (ulong)(*a | *b);
 			return res;
 		}
 
@@ -145,11 +145,11 @@ namespace Mono.Simd
 		public static unsafe Vector8us operator ^ (Vector8us va, Vector8us vb)
 		{
 			Vector8us res = new Vector8us ();
-			ushort *a = &va.v0;
-			ushort *b = &vb.v0;
-			ushort *c = &res.v0;
-			for (int i = 0; i < 8; ++i)
-				*c++ = (ushort)(*a++ ^ *b++);
+			ulong *a = (ulong*) &va.v0;
+			ulong *b = (ulong*) &vb.v0;
+			ulong *c = (ulong*) &res.v0;
+			*c++ = (ulong)(*a++ ^ *b++);
+			*c = (ulong)(*a ^ *b);
 			return res;
 		}
 
-- 
1.6.0.3
