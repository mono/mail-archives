Index: eglib/ChangeLog
===================================================================
--- eglib/ChangeLog	(revision 109347)
+++ eglib/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2008-08-01  Bill Holmes  <billholmes54@gmail.com>
+
+	* src/glib.h : Changing the allocation routines to return null if 0 size is
+	  passed in.
+
+	Contributed under MIT/X11 license.
+
 2008-06-16  Zoltan Varga  <vargaz@gmail.com>
 
 	* src/vasprintf.c (vasprintf): Applied patch from Michail Ushakov 
Index: eglib/src/glib.h
===================================================================
--- eglib/src/glib.h	(revision 109347)
+++ eglib/src/glib.h	(working copy)
@@ -101,18 +101,20 @@
 /*
  * Allocation
  */
-#define g_new(type,size)        ((type *) malloc (sizeof (type) * (size)))
-#define g_new0(type,size)       ((type *) calloc (sizeof (type), (size)))
+#define g_free                  free
+static inline gpointer g_realloc (gpointer obj, gsize size) { if (!size) {g_free (obj); return 0;} return  realloc (obj, size);}
+static inline gpointer g_malloc (gsize x) {if (x) return malloc (x); else return 0;}
+static inline gpointer g_malloc0 (gsize x) {if (x) return calloc(1,x); else return 0;}
+#define g_try_malloc(x)         g_malloc(x)
+#define g_try_realloc(obj,size) g_realloc((obj),(size))
+
+#define g_new(type,size)        ((type *) g_malloc (sizeof (type) * (size)))
+#define g_new0(type,size)       ((type *) g_malloc0 (sizeof (type)* (size)))
 #define g_newa(type,size)       ((type *) alloca (sizeof (type) * (size)))
-#define g_realloc(obj,size)     realloc((obj), (size))
-#define g_malloc(x)             malloc(x)
-#define g_try_malloc(x)         malloc(x)
-#define g_try_realloc(obj,size) realloc((obj),(size))
-#define g_malloc0(x)            calloc(1,x)
+
 #define g_memmove(dest,src,len) memmove (dest, src, len)
-#define g_renew(struct_type, mem, n_structs) realloc (mem, sizeof (struct_type) * n_structs)
+#define g_renew(struct_type, mem, n_structs) g_realloc (mem, sizeof (struct_type) * n_structs)
 #define g_alloca(size)		alloca (size)
-#define g_free                  free
 
 gpointer g_memdup (gconstpointer mem, guint byte_size);
 gchar   *g_strdup (const gchar *str);