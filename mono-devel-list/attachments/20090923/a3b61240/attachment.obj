Index: HttpRuntime.cs
===================================================================
--- HttpRuntime.cs	(revision 142542)
+++ HttpRuntime.cs	(working copy)
@@ -785,5 +785,18 @@
 				return trace_manager;
 			}
 		}
+
+#if NET_2_0
+		// 
+		// This property is only supported running under IIS 7.0 and currently it is not possible to have
+		// the mono runtime running as the core of IIS 7.0, so it just returns false to complete API calls
+		// that may be calling it.
+		//
+		public static bool UsingIntegratedPipeline {
+			get {
+				return false;
+			}
+		}
+#endif
 	}
 }
Index: HttpServerUtility.cs
===================================================================
--- HttpServerUtility.cs	(revision 142542)
+++ HttpServerUtility.cs	(working copy)
@@ -407,5 +407,30 @@
 			[AspNetHostingPermission (SecurityAction.Demand, Level = AspNetHostingPermissionLevel.Medium)]
 			set { context.ConfigTimeout = TimeSpan.FromSeconds (value); }
 		}
+
+#if NET_2_0
+		public void TransferRequest(string path) {
+			this.TransferRequest(path, false, null, null);
+		}
+
+		public void TransferRequest(string path, bool preserveForm) {
+			this.TransferRequest(path, preserveForm, null, null);
+		}
+
+		// 
+		// This method is only supported running under IIS 7.0 and currently it is not possible to have
+		// the mono runtime running as the core of IIS 7.0, so it will always throw a PlatformNotSupportedException
+		//
+		public void TransferRequest(string path, bool preserveForm, string method, NameValueCollection headers) {
+			if (!HttpRuntime.UseIntegratedPipeline)
+				throw new PlatformNotSupportedException("The request requires IIS 7.0 running in integrated mode.");
+
+			if (context == null)
+				throw new HttpException("The server is not available to handle the request.");
+
+			if (path == null)
+				throw new ArgumentNullException("path");
+		}
+#endif
 	}
 }