Index: tests/ChangeLog
===================================================================
--- tests/ChangeLog	(revision 126049)
+++ tests/ChangeLog	(working copy)
@@ -1,3 +1,15 @@
+2009-02-07  Scott Peterson  <lunchtimemama@gmail.com>
+
+	This patch is contributed under the MIT/X11 license.
+
+	* gtest-variance-3.cs: Added test for covariance delegates.
+
+	* gtest-variance-4.cs: Added test for contravariant delegates.
+
+	* gtest-variance-5.cs: Added more complete interface variance test.
+
+	* known-issues-gmcs: Added the 3 new tests to the ignroe list.
+
 2009-02-04  Scott Peterson  <lunchtimemama@gmail.com>
 
 	This patch is contributed under the MIT/X11 license.
Index: tests/gtest-variance-4.cs
===================================================================
--- tests/gtest-variance-4.cs	(revision 0)
+++ tests/gtest-variance-4.cs	(revision 0)
@@ -0,0 +1,21 @@
+// Compiler options: -langversion:future
+
+delegate int Foo<in T> (T t);
+
+public class Test
+{
+	static int Main ()
+	{
+		string message = "Hello World!";
+		Foo<object> foo = (o) => o.GetHashCode ();
+		if (Bar (foo, message) != message.GetHashCode ())
+			return 1;
+
+		return 0;
+	}
+
+	static int Bar (Foo<string> foo, string s)
+	{
+		return foo(s);
+	}
+}
Index: tests/known-issues-gmcs
===================================================================
--- tests/known-issues-gmcs	(revision 126049)
+++ tests/known-issues-gmcs	(working copy)
@@ -10,5 +10,8 @@
 gtest-230.cs
 gtest-437.cs
 
-gtest-variance-1.cs IGNORE	# Runtime support for variance is not yet in place
-gtest-variance-2.cs IGNORE
+gtest-variance-1.cs IGNORE 	# Runtime support for variance is not yet in place
+gtest-variance-2.cs IGNORE 
+gtest-variance-3.cs IGNORE
+gtest-variance-4.cs IGNORE
+gtest-variance-5.cs IGNORE
Index: tests/gtest-variance-3.cs
===================================================================
--- tests/gtest-variance-3.cs	(revision 0)
+++ tests/gtest-variance-3.cs	(revision 0)
@@ -0,0 +1,21 @@
+// Compiler options: -langversion:future
+
+delegate T Foo<out T> ();
+
+public class Test
+{
+	static int Main ()
+	{
+		string message = "Hello World!";
+		Foo<string> foo = () => message;
+		if (Bar (foo) != message.GetHashCode ())
+			return 1;
+
+		return 0;
+	}
+
+	static int Bar (Foo<object> foo)
+	{
+		return foo().GetHashCode ();
+	}
+}
Index: tests/gtest-variance-5.cs
===================================================================
--- tests/gtest-variance-5.cs	(revision 0)
+++ tests/gtest-variance-5.cs	(revision 0)
@@ -0,0 +1,84 @@
+// Compiler options: -langversion:future
+
+interface ICovariant<out T>
+{
+	T Foo { get; }
+}
+
+interface IContravariant<in T>
+{
+	int Bar (T bar);
+}
+
+interface IBothVariants <out T1, in T2> : ICovariant<T1>, IContravariant<T2>
+{
+}
+
+interface IInvariant <T> : ICovariant<T>, IContravariant<T>
+{
+}
+
+class BothVariants <T1, T2> : IBothVariants <T1, T2>
+{
+	public BothVariants (T1 foo)
+	{
+		Foo = foo;
+	}
+
+	public T1 Foo { get; private set; }
+
+	public int Bar (T2 bar)
+	{
+		return bar.GetHashCode () ^ Foo.GetHashCode ();
+	}
+}
+
+class Invariant <T> : IInvariant<T> where T : new()
+{
+	public T Foo { get { return new T (); } }
+
+	public int Bar (T bar)
+	{
+		return bar.GetHashCode ();
+	}
+}
+
+class A
+{
+	public virtual string Fruit { get { return "Apple"; } }
+}
+
+class B : A
+{
+	public override string Fruit { get { return "Banana"; } }
+}
+
+class C : B
+{
+	public override string Fruit { get { return "Carrot which I know is not a fruit but you better shut up about it before I cut you"; } }
+}
+
+public class Test
+{
+	static int Main ()
+	{
+		var b = new B ();
+		var c = new C ();
+
+		IBothVariants<A, C> both = new BothVariants<B,B> (b);
+
+		if (both.Bar (c) != (b.GetHashCode () ^ c.GetHashCode ()))
+			return 1;
+
+		IInvariant<B> neither = new Invariant<B> ();
+		ICovariant<A> co = neither;
+		if (co.Foo.Fruit != "Banana")
+			return 2;
+
+		IContravariant<C> contra = neither;
+		if (contra.Bar (c) != c.GetHashCode ())
+			return 3;
+
+		return 0;
+	}
+}
Index: mcs/generic.cs
===================================================================
--- mcs/generic.cs	(revision 126049)
+++ mcs/generic.cs	(working copy)
@@ -1303,6 +1303,42 @@
 			return ConstraintChecker.CheckConstraints (ec, open_type, gen_params, args.Arguments, loc);
 		}
 
+		static bool IsVariant (Type type)
+		{
+			return (type.GenericParameterAttributes & GenericParameterAttributes.VarianceMask) != 0;
+		}
+	
+		static bool IsCovariant (Type type)
+		{
+			return (type.GenericParameterAttributes & GenericParameterAttributes.Covariant) != 0;
+		}
+	
+		static bool IsContravariant (Type type)
+		{
+			return (type.GenericParameterAttributes & GenericParameterAttributes.Contravariant) != 0;
+		}
+	
+		public bool VerifyVariantTypeParameters ()
+		{
+			for (int i = 0; i < args.Count; i++) {
+				Type argument = args.Arguments[i];
+				if (argument.IsGenericParameter && IsVariant (argument)) {
+					if (IsContravariant (argument) && !IsContravariant (gen_params[i])) {
+						Report.Error (-34, loc, "Contravariant type parameters can only be used " +
+				              "as type arguments in contravariant positions");
+						return false;
+					}
+					else if (IsCovariant (argument) && !IsCovariant (gen_params[i])) {
+						Report.Error (-35, loc, "Covariant type parameters can only be used " +
+				              "as type arguments in covariant positions");
+						return false;
+					}
+				}
+			}
+			return true;
+		}
+
+		
 		public override bool CheckAccessLevel (DeclSpace ds)
 		{
 			return ds.CheckAccessLevel (open_type);
Index: mcs/typemanager.cs
===================================================================
--- mcs/typemanager.cs	(revision 126049)
+++ mcs/typemanager.cs	(working copy)
@@ -2146,31 +2146,6 @@
 		return false;
 	}
 
-	public static bool VerifyNoVariantTypeParameters (Type type, Location loc)
-	{
-#if GMCS_SOURCE
-		if (type != null && type.IsGenericType) {
-			foreach (Type t in type.GetGenericArguments ()) {
-				if (t.IsGenericParameter) {
-					if ((t.GenericParameterAttributes & GenericParameterAttributes.Contravariant) != 0) {
-						Report.Error (-34, loc, "Contravariant type parameters can only be used " +
-						              "as input arguments to a method");
-						return false;
-					}
-					if ((t.GenericParameterAttributes & GenericParameterAttributes.Covariant) != 0) {
-						Report.Error (-35, loc, "Covariant type parameters can only be used as return types " +
-						              "or in interface inheritance");
-						return false;
-					}
-				} else if (!VerifyNoVariantTypeParameters (t, loc)) {
-					return false;
-				}
-			}
-		}
-#endif
-		return true;
-	}
-
 	public static bool IsVariantOf (Type type1, Type type2)
 	{
 #if GMCS_SOURCE
Index: mcs/parameter.cs
===================================================================
--- mcs/parameter.cs	(revision 126049)
+++ mcs/parameter.cs	(working copy)
@@ -390,10 +390,6 @@
 				}
 				return parameter_type;
 			}
-
-			if (!TypeManager.VerifyNoVariantTypeParameters (parameter_type, Location)) {
-				return null;
-			}
 #endif
 
 			if ((parameter_type.Attributes & Class.StaticClassAttribute) == Class.StaticClassAttribute) {
Index: mcs/ChangeLog
===================================================================
--- mcs/ChangeLog	(revision 126049)
+++ mcs/ChangeLog	(working copy)
@@ -1,3 +1,21 @@
+2009-02-06  Scott Peterson  <lunchtimemama@gmail.com>
+
+	Contributed under the MIT/X11 license.
+
+	* generic.cs: Added VerifyVariantTypeParameters which performs new
+	variance verification logic. The old logic, based on the spec, was
+	wrong because the spec is full of LIES!
+
+	* generic-mcs.cs: Stubbed out the VerifyVariantTypeParameters method.
+
+	*typemanager.cs: Moved variance verification logic to GenericTypeExpr.
+
+	* class.cs:
+	* ecore.cs: Added calls to the new variance verification logic.
+
+	* parameter.cs:
+	* delegate.cs: Removed calls to the old variance verification logic.
+
 2009-02-06  Marek Safar  <marek.safar@gmail.com>
 
 	* delegate.cs: Use cached Invoke method directly.
Index: mcs/ecore.cs
===================================================================
--- mcs/ecore.cs	(revision 126049)
+++ mcs/ecore.cs	(working copy)
@@ -294,11 +294,12 @@
 
 				// TODO: silent flag is ignored
 				ct.CheckConstraints (ec);
+				ct.VerifyVariantTypeParameters ();
 			}
 
 			return te;
 		}
-
+	
 		public TypeExpr ResolveAsBaseTerminal (IResolveContext ec, bool silent)
 		{
 			int errors = Report.Errors;
Index: mcs/class.cs
===================================================================
--- mcs/class.cs	(revision 126049)
+++ mcs/class.cs	(working copy)
@@ -1292,16 +1292,8 @@
 
 					GenericTypeExpr ct = iface as GenericTypeExpr;
 					if (ct != null) {
-						if (!ct.CheckConstraints (this))
+						if (!ct.CheckConstraints (this) || !ct.VerifyVariantTypeParameters ())
 							return false;
-#if GMCS_SOURCE
-						foreach (Type t in ct.TypeArguments.Arguments) {
-							if (t.IsGenericParameter && (t.GenericParameterAttributes & GenericParameterAttributes.Contravariant) != 0) {
-								Report.Error (-39, ct.Location, "Contravariant type parameters cannot be used " +
-								              "as arguments in interface inheritance");
-							}
-						}
-#endif
 					}
 				}
 			}
@@ -5350,10 +5342,6 @@
 			TypeExpr te = type_name.ResolveAsTypeTerminal (rc, false);
 			if (te == null)
 				return false;
-
-			if (!TypeManager.VerifyNoVariantTypeParameters (te.Type, te.Location)) {
-				return false;
-			}
 			
 			//
 			// Replace original type name, error reporting can use fully resolved name
Index: mcs/delegate.cs
===================================================================
--- mcs/delegate.cs	(revision 126049)
+++ mcs/delegate.cs	(working copy)
@@ -230,10 +230,6 @@
 				return false;
 			}
 
-			if (!TypeManager.VerifyNoVariantTypeParameters (ret_type, ReturnType.Location)) {
-				return false;
-			}
-
 #if GMCS_SOURCE
 			if (ret_type.IsGenericParameter && (ret_type.GenericParameterAttributes & GenericParameterAttributes.Contravariant) != 0) {
 				Report.Error (-33, Location, "Contravariant type parameters can only be used in input positions");
Index: mcs/generic-mcs.cs
===================================================================
--- mcs/generic-mcs.cs	(revision 126049)
+++ mcs/generic-mcs.cs	(working copy)
@@ -258,6 +258,11 @@
 		{
 			throw new NotImplementedException ();
 		}
+
+		public bool VerifyVariantTypeParameters ()
+		{
+			throw new NotImplementedException ();
+		}
 	}
 
 	public class GenericMethod : DeclSpace
Index: errors/gcs8034-3.cs
===================================================================
--- errors/gcs8034-3.cs	(revision 126049)
+++ errors/gcs8034-3.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8034: Contravariant type parameters can only be used as input arguments to a method
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
 // Line: 11
 // Compiler options: -langversion:future
 
Index: errors/gcs8034-15.cs
===================================================================
--- errors/gcs8034-15.cs	(revision 0)
+++ errors/gcs8034-15.cs	(revision 0)
@@ -0,0 +1,11 @@
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
+// Line: 9
+// Compiler options: -langversion:future
+
+interface A<out T>
+{
+}
+
+interface B<in T> : A<T>
+{
+}
Index: errors/gcs8035-14.cs
===================================================================
--- errors/gcs8035-14.cs	(revision 0)
+++ errors/gcs8035-14.cs	(revision 0)
@@ -0,0 +1,11 @@
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
+// Line: 9
+// Compiler options: -langversion:future
+
+interface A<T>
+{
+}
+
+interface B<out T> : A<T>
+{
+}
Index: errors/gcs8035-5.cs
===================================================================
--- errors/gcs8035-5.cs	(revision 126049)
+++ errors/gcs8035-5.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8035: Covariant type parameters can only be used as return types or in interface inheritance
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
 // Line: 11
 // Compiler options: -langversion:future
 
Index: errors/gcs8034-7.cs
===================================================================
--- errors/gcs8034-7.cs	(revision 126049)
+++ errors/gcs8034-7.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8034: Contravariant type parameters can only be used as input arguments to a method
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
 // Line: 9
 // Compiler options: -langversion:future
 
Index: errors/gcs8034-10.cs
===================================================================
--- errors/gcs8034-10.cs	(revision 126049)
+++ errors/gcs8034-10.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8034: Contravariant type parameters can only be used as input arguments to a method
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
 // Line: 9
 // Compiler options: -langversion:future
 
Index: errors/gcs8035-9.cs
===================================================================
--- errors/gcs8035-9.cs	(revision 126049)
+++ errors/gcs8035-9.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8035: Covariant type parameters can only be used as return types or in interface inheritance
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
 // Line: 9
 // Compiler options: -langversion:future
 
Index: errors/gcs8035.cs
===================================================================
--- errors/gcs8035.cs	(revision 126049)
+++ errors/gcs8035.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8035: Covariant type parameters can only be used as return types or in interface inheritance
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
 // Line: 11
 // Compiler options: -langversion:future
 
Index: errors/gcs8034-2.cs
===================================================================
--- errors/gcs8034-2.cs	(revision 126049)
+++ errors/gcs8034-2.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8034: Contravariant type parameters can only be used as input arguments to a method
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
 // Line: 11
 // Compiler options: -langversion:future
 
Index: errors/gcs8034-14.cs
===================================================================
--- errors/gcs8034-14.cs	(revision 0)
+++ errors/gcs8034-14.cs	(revision 0)
@@ -0,0 +1,11 @@
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
+// Line: 9
+// Compiler options: -langversion:future
+
+interface A<T>
+{
+}
+
+interface B<in T> : A<T>
+{
+}
Index: errors/gcs8035-13.cs
===================================================================
--- errors/gcs8035-13.cs	(revision 0)
+++ errors/gcs8035-13.cs	(revision 0)
@@ -0,0 +1,12 @@
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
+// Line: 11
+// Compiler options: -langversion:future
+
+interface A<in T>
+{
+}
+
+interface B<out T>
+{
+	void C(A<T> a);
+}
Index: errors/gcs8039.cs
===================================================================
--- errors/gcs8039.cs	(revision 126049)
+++ errors/gcs8039.cs	(working copy)
@@ -1,11 +0,0 @@
-// CS8039: Contravariant type parameters cannot be used as arguments in interface inheritance
-// Line: 9
-// Compiler options: -langversion:future
-
-interface A<T>
-{
-}
-
-interface B<in T> : A<T>
-{
-}
Index: errors/gcs8035-4.cs
===================================================================
--- errors/gcs8035-4.cs	(revision 126049)
+++ errors/gcs8035-4.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8035: Covariant type parameters can only be used as return types or in interface inheritance
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
 // Line: 11
 // Compiler options: -langversion:future
 
Index: errors/gcs8034-6.cs
===================================================================
--- errors/gcs8034-6.cs	(revision 126049)
+++ errors/gcs8034-6.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8034: Contravariant type parameters can only be used as input arguments to a method
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
 // Line: 11
 // Compiler options: -langversion:future
 
Index: errors/gcs8035-8.cs
===================================================================
--- errors/gcs8035-8.cs	(revision 126049)
+++ errors/gcs8035-8.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8035: Covariant type parameters can only be used as return types or in interface inheritance
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
 // Line: 9
 // Compiler options: -langversion:future
 
Index: errors/gcs8034.cs
===================================================================
--- errors/gcs8034.cs	(revision 126049)
+++ errors/gcs8034.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8034: Contravariant type parameters can only be used as input arguments to a method
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
 // Line: 11
 // Compiler options: -langversion:future
 
Index: errors/gcs8034-13.cs
===================================================================
--- errors/gcs8034-13.cs	(revision 0)
+++ errors/gcs8034-13.cs	(revision 0)
@@ -0,0 +1,12 @@
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
+// Line: 11
+// Compiler options: -langversion:future
+
+interface A<out T>
+{
+}
+
+interface B<in T>
+{
+	void C(A<T> a);
+}
Index: errors/gcs8035-12.cs
===================================================================
--- errors/gcs8035-12.cs	(revision 0)
+++ errors/gcs8035-12.cs	(revision 0)
@@ -0,0 +1,12 @@
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
+// Line: 11
+// Compiler options: -langversion:future
+
+interface A<T>
+{
+}
+
+interface B<out T>
+{
+	void C(A<T> a);
+}
Index: errors/errors.txt
===================================================================
--- errors/errors.txt	(revision 126049)
+++ errors/errors.txt	(working copy)
@@ -95,10 +95,11 @@
 
 -33     Contravariant type parameters cannot be the return type.
 
--34     Contravariant type parameters cannot be used as type arguments.
+-34     Contravariant type parameters can only be used as type arguments in
+	contravariant positions.
 
--35     Covariant type parameters cannot be used as type arguments except
-        for inherited interfaces.
+-35     Covariant type parameters can only be used as type arguments in
+	covariant positions.
 
 -36     Variant type parameters can only be used with interface and
         delegate types.
@@ -107,8 +108,6 @@
 
 -38     Covariant type parameters cannot be used as method parameters.
 
--39     Contravariant type parameters cannot be used in interface inheritance.
-
 ----------
 
 Errors that we have allocated that will have corresponding errors in
Index: errors/gcs8035-3.cs
===================================================================
--- errors/gcs8035-3.cs	(revision 126049)
+++ errors/gcs8035-3.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8035: Covariant type parameters can only be used as return types or in interface inheritance
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
 // Line: 11
 // Compiler options: -langversion:future
 
Index: errors/ChangeLog
===================================================================
--- errors/ChangeLog	(revision 126049)
+++ errors/ChangeLog	(working copy)
@@ -1,3 +1,23 @@
+2009-02-06  Scott Peterson  <lunchtimemama@gmail.com>
+
+	This patch is contributed under the MIT/X11 license.
+
+	* errors.txt: Updated variance-related code messages and removed -39
+	which is no longer relevant.
+
+	* gcs8034-11.cs:
+	* gcs8034-12.cs:
+	* gcs8034-13.cs:
+	* gcs8034-14.cs:
+	* gcs8034-15.cs:
+	* gcs8035-11.cs:
+	* gcs8035-12.cs:
+	* gcs8035-13.cs:
+	* gcs8035-14.cs:
+	* gcs8035-15.cs: Added new error tests to cover new variance rules.
+
+	* gcs8039.cs: Removed. This case is now covered by -34.
+
 2009-02-04  Scott Peterson  <lunchtimemama@gmail.com>
 
 	This patch is contributed under the MIT/X11 license.
Index: errors/gcs8034-5.cs
===================================================================
--- errors/gcs8034-5.cs	(revision 126049)
+++ errors/gcs8034-5.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8034: Contravariant type parameters can only be used as input arguments to a method
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
 // Line: 11
 // Compiler options: -langversion:future
 
Index: errors/gcs8035-7.cs
===================================================================
--- errors/gcs8035-7.cs	(revision 126049)
+++ errors/gcs8035-7.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8035: Covariant type parameters can only be used as return types or in interface inheritance
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
 // Line: 9
 // Compiler options: -langversion:future
 
Index: errors/gcs8034-9.cs
===================================================================
--- errors/gcs8034-9.cs	(revision 126049)
+++ errors/gcs8034-9.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8034: Contravariant type parameters can only be used as input arguments to a method
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
 // Line: 9
 // Compiler options: -langversion:future
 
Index: errors/gcs8034-12.cs
===================================================================
--- errors/gcs8034-12.cs	(revision 0)
+++ errors/gcs8034-12.cs	(revision 0)
@@ -0,0 +1,12 @@
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
+// Line: 11
+// Compiler options: -langversion:future
+
+interface A<T>
+{
+}
+
+interface B<in T>
+{
+	void C(A<T> a);
+}
Index: errors/gcs8035-11.cs
===================================================================
--- errors/gcs8035-11.cs	(revision 0)
+++ errors/gcs8035-11.cs	(revision 0)
@@ -0,0 +1,12 @@
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
+// Line: 11
+// Compiler options: -langversion:future
+
+interface A<in T>
+{
+}
+
+interface B<out T>
+{
+	A<T> A { get; }
+}
Index: errors/gcs8035-2.cs
===================================================================
--- errors/gcs8035-2.cs	(revision 126049)
+++ errors/gcs8035-2.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8035: Covariant type parameters can only be used as return types or in interface inheritance
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
 // Line: 11
 // Compiler options: -langversion:future
 
Index: errors/gcs8034-4.cs
===================================================================
--- errors/gcs8034-4.cs	(revision 126049)
+++ errors/gcs8034-4.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8034: Contravariant type parameters can only be used as input arguments to a method
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
 // Line: 11
 // Compiler options: -langversion:future
 
Index: errors/gcs8035-15.cs
===================================================================
--- errors/gcs8035-15.cs	(revision 0)
+++ errors/gcs8035-15.cs	(revision 0)
@@ -0,0 +1,11 @@
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
+// Line: 9
+// Compiler options: -langversion:future
+
+interface A<in T>
+{
+}
+
+interface B<out T> : A<T>
+{
+}
Index: errors/gcs8035-6.cs
===================================================================
--- errors/gcs8035-6.cs	(revision 126049)
+++ errors/gcs8035-6.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8035: Covariant type parameters can only be used as return types or in interface inheritance
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
 // Line: 11
 // Compiler options: -langversion:future
 
Index: errors/gcs8034-8.cs
===================================================================
--- errors/gcs8034-8.cs	(revision 126049)
+++ errors/gcs8034-8.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8034: Contravariant type parameters can only be used as input arguments to a method
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
 // Line: 9
 // Compiler options: -langversion:future
 
Index: errors/gcs8034-11.cs
===================================================================
--- errors/gcs8034-11.cs	(revision 0)
+++ errors/gcs8034-11.cs	(revision 0)
@@ -0,0 +1,12 @@
+// CS8034: Contravariant type parameters can only be used as type arguments in contravariant positions
+// Line: 11
+// Compiler options: -langversion:future
+
+interface A<out T>
+{
+}
+
+interface B<in T>
+{
+	A<T> A { get; }
+}
Index: errors/gcs8035-10.cs
===================================================================
--- errors/gcs8035-10.cs	(revision 126049)
+++ errors/gcs8035-10.cs	(working copy)
@@ -1,4 +1,4 @@
-// CS8035: Covariant type parameters can only be used as return types or in interface inheritance
+// CS8035: Covariant type parameters can only be used as type arguments in covariant positions
 // Line: 9
 // Compiler options: -langversion:future
 