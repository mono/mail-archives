diff --git a/mcs/class/System/Microsoft.VisualBasic/ChangeLog b/mcs/class/System/Microsoft.VisualBasic/ChangeLog
index 9bffec8..0aaeca1 100644
--- a/mcs/class/System/Microsoft.VisualBasic/ChangeLog
+++ b/mcs/class/System/Microsoft.VisualBasic/ChangeLog
@@ -1,3 +1,7 @@
+2010-08-07 Alexander Corrado <alexander.corrado@gmail.com>
+
+	* VBCodeGenerator.cs: Implemented output of generic type arguments for CodeMethodReferenceExpression and CodeTypeReference.
+
 2009-04-22 Gonzalo Paniagua Javier <gonzalo@novell.com>
 
 	* VBCodeCompiler.cs: better error when there's a problem running the
diff --git a/mcs/class/System/Microsoft.VisualBasic/VBCodeGenerator.cs b/mcs/class/System/Microsoft.VisualBasic/VBCodeGenerator.cs
index 596746a..252ce7b 100644
--- a/mcs/class/System/Microsoft.VisualBasic/VBCodeGenerator.cs
+++ b/mcs/class/System/Microsoft.VisualBasic/VBCodeGenerator.cs
@@ -357,6 +357,8 @@ namespace Microsoft.VisualBasic
 				Output.Write ('.');
 			}
 			Output.Write (CreateEscapedIdentifier (expression.MethodName));
+			if (expression.TypeArguments.Count > 0)
+				Output.Write (GetTypeArguments (expression.TypeArguments));
 		}
 
 		protected override void GenerateEventReferenceExpression (CodeEventReferenceExpression expression)
@@ -1497,6 +1499,41 @@ namespace Microsoft.VisualBasic
 			if (constraint_count > 1)
 				Output.Write ("}");
 		}
+
+		string GetTypeArguments (CodeTypeReferenceCollection collection)
+		{
+			StringBuilder sb = new StringBuilder (" (Of ");
+			foreach (CodeTypeReference r in collection) {
+				sb.Append (GetTypeOutput (r));
+				sb.Append (", ");
+			}
+			sb.Length--;
+			sb [sb.Length - 1] = ')';
+			return sb.ToString ();
+		}
+
+		private void OutputTypeArguments (CodeTypeReferenceCollection typeArguments, StringBuilder sb, int count)
+		{
+			if (count == 0) {
+				return;
+			} else if (typeArguments.Count == 0) {
+				// generic type definition
+				sb.Append ("(Of )");
+				return;
+			}
+
+			sb.Append ("(Of ");
+
+			// write first type argument
+			sb.Append (GetTypeOutput (typeArguments[0]));
+			// subsequent type argument are prefixed by ', ' separator
+			for (int i = 1; i < count; i++) {
+				sb.Append (", ");
+				sb.Append (GetTypeOutput (typeArguments[i]));
+			}
+
+			sb.Append (')');
+		}
 #endif
 
 		protected override void OutputTypeNamePair (CodeTypeReference typeRef, String name)
@@ -1587,64 +1624,8 @@ namespace Microsoft.VisualBasic
 			arrayType = type.ArrayElementType;
 			if (arrayType != null)
 				output = GetTypeOutput (arrayType);
-			else {
-				switch (type.BaseType) {
-				case "System.DateTime":
-					output = "Date";
-					break;
-				case "System.Decimal":
-					output = "Decimal";
-					break;
-				case "System.Double":
-					output = "Double";
-					break;
-				case "System.Single":
-					output = "Single";
-					break;
-				case "System.Byte":
-					output = "Byte";
-					break;
-				case "System.Int32":
-					output = "Integer";
-					break;
-				case "System.Int64":
-					output = "Long";
-					break;
-				case "System.Int16":
-					output = "Short";
-					break;
-				case "System.Boolean":
-					output = "Boolean";
-					break;
-				case "System.Char":
-					output = "Char";
-					break;
-				case "System.String":
-					output = "String";
-					break;
-				case "System.Object":
-					output = "Object";
-					break;
-#if NET_2_0
-				case "System.SByte":
-					output = "SByte";
-					break;
-				case "System.UInt16":
-					output = "UShort";
-					break;
-				case "System.UInt32":
-					output = "UInteger";
-					break;
-				case "System.UInt64":
-					output = "ULong";
-					break;
-#endif
-				default:
-					output = type.BaseType.Replace('+', '.');
-					output = CreateEscapedIdentifier (output);
-					break;
-				}
-			}
+			else
+				output = DetermineTypeOutput (type);
 
 			int rank = type.ArrayRank;
 			if (rank > 0) {
@@ -1653,7 +1634,117 @@ namespace Microsoft.VisualBasic
 					output += ",";
 				output += ")";
 			}
+			return output;
+		}
 
+		private string DetermineTypeOutput (CodeTypeReference type)
+		{
+			string output = null;
+			string baseType = type.BaseType;
+
+			switch (baseType) {
+			case "System.DateTime":
+				output = "Date";
+				break;
+			case "System.Decimal":
+				output = "Decimal";
+				break;
+			case "System.Double":
+				output = "Double";
+				break;
+			case "System.Single":
+				output = "Single";
+				break;
+			case "System.Byte":
+				output = "Byte";
+				break;
+			case "System.Int32":
+				output = "Integer";
+				break;
+			case "System.Int64":
+				output = "Long";
+				break;
+			case "System.Int16":
+				output = "Short";
+				break;
+			case "System.Boolean":
+				output = "Boolean";
+				break;
+			case "System.Char":
+				output = "Char";
+				break;
+			case "System.String":
+				output = "String";
+				break;
+			case "System.Object":
+				output = "Object";
+				break;
+#if NET_2_0
+			case "System.SByte":
+				output = "SByte";
+				break;
+			case "System.UInt16":
+				output = "UShort";
+				break;
+			case "System.UInt32":
+				output = "UInteger";
+				break;
+			case "System.UInt64":
+				output = "ULong";
+				break;
+#endif
+			default:
+				StringBuilder sb = new StringBuilder (baseType.Length);
+				if (type.Options == CodeTypeReferenceOptions.GlobalReference) {
+					sb.Append ("Global.");
+				}
+
+				int lastProcessedChar = 0;
+				for (int i = 0; i < baseType.Length; i++) {
+					char currentChar = baseType[i];
+					if (currentChar != '+' && currentChar != '.') {
+						if (currentChar == '`') {
+							sb.Append (CreateEscapedIdentifier (baseType.Substring (
+								lastProcessedChar, i - lastProcessedChar)));
+							// skip ` character
+							i++;
+							// determine number of type arguments to output
+							int end = i;
+							while (end < baseType.Length && Char.IsDigit (baseType [end]))
+								end++;
+							int typeArgCount = Int32.Parse (baseType.Substring (i, end - i));
+							// output type arguments
+							OutputTypeArguments (type.TypeArguments, sb, typeArgCount);
+							// skip type argument indicator
+							i = end;
+							// if next character is . or +, then append .
+							if ((i < baseType.Length) && ((baseType[i] == '+') || (baseType[i] == '.'))) {
+								sb.Append ('.');
+								// skip character that we just processed
+								i++;
+							}
+							// save postion of last processed character
+							lastProcessedChar = i;
+						}
+					} else {
+						sb.Append (CreateEscapedIdentifier (baseType.Substring (
+							lastProcessedChar, i - lastProcessedChar)));
+						sb.Append ('.');
+						// skip separator
+						i++;
+						// save postion of last processed character
+						lastProcessedChar = i;
+					}
+				}
+
+				// add characters that have not yet been processed
+				if (lastProcessedChar < baseType.Length) {
+					sb.Append (CreateEscapedIdentifier (baseType.Substring (lastProcessedChar)));
+				}
+
+				output = sb.ToString ();
+				break;
+			}
 			return output;
 		}
 