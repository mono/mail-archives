Index: ChangeLog
from  Raja R Harinath  <rharinath@novell.com>

	* statement.cs (Block.Block): Implicit blocks share
	'child_variable_names' fields with parent blocks.
	(Block.AddChildVariableNames): Remove.
	(Block.AddVariable): Mark variable as "used by a child block" in
	every surrounding block.
	* ecore.cs (SimpleName.SimpleNameResolve): If the name has already
	been used in a child block, complain about violation of "Invariant
	meaning in blocks" rule.
	* cs-parser.jay (declare_local_variables): Don't use
	AddChildVariableNames.
	(foreach_statement): Don't create an implicit block: 'foreach'
	introduces a scope.

Index: cs-parser.jay
===================================================================
RCS file: /cvs/public/mcs/mcs/cs-parser.jay,v
retrieving revision 1.290
diff -u -r1.290 cs-parser.jay
--- cs-parser.jay 21 Apr 2004 12:32:56 -0000 1.290
+++ cs-parser.jay 22 Apr 2004 08:08:25 -0000
@@ -3460,7 +3460,7 @@
 	  {
 		oob_stack.Push (current_block);
 
-		Block foreach_block = new Block (current_block, Block.Flags.Implicit);
+		Block foreach_block = new Block (current_block);
 		LocalVariableReference v = null;
 		Location l = lexer.Location;
 		LocalInfo vi;
@@ -4080,10 +4080,9 @@
 	//
 	// int j = 1;  int k = j + 1;
 	//
-	if (current_block.Used) {
+	if (current_block.Used)
 		implicit_block = new Block (current_block, Block.Flags.Implicit, loc, Location.Null);
-		implicit_block.AddChildVariableNames (current_block);
-	} else
+	else
 		implicit_block = current_block;
 
 	foreach (VariableDeclaration decl in variable_declarators){
Index: ecore.cs
===================================================================
RCS file: /cvs/public/mcs/mcs/ecore.cs,v
retrieving revision 1.267
diff -u -r1.267 ecore.cs
--- ecore.cs 22 Apr 2004 00:04:52 -0000 1.267
+++ ecore.cs 22 Apr 2004 08:08:25 -0000
@@ -2047,6 +2047,11 @@
 			//
 			Block current_block = ec.CurrentBlock;
 			if (current_block != null){
+				if (is_base && current_block.IsVariableNameUsedInChildBlock(Name)) {
+					Report.Error (135, Location, "'" + Name + "' has a different meaning in a child block");
+					return null;
+				}
+
 				LocalInfo vi = current_block.GetLocalInfo (Name);
 				if (vi != null){
 					Expression var;
Index: statement.cs
===================================================================
RCS file: /cvs/public/mcs/mcs/statement.cs,v
retrieving revision 1.242
diff -u -r1.242 statement.cs
--- statement.cs 24 Mar 2004 03:35:19 -0000 1.242
+++ statement.cs 22 Apr 2004 08:08:26 -0000
@@ -1181,6 +1181,14 @@
 			this.loc = start;
 			this_id = id++;
 			statements = new ArrayList ();
+
+			if (parent != null && Implicit) {
+				if (parent.child_variable_names == null)
+					parent.child_variable_names = new Hashtable();
+				// share with parent
+				child_variable_names = parent.child_variable_names;
+			}
+				
 		}
 
 		public Block CreateSwitchBlock (Location start)
@@ -1305,28 +1313,6 @@
 		}
 
 		// <summary>
-		//   Marks all variables from block @block and all its children as being
-		//   used in a child block.
-		// </summary>
-		public void AddChildVariableNames (Block block)
-		{
-			if (block.Variables != null) {
-				foreach (string name in block.Variables.Keys)
-					AddChildVariableName (name);
-			}
-
-			if (block.children != null) {
-				foreach (Block child in block.children)
-					AddChildVariableNames (child);
-			}
-
-			if (block.child_variable_names != null) {
-				foreach (string name in block.child_variable_names.Keys)
-					AddChildVariableName (name);
-			}
-		}
-
-		// <summary>
 		//   Checks whether a variable name has already been used in a child block.
 		// </summary>
 		public bool IsVariableNameUsedInChildBlock (string name)
@@ -1400,11 +1386,19 @@
 					return null;
 				}
 			}
-			
+
 			vi = new LocalInfo (type, name, this, l);
 
 			variables.Add (name, vi);
 
+			// Mark 'name' as "used by a child block" in every surrounding block
+			Block cur = this;
+			while (cur != null && cur.Implicit) 
+				cur = cur.Parent;
+			if (cur != null)
+				for (Block par = cur.Parent; par != null; par = par.Parent)
+					par.AddChildVariableName (name);
+
 			if ((flags & Flags.VariablesInitialized) != 0)
 				throw new Exception ();
 
@@ -1711,7 +1705,7 @@
 			ec.StartFlowBranching (this);
 
 			Report.Debug (4, "RESOLVE BLOCK", StartLocation, ec.CurrentBranching);
-			
+
 			bool unreachable = false, warning_shown = false;
 
 			int statement_count = statements.Count;
