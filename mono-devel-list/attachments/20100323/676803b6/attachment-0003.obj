using System;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.Threading;

namespace MJD.ServiceModelTest
{
	public class ExampleProgram
	{
		static void Main(string[] args)
		{
			var baseAddresses = new Uri[] 
			    { 
					new Uri("http://127.0.0.1:8000/"),
			    };

			var host = new ServiceHost(typeof(ExampleService), baseAddresses);
			var basicBinding = new BasicHttpBinding();
			basicBinding.Namespace = "urn:ExampleProgram";
			var address = new Uri("", UriKind.Relative);
			// Add first service contract
			host.AddServiceEndpoint(typeof(IService1), basicBinding, address);
			// Add second service contract on same binding and address
			host.AddServiceEndpoint(typeof(IService2), basicBinding, address);
			// Add the wsdl behaviour
			var meta = new ServiceMetadataBehavior()
			{
				HttpGetEnabled = true,
				HttpGetUrl = new Uri("", UriKind.Relative)
			};
			host.Description.Behaviors.Add(meta);
			
			host.Open();
			
			while ( true )
				Thread.Sleep(1000);
		}
	}
	
	[ServiceContract(Namespace="urn:ExampleProgram", Name="Service1")]
	interface IService1
	{
		[OperationContract]
		void MyService1Func();
	}
	
	[ServiceContract(Namespace="urn:ExampleProgram", Name="Service2")]
	interface IService2
	{
		[OperationContract]
		void MyService2Func();
	}
	
	[ServiceBehavior(Namespace = "urn:ExampleProgram")]  
	public class ExampleService : IService1, IService2
	{
		public void MyService1Func ()
		{
			throw new System.NotImplementedException();
		}
		
		public void MyService2Func ()
		{
			throw new System.NotImplementedException();
		}
	}
}
