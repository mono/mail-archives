Index: serial.c
===================================================================
--- serial.c	(revisiÃ³n: 96026)
+++ serial.c	(copia de trabajo)
@@ -60,15 +60,16 @@
 	Rts = 16  /* Request to send */
 } MonoSerialSignal;
 
+/* Last error related to serial port */
+static int serial_errno;
+
 int
 open_serial (char* devfile)
 {
 	int fd;
 	fd = open (devfile, O_RDWR | O_NOCTTY | O_NONBLOCK);
+	serial_errno = errno;
 
-	if (fd == -1)
-		return -1;
-
 	return fd;
 }
 
@@ -79,11 +80,18 @@
 }
 
 guint32
-read_serial (int fd, guchar *buffer, int offset, int count)
+read_serial (int fd, guchar *buffer, int offset, int count, int timeout)
 {
 	guint32 n;
+	struct pollfd ufd;
+	ufd.events = POLLHUP | POLLIN | POLLERR;
+
+	poll (&ufd, 1, timeout);
+	if ((ufd.revents & POLLIN) != POLLIN)
+		return -1;
  
 	n = read (fd, buffer + offset, count);
+	serial_errno = errno;
 
 	return (guint32) n;
 }
@@ -114,6 +122,7 @@
 		}		
 
  		t = write(fd, buffer + offset, count);
+		serial_errno = errno;
 		
 		if (timeout > 0)
 		{
@@ -142,6 +151,7 @@
 	gint32 retval;
 
 	if (ioctl (fd, input ? FIONREAD : TIOCOUTQ, &retval) == -1) {
+		serial_errno = errno;
 		return -1;
 	}
 
@@ -310,6 +320,7 @@
 	if (cfsetospeed (&newtio, baud_rate) < 0 || cfsetispeed (&newtio, baud_rate) < 0 ||
 	    tcsetattr (fd, TCSANOW, &newtio) < 0)
 	{
+		serial_errno = errno;
 		return FALSE;
 	}
 	else
@@ -368,6 +379,7 @@
 	*error = 0;
 	
 	if (ioctl (fd, TIOCMGET, &signals) == -1) {
+		serial_errno = errno;
 		*error = -1;
 		return NoneSignal;
 	}
@@ -393,8 +405,10 @@
 	else
 		signals &= ~expected;
 	
-	if (ioctl (fd, TIOCMSET, &signals) == -1)
+	if (ioctl (fd, TIOCMSET, &signals) == -1) {
+		serial_errno = errno;
 		return -1;
+	}
 	
 	return 1;
 }
@@ -419,6 +433,7 @@
 	while (poll (&pinfo, 1, timeout) == -1 && errno == EINTR) {
 		/* EINTR is an OK condition, we should not throw in the upper layer an IOException */
 		if (errno != EINTR){
+			serial_errno = errno;
 			*error = -1;
 			return FALSE;
 		}
@@ -427,6 +442,12 @@
 	return (pinfo.revents & POLLIN) != 0 ? 1 : 0;
 }
 
+gint32
+get_last_serial_error ()
+{
+	return serial_errno;
+}
+
 /*
  * mono internals should not be used here.
  * this serial stuff needs to be implemented with icalls.
