Index: build/common/Locale.cs
===================================================================
--- build/common/Locale.cs	(revision 46026)
+++ build/common/Locale.cs	(working copy)
@@ -4,8 +4,11 @@
 // Author:
 //   Miguel de Icaza (miguel@ximian.com)
 //   Andreas Nahr (ClassDevelopment@A-SoftTech.com)
+//   Peter Bartok (pbartok@novell.com)
+//   Kornél Pál <http://www.kornelpal.hu/>
 //
 // (C) 2001 - 2003 Ximian, Inc (http://www.ximian.com)
+// Copyright (C) 2005 Kornél Pál
 //
 
 //
@@ -18,10 +21,10 @@
 // distribute, sublicense, and/or sell copies of the Software, and to
 // permit persons to whom the Software is furnished to do so, subject to
 // the following conditions:
-// 
+//
 // The above copyright notice and this permission notice shall be
 // included in all copies or substantial portions of the Software.
-// 
+//
 // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
@@ -32,20 +35,120 @@
 //
 
 using System;
+using System.Globalization;
+using System.Reflection;
+using System.Resources;
+using System.Threading;
 
-internal sealed class Locale {
+internal sealed class Locale
+{
+	// gettext () style resource manager
+	private sealed class GetTextResourceManager : ResourceManager
+	{
+		// gettext () style resource set for netural culture
+		// Only GetString and GetObject methods are implemented
+		private sealed class GetTextResourceSet : ResourceSet
+		{
+			private readonly string baseName;
+			private readonly Assembly assembly;
+			private ResourceSet baseResourceSet;
 
+			internal GetTextResourceSet (string baseName, Assembly assembly) : base ()
+			{
+				this.baseName = baseName;
+				this.assembly = assembly;
+			}
+
+			public override string GetString (string name, bool ignoreCase)
+			{
+				return name;
+			}
+
+			public override string GetString (string name)
+			{
+				return name;
+			}
+
+			public override object GetObject (string name, bool ignoreCase)
+			{
+				return GetBaseResourceSet ().GetObject (name, ignoreCase);
+			}
+
+			public override object GetObject (string name)
+			{
+				return GetBaseResourceSet ().GetObject (name);
+			}
+
+			private ResourceSet GetBaseResourceSet ()
+			{
+				if (baseResourceSet == null)
+					lock (this) {
+						if (baseResourceSet == null)
+							baseResourceSet = new ResourceManager (baseName, assembly).GetResourceSet (CultureInfo.InvariantCulture, true, true);
+					}
+				return baseResourceSet;
+			}
+		}
+
+		internal GetTextResourceManager (string baseName, Assembly assembly) : base (baseName, assembly)
+		{
+			ResourceSets [CultureInfo.InvariantCulture] = new GetTextResourceSet (baseName, assembly);
+		}
+	}
+
+#if INSIDE_CORLIB
+	private static readonly LocalDataStoreSlot getTextLock = Thread.AllocateDataSlot ();
+#endif
+	private static readonly object resourcesLock = new object ();
+	private static ResourceManager resources;
+
 	private Locale ()
 	{
 	}
 
-	public static string GetText (string msg)
+	// Required to avoid TypeInitializationException that uses resources
+	// itself and may cause the stack tracke not to be written to output on
+	// fatal errors because uses inner exceptions.
+	private static ResourceManager GetResourceManager ()
 	{
-		return msg;
+		if (resources == null)
+			lock (resourcesLock) {
+				if (resources == null)
+					resources = new GetTextResourceManager (typeof (Locale).Assembly.GetName ().Name, typeof (Locale).Assembly);
+			}
+
+		return resources;
 	}
 
-	public static string GetText (string fmt, params object [] args)
+#if INSIDE_CORLIB
+	// Prevents infinite GetText recursion
+#endif
+	internal static string GetText (string message)
 	{
-		return String.Format (fmt, args);
+#if INSIDE_CORLIB
+		if (Thread.GetData (getTextLock) != null)
+			// Do not localize
+			return "GetText recursion: " + message;
+
+		Thread.SetData (getTextLock, getTextLock);
+		try {
+#endif
+			return GetResourceManager ().GetString (message, null);
+#if INSIDE_CORLIB
+		}
+		finally {
+			Thread.SetData (getTextLock, null);
+		}
+#endif
 	}
-}
+
+	internal static string GetText (string format, params object [] args)
+	{
+		return string.Format (GetText (format), args);
+	}
+
+	internal static object GetResource (string name)
+	{
+		return GetResourceManager ().GetObject (name);
+	}
+}
\ No newline at end of file
Index: class/Managed.Windows.Forms/Assembly/Locale.cs
===================================================================
--- class/Managed.Windows.Forms/Assembly/Locale.cs	(revision 46026)
+++ class/Managed.Windows.Forms/Assembly/Locale.cs	(working copy)
@@ -1,75 +0,0 @@
-// Permission is hereby granted, free of charge, to any person obtaining
-// a copy of this software and associated documentation files (the
-// "Software"), to deal in the Software without restriction, including
-// without limitation the rights to use, copy, modify, merge, publish,
-// distribute, sublicense, and/or sell copies of the Software, and to
-// permit persons to whom the Software is furnished to do so, subject to
-// the following conditions:
-// 
-// The above copyright notice and this permission notice shall be
-// included in all copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-//
-// Copyright (c) 2001-2005 Novell, Inc.
-//
-// Authors:
-//	Miguel de Icaza (miguel@ximian.com)
-//	Andreas Nahr	(ClassDevelopment@A-SoftTech.com)
-//	Peter Bartok	(pbartok@novell.com)
-//
-//
-
-// NOT COMPLETE
-
-using System;
-using System.Globalization;
-using System.Reflection;
-using System.Resources;
-
-namespace System.Windows.Forms {
-	internal sealed class Locale {
-		#region Local Variables
-		private static ResourceManager	rm;
-		#endregion	// Local Variables
-
-		#region Constructors
-		static Locale () {
-			rm = new ResourceManager("System.Windows.Forms", Assembly.GetExecutingAssembly());
-		}
-		#endregion
-
-		#region Static Properties
-		public static ResourceManager ResourceManager {
-			get {
-				return rm;
-			}
-		}
-
-		#endregion	// Static Properties
-
-		#region Static Methods
-		public static string GetText (string msg){
-			string ret;
-
-// This code and behaviour may change without notice. It's a placeholder until I
-// understand how Miguels wants localization of strings done.
-			ret = (string)rm.GetObject(msg);
-			if (ret != null) {
-				return ret;
-			}
-			return msg;
-		}
-
-		public static object GetResource(string name) {
-			return rm.GetObject(name);
-		}
-		#endregion	// Static Methods
-	}
-}
Index: class/Managed.Windows.Forms/System.Windows.Forms.dll.sources
===================================================================
--- class/Managed.Windows.Forms/System.Windows.Forms.dll.sources	(revision 46026)
+++ class/Managed.Windows.Forms/System.Windows.Forms.dll.sources	(working copy)
@@ -1,6 +1,6 @@
 Assembly/AssemblyInfo.cs
 Assembly/Consts.cs
-Assembly/Locale.cs
+../../build/common/Locale.cs
 System.Resources/ResXNullRef.cs
 System.Resources/ResXFileRef.cs
 System.Resources/ResXResourceReader.cs
