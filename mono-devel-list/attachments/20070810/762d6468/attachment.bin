#!/bin/bash

# This script is meant to be run from cron. It updates the svn dirs, 
# reconfigures, makes, and make install.

# It is based on http://www.mono-project.com/Compiling_Mono#Building_Mono_1.1.xx_from_SVN
# and for the tests: http://www.mono-project.com/Test_Suite

# Note, that I do not think libgdi is actually used at all.

# Mads Bondo Dydensborg <mbd@dbc.dk> Jan. 2007.

# The dirs that contain the source
DIRS="mono mcs libgdiplus"

# Prefix of installation
PREFIX=/usr/local/mono-svn

# Basedir for the compilation, we change to here.
BASEDIR=$HOME/Compile/Mono

# Make sure we do not address anything but system
export PATH=/usr/local/bin:/usr/bin:/bin:/usr/bin/X11:/usr/games
export LD_LIBRARY_PATH=

# Our log file
LOG=$HOME/compile.log
# And, the error file
ERROR=$HOME/compile.err

################################################################################
# Global variable to monitor state - assume error to begin with
RETVAL=1

################################################################################
# Dump info, if exit on error
function on_return {
    if [ $RETVAL -ne 0 ]; then
	echo "There was a problem during compilation of mono-svn on `hostname`"
	echo "Problem detected at `date`"
	echo "Output follows:"
	echo "================================================================================"
	cat $LOG
    else
	echo "Compilation of mono-svn on "`hostname`" completed at "`date`
    fi
    return $RETVAL
}

################################################################################
# Function to die
function die {
    echo $1
    RETVAL=1
    exit 1
}

################################################################################
# Main function
function main {

    echo "================================================================================"
    echo "Updating mono installation, startet at "`date`
    echo "Settings: BASEDIR=$BASEDIR, DIRS=$DIRS"
    echo "          PREFIX=$PREFIX, PWD=$PWD"
    cd $BASEDIR || die "Could not change directory to $BASEDIR"

    echo "================================================================================"
    echo "Updating sources from SVN in $DIRS"
    for dir in $DIRS ; do
	echo "Updating SVN sources in $dir"
	cd $dir && svn update && cd - || die "Failure during SVN update of $DIR"
    done

    echo "================================================================================"
    echo "Done updating, starting autogen step"
    cd $BASEDIR/mono || die "Could not change to $BASEDIR/mono"
    if [ ! -x ./autogen.sh ]; then
	die "Error, no autogen.sh file found"
    fi
    ./autogen.sh --prefix=$PREFIX || die "Failure during autogen step"

    echo "================================================================================"
    echo "Autogen.sh done, starting build"
    make clean &&\
    make all || die "Failure during make"

    echo "================================================================================"
    echo "All build, starting tests"

    cd $BASEDIR/mcs/tests && make run-test-local && cd $BASEDIR || die "Could not run mcs compiler tests"
    echo "mcs compiler tests completed"
    cd $BASEDIR/mcs/errors && make run-test-local && cd $BASEDIR || die "Could not run mcs compiler error tests"
    echo "mcs compiler error tests completed"
    cd $BASEDIR/mono/mono/tests && make test && cd $BASEDIR || die "Could not run mono runtime tests"
    echo "mono runtime tests completed"
    
    echo "================================================================================"
    echo "Tests done, cleaning out $PREFIX for old installation"
    rm -Rf $PREFIX/{bin,etc,include,lib,share} || die "Could not clean out old installation in $PREFIX"

    echo "================================================================================"
    echo "Cleanout done, installing"
    cd $BASEDIR/mono || die "Could not change to $BASEDIR/mono"
    make install || die "Could not install files"

    echo "================================================================================"
    echo "All done, mono svn updated, compiled, tested, and installed, ended at "`date`
    RETVAL=0
    return 0
}

################################################################################
#Ok, this error handling sucks, basically because I want to collect
#the log from the whole run in a file, and only really write anything
#to stdout, if an error occurs. This can most probably be handled
#smarter.

# Delete erorr file
rm -f $ERROR

# Trap RETURN
# trap "on_return > $ERROR" RETURN

# Call main, pipe to log
(main &> $LOG)

# Check exitcode
RETVAL=$?

# Pipe any problems into ERROR
on_return > $ERROR

# If error file exists, cat it
if [ -e $ERROR ]; then
    cat $ERROR
fi

exit 0