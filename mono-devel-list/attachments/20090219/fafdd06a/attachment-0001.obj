Index: assign.cs
===================================================================
--- assign.cs	(revision 127441)
+++ assign.cs	(working copy)
@@ -182,6 +182,7 @@
 	public class LocalTemporary : Expression, IMemoryLocation, IAssignMethod {
 		LocalBuilder builder;
 		bool is_address;
+		EmitContext context;
 
 		public LocalTemporary (Type t) : this (t, false) {}
 
@@ -223,6 +224,11 @@
 			return this;
 		}
 
+		public bool CanEmit(EmitContext ec)
+		{
+			return context == null || ec == context;
+		}
+
 		public override void Emit (EmitContext ec)
 		{
 			ILGenerator ig = ec.ig;
@@ -271,16 +277,20 @@
 		public void Store (EmitContext ec)
 		{
 			ILGenerator ig = ec.ig;
-			if (builder == null)
+			if (builder == null) {
 				builder = ec.GetTemporaryLocal (is_address ? TypeManager.GetReferenceType (type): type);
+				context = ec;
+			}
 
 			ig.Emit (OpCodes.Stloc, builder);
 		}
 
 		public void AddressOf (EmitContext ec, AddressOp mode)
 		{
-			if (builder == null)
+			if (builder == null) {
 				builder = ec.GetTemporaryLocal (is_address ? TypeManager.GetReferenceType (type): type);
+				context = ec;
+			}
 
 			// if is_address, than this is just the address anyways,
 			// so we just return this.
Index: anonymous.cs
===================================================================
--- anonymous.cs	(revision 127441)
+++ anonymous.cs	(working copy)
@@ -425,6 +425,54 @@
 			return null;
 		}
 
+		public Expression GetNestedStoreyInstanceExpression (EmitContext ec)
+		{
+			ArrayList stack = new ArrayList();
+			ArrayList stackIndexes = new ArrayList();
+			stack.Add(ec.CurrentAnonymousMethod.Storey);
+			stackIndexes.Add(-1);
+
+			while (stack.Count != 0 && stack[stack.Count - 1] != this) {
+				AnonymousMethodStorey current = (AnonymousMethodStorey)stack[stack.Count - 1];
+				if (current.used_parent_storeys == null) {
+					stack.RemoveAt(stack.Count - 1);
+					stackIndexes.RemoveAt(stackIndexes.Count - 1);
+					continue;
+				}
+
+				int nextIndex = (int)stackIndexes[stackIndexes.Count - 1] + 1;
+				if (current.used_parent_storeys.Count == nextIndex) {
+					stack.RemoveAt(stack.Count - 1);
+					stackIndexes.RemoveAt(stackIndexes.Count - 1);
+					continue;
+				}
+
+				stack.Add(((StoreyFieldPair)current.used_parent_storeys[nextIndex]).Storey);
+				stackIndexes[stackIndexes.Count - 1] = nextIndex;
+				stackIndexes.Add(-1);
+			}
+
+			if (stack.Count == 0)
+				return null;
+
+			stack.RemoveAt(stack.Count - 1);
+			stackIndexes.RemoveAt(stackIndexes.Count - 1);
+				
+			AnonymousMethodStorey currentStorey = (AnonymousMethodStorey)stack[0];
+
+			FieldExpr expr = new FieldExpr(((StoreyFieldPair)currentStorey.used_parent_storeys[(int)stackIndexes[0]]).Field.FieldBuilder, currentStorey.Location);
+			expr.InstanceExpression = new CompilerGeneratedThis (TypeBuilder, currentStorey.Location);
+
+			for (int storey = 1; storey < stack.Count; storey++) {
+				currentStorey = (AnonymousMethodStorey)stack[storey];
+				FieldExpr outerExpr = new FieldExpr(((StoreyFieldPair)currentStorey.used_parent_storeys[(int)stackIndexes[storey]]).Field.FieldBuilder, currentStorey.Location);
+				outerExpr.InstanceExpression = expr;
+				expr = outerExpr;
+			}
+
+			return expr;
+		}
+
 		//
 		// Creates storey instance expression regardless of currect IP
 		//
@@ -452,10 +500,16 @@
 					//
 					return new CompilerGeneratedThis (TypeBuilder, Location);
 				}
+
 				//
 				// External field access
 				//
-				return Instance;
+				if (Instance.CanEmit(ec))
+					return Instance;
+				
+				// This storey isn't immediately accessible to the current anonymous method's
+				// storey, but we may be able to get to it by digging deeper.j
+				return GetNestedStoreyInstanceExpression(ec);
 			}
 
 			//