Index: System.Configuration/SettingsPropertyValue.cs
===================================================================
--- System.Configuration/SettingsPropertyValue.cs	(revision 67219)
+++ System.Configuration/SettingsPropertyValue.cs	(working copy)
@@ -27,10 +27,12 @@
 //
 
 #if NET_2_0
-using System;
-using System.IO;
+using System;
+using System.IO;
+using System.ComponentModel;
 using System.Runtime.Serialization.Formatters.Binary;
-#if (XML_DEP)
+#if (XML_DEP)
+using System.Xml;
 using System.Xml.Serialization;
 #endif
 
@@ -78,9 +80,12 @@
 		public object PropertyValue {
 			get {
 				if (needPropertyValue) {
+					propertyValue = GetDeserializedValue ();
+					if (propertyValue == null) {
+						propertyValue = property.DefaultValue;
+						defaulted = true;
+					}
 					needPropertyValue = false;
-					propertyValue = property.DefaultValue;
-					defaulted = true;
 				}
 
 #if notyet
@@ -141,7 +146,8 @@
 				return serializedValue;
 			}
 			set {
-				serializedValue = value;
+				serializedValue = value;
+				needPropertyValue = true;
 			}
 		}
 
@@ -149,6 +155,41 @@
 			get {
 				return defaulted;
 			}
+		}
+
+		private object GetDeserializedValue ()
+		{
+			if (serializedValue == null)
+				return null;
+
+			object deserializedObject = null;
+
+			try {
+				switch (property.SerializeAs) {
+					case SettingsSerializeAs.String:
+						if (((string) serializedValue).Length > 0)
+							deserializedObject = TypeDescriptor.GetConverter (property.PropertyType).ConvertFromString ((string) serializedValue);
+						break;
+#if (XML_DEP)
+					case SettingsSerializeAs.Xml:
+						XmlSerializer serializer = new XmlSerializer (propertyValue.GetType ());
+						StringReader str = new StringReader ((string) serializedValue);
+						deserializedObject = serializer.Deserialize (XmlReader.Create (str));
+						break;
+#endif
+					case SettingsSerializeAs.Binary:
+						BinaryFormatter bf = new BinaryFormatter ();
+						MemoryStream ms = new MemoryStream ((byte []) serializedValue);
+						deserializedObject = bf.Deserialize (ms);
+						break;
+				}
+			}
+			catch (Exception e) {
+				if (property.ThrowOnErrorDeserializing)
+					throw e;
+			}
+
+			return deserializedObject;
 		}
 
 		SettingsProperty property;
@@ -157,7 +198,7 @@
 		bool needSerializedValue;
 		bool needPropertyValue;
 		bool dirty;
-		bool defaulted;
+		bool defaulted = false;
 		bool deserialized;
 	}
 
