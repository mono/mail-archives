Index: System.Web.Configuration_2.0/GlobalizationSection.cs
===================================================================
--- System.Web.Configuration_2.0/GlobalizationSection.cs	(revision 68155)
+++ System.Web.Configuration_2.0/GlobalizationSection.cs	(working copy)
@@ -83,15 +83,16 @@
 
 		void VerifyData ()
 		{
+			bool fake = false;
 			try {
-				new CultureInfo (Culture);
+				GetSanitizedCulture (Culture, ref fake);
 			}
 			catch {
 				throw new ConfigurationErrorsException ("the <globalization> tag contains an invalid value for the 'culture' attribute");
 			}
 
 			try {
-				new CultureInfo (UICulture);
+				GetSanitizedCulture (UICulture, ref fake);
 			}
 			catch {
 				throw new ConfigurationErrorsException ("the <globalization> tag contains an invalid value for the 'uiCulture' attribute");
@@ -186,11 +187,39 @@
 		static bool encoding_warning;
 		static bool culture_warning;
 
+		bool autoCulture;
+		bool autoUICulture;
+
+		internal bool IsAutoCulture {
+			get { return autoCulture; }
+		}
+
+		internal bool IsAutoUICulture {
+			get { return autoUICulture; }
+		}
+		
+		CultureInfo GetSanitizedCulture (string culture, ref bool auto)
+		{
+			auto = false;
+			if (culture == null)
+				throw new ArgumentNullException ("culture");
+			if (culture.Length <= 3)
+				return new CultureInfo (culture);
+			if (culture.StartsWith ("auto")) {
+				auto = true;
+				if (culture.Length > 5 && culture[4] == ':')
+					return new CultureInfo (culture.Substring (5));
+				return new CultureInfo (0x007f);
+			}
+
+			return new CultureInfo (culture);
+		}
+				
 		internal CultureInfo GetUICulture ()
 		{
 			if (cached_uiculture != UICulture) {
 				try {
-					cached_uicultureinfo = new CultureInfo (UICulture);
+					cached_uicultureinfo = GetSanitizedCulture (UICulture, ref autoUICulture);
 				} catch {
 					CultureFailed ("UICulture", UICulture);
 					cached_uicultureinfo = new CultureInfo (0x007f); // Invariant
@@ -204,7 +233,7 @@
 		{
 			if (cached_culture != Culture) {
 				try {
-					cached_cultureinfo = new CultureInfo (Culture);
+					cached_cultureinfo = GetSanitizedCulture (Culture, ref autoCulture);
 				} catch {
 					CultureFailed ("Culture", Culture);
 					cached_cultureinfo = new CultureInfo (0x007f); // Invariant
Index: System.Web/HttpApplication.cs
===================================================================
--- System.Web/HttpApplication.cs	(revision 68155)
+++ System.Web/HttpApplication.cs	(working copy)
@@ -95,6 +95,14 @@
 		// The factory for the handler currently running.
 		//
 		IHttpHandlerFactory factory;
+
+#if NET_2_0
+		//
+		// Whether the thread culture is to be auto-set
+		//
+		bool autoCulture;
+		bool autoUICulture;
+#endif
 		
 		//
 		// Whether the pipeline should be stopped
@@ -140,7 +148,7 @@
 		{
 			done = new ManualResetEvent (false);
 		}
-
+		
 		internal void InitOnce (bool full_init)
 		{
 			lock (this) {
@@ -165,7 +173,9 @@
 				GlobalizationSection cfg;
 				cfg = (GlobalizationSection) WebConfigurationManager.GetSection ("system.web/globalization");
 				app_culture = cfg.GetCulture();
+				autoCulture = cfg.IsAutoCulture;
 				appui_culture = cfg.GetUICulture();
+				autoUICulture = cfg.IsAutoUICulture;
 #else
 				GlobalizationConfiguration cfg;
 				cfg = GlobalizationConfiguration.GetInstance (null);
@@ -1001,6 +1011,26 @@
 			PipelineDone ();
 		}
 
+#if NET_2_0
+		internal CultureInfo GetThreadCulture (HttpRequest request, CultureInfo culture, bool isAuto)
+		{
+			if (!isAuto)
+				return culture;
+			CultureInfo ret = null;
+			string[] languages = request.UserLanguages;
+			try {
+				if (languages != null && languages.Length > 0)
+					ret = new CultureInfo (languages[0]);
+			} catch {
+			}
+			
+			if (ret == null)
+				ret = culture;
+			
+			return ret;
+		}
+#endif
+
 		void PreStart ()
 		{
 #if !TARGET_J2EE
@@ -1009,12 +1039,20 @@
 			Thread th = Thread.CurrentThread;
 			if (app_culture != null) {
 				prev_app_culture = th.CurrentCulture;
+#if NET_2_0
+				th.CurrentCulture = GetThreadCulture (Request, app_culture, autoCulture);
+#else
 				th.CurrentCulture = app_culture;
+#endif
 			}
 
 			if (appui_culture != null) {
 				prev_appui_culture = th.CurrentUICulture;
+#if NET_2_0
+				th.CurrentUICulture = GetThreadCulture (Request, appui_culture, autoUICulture);
+#else
 				th.CurrentUICulture = appui_culture;
+#endif
 			}
 
 #if !TARGET_JVM
Index: System.Web.UI/PageParser.cs
===================================================================
--- System.Web.UI/PageParser.cs	(revision 68155)
+++ System.Web.UI/PageParser.cs	(working copy)
@@ -101,7 +101,7 @@
 			IHttpHandler h = (IHttpHandler) pp.GetCompiledInstance ();
 			return h;
 		}
-
+		
 		internal override void ProcessMainAttributes (Hashtable atts)
 		{
 			string enabless = GetString (atts, "EnableSessionState",
@@ -191,12 +191,15 @@
 				
 				CultureInfo ci = null;
 				try {
-					ci = new CultureInfo (culture);					
+#if NET_2_0
+					if (!culture.StartsWith ("auto"))
+#endif
+						ci = new CultureInfo (culture);
 				} catch {
 					ThrowParseException ("Unsupported Culture: " + culture);
 				}
 
-				if (ci.IsNeutralCulture) {
+				if (ci != null && ci.IsNeutralCulture) {
 					string suggestedCulture = SuggestCulture (culture);
 					string fmt = "Culture attribute must be set to a non-neutral Culture.";
 					if (suggestedCulture != null)
@@ -211,12 +214,15 @@
 			if (uiculture != null) {
 				CultureInfo ci = null;
 				try {
-					ci = new CultureInfo (uiculture);					
+#if NET_2_0
+					if (!uiculture.StartsWith ("auto"))
+#endif
+						ci = new CultureInfo (uiculture);
 				} catch {
 					ThrowParseException ("Unsupported Culture: " + uiculture);
 				}
 
-				if (ci.IsNeutralCulture) {
+				if (ci != null && ci.IsNeutralCulture) {
 					string suggestedCulture = SuggestCulture (uiculture);
 					string fmt = "UICulture attribute must be set to a non-neutral Culture.";
 					if (suggestedCulture != null)
Index: System.Web.UI/Page.cs
===================================================================
--- System.Web.UI/Page.cs	(revision 68155)
+++ System.Web.UI/Page.cs	(working copy)
@@ -269,7 +269,7 @@
 	public string Culture
 	{
 		get { return Thread.CurrentThread.CurrentCulture.Name; }
-		set { Thread.CurrentThread.CurrentCulture = new CultureInfo (value); }
+		set { Thread.CurrentThread.CurrentCulture = GetPageCulture (value, Thread.CurrentThread.CurrentCulture); }
 	}
 #else
 	[EditorBrowsable (EditorBrowsableState.Never)]
@@ -623,7 +623,7 @@
 	public string UICulture
 	{
 		get { return Thread.CurrentThread.CurrentUICulture.Name; }
-		set { Thread.CurrentThread.CurrentUICulture = new CultureInfo (value); }
+		set { Thread.CurrentThread.CurrentUICulture = GetPageCulture (value, Thread.CurrentThread.CurrentUICulture); }
 	}
 #else
 	[EditorBrowsable (EditorBrowsableState.Never)]
@@ -669,6 +669,29 @@
 
 	#region Methods
 
+#if NET_2_0
+	CultureInfo GetPageCulture (string culture, CultureInfo deflt)
+	{
+		if (culture == null)
+			return deflt;
+		CultureInfo ret = null;
+		if (culture.StartsWith ("auto")) {
+			string[] languages = Request.UserLanguages;
+			try {
+				if (languages != null && languages.Length > 0)
+					ret = new CultureInfo (languages[0]);
+			} catch {
+			}
+			
+			if (ret == null)
+				ret = deflt;
+		} else
+			ret = new CultureInfo (culture);
+
+		return ret;
+	}
+#endif
+
 	[EditorBrowsable (EditorBrowsableState.Never)]
 	protected IAsyncResult AspCompatBeginProcessRequest (HttpContext context,
 							     AsyncCallback cb, 
