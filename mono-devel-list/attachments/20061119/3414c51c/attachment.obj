Index: System.Web.UI/Page.cs
===================================================================
--- System.Web.UI/Page.cs	(revision 68142)
+++ System.Web.UI/Page.cs	(working copy)
@@ -73,6 +73,7 @@
 #if NET_2_0
 	private PageLifeCycle _lifeCycle = PageLifeCycle.Unknown;
 	private bool _eventValidation = true;
+	private object [] _savedControlState;
 #endif
 	private bool _viewState = true;
 	private bool _viewStateMac;
@@ -1435,17 +1436,15 @@
 		if (postdata == null || (view_state = postdata ["__VIEWSTATE"]) == null)
 			return null;
 
-		_savedViewState = null;
 		if (view_state == "")
 			return null;
 
 		LosFormatter fmt = GetFormatter ();
 		try {
-			_savedViewState = fmt.Deserialize (view_state);
+			return fmt.Deserialize (view_state);
 		} catch (Exception e) {
 			throw new HttpException ("Error restoring page viewstate.", e);
 		}
-		return _savedViewState;
 	}
 
 	internal void LoadPageViewState()
@@ -1807,8 +1806,21 @@
 	[EditorBrowsable (EditorBrowsableState.Advanced)]
 	public void RegisterRequiresControlState (Control control)
 	{
-		if (requireStateControls == null) requireStateControls = new ArrayList ();
-		requireStateControls.Add (control);
+		if (control == null)
+			throw new ArgumentNullException ("control");
+
+		if (RequiresControlState (control))
+			return;
+
+		if (requireStateControls == null)
+			requireStateControls = new ArrayList ();
+		int n = requireStateControls.Add (control);
+
+		if (_savedControlState != null && n < _savedControlState.Length) {
+			object state = _savedControlState [n];
+			if (state != null)
+				control.LoadControlState (state);
+		}
 	}
 	
 	public bool RequiresControlState (Control control)
@@ -1865,13 +1877,14 @@
 	
 	void LoadPageControlState (object data)
 	{
+		_savedControlState = (object []) data;
+		
 		if (requireStateControls == null) return;
 
-		object[] state = (object[]) data;
-		int max = Math.Min (requireStateControls.Count, state != null ? state.Length : requireStateControls.Count);
+		int max = Math.Min (requireStateControls.Count, _savedControlState != null ? _savedControlState.Length : requireStateControls.Count);
 		for (int n=0; n < max; n++) {
 			Control ctl = (Control) requireStateControls [n];
-			ctl.LoadControlState (state != null ? state [n] : null);
+			ctl.LoadControlState (_savedControlState != null ? _savedControlState [n] : null);
 		}
 	}
 
Index: Test/System.Web.UI/ControlTest.cs
===================================================================
--- Test/System.Web.UI/ControlTest.cs	(revision 68142)
+++ Test/System.Web.UI/ControlTest.cs	(working copy)
@@ -38,6 +38,7 @@
 using System.Web;
 using System.Web.UI;
 using System.Web.UI.WebControls;
+using MonoTests.SystemWeb.Framework;
 
 namespace MonoTests.System.Web.UI
 {
@@ -176,6 +177,61 @@
 			p.EnableViewState = false;
 			Assert.IsFalse (c.DoIsViewStateEnabled);
 		}
+
+		[Test]
+		[Category ("NunitWeb")]
+		public void ControlState () {
+			WebTest t = new WebTest (PageInvoker.CreateOnLoad (ControlState_Load));
+			t.Run ();
+			FormRequest fr = new FormRequest (t.Response, "form1");
+			fr.Controls.Add ("__EVENTTARGET");
+			fr.Controls.Add ("__EVENTARGUMENT");
+			fr.Controls ["__EVENTTARGET"].Value = "";
+			fr.Controls ["__EVENTARGUMENT"].Value = "";
+			t.Request = fr;
+			t.Run ();
+		}
+
+		public static void ControlState_Load (Page p) {
+			ControlWithState c1 = new ControlWithState ();
+			ControlWithState c2 = new ControlWithState ();
+			c1.Controls.Add (c2);
+			p.Form.Controls.Add (c1);
+			if (!p.IsPostBack) {
+				c1.State = "State";
+				c2.State = "Cool";
+			}
+			else {
+				ControlWithState c3 = new ControlWithState ();
+				p.Form.Controls.Add (c3);
+				Assert.AreEqual ("State", c1.State, "ControlState");
+				Assert.AreEqual ("Cool", c2.State, "ControlState");
+			}
+		}
+
+		class ControlWithState : Control
+		{
+			string _state;
+
+			public string State {
+				get { return _state; }
+				set { _state = value; }
+			}
+
+			protected override void OnInit (EventArgs e) {
+				base.OnInit (e);
+				Page.RegisterRequiresControlState (this);
+				Page.RegisterRequiresControlState (this);
+			}
+
+			protected override object SaveControlState () {
+				return State;
+			}
+
+			protected override void LoadControlState (object savedState) {
+				State = (string) savedState;
+			}
+		}
 #endif
 
 		[Test]
