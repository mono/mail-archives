using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;

namespace System.Web.UI.WebControls
{
	[System.Web.UI.ParseChildrenAttribute (typeof (System.Web.UI.Control), ChildrenAsProperties = true, DefaultProperty = "")]
	[ThemeableAttribute (true)]
	[ControlBuilderAttribute (typeof (System.Web.UI.WebControls.WizardStepControlBuilder))]
	[BindableAttribute (false, BindingDirection.OneWay)]
	[PersistChildrenAttribute (false, false)]
	public class TemplatedWizardStep : WizardStepBase
	{
		private ITemplate _contentTemplate = null;
		private Control _contentTemplateContainer = null;
		private ITemplate _customNavigationTemplate = null;
		private Control _customNavigationTemplateContainer = null;

		[BrowsableAttribute (false)]
		[DefaultValueAttribute (null)]
		[DesignerSerializationVisibilityAttribute (DesignerSerializationVisibility.Content)]
		[PersistenceModeAttribute (PersistenceMode.InnerProperty)]
		[TemplateContainerAttribute (typeof (System.Web.UI.WebControls.Wizard), BindingDirection.OneWay)]
		[WebSysDescriptionAttribute ("The content template for the wizard step.")]
		public virtual ITemplate ContentTemplate
		{
			get { return _contentTemplate; }
			set { _contentTemplate = value; }
		}

		[BrowsableAttribute (false)]
		[DesignerSerializationVisibilityAttribute (DesignerSerializationVisibility.Hidden)]
		public Control ContentTemplateContainer
		{
			get { return _contentTemplateContainer; }
			internal set { _contentTemplateContainer = value; }
		}

		[BrowsableAttribute (false)]
		[DefaultValueAttribute (null)]
		[DesignerSerializationVisibilityAttribute (DesignerSerializationVisibility.Content)]
		[PersistenceModeAttribute (PersistenceMode.InnerProperty)]
		[TemplateContainerAttribute (typeof (System.Web.UI.WebControls.Wizard), BindingDirection.OneWay)]
		[WebSysDescriptionAttribute ("The custom navigation template for the wizard step.")]
		public virtual ITemplate CustomNavigationTemplate
		{
			get { return _customNavigationTemplate; }
			set { _customNavigationTemplate = value; }
		}

		[BrowsableAttribute (false)]
		[BindableAttribute (false, BindingDirection.OneWay)]
		[DesignerSerializationVisibilityAttribute (DesignerSerializationVisibility.Hidden)]
		public Control CustomNavigationTemplateContainer
		{
			get { return _customNavigationTemplateContainer; }
			internal set { _customNavigationTemplateContainer = value; }
		}

		[BrowsableAttribute (true)]
		public override string SkinID
		{
			get { throw new NotImplementedException (); }
			set { throw new NotImplementedException (); }
		}

		internal virtual ITemplate DefaultContentTemplate
		{
			get { return new DefaultTemplate (); }
		}

		internal virtual BaseWizardContainer DefaultContentContainer
		{
			get { return new BaseWizardContainer (); }
		}

		internal virtual void InstantiateInContainer ()
		{
			if (ContentTemplate == null)
				ContentTemplate = DefaultContentTemplate;

			if (ContentTemplateContainer == null)
				ContentTemplateContainer = DefaultContentContainer;

			if (ContentTemplateContainer is BaseWizardContainer)
				((BaseWizardContainer) ContentTemplateContainer).InstatiateTemplate (ContentTemplate);
			else
				ContentTemplate.InstantiateIn (ContentTemplateContainer);

			Controls.Clear ();
			Controls.Add (ContentTemplateContainer);

			if (CustomNavigationTemplate != null) {
				if (CustomNavigationTemplateContainer == null)
					CustomNavigationTemplateContainer = new Control ();

				CustomNavigationTemplate.InstantiateIn (CustomNavigationTemplateContainer);
			}
		}
	}

	sealed class DefaultTemplate : ITemplate
	{
		public void InstantiateIn (Control container)
		{
		}
	}

	internal class BaseWizardContainer : View, INamingContainer
	{
		WizardDefaultInnerTable _wizardDefaultInnerTable;
		internal BaseWizardContainer ()
		{
			_wizardDefaultInnerTable = new WizardDefaultInnerTable ();
			this.Controls.Add (_wizardDefaultInnerTable);
		}

		internal void InstatiateTemplate (ITemplate template)
		{
			TableCell defaultCell = _wizardDefaultInnerTable.GetDefaultCell ();
			template.InstantiateIn (defaultCell);
		}
	}

	sealed class WizardDefaultInnerTable : Table
	{
		public WizardDefaultInnerTable ()
		{
			InitTable ();
		}

		private void InitTable ()
		{
			TableRow row = new TableRow ();
			TableCell cell = new TableCell ();

			cell.ControlStyle.Width = Unit.Percentage (100);
			cell.ControlStyle.Height = Unit.Percentage (100);

			row.Cells.Add (cell);

			this.ControlStyle.Width = Unit.Percentage (100);
			this.ControlStyle.Height = Unit.Percentage (100);
			this.CellPadding = 0;
			this.CellSpacing = 0;

			this.Rows.Add (row);
		}

		public TableCell GetDefaultCell ()
		{
			return this.Rows[0].Cells[0];
		}
	}


}
