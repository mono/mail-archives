Index: System.Drawing.Imaging/ImageCodecInfo.cs
===================================================================
--- System.Drawing.Imaging/ImageCodecInfo.cs	(revision 38103)
+++ System.Drawing.Imaging/ImageCodecInfo.cs	(working copy)
@@ -65,8 +65,8 @@
 		// methods		
 		public static ImageCodecInfo[] GetImageDecoders() 
 		{			
-			int decoderNums, arraySize, decoder_ptr, decoder_size;
-			IntPtr decoders;
+			int decoderNums, arraySize, decoder_size;
+			IntPtr decoders, decoder_ptr;
 			ImageCodecInfo[] result;
 			GdipImageCodecInfo gdipdecoder = new GdipImageCodecInfo();
 			Status status;
@@ -85,11 +85,11 @@
 			GDIPlus.CheckStatus (status);
 			
 			decoder_size = Marshal.SizeOf (gdipdecoder);			
-			decoder_ptr = decoders.ToInt32();
+			decoder_ptr = decoders;
 			
-			for (int i = 0; i < decoderNums; i++, decoder_ptr += decoder_size)
+			for (int i = 0; i < decoderNums; i++, decoder_ptr = new IntPtr (decoder_ptr.ToInt64 () + decoder_size))
 			{
-				gdipdecoder = (GdipImageCodecInfo) Marshal.PtrToStructure ((IntPtr)decoder_ptr, typeof (GdipImageCodecInfo));						
+				gdipdecoder = (GdipImageCodecInfo) Marshal.PtrToStructure (decoder_ptr, typeof (GdipImageCodecInfo));	
 				result[i] = new ImageCodecInfo ();
 				GdipImageCodecInfo.MarshalTo (gdipdecoder, result[i]);				
 			}
@@ -101,8 +101,8 @@
 		
 		public static ImageCodecInfo[] GetImageEncoders() 
 		{
-			int encoderNums, arraySize, encoder_ptr, encoder_size;
-			IntPtr encoders;
+			int encoderNums, arraySize, encoder_size;
+			IntPtr encoders, encoder_ptr;
 			ImageCodecInfo[] result;
 			GdipImageCodecInfo gdipencoder = new GdipImageCodecInfo();
 			Status status;
@@ -116,16 +116,17 @@
 				return result;			
 			
 			/* Get encoders list*/
-			encoders = Marshal.AllocHGlobal (arraySize);						
+			encoders = Marshal.AllocHGlobal (arraySize);
+			
 			status = GDIPlus.GdipGetImageEncoders (encoderNums,  arraySize, encoders);
 			GDIPlus.CheckStatus (status);
 			
 			encoder_size = Marshal.SizeOf (gdipencoder);			
-			encoder_ptr = encoders.ToInt32();
+			encoder_ptr = encoders;
 			
-			for (int i = 0; i < encoderNums; i++, encoder_ptr += encoder_size)
+			for (int i = 0; i < encoderNums; i++, encoder_ptr = new IntPtr (encoder_ptr.ToInt64 () + encoder_size))
 			{
-				gdipencoder = (GdipImageCodecInfo) Marshal.PtrToStructure ((IntPtr)encoder_ptr, typeof (GdipImageCodecInfo));						
+				gdipencoder = (GdipImageCodecInfo) Marshal.PtrToStructure (encoder_ptr, typeof (GdipImageCodecInfo));						
 				result[i] = new ImageCodecInfo ();
 				GdipImageCodecInfo.MarshalTo (gdipencoder, result[i]);				
 			}
Index: System.Drawing.Imaging/ChangeLog
===================================================================
--- System.Drawing.Imaging/ChangeLog	(revision 38103)
+++ System.Drawing.Imaging/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2004-12-27  Zoltan Varga  <vargaz@freemail.hu>
+
+	* ImageCodecInfo.cs: Fix marshalling of arrays on amd64.
+
 2004-11-25  Marek Safar  <marek.safar@seznam.cz>
 
 	* ColorPalette.cs: Add CheckStatus to GetAdjustedPalette.
Index: System.Drawing/gdipFunctions.cs
===================================================================
--- System.Drawing/gdipFunctions.cs	(revision 38103)
+++ System.Drawing/gdipFunctions.cs	(working copy)
@@ -74,9 +74,9 @@
 		static public void FromUnManagedMemoryToPointI(IntPtr prt, Point [] pts)
 		{						
 			int nPointSize = Marshal.SizeOf(pts[0]);
-			int pos = prt.ToInt32();
-			for (int i=0; i<pts.Length; i++, pos+=nPointSize)
-				pts[i] = (Point) Marshal.PtrToStructure((IntPtr)pos, typeof(Point));
+			IntPtr pos = prt;
+			for (int i=0; i<pts.Length; i++, pos = new IntPtr (pos.ToInt64 () + nPointSize))
+				pts[i] = (Point) Marshal.PtrToStructure(pos, typeof(Point));
 			
 			Marshal.FreeHGlobal(prt);			
 		}
@@ -85,9 +85,9 @@
 		static public void FromUnManagedMemoryToPoint (IntPtr prt, PointF [] pts)
 		{						
 			int nPointSize = Marshal.SizeOf(pts[0]);
-			int pos = prt.ToInt32();
-			for (int i=0; i<pts.Length; i++, pos+=nPointSize)
-				pts[i] = (PointF) Marshal.PtrToStructure((IntPtr)pos, typeof(Point));
+			IntPtr pos = prt;
+			for (int i=0; i<pts.Length; i++, pos = new IntPtr (pos.ToInt64 () + nPointSize))
+				pts[i] = (PointF) Marshal.PtrToStructure(pos, typeof(Point));
 			
 			Marshal.FreeHGlobal(prt);			
 		}
@@ -96,11 +96,10 @@
 		static public IntPtr FromPointToUnManagedMemoryI(Point [] pts)
 		{
 			int nPointSize =  Marshal.SizeOf(pts[0]);
-			IntPtr dest = Marshal.AllocHGlobal(nPointSize* pts.Length);			
-			int pos = dest.ToInt32();
-						
-			for (int i=0; i<pts.Length; i++, pos+=nPointSize)
-				Marshal.StructureToPtr(pts[i], (IntPtr)pos, false);	
+			IntPtr dest = Marshal.AllocHGlobal(nPointSize* pts.Length);
+			IntPtr pos = dest;
+			for (int i=0; i<pts.Length; i++, pos = new IntPtr (pos.ToInt64 () + nPointSize))
+				Marshal.StructureToPtr(pts[i], pos, false);	
 			
 			return dest;			
 		}		
@@ -109,9 +108,9 @@
 		static public void FromUnManagedMemoryToRectangles (IntPtr prt, RectangleF [] pts)
 		{						
 			int nPointSize = Marshal.SizeOf (pts[0]);
-			int pos = prt.ToInt32 ();
-			for (int i = 0; i < pts.Length; i++, pos+=nPointSize)
-				pts[i] = (RectangleF) Marshal.PtrToStructure((IntPtr)pos, typeof(RectangleF));
+			IntPtr pos = prt;
+			for (int i = 0; i < pts.Length; i++, pos = new IntPtr (pos.ToInt64 () + nPointSize))
+				pts[i] = (RectangleF) Marshal.PtrToStructure(pos, typeof(RectangleF));
 			
 			Marshal.FreeHGlobal(prt);			
 		}
@@ -121,10 +120,9 @@
 		{
 			int nPointSize =  Marshal.SizeOf(pts[0]);
 			IntPtr dest = Marshal.AllocHGlobal(nPointSize* pts.Length);			
-			int pos = dest.ToInt32();
-						
-			for (int i=0; i<pts.Length; i++, pos+=nPointSize)
-				Marshal.StructureToPtr(pts[i], (IntPtr)pos, false);	
+			IntPtr pos = dest;
+			for (int i=0; i<pts.Length; i++, pos = new IntPtr (pos.ToInt64 () + nPointSize))
+				Marshal.StructureToPtr(pts[i], pos, false);	
 			
 			return dest;			
 		}
Index: System.Drawing/Image.cs
===================================================================
--- System.Drawing/Image.cs	(revision 38103)
+++ System.Drawing/Image.cs	(working copy)
@@ -545,8 +545,8 @@
 	[Browsable (false)]
 	public PropertyItem[] PropertyItems {
 		get {
-			int propNums, propsSize, propPtr, propSize;
-			IntPtr properties;
+			int propNums, propsSize, propSize;
+			IntPtr properties, propPtr;
 			PropertyItem[] items;
 			GdipPropertyItem gdipProperty = new GdipPropertyItem ();
 			Status status;
@@ -566,12 +566,12 @@
 			GDIPlus.CheckStatus (status);
 
 			propSize = Marshal.SizeOf (gdipProperty);			
-			propPtr = properties.ToInt32();
+			propPtr = properties;
 			
-			for (int i = 0; i < propNums; i++, propPtr += propSize)
+			for (int i = 0; i < propNums; i++, propPtr = new IntPtr (propPtr.ToInt64 () + propSize))
 			{
 				gdipProperty = (GdipPropertyItem) Marshal.PtrToStructure 
-						((IntPtr)propPtr, typeof (GdipPropertyItem));						
+						(propPtr, typeof (GdipPropertyItem));						
 				items [i] = new PropertyItem ();
 				GdipPropertyItem.MarshalTo (gdipProperty, items [i]);								
 			}
Index: System.Drawing/ChangeLog
===================================================================
--- System.Drawing/ChangeLog	(revision 38103)
+++ System.Drawing/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2004-12-27  Zoltan Varga  <vargaz@freemail.hu>
+
+	* gdipFunctions.cs Image.cs: Fix marshalling of arrays on amd64.
+
 2004-12-16  Peter Bartok  <pbartok@novell.com>
 
 	* Graphics.cs (GetHdc): Removed Wine assumptions, the handle is now
