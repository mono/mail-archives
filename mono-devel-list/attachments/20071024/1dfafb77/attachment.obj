Index: System/MonoType.cs
===================================================================
--- System/MonoType.cs	(revision 88102)
+++ System/MonoType.cs	(working copy)
@@ -373,6 +373,11 @@
 					else
 						throwMissingMethodDescription = "Cannot find method " + name + ".";
 				} else {
+					ParameterInfo[] parameters = m.GetParameters();
+					bool hasParamArray = parameters.Length > 0 ? Attribute.IsDefined (parameters [parameters.Length - 1], 
+						typeof (ParamArrayAttribute)) : false;
+					if (hasParamArray)
+						ReorderParamArrayArguments (ref args, m);
 					object result = m.Invoke (target, invokeAttr, binder, args, culture);
 					binder.ReorderArgumentArray (ref args, state);
 					return result;
@@ -418,6 +423,11 @@
 				if (m == null) {
 					throwMissingFieldException = true;
 				} else {
+					ParameterInfo[] parameters = m.GetParameters();
+					bool hasParamArray = parameters.Length > 0 ? Attribute.IsDefined (parameters [parameters.Length - 1], 
+						typeof (ParamArrayAttribute)) : false;
+					if (hasParamArray)
+						ReorderParamArrayArguments (ref args, m);
 					object result = m.Invoke (target, invokeAttr, binder, args, culture);
 					binder.ReorderArgumentArray (ref args, state);
 					return result;
@@ -441,6 +451,11 @@
 				if (m == null) {
 					throwMissingFieldException = true;
 				} else {
+					ParameterInfo[] parameters = m.GetParameters();
+					bool hasParamArray = parameters.Length > 0 ? Attribute.IsDefined (parameters [parameters.Length - 1], 
+						typeof (ParamArrayAttribute)) : false;
+					if (hasParamArray)
+						ReorderParamArrayArguments (ref args, m);
 					object result = m.Invoke (target, invokeAttr, binder, args, culture);
 					binder.ReorderArgumentArray (ref args, state);
 					return result;
@@ -618,5 +633,24 @@
 			// this (unlike the Invoke step) is _and stays_ a LinkDemand (caller)
 			return SecurityManager.ReflectedLinkDemandQuery (mb) ? mb : null;
 		}
+
+		void ReorderParamArrayArguments(ref object[] args, MethodBase method)
+		{
+			ParameterInfo[] parameters = method.GetParameters();
+			object[] newArgs = new object [parameters.Length];
+			Array paramArray = Array.CreateInstance(parameters[parameters.Length - 1].ParameterType.GetElementType(), 
+				args.Length - (parameters.Length - 1));
+			int paramArrayCount = 0;
+			for (int i = 0; i < args.Length; i++) {
+				if (i < (parameters.Length - 1))
+					newArgs [i] = args [i];
+				else {
+					paramArray.SetValue (args [i], paramArrayCount);
+					paramArrayCount ++;
+				}
+			}
+			newArgs [parameters.Length - 1] = paramArray;
+			args = newArgs;
+		}
 	}
 }
Index: System.Reflection/Binder.cs
===================================================================
--- System.Reflection/Binder.cs	(revision 88102)
+++ System.Reflection/Binder.cs	(working copy)
@@ -325,15 +325,32 @@
 				if (match == null)
 					throw new ArgumentNullException ("match");
 
+				bool isdefParamArray = false;
+				Type elementType = null;
+
 				/* first look for an exact match... */
 				for (i = 0; i < match.Length; ++i) {
 					m = match [i];
 					ParameterInfo[] args = m.GetParameters ();
-					if (args.Length != types.Length)
+					if (args.Length > types.Length)
 						continue;
-					for (j = 0; j < types.Length; ++j) {
-						if (types [j] != args [j].ParameterType)
+					else if(args.Length <= types.Length & args.Length > 0)
+					{
+						isdefParamArray = Attribute.IsDefined (args [args.Length - 1], typeof (ParamArrayAttribute));
+						if (isdefParamArray)
+							elementType = args [args.Length - 1].ParameterType.GetElementType ();
+						if (args.Length != types.Length & !isdefParamArray)
+							continue;
+					}
+					for (j = 0; j < types.Length; ++j) {					
+						if (!isdefParamArray && types [j] != args [j].ParameterType)
 							break;
+						else if (isdefParamArray) {
+							if (j < (args.Length - 1) && types [j] != args [j].ParameterType)
+								break;
+							else if (j >= (args.Length - 1) && types [j] != elementType) 
+								break;
+						}
 					}
 					if (j == types.Length)
 						return m;