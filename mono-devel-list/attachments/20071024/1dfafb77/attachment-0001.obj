using System;
using System.Reflection;

public class ParamArrayTest
{
	private const BindingFlags InvokeBindingFlags = DefaultBindingFlags |
        	BindingFlags.InvokeMethod;

	private const BindingFlags DefaultBindingFlags = BindingFlags.Public |
		BindingFlags.NonPublic |
		BindingFlags.OptionalParamBinding |
		BindingFlags.Static |
		BindingFlags.FlattenHierarchy |
		BindingFlags.Instance;

	public static void Main(string[] args)
	{
		Type type = typeof(ParamArrayTest);
		object obj = type.InvokeMember("TestMethod", InvokeBindingFlags, null, null, new object[] {"param1"});

		obj = obj = type.InvokeMember("TestMethod", InvokeBindingFlags, null, null, 
			new object[] {"param1", "param2", "param3", "param4"});
	}

	public static void TestMethod(string param1, params string[] param2)
	{
		Console.WriteLine("Test Method 1, two params");	
	}
		
	public static void TestMethod(string param1)
	{
		Console.WriteLine(String.Format("Test Method 2, one param: {0}", param1));
	}
		
	public static void TestMethod(params string[] param1)
	{
		Console.WriteLine("Test Method 3, one params");
	}
}