Index: mono/mini/ChangeLog
===================================================================
--- mono/mini/ChangeLog	(revision 109044)
+++ mono/mini/ChangeLog	(working copy)
@@ -1,5 +1,13 @@
 2008-07-28  Bill Holmes  <billholmes54@gmail.com>
 
+	* mini-x86.c (mono_arch_emit_epilog):  Fixing some Win32 calling convention problems
+	  with structs as return values when calling managed from native code.  Fixes pinvoke3
+	  runtime test on Win32.
+
+	Contributed under MIT/X11 license.
+
+2008-07-28  Bill Holmes  <billholmes54@gmail.com>
+
 	* mini-amd64.c (get_call_info): Winx64 fix for passing floats.
 	  The float param registers and other param registers must be the 
 	  same index on Windows x64.
Index: mono/mini/mini-x86.c
===================================================================
--- mono/mini/mini-x86.c	(revision 109010)
+++ mono/mini/mini-x86.c	(working copy)
@@ -4177,6 +4177,12 @@
 				break;
 			case ArgOnDoubleFpStack:
 				x86_fld_membase (code, cfg->ret->inst_basereg, cfg->ret->inst_offset + (quad * sizeof (gpointer)), TRUE);
+#ifdef PLATFORM_WIN32
+				/* Structs that contain only a double are stored spanning eax and edx. */
+				/* This is needed for calling methods that were compiled the MSVC compiler. */
+				x86_mov_reg_membase (code, return_regs[0], cfg->ret->inst_basereg, cfg->ret->inst_offset, 4);
+				x86_mov_reg_membase (code, return_regs[1], cfg->ret->inst_basereg, cfg->ret->inst_offset + sizeof (gpointer), 4);
+#endif
 				break;
 			case ArgNone:
 				break;
@@ -4186,6 +4192,11 @@
 		}
 	}
 
+	if (MONO_TYPE_ISSTRUCT (mono_method_signature (cfg->method)->ret) && (cinfo->ret.storage == ArgOnStack) && (cfg->vret_addr)) {
+		/* When return structs are passed on the stack the address needs to be stored in eax. */
+		x86_mov_reg_membase (code, X86_EAX, cfg->vret_addr->sreg1, cfg->vret_addr->inst_offset, sizeof (gpointer));
+	}
+
 	x86_leave (code);
 
 	if (CALLCONV_IS_STDCALL (sig)) {