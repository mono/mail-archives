Index: mcs/class/corlib/System.Threading/Thread.cs
===================================================================
--- mcs.orig/class/corlib/System.Threading/Thread.cs	2009-04-08 12:57:15.000000000 +0200
+++ mcs/class/corlib/System.Threading/Thread.cs	2009-04-08 13:00:48.000000000 +0200
@@ -129,7 +129,6 @@
 #endif		
 		
 		private IPrincipal _principal;
-		internal NumberFormatter _numberFormatter;
 
 		public static Context CurrentContext {
 			[SecurityPermission (SecurityAction.LinkDemand, Infrastructure=true)]
@@ -248,18 +247,6 @@
 			slots [slot.slot] = data;
 		}
 
-		internal NumberFormatter AcquireNumberFormatter() {
-			NumberFormatter res = _numberFormatter;
-			_numberFormatter = null;
-			if (res == null)
-				return new NumberFormatter (this);
-			return res;
-		}
-
-		internal void ReleaseNumberFormatter (NumberFormatter formatter) {
-			_numberFormatter = formatter;
-		}
-
 		public static AppDomain GetDomain() {
 			return AppDomain.CurrentDomain;
 		}
@@ -430,8 +417,7 @@
 						//
 						SetCachedCurrentCulture (culture);
 						in_currentculture = false;
-						if (_numberFormatter != null)
-							_numberFormatter.CurrentCulture = culture;
+						NumberFormatter.SetThreadCurrentCulture (culture);
 						return culture;
 					}
 				}
@@ -450,8 +436,7 @@
 					in_currentculture = false;
 				}
 
-				if (_numberFormatter != null)
-					_numberFormatter.CurrentCulture = culture;
+				NumberFormatter.SetThreadCurrentCulture (culture);
 				return culture;
 			}
 			
@@ -487,8 +472,7 @@
 				} finally {
 					in_currentculture = false;
 				}
-				if (_numberFormatter != null)
-					_numberFormatter.CurrentCulture = value;
+				NumberFormatter.SetThreadCurrentCulture (value);
 			}
 		}
 
Index: mcs/class/corlib/System/NumberFormatter.cs
===================================================================
--- mcs.orig/class/corlib/System/NumberFormatter.cs	2009-04-08 12:57:31.000000000 +0200
+++ mcs/class/corlib/System/NumberFormatter.cs	2009-04-08 13:00:48.000000000 +0200
@@ -773,14 +773,27 @@
 
 		#region public number formatting methods
 
+		[ThreadStatic]
+		static NumberFormatter threadNumberFormatter;
+
 		private static NumberFormatter GetInstance()
 		{
-			return Thread.CurrentThread.AcquireNumberFormatter();
+			NumberFormatter res = threadNumberFormatter;
+			threadNumberFormatter = null;
+			if (res == null)
+				return new NumberFormatter (Thread.CurrentThread);
+			return res;
 		}
 
 		private void Release()
 		{
-			_thread.ReleaseNumberFormatter (this);
+			threadNumberFormatter = this;
+		}
+
+		internal static void SetThreadCurrentCulture (CultureInfo culture)
+		{
+			if (threadNumberFormatter != null)
+				threadNumberFormatter.CurrentCulture = culture;
 		}
 
 		public static string NumberToString (string format, sbyte value, IFormatProvider fp)
