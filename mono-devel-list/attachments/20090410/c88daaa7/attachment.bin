diff --git a/mono/metadata/profiler-private.h b/mono/metadata/profiler-private.h
index ddbbc17..24b58fe 100644
--- a/mono/metadata/profiler-private.h
+++ b/mono/metadata/profiler-private.h
@@ -63,6 +63,8 @@ void mono_profiler_gc_event       (MonoGCEvent e, int generation) MONO_INTERNAL;
 void mono_profiler_gc_heap_resize (gint64 new_size) MONO_INTERNAL;
 
 void mono_profiler_runtime_initialized (void) MONO_INTERNAL;
+gboolean mono_profiler_is_profiler_thread (MonoThread *thread) MONO_INTERNAL;
+void mono_profiler_thread_cleanup_callback (void) MONO_INTERNAL;
 
 #endif /* __MONO_PROFILER_PRIVATE_H__ */
 
diff --git a/mono/metadata/profiler.c b/mono/metadata/profiler.c
index ee5587f..671dece 100644
--- a/mono/metadata/profiler.c
+++ b/mono/metadata/profiler.c
@@ -560,6 +560,26 @@ mono_profiler_runtime_initialized (void) {
 		runtime_initialized_event (current_profiler);
 }
 
+static MonoThread *profiler_thread = NULL;
+
+void mono_profiler_set_profiler_thread (MonoThread *thread) {
+	profiler_thread = thread;
+}
+gboolean mono_profiler_is_profiler_thread (MonoThread *thread) {
+	return profiler_thread == thread;
+}
+
+static MonoProfilerThreadCleanupCallback profiler_thread_cleanup_callback = NULL;
+
+void mono_profiler_set_thread_cleanup_callback (MonoProfilerThreadCleanupCallback callback) {
+	profiler_thread_cleanup_callback = callback;
+}
+void mono_profiler_thread_cleanup_callback (void) {
+	if (profiler_thread != NULL && profiler_thread_cleanup_callback != NULL) {
+		profiler_thread_cleanup_callback (current_profiler);
+	}
+}
+
 
 static GHashTable *coverage_hash = NULL;
 
diff --git a/mono/metadata/profiler.h b/mono/metadata/profiler.h
index bd31bd6..7283cd9 100644
--- a/mono/metadata/profiler.h
+++ b/mono/metadata/profiler.h
@@ -100,6 +100,9 @@ typedef gboolean (*MonoProfileCoverageFilterFunc)   (MonoProfiler *prof, MonoMet
 
 typedef void (*MonoProfileCoverageFunc)   (MonoProfiler *prof, const MonoProfileCoverageEntry *entry);
 
+typedef void (*MonoProfilerThreadCleanupCallback) (MonoProfiler *prof);
+
+
 /*
  * Function the profiler may call.
  */
@@ -135,6 +138,9 @@ void mono_profiler_install_runtime_initialized (MonoProfileFunc runtime_initiali
 
 void mono_profiler_load             (const char *desc);
 
+void mono_profiler_set_profiler_thread (MonoThread *thread);
+void mono_profiler_set_thread_cleanup_callback (MonoProfilerThreadCleanupCallback callback);
+
 G_END_DECLS
 
 #endif /* __MONO_PROFILER_H__ */
diff --git a/mono/metadata/threads.c b/mono/metadata/threads.c
index a7d76d6..b596276 100644
--- a/mono/metadata/threads.c
+++ b/mono/metadata/threads.c
@@ -515,6 +515,8 @@ static void thread_cleanup (MonoThread *thread)
 	if (!handle_remove (thread))
 		return;
 	mono_release_type_locks (thread);
+	
+	mono_profiler_thread_cleanup_callback ();
 
 	EnterCriticalSection (thread->synch_cs);
 
@@ -2878,7 +2880,7 @@ void mono_thread_suspend_all_other_threads (void)
 			MonoThread *thread = wait->threads [i];
 			gboolean signal_suspend = FALSE;
 
-			if ((thread->tid == self) || mono_gc_is_finalizer_thread (thread)) {
+			if ((thread->tid == self) || mono_gc_is_finalizer_thread (thread) || mono_profiler_is_profiler_thread (thread)) {
 				//CloseHandle (wait->handles [i]);
 				wait->threads [i] = NULL; /* ignore this thread in next loop */
 				continue;
