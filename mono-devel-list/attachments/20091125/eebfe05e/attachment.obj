
using System;
using System.Diagnostics;
using System.Threading;
using System.Globalization;

class MutexTest
{
	public MutexTest(string strName, int nFirstWait, int nSecondWait)
	{
		bool bCreatedNew;
		m_mutex = new Mutex(false, "MutexTest", out bCreatedNew);
		if (bCreatedNew)
			Process.Start("/opt/mono/bin/mono", "MutexTest.exe Process2 0 5000");
		System.Console.Error.WriteLine("[{0}] - Waiting to lock mutex, sleeping for {1}s...", strName, nFirstWait / 1000.0);
		Thread.Sleep(nFirstWait);
		System.Console.Error.WriteLine("[{0}] - done sleeping.", strName);
		// wait for mutex
		try
		{
			System.Console.Error.WriteLine("[{0}] - Attempting to lock mutex", strName);
			m_mutex.WaitOne();
			System.Console.Error.WriteLine("[{0}] - Mutex locked", strName);
		}
		catch (AbandonedMutexException)
		{
			// wait completed because a thread exited without releasing the mutex
		}

		Thread.Sleep(nSecondWait);
		m_mutex.ReleaseMutex();
		System.Console.Error.WriteLine("[{0}] - Mutex released", strName);
	}
	
	static void Main(string []args)
	{
		string strName = args.Length > 0 ? args[0] : "Process1";
		int nFirstWait = args.Length > 1 ? Convert.ToInt32(args[1]) : 500;
		int nSecondWait = args.Length > 2 ? Convert.ToInt32(args[2]) : 5000;
		
		MutexTest mt = new MutexTest(strName, nFirstWait, nSecondWait);
	}
	
	Mutex m_mutex;
}