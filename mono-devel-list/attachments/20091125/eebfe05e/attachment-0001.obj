Index: mono/mono/io-layer/processes.c
===================================================================
--- mono/mono/io-layer/processes.c	(revision 146315)
+++ mono/mono/io-layer/processes.c	(working copy)
@@ -1489,8 +1489,73 @@
 }
 #endif /* UNUSED_CODE */
 
+#ifdef PLATFORM_MACOSX
+#include <sys/sysctl.h>
+#include <sys/proc.h>
+
 gboolean EnumProcesses (guint32 *pids, guint32 len, guint32 *needed)
 {
+	guint32 count, fit, i, j;
+	gint32 err;
+	gboolean done;
+	struct kinfo_proc *result;
+	size_t proclength;
+	static const int name[] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL, 0 };
+	
+	mono_once (&process_current_once, process_set_current);
+	
+	result = NULL;
+	done = FALSE;
+	
+	do {
+		proclength = 0;
+		err = sysctl ((int *)name, (sizeof(name) / sizeof(*name)) - 1, NULL, &proclength, NULL, 0);
+		if (err == -1) {
+			err = errno;
+		}
+		
+		if (err == 0) {
+			result = g_malloc (proclength);
+			if (result == NULL) {
+				err = ENOMEM;
+			}
+		}
+		
+		if (err == 0) {
+			err = sysctl ((int *) name, (sizeof(name) / sizeof(*name)) - 1, result, &proclength, NULL, 0);
+			if (err == -1) {
+				err = errno;
+			}
+			if (err == 0) {
+				done = TRUE;
+			} else if (err == ENOMEM) {
+				free(result);
+				result = NULL;
+				err = 0;
+			}
+		}
+	} while (err == 0 && !done);
+	
+	if (err != 0 && result != NULL) {
+		free (result);
+		result = NULL;
+		return(FALSE);
+	}	
+	
+	count = proclength / sizeof(struct kinfo_proc);
+	fit = len / sizeof(guint32);
+	for (i = 0, j = 0; j< fit && i < count; i++) {
+		pids [j++] = result [i].kp_proc.p_pid;
+	}
+	free (result);
+	result = NULL;
+	*needed = j * sizeof(guint32);
+	
+	return(TRUE);
+}
+#else
+gboolean EnumProcesses (guint32 *pids, guint32 len, guint32 *needed)
+{
 	GArray *processes = g_array_new (FALSE, FALSE, sizeof(pid_t));
 	guint32 fit, i, j;
 	DIR *dir;
@@ -1528,6 +1593,7 @@
 	
 	return(TRUE);
 }
+#endif
 
 static gboolean process_open_compare (gpointer handle, gpointer user_data)
 {
@@ -2117,6 +2183,13 @@
 	g_free (filename);
 #endif
 
+#ifdef PLATFORM_MACOSX
+	memset (buf, '\0', sizeof(buf));
+	proc_name (pid, buf, sizeof(buf));
+	if (strlen (buf) > 0)
+		ret = g_strdup (buf);
+#endif
+
 	if (ret != NULL) {
 		return(ret);
 	}