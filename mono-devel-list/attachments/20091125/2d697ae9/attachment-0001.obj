
using System;
using System.Threading;
using System.Globalization;

class WaitAnyTest
{
	public delegate void WaitCallback(object state);
	
	public WaitAnyTest(int nFirstWait, int nSecondWait)
	{
		m_event1 = new EventWaitHandle(false, EventResetMode.ManualReset, "LocalEvent");
		m_event2 = new EventWaitHandle(false, EventResetMode.ManualReset, "LocalEvent");
		m_cancel = new ManualResetEvent(false);
		
		RegisteredWaitHandle rwh = ThreadPool.RegisterWaitForSingleObject(m_event1, RegisteredWaitForSingleObjectCallback, m_event1, Timeout.Infinite, true);
		WaitCallback callback1 = new WaitCallback(Wait1);
		WaitCallback callback2 = new WaitCallback(Wait2);
		callback1.BeginInvoke(null, null, null);
		callback2.BeginInvoke(null, null, null);
		System.Console.Error.WriteLine("Setup wait handles, sleeping for {0}s...", nFirstWait / 1000.0);
		Thread.Sleep(nFirstWait);
		System.Console.Error.WriteLine("done sleeping.");
		System.Console.Error.WriteLine("Setting event 2.");
		m_event2.Set();
		System.Console.Error.WriteLine("Sleeping for {0}s to see if wait handles respond.", nSecondWait / 1000.0);
		Thread.Sleep(nSecondWait);
	}
	
	private void Wait1(object state)
	{
		EventWaitHandle[] events = new [] { m_event1 };
		System.Console.Error.WriteLine("Wait1: Calling WaitAny with 1 WaitHandle");
		int nWaitReturn = WaitHandle.WaitAny(events);
		System.Console.Error.WriteLine("Wait1: WaitAny(1) returned {0}.", nWaitReturn);
	}

	private void Wait2(object state)
	{
		EventWaitHandle[] events = new [] { m_cancel, m_event1 };
		System.Console.Error.WriteLine("Wait2: Calling WaitAny with 2 WaitHandles");
		int nWaitReturn = WaitHandle.WaitAny(events);
		System.Console.Error.WriteLine("Wait2: WaitAny(2) returned {0}.", nWaitReturn);
	}

	private void RegisteredWaitForSingleObjectCallback(object objState, bool bTimedOut)
	{
		System.Console.Error.WriteLine("RegisteredWaitForSingleObjectCallback called.");
	}
	
	static void Main(string []args)
	{
		int nFirstWait = args.Length > 0 ? Convert.ToInt32(args[0]) : 3000;
		int nSecondWait = args.Length > 1 ? Convert.ToInt32(args[1]) : 3000;
		
		WaitAnyTest wat = new WaitAnyTest(nFirstWait, nSecondWait);
		
	}
	
	EventWaitHandle m_event1;
	EventWaitHandle m_event2;
	ManualResetEvent m_cancel;
}