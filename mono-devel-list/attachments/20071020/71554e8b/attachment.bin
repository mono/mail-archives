// sqrtest.cs - test for optimization of square expressions
//
// Jaroslav Hajek (highegg@gmail.com)
//
// (C) No copyright 2007
using System;

public class SquareTest {

	// a super-simplistic complex structure
	public struct simplecomplex
	{
		public double re,im;
		public static double Abs(simplecomplex c)
		{
			// this is how a typical C programmer would write it
			return Math.Sqrt(c.re*c.re + c.im*c.im);
		}
	}
	// first, test whether it really works
	public static int TestAbsMethodIsCorrect() {
		simplecomplex c;
		c.re = 3; c.im = 4;
		if (Math.Abs(simplecomplex.Abs(c)-5.0) > 1e-12) {
				Console.WriteLine("Correctness test failed.");
				return 1;
		}
		return 0;
	}
	// test whether the method body contains twice a Dup-Mul sequence
	public static int TestAbsMethodIsOptimized() {
		// obtain bytecode for method body
		byte[] body = typeof(simplecomplex).GetMethod("Abs").GetMethodBody().GetILAsByteArray();
		int noccur = 0;
		const byte opCodeDup = 0x25, opCodeMul = 0x5a; // TODO: can these be retrieved from System.Reflection?
		for(int i=1; i < body.Length; i++)
			if (body[i-1] == opCodeDup && body[i] == opCodeMul) noccur++;
		if (noccur < 2) {
			Console.WriteLine("Optimization test failed.");
			return 1;
		}
		return 0;
	}	

	public class incrementer
	{ 
		int val = 5;
		public int getvalue() { return val++; }
	}
	public static int TestFunctionCallNotOptimizedAway() {
		incrementer inc = new incrementer();
		int rv = inc.getvalue()*inc.getvalue();
		if (rv != 30) {
			Console.WriteLine("Function call not optimized away test failed.");
			return 1;
		}
		return 0;
	}

	public static int Main()
	{
		Console.WriteLine("Testing sqr optimization...");
		return 
		TestAbsMethodIsCorrect() |
		TestAbsMethodIsOptimized() |
		TestFunctionCallNotOptimizedAway();
	}
}