Index: Application.cs
===================================================================
--- Application.cs	(revision 77301)
+++ Application.cs	(working copy)
@@ -68,7 +68,11 @@
 			}
 
 			public bool MessageLoop {
-				get { return messageloop_started; }
+				get {
+					if (messageLoopCallback != null)
+						return messageLoopCallback ();
+					return messageloop_started;
+				}
 				set { messageloop_started = value; }
 			}
 
@@ -378,12 +382,12 @@
 			}
 		}
 
-		[MonoNotSupported ("Empty stub.")]
 		public static void SetUnhandledExceptionMode (UnhandledExceptionMode mode)
 		{
-			//FIXME: a stub to fill
+			SetUnhandledExceptionMode (mode, true);
 		}
 
+		[EditorBrowsable (EditorBrowsableState.Advanced)]
 		public static void RaiseIdle (EventArgs e)
 		{
 			XplatUI.RaiseIdle (e);
@@ -452,6 +456,54 @@
 			Application.Exit ();
 			Process.Start (procInfo);
 		}
+
+		[MonoTODO ("e.Cancel must be set to true if any Form within the application cancelled the exit ")]
+		public static void Exit (CancelEventArgs e)
+		{
+			XplatUI.PostQuitMessage (0);
+			CloseForms (null);//must do something to called onFormClosing and OnformClosed
+			if (e != null)
+				e.Cancel = false;
+		}
+
+		public static bool FilterMessage (ref Message message)
+		{
+			bool result = false;
+			Message m = Message.Create (message.HWnd, (int)message.Msg, message.WParam, message.LParam);
+			lock (message_filters) {
+				for (int i = 0; i < message_filters.Count; i++) {
+					if (((IMessageFilter)message_filters[i]).PreFilterMessage (ref m))
+						result = true;
+				}
+			}
+			return result;
+		}
+
+		public delegate bool MessageLoopCallback ();
+		internal static MessageLoopCallback messageLoopCallback;
+ 
+		public static void RegisterMessageLoop (MessageLoopCallback callback)
+		{
+			messageLoopCallback = callback;
+		}
+
+		[MonoNotSupported ("Empty stub.")]
+		public static bool SetSuspendState (PowerState state, bool force, bool disableWakeEvent)
+		{
+			throw new NotImplementedException ();
+		}
+
+		[MonoNotSupported ("Empty stub.")]
+		public static void SetUnhandledExceptionMode (UnhandledExceptionMode mode, bool threadScope)
+		{
+			throw new NotImplementedException ();
+		}
+
+		public static void UnregisterMessageLoop ()
+		{
+			messageLoopCallback = null;
+		}
+
 #endif
 
 		public static void Exit() {
Index: Binding.cs
===================================================================
--- Binding.cs	(revision 77301)
+++ Binding.cs	(working copy)
@@ -45,18 +45,121 @@
 
 		private object data;
 		private Type data_type;
+		
+#if NET_2_0
 
+		private ControlUpdateMode control_update_mode;
+		private object Data_source_null_value;
+		private DataSourceUpdateMode data_source_update_mode;
+		private IFormatProvider format_info;
+		private string format_string;
+		private bool formatting_enabled;
+		private object null_value;
+ 
+#endif
+
+
 		#region Public Constructors
-		public Binding (string propertyName, object dataSource, string dataMember)
+		public Binding (string propertyName, object dataSource, string dataMember)			
+#if NET_2_0
+			:this (propertyName, dataSource, dataMember, false, DataSourceUpdateMode.OnValidation, null, String.Empty, null)
+		{}
+#else
 		{
 			property_name = propertyName;
 			data_source = dataSource;
 			data_member = dataMember;
 			binding_member_info = new BindingMemberInfo (dataMember);
 		}
+#endif
+#if NET_2_0
+
+		public Binding (string propertyName, Object dataSource, string dataMember, bool formattingEnabled):
+			this (propertyName, dataSource, dataMember, formattingEnabled, DataSourceUpdateMode.OnValidation, null, String.Empty, null)
+		{
+		}
+
+		public Binding (string propertyName, Object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode):
+			this (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, null, String.Empty, null)
+		{
+		}
+
+		public Binding (string propertyName, Object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, Object nullValue) :
+			this (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, String.Empty, null)
+		{
+		}
+
+		public Binding (string propertyName, Object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, Object nullValue, string formatString) : 
+			this (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, String.Empty, null)
+		{
+		}
+
+		public Binding (string propertyName, Object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, Object nullValue, string formatString, IFormatProvider formatInfo)
+		{
+			property_name = propertyName;
+			data_source = dataSource;
+			data_member = dataMember;
+			binding_member_info = new BindingMemberInfo (dataMember);
+			formatting_enabled = formattingEnabled;
+			data_source_update_mode = dataSourceUpdateMode;
+			null_value = nullValue;
+			format_string = formatString;
+			format_info = formatInfo;
+			Data_source_null_value = Convert.DBNull;
+		}
+#endif
 		#endregion	// Public Constructors
 
 		#region Public Instance Properties
+#if NET_2_0
+
+		[DefaultValue (null)]
+		public IBindableComponent BindableComponent { 
+			get { return control as IBindableComponent; }
+		}
+		
+		[DefaultValue (ControlUpdateMode.OnPropertyChanged)]
+		public ControlUpdateMode ControlUpdateMode {
+			get { return control_update_mode; }
+			set { control_update_mode = value; }
+		}
+		
+		public object DataSourceNullValue {
+			get { return Data_source_null_value; }
+			set { Data_source_null_value = value; }
+		}
+		[MonoTODO ("OnPropertyChanged is never used")]
+		[DefaultValue (DataSourceUpdateMode.OnValidation)]
+		public DataSourceUpdateMode DataSourceUpdateMode {
+			get { return data_source_update_mode; }
+			set { data_source_update_mode = value; }
+		}
+
+		[MonoTODO ("Modify ConvertData or FormatData to use it")]
+		public IFormatProvider FormatInfo {
+			get { return format_info; }
+			set { format_info = value; }
+		}
+
+		[MonoTODO ("Modify ConvertData or FormatData to use it")]
+		public string FormatString {
+			get { return format_string; }
+			set { format_string = value; }
+		}
+
+		[MonoTODO ("Modify ConvertData or FormatData to use it")]
+		public bool FormattingEnabled {
+			get { return formatting_enabled; }
+			set { formatting_enabled = value; }
+		}
+
+		public object NullValue {
+			get { return null_value; }
+			set { null_value = value; }
+		}
+		
+#endif
+
 		public BindingManagerBase BindingManagerBase {
 			get {
 				return manager;
@@ -112,9 +215,38 @@
 			if (Parse!=null)
 				Parse (this, cevent);
 		}
+		
+#if NET_2_0
+
+		[MonoTODO]
+		protected virtual void OnBindingComplete (BindingCompleteEventArgs e)
+		{
+			if (BindingComplete != null)
+				BindingComplete (this, e);
+		}
+
+#endif
 		#endregion	// Protected Instance Methods
 
-		
+		#region public Instance Methods
+
+#if NET_2_0
+
+		public void ReadValue ()
+		{
+			PushData ();
+		}
+
+		public void WriteValue ()
+		{
+			PullData ();
+		}
+
+#endif
+		#endregion // public Instance Methods
+
+		#region Private or Internal Instance Methods
+
 		internal void SetControl (Control control)
 		{
 			if (control == this.control)
@@ -148,37 +280,86 @@
 			PushData ();
 		}
 
+		[MonoTODO ("error text")]
 		internal void PullData ()
 		{
-			if (IsBinding == false || manager.Current == null)
+#if NET_2_0
+			if (control_update_mode == ControlUpdateMode.Never)
 				return;
+			BindingCompleteState state = BindingCompleteState.Success;
+			bool cancel = false;
+			Exception exe = null;
+			try	{
+#endif
 
-			data = control_property.GetValue (control);
-			SetPropertyValue (data);
+				if (IsBinding == false || manager.Current == null) {
+#if NET_2_0
+					cancel = true;
+#endif
+					return;
+				}
+				data = control_property.GetValue (control);
+				SetPropertyValue (data);
+#if NET_2_0
+			} catch (Exception ex) {
+				state = BindingCompleteState.Exception;
+				exe = ex;
+			} finally {
+				BindingCompleteEventArgs args = new BindingCompleteEventArgs (this, state, BindingCompleteContext.DataSourceUpdate, "", exe, cancel);
+				OnBindingComplete (args);
+			}
+#endif
 		}
 
+		[MonoTODO ("error text")]
 		internal void PushData ()
 		{
-			if (manager == null || manager.IsSuspended || manager.Current == null)
+#if NET_2_0
+			if (data_source_update_mode == DataSourceUpdateMode.Never)
 				return;
-
-			if (is_null_desc != null) {
-				bool is_null = (bool) is_null_desc.GetValue (manager.Current);
-				if (is_null) {
-					data = Convert.DBNull;
+			BindingCompleteState state = BindingCompleteState.Success;
+			bool cancel = false;
+			Exception exe = null;
+			try	{
+#endif
+				if (manager == null || manager.IsSuspended || manager.Current == null) {
+#if NET_2_0
+					cancel = true;
+#endif
 					return;
 				}
-			}
 
-			PropertyDescriptor pd = TypeDescriptor.GetProperties (manager.Current).Find (binding_member_info.BindingField, true);
-			if (pd == null) {
-				data = manager.Current;
-			} else {
-				data = pd.GetValue (manager.Current);
+				if (is_null_desc != null) {
+					bool is_null = (bool) is_null_desc.GetValue (manager.Current);
+					if (is_null) {
+#if NET_2_0
+						data = DataSourceNullValue;
+						cancel = true;
+#else
+						data = Convert.DBNull;
+#endif
+						return;
+					}
+				}
+
+				PropertyDescriptor pd = TypeDescriptor.GetProperties (manager.Current).Find (binding_member_info.BindingField, true);
+				if (pd == null) {
+					data = manager.Current;
+				} else {
+					data = pd.GetValue (manager.Current);
+				}
+
+				data = FormatData (data);
+				SetControlValue (data);
+	#if NET_2_0
+			} catch (Exception ex) {
+				state = BindingCompleteState.Exception;
+				exe = ex;
+			} finally {
+				BindingCompleteEventArgs args = new BindingCompleteEventArgs (this, state, BindingCompleteContext.DataSourceUpdate, "", exe, cancel);
+				OnBindingComplete (args);
 			}
-
-			data = FormatData (data);
-			SetControlValue (data);
+	#endif
 		}
 
 		internal void UpdateIsBinding ()
@@ -226,9 +407,15 @@
 			OnParse (e);
 			if (data_type.IsInstanceOfType (e.Value))
 				return e.Value;
+#if NET_2_0
+			if (e.Value == DataSourceNullValue)
+				return NullValue;
+#else
 			if (e.Value == Convert.DBNull)
 				return e.Value;
+#endif
 
+
 			return ConvertData (e.Value, data_type);
 		}
 
@@ -243,6 +430,14 @@
 			if (data_type.IsInstanceOfType (e.Value))
 				return e.Value;
 
+#if NET_2_0
+			if (data == NullValue)
+				return DataSourceNullValue;
+#else
+			if (data == null)
+				return Convert.DBNull;
+#endif
+
 			return ConvertData (data, data_type);
 		}
 
@@ -261,9 +456,14 @@
 			return null;
 		}
 
+		#endregion
+
 		#region Events
 		public event ConvertEventHandler Format;
 		public event ConvertEventHandler Parse;
+#if NET_2_0
+		public event BindingCompleteEventHandler BindingComplete;
+#endif
 		#endregion	// Events
 	}
 }
Index: BindingContext.cs
===================================================================
--- BindingContext.cs	(revision 77301)
+++ BindingContext.cs	(working copy)
@@ -23,7 +23,6 @@
 //	Peter Bartok	pbartok@novell.com
 //	Jackson Harper	jackson@ximian.com
 
-
 using System.Data;
 using System.Collections;
 using System.Globalization;
@@ -96,6 +95,8 @@
 			}
 		}
 
+		#region private Methods
+
 		private BindingManagerBase CreateBindingManager (object data_source, string data_member)
 		{
 			if (data_member == "") {
@@ -127,6 +128,21 @@
 				|| typeof (IListSource).IsAssignableFrom (t));
 		}
 
+		#endregion
+
+		#region Static Methods
+
+#if NET_2_0
+
+		public static void UpdateBinding (BindingContext newBindingContext, Binding binding)
+		{
+			binding.BindableComponent.BindingContext = newBindingContext;
+		}
+
+#endif
+
+		#endregion
+
 		#region Public Instance Methods
 		public bool Contains(object dataSource)
 		{
@@ -143,6 +159,7 @@
 			HashKey key = new HashKey (dataSource, dataMember);
 			return managers [key] != null;
 		}
+
 		#endregion	// Public Instance Methods
 
 		#region Protected Instance Methods
