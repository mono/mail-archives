Index: mono/mono/metadata/ChangeLog
===================================================================
--- mono/mono/metadata/ChangeLog	(revision 143408)
+++ mono/mono/metadata/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2009-10-05  Bill Holmes  <billholmes54@gmail.com>
+
+	* object.c (mono_method_return_message_restore) : Adding the 
+	  MONO_TYPE_GENERICINST case to handle generic arguments.
+
+	Code is contributed under MIT/X11 license.
+
 2009-10-04  Zoltan Varga  <vargaz@gmail.com>
 
 	* appdomain.c (copy_app_domain_setup): Fix a warning.
Index: mono/mono/metadata/object.c
===================================================================
--- mono/mono/metadata/object.c	(revision 143408)
+++ mono/mono/metadata/object.c	(working copy)
@@ -5571,6 +5571,7 @@
 			case MONO_TYPE_ARRAY:
 			case MONO_TYPE_SZARRAY:
 			case MONO_TYPE_OBJECT:
+			case MONO_TYPE_GENERICINST:
 				**((MonoObject ***)params [i]) = (MonoObject *)arg;
 				break;
 			default:
Index: mono/mono/tests/generic-remoting.cs
===================================================================
--- mono/mono/tests/generic-remoting.cs	(revision 0)
+++ mono/mono/tests/generic-remoting.cs	(revision 0)
@@ -0,0 +1,42 @@
+using System;
+using System.Runtime.Remoting;
+using System.Runtime.Remoting.Messaging;
+using System.Runtime.Remoting.Proxies;
+using System.Collections.Generic;
+
+class MyProxy : RealProxy {
+	readonly MarshalByRefObject target;
+
+	public MyProxy (MarshalByRefObject target) : base (target.GetType())
+	{
+		this.target = target;
+	}
+
+	public override IMessage Invoke (IMessage request) {
+		IMethodCallMessage call = (IMethodCallMessage)request;
+		return RemotingServices.ExecuteMessage (target, call);
+	}
+}
+	
+class R1 : MarshalByRefObject {
+
+	public void foo (out  Dictionary<string, int> paramAssignmentStatus) {
+
+		paramAssignmentStatus = new Dictionary<string, int> ();
+		paramAssignmentStatus.Add ("One", 1);
+	}
+}
+
+class Test {
+	
+	static int Main () {
+		MyProxy real_proxy = new MyProxy (new R1 ());
+		R1 o = (R1)real_proxy.GetTransparentProxy ();
+		
+		Dictionary<string, int> i;
+		o.foo (out i);
+		if (1 == i["One"])
+			return 0;
+		return 1;
+	}
+}
Index: mono/mono/tests/Makefile.am
===================================================================
--- mono/mono/tests/Makefile.am	(revision 143408)
+++ mono/mono/tests/Makefile.am	(working copy)
@@ -293,6 +293,7 @@
 	generic-typedef.2.cs	\
 	generic-marshalbyref.2.cs	\
 	generic-xdomain.2.cs	\
+	generic-remoting.cs	\
 	bug-431413.2.cs	\
 	bug-459285.2.cs	\
 	generic-virtual-invoke.2.cs	\
Index: mono/mono/tests/ChangeLog
===================================================================
--- mono/mono/tests/ChangeLog	(revision 143408)
+++ mono/mono/tests/ChangeLog	(working copy)
@@ -1,3 +1,11 @@
+2009-10-05  Bill Holmes  <billholmes54@gmail.com>
+
+	* generic-remoting.cs : Added to test remotng with generic arguments. 
+
+	* Makefile.am : Adding generic-remoting.
+
+	Code is contributed under MIT/X11 license.
+
 2009-10-04  Zoltan Varga  <vargaz@gmail.com>
 
 	* Makefile.am: Replace make_imt_test_.sh with a faster C# version.