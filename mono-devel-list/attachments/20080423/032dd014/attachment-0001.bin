Index: mono/mono/mini/inssel-amd64.brg
===================================================================
--- mono/mono/mini/inssel-amd64.brg	(revision 101494)
+++ mono/mono/mini/inssel-amd64.brg	(working copy)
@@ -199,6 +199,18 @@
 	mono_bblock_add_inst (s->cbb, tree);
 }
 
+stmt: OP_OUTARG_MEMBASE (reg) {
+	int esp_displ = (tree->backend.arg_info >> 16) & 0xffff;
+	int esp_offset = tree->backend.arg_info & 0xffff;
+	if (esp_displ)
+		MONO_EMIT_NEW_BIALU_IMM (s, OP_SUB_IMM, X86_ESP, X86_ESP, esp_displ);
+	tree->opcode = OP_STOREI8_MEMBASE_REG;
+	tree->sreg1 = state->left->reg1;
+	tree->inst_destbasereg = X86_ESP;
+	tree->inst_offset = esp_offset;
+	mono_bblock_add_inst (s->cbb, tree);
+}
+
 stmt: OP_OUTARG_REG (reg) {	
 	MonoCallInst *call = tree->inst_call;
 
Index: mono/mono/mini/mini-amd64.c
===================================================================
--- mono/mono/mini/mini-amd64.c	(revision 101494)
+++ mono/mono/mini/mini-amd64.c	(working copy)
@@ -270,6 +270,9 @@
 		ainfo->storage = ArgInIReg;
 		ainfo->reg = param_regs [*gr];
 		(*gr) ++;
+#ifdef PLATFORM_WIN32
+		(*stack_size) += sizeof (gpointer);
+#endif
     }
 }
 
@@ -697,9 +700,9 @@
 	}
 
 #ifdef PLATFORM_WIN32
-	if (stack_size < 32) {
+	if (stack_size < 0x20) {
 		/* The Win64 ABI requires 32 bits  */
-		stack_size = 32;
+		stack_size = 0x20;
 	}
 #endif
 
@@ -1286,6 +1289,9 @@
 	int i, n, stack_size;
 	CallInfo *cinfo;
 	ArgInfo *ainfo;
+#ifdef PLATFORM_WIN32
+	int args_space = 0, args_offset = 0;
+#endif
 
 	stack_size = 0;
 
@@ -1424,6 +1430,19 @@
 							if (sig->params [i - sig->hasthis]->type == MONO_TYPE_R8)
 								arg->opcode = OP_OUTARG_R8;
 					}
+#ifdef PLATFORM_WIN32
+					arg->opcode = OP_OUTARG_MEMBASE;
+					/* we store in the upper bits of backen.arg_info the needed
+					* esp adjustment and in the lower bits the offset from esp
+					* where the arg needs to be stored
+					*/
+					if (!args_space)
+						args_offset = args_space = n*(sizeof(void*));
+					arg->backend.arg_info = args_space - args_offset + 0x20;
+					args_offset -= sizeof (void*);
+					if (i == n-1)
+						arg->backend.arg_info |= args_space << 16;
+#endif
 					break;
 				default:
 					g_assert_not_reached ();
Index: mono/mono/mini/ChangeLog
===================================================================
--- mono/mono/mini/ChangeLog	(revision 101494)
+++ mono/mono/mini/ChangeLog	(working copy)
@@ -1,3 +1,14 @@
+2008-04-23  Jonathan Chambers <joncham@gmail.com>
+
+	* mini-amd64.c (add_general): Always increment stack on Win64.
+	(mono_arch_call_opcode): Use OP_OUTARG_MEMBASE instead of OP_OUTARG
+	on Win64.
+	
+	* inssel-amd64.brg (OP_OUTARG_MEMBASE): Add OP_OUTARG_MEMBASE for 
+	stack based argument handling on Win64.
+	
+	Code contributed under MIT/X11 license.
+
 2008-04-22  Zoltan Varga  <vargaz@gmail.com>
 
 	* mini-exceptions.c (mono_handle_native_sigsegv): Rework the gdb calling code