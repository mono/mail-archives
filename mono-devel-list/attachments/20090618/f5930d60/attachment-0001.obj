
using System;
using System.Runtime.InteropServices;
using System.Text;
using MbUnit.Framework;
using MbUnit.Core;

namespace NormalizationTest
{
	[TestFixture]
	public class NormalizationTests
	{
		
		[RowTest]
		[Row(new char[] { '\u004C', '\u0061', '\u0301', '\u0074', '\u0069', '\u0308', '\u006E', '\u0303', '\u0020', '\u004F', '\u0302', '\u006E', '\u0065', '\u0300' }, new char[] {'\u004C', '\u00E1', '\u0074', '\u00EF', '\u00F1', '\u0020', '\u00D4', '\u006E', '\u00E8'})]
		[Row(new char[] { '\u039B', '\u03BF', '\u0301', '\u03B3', '\u03BF', '\u03C2' }, new char[] {'\u039B', '\u03CC', '\u03B3', '\u03BF', '\u03C2'})]
		[Row(new char[] { '\u0043', '\u006F', '\u006D', '\u0062', '\u006F', '\u0020', '\u039B', '\u03BF', '\u0301', '\u03B3', '\u03BF', '\u03C2', '\u0020', '\u05D4', '\u05B8', '\u05D9', '\u05B8', '\u05D4', '\u0020', '\u05D4', '\u05B7', '\u05D3', '\u05B8', '\u05BC', '\u05D1', '\u05B8', '\u05E8', '\u0020', '\u043F', '\u043E', '\u0447', '\u0435', '\u0442', '\u043A', '\u0443', '\u0020', '\u306F', '\u306B', '\u3088', '\u0020', '\u0073', '\u0074', '\u0072', '\u0069', '\u006E', '\u0067' },
		 	new char[] {'\u0043', '\u006F', '\u006D', '\u0062', '\u006F', '\u0020', '\u039B', '\u03CC', '\u03B3', '\u03BF', '\u03C2', '\u0020', '\u05D4', '\u05B8', '\u05D9', '\u05B8', '\u05D4', '\u0020', '\u05D4', '\u05B7', '\u05D3', '\u05B8', '\u05BC', '\u05D1', '\u05B8', '\u05E8', '\u0020', '\u043F', '\u043E', '\u0447', '\u0435', '\u0442', '\u043A', '\u0443', '\u0020', '\u306F', '\u306B', '\u3088', '\u0020', '\u0073', '\u0074', '\u0072', '\u0069', '\u006E', '\u0067'})]
		[Row(new char[] { '\u03B1', '\u0313', '\u0345' }, new char[] { '\u1F80'})]
		public void TestNormalizeWithMono(char[] achInput, char[] achExpected)
		{
			string strToNormalize = new string(achInput);
			string strExpected = new string(achExpected);
			string monoNorm = strToNormalize.Normalize(NormalizationForm.FormC);

			Console.WriteLine("normalize(NormalizationForm.formC): {0}", monoNorm);
			Console.WriteLine("Mono gives strExpected: {0}", monoNorm == strExpected);

			WriteCharsToConsole(monoNorm, strExpected);
			Assert.AreEqual(monoNorm, strExpected);
		}
		
		private void WriteCharsToConsole(string strNorm, string strExpected)
		{
			byte[] normBytes = Encoding.Unicode.GetBytes(strNorm);
			byte[] expectedBytes = Encoding.Unicode.GetBytes(strExpected);

			Console.WriteLine("Input Chars Before Normalization:");
			for (int byteIndex = 0; byteIndex < normBytes.Length; byteIndex += 2)
				Console.Write("'\\u{1:X2}{2:X2}', ", byteIndex / 2, (byteIndex + 1 >= normBytes.Length ? (byte) 0 : normBytes[byteIndex+1]), normBytes[byteIndex]);
			Console.WriteLine("");
			
			Console.WriteLine("Expected Chars After Normalization:");
			for (int byteIndex = 0; byteIndex < expectedBytes.Length; byteIndex += 2)
				Console.Write("'\\u{1:X2}{2:X2}', ", byteIndex / 2, (byteIndex + 1 >= expectedBytes.Length ? (byte) 0 : expectedBytes[byteIndex+1]), expectedBytes[byteIndex]);
			Console.WriteLine("");
		}
	}
	
	public class Program
	{
		public static int Main(string[] args)
		{
			using (AutoRunner runner = new AutoRunner())
			{
				runner.Load();
				runner.Run();
				return runner.ExitCode;
			}
		}
	}
}