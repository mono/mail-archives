Index: System.Xml.Serialization/TypeData.cs
===================================================================
--- System.Xml.Serialization/TypeData.cs	(revision 53393)
+++ System.Xml.Serialization/TypeData.cs	(working copy)
@@ -32,6 +32,7 @@
 using System;
 using System.Collections;
 using System.Reflection;
+using System.Xml.Schema;
 
 namespace System.Xml.Serialization
 {
@@ -45,10 +46,17 @@
 		string fullTypeName;
 		TypeData listItemTypeData;
 		TypeData listTypeData;
+		TypeData mappedType;
+		XmlSchemaPatternFacet facet;
 		bool hasPublicConstructor = true;
 
-		public TypeData (Type type, string elementName, bool isPrimitive)
+		public TypeData (Type type, string elementName, bool isPrimitive) :
+			this(type, elementName, isPrimitive, null, null) {}
+
+		public TypeData (Type type, string elementName, bool isPrimitive, TypeData mappedType, XmlSchemaPatternFacet facet)
 		{
+			this.mappedType = mappedType;
+			this.facet = facet;
 			this.type = type;
 			this.typeName = type.Name;
 			this.fullTypeName = type.FullName.Replace ('+', '.');
@@ -137,7 +145,8 @@
 					      SchemaType == SchemaTypes.Array ||
 					      SchemaType == SchemaTypes.Enum ||
 					      SchemaType == SchemaTypes.XmlNode ||
-						  SchemaType == SchemaTypes.XmlSerializable ); 
+						  SchemaType == SchemaTypes.XmlSerializable ||
+						  !IsXsdType); 
 			}
 		}
 
@@ -212,6 +221,22 @@
 				return listTypeData;
 			}
 		}
+
+		public bool IsXsdType {
+			get { return mappedType == null; }
+		}
+
+		public TypeData MappedType {
+			get {
+				return mappedType != null ? mappedType : this;
+			}
+		}
+
+		public XmlSchemaPatternFacet XmlSchemaPatternFacet {
+			get {
+				return facet;
+			}
+		}
 		
 		public bool HasPublicConstructor
 		{
Index: System.Xml.Serialization/XmlSchemaExporter.cs
===================================================================
--- System.Xml.Serialization/XmlSchemaExporter.cs	(revision 53393)
+++ System.Xml.Serialization/XmlSchemaExporter.cs	(working copy)
@@ -517,6 +517,8 @@
 
 					case SchemaTypes.Primitive:
 						selem.SchemaTypeName = new XmlQualifiedName (einfo.TypeData.XmlType, einfo.DataTypeNamespace);;
+						if (!einfo.TypeData.IsXsdType)
+							ExportDerivedSchema (einfo.MappedType);
 						break;
 				}
 			}
@@ -620,6 +622,23 @@
 			}
 		}
 
+		void ExportDerivedSchema(XmlTypeMapping map) {
+			if (IsMapExported (map)) return;
+			SetMapExported (map);
+
+			XmlSchema schema = GetSchema (map.XmlTypeNamespace);
+			XmlSchemaSimpleType stype = new XmlSchemaSimpleType ();
+			stype.Name = map.ElementName;
+			schema.Items.Add (stype);
+
+			XmlSchemaSimpleTypeRestriction rest = new XmlSchemaSimpleTypeRestriction ();
+			rest.BaseTypeName = new XmlQualifiedName (map.TypeData.MappedType.XmlType, XmlSchema.Namespace);
+			XmlSchemaPatternFacet facet = map.TypeData.XmlSchemaPatternFacet;
+			if (facet != null)
+				rest.Facets.Add(facet);
+			stype.Content = rest;
+		}
+
 		void ExportEnumSchema (XmlTypeMapping map)
 		{
 			if (IsMapExported (map)) return;
Index: System.Xml.Serialization/TypeTranslator.cs
===================================================================
--- System.Xml.Serialization/TypeTranslator.cs	(revision 53393)
+++ System.Xml.Serialization/TypeTranslator.cs	(working copy)
@@ -34,6 +34,7 @@
 using System;
 using System.Collections;
 using System.Globalization;
+using System.Xml.Schema;
 
 namespace System.Xml.Serialization
 {
@@ -58,13 +59,15 @@
 			nameCache.Add (typeof (float), new TypeData (typeof (float), "float", true));
 			nameCache.Add (typeof (double), new TypeData (typeof (double), "double", true));
 			nameCache.Add (typeof (DateTime), new TypeData (typeof (DateTime), "dateTime", true));	// TODO: timeInstant, Xml date, xml time
-			nameCache.Add (typeof (Guid), new TypeData (typeof (Guid), "guid", true));
 			nameCache.Add (typeof (decimal), new TypeData (typeof (decimal), "decimal", true));
 			nameCache.Add (typeof (XmlQualifiedName), new TypeData (typeof (XmlQualifiedName), "QName", true));
 			nameCache.Add (typeof (string), new TypeData (typeof (string), "string", true));
+			XmlSchemaPatternFacet guidFacet = new XmlSchemaPatternFacet();
+			guidFacet.Value = "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}";
+			nameCache.Add (typeof (Guid), new TypeData (typeof (Guid), "guid", true, (TypeData)nameCache[typeof (string)], guidFacet));
 			nameCache.Add (typeof (byte), new TypeData (typeof (byte), "unsignedByte", true));
 			nameCache.Add (typeof (sbyte), new TypeData (typeof (sbyte), "byte", true));
-			nameCache.Add (typeof (char), new TypeData (typeof (char), "char", true));
+			nameCache.Add (typeof (char), new TypeData (typeof (char), "char", true, (TypeData)nameCache[typeof (ushort)], null));
 			nameCache.Add (typeof (object), new TypeData (typeof (object), "anyType", false));
 			nameCache.Add (typeof (byte[]), new TypeData (typeof (byte[]), "base64Binary", true));
 			nameCache.Add (typeof (XmlNode), new TypeData (typeof (XmlNode), "XmlNode", false));
