Index: mono/mono/metadata/cominterop.c
===================================================================
--- mono/mono/metadata/cominterop.c	(revision 134973)
+++ mono/mono/metadata/cominterop.c	(working copy)
@@ -32,6 +32,7 @@
 #include "mono/metadata/attrdefs.h"
 #include "mono/metadata/gc-internal.h"
 #include "mono/utils/mono-counters.h"
+#include "mono/metadata/marshal-hooks.h"
 #include <string.h>
 #include <errno.h>
 
@@ -2409,8 +2410,8 @@
 	return TRUE;
 }
 
-gpointer
-mono_string_to_bstr (MonoString *string_obj)
+static gpointer
+mono_string_to_bstr_default (MonoString *string_obj)
 {
 	if (!string_obj)
 		return NULL;
@@ -2441,12 +2442,13 @@
 		return ret;
 	} else {
 		g_assert_not_reached ();
+		return 0;
 	}
 #endif
 }
 
-MonoString *
-mono_string_from_bstr (gpointer bstr)
+static MonoString *
+mono_string_from_bstr_default (gpointer bstr)
 {
 	if (!bstr)
 		return NULL;
@@ -2466,13 +2468,14 @@
 		return str;
 	} else {
 		g_assert_not_reached ();
+		return 0;
 	}
 
 #endif
 }
 
-void
-mono_free_bstr (gpointer bstr)
+static void
+mono_free_bstr_default (gpointer bstr)
 {
 	if (!bstr)
 		return;
@@ -2490,6 +2493,41 @@
 #endif
 }
 
+static MonoStringToBstrFunc mono_string_to_bstr_pfunc = mono_string_to_bstr_default;
+static MonoStringFromBstrFunc mono_string_from_bstr_pfunc = mono_string_from_bstr_default;
+static MonoFreeBstrFunc mono_free_bstr_pfunc = mono_free_bstr_default;
+
+void 
+mono_install_bstr_funcs (MonoStringToBstrFunc new_mono_string_to_bstr_pfunc,
+		   	 MonoStringFromBstrFunc new_mono_string_from_bstr_pfunc,
+			 MonoFreeBstrFunc new_mono_free_bstr_pfunc)
+{
+	if (!(new_mono_string_to_bstr_pfunc && new_mono_string_from_bstr_pfunc && new_mono_free_bstr_pfunc))
+		g_assert_not_reached ();
+	
+	mono_string_to_bstr_pfunc = new_mono_string_to_bstr_pfunc;
+	mono_string_from_bstr_pfunc = new_mono_string_from_bstr_pfunc;
+	mono_free_bstr_pfunc = new_mono_free_bstr_pfunc;
+}
+
+gpointer
+mono_string_to_bstr (MonoString *string_obj)
+{
+	return mono_string_to_bstr_pfunc (string_obj);
+}
+
+MonoString *
+mono_string_from_bstr (gpointer bstr)
+{
+	return mono_string_from_bstr_pfunc (bstr);
+}
+
+void
+mono_free_bstr (gpointer bstr)
+{
+	mono_free_bstr_pfunc (bstr);
+}
+
 #else /* DISABLE_COM */
 
 void
@@ -2533,4 +2571,11 @@
 	g_assert_not_reached ();
 }
 
+void 
+mono_install_bstr_funcs (MonoStringToBstrFunc new_mono_string_to_bstr_pfunc,
+		   	 MonoStringFromBstrFunc new_mono_string_from_bstr_pfunc,
+			 MonoFreeBstrFunc new_mono_free_bstr_pfunc)
+{
+	g_assert_not_reached ();
+}
 #endif /* DISABLE_COM */
Index: mono/mono/metadata/ChangeLog
===================================================================
--- mono/mono/metadata/ChangeLog	(revision 134973)
+++ mono/mono/metadata/ChangeLog	(working copy)
@@ -1,3 +1,30 @@
+2009-05-28  Bill Holmes  <billholmes54@gmail.com>
+
+	* marshal-hooks.h : Adding declaration for 
+	  mono_install_alloc_hglobal_funcs and mono_install_alloc_cotaskmem_funcs.
+
+	* marshal.c : Adding mono_install_alloc_hglobal_funcs to override alloc,
+	  realloc and free functions for HGlobal
+
+	* marshal.c : Adding mono_install_alloc_cotaskmem_funcs to override alloc,
+	  realloc and free functions for CoTaskMem
+
+	Code is contributed under MIT/X11 license.
+
+
+2009-05-28  Bill Holmes  <billholmes54@gmail.com>
+
+	* cominterop.c : mono_string_to_bstr, mono_string_from_bstr and
+	  mono_free_bstr changed to call external hooks if installed.
+	  mono_install_bstr_funcs added to the set the hooks.
+
+	* marshal-hooks.h : Added to declare mono_install_bstr_funcs
+
+	* Makefile.am : Adding marshal-hooks.h to the list of public API
+	  header files.
+
+	Code is contributed under MIT/X11 license.
+
 2009-05-28  Zoltan Varga  <vargaz@gmail.com>
 
 	* reflection-save.c: New file, a copy of reflection.c which will contain
Index: mono/mono/metadata/marshal-hooks.h
===================================================================
--- mono/mono/metadata/marshal-hooks.h	(revision 0)
+++ mono/mono/metadata/marshal-hooks.h	(revision 0)
@@ -0,0 +1,36 @@
+#ifndef _MONO_MARSHAL_HOOKS_H_
+#define _MONO_MARSHAL_HOOKS_H_
+
+G_BEGIN_DECLS
+
+typedef gpointer (*MonoStringToBstrFunc)(MonoString *string_obj);
+typedef MonoString * (*MonoStringFromBstrFunc)(gpointer bstr);
+typedef void (*MonoFreeBstrFunc)(gpointer str);
+
+void 
+mono_install_bstr_funcs (MonoStringToBstrFunc new_mono_string_to_bstr_pfunc,
+			 MonoStringFromBstrFunc new_mono_string_from_bstr_pfunc,
+			 MonoFreeBstrFunc new_mono_free_bstr_pfunc);
+
+typedef void* (*MonoMarshalAllocHGlobalFunc)(int size);
+typedef gpointer (*MonoMarshalReAllocHGlobalFunc)(gpointer ptr, int size);
+typedef void (*MonoMarshalFreeHGlobalFunc)(void *ptr);
+
+void 
+mono_install_alloc_hglobal_funcs (MonoMarshalAllocHGlobalFunc alloc_fprt,
+				  MonoMarshalReAllocHGlobalFunc realloc_fptr,
+				  MonoMarshalFreeHGlobalFunc free_fptr);
+
+typedef void* (*MonoMarshalAllocCoTaskMemFunc)(int size);
+typedef gpointer (*MonoMarshalReAllocCoTaskMemFunc)(gpointer ptr, int size);
+typedef void (*MonoMarshalFreeCoTaskMemFunc)(void *ptr);
+
+void 
+mono_install_alloc_cotaskmem_funcs (MonoMarshalAllocCoTaskMemFunc alloc_fprt,
+				    MonoMarshalReAllocCoTaskMemFunc realloc_fptr,
+				    MonoMarshalFreeCoTaskMemFunc free_fptr);
+
+G_END_DECLS
+
+#endif
+
Index: mono/mono/metadata/Makefile.am
===================================================================
--- mono/mono/metadata/Makefile.am	(revision 134973)
+++ mono/mono/metadata/Makefile.am	(working copy)
@@ -179,6 +179,7 @@
 	exception.h		\
 	image.h			\
 	loader.h		\
+	marshal-hooks.h		\
 	mempool.h		\
 	metadata.h		\
 	mono-config.h		\
Index: mono/mono/metadata/marshal.c
===================================================================
--- mono/mono/metadata/marshal.c	(revision 134973)
+++ mono/mono/metadata/marshal.c	(working copy)
@@ -35,6 +35,7 @@
 #include "mono/metadata/gc-internal.h"
 #include "mono/metadata/cominterop.h"
 #include "mono/utils/mono-counters.h"
+#include "mono/metadata/marshal-hooks.h"
 #include <string.h>
 #include <errno.h>
 
@@ -9758,8 +9759,8 @@
 	mono_struct_delete_old (klass, (char *)src);
 }
 
-void*
-ves_icall_System_Runtime_InteropServices_Marshal_AllocHGlobal (int size)
+static void*
+mono_marshal_allochglobal_default (int size)
 {
 	gpointer res;
 
@@ -9780,8 +9781,8 @@
 	return res;
 }
 
-gpointer
-ves_icall_System_Runtime_InteropServices_Marshal_ReAllocHGlobal (gpointer ptr, int size)
+static gpointer
+mono_marshal_reallochglobal_default (gpointer ptr, int size)
 {
 	gpointer res;
 
@@ -9801,8 +9802,8 @@
 	return res;
 }
 
-void
-ves_icall_System_Runtime_InteropServices_Marshal_FreeHGlobal (void *ptr)
+static void
+mono_marshal_freehglobal_default (void *ptr)
 {
 	MONO_ARCH_SAVE_REGS;
 
@@ -9813,9 +9814,44 @@
 #endif
 }
 
+static MonoMarshalAllocHGlobalFunc mono_marshal_allochglobal_fptr = mono_marshal_allochglobal_default;
+static MonoMarshalReAllocHGlobalFunc mono_marshal_reallochglobal_fptr = mono_marshal_reallochglobal_default;
+static MonoMarshalFreeHGlobalFunc mono_marshal_freehglobal_fptr = mono_marshal_freehglobal_default;
+
 void*
-ves_icall_System_Runtime_InteropServices_Marshal_AllocCoTaskMem (int size)
+ves_icall_System_Runtime_InteropServices_Marshal_AllocHGlobal (int size)
 {
+	return mono_marshal_allochglobal_fptr (size);
+}
+
+gpointer
+ves_icall_System_Runtime_InteropServices_Marshal_ReAllocHGlobal (gpointer ptr, int size)
+{
+	return mono_marshal_reallochglobal_fptr (ptr, size);
+}
+
+void
+ves_icall_System_Runtime_InteropServices_Marshal_FreeHGlobal (void *ptr)
+{
+	mono_marshal_freehglobal_fptr (ptr);
+}
+
+void 
+mono_install_alloc_hglobal_funcs (MonoMarshalAllocHGlobalFunc alloc_fprt,
+				  MonoMarshalReAllocHGlobalFunc realloc_fptr,
+				  MonoMarshalFreeHGlobalFunc free_fptr)
+{
+	if (!(alloc_fprt && realloc_fptr && free_fptr))
+		g_assert_not_reached ();
+
+	mono_marshal_allochglobal_fptr = alloc_fprt;
+	mono_marshal_reallochglobal_fptr = realloc_fptr;
+	mono_marshal_freehglobal_fptr = free_fptr;
+}
+
+static void*
+mono_marshal_alloccotaskmem_default (int size)
+{
 	MONO_ARCH_SAVE_REGS;
 
 #ifdef PLATFORM_WIN32
@@ -9825,8 +9861,8 @@
 #endif
 }
 
-void
-ves_icall_System_Runtime_InteropServices_Marshal_FreeCoTaskMem (void *ptr)
+static void
+mono_marshal_freecotaskmem_default (void *ptr)
 {
 	MONO_ARCH_SAVE_REGS;
 
@@ -9837,8 +9873,8 @@
 #endif
 }
 
-gpointer
-ves_icall_System_Runtime_InteropServices_Marshal_ReAllocCoTaskMem (gpointer ptr, int size)
+static gpointer
+mono_marshal_realloccotaskmem_default (gpointer ptr, int size)
 {
 	MONO_ARCH_SAVE_REGS;
 
@@ -9849,7 +9885,42 @@
 #endif
 }
 
+static MonoMarshalAllocCoTaskMemFunc mono_marshal_alloccotaskmem_fptr = mono_marshal_alloccotaskmem_default;
+static MonoMarshalReAllocCoTaskMemFunc mono_marshal_realloccotaskmem_fptr = mono_marshal_realloccotaskmem_default;
+static MonoMarshalFreeCoTaskMemFunc mono_marshal_freecotaskmem_fptr = mono_marshal_freecotaskmem_default;
+
 void*
+ves_icall_System_Runtime_InteropServices_Marshal_AllocCoTaskMem (int size)
+{
+	return mono_marshal_alloccotaskmem_fptr (size);
+}
+
+void
+ves_icall_System_Runtime_InteropServices_Marshal_FreeCoTaskMem (void *ptr)
+{
+	mono_marshal_freecotaskmem_fptr (ptr);
+}
+
+gpointer
+ves_icall_System_Runtime_InteropServices_Marshal_ReAllocCoTaskMem (gpointer ptr, int size)
+{
+	return mono_marshal_realloccotaskmem_fptr (ptr, size);
+}
+
+void 
+mono_install_alloc_cotaskmem_funcs (MonoMarshalAllocCoTaskMemFunc alloc_fprt,
+				    MonoMarshalReAllocCoTaskMemFunc realloc_fptr,
+				    MonoMarshalFreeCoTaskMemFunc free_fptr)
+{
+	if (!(alloc_fprt && realloc_fptr && free_fptr))
+		g_assert_not_reached ();
+
+	mono_marshal_alloccotaskmem_fptr = alloc_fprt;
+	mono_marshal_realloccotaskmem_fptr = realloc_fptr;
+	mono_marshal_freecotaskmem_fptr = free_fptr;
+}
+
+void*
 ves_icall_System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement (MonoArray *arrayobj, int index)
 {
 	return mono_array_addr_with_size (arrayobj, mono_array_element_size (arrayobj->obj.vtable->klass), index);