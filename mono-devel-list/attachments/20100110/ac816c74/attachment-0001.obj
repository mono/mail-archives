Index: class/System.ServiceModel/Test/System.ServiceModel.Channels/BufferManagerTest.cs
===================================================================
--- class/System.ServiceModel/Test/System.ServiceModel.Channels/BufferManagerTest.cs	(revision 0)
+++ class/System.ServiceModel/Test/System.ServiceModel.Channels/BufferManagerTest.cs	(revision 0)
@@ -0,0 +1,107 @@
+// System.ServiceModel.Channels.BufferManagerTest.cs
+//
+// Author:
+//      Thad Thompson <thad.thompson@gmail.com>
+//
+
+using NUnit.Framework;
+
+using System;
+using System.ServiceModel.Channels;
+
+namespace MonoTests.System.ServiceModel.Channels
+{
+        [TestFixture]
+        public class BufferManagerTest
+        {
+                [Test]
+                public void Creation()
+                {
+                        // Valid buffer manager
+                        BufferManager mg1 = BufferManager.CreateBufferManager(256, 256);
+                        BufferManager mg2 = BufferManager.CreateBufferManager(5, 256);
+                        BufferManager mg3 = BufferManager.CreateBufferManager(256, 5);
+
+                        try
+                        {
+                                BufferManager mgFail1 = BufferManager.CreateBufferManager(-1, 256);
+                                Assert.Fail("Exception not thrown");
+                        }
+                        catch(ArgumentOutOfRangeException)
+                        {
+                        }
+
+                        try
+                        {
+                                BufferManager mgFail2 = BufferManager.CreateBufferManager(256, -256);
+                                Assert.Fail("Exception not thrown");
+                        }
+                        catch(ArgumentOutOfRangeException)
+                        {
+                        }
+                }
+
+                [Test]
+                public void TakeBuffer()
+                {
+                        BufferManager manager = BufferManager.CreateBufferManager(512, 128);
+                        
+                        // Valid allocations
+                        byte[] buf1 = manager.TakeBuffer(128);
+                        byte[] buf2 = manager.TakeBuffer(512);
+                        byte[] buf3 = manager.TakeBuffer(1024);
+
+                        Assert.IsNotNull(buf1);
+                        Assert.IsNotNull(buf2);
+                        Assert.IsNotNull(buf3);
+
+                        Assert.GreaterOrEqual(128, buf1.Length);
+                        Assert.GreaterOrEqual(512, buf2.Length);
+                        Assert.GreaterOrEqual(1024, buf3.Length);
+
+                        // Invalid allocation
+                        try
+                        {
+                                byte[] bufFail = manager.TakeBuffer(-1024);
+                                Assert.Fail("Exception not thrown");
+                        }
+                        catch(ArgumentOutOfRangeException)
+                        {
+                        }
+                }
+
+                [Test]
+                public void ReturnBuffer()
+                {
+                        BufferManager manager = BufferManager.CreateBufferManager(512, 128);
+                        byte[] buf1 = manager.TakeBuffer(128);
+
+                        manager.ReturnBuffer(buf1);
+
+                        try
+                        {
+                                manager.ReturnBuffer(null);
+                                Assert.Fail("Exception not thrown");
+                        }
+                        catch(ArgumentNullException)
+                        {
+                        }
+                }
+
+                [Test]
+                public void UniqueBufferTest()
+                {
+                        BufferManager manager = BufferManager.CreateBufferManager(256, 128);
+                        byte[] buf1 = manager.TakeBuffer(128);
+                        byte[] buf2 = manager.TakeBuffer(128);
+
+                        Random rand = new Random();
+                        rand.NextBytes(buf1);
+                        rand.NextBytes(buf2);
+
+                        // Two allocated buffers must not reference the same
+                        chunk of memory
+                        Assert.AreNotEqual(buf1, buf2);
+                }
+        }
+}
Index: class/System.ServiceModel/System.ServiceModel.Channels/BufferManager.cs
===================================================================
--- class/System.ServiceModel/System.ServiceModel.Channels/BufferManager.cs	(revision 149283)
+++ class/System.ServiceModel/System.ServiceModel.Channels/BufferManager.cs	(working copy)
@@ -51,42 +51,45 @@
 
 		public abstract byte[] TakeBuffer (int bufferSize);
 
+		// This default buffer manager does nothing other than provide 
+		// a pretty interface around regular garbage collected memory. 
 		class DefaultBufferManager : BufferManager
 		{
 			long max_pool_size;
 			int max_size;
-			byte [] buffer;
 
 			public DefaultBufferManager (long maxBufferPoolSize,
 				int maxBufferSize)
 			{
+				if (maxBufferPoolSize < 0)
+				        throw new ArgumentOutOfRangeException("maxBufferPoolSize");
+					
+				if (maxBufferSize < 0)
+                                        throw new ArgumentOutOfRangeException("maxBufferSize");
+				
 				this.max_pool_size = maxBufferPoolSize;
 				this.max_size = maxBufferSize;
 			}
 
 			public override void Clear ()
 			{
-				if (buffer != null)
-					Array.Clear (buffer, 0, buffer.Length);
+				// No-op
 			}
 
 			public override void ReturnBuffer (byte [] buffer)
 			{
-				// is this correct?
 
-				if (this.buffer == null)
-					return;
-				Array.Copy (this.buffer, buffer, this.buffer.Length);
+				if (buffer == null)
+				        throw new ArgumentNullException("buffer");
+
+		                // Forget the buffer - let the garbage collector handle it.
 			}
 
 			public override byte [] TakeBuffer (int bufferSize)
 			{
-				if (bufferSize > max_size)
-					throw new ArgumentOutOfRangeException ();
-
-				if (buffer == null || buffer.Length < bufferSize)
-					buffer = new byte [bufferSize];
-				return buffer;
+				if (bufferSize < 0 )
+				        throw new ArgumentOutOfRangeException("bufferSize");
+				return new byte[bufferSize];
 			}
 		}
 	}
