Index: mono/mono/metadata/ChangeLog
===================================================================
--- mono/mono/metadata/ChangeLog	(revision 119510)
+++ mono/mono/metadata/ChangeLog	(working copy)
@@ -1,3 +1,12 @@
+2008-11-20  Bill Holmes  <billholmes54@gmail.com>
+
+	* marshal.c : Adding cominterop_release_all_rcws to release all
+	  runtime callable wrappers held by the runtime.
+
+	* marshal.h : Adding deceleration  for cominterop_release_all_rcws.
+	  
+	Code is contributed under MIT/X11 license.
+
 2008-11-20  Zoltan Varga  <vargaz@gmail.com>
 
 	* marshal.c: Add support for MONO_TYPE_GENERICINST to some functions.
Index: mono/mono/metadata/marshal.c
===================================================================
--- mono/mono/metadata/marshal.c	(revision 119510)
+++ mono/mono/metadata/marshal.c	(working copy)
@@ -11216,7 +11216,7 @@
 }
 
 static gboolean    
-cominterop_finalizer (gpointer key, gpointer value, gpointer user_data)
+cominterop_rcw_interface_finalizer (gpointer key, gpointer value, gpointer user_data)
 {
 	ves_icall_System_Runtime_InteropServices_Marshal_ReleaseInternal (value);
 	return TRUE;
@@ -11235,13 +11235,58 @@
 			g_hash_table_remove (rcw_hash, obj->iunknown);
 		}
 
-		g_hash_table_foreach_remove (obj->itf_hash, cominterop_finalizer, NULL);
+		g_hash_table_foreach_remove (obj->itf_hash, cominterop_rcw_interface_finalizer, NULL);
+		g_hash_table_destroy (obj->itf_hash);
 		ves_icall_System_Runtime_InteropServices_Marshal_ReleaseInternal (obj->iunknown);
 		obj->itf_hash = obj->iunknown = NULL;
 		mono_cominterop_unlock ();
 	}
 }
 
+#ifndef DISABLE_COM
+
+static gboolean    
+cominterop_rcw_finalizer (gpointer key, gpointer value, gpointer user_data)
+{
+	guint32 gchandle = 0;
+
+	gchandle = GPOINTER_TO_UINT (value);
+	if (gchandle) {
+		MonoComInteropProxy* proxy = (MonoComInteropProxy*)mono_gchandle_get_target (gchandle);
+		
+		if (proxy) {
+			if (proxy->com_object->itf_hash) {
+				g_hash_table_foreach_remove (proxy->com_object->itf_hash, cominterop_rcw_interface_finalizer, NULL);
+				g_hash_table_destroy (proxy->com_object->itf_hash);
+			}
+			if (proxy->com_object->iunknown)
+				ves_icall_System_Runtime_InteropServices_Marshal_ReleaseInternal (proxy->com_object->iunknown);
+			proxy->com_object->itf_hash = proxy->com_object->iunknown = NULL;
+		}
+		
+		mono_gchandle_free (gchandle);
+	}
+
+	return TRUE;
+}
+
+void
+cominterop_release_all_rcws ()
+{
+	if (!rcw_hash)
+		return;
+
+	mono_cominterop_lock ();
+
+	g_hash_table_foreach_remove (rcw_hash, cominterop_rcw_finalizer, NULL);
+	g_hash_table_destroy (rcw_hash);
+	rcw_hash = NULL;
+
+	mono_cominterop_unlock ();
+}
+
+#endif
+
 gpointer
 ves_icall_System_ComObject_GetInterfaceInternal (MonoComObject* obj, MonoReflectionType* type, MonoBoolean throw_exception)
 {
Index: mono/mono/metadata/marshal.h
===================================================================
--- mono/mono/metadata/marshal.h	(revision 119510)
+++ mono/mono/metadata/marshal.h	(working copy)
@@ -215,7 +215,12 @@
 gboolean 
 mono_marshal_free_ccw (MonoObject* obj) MONO_INTERNAL;
 
+#ifndef DISABLE_COM
 void
+cominterop_release_all_rcws () MONO_INTERNAL; 
+#endif
+
+void
 ves_icall_System_Runtime_InteropServices_Marshal_copy_to_unmanaged (MonoArray *src, gint32 start_index,
 								    gpointer dest, gint32 length) MONO_INTERNAL;
 
Index: mono/mono/mini/mini.c
===================================================================
--- mono/mono/mini/mini.c	(revision 119510)
+++ mono/mono/mini/mini.c	(working copy)
@@ -5463,6 +5463,10 @@
 		enable_rtc_timer (FALSE);
 #endif
 
+#ifndef DISABLE_COM
+	cominterop_release_all_rcws ();
+#endif
+	
 	/* 
 	 * mono_runtime_cleanup() and mono_domain_finalize () need to
 	 * be called early since they need the execution engine still
Index: mono/mono/mini/ChangeLog
===================================================================
--- mono/mono/mini/ChangeLog	(revision 119510)
+++ mono/mono/mini/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2008-11-20  Bill Holmes  <billholmes54@gmail.com>
+
+	* mini.c (mini_cleanup) : Adding a call to cominterop_release_all_rcws 
+	  to release all runtime callable wrappers held by the runtime.
+
+	Contributed under MIT/X11 license.
+
 2008-11-20  Rodrigo Kumpera  <rkumpera@novell.com>
 
 	* basic-simd.cs: Add tests for accessors of Vector4i and Vector4ui.