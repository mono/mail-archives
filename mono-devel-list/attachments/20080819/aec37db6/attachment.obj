Index: gunicode.c
===================================================================
--- gunicode.c	(revision 110480)
+++ gunicode.c	(working copy)
@@ -225,61 +225,60 @@
  * Return value: true if @utf is valid.
  **/
 gboolean
-g_utf8_validate (const gchar *utf, gssize max_len, const gchar **end)
+g_utf8_validate (const gchar *str, gssize max_len, const gchar **end)
 {
-	int ix;
-	
-	g_return_val_if_fail (utf != NULL, FALSE);
+	glong byteCount = 0;
+	gboolean retVal = TRUE;
+	gboolean lastRet = TRUE;
+	guchar* ptr = (guchar*) str;
+	guint length;
+	guchar a;
+	guchar* srcPtr;
+	if (max_len == 0)
+		return 0;
+	else if (max_len < 0)
+		byteCount = max_len;
+	while (*ptr != 0 && byteCount <= max_len) {
+		length = trailingBytesForUTF8 [*ptr] + 1;
+		srcPtr = (guchar*) ptr + length;
+		switch (length) {
+		default: retVal = FALSE;
+		/* Everything else falls through when "TRUE"... */
+		case 4: if ((a = (*--srcPtr)) < (guchar) 0x80 || a > (guchar) 0xBF) retVal = FALSE;
+				if ((a == (guchar) 0xBF || a == (guchar) 0xBE) && *(srcPtr-1) == (guchar) 0xBF) {
+				if (*(srcPtr-2) == (guchar) 0x8F || *(srcPtr-2) == (guchar) 0x9F ||
+					*(srcPtr-2) == (guchar) 0xAF || *(srcPtr-2) == (guchar) 0xBF)
+					retVal = FALSE;
+				}
+		case 3: if ((a = (*--srcPtr)) < (guchar) 0x80 || a > (guchar) 0xBF) retVal = FALSE;
+		case 2: if ((a = (*--srcPtr)) < (guchar) 0x80 || a > (guchar) 0xBF) retVal = FALSE;
 
-	if (max_len == -1)
-		max_len = strlen (utf);
-	
-	/*
-	 * utf is a string of 1, 2, 3 or 4 bytes.  The valid strings
-	 * are as follows (in "bit format"):
-	 *    0xxxxxxx                                      valid 1-byte
-	 *    110xxxxx 10xxxxxx                             valid 2-byte
-	 *    1110xxxx 10xxxxxx 10xxxxxx                    valid 3-byte
-	 *    11110xxx 10xxxxxx 10xxxxxx 10xxxxxx           valid 4-byte
-	 */
-	for (ix = 0; ix < max_len;) {      /* string is 0-terminated */
-		unsigned char c;
-		
-		c = utf[ix];
-		if ((c & 0x80) == 0x00) {	/* 1-byte code, starts with 10 */
-			ix++;
-		} else if ((c & 0xe0) == 0xc0) {/* 2-byte code, starts with 110 */
-			if (((ix+1) >= max_len) || (utf[ix+1] & 0xc0 ) != 0x80){
-				if (end != NULL)
-					*end = &utf [ix];
-				return FALSE;
-			}
-			ix += 2;
-		} else if ((c & 0xf0) == 0xe0) {/* 3-byte code, starts with 1110 */
-			if (((ix + 2) >= max_len) || 
-			    ((utf[ix+1] & 0xc0) != 0x80) ||
-			    ((utf[ix+2] & 0xc0) != 0x80)){
-				if (end != NULL)
-					*end = &utf [ix];
-				return FALSE;
-			}
-			ix += 3;
-		} else if ((c & 0xf8) == 0xf0) {/* 4-byte code, starts with 11110 */
-			if (((ix + 3) >= max_len) ||
-			    ((utf[ix+1] & 0xc0) != 0x80) ||
-			    ((utf[ix+2] & 0xc0) != 0x80) ||
-			    ((utf[ix+3] & 0xc0) != 0x80)){
-				if (end != NULL)
-					*end = &utf [ix];
-				return FALSE;
-			}
-			ix += 4;
-		} else {/* unknown encoding */
+		switch (*ptr) {
+		/* no fall-through in this inner switch */
+		case 0xE0: if (a < (guchar) 0xA0) retVal = FALSE; break;
+		case 0xED: if (a > (guchar) 0x9F) retVal = FALSE; break;
+		case 0xEF: if (a == (guchar)0xB7 && (*(srcPtr+1) > (guchar) 0x8F && *(srcPtr+1) < 0xB0)) retVal = FALSE;
+				   if (a == (guchar)0xBF && (*(srcPtr+1) == (guchar) 0xBE || *(srcPtr+1) == 0xBF)) retVal = FALSE; break;
+		case 0xF0: if (a < (guchar) 0x90) retVal = FALSE; break;
+		case 0xF4: if (a > (guchar) 0x8F) retVal = FALSE; break;
+		default:   if (a < (guchar) 0x80) retVal = FALSE;
+		}
+
+		case 1: if (*ptr >= (guchar ) 0x80 && *ptr < (guchar) 0xC2) retVal = FALSE;
+		}
+		if (*ptr > (guchar) 0xF4)
+			retVal = FALSE;
+		//If the string is invalid, set the end to the invalid byte.
+		if (!retVal && lastRet) {
 			if (end != NULL)
-				*end = &utf [ix];
-			return FALSE;
+				*end = ptr;
+			lastRet = FALSE;
 		}
+		ptr += length;
+		if(max_len > 0)
+			byteCount += length;
 	}
-	
-	return TRUE;
+	if (retVal && end != NULL)
+		*end = ptr;
+	return retVal;
 }