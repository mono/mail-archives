Index: template_main.c
===================================================================
--- template_main.c	(revision 0)
+++ template_main.c	(revision 0)
@@ -0,0 +1,22 @@
+int mono_main (int argc, char* argv[]);
+
+#include <stdlib.h>
+
+int main (int argc, char* argv[])
+{
+	char **newargs = (char **) malloc (sizeof (char *) * (argc + 2));
+	int i;
+
+	newargs [0] = argv [0];
+	newargs [1] = image_name;
+	for (i = 1; i < argc; i++)
+		newargs [i+1] = argv [i];
+	newargs [++i] = NULL;
+	
+	if (config_dir != NULL && getenv ("MONO_CFG_DIR") == NULL)
+		mono_set_dirs (getenv ("MONO_PATH"), config_dir);
+	
+	mono_mkbundle_init();
+
+	return mono_main (argc+1, newargs);
+}
Index: mkbundle.cs
===================================================================
--- mkbundle.cs	(revision 58921)
+++ mkbundle.cs	(working copy)
@@ -30,6 +30,7 @@
 	static string config_dir = null;
 	static string style = "linux";
 	static bool compress;
+	static bool nomain;
 	
 	static int Main (string [] args)
 	{
@@ -116,6 +117,9 @@
 				}
 				compress = true;
 				break;
+			case "--nomain":
+				nomain = true;
+				break;
 			default:
 				sources.Add (args [i]);
 				break;
@@ -337,8 +341,16 @@
 			StreamReader s = new StreamReader (template_stream);
 			string template = s.ReadToEnd ();
 			tc.Write (template);
+
+			if (!nomain) {
+				Stream template_main_stream = Assembly.GetAssembly (typeof(MakeBundle)).GetManifestResourceStream ("template_main.c");
+				StreamReader st = new StreamReader (template_main_stream);
+				string maintemplate = st.ReadToEnd ();
+				tc.Write (maintemplate);
+			}
+			
 			tc.Close ();
-			
+
 			if (compile_only)
 				return;
 
@@ -486,6 +498,7 @@
 				   "    --config F      Bundle system config file `F'\n" +
 				   "    --config-dir D  Set MONO_CFG_DIR to `D'\n" +
 				   "    --static        Statically link to mono libs\n" +
+				   "    --nomain        Don't include a main() function, for libraries\n" +
 				   "    -z              Compress the assemblies before embedding.\n");
 	}
 
Index: template_z.c
===================================================================
--- template_z.c	(revision 58921)
+++ template_z.c	(working copy)
@@ -1,5 +1,4 @@
 static MonoBundledAssembly **bundled;
-int mono_main (int argc, char* argv[]);
 
 #include <stdlib.h>
 #include <string.h>
@@ -39,24 +38,13 @@
 	return 0;
 }
 
-int main (int argc, char* argv[])
+void mono_mkbundle_init ()
 {
-	char **newargs = (char **) malloc (sizeof (char *) * (argc + 2));
-	int i;
 	CompressedAssembly **ptr;
 	MonoBundledAssembly **bundled_ptr;
 	Bytef *buffer;
 	int nbundles;
 
-	newargs [0] = argv [0];
-	newargs [1] = image_name;
-	for (i = 1; i < argc; i++)
-		newargs [i+1] = argv [i];
-	newargs [++i] = NULL;
-
-	if (config_dir != NULL && getenv ("MONO_CFG_DIR") == NULL)
-		mono_set_dirs (getenv ("MONO_PATH"), config_dir);
-
 	install_dll_config_files ();
 
 	ptr = (CompressedAssembly **) compressed;
@@ -91,5 +79,4 @@
 	}
 	*bundled_ptr = NULL;
 	mono_register_bundled_assemblies((const MonoBundledAssembly **) bundled);
-	return mono_main (argc+1, newargs);
 }
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 58921)
+++ ChangeLog	(working copy)
@@ -1,3 +1,12 @@
+2006-11-29  Joshua Tauberer  <jit@occams.info>
+
+	* mkbundle.cs: Added --nomain option to create the host.c file
+	  without a main() function so that it can be used in libraries.
+	* Added: template_main.c, the template for the main() function.
+	* template(_z).c: Factored out the main() method bits and left
+	  a mono_mkbundle_init() function which is called from main(),
+	  or should be called by the user library.
+
 2005-12-29  Robert Jordan  <robertj@gmx.net>
 
 	* mkbundle.cs, template.c, template_z.c: Added support for Windows.
Index: template.c
===================================================================
--- template.c	(revision 58921)
+++ template.c	(working copy)
@@ -1,22 +1,5 @@
-int mono_main (int argc, char* argv[]);
-
-#include <stdlib.h>
-
-int main (int argc, char* argv[])
+void mono_mkbundle_init ()
 {
-	char **newargs = (char **) malloc (sizeof (char *) * (argc + 2));
-	int i;
-
-	newargs [0] = argv [0];
-	newargs [1] = image_name;
-	for (i = 1; i < argc; i++)
-		newargs [i+1] = argv [i];
-	newargs [++i] = NULL;
-
-	if (config_dir != NULL && getenv ("MONO_CFG_DIR") == NULL)
-		mono_set_dirs (getenv ("MONO_PATH"), config_dir);
-	
 	install_dll_config_files ();
 	mono_register_bundled_assemblies(bundled);
-	return mono_main (argc+1, newargs);
 }
Index: Makefile
===================================================================
--- Makefile	(revision 58921)
+++ Makefile	(working copy)
@@ -4,7 +4,7 @@
 
 PROGRAM = mkbundle.exe
 
-OTHER_RES = template.c template_z.c
+OTHER_RES = template.c template_z.c template_main.c
 
 RESOURCE_FILES = $(OTHER_RES)
 
