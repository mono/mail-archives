--- Relational.cs.orig	Sat Feb 12 16:13:40 2005
+++ Relational.cs	Sat Feb 12 16:47:32 2005
@@ -50,7 +50,62 @@
 
 		public double EvaluateRelational (object v1, object v2)
 		{
-			return -1;
+			IConvertible ic1 = v1 as IConvertible;
+			IConvertible ic2 = v2 as IConvertible;
+
+			TypeCode tc1 = Convert.GetTypeCode (v1, ic1);
+			TypeCode tc2 = Convert.GetTypeCode (v2, ic2);
+
+			bool opResult;
+			
+			switch (tc1) {
+			case TypeCode.Double:
+				switch (tc2) {
+				case TypeCode.Double:
+					switch (op) {
+					case JSToken.GreaterThan:
+						opResult = ic1.ToDouble (null) > ic2.ToDouble (null);
+						return operResult ? 1 : -1;
+					case JSToken.LessThan:
+						opResult = ic1.ToDouble (null) < ic2.ToDouble (null);
+						return operResult ? -1 : 1;
+					case JSToken.LessThanEqual:
+						opResult = ic1.ToDouble (null) <= ic2.ToDouble (null);
+						return opResult ? -1 : 1;
+					case JSToken.GreaterThanEqual:
+						opResult = ic1.ToDouble (null) >= ic2.ToDouble (null);					
+						return opResult ? 1 : -1;
+					}
+					break;
+				}
+				break;
+
+			case TypeCode.Int32:
+				switch (tc2) {
+				case TypeCode.Double:
+					switch (op) {
+					case JSToken.GreaterThan:
+						opResult = ic1.ToDouble (null) > ic2.ToDouble (null);
+						return opResult ? 1 : -1;
+					case JSToken.LessThan:
+						opResult = ic1.ToDouble (null) < ic2.ToDouble (null);
+						return opResult ? -1 : 1;
+					case JSToken.LessThanEqual:
+						opResult = ic1.ToDouble (null) <= ic2.ToDouble (null);
+						return opResult ? -1 : 1;
+					case JSToken.GreaterThanEqual:
+						opResult = ic1.ToDouble (null) >= ic2.ToDouble (null);					
+						return opResult ? 1 : -1;
+					}
+					break;
+				}
+				break;
+
+			default:
+				Console.WriteLine ("Equality, tc1 = {0}, tc2 = {1}", tc1, tc2);
+				break;
+			}
+			throw new NotImplementedException ();
 		}
 
 