Index: class/System.Data/System.Data/DataRow.cs
===================================================================
--- class/System.Data/System.Data/DataRow.cs	(revision 114656)
+++ class/System.Data/System.Data/DataRow.cs	(working copy)
@@ -1393,7 +1393,7 @@
 		}
 
 		//Copy all values of this DataRow to the row parameter.
-		internal void CopyValuesToRow (DataRow row)
+		internal void CopyValuesToRow (DataRow row, bool enforceReadOnly)
 		{
 			if (row == null)
 				throw new ArgumentNullException("row");
@@ -1449,19 +1449,19 @@
 				if (targetColumn != null) {
 					if (HasVersion (DataRowVersion.Original)) {
 						object val = column[Original];
-						row.CheckValue (val, targetColumn);
+						row.CheckValue (val, targetColumn, enforceReadOnly);
 						targetColumn [row.Original] = val;
 					}
 
 					if (HasVersion (DataRowVersion.Current) && Current != Original) {
 						object val = column[Current];
-						row.CheckValue (val, targetColumn);
+						row.CheckValue (val, targetColumn, enforceReadOnly);
 						targetColumn [row.Current] = val;
 					}
 
 					if (HasVersion (DataRowVersion.Proposed)) {
 						object val = column[row.Proposed];
-						row.CheckValue (val, targetColumn);
+						row.CheckValue (val, targetColumn, enforceReadOnly);
 						targetColumn [row.Proposed] = val;
 					}
 				}
Index: class/System.Data/System.Data/DataSet.cs
===================================================================
--- class/System.Data/System.Data/DataSet.cs	(revision 114656)
+++ class/System.Data/System.Data/DataSet.cs	(working copy)
@@ -546,7 +546,7 @@
 			// add the current row
 			DataRow newRow = copyTable.NewNotInitializedRow ();
 			copyTable.Rows.AddInternal (newRow);
-			row.CopyValuesToRow (newRow);
+			row.CopyValuesToRow (newRow, false);
 			newRow.XmlRowID = row.XmlRowID;
 			addedRows.Add (row, row);
 		}
Index: class/System.Data/System.Data/DataTable.cs
===================================================================
--- class/System.Data/System.Data/DataTable.cs	(revision 114656)
+++ class/System.Data/System.Data/DataTable.cs	(working copy)
@@ -1004,7 +1004,7 @@
 				if (copyTable == null)
 					copyTable = Clone ();
 				DataRow newRow = copyTable.NewNotInitializedRow ();
-				row.CopyValuesToRow (newRow);
+				row.CopyValuesToRow (newRow, false);
 #if NET_2_0
 				newRow.XmlRowID = row.XmlRowID;
 #endif
Index: class/System.Data/System.Data/MergeManager.cs
===================================================================
--- class/System.Data/System.Data/MergeManager.cs	(revision 114656)
+++ class/System.Data/System.Data/MergeManager.cs	(working copy)
@@ -142,7 +142,7 @@
 			if (targetRow == null)
 			{ 
 				DataRow newRow = targetTable.NewNotInitializedRow();
-				row.CopyValuesToRow(newRow);
+				row.CopyValuesToRow(newRow, true); // should we be enforcing read-only constraints here?
 				targetTable.Rows.AddInternal (newRow);
 			}
 			// row exists in target table, and presere changes is false - 
