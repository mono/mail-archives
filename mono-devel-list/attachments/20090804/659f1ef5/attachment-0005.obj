Index: mono/utils/dlmalloc.c
===================================================================
--- mono/utils/dlmalloc.c	(revision 138601)
+++ mono/utils/dlmalloc.c	(working copy)
@@ -2504,6 +2504,8 @@
   return 0;
 }
 
+#if 0
+
 /* support for mallopt */
 static int change_mparam(int param_number, int value) {
   size_t val = (size_t)value;
@@ -2527,6 +2529,8 @@
   }
 }
 
+#endif /* 0 */
+
 #if DEBUG
 /* ------------------------- Debugging Support --------------------------- */
 
@@ -2837,6 +2841,8 @@
 }
 #endif /* !NO_MALLINFO */
 
+#if 0
+
 static void internal_malloc_stats(mstate m) {
   if (!PREACTION(m)) {
     size_t maxfp = 0;
@@ -2869,6 +2875,8 @@
   }
 }
 
+#endif /* 0 */
+
 /* ----------------------- Operations on smallbins ----------------------- */
 
 /*
Index: mono/utils/strtod.c
===================================================================
--- mono/utils/strtod.c	(revision 138601)
+++ mono/utils/strtod.c	(working copy)
@@ -2434,6 +2434,8 @@
 	return sign ? -dval(rv) : dval(rv);
 	}
 
+#if 0
+
  static int
 quorem
 #ifdef KR_headers
@@ -2579,6 +2581,10 @@
 		(char *)(r+1);
 	}
 
+#endif /* 0 */
+
+#if 0
+
  static char *
 #ifdef KR_headers
 nrv_alloc(s, rve, n) char *s, **rve; int n;
@@ -2595,6 +2601,10 @@
 	return rv;
 	}
 
+#endif /* 0 */
+
+#if 0
+
 /* freedtoa(s) must be used to free values s returned by dtoa
  * when MULTIPLE_THREADS is #defined.  It should be used in all cases,
  * but for consistency with earlier versions of dtoa, it is optional
@@ -2619,6 +2629,8 @@
 #endif
 	}
 
+#endif /* 0 */
+
 #if 0
 /* dtoa for IEEE arithmetic (dmg): convert double to ASCII string.
  *
