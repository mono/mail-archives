Index: mono/dis/main.c
===================================================================
--- mono/dis/main.c	(revision 139379)
+++ mono/dis/main.c	(working copy)
@@ -1222,7 +1222,7 @@
 		
                 param = get_generic_param (m, container);
 		if (param) {
-			fprintf (output, param);
+			fprintf (output, "%s", param);
 			g_free (param);
 		}
                 fprintf (output, "\n");
@@ -1236,7 +1236,7 @@
 
                 param = get_generic_param (m, container);
 		if (param) {
-			fprintf (output, param);
+			fprintf (output, "%s", param);
 			g_free (param);
 		}
 		fprintf (output, "\n");
Index: mono/dis/dis-cil.c
===================================================================
--- mono/dis/dis-cil.c	(revision 139379)
+++ mono/dis/dis-cil.c	(working copy)
@@ -200,7 +200,7 @@
 				fprintf (output, "(00 00 00 00 00 00 f8 ff)"); /* NaN */
 			else {
 				char *str = stringify_double (r);
-				fprintf (output, str);
+				fprintf (output, "%s", str);
 				g_free (str);
 			}
 			ptr += 8;
@@ -309,7 +309,7 @@
 				fprintf (output, "(00 00 c0 ff)"); /* NaN */
 			else {
 				char *str = stringify_double ((double) f);
-				fprintf (output, str);
+				fprintf (output, "%s", str);
 				g_free (str);
 			}
 			ptr += 4;
Index: mono/metadata/debug-helpers.c
===================================================================
--- mono/metadata/debug-helpers.c	(revision 139379)
+++ mono/metadata/debug-helpers.c	(working copy)
@@ -752,11 +752,11 @@
 {
 	if (klass->nested_in) {
 		print_name_space (klass->nested_in);
-		g_print (klass->nested_in->name);
+		g_print ("%s", klass->nested_in->name);
 		return "/";
 	}
 	if (klass->name_space [0]) {
-		g_print (klass->name_space);
+		g_print ("%s", klass->name_space);
 		return ".";
 	}
 	return "";
Index: mono/metadata/marshal.c
===================================================================
--- mono/metadata/marshal.c	(revision 139379)
+++ mono/metadata/marshal.c	(working copy)
@@ -1696,7 +1696,7 @@
 	default: {
 		char *msg = g_strdup_printf ("marshalling conversion %d not implemented", conv);
 		MonoException *exc = mono_get_exception_not_implemented (msg);
-		g_warning (msg);
+		g_warning ("%s", msg);
 		g_free (msg);
 		mono_raise_exception (exc);
 	}
@@ -5625,7 +5625,7 @@
 		if (conv == -1) {
 			char *msg = g_strdup_printf ("string marshalling conversion %d not implemented", encoding);
 			MonoException *exc = mono_get_exception_not_implemented (msg);
-			g_warning (msg);
+			g_warning ("%s", msg);
 			g_free (msg);
 			mono_raise_exception (exc);
 		}
@@ -6002,7 +6002,7 @@
 			else {
 				char *msg = g_strdup_printf ("stringbuilder marshalling conversion %d not implemented", encoding);
 				MonoException *exc = mono_get_exception_not_implemented (msg);
-				g_warning (msg);
+				g_warning ("%s", msg);
 				g_free (msg);
 				mono_raise_exception (exc);
 			}
@@ -6582,7 +6582,7 @@
 				if (conv == -1) {
 					char *msg = g_strdup_printf ("string/stringbuilder marshalling conversion %d not implemented", encoding);
 					MonoException *exc = mono_get_exception_not_implemented (msg);
-					g_warning (msg);
+					g_warning ("%s", msg);
 					g_free (msg);
 					mono_raise_exception (exc);
 				}
Index: mono/monograph/monograph.c
===================================================================
--- mono/monograph/monograph.c	(revision 139379)
+++ mono/monograph/monograph.c	(working copy)
@@ -934,9 +934,9 @@
 		next = tmp->data;
 		if (!next->dfn) {
 			if (!bb->cil_code)
-				fprintf (output, "\t\"DF entry\" -> \"IL_%04x (%d)\"\n", next->cil_code - code, *dfn + 1);
+				fprintf (output, "\t\"DF entry\" -> \"IL_%04x (%d)\"\n", (unsigned int)(next->cil_code - code), *dfn + 1);
 			else
-				fprintf (output, "\t\"IL_%04x (%d)\" -> \"IL_%04x (%d)\"\n", bb->cil_code - code, bb->dfn, next->cil_code - code, *dfn + 1);
+				fprintf (output, "\t\"IL_%04x (%d)\" -> \"IL_%04x (%d)\"\n", (unsigned int)(bb->cil_code - code), bb->dfn, (unsigned int)(next->cil_code - code), *dfn + 1);
 			df_visit (next, dfn, code);
 		}
 	}
@@ -963,7 +963,7 @@
 			fprintf (output, "\tB%p [shape=record,label=\"end\"]\n", bb);
 		else {
 			code = mono_disasm_code (&graph_dh, method, bb->cil_code, bb->cil_code + bb->cil_length);
-			fprintf (output, "\tB%p [shape=record,label=\"IL_%04x\\n%s\"]\n", bb, bb->cil_code - il_code, code);
+			fprintf (output, "\tB%p [shape=record,label=\"IL_%04x\\n%s\"]\n", bb, (unsigned int)(bb->cil_code - il_code), code);
 			g_free (code);
 		}
 	}
Index: mono/mini/mini-exceptions.c
===================================================================
--- mono/mini/mini-exceptions.c	(revision 139379)
+++ mono/mini/mini-exceptions.c	(working copy)
@@ -1643,7 +1643,7 @@
 	printf ("\t<Stack traces in thread dumps not supported on this platform>\n");
 #endif
 
-	fprintf (stdout, text->str);
+	fprintf (stdout, "%s", text->str);
 	g_string_free (text, TRUE);
 	fflush (stdout);
 }
Index: mono/mini/aot-compiler.c
===================================================================
--- mono/mini/aot-compiler.c	(revision 139379)
+++ mono/mini/aot-compiler.c	(working copy)
@@ -4609,7 +4609,7 @@
 	char symbol [256];
 
 	/* Don't make GOT global so accesses to it don't need relocations */
-	sprintf (symbol, acfg->got_symbol);
+	sprintf (symbol, "%s", acfg->got_symbol);
 	emit_section_change (acfg, ".bss", 0);
 	emit_alignment (acfg, 8);
 	emit_local_symbol (acfg, symbol, "got_end", FALSE);
Index: mono/utils/mono-proclib.c
===================================================================
--- mono/utils/mono-proclib.c	(revision 139379)
+++ mono/utils/mono-proclib.c	(working copy)
@@ -157,7 +157,6 @@
 #if USE_SYSCTL
 	int mib [4];
 	int res;
-	char *p;
 	size_t data_len = sizeof (struct kinfo_proc);
 	struct kinfo_proc processi;
 
Index: mono/utils/mono-counters.c
===================================================================
--- mono/utils/mono-counters.c	(revision 139379)
+++ mono/utils/mono-counters.c	(working copy)
@@ -105,14 +105,14 @@
 		      int64val = ((LongFunc)counter->addr) ();
 	      else
 		      int64val = *(gint64*)counter->addr;
-	      fprintf (outfile, ENTRY_FMT "%lld\n", counter->name, int64val);
+	      fprintf (outfile, ENTRY_FMT "%lld\n", counter->name, (long long)int64val);
 	      break;
 	case MONO_COUNTER_ULONG:
 	      if (counter->type & MONO_COUNTER_CALLBACK)
 		      uint64val = ((ULongFunc)counter->addr) ();
 	      else
 		      uint64val = *(guint64*)counter->addr;
-	      fprintf (outfile, ENTRY_FMT "%llu\n", counter->name, uint64val);
+	      fprintf (outfile, ENTRY_FMT "%llu\n", counter->name, (unsigned long long)uint64val);
 	      break;
 	case MONO_COUNTER_WORD:
 	      if (counter->type & MONO_COUNTER_CALLBACK)
@@ -122,7 +122,7 @@
 #if SIZEOF_VOID_P == 8
 	      fprintf (outfile, ENTRY_FMT "%lld\n", counter->name, (gint64)wordval);
 #else
-	      fprintf (outfile, ENTRY_FMT "%d\n", counter->name, wordval);
+	      fprintf (outfile, ENTRY_FMT "%d\n", counter->name, (gint)wordval);
 #endif
 	      break;
 	case MONO_COUNTER_DOUBLE:
