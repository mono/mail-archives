Index: mono/io-layer/security.c
===================================================================
--- mono/io-layer/security.c	(revision 138601)
+++ mono/io-layer/security.c	(working copy)
@@ -35,7 +35,7 @@
 gboolean 
 ImpersonateLoggedOnUser (gpointer handle)
 {
-	uid_t token = (uid_t) handle;
+	uid_t token = (uid_t) GPOINTER_TO_INT (handle);
 #ifdef HAVE_SETRESUID
 	if (setresuid (-1, token, getuid ()) < 0)
 		return FALSE;
Index: mono/io-layer/processes.c
===================================================================
--- mono/io-layer/processes.c	(revision 138601)
+++ mono/io-layer/processes.c	(working copy)
@@ -1559,7 +1559,7 @@
 			/* Return a pseudo handle for processes we
 			 * don't have handles for
 			 */
-			return((gpointer)(_WAPI_PROCESS_UNHANDLED + pid));
+			return GINT_TO_POINTER (_WAPI_PROCESS_UNHANDLED + pid);
 		} else {
 #ifdef DEBUG
 			g_message ("%s: Can't find pid %d", __func__, pid);
@@ -1725,2 +1725,3 @@
 #include <mach-o/dyld.h>
+#include <mach-o/getsect.h>
 
@@ -1743,8 +1744,8 @@
 		sec = getsectbynamefromheader (hdr, SEG_DATA, SECT_DATA);
 
 		mod = g_new0 (WapiProcModule, 1);
-		mod->address_start = sec->addr;
-		mod->address_end = sec->addr+sec->size;
+		mod->address_start = GINT_TO_POINTER (sec->addr);
+		mod->address_end = GINT_TO_POINTER (sec->addr+sec->size);
 		mod->perms = g_strdup ("r--p");
 		mod->address_offset = 0;
 		mod->device = makedev (0, 0);
Index: mono/io-layer/wthreads.c
===================================================================
--- mono/io-layer/wthreads.c	(revision 138601)
+++ mono/io-layer/wthreads.c	(working copy)
@@ -1122,7 +1122,7 @@
 		return (0);
 	}
 
-	g_assert (thread_handle->id == GetCurrentThreadId ());
+	g_assert (GPOINTER_TO_INT (thread_handle->id) == GetCurrentThreadId ());
 	/* No locking/memory barriers are needed here */
 	thread_handle->has_apc = TRUE;
 	return(1);
