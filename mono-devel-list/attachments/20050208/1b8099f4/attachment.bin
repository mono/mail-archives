Index: MonoMethod.cs
===================================================================
--- MonoMethod.cs	(revision 40300)
+++ MonoMethod.cs	(working copy)
@@ -36,6 +36,7 @@
 using System.Runtime.CompilerServices;
 using System.Runtime.InteropServices;
 using System.Runtime.Serialization;
+using System.Security;
 
 namespace System.Reflection {
 	
@@ -110,7 +111,13 @@
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		internal extern Object InternalInvoke (Object obj, Object[] parameters);
 		
-		public override Object Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) {
+		public override Object Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) 
+		{
+			// protect runtime's icalls from non-ECMA signed assemblies using reflection
+			if (SecurityManager.SecurityEnabled && ((GetMethodImplementationFlags () & MethodImplAttributes.InternalCall) != 0)) {
+				SecurityManager.ReflectedLinkDemandEcma ();
+			}
+
 			if (binder == null)
 				binder = Binder.DefaultBinder;
 			ParameterInfo[] pinfo = GetParameters ();
@@ -308,7 +315,13 @@
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		internal extern Object InternalInvoke (Object obj, Object[] parameters);
 		
-		public override Object Invoke (Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) {
+		public override Object Invoke (Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) 
+		{
+			// protect runtime's icalls from non-ECMA signed assemblies using reflection
+			if (SecurityManager.SecurityEnabled && ((GetMethodImplementationFlags () & MethodImplAttributes.InternalCall) != 0)) {
+				SecurityManager.ReflectedLinkDemandEcma ();
+			}
+
 			if (binder == null)
 				binder = Binder.DefaultBinder;
 			ParameterInfo[] pinfo = GetParameters ();
