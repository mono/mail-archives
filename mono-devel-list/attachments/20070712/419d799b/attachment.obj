using System;
using System.Reflection;
using System.Reflection.Emit;

namespace TypeBuilderBugs
{
	class MainClass
	{
		public static void Main(string[] args) {
			AssemblyName name = new AssemblyName();
			name.Name = "foo";

			AssemblyBuilder asm = AppDomain.CurrentDomain.DefineDynamicAssembly(name,
				AssemblyBuilderAccess.Run|AssemblyBuilderAccess.Save);
			ModuleBuilder module = asm.DefineDynamicModule("foo.dll", "foo.dll", true);

			TypeBuilder builder = module.DefineType("FooEnum",
				TypeAttributes.Sealed|TypeAttributes.Serializable,
				typeof(System.Enum));

			try {
				Console.WriteLine (builder.UnderlyingSystemType);
				Console.WriteLine ("must fail for incomplete TypeBuilder");
			} catch (InvalidOperationException e) {
				Console.WriteLine ("ok1");
			} catch (Exception e) {
				Console.WriteLine ("erro1: " + e);
			}

			try {
				Console.WriteLine (Array.CreateInstance (builder, 10));
				Console.WriteLine ("error2: must fail for TypeBuilder");
			} catch (InvalidOperationException e) {
				Console.WriteLine ("ok2");
			} catch (Exception e) {
				Console.WriteLine ("error2: "+e);
			}

			try {
				Console.WriteLine (Activator.CreateInstance (builder.MakeArrayType (), 10));
				Console.WriteLine ("erro3: must fail for TypeBuilder");
			} catch (ArgumentException e) {
				Console.WriteLine ("ok3");
			} catch (Exception e) {
				Console.WriteLine ("erro3: "+e);
			}

			builder.DefineField ("value__", typeof (int), FieldAttributes.SpecialName |
				FieldAttributes.Private | FieldAttributes.RTSpecialName);

			try {
				if (builder.UnderlyingSystemType == typeof (int))
					Console.WriteLine ("ok4");
				else
					Console.WriteLine ("error4: not int32 "+builder.UnderlyingSystemType);
			} catch (Exception e) {
				Console.WriteLine ("error4: "+e);
			}

			try {
				if (Array.CreateInstance (builder, 10).GetType () == typeof (int[]))
					Console.WriteLine ("ok5");
				else
					Console.WriteLine ("error5: not int32[] "+Array.CreateInstance (builder, 10).GetType ());
			} catch (Exception e) {
				Console.WriteLine ("error5: "+e);
			}

			Type realType = builder.CreateType ();

			try {
				if (realType.UnderlyingSystemType == realType)
					Console.WriteLine ("ok6");
				else
					Console.WriteLine ("error6: not FooEnum "+realType.UnderlyingSystemType);
			} catch (Exception e) {
				Console.WriteLine ("error6: "+e);
			}

			try {
				if (Array.CreateInstance (realType, 10).GetType () == realType.MakeArrayType ())
					Console.WriteLine ("ok7");
				else
					Console.WriteLine ("error7: not FooEnum[] " + Array.CreateInstance (realType, 10).GetType ());
			} catch (Exception e) {
				Console.WriteLine ("error7: "+e);
			}

		}
	}
}