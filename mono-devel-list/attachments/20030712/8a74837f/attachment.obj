Index: ChangeLog
===================================================================
RCS file: /cvs/public/mcs/tools/corcompare/ChangeLog,v
retrieving revision 1.1
diff -u -r1.1 ChangeLog
--- ChangeLog	25 Feb 2002 10:30:37 -0000	1.1
+++ ChangeLog	12 Jul 2003 13:54:22 -0000
@@ -1,3 +1,9 @@
+2003-07-12  Andreas Nahr <ClassDevelopment@A-SoftTech.com>
+
+	* MissingNameSpace.cs: Fixed the case where a private/ internal class that per chance has a class with the same name
+				in the compared assembly gets compared -> now only public classes are compared.
+	* MissingType: Internal nested types were always compared -> internal nested types are never compared
+
 2002-02-25  Nick Drochak  <ndrochak@gol.com>

 

 	* ToDoAssembly.cs: remove unused code 

Index: MissingNameSpace.cs
===================================================================
RCS file: /cvs/public/mcs/tools/corcompare/MissingNameSpace.cs,v
retrieving revision 1.3
diff -u -r1.3 MissingNameSpace.cs
--- MissingNameSpace.cs	4 Apr 2002 19:39:07 -0000	1.3
+++ MissingNameSpace.cs	12 Jul 2003 13:54:22 -0000
@@ -96,8 +96,11 @@
 					}
 					else
 					{
-						htMono.Remove (t.FullName);
-						mt = new MissingType (tMono, t);
+						if (t.IsPublic)
+						{
+							htMono.Remove (t.FullName);
+							mt = new MissingType (tMono, t);
+						}
 					}
 					if (mt != null)
 					{
Index: MissingType.cs
===================================================================
RCS file: /cvs/public/mcs/tools/corcompare/MissingType.cs,v
retrieving revision 1.8
diff -u -r1.8 MissingType.cs
--- MissingType.cs	4 Apr 2002 19:39:07 -0000	1.8
+++ MissingType.cs	12 Jul 2003 13:54:29 -0000
@@ -457,7 +457,7 @@
 				case MemberTypes.Field:
 					return !((FieldInfo) mi).IsPrivate && !((FieldInfo) mi).IsFamilyAndAssembly && !((FieldInfo) mi).IsAssembly;
 				case MemberTypes.NestedType:
-					return !((Type) mi).IsNestedPrivate;
+					return !((Type) mi).IsNestedPrivate && !((Type) mi).IsNestedAssembly && !((Type) mi).IsNestedFamANDAssem;
 				case MemberTypes.Property:	// great, now we have to look at the methods
 					PropertyInfo pi = (PropertyInfo) mi;
 					MethodInfo miAccessor = pi.GetGetMethod ();
