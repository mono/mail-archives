Index: configure.in
===================================================================
--- configure.in	(revision 37033)
+++ configure.in	(working copy)
@@ -247,6 +247,11 @@
 # for mono/dis
 AC_CHECK_HEADERS(wchar.h)
 
+# check for stdint.h (see intps.h for further details.)
+AC_CHECK_HEADER(stdint.h, [have_stdint_h=yes], [have_stdint_h=no])
+
+AM_CONDITIONAL(HAVE_STDINT_H, test x$have_stdint_h = xyes)
+
 # not 64 bit clean in cross-compile
 AC_CHECK_SIZEOF(void *, 4)
 
Index: mono/metadata/class.c
===================================================================
--- mono/metadata/class.c	(revision 37033)
+++ mono/metadata/class.c	(working copy)
@@ -852,9 +852,9 @@
 	if (g_hash_table_lookup_extended (iid_hash, str, NULL, &value)) {
 		mono_loader_unlock ();
 		g_free (str);
-		return (guint)value;
+		return (guint) GPOINTER_TO_UINT(value);
 	} else {
-		g_hash_table_insert (iid_hash, str, (gpointer)iid);
+		g_hash_table_insert (iid_hash, str, GUINT_TO_POINTER(iid));
 		++iid;
 	}
 
Index: mono/metadata/security.c
===================================================================
--- mono/metadata/security.c	(revision 37033)
+++ mono/metadata/security.c	(working copy)
@@ -10,7 +10,7 @@
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
-
+#include <glib.h>
 #include <mono/metadata/appdomain.h>
 #include <mono/metadata/image.h>
 #include <mono/metadata/exception.h>
@@ -277,7 +277,7 @@
 		OpenProcessToken (GetCurrentProcess (), TOKEN_QUERY, &token);
 	}
 #else
-	token = (gpointer) geteuid ();
+	token = GUINT_TO_POINTER(geteuid ());
 #endif
 	return token;
 }
@@ -302,7 +302,7 @@
 		g_free (tu);
 	}
 #else 
-	gchar *uname = GetTokenName ((uid_t) token);
+	gchar *uname = GetTokenName ((uid_t) GPOINTER_TO_UINT(token));
 
 	MONO_ARCH_SAVE_REGS;
 
@@ -374,7 +374,7 @@
 #endif
 
 	if (result) {
-		token = (gpointer) p->pw_uid;
+		token = GUINT_TO_POINTER(p->pw_uid);
 	}
 
 #ifdef HAVE_GETPWNAM_R
@@ -520,7 +520,7 @@
 	fbufsize = (size_t) 1024;
 #endif
 	fbuf = g_malloc0 (fbufsize);
-	retval = getgrgid_r ((gid_t) group, &grp, fbuf, fbufsize, &g);
+	retval = getgrgid_r ((gid_t) GPOINTER_TO_UINT(group), &grp, fbuf, fbufsize, &g);
 	result = ((retval == 0) && (g == &grp));
 #else
 	/* default to non thread-safe but posix compliant function */
@@ -529,7 +529,7 @@
 #endif
 
 	if (result) {
-		result = IsMemberOf ((uid_t) user, g);
+		result = IsMemberOf ((uid_t) GPOINTER_TO_UINT(user), g);
 	}
 
 #ifdef HAVE_GETGRGID_R
@@ -581,7 +581,7 @@
 #endif
 
 		if (result) {
-			result = IsMemberOf ((uid_t) user, g);
+			result = IsMemberOf ((uid_t) GPOINTER_TO_UINT(user), g);
 		}
 
 #ifdef HAVE_GETGRNAM_R
Index: mono/metadata/process.c
===================================================================
--- mono/metadata/process.c	(revision 37033)
+++ mono/metadata/process.c	(working copy)
@@ -818,7 +818,7 @@
 		shell_args = "-c %s";
 #endif
 		if (spath != NULL) {
-			gint dummy;
+			gsize dummy;
 			gchar *newcmd, *tmp;
 			gchar *quoted;
 
Index: mono/metadata/debug-mono-symfile.h
===================================================================
--- mono/metadata/debug-mono-symfile.h	(revision 37033)
+++ mono/metadata/debug-mono-symfile.h	(working copy)
@@ -7,6 +7,7 @@
 #define __MONO_DEBUG_MONO_SYMFILE_H__
 
 #include <glib.h>
+#include <intps.h>
 #include <mono/metadata/class.h>
 #include <mono/metadata/reflection.h>
 #include <mono/metadata/mono-debug.h>
@@ -112,7 +113,7 @@
 
 struct MonoDebugLineNumberEntry {
 	guint32 offset;
-	guint32 address;
+	uintptr_t address;
 };
 
 struct _MonoSymbolFile {
Index: mono/metadata/mono-debug.c
===================================================================
--- mono/metadata/mono-debug.c	(revision 37033)
+++ mono/metadata/mono-debug.c	(working copy)
@@ -1,4 +1,5 @@
 #include <config.h>
+#include <intps.h>
 #include <mono/metadata/assembly.h>
 #include <mono/metadata/tabledefs.h>
 #include <mono/metadata/tokentype.h>
@@ -318,7 +319,7 @@
 }
 
 static gint32
-il_offset_from_address (MonoDebugMethodJitInfo *jit, guint32 address)
+il_offset_from_address (MonoDebugMethodJitInfo *jit, uintptr_t address)
 {
 	int i;
 
@@ -353,7 +354,7 @@
  * line number 8 in the variable pointed to by @line_number).
  */
 gchar *
-mono_debug_source_location_from_address (MonoMethod *method, guint32 address, guint32 *line_number,
+mono_debug_source_location_from_address (MonoMethod *method, uintptr_t address, guint32 *line_number,
 					 MonoDomain *domain)
 {
 	MonoDebugMethodInfo *minfo;
@@ -430,7 +431,7 @@
  * relative to the beginning of the method @method.
  */
 gint32
-mono_debug_il_offset_from_address (MonoMethod *method, gint32 address, MonoDomain *domain)
+mono_debug_il_offset_from_address (MonoMethod *method, uintptr_t address, MonoDomain *domain)
 {
 	MonoDebugMethodInfo *minfo;
 	MonoDebugDomainData *domain_data;
@@ -463,12 +464,12 @@
  * Returns: the machine address corresponding to IL offset @il_offset.
  * The returned value is an offset relative to the beginning of the method @method.
  */
-gint32
+uintptr_t
 mono_debug_address_from_il_offset (MonoMethod *method, gint32 il_offset, MonoDomain *domain)
 {
 	MonoDebugMethodInfo *minfo;
 	MonoDebugDomainData *domain_data;
-	gint32 res;
+	uintptr_t res;
 
 	if (il_offset < 0)
 		return -1;
Index: mono/metadata/mono-debug.h
===================================================================
--- mono/metadata/mono-debug.h	(revision 37033)
+++ mono/metadata/mono-debug.h	(working copy)
@@ -5,7 +5,7 @@
 
 #ifndef __MONO_DEBUG_H__
 #define __MONO_DEBUG_H__
-
+#include <intps.h>
 #include <glib.h>
 #include <mono/metadata/image.h>
 #include <mono/metadata/appdomain.h>
@@ -93,11 +93,11 @@
 void mono_debug_add_wrapper (MonoMethod *method, gpointer wrapper, MonoDomain *domain);
 
 void mono_debug_add_method (MonoMethod *method, MonoDebugMethodJitInfo *jit, MonoDomain *domain);
-gchar *mono_debug_source_location_from_address (MonoMethod *method, guint32 address,
+gchar *mono_debug_source_location_from_address (MonoMethod *method, uintptr_t address,
 						guint32 *line_number, MonoDomain *domain);
 gchar *mono_debug_source_location_from_il_offset (MonoMethod *method, guint32 offset,
 						  guint32 *line_number);
-gint32 mono_debug_il_offset_from_address (MonoMethod *method, gint32 address, MonoDomain *domain);
-gint32 mono_debug_address_from_il_offset (MonoMethod *method, gint32 il_offset, MonoDomain *domain);
+gint32 mono_debug_il_offset_from_address (MonoMethod *method, uintptr_t address, MonoDomain *domain);
+uintptr_t mono_debug_address_from_il_offset (MonoMethod *method, gint32 il_offset, MonoDomain *domain);
 
 #endif /* __MONO_DEBUG_H__ */
Index: mono/metadata/object.c
===================================================================
--- mono/metadata/object.c	(revision 37033)
+++ mono/metadata/object.c	(working copy)
@@ -723,7 +723,7 @@
 	for (i = 0; i < class->vtable_size; ++i) {
 		MonoMethod *cm;
 	       
-		if (cm = class->vtable [i]) {
+		if ( (cm = class->vtable [i]) ) {
 			if (cm->signature->generic_param_count)
 				vt->vtable [i] = cm;
 			else
Index: mono/metadata/mono-debug-debugger.c
===================================================================
--- mono/metadata/mono-debug-debugger.c	(revision 37033)
+++ mono/metadata/mono-debug-debugger.c	(working copy)
@@ -1,4 +1,6 @@
 #include <config.h>
+#include <intps.h>
+#include <glib.h>
 #include <stdlib.h>
 #include <string.h>
 #include <mono/metadata/assembly.h>
@@ -46,7 +48,7 @@
 static guint32 write_class (MonoDebuggerSymbolTable *table, MonoClass *klass);
 
 MonoDebuggerSymbolTable *mono_debugger_symbol_table = NULL;
-void (*mono_debugger_event_handler) (MonoDebuggerEvent event, gpointer data, guint32 arg) = NULL;
+void (*mono_debugger_event_handler) (MonoDebuggerEvent event, gpointer data, uintptr_t arg) = NULL;
 
 #define WRITE_UINT32(ptr,value) G_STMT_START {	\
 	* ((guint32 *) ptr) = value;		\
@@ -1113,7 +1115,7 @@
 		WRITE_UINT32 (ptr, write_class (table, klass->interfaces [i]));
 
 	if (ptr - old_ptr != data_size) {
-		g_warning (G_STRLOC ": %d,%d,%d", ptr - old_ptr, data_size, sizeof (gpointer));
+		g_warning (G_STRLOC ": %"d_INT_PTR_T",%d,%"d_INT_PTR_T, ptr - old_ptr, data_size, sizeof (gpointer));
 		if (klass)
 			g_warning (G_STRLOC ": %s.%s", klass->name_space, klass->name);
 		g_assert_not_reached ();
@@ -1417,7 +1419,7 @@
 
 	// Prevent the object from being finalized.
 	last_exception = exc;
-	mono_debugger_event (MONO_DEBUGGER_EVENT_UNHANDLED_EXCEPTION, exc, addr);
+	mono_debugger_event (MONO_DEBUGGER_EVENT_UNHANDLED_EXCEPTION, exc, GPOINTER_TO_UINT(addr));
 	return TRUE;
 }
 
@@ -1436,7 +1438,7 @@
 	info.exception_obj = exc;
 	info.stop = 0;
 
-	mono_debugger_event (MONO_DEBUGGER_EVENT_EXCEPTION, &info, addr);
+	mono_debugger_event (MONO_DEBUGGER_EVENT_EXCEPTION, &info, GPOINTER_TO_UINT(addr));
 }
 
 gboolean
@@ -1454,7 +1456,7 @@
 	info.exception_obj = exc;
 	info.stop = 0;
 
-	mono_debugger_event (MONO_DEBUGGER_EVENT_THROW_EXCEPTION, &info, addr);
+	mono_debugger_event (MONO_DEBUGGER_EVENT_THROW_EXCEPTION, &info, GPOINTER_TO_UINT(addr));
 	return info.stop != 0;
 }
 
Index: mono/metadata/profiler.c
===================================================================
--- mono/metadata/profiler.c	(revision 37033)
+++ mono/metadata/profiler.c	(working copy)
@@ -683,7 +683,7 @@
 		m = method_get_name (p->method);
 		printf ("########################\n");
 		printf ("% 8.3f ", (double) (p->total * 1000));
-		printf ("%7llu ", p->count);
+		printf ("%7"u_INT_64" ", p->count);
 		printf ("% 8.3f ", (double) (p->total * 1000)/(double)p->count);
 		printf ("  %s\n", m);
 
@@ -691,7 +691,7 @@
 		/* callers */
 		output_callers (p);
 	}
-	printf ("Total number of calls: %lld\n", total_calls);
+	printf ("Total number of calls: %"d_INT_64"\n", total_calls);
 }
 
 typedef struct {
Index: mono/metadata/mono-debug-debugger.h
===================================================================
--- mono/metadata/mono-debug-debugger.h	(revision 37033)
+++ mono/metadata/mono-debug-debugger.h	(working copy)
@@ -7,6 +7,7 @@
 #define __MONO_DEBUG_DEBUGGER_H__
 
 #include <glib.h>
+#include <intps.h>
 #include <mono/metadata/debug-helpers.h>
 #include <mono/metadata/debug-mono-symfile.h>
 #include <mono/io-layer/io-layer.h>
@@ -267,7 +268,7 @@
 
 #endif
 
-extern void (*mono_debugger_event_handler) (MonoDebuggerEvent event, gpointer data, guint32 arg);
+extern void (*mono_debugger_event_handler) (MonoDebuggerEvent event, gpointer data, uintptr_t arg);
 
 void            mono_debugger_initialize                  (void);
 void            mono_debugger_cleanup                     (void);
Index: mono/metadata/marshal.c
===================================================================
--- mono/metadata/marshal.c	(revision 37033)
+++ mono/metadata/marshal.c	(working copy)
@@ -9,6 +9,7 @@
  */
 
 #include "config.h"
+#include "glib.h"
 #include "object.h"
 #include "loader.h"
 #include "metadata/marshal.h"
@@ -2964,6 +2965,7 @@
 		return mono_marshal_get_remoting_invoke (method);
 }
 
+/*
 static gpointer
 mono_marshal_load_remoting_wrapper (MonoRealProxy *rp, MonoMethod *method)
 {
@@ -2972,6 +2974,7 @@
 	else
 		return mono_compile_method (mono_marshal_get_remoting_invoke (method));
 }
+*/
 
 MonoMethod *
 mono_marshal_get_remoting_invoke_with_check (MonoMethod *method)
@@ -6638,7 +6641,7 @@
 #ifdef WIN32
 	TlsSetValue (last_error_tls_id, (gpointer)GetLastError ());
 #else
-	TlsSetValue (last_error_tls_id, (gpointer)errno);
+	TlsSetValue (last_error_tls_id, GINT_TO_POINTER(errno));
 #endif
 }
 
@@ -6879,7 +6882,7 @@
 {
 	MONO_ARCH_SAVE_REGS;
 
-	return ((guint32)TlsGetValue (last_error_tls_id));
+	return ((guint32)GPOINTER_TO_UINT(TlsGetValue (last_error_tls_id)));
 }
 
 guint32 
Index: mono/metadata/rand.c
===================================================================
--- mono/metadata/rand.c	(revision 37033)
+++ mono/metadata/rand.c	(working copy)
@@ -198,13 +198,13 @@
 	}
 
 	/* if required exception will be thrown in managed code */
-	return ((file < 0) ? NULL : (gpointer) file);
+	return ((file < 0) ? NULL : GINT_TO_POINTER(file) );
 }
 
 gpointer 
 ves_icall_System_Security_Cryptography_RNGCryptoServiceProvider_RngGetBytes (gpointer handle, MonoArray *arry)
 {
-	gint file = (gint) handle;
+	gint file = (gint) GPOINTER_TO_INT(handle);
 	guint32 len = mono_array_length (arry);
 	guchar *buf = mono_array_addr (arry, guchar, 0);
 
@@ -242,7 +242,7 @@
 ves_icall_System_Security_Cryptography_RNGCryptoServiceProvider_RngClose (gpointer handle) 
 {
 	if (!egd)
-		close ((gint) handle);
+		close ((gint) GPOINTER_TO_INT(handle) );
 }
 
 #endif /* OS definition */
Index: mono/io-layer/security.c
===================================================================
--- mono/io-layer/security.c	(revision 37033)
+++ mono/io-layer/security.c	(working copy)
@@ -8,6 +8,7 @@
  */
 
 #include <config.h>
+#include <glib.h>
 #include <mono/io-layer/io-layer.h>
 
 #include <pwd.h>
@@ -31,7 +32,7 @@
 gboolean 
 ImpersonateLoggedOnUser (gpointer handle)
 {
-	uid_t token = (uid_t) handle;
+	uid_t token = (uid_t) GPOINTER_TO_UINT(handle);
 #ifdef HAVE_SETRESUID
 	if (setresuid (-1, token, getuid ()) < 0)
 		return FALSE;
Index: mono/io-layer/io.c
===================================================================
--- mono/io-layer/io.c	(revision 37033)
+++ mono/io-layer/io.c	(working copy)
@@ -1627,6 +1627,7 @@
 	return(fileaccess);
 }
 
+/* See CreateFile why this is not used anymore..
 static mode_t convert_perms(guint32 sharemode)
 {
 	mode_t perms=0600;
@@ -1640,7 +1641,7 @@
 
 	return(perms);
 }
-
+*/
 
 /**
  * CreateFile:
Index: mono/io-layer/shared.c
===================================================================
--- mono/io-layer/shared.c	(revision 37033)
+++ mono/io-layer/shared.c	(working copy)
@@ -44,6 +44,7 @@
 
 
 #include <config.h>
+#include <intps.h>
 #include <glib.h>
 #include <stdio.h>
 #include <fcntl.h>
@@ -276,7 +277,7 @@
 		if(created && *created==TRUE) {
 #ifdef HAVE_LARGE_FILE_SUPPORT
 			/* Keep gcc quiet... */
-			g_critical (G_GNUC_PRETTY_FUNCTION ": shared file [%s] is not big enough! (found %lld, need %d bytes)", filename, statbuf.st_size, wanted_size);
+			g_critical (G_GNUC_PRETTY_FUNCTION ": shared file [%s] is not big enough! (found %"d_INT_64", need %d bytes)", filename, statbuf.st_size, wanted_size);
 #else
 			g_critical (G_GNUC_PRETTY_FUNCTION ": shared file [%s] is not big enough! (found %ld, need %d bytes)", filename, statbuf.st_size, wanted_size);
 #endif
Index: mono/io-layer/misc.c
===================================================================
--- mono/io-layer/misc.c	(revision 37033)
+++ mono/io-layer/misc.c	(working copy)
@@ -11,6 +11,7 @@
 #include <glib.h>
 #include <sys/time.h>
 #include <stdlib.h>
+#include <string.h> /*memcpy*/
 
 #include "misc-private.h"
 
Index: mono/monoburg/monoburg.c
===================================================================
--- mono/monoburg/monoburg.c	(revision 37033)
+++ mono/monoburg/monoburg.c	(working copy)
@@ -7,6 +7,7 @@
  * (C) 2001 Ximian, Inc.
  */
 
+#include <glib.h>
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
@@ -161,7 +162,7 @@
 	if (!term_hash) 
 		term_hash = g_hash_table_new (g_str_hash , g_str_equal);
 
-	g_hash_table_foreach (term_hash, (GHFunc) check_term_num, (gpointer) num);
+	g_hash_table_foreach (term_hash, (GHFunc) check_term_num, GINT_TO_POINTER(num));
 
 	term = g_new0 (Term, 1);
 
Index: mono/mini/trace.c
===================================================================
--- mono/mini/trace.c	(revision 37033)
+++ mono/mini/trace.c	(working copy)
@@ -9,6 +9,7 @@
  */
 
 #include <config.h>
+#include <glib.h>
 #include <signal.h>
 #include <unistd.h>
 #include <string.h>
@@ -285,7 +286,7 @@
 		printf (") ip: %p\n", __builtin_return_address (1));
 		return;
 	}	
-	if (((int)ebp & (MONO_ARCH_FRAME_ALIGNMENT - 1)) != 0) {
+	if ((GPOINTER_TO_UINT(ebp) & (MONO_ARCH_FRAME_ALIGNMENT - 1)) != 0) {
 		g_error ("unaligned stack detected (%p)", ebp);
 	}
 
@@ -333,7 +334,7 @@
 			
 		case MONO_TYPE_I:
 		case MONO_TYPE_U:
-			printf ("%p, ", (gpointer)*((int *)(cpos)));
+			printf ("%p, ", GINT_TO_POINTER( *((int *)(cpos))) );
 			break;
 		case MONO_TYPE_BOOLEAN:
 		case MONO_TYPE_CHAR:
@@ -383,7 +384,7 @@
 			break;
 		case MONO_TYPE_I8:
 		case MONO_TYPE_U8:
-			printf ("0x%016llx, ", *((gint64 *)(cpos)));
+			printf ("0x%016"x_INT_64", ", *((gint64 *)(cpos)));
 			break;
 		case MONO_TYPE_R4:
 			printf ("%f, ", *((float *)(cpos)));
@@ -470,7 +471,7 @@
 			} else if  (o->vtable->klass == mono_defaults.int32_class) {
 				printf ("[INT32:%p:%d]", o, *((gint32 *)((char *)o + sizeof (MonoObject))));	
 			} else if  (o->vtable->klass == mono_defaults.int64_class) {
-				printf ("[INT64:%p:%lld]", o, *((gint64 *)((char *)o + sizeof (MonoObject))));	
+				printf ("[INT64:%p:%"d_INT_64"]", o, *((gint64 *)((char *)o + sizeof (MonoObject))));
 			} else
 				printf ("[%s.%s:%p]", o->vtable->klass->name_space, o->vtable->klass->name, o);
 		} else
@@ -488,12 +489,12 @@
 	}
 	case MONO_TYPE_I8: {
 		gint64 l =  va_arg (ap, gint64);
-		printf ("lresult=0x%16llx", l);
+		printf ("lresult=0x%16"x_INT_64, l);
 		break;
 	}
 	case MONO_TYPE_U8: {
 		gint64 l =  va_arg (ap, gint64);
-		printf ("lresult=0x%16llx", l);
+		printf ("lresult=0x%16"x_INT_64, l);
 		break;
 	}
 	case MONO_TYPE_R4:
Index: mono/mini/abcremoval.c
===================================================================
--- mono/mini/abcremoval.c	(revision 37033)
+++ mono/mini/abcremoval.c	(working copy)
@@ -94,7 +94,7 @@
 		printf ("CONSTANT %d", value->value.constant.value);
 		break;
 	case MONO_VARIABLE_SUMMARIZED_VALUE:
-		printf ("VARIABLE %d, delta %d", value->value.variable.variable, value->value.variable.delta);
+		printf ("VARIABLE %"d_INT_PTR_T", delta %d", value->value.variable.variable, value->value.variable.delta);
 		break;
 	case MONO_PHI_SUMMARIZED_VALUE: {
 		int phi;
@@ -900,7 +900,7 @@
 				
 				if ((index_value.value.constant.value >= 0) && (index_value.value.constant.value < array_context->ranges.zero.lower)) {
 					if (REPORT_ABC_REMOVAL) {
-						printf ("ARRAY-ACCESS: removed bounds check on array %d with constant index %d in method %s\n",
+						printf ("ARRAY-ACCESS: removed bounds check on array %"d_INT_PTR_T" with constant index %d in method %s\n",
 								array_variable, index_value.value.constant.value, mono_method_full_name (area->cfg->method, TRUE));
 					}
 					inst->flags |= (MONO_INST_NORANGECHECK);
@@ -921,11 +921,11 @@
 				
 				if (index_context->ranges.zero.lower >= 0) {
 					if (TRACE_ABC_REMOVAL) {
-						printf ("ARRAY-ACCESS: Removed lower bound check on array %d with index %d\n", array_variable, index_variable);
+						printf ("ARRAY-ACCESS: Removed lower bound check on array %"d_INT_PTR_T" with index %"d_INT_PTR_T"\n", array_variable, index_variable);
 					}
 					if ((index_context->ranges.variable.upper < 0)||(index_context->ranges.zero.upper < array_context->ranges.zero.lower)) {
 						if (REPORT_ABC_REMOVAL) {
-							printf ("ARRAY-ACCESS: removed bounds check on array %d with index %d in method %s\n",
+							printf ("ARRAY-ACCESS: removed bounds check on array %"d_INT_PTR_T" with index %"d_INT_PTR_T" in method %s\n",
 									array_variable, index_variable, mono_method_full_name (area->cfg->method, TRUE));
 						}
 						inst->flags |= (MONO_INST_NORANGECHECK);
@@ -933,10 +933,10 @@
 				}
 				if (TRACE_ABC_REMOVAL) {
 					if (index_context->ranges.variable.upper < 0) {
-						printf ("ARRAY-ACCESS: Removed upper bound check (through variable) on array %d with index %d\n", array_variable, index_variable);
+						printf ("ARRAY-ACCESS: Removed upper bound check (through variable) on array %"d_INT_PTR_T" with index %"d_INT_PTR_T"\n", array_variable, index_variable);
 					}
 					if (index_context->ranges.zero.upper < array_context->ranges.zero.lower) {
-						printf ("ARRAY-ACCESS: Removed upper bound check (through constant) on array %d with index %d\n", array_variable, index_variable);
+						printf ("ARRAY-ACCESS: Removed upper bound check (through constant) on array %"d_INT_PTR_T" with index %"d_INT_PTR_T"\n", array_variable, index_variable);
 					}
 				}
 			}
@@ -999,12 +999,12 @@
 	get_relations_from_previous_bb (bb, &additional_relations);
 	if (TRACE_ABC_REMOVAL) {
 		if (additional_relations.relation1.relation.relation != MONO_ANY_RELATION) {
-			printf ("Adding relation 1 on variable %d: ", additional_relations.relation1.variable);
+			printf ("Adding relation 1 on variable %"d_INT_PTR_T": ", additional_relations.relation1.variable);
 			print_summarized_value_relation (&(additional_relations.relation1.relation));
 			printf ("\n");
 		}
 		if (additional_relations.relation2.relation.relation != MONO_ANY_RELATION) {
-			printf ("Adding relation 2 on variable %d: ", additional_relations.relation2.variable);
+			printf ("Adding relation 2 on variable %"d_INT_PTR_T": ", additional_relations.relation2.variable);
 			print_summarized_value_relation (&(additional_relations.relation2.relation));
 			printf ("\n");
 		}
Index: mono/mini/inssel.brg
===================================================================
--- mono/mini/inssel.brg	(revision 37033)
+++ mono/mini/inssel.brg	(working copy)
@@ -74,7 +74,7 @@
                 inst->opcode = op; \
                 inst->dreg = dr; \
                 inst->sreg1 = sr; \
-                inst->inst_p1 = (gpointer)imm; \
+                inst->inst_p1 = GUINT_TO_POINTER(imm); \
 	        mono_bblock_add_inst (cfg->cbb, inst); \
 	} while (0)
 
Index: mono/mini/mini.c
===================================================================
--- mono/mini/mini.c	(revision 37033)
+++ mono/mini/mini.c	(working copy)
@@ -164,9 +164,9 @@
 		return;
 	}
 	method = mono_method_full_name (ji->method, TRUE);
-	source = mono_debug_source_location_from_address (ji->method, (int) ip, NULL, domain);
+	source = mono_debug_source_location_from_address (ji->method, GPOINTER_TO_UINT(ip), NULL, domain);
 
-	g_print ("IP %p at offset 0x%x of method %s (%p %p)[domain %p - %s]\n", ip, (char*)ip - (char*)ji->code_start, method, ji->code_start, (char*)ji->code_start + ji->code_size, domain, domain->friendly_name);
+	g_print ("IP %p at offset 0x%"x_INT_PTR_T" of method %s (%p %p)[domain %p - %s]\n", ip, (char*)ip - (char*)ji->code_start, method, ji->code_start, (char*)ji->code_start + ji->code_size, domain, domain->friendly_name);
 
 	if (source)
 		g_print ("%s\n", source);
@@ -250,7 +250,7 @@
 #define CHECK_BBLOCK(target,ip,tblock) do {	\
 		if ((target) < (ip) && !(tblock)->code)	{	\
 			bb_recheck = g_list_prepend (bb_recheck, (tblock));	\
-			if (cfg->verbose_level > 2) g_print ("queued block %d for check at IL%04x from IL%04x\n", (tblock)->block_num, (target) - header->code, (ip) - header->code);	\
+			if (cfg->verbose_level > 2) g_print ("queued block %d for check at IL%04"x_INT_PTR_T" from IL%04"x_INT_PTR_T"\n", (tblock)->block_num, (target) - header->code, (ip) - header->code);	\
 		}	\
 	} while (0)
 
@@ -1703,7 +1703,7 @@
 			mono_add_ins_to_end (bb, inst);
 		}
 		if (cfg->verbose_level > 3)
-			g_print ("storing %d to temp %d\n", i, locals [i]->inst_c0);
+			g_print ("storing %d to temp %"d_INT_PTR_T"\n", i, locals [i]->inst_c0);
 	}
 
 	/*
@@ -2162,7 +2162,7 @@
 	if (!sighash) {
 		sighash = g_hash_table_new (NULL, NULL);
 	}
-	else if ((res = g_hash_table_lookup (sighash, (gpointer)arity))) {
+	else if ((res = g_hash_table_lookup (sighash, GINT_TO_POINTER(arity) ))) {
 		LeaveCriticalSection (&jit_mutex);
 		return res;
 	}
@@ -2181,7 +2181,7 @@
 
 	res->ret = &mono_defaults.int_class->byval_arg;
 
-	g_hash_table_insert (sighash, (gpointer)arity, res);
+	g_hash_table_insert (sighash, GINT_TO_POINTER(arity), res);
 	LeaveCriticalSection (&jit_mutex);
 
 	return res;
@@ -2198,7 +2198,7 @@
 	if (!sighash) {
 		sighash = g_hash_table_new (NULL, NULL);
 	}
-	else if ((res = g_hash_table_lookup (sighash, (gpointer)arity))) {
+	else if ((res = g_hash_table_lookup (sighash, GINT_TO_POINTER(arity) ))) {
 		LeaveCriticalSection (&jit_mutex);
 		return res;
 	}
@@ -2217,7 +2217,7 @@
 
 	res->ret = &mono_defaults.int_class->byval_arg;
 
-	g_hash_table_insert (sighash, (gpointer)arity, res);
+	g_hash_table_insert (sighash, GINT_TO_POINTER(arity), res);
 	LeaveCriticalSection (&jit_mutex);
 
 	return res;
@@ -3032,7 +3032,7 @@
 			start_new_bblock = 0;
 			for (i = 0; i < bblock->in_scount; ++i) {
 				if (cfg->verbose_level > 3)
-					g_print ("loading %d from temp %d\n", i, bblock->in_stack [i]->inst_c0);						
+					g_print ("loading %d from temp %"d_INT_PTR_T"\n", i, bblock->in_stack [i]->inst_c0);
 				NEW_TEMPLOAD (cfg, ins, bblock->in_stack [i]->inst_c0);
 				*sp++ = ins;
 			}
@@ -3047,7 +3047,7 @@
 				bblock = tblock;
 				for (i = 0; i < bblock->in_scount; ++i) {
 					if (cfg->verbose_level > 3)
-						g_print ("loading %d from temp %d\n", i, bblock->in_stack [i]->inst_c0);						
+						g_print ("loading %d from temp %"d_INT_PTR_T"\n", i, bblock->in_stack [i]->inst_c0);
 					NEW_TEMPLOAD (cfg, ins, bblock->in_stack [i]->inst_c0);
 					*sp++ = ins;
 				}
@@ -3077,7 +3077,7 @@
 		}
 
 		if (cfg->verbose_level > 3)
-			g_print ("converting (in B%d: stack: %d) %s", bblock->block_num, sp-stack_start, mono_disasm_code_one (NULL, method, ip, NULL));
+			g_print ("converting (in B%d: stack: %"d_INT_PTR_T") %s", bblock->block_num, sp-stack_start, mono_disasm_code_one (NULL, method, ip, NULL));
 
 		switch (*ip) {
 		case CEE_NOP:
@@ -4122,7 +4122,7 @@
 					MonoInst *iargs [3];
 
 					if (mono_compile_aot) {
-						cfg->ldstr_list = g_list_prepend (cfg->ldstr_list, (gpointer)n);
+						cfg->ldstr_list = g_list_prepend (cfg->ldstr_list, GINT_TO_POINTER(n));
 					}
 
 					NEW_TEMPLOAD (cfg, iargs [0], mono_get_domainvar (cfg)->inst_c0);
@@ -5951,7 +5951,7 @@
  unverified:
 	if (cfg->method != method) 
 		g_hash_table_destroy (bbhash);
-	g_error ("Invalid IL code at IL%04x in %s: %s\n", ip - header->code, 
+	g_error ("Invalid IL code at IL%04"x_INT_PTR_T" in %s: %s\n", ip - header->code,
 		 mono_method_full_name (method, TRUE), mono_disasm_code_one (NULL, method, ip, NULL));
 	dont_inline = g_list_remove (dont_inline, method);
 	return -1;
@@ -5970,10 +5970,10 @@
 
 	switch (tree->opcode) {
 	case OP_ICONST:
-		printf ("[%d]", tree->inst_c0);
+		printf ("[%"d_INT_PTR_T"]", tree->inst_c0);
 		break;
 	case OP_I8CONST:
-		printf ("[%lld]", tree->inst_l);
+		printf ("[%"d_INT_64"]", tree->inst_l);
 		break;
 	case OP_R8CONST:
 		printf ("[%f]", *(double*)tree->inst_p0);
@@ -5983,13 +5983,13 @@
 		break;
 	case OP_ARG:
 	case OP_LOCAL:
-		printf ("[%d]", tree->inst_c0);
+		printf ("[%"d_INT_PTR_T"]", tree->inst_c0);
 		break;
 	case OP_REGOFFSET:
 		if (tree->inst_offset < 0)
-			printf ("[-0x%x(%s)]", -tree->inst_offset, mono_arch_regname (tree->inst_basereg));
+			printf ("[-0x%"x_INT_PTR_T"(%s)]", -tree->inst_offset, mono_arch_regname (tree->inst_basereg));
 		else
-			printf ("[0x%x(%s)]", tree->inst_offset, mono_arch_regname (tree->inst_basereg));
+			printf ("[0x%"x_INT_PTR_T"(%s)]", tree->inst_offset, mono_arch_regname (tree->inst_basereg));
 		break;
 	case OP_REGVAR:
 		printf ("[%s]", mono_arch_regname (tree->dreg));
@@ -6015,7 +6015,7 @@
 	}
 	case OP_PHI: {
 		int i;
-		printf ("[%d (", tree->inst_c0);
+		printf ("[%"d_INT_PTR_T" (", tree->inst_c0);
 		for (i = 0; i < tree->inst_phi_args [0]; i++) {
 			if (i)
 				printf (", ");
@@ -6037,7 +6037,7 @@
 	case OP_LOADI1_MEMBASE:
 	case OP_LOADU2_MEMBASE:
 	case OP_LOADI2_MEMBASE:
-		printf ("[%s] <- [%s + 0x%x]", mono_arch_regname (tree->dreg), mono_arch_regname (tree->inst_basereg), tree->inst_offset);
+		printf ("[%s] <- [%s + 0x%"x_INT_PTR_T"]", mono_arch_regname (tree->dreg), mono_arch_regname (tree->inst_basereg), tree->inst_offset);
 		break;
 	case CEE_BR:
 	case OP_CALL_HANDLER:
@@ -6748,7 +6748,7 @@
 		}
 
 		for (i = 0; i < patch_info->table_size; i++) {
-			jump_table [i] = code + (int)patch_info->data.table [i];
+			jump_table [i] = code + GPOINTER_TO_UINT(patch_info->data.table [i]);
 		}
 		target = jump_table;
 		break;
@@ -6761,7 +6761,7 @@
 		break;
 	case MONO_PATCH_INFO_IID:
 		mono_class_init (patch_info->data.klass);
-		target = (gpointer)patch_info->data.klass->interface_id;
+		target = GUINT_TO_POINTER(patch_info->data.klass->interface_id);
 		break;
 	case MONO_PATCH_INFO_VTABLE:
 		target = mono_class_vtable (domain, patch_info->data.klass);
Index: mono/mini/mini.h
===================================================================
--- mono/mini/mini.h	(revision 37033)
+++ mono/mini/mini.h	(working copy)
@@ -2,6 +2,7 @@
 #define __MONO_MINI_H__
 
 #include "config.h"
+#include "intps.h"
 #include <glib.h>
 #include <signal.h>
 #include <mono/metadata/loader.h>
@@ -138,8 +139,8 @@
 	gint32 cil_length;
 
 	/* The address of the generated code, used for fixups */
-	int native_offset;
-	int max_offset;
+	intptr_t native_offset;
+	intptr_t max_offset;
 	
 	gint32 dfn;
 
@@ -424,11 +425,7 @@
 	MonoJumpInfoType type;
 	union {
 		gconstpointer   target;
-#if SIZEOF_VOID_P == 8
-		gint64          offset;
-#else
-		int             offset;
-#endif
+		intptr_t	offset;
 		MonoBasicBlock *bb;
 		MonoBasicBlock **table;
 		MonoInst       *inst;
Index: mono/mini/mini-amd64.c
===================================================================
--- mono/mini/mini-amd64.c	(revision 37033)
+++ mono/mini/mini-amd64.c	(working copy)
@@ -3134,7 +3134,7 @@
 	}
 
 	if (cfg->verbose_level > 2)
-		g_print ("Basic block %d starting at offset 0x%x\n", bb->block_num, bb->native_offset);
+		g_print ("Basic block %d starting at offset 0x%lx\n", bb->block_num, bb->native_offset);
 
 	cpos = bb->max_offset;
 
Index: mono/mini/debug-mini.c
===================================================================
--- mono/mini/debug-mini.c	(revision 37033)
+++ mono/mini/debug-mini.c	(working copy)
@@ -537,5 +537,5 @@
 	if (mono_debug_format == MONO_DEBUG_FORMAT_NONE)
 		return;
 
-	mono_debug_add_wrapper (method, callinfo->func, mono_get_root_domain ());
+	mono_debug_add_wrapper (method, (gpointer) callinfo->func, mono_get_root_domain ());
 }
Index: mono/mini/mini-exceptions.c
===================================================================
--- mono/mini/mini-exceptions.c	(revision 37033)
+++ mono/mini/mini-exceptions.c	(working copy)
@@ -16,6 +16,7 @@
 #include <mono/metadata/tabledefs.h>
 #include <mono/metadata/threads.h>
 #include <mono/metadata/debug-helpers.h>
+#include <mono/metadata/mono-debug-debugger.h>
 #include <mono/metadata/exception.h>
 #include <mono/metadata/gc-internal.h>
 #include <mono/metadata/mono-debug.h>
@@ -499,8 +500,8 @@
 					/* Switch back to normal stack */
 					if (stack_overflow)
 						/* Free up some stack space */
-						MONO_CONTEXT_SET_SP (&initial_ctx, (guint32)(MONO_CONTEXT_GET_SP (&initial_ctx)) + (64 * 1024));
-					MONO_CONTEXT_SET_IP (&initial_ctx, (unsigned int)jit_tls->abort_func);
+						MONO_CONTEXT_SET_SP (&initial_ctx, GPOINTER_TO_UINT(MONO_CONTEXT_GET_SP (&initial_ctx)) + (64 * 1024));
+					MONO_CONTEXT_SET_IP (&initial_ctx, GPOINTER_TO_UINT(jit_tls->abort_func));
 					restore_context (&initial_ctx);
 				}
 				else
Index: mono/mini/linear-scan.c
===================================================================
--- mono/mini/linear-scan.c	(revision 37033)
+++ mono/mini/linear-scan.c	(working copy)
@@ -90,7 +90,7 @@
 	max_regs = g_list_length (regs);
 
 	for (l = regs; l; l = l->next) {
-		int regnum = (int)l->data;
+		int regnum = (int) GPOINTER_TO_INT(l->data);
 		g_assert (regnum < G_N_ELEMENTS (gains));
 		gains [regnum] = 0;
 	}
@@ -115,7 +115,7 @@
 				amv->range.last_use.abs_pos, amv->spill_costs, amv->reg);
 #endif
 			active = g_list_delete_link (active, active);
-			regs = g_list_prepend (regs, (gpointer)amv->reg);
+			regs = g_list_prepend (regs, GINT_TO_POINTER(amv->reg));
 			gains [amv->reg] += amv->spill_costs;
 		}
 		
@@ -154,7 +154,7 @@
 
 			g_assert (regs);
 
-			vmv->reg = (int)regs->data;
+			vmv->reg = (int) GPOINTER_TO_INT(regs->data);
 
 			used_regs |= 1LL << vmv->reg;
 
Index: mono/mini/ssapre.c
===================================================================
--- mono/mini/ssapre.c	(revision 37033)
+++ mono/mini/ssapre.c	(working copy)
@@ -9,6 +9,7 @@
 
 #include <string.h>
 #include <stdio.h>
+#include <intps.h>
 
 #include <mono/metadata/debug-helpers.h>
 #include <mono/metadata/opcodes.h>
@@ -43,16 +44,16 @@
 			printf ("NONE");
 			break;
 		case MONO_SSAPRE_EXPRESSION_ARGUMENT_ORIGINAL_VARIABLE:
-			printf ("ORIGINAL_VARIABLE %d", argument->argument.original_variable);
+			printf ("ORIGINAL_VARIABLE %"d_INT_PTR_T, argument->argument.original_variable);
 			break;
 		case MONO_SSAPRE_EXPRESSION_ARGUMENT_SSA_VARIABLE:
-			printf ("SSA_VARIABLE %d", argument->argument.ssa_variable);
+			printf ("SSA_VARIABLE %"d_INT_PTR_T, argument->argument.ssa_variable);
 			break;
 		case MONO_SSAPRE_EXPRESSION_ARGUMENT_INTEGER_CONSTANT:
-			printf ("INTEGER_CONSTANT %d", argument->argument.integer_constant);
+			printf ("INTEGER_CONSTANT %"d_INT_PTR_T, argument->argument.integer_constant);
 			break;
 		case MONO_SSAPRE_EXPRESSION_ARGUMENT_LONG_COSTANT:
-			printf ("LONG_COSTANT %lld", *(argument->argument.long_constant));
+			printf ("LONG_COSTANT %"d_INT_64, *(argument->argument.long_constant));
 			break;
 		case MONO_SSAPRE_EXPRESSION_ARGUMENT_FLOAT_COSTANT:
 			printf ("FLOAT_COSTANT %f", *(argument->argument.float_constant));
@@ -83,7 +84,7 @@
 
 static void
 print_expression_occurrence (MonoSsapreExpressionOccurrence *occurrence, int number) {
-	printf (" ([%d][bb %d [ID %d]][class %d]: ", number, occurrence->bb_info->cfg_dfn, occurrence->bb_info->bb->block_num, occurrence->redundancy_class);
+	printf (" ([%d][bb %d [ID %d]][class %"d_INT_PTR_T"]: ", number, occurrence->bb_info->cfg_dfn, occurrence->bb_info->bb->block_num, occurrence->redundancy_class);
 	print_expression_description (&(occurrence->description));
 	if (occurrence->is_first_in_bb) {
 		printf (" [FIRST in BB]");
@@ -112,7 +113,7 @@
 	if (expression != NULL) {
 		print_worklist (expression->previous);
 		
-		printf ("{%d}: ", expression->tree_size);
+		printf ("{%"d_INT_PTR_T"}: ", expression->tree_size);
 		print_expression_description (&(expression->description));
 		printf ("\n");
 		print_expression_occurrences (expression->occurrences);
@@ -140,7 +141,7 @@
 	}
 	printf ("\n");
 	if (bb_info->has_phi) {
-		printf (" PHI, class %d [ ", bb_info->phi_redundancy_class);
+		printf (" PHI, class %"d_INT_PTR_T" [ ", bb_info->phi_redundancy_class);
 		for (i = 0; i < bb_info->in_count; i++) {
 			int argument_class = bb_info->phi_arguments_classes [i];
 			if (argument_class != BOTTOM_REDUNDANCY_CLASS) {
@@ -164,26 +165,26 @@
 	if (bb_info->has_phi_argument) {
 		printf (" PHI ARGUMENT, class ");
 		if (bb_info->phi_argument_class != BOTTOM_REDUNDANCY_CLASS) {
-			printf ("%d ", bb_info->phi_argument_class);
+			printf ("%"d_INT_PTR_T" ", bb_info->phi_argument_class);
 		} else {
 			printf ("BOTTOM ");
 		}
 		if (bb_info->phi_argument_defined_by_real_occurrence != NULL) {
-			printf ("(Defined by real occurrence %d)", bb_info->phi_argument_defined_by_real_occurrence->redundancy_class);
+			printf ("(Defined by real occurrence %"d_INT_PTR_T")", bb_info->phi_argument_defined_by_real_occurrence->redundancy_class);
 		} else if (bb_info->phi_argument_defined_by_phi != NULL) {
-			printf ("(Defined by phi %d)", bb_info->phi_argument_defined_by_phi->phi_redundancy_class);
+			printf ("(Defined by phi %"d_INT_PTR_T")", bb_info->phi_argument_defined_by_phi->phi_redundancy_class);
 		} else {
 			printf ("(Undefined)");
 		}
 		printf (" (real occurrence arguments: left ");
 		if (bb_info->phi_argument_left_argument_version != BOTTOM_REDUNDANCY_CLASS) {
-			printf ("%d ", bb_info->phi_argument_left_argument_version);
+			printf ("%"d_INT_PTR_T" ", bb_info->phi_argument_left_argument_version);
 		} else {
 			printf ("NONE ");
 		}
 		printf (", right ");
 		if (bb_info->phi_argument_right_argument_version != BOTTOM_REDUNDANCY_CLASS) {
-			printf ("%d ", bb_info->phi_argument_right_argument_version);
+			printf ("%"d_INT_PTR_T" ", bb_info->phi_argument_right_argument_version);
 		} else {
 			printf ("NONE ");
 		}
@@ -986,7 +987,7 @@
 		if ((previous_bb != NULL) && ! dominates (previous_bb, current_bb)) {
 			if ((area->bb_on_top_of_renaming_stack != NULL) && (area->top_of_renaming_stack == NULL) && (previous_bb->phi_argument_has_real_use == FALSE)) {
 				if (TRACE_SSAPRE) {
-					printf ("Clearing down safe in PHI %d because of backtracking (previous block is [bb %d [ID %d]])\n",
+					printf ("Clearing down safe in PHI %"d_INT_PTR_T" because of backtracking (previous block is [bb %d [ID %d]])\n",
 							area->bb_on_top_of_renaming_stack->phi_redundancy_class, previous_bb->cfg_dfn, previous_bb->bb->block_num);
 				}
 				area->bb_on_top_of_renaming_stack->phi_is_down_safe = FALSE;
@@ -1083,7 +1084,7 @@
 					PUSH_REAL_OCCURRENCE (current_expression);
 					phi_bb->phi_is_down_safe = FALSE;
 					if (TRACE_SSAPRE) {
-						printf ("Clearing down safe in PHI %d because of real occurrence %d\n",
+						printf ("Clearing down safe in PHI %"d_INT_PTR_T" because of real occurrence %"d_INT_PTR_T"\n",
 								phi_bb->phi_redundancy_class, current_expression->redundancy_class);
 					}
 				}
@@ -1111,7 +1112,7 @@
 	}
 	if ((area->bb_on_top_of_renaming_stack != NULL) && (area->top_of_renaming_stack == NULL) && (previous_bb->phi_argument_has_real_use == FALSE)) {
 		if (TRACE_SSAPRE) {
-			printf ("Clearing down safe in PHI %d because of backtracking (previous block is [bb %d [ID %d]])\n",
+			printf ("Clearing down safe in PHI %"d_INT_PTR_T" because of backtracking (previous block is [bb %d [ID %d]])\n",
 					area->bb_on_top_of_renaming_stack->phi_redundancy_class, previous_bb->cfg_dfn, previous_bb->bb->block_num);
 		}
 		area->bb_on_top_of_renaming_stack->phi_is_down_safe = FALSE;
@@ -1155,7 +1156,7 @@
 			if (current_bb->phi_argument_class == BOTTOM_REDUNDANCY_CLASS) {
 				if ((current_bb->phi_argument_defined_by_phi != NULL) && (! current_bb->phi_argument_has_real_use)) {
 					if (TRACE_SSAPRE) {
-						printf ("Clearing down safe in PHI %d because PHI argument in block [bb %d [ID %d]] is BOTTOM\n",
+						printf ("Clearing down safe in PHI %"d_INT_PTR_T" because PHI argument in block [bb %d [ID %d]] is BOTTOM\n",
 								current_bb->phi_argument_defined_by_phi->phi_redundancy_class, current_bb->cfg_dfn, current_bb->bb->block_num);
 					}
 					current_bb->phi_argument_defined_by_phi->phi_is_down_safe = FALSE;
Index: mono/mini/graph.c
===================================================================
--- mono/mini/graph.c	(revision 37033)
+++ mono/mini/graph.c	(working copy)
@@ -164,10 +164,10 @@
 
 	switch (tree->opcode) {
 	case OP_ICONST:
-		fprintf (fp, "[%d]", tree->inst_c0);
+		fprintf (fp, "[%"d_INT_PTR_T"]", tree->inst_c0);
 		break;
 	case OP_I8CONST:
-		fprintf (fp, "[%lld]", tree->inst_l);
+		fprintf (fp, "[%"d_INT_64"]", tree->inst_l);
 		break;
 	case OP_R8CONST:
 		fprintf (fp, "[%f]", *(double*)tree->inst_p0);
@@ -177,10 +177,10 @@
 		break;
 	case OP_ARG:
 	case OP_LOCAL:
-		fprintf (fp, "[%d]", tree->inst_c0);
+		fprintf (fp, "[%"d_INT_PTR_T"]", tree->inst_c0);
 		break;
 	case OP_REGOFFSET:
-		fprintf (fp, "[0x%x(%s)]", tree->inst_offset, mono_arch_regname (tree->inst_basereg));
+		fprintf (fp, "[0x%"x_INT_PTR_T"(%s)]", tree->inst_offset, mono_arch_regname (tree->inst_basereg));
 		break;
 	case OP_REGVAR:
 		fprintf (fp, "[%s]", mono_arch_regname (tree->dreg));
@@ -210,7 +210,7 @@
 	}
 	case OP_PHI: {
 		int i;
-		fprintf (fp, "[%d\\ (", tree->inst_c0);
+		fprintf (fp, "[%"d_INT_PTR_T"\\ (", tree->inst_c0);
 		for (i = 0; i < tree->inst_phi_args [0]; i++) {
 			if (i)
 				fprintf (fp, ",\\ ");
Index: mono/mini/ssa.c
===================================================================
--- mono/mini/ssa.c	(revision 37033)
+++ mono/mini/ssa.c	(working copy)
@@ -952,7 +952,7 @@
 				*bblist = g_list_prepend (*bblist, tb);
 			}
 		} else if (r1 == 2) {
-			for (i = (int)inst->klass; i >= 0; i--) {
+			for (i = (int) GPOINTER_TO_INT(inst->klass); i >= 0; i--) {
 				MonoBasicBlock *tb = inst->inst_many_bb [i];
 				if (!(tb->flags &  BB_REACHABLE)) {
 					tb->flags |= BB_REACHABLE;
Index: mono/utils/monobitset.c
===================================================================
--- mono/utils/monobitset.c	(revision 37033)
+++ mono/utils/monobitset.c	(working copy)
@@ -304,6 +304,9 @@
  * There was a 64 bit bug in glib-2.2: g_bit_nth_msf (0, -1) would return 32,
  * causing infinite loops in dominator computation. So glib-2.4 is required.
  */
+gint my_g_bit_nth_msf (gulong mask, gint nth_bit); 
+
+gint
 my_g_bit_nth_msf (gulong mask,
 	       gint   nth_bit)
 {
