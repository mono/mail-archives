Index: editing.cs
===================================================================
RCS file: /cvs/public/monodoc/browser/editing.cs,v
retrieving revision 1.13
diff -u -r1.13 editing.cs
--- editing.cs	9 Jan 2004 23:46:26 -0000	1.13
+++ editing.cs	29 Feb 2004 21:24:22 -0000
@@ -36,7 +36,6 @@
 					string s = GetXPath (n);
 					return s + (s == "/" ? "" : "/") + ret;
 				}
-				break;
 				case XPathNodeType.Element: {
 					string ret = n.Name;
 					int i = 1;
@@ -342,57 +341,61 @@
 			applied = value;
 		}
 	}
-#endregion
+        #endregion
 	
-	public class EditMerger {
-		GlobalChangeset changeset;
-		ArrayList targetDirs;
-		
-		public EditMerger (GlobalChangeset changeset, ArrayList targetDirs)
-		{
-			this.changeset = changeset;
-			this.targetDirs = targetDirs;
-		}
-		
-		public void Merge ()
-		{
-			foreach (DocSetChangeset dsc in changeset.DocSetChangesets) {
-				bool merged = false;
-				foreach (string path in targetDirs) {
-					if (File.Exists (Path.Combine (path, dsc.DocSet + ".source"))) {
-						Merge (dsc, path);
-						merged = true;
-						break;
-					}
-				}
-				if (!merged) Console.WriteLine ("Could not merge docset {0}", dsc.DocSet);
-			}
-		}
-		
-		void Merge (DocSetChangeset dsc, string path)
-		{
-			Console.WriteLine ("Merging changes in {0} ({1})", dsc.DocSet, path);
-			
-			foreach (FileChangeset fcs in dsc.FileChangesets) {
-				if (File.Exists (Path.Combine (path, fcs.RealFile)))
-					Merge (fcs, path);
-				else
-					Console.WriteLine ("\tCould not find file {0}", Path.Combine (path, fcs.RealFile));
-			}
-		}
-		
-		void Merge (FileChangeset fcs, string path)
-		{
-			XmlDocument d = new XmlDocument ();
-			d.Load (Path.Combine (path, fcs.RealFile));
-			
-			foreach (Change c in fcs.Changes) {
-				XmlNode old = d.SelectSingleNode (c.XPath);
-				if (old != null)
-					old.ParentNode.ReplaceChild (d.ImportNode (c.NewNode, true), old);
-			}
-			
-			d.Save (Path.Combine (path, fcs.RealFile));
-		}
-	}
+        public class EditMerger {
+                GlobalChangeset changeset;
+                ArrayList targetDirs;
+                
+                public EditMerger (GlobalChangeset changeset, ArrayList targetDirs)
+                {
+                        this.changeset = changeset;
+                        this.targetDirs = targetDirs;
+                }
+                
+                public void Merge ()
+                {
+                        foreach (DocSetChangeset dsc in changeset.DocSetChangesets) {
+                                bool merged = false;
+                                foreach (string path in targetDirs) {
+                                        if (File.Exists(Path.Combine(path, dsc.DocSet + ".source"))) {
+                                                Merge (dsc, path);
+                                                merged = true;
+                                                break;
+                                        }
+                                }
+                                if (!merged) 
+                                        Console.WriteLine("Could not merge docset {0}", dsc.DocSet);
+                        }
+                }
+                
+                private void Merge (DocSetChangeset dsc, string path)
+                {
+                        Console.WriteLine ("Merging {0} changes in ({1})", 
+                                           dsc.DocSet, 
+                                           path);
+                        
+                        foreach (FileChangeset fcs in dsc.FileChangesets) {
+                                Console.WriteLine("real = " + fcs.RealFile);
+                                if (File.Exists(fcs.RealFile))
+                                        Merge (fcs);
+                                else
+                                        Console.WriteLine("\t** Could not find file {0}", fcs.RealFile);
+                        }
+                }
+                
+                private void Merge (FileChangeset fcs)
+                {
+                        XmlDocument d = new XmlDocument ();
+                        d.Load (fcs.RealFile);
+                        
+                        foreach (Change c in fcs.Changes) {
+                                XmlNode old = d.SelectSingleNode (c.XPath);
+                                if (old != null)
+                                        old.ParentNode.ReplaceChild (d.ImportNode (c.NewNode, true), old);
+                        }
+                        
+                        d.Save(fcs.RealFile);
+                }
+        }
 }
