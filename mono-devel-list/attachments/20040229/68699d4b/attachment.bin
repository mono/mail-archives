Index: MonoCustomAttrs.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System/MonoCustomAttrs.cs,v
retrieving revision 1.12
diff -u -r1.12 MonoCustomAttrs.cs
--- MonoCustomAttrs.cs	14 Jan 2004 11:19:29 -0000	1.12
+++ MonoCustomAttrs.cs	29 Feb 2004 23:22:04 -0000
@@ -15,9 +15,15 @@
 
 namespace System {
 	internal class MonoCustomAttrs {
-
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
-		internal static extern object[] GetCustomAttributes (ICustomAttributeProvider obj);
+		internal static extern object GetSingleAttribute (ICustomAttributeProvider obj, Type type, bool inherit, out bool dup);
+		
+		[MethodImplAttribute(MethodImplOptions.InternalCall)]
+		internal static extern bool IsCustomAttrDefined (ICustomAttributeProvider obj, Type type, bool inherit);
+		
+		[MethodImplAttribute(MethodImplOptions.InternalCall)]
+		internal static extern object [] InternalCustomAttributesForType (ICustomAttributeProvider obj, Type t, bool inherit);
+		
 
 		internal static Attribute GetCustomAttribute (ICustomAttributeProvider obj,
 							      Type attributeType,
@@ -25,132 +31,32 @@
 		{
 			if (obj == null)
 				throw new ArgumentNullException ("attribute_type"); // argument name in the caller
-
-			object[] res = GetCustomAttributes (obj);
-			ICustomAttributeProvider btype = obj;
-			Attribute result = null;
-
-			do {
-				foreach (object attr in res) {
-					if (!attributeType.IsAssignableFrom (attr.GetType ()))
-						continue;
-
-					if (result != null) {
-						string msg = "'{0}' has more than one attribute of type '{1}";
-						msg = String.Format (msg, obj, attributeType);
-						throw new AmbiguousMatchException (msg);
-					}
-					result = (Attribute) attr;
-				}
-
-				if (inherit && (btype = GetBase (btype)) != null)
-					res = GetCustomAttributes (btype);
-
-			// Stop when encounters the first one for a given provider.
-			} while (inherit && result == null && btype != null);
-
-			return result;
+			
+			bool dup;
+			object o = GetSingleAttribute (obj, attributeType, inherit, out dup);
+			if (!dup)
+				return (Attribute) o;
+			
+			throw new AmbiguousMatchException (String.Format ("'{0}' has more than one attribute of type '{1}", obj, attributeType));
 		}
 
 		internal static object[] GetCustomAttributes (ICustomAttributeProvider obj, Type attributeType, bool inherit)
 		{
 			if (obj == null)
 				return (object []) Array.CreateInstance (attributeType, 0);
-
-			object[] r;
-			object[] res = GetCustomAttributes (obj);
-			// shortcut
-			if (!inherit && res.Length == 1) {
-				if (attributeType.IsAssignableFrom (res[0].GetType ())) {
-					r = (object []) Array.CreateInstance (attributeType, 1);
-					r [0] = res [0];
-				} else {
-					r = (object []) Array.CreateInstance (attributeType, 0);
-				}
-				return r;
-			}
-
-			ArrayList a = new ArrayList (res.Length < 16 ? res.Length : 16);
-			ICustomAttributeProvider btype = obj;
-			do {
-				foreach (object attr in res)
-					if (attributeType.IsAssignableFrom (attr.GetType ()))
-						a.Add (attr);
-
-				if ((btype = GetBase (btype)) != null)
-					res = GetCustomAttributes (btype);
-			} while (inherit && btype != null);
-
-			return (object []) a.ToArray (attributeType);
+			
+			return InternalCustomAttributesForType (obj, attributeType, inherit);
 		}
 
 		internal static object [] GetCustomAttributes (ICustomAttributeProvider obj, bool inherit)
 		{
-			if (obj == null)
-				return new object [0]; //FIXME: Should i throw an exception here?
-
-			if (!inherit)
-				return (object []) GetCustomAttributes (obj).Clone ();
-
-			ArrayList a = new ArrayList ();
-			ICustomAttributeProvider btype = obj;
-			a.AddRange (GetCustomAttributes (btype));
-			while ((btype = GetBase (btype)) != null)
-				a.AddRange (GetCustomAttributes (btype));
-
-			return (object []) a.ToArray (typeof (Attribute));
+			// Though C# only allows attributes, these can really be anything.
+			return GetCustomAttributes (obj, typeof (object), inherit);
 		}
 
 		internal static bool IsDefined (ICustomAttributeProvider obj, Type attributeType, bool inherit)
 		{
-			object[] res = GetCustomAttributes (obj);
-			foreach (object attr in res) {
-				if (attributeType.Equals (attr.GetType ()))
-					return true;
-			}
-
-			ICustomAttributeProvider btype = GetBase (obj);
-			if (inherit && (btype != null))
-				return IsDefined (btype, attributeType, inherit);
-
-			return false;
-		}
-
-		// Handles Type, MonoProperty and MonoMethod.
-		// The runtime has also cases for MonoEvent, MonoField, Assembly and ParameterInfo,
-		// but for those we return null here.
-		static ICustomAttributeProvider GetBase (ICustomAttributeProvider obj)
-		{
-			if (obj == null)
-				return null;
-
-			if (obj is Type)
-				return ((Type) obj).BaseType;
-
-			MethodInfo method = null;
-			if (obj is MonoProperty) {
-				MonoProperty prop = (MonoProperty) obj;
-				method = prop.GetGetMethod ();
-				if (method == null)
-					method = prop.GetSetMethod ();
-			} else if (obj is MonoMethod) {
-				method = (MethodInfo) obj; 
-			}
-
-			/**
-			 * ParameterInfo -> null
-			 * Assembly -> null
-			 * MonoEvent -> null
-			 * MonoField -> null
-			 */
-			if (method == null || !method.IsVirtual)
-				return null;
-
-			MethodInfo baseMethod = method.GetBaseDefinition ();
-			if (baseMethod == method)
-				return null;
-
-			return baseMethod;
+			return IsCustomAttrDefined (obj, attributeType, inherit);
 		}
 	}
 }
Index: Attribute.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System/Attribute.cs,v
retrieving revision 1.10
diff -u -r1.10 Attribute.cs
--- Attribute.cs	24 Feb 2003 21:38:45 -0000	1.10
+++ Attribute.cs	29 Feb 2004 23:22:04 -0000
@@ -217,7 +217,7 @@
 			// element parameter is not allowed to be null
 			CheckParameters (element, typeof (Attribute));
 
-			return (Attribute []) element.GetCustomAttributes (inherit);
+			return (Attribute []) element.GetCustomAttributes (typeof (Attribute), inherit);
 		}
 		
 		public static Attribute[] GetCustomAttributes (Assembly element, bool inherit)
@@ -225,7 +225,7 @@
 			// element parameter is not allowed to be null
 			CheckParameters (element, typeof (Attribute));
 
-			return (Attribute []) element.GetCustomAttributes (inherit);
+			return (Attribute []) element.GetCustomAttributes (typeof (Attribute), inherit);
 		}
 
 		public static Attribute[] GetCustomAttributes (MemberInfo element, bool inherit)
@@ -233,7 +233,7 @@
 			// element parameter is not allowed to be null
 			CheckParameters (element, typeof (Attribute));
 
-			return (Attribute []) element.GetCustomAttributes (inherit);
+			return (Attribute []) element.GetCustomAttributes (typeof (Attribute), inherit);
 		}
 
 		public static Attribute[] GetCustomAttributes (ParameterInfo element, bool inherit)
@@ -241,7 +241,7 @@
 			// element parameter is not allowed to be null
 			CheckParameters (element, typeof (Attribute));
 
-			return (Attribute []) element.GetCustomAttributes (inherit);
+			return (Attribute []) element.GetCustomAttributes (typeof (Attribute), inherit);
 		}
 
 		public override int GetHashCode ()
