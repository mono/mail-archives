Index: ChangeLog
===================================================================
RCS file: /mono/mono/mono/metadata/ChangeLog,v
retrieving revision 1.1537
diff -u -3 -p -r1.1537 ChangeLog
--- ChangeLog	24 Apr 2004 02:03:49 -0000	1.1537
+++ ChangeLog	24 Apr 2004 19:41:22 -0000
@@ -1,3 +1,11 @@
+2004-04-42  Robert Shade <rshade@dvsconsulting.com>
+
+	* icall.c: icalls for Char.ToUpper/ToLower are now hooked to
+	  InternalToUpper/InternalToLower.
+	* locales.c: (ves_icall_System_{Char,String}_InternalTo{Upper,Lower}_Comp)
+	  removed invariant culture shortcut.  This is now done in managed code.
+	* locales.c: (string_invariant_toupper/tolower) removed.
+
 2004-04-24  Gonzalo Paniagua Javier <gonzalo@ximian.com>
 
 	* icall.c: added GetSupportsAsync for Socket (same as MonoIO).
Index: icall.c
===================================================================
RCS file: /mono/mono/mono/metadata/icall.c,v
retrieving revision 1.467
diff -u -3 -p -r1.467 icall.c
--- icall.c	24 Apr 2004 02:03:49 -0000	1.467
+++ icall.c	24 Apr 2004 19:41:24 -0000
@@ -4882,8 +4882,8 @@ static const IcallEntry buffer_icalls []
 
 static const IcallEntry char_icalls [] = {
 	{"GetDataTablePointers", ves_icall_System_Char_GetDataTablePointers},
-	{"ToLower(char,System.Globalization.CultureInfo)", ves_icall_System_Char_InternalToLower_Comp},
-	{"ToUpper(char,System.Globalization.CultureInfo)", ves_icall_System_Char_InternalToUpper_Comp},
+	{"InternalToLower(char,System.Globalization.CultureInfo)", ves_icall_System_Char_InternalToLower_Comp},
+	{"InternalToUpper(char,System.Globalization.CultureInfo)", ves_icall_System_Char_InternalToUpper_Comp},
 };
 
 static const IcallEntry defaultconf_icalls [] = {
Index: locales.c
===================================================================
RCS file: /mono/mono/mono/metadata/locales.c,v
retrieving revision 1.16
diff -u -3 -p -r1.16 locales.c
--- locales.c	21 Apr 2004 14:58:37 -0000	1.16
+++ locales.c	24 Apr 2004 19:41:24 -0000
@@ -42,8 +42,6 @@ static gint32 string_invariant_indexof (
 static gint32 string_invariant_indexof_char (MonoString *source, gint32 sindex,
 					     gint32 count, gunichar2 value,
 					     MonoBoolean first);
-static MonoString *string_invariant_tolower (MonoString *this);
-static MonoString *string_invariant_toupper (MonoString *this);
 
 static int
 culture_lcid_locator (const void *a, const void *b)
@@ -1437,15 +1435,6 @@ MonoString *ves_icall_System_String_Inte
 	g_message (G_GNUC_PRETTY_FUNCTION ": LCID is %d", cult->lcid);
 #endif
 
-	if(cult->lcid==0x007F) {
-#ifdef DEBUG
-		g_message (G_GNUC_PRETTY_FUNCTION
-			   ": Invariant, using shortcut");
-#endif
-
-		return(string_invariant_tolower (this));
-	}
-
 	icu_loc=mono_string_to_icu_locale (cult->icu_name);
 	if(icu_loc==NULL) {
 		mono_raise_exception ((MonoException *)mono_exception_from_name (mono_defaults.corlib, "System", "SystemException"));
@@ -1506,15 +1495,6 @@ MonoString *ves_icall_System_String_Inte
 	g_message (G_GNUC_PRETTY_FUNCTION ": LCID is %d", cult->lcid);
 #endif
 
-	if(cult->lcid==0x007F) {
-#ifdef DEBUG
-		g_message (G_GNUC_PRETTY_FUNCTION
-			   ": Invariant, using shortcut");
-#endif
-
-		return(string_invariant_toupper (this));
-	}
-
 	icu_loc=mono_string_to_icu_locale (cult->icu_name);
 	if(icu_loc==NULL) {
 		mono_raise_exception ((MonoException *)mono_exception_from_name (mono_defaults.corlib, "System", "SystemException"));
@@ -1567,11 +1547,6 @@ gunichar2 ves_icall_System_Char_Internal
 	
 	MONO_ARCH_SAVE_REGS;
 
-	if(cult->lcid==0x007F) {
-		/* Invariant shortcut */
-		return g_unichar_toupper (c);
-	}
-
 	icu_loc=mono_string_to_icu_locale (cult->icu_name);
 	if(icu_loc==NULL) {
 		mono_raise_exception ((MonoException *)mono_exception_from_name (mono_defaults.corlib, "System", "SystemException"));
@@ -1599,11 +1574,6 @@ gunichar2 ves_icall_System_Char_Internal
 	
 	MONO_ARCH_SAVE_REGS;
 
-	if(cult->lcid==0x007F) {
-		/* Invariant shortcut */
-		return g_unichar_tolower (c);
-	}
-
 	icu_loc=mono_string_to_icu_locale (cult->icu_name);
 	if(icu_loc==NULL) {
 		mono_raise_exception ((MonoException *)mono_exception_from_name (mono_defaults.corlib, "System", "SystemException"));
@@ -1962,44 +1932,4 @@ static gint32 string_invariant_indexof_c
 
 		return(-1);
 	}
-}
-
-static MonoString *string_invariant_tolower (MonoString *this)
-{
-	MonoString *ret;
-	gunichar2 *src; 
-	gunichar2 *dest;
-	gint32 i;
-
-	ret = mono_string_new_size(mono_domain_get (),
-				   mono_string_length(this));
-
-	src = mono_string_chars (this);
-	dest = mono_string_chars (ret);
-
-	for (i = 0; i < mono_string_length (this); ++i) {
-		dest[i] = g_unichar_tolower(src[i]);
-	}
-
-	return(ret);
-}
-
-static MonoString *string_invariant_toupper (MonoString *this)
-{
-	MonoString *ret;
-	gunichar2 *src; 
-	gunichar2 *dest;
-	guint32 i;
-
-	ret = mono_string_new_size(mono_domain_get (),
-				   mono_string_length(this));
-
-	src = mono_string_chars (this);
-	dest = mono_string_chars (ret);
-
-	for (i = 0; i < mono_string_length (this); ++i) {
-		dest[i] = g_unichar_toupper(src[i]);
-	}
-
-	return(ret);
 }
