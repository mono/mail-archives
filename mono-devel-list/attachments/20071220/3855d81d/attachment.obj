Index: mono/mono/metadata/icall-def.h
===================================================================
--- mono/mono/metadata/icall-def.h	(revision 91652)
+++ mono/mono/metadata/icall-def.h	(working copy)
@@ -91,15 +91,17 @@
 ICALL(ARRAY_2, "Clone",            mono_array_clone)
 ICALL(ARRAY_3, "CreateInstanceImpl",   ves_icall_System_Array_CreateInstanceImpl)
 ICALL(ARRAY_4, "FastCopy",         ves_icall_System_Array_FastCopy)
-ICALL(ARRAY_5, "GetGenericValueImpl", ves_icall_System_Array_GetGenericValueImpl)
-ICALL(ARRAY_6, "GetLength",        ves_icall_System_Array_GetLength)
-ICALL(ARRAY_7, "GetLowerBound",    ves_icall_System_Array_GetLowerBound)
-ICALL(ARRAY_8, "GetRank",          ves_icall_System_Array_GetRank)
-ICALL(ARRAY_9, "GetValue",         ves_icall_System_Array_GetValue)
-ICALL(ARRAY_10, "GetValueImpl",     ves_icall_System_Array_GetValueImpl)
-ICALL(ARRAY_11, "SetGenericValueImpl", ves_icall_System_Array_SetGenericValueImpl)
-ICALL(ARRAY_12, "SetValue",         ves_icall_System_Array_SetValue)
-ICALL(ARRAY_13, "SetValueImpl",     ves_icall_System_Array_SetValueImpl)
+ICALL(ARRAY_5, "GetElementSize",   ves_icall_System_Array_GetElementSize)
+ICALL(ARRAY_6, "GetGenericValueImpl", ves_icall_System_Array_GetGenericValueImpl)
+ICALL(ARRAY_7, "GetLength",        ves_icall_System_Array_GetLength)
+ICALL(ARRAY_8, "GetLowerBound",    ves_icall_System_Array_GetLowerBound)
+ICALL(ARRAY_9, "GetOffsetToArrayData", ves_icall_System_Array_GetOffsetToArrayData)
+ICALL(ARRAY_10, "GetRank",          ves_icall_System_Array_GetRank)
+ICALL(ARRAY_11, "GetValue",         ves_icall_System_Array_GetValue)
+ICALL(ARRAY_12, "GetValueImpl",     ves_icall_System_Array_GetValueImpl)
+ICALL(ARRAY_13, "SetGenericValueImpl", ves_icall_System_Array_SetGenericValueImpl)
+ICALL(ARRAY_14, "SetValue",         ves_icall_System_Array_SetValue)
+ICALL(ARRAY_15, "SetValueImpl",     ves_icall_System_Array_SetValueImpl)
 
 ICALL_TYPE(BUFFER, "System.Buffer", BUFFER_1)
 ICALL(BUFFER_1, "BlockCopyInternal", ves_icall_System_Buffer_BlockCopyInternal)
@@ -395,7 +397,7 @@
 ICALL(OBJ_1, "GetType", ves_icall_System_Object_GetType)
 ICALL(OBJ_2, "InternalGetHashCode", mono_object_hash)
 ICALL(OBJ_3, "MemberwiseClone", ves_icall_System_Object_MemberwiseClone)
-ICALL(OBJ_4, "obj_address", ves_icall_System_Object_obj_address)
+ICALL(OBJ_4, "UnsafeAddrOfPinnedObject", ves_icall_System_Object_UnsafeAddrOfPinnedObject)
 
 ICALL_TYPE(ASSEM, "System.Reflection.Assembly", ASSEM_1)
 ICALL(ASSEM_1, "FillName", ves_icall_System_Reflection_Assembly_FillName)
Index: mono/mono/metadata/icall.c
===================================================================
--- mono/mono/metadata/icall.c	(revision 91652)
+++ mono/mono/metadata/icall.c	(working copy)
@@ -713,6 +713,22 @@
 	memcpy (ea, value, esize);
 }
 
+static gint
+ves_icall_System_Array_GetElementSize (MonoObject *this)
+{
+	MONO_ARCH_SAVE_REGS;
+
+	return mono_array_element_size (this->vtable->klass);
+}
+
+static gint
+ves_icall_System_Array_GetOffsetToArrayData (void)
+{
+	MONO_ARCH_SAVE_REGS;
+
+	return offsetof (MonoArray, vector);
+}
+
 static void
 ves_icall_System_Runtime_CompilerServices_RuntimeHelpers_InitializeArray (MonoArray *array, MonoClassField *field_handle)
 {
@@ -5765,11 +5781,11 @@
 }
 
 static gpointer
-ves_icall_System_Object_obj_address (MonoObject *this) 
+ves_icall_System_Object_UnsafeAddrOfPinnedObject (MonoObject *o) 
 {
 	MONO_ARCH_SAVE_REGS;
 
-	return this;
+	return o;
 }
 
 /* System.Buffer */
Index: mono/mono/mini/mini.c
===================================================================
--- mono/mono/mini/mini.c	(revision 91652)
+++ mono/mono/mini/mini.c	(working copy)
@@ -3449,13 +3449,61 @@
 			ins->inst_i0 = args [0];
 			return ins;
 #endif
+		} else if (strcmp (cmethod->name, "UnsafeAddrOfPinnedObject") == 0) {
+			return args [0];
 		} else if (strcmp (cmethod->name, ".ctor") == 0) {
  			MONO_INST_NEW (cfg, ins, OP_NOP);
 			return ins;
 		} else
 			return NULL;
 	} else if (cmethod->klass == mono_defaults.array_class) {
- 		if (cmethod->name [0] != 'g')
+		if (cmethod->name [0] == 'G') {
+			if (strcmp (cmethod->name, "GetElementSize") == 0) {
+				MonoInst *load_vtable, *load_klass;
+
+				MONO_INST_NEW (cfg, load_vtable, CEE_LDIND_I);
+				if (G_STRUCT_OFFSET (MonoObject, vtable)) {
+					MonoInst *vtable_offset, *add_vtable_offset;
+
+					NEW_ICONST (cfg, vtable_offset, G_STRUCT_OFFSET (MonoObject, vtable));
+		 			MONO_INST_NEW (cfg, add_vtable_offset, CEE_ADD);
+					add_vtable_offset->inst_i0 = args [0];
+					add_vtable_offset->inst_i1 = vtable_offset;
+					load_vtable->inst_i0 = add_vtable_offset;
+				} else
+					load_vtable->inst_i0 = args [0];
+
+	 			MONO_INST_NEW (cfg, load_klass, CEE_LDIND_I);
+				if (G_STRUCT_OFFSET (MonoVTable, klass)) {
+					MonoInst *klass_offset, *add_klass_offset;
+
+					NEW_ICONST (cfg, klass_offset, G_STRUCT_OFFSET (MonoVTable, klass));
+		 			MONO_INST_NEW (cfg, add_klass_offset, CEE_ADD);
+					add_klass_offset->inst_i0 = load_vtable;
+					add_klass_offset->inst_i1 = klass_offset;
+					load_klass->inst_i0 = add_klass_offset;
+				} else
+					load_klass->inst_i0 = load_vtable;
+
+	 			MONO_INST_NEW (cfg, ins, CEE_LDIND_I4);
+				if (G_STRUCT_OFFSET (MonoClass, sizes)) {
+					MonoInst *element_size_offset, *add_element_size_offset;
+
+					NEW_ICONST (cfg, element_size_offset, G_STRUCT_OFFSET (MonoClass, sizes));
+		 			MONO_INST_NEW (cfg, add_element_size_offset, CEE_ADD);
+					add_element_size_offset->inst_i0 = load_klass;
+					add_element_size_offset->inst_i1 = element_size_offset;
+					ins->inst_i0 = add_element_size_offset;
+				} else
+					ins->inst_i0 = load_klass;
+
+				return ins;
+			} else if (strcmp (cmethod->name, "GetOffsetToArrayData") == 0) {
+				NEW_ICONST (cfg, ins, G_STRUCT_OFFSET (MonoArray, vector));
+				return ins;
+			} else
+ 				return NULL;
+ 		} else if (cmethod->name [0] != 'g')
  			return NULL;
 
 		if (strcmp (cmethod->name, "get_Rank") == 0) {
Index: mcs/class/corlib/System/Array.cs
===================================================================
--- mcs/class/corlib/System/Array.cs	(revision 91652)
+++ mcs/class/corlib/System/Array.cs	(working copy)
@@ -396,9 +396,15 @@
 		internal extern void SetValueImpl (object value, int pos);
 
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
+		internal extern int GetElementSize ();
+
+		[MethodImplAttribute (MethodImplOptions.InternalCall)]
 		internal extern static bool FastCopy (Array source, int source_idx, Array dest, int dest_idx, int length);
 
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
+		internal extern static int GetOffsetToArrayData ();
+
+		[MethodImplAttribute (MethodImplOptions.InternalCall)]
 		internal extern static Array CreateInstanceImpl (Type elementType, int[] lengths, int[] bounds);
 
 		// Properties
Index: mcs/class/corlib/System/Object.cs
===================================================================
--- mcs/class/corlib/System/Object.cs	(revision 91652)
+++ mcs/class/corlib/System/Object.cs	(working copy)
@@ -139,7 +139,7 @@
 		internal static extern int InternalGetHashCode (object o);
 
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
-		internal extern IntPtr obj_address ();
+		internal static extern IntPtr UnsafeAddrOfPinnedObject (object o);
  
 		void FieldGetter (string typeName, string fieldName, ref object val)
 		{
Index: mcs/class/corlib/System.Runtime.InteropServices/Marshal.cs
===================================================================
--- mcs/class/corlib/System.Runtime.InteropServices/Marshal.cs	(revision 91652)
+++ mcs/class/corlib/System.Runtime.InteropServices/Marshal.cs	(working copy)
@@ -106,14 +106,54 @@
 			throw new NotImplementedException ();
 		}
 
-		[MethodImplAttribute(MethodImplOptions.InternalCall)]
-		extern static void copy_to_unmanaged (Array source, int startIndex,
-						      IntPtr destination, int length);
+		// No rank or element type check is performed please use Marshal.Copy instead.
+		static unsafe void copy_to_unmanaged (Array source, int startIndex,
+						      IntPtr destination, int length)
+		{
+			int elementSize;
+ 
+			if ((byte*) destination == null)
+				throw new ArgumentNullException ("destination");
+			if (source == null)
+				throw new ArgumentNullException ("source");
+			if (startIndex < 0)
+				throw new ArgumentOutOfRangeException ("startIndex", "Non-negative number required.");
+			if (length < 0)
+				throw new ArgumentOutOfRangeException ("length", "Non-negative number required.");
+			if (startIndex > source.Length - length)
+				throw new ArgumentOutOfRangeException (null, "Requested range extends past the end of the array.");
+ 
+			if (length == 0)
+				return;
 
-		[MethodImplAttribute(MethodImplOptions.InternalCall)]
-		extern static void copy_from_unmanaged (IntPtr source, int startIndex,
-							Array destination, int length);
+			elementSize = source.GetElementSize ();
+			string.memcpy ((byte*) destination, (byte*) object.UnsafeAddrOfPinnedObject (source) + Array.GetOffsetToArrayData () + elementSize * startIndex, elementSize * length);
+		}
 
+		// No rank or element type check is performed please use Marshal.Copy instead.
+		static unsafe void copy_from_unmanaged (IntPtr source, int startIndex,
+							Array destination, int length)
+		{
+			int elementSize;
+
+			if (destination == null)
+				throw new ArgumentNullException ("destination");
+			if ((byte*) source == null)
+				throw new ArgumentNullException ("source");
+			if (startIndex < 0)
+				throw new ArgumentOutOfRangeException ("startIndex", "Non-negative number required.");
+			if (length < 0)
+				throw new ArgumentOutOfRangeException ("length", "Non-negative number required.");
+			if (startIndex > destination.Length - length)
+				throw new ArgumentOutOfRangeException (null, "Requested range extends past the end of the array.");
+
+			if (length == 0)
+				return;
+
+			elementSize = destination.GetElementSize ();
+			string.memcpy ((byte*) object.UnsafeAddrOfPinnedObject (destination) + Array.GetOffsetToArrayData () + elementSize * startIndex, (byte*) source, elementSize * length);
+		}
+
 		public static void Copy (byte[] source, int startIndex, IntPtr destination, int length)
 		{
 			copy_to_unmanaged (source, startIndex, destination, length);
@@ -876,7 +916,7 @@
 				asBytes[i] = (byte)s[i];
 			asBytes[s.Length] = 0;
 
-			copy_to_unmanaged (asBytes, 0, ctm, length);
+			Copy (asBytes, 0, ctm, length);
 			return ctm;
 		}
 
@@ -895,7 +935,7 @@
 			s.CopyTo (0, asChars, 0, s.Length);
 			asChars[s.Length] = '\0';
 
-			copy_to_unmanaged (asChars, 0, ctm, length);
+			Copy (asChars, 0, ctm, length);
 			return ctm;
 		}
 
@@ -953,7 +993,7 @@
 					buffer [j+1] = 0;
 				}
 				copy [i] = 0;
-				copy_to_unmanaged (copy, 0, ctm, len+1);
+				Copy (copy, 0, ctm, len+1);
 			} finally {
 				// Ensure that we clear the buffer.
 				for (int i = len; i > 0; ){
@@ -1020,8 +1060,10 @@
 				throw ex;
 		}
 
-		[MethodImplAttribute(MethodImplOptions.InternalCall)]
-		public extern static IntPtr UnsafeAddrOfPinnedArrayElement (Array arr, int index);
+		public static unsafe IntPtr UnsafeAddrOfPinnedArrayElement (Array arr, int index)
+		{
+			return (IntPtr) ((byte*) object.UnsafeAddrOfPinnedObject (arr) + Array.GetOffsetToArrayData () + arr.GetElementSize () * index);
+		}
 
 		public static void WriteByte (IntPtr ptr, byte val)
 		{
