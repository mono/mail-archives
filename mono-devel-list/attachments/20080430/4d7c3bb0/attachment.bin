Index: SHA256Managed.cs
===================================================================
--- SHA256Managed.cs	(revision 102233)
+++ SHA256Managed.cs	(working copy)
@@ -39,7 +39,6 @@
 		private const int BLOCK_SIZE_BYTES =  64;
 		private const int HASH_SIZE_BYTES  =  32;
 		private uint[] _H;
-		private uint[] K;
 		private ulong count;
 		private byte[] _ProcessingBuffer;   // Used to start data when passed less than a block worth.
 		private int _ProcessingBufferCount; // Counts how much data we have stored that still needs processed.
@@ -53,44 +52,6 @@
 			Initialize ();
 		}
 
-		private uint Ch (uint u, uint v, uint w) 
-		{
-			return (u&v) ^ (~u&w);
-		}
-
-		private uint Maj (uint u, uint v, uint w) 
-		{
-			return (u&v) ^ (u&w) ^ (v&w);
-		}
-
-		private uint Ro0 (uint x) 
-		{
-			return ((x >> 7) | (x << 25))
-				^ ((x >> 18) | (x << 14))
-				^ (x >> 3);
-		}
-
-		private uint Ro1 (uint x) 
-		{
-			return ((x >> 17) | (x << 15))
-				^ ((x >> 19) | (x << 13))
-				^ (x >> 10);
-		}
-
-		private uint Sig0 (uint x) 
-		{
-			return ((x >> 2) | (x << 30))
-				^ ((x >> 13) | (x << 19))
-				^ ((x >> 22) | (x << 10));
-		}
-
-		private uint Sig1 (uint x) 
-		{
-			return ((x >> 6) | (x << 26))
-				^ ((x >> 11) | (x << 21))
-				^ ((x >> 25) | (x << 7));
-		}
-
 		protected override void HashCore (byte[] rgb, int start, int size) 
 		{
 			int i;
@@ -159,6 +120,8 @@
 			uint a, b, c, d, e, f, g, h;
 			uint t1, t2;
 			int i;
+			uint[] K1 = SHAConstants.K1;
+			uint[] buff = this.buff;
 		
 			count += BLOCK_SIZE_BYTES;
 
@@ -163,10 +126,10 @@
 			count += BLOCK_SIZE_BYTES;
 
 			for (i=0; i<16; i++) {
-				buff[i] = ((uint)(inputBuffer[inputOffset+4*i]) << 24)
-					| ((uint)(inputBuffer[inputOffset+4*i+1]) << 16)
-					| ((uint)(inputBuffer[inputOffset+4*i+2]) <<  8)
-					| ((uint)(inputBuffer[inputOffset+4*i+3]));
+				buff[i] = (uint)(((inputBuffer[inputOffset + 4 * i]) << 24)
+					| ((inputBuffer[inputOffset + 4 * i + 1]) << 16)
+					| ((inputBuffer[inputOffset + 4 * i + 2]) << 8)
+					| ((inputBuffer[inputOffset + 4 * i + 3])));
 			}
 
 		
@@ -171,7 +134,12 @@
 
 		
 			for (i=16; i<64; i++) {
-				buff[i] = Ro1(buff[i-2]) + buff[i-7] + Ro0(buff[i-15]) + buff[i-16];
+				t1 = buff[i - 15];
+				t1 = (((t1 >> 7) | (t1 << 25)) ^ ((t1 >> 18) | (t1 << 14)) ^ (t1 >> 3));
+
+				t2 = buff[i - 2];
+				t2 = (((t2 >> 17) | (t2 << 15)) ^ ((t2 >> 19) | (t2 << 13)) ^ (t2 >> 10));
+				buff[i] = t2 + buff[i - 7] + t1 + buff[i - 16];
 			}
 
 			a = _H[0];
@@ -184,8 +152,10 @@
 			h = _H[7];
 
 			for (i=0; i<64; i++) {
-				t1 = h + Sig1(e) + Ch(e,f,g) + SHAConstants.K1 [i] + buff[i];
-				t2 = Sig0(a) + Maj(a,b,c);
+				t1 = h + (((e >> 6) | (e << 26)) ^ ((e >> 11) | (e << 21)) ^ ((e >> 25) | (e << 7))) + ((e & f) ^ (~e & g)) + K1[i] + buff[i];
+
+				t2 = (((a >> 2) | (a << 30)) ^ ((a >> 13) | (a << 19)) ^ ((a >> 22) | (a << 10)));
+				t2 = t2 + ((a & b) ^ (a & c) ^ (b & c));
 				h = g;
 				g = f;
 				f = e;
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 102233)
+++ ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2008-04-30  Alan McGovern  <alan.mcgovern@gmail.com>
+
+	* SHA256Managed.cs: Inlined helper methods removed
+	unnecessary casts and made a field a local var.
+	Gives about 1.75x faster performance.
+
 2008-04-27  Alan McGovern  <alan.mcgovern@gmail.com>
 
 	* SHA1CryptoServiceProvider.cs: Performed loop unrolling and