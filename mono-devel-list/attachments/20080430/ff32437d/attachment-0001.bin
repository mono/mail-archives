Index: ChangeLog
===================================================================
--- ChangeLog	(revision 102167)
+++ ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2008-04-30  Alan McGovern  <alan.mcgovern@gmail.com>
+
+	* SHA256Managed.cs: Marked helper methods as static
+	removed unnecessary casts and made a field a local var.
+	Gives ~15% faster performance.
+
 2008-04-27  Alan McGovern  <alan.mcgovern@gmail.com>
 
 	* SHA1CryptoServiceProvider.cs: Performed loop unrolling and
Index: SHA256Managed.cs
===================================================================
--- SHA256Managed.cs	(revision 102166)
+++ SHA256Managed.cs	(working copy)
@@ -53,38 +53,38 @@
 			Initialize ();
 		}
 
-		private uint Ch (uint u, uint v, uint w) 
+		private static uint Ch (uint u, uint v, uint w) 
 		{
 			return (u&v) ^ (~u&w);
 		}
 
-		private uint Maj (uint u, uint v, uint w) 
+		private static uint Maj (uint u, uint v, uint w) 
 		{
 			return (u&v) ^ (u&w) ^ (v&w);
 		}
 
-		private uint Ro0 (uint x) 
+		private static uint Ro0 (uint x) 
 		{
 			return ((x >> 7) | (x << 25))
 				^ ((x >> 18) | (x << 14))
 				^ (x >> 3);
 		}
 
-		private uint Ro1 (uint x) 
+		private static uint Ro1 (uint x) 
 		{
 			return ((x >> 17) | (x << 15))
 				^ ((x >> 19) | (x << 13))
 				^ (x >> 10);
 		}
 
-		private uint Sig0 (uint x) 
+		private static uint Sig0 (uint x) 
 		{
 			return ((x >> 2) | (x << 30))
 				^ ((x >> 13) | (x << 19))
 				^ ((x >> 22) | (x << 10));
 		}
 
-		private uint Sig1 (uint x) 
+		private static uint Sig1 (uint x) 
 		{
 			return ((x >> 6) | (x << 26))
 				^ ((x >> 11) | (x << 21))
@@ -159,14 +159,16 @@
 			uint a, b, c, d, e, f, g, h;
 			uint t1, t2;
 			int i;
-		
+			uint[] K1 = SHAConstants.K1;
+			uint[] buff = this.buff;
+			
 			count += BLOCK_SIZE_BYTES;
 
 			for (i=0; i<16; i++) {
-				buff[i] = ((uint)(inputBuffer[inputOffset+4*i]) << 24)
-					| ((uint)(inputBuffer[inputOffset+4*i+1]) << 16)
-					| ((uint)(inputBuffer[inputOffset+4*i+2]) <<  8)
-					| ((uint)(inputBuffer[inputOffset+4*i+3]));
+				buff[i] = (uint)(((inputBuffer[inputOffset+4*i]) << 24)
+					| ((inputBuffer[inputOffset+4*i+1]) << 16)
+					| ((inputBuffer[inputOffset+4*i+2]) <<  8)
+					| ((inputBuffer[inputOffset+4*i+3])));
 			}
 
 		
@@ -184,7 +186,7 @@
 			h = _H[7];
 
 			for (i=0; i<64; i++) {
-				t1 = h + Sig1(e) + Ch(e,f,g) + SHAConstants.K1 [i] + buff[i];
+				t1 = h + Sig1(e) + Ch(e,f,g) + K1 [i] + buff[i];
 				t2 = Sig0(a) + Maj(a,b,c);
 				h = g;
 				g = f;