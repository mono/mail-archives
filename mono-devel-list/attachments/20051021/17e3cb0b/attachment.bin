Index: Int32.cs
===================================================================
--- Int32.cs	(revisi√≥n: 52018)
+++ Int32.cs	(copia de trabajo)
@@ -179,7 +179,7 @@
 			return Parse (s, style, null);
 		}
 
-		internal static void CheckStyle (NumberStyles style)
+		internal static bool CheckStyle (NumberStyles style)
 		{
 			if ((style & NumberStyles.AllowHexSpecifier) != 0) {
 				NumberStyles ne = style ^ NumberStyles.AllowHexSpecifier;
@@ -188,24 +188,37 @@
 				if ((ne & NumberStyles.AllowTrailingWhite) != 0)
 					ne ^= NumberStyles.AllowTrailingWhite;
 				if (ne != 0)
-					throw new ArgumentException (
-						"With AllowHexSpecifier only " + 
-						"AllowLeadingWhite and AllowTrailingWhite " + 
-						"are permitted.");
+					return false;
 			}
+
+			return true;
 		}
 		
-		internal static int JumpOverWhite (int pos, string s, bool excp)
+		internal static bool JumpOverWhite (ref int pos, string s)
 		{
+			return JumpOverWhite (ref pos, s, true);
+		}
+		
+		internal static bool JumpOverWhite (ref int pos, string s, bool report_error)
+		{
 			while (pos < s.Length && Char.IsWhiteSpace (s [pos]))
 				pos++;
 
-			if (excp && pos >= s.Length)
-				throw new FormatException ("Input string was not in the correct format.");
+			if (report_error && pos >= s.Length)
+				return false;
 
-			return pos;
+			return true;
 		}
 
+		internal static int JumpOverWhite (int pos, string s, bool exc)
+		{
+			int p = pos;
+			if (!JumpOverWhite (ref p, s, exc))
+				throw GetFormatException ();
+
+			return p;
+		}
+
 		internal static void FindSign (ref int pos, string s, NumberFormatInfo nfi, 
 				      ref bool foundSign, ref bool negative)
 		{
@@ -275,22 +288,33 @@
 			return Char.IsDigit (e);
 		}
 		
-		internal static bool Parse (string s, NumberStyles style, IFormatProvider fp, bool tryParse, out int result)
+		internal static Exception GetFormatException ()
 		{
+			return new FormatException ("Input string was not in the correct format.");
+		}
+		
+		internal static bool Parse (string s, NumberStyles style, IFormatProvider fp, bool tryParse, out int result, out Exception exc)
+		{
 			result = 0;
+			exc = null;
 
-			if (s == null)
-				if (tryParse)
-					return false;
-				else
-					throw new ArgumentNullException ();
+			if (s == null) {
+				if (!tryParse)
+					exc = GetFormatException ();
+				return false;
+			}
+			
+			if (s == null) {
+				if (!tryParse)
+					exc = new ArgumentNullException ();
+				return false;
+			}
 
-			if (s.Length == 0)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ("Input string was not " + 
-											   "in the correct format.");
+			if (s.Length == 0) {
+				if (!tryParse)
+					exc = GetFormatException ();
+				return false;
+			}
 
 			NumberFormatInfo nfi;
 			if (fp != null) {
@@ -300,7 +324,11 @@
 			else
 				nfi = Thread.CurrentThread.CurrentCulture.NumberFormat;
 
-			CheckStyle (style);
+			if (!CheckStyle (style)) {
+				if (!tryParse)
+					exc = new ArgumentException ();
+				return false;
+			}
 
 			bool AllowCurrencySymbol = (style & NumberStyles.AllowCurrencySymbol) != 0;
 			bool AllowHexSpecifier = (style & NumberStyles.AllowHexSpecifier) != 0;
@@ -316,7 +344,11 @@
 			int pos = 0;
 
 			if (AllowLeadingWhite)
-				pos = JumpOverWhite (pos, s, true);
+				if (!JumpOverWhite (ref pos, s, true)) {
+					if (!tryParse)
+						exc = GetFormatException ();
+					return false;
+				}
 
 			bool foundOpenParentheses = false;
 			bool negative = false;
@@ -331,20 +363,23 @@
 						 // even when NumberFormatInfo.NumberNegativePattern != 0!!!
 				pos++;
 				if (AllowLeadingWhite)
-					pos = JumpOverWhite (pos, s, true);
+					if (!JumpOverWhite (ref pos, s, true)) {
+						if (!tryParse)
+							exc = GetFormatException ();
+						return false;
+					}
 
-				if (s.Substring (pos, nfi.NegativeSign.Length) == nfi.NegativeSign)
-					if (tryParse)
-						return false;
-					else
-						throw new FormatException ("Input string was not in the correct " +
-												   "format.");
-				if (s.Substring (pos, nfi.PositiveSign.Length) == nfi.PositiveSign)
-					if (tryParse)
-						return false;
-					else
-						throw new FormatException ("Input string was not in the correct " +
-												   "format.");
+				if (s.Substring (pos, nfi.NegativeSign.Length) == nfi.NegativeSign) {
+					if (!tryParse)
+						exc = GetFormatException ();
+					return false;
+				}
+				
+				if (s.Substring (pos, nfi.PositiveSign.Length) == nfi.PositiveSign) {
+					if (!tryParse)
+						exc = GetFormatException ();
+					return false;
+				}
 			}
 
 			if (AllowLeadingSign && !foundSign) {
@@ -352,12 +387,20 @@
 				FindSign (ref pos, s, nfi, ref foundSign, ref negative);
 				if (foundSign) {
 					if (AllowLeadingWhite)
-						pos = JumpOverWhite (pos, s, true);
+						if (!JumpOverWhite (ref pos, s, true)) {
+							if (!tryParse)
+								exc = GetFormatException ();
+							return false;
+						}
 					if (AllowCurrencySymbol) {
 						FindCurrency (ref pos, s, nfi,
 							      ref foundCurrency);
 						if (foundCurrency && AllowLeadingWhite)
-							pos = JumpOverWhite (pos, s, true);
+							if (!JumpOverWhite (ref pos, s, true)) {
+								if (!tryParse)
+									exc = GetFormatException ();
+								return false;
+							}
 					}
 				}
 			}
@@ -367,13 +410,21 @@
 				FindCurrency (ref pos, s, nfi, ref foundCurrency);
 				if (foundCurrency) {
 					if (AllowLeadingWhite)
-						pos = JumpOverWhite (pos, s, true);
+						if (!JumpOverWhite (ref pos, s, true)) {
+							if (!tryParse)
+								exc = GetFormatException ();
+							return false;
+						}
 					if (foundCurrency) {
 						if (!foundSign && AllowLeadingSign) {
 							FindSign (ref pos, s, nfi, ref foundSign,
 								  ref negative);
 							if (foundSign && AllowLeadingWhite)
-								pos = JumpOverWhite (pos, s, true);
+								if (!JumpOverWhite (ref pos, s, true)) {
+									if (!tryParse)
+										exc = GetFormatException ();
+									return false;
+								}
 						}
 					}
 				}
@@ -418,12 +469,12 @@
 					nDigits++;
 					// Allows decimal point as long as it's only 
 					// followed by zeroes.
-					if (s [pos++] != '0')
-						if (tryParse)
-							return false;
-						else
-							throw new OverflowException ("Value too large or too " +
-														 "small.");
+					if (s [pos++] != '0') {
+						if (!tryParse)
+							exc = new OverflowException ("Value too large or too " +
+									"small.");
+						return false;
+					}
 				}
 				else {
 					nDigits++;
@@ -436,21 +487,20 @@
 							(int) (s [pos++] - '0')
 							);
 					} catch (OverflowException) {
-						if (tryParse)
-							return false;
-						else
-							throw new OverflowException ("Value too large or too " +
-														 "small.");
+						if (!tryParse)
+							exc = new OverflowException ("Value too large or too " +
+									"small.");
+						return false;
 					}
 				}
 			} while (pos < s.Length);
 
 			// Post number stuff
-			if (nDigits == 0)
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ("Input string was not in the correct format.");
+			if (nDigits == 0) {
+				if (!tryParse)
+					exc = GetFormatException ();
+				return false;
+			}
 
 			if (AllowExponent) 
 					FindExponent(ref pos, s);
@@ -460,7 +510,11 @@
 				FindSign (ref pos, s, nfi, ref foundSign, ref negative);
 				if (foundSign) {
 					if (AllowTrailingWhite)
-						pos = JumpOverWhite (pos, s, true);
+						if (!JumpOverWhite (ref pos, s, true)) {
+							if (!tryParse)
+								exc = GetFormatException ();
+							return false;
+						}
 					if (AllowCurrencySymbol)
 						FindCurrency (ref pos, s, nfi,
 							      ref foundCurrency);
@@ -472,7 +526,11 @@
 				FindCurrency (ref pos, s, nfi, ref foundCurrency);
 				if (foundCurrency) {
 					if (AllowTrailingWhite)
-						pos = JumpOverWhite (pos, s, true);
+						if (!JumpOverWhite (ref pos, s, true)) {
+							if (!tryParse)
+								exc = GetFormatException ();
+							return false;
+						}
 					if (!foundSign && AllowTrailingSign)
 						FindSign (ref pos, s, nfi, ref foundSign,
 							  ref negative);
@@ -480,24 +538,31 @@
 			}
 			
 			if (AllowTrailingWhite && pos < s.Length)
-				pos = JumpOverWhite (pos, s, false);
+				if (!JumpOverWhite (ref pos, s, false)) {
+					if (!tryParse)
+						exc = GetFormatException ();
 
+					return false;
+				}
+
 			if (foundOpenParentheses) {
-				if (pos >= s.Length || s [pos++] != ')')
-					if (tryParse)
+				if (pos >= s.Length || s [pos++] != ')') {
+					if (!tryParse)
+						exc = GetFormatException ();
+					return false;
+				}
+				if (AllowTrailingWhite && pos < s.Length)
+					if (!JumpOverWhite (ref pos, s, false)) {
+						if (!tryParse)
+							exc = GetFormatException ();
 						return false;
-					else
-						throw new FormatException ("Input string was not in the correct " +
-												   "format.");
-				if (AllowTrailingWhite && pos < s.Length)
-					pos = JumpOverWhite (pos, s, false);
+					}
 			}
 
 			if (pos < s.Length && s [pos] != '\u0000') {
-				if (tryParse)
-					return false;
-				else
-					throw new FormatException ("Input string was not in the correct format.");
+				if (!tryParse)
+					exc = GetFormatException ();
+				return false;
 			}
 			
 			if (!negative && !AllowHexSpecifier)
@@ -516,10 +581,13 @@
 			return res;
 		}
 
-		public static int Parse (string s, NumberStyles style, IFormatProvider fp) {
+		public static int Parse (string s, NumberStyles style, IFormatProvider fp) 
+		{
+			Exception exc;
 			int res;
 
-			Parse (s, style, fp, false, out res);
+			if (!Parse (s, style, fp, false, out res, out exc))
+				throw exc;
 
 			return res;
 		}
@@ -535,14 +603,15 @@
 			}
 		}
 
-		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out int result) {
-			try {
-				return Parse (s, style, provider, true, out result);
-			}
-			catch (Exception) {
+		public static bool TryParse (string s, NumberStyles style, IFormatProvider provider, out int result) 
+		{
+			Exception exc;
+			if (!Parse (s, style, provider, true, out result, out exc)) {
 				result = 0;
 				return false;
 			}
+
+			return true;
 		}
 #endif
 
Index: UInt32.cs
===================================================================
--- UInt32.cs	(revisi√≥n: 52018)
+++ UInt32.cs	(copia de trabajo)
@@ -199,7 +199,14 @@
 			else
 				nfi = Thread.CurrentThread.CurrentCulture.NumberFormat;
 
-			Int32.CheckStyle (style);
+			if (!Int32.CheckStyle (style))
+				if (tryParse)
+					return false;
+				else
+					throw new ArgumentException (
+							"With AllowHexSpecifier only " + 
+							"AllowLeadingWhite and AllowTrailingWhite " + 
+							"are permitted.");
 
 			bool AllowCurrencySymbol = (style & NumberStyles.AllowCurrencySymbol) != 0;
 			bool AllowHexSpecifier = (style & NumberStyles.AllowHexSpecifier) != 0;
Index: Int64.cs
===================================================================
--- Int64.cs	(revisi√≥n: 52014)
+++ Int64.cs	(copia de trabajo)
@@ -199,7 +199,14 @@
 			else
 				nfi = Thread.CurrentThread.CurrentCulture.NumberFormat;
 
-			Int32.CheckStyle (style);
+			if (!Int32.CheckStyle (style))
+				if (tryParse)
+					return false;
+				else
+					throw new ArgumentException (
+							"With AllowHexSpecifier only " + 
+							"AllowLeadingWhite and AllowTrailingWhite " + 
+							"are permitted.");
 
 			bool AllowCurrencySymbol = (style & NumberStyles.AllowCurrencySymbol) != 0;
 			bool AllowHexSpecifier = (style & NumberStyles.AllowHexSpecifier) != 0;
Index: UInt64.cs
===================================================================
--- UInt64.cs	(revisi√≥n: 52014)
+++ UInt64.cs	(copia de trabajo)
@@ -133,7 +133,14 @@
 			else
 				nfi = Thread.CurrentThread.CurrentCulture.NumberFormat;
 
-			Int32.CheckStyle (style);
+			if (!Int32.CheckStyle (style))
+				if (tryParse)
+					return false;
+				else
+					throw new ArgumentException (
+							"With AllowHexSpecifier only " + 
+							"AllowLeadingWhite and AllowTrailingWhite " + 
+							"are permitted.");
 
 			bool AllowCurrencySymbol = (style & NumberStyles.AllowCurrencySymbol) != 0;
 			bool AllowHexSpecifier = (style & NumberStyles.AllowHexSpecifier) != 0;
