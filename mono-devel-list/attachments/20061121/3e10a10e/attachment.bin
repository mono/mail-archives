Index: System/ChangeLog
===================================================================
--- System/ChangeLog	(revision 68112)
+++ System/ChangeLog	(working copy)
@@ -1,3 +1,14 @@
+2006-11-21  Miguel de Icaza  <miguel@novell.com>
+
+	* TimeZone.cs (CurrentSystemTimeZone): Cache the current year
+	daylight savings time in static variables.
+
+	(CurrentSystemTimeZone.OnDeserialization): Initialize
+	this_year_dlt and this_year on this method.
+
+	(TimeZone): init statically the currentTimeZone instead of
+	delaying that to the static property, avoiding a compare. 
+
 2006-11-14  Miguel de Icaza  <miguel@novell.com>
 
 	* Array.cs: TODOs will from now on be used to flag information
Index: System/TimeZone.cs
===================================================================
--- System/TimeZone.cs	(revision 68112)
+++ System/TimeZone.cs	(working copy)
@@ -40,7 +40,7 @@
 	public abstract class TimeZone
 	{
 		// Fields
-		private static TimeZone currentTimeZone;
+		private static TimeZone currentTimeZone = new CurrentSystemTimeZone (DateTime.GetNow ());
 
 		// Constructor
 		protected TimeZone ()
@@ -50,19 +50,10 @@
 		// Properties
 		public static TimeZone CurrentTimeZone {
 			get {
-				if (currentTimeZone == null) {
-					DateTime now = new DateTime (DateTime.GetNow ());
-					currentTimeZone = new CurrentSystemTimeZone (now);
-				}
 				return currentTimeZone;
 			}
 		}
 
-		internal static void ClearCurrentTimeZone ()
-		{
-			currentTimeZone = null;
-		}
-
 		public abstract string DaylightName {
 			get;
 		}
@@ -112,7 +103,6 @@
 				return time;
 #endif
 
-			DaylightTime dlt = GetDaylightChanges (time.Year);
 			TimeSpan utcOffset = GetUtcOffset (time);
 			if (utcOffset.Ticks > 0) {
 				if (DateTime.MaxValue - utcOffset < time)
@@ -127,6 +117,7 @@
 			}
 
 			DateTime local = time.Add (utcOffset);
+			DaylightTime dlt = GetDaylightChanges (time.Year);
 			if (dlt.Delta.Ticks == 0)
 #if NET_2_0
 				return DateTime.SpecifyKind (local, DateTimeKind.Local);
@@ -244,11 +235,23 @@
 		{
 		}
 
-		internal CurrentSystemTimeZone (DateTime now)
+		//
+		// Initialized by the constructor
+		//
+		static int this_year;
+		static DaylightTime this_year_dlt;
+		
+		//
+		// The "lnow" parameter must be the current time, I could have moved
+		// the code here, but I do not want to interfere with serialization
+		// which is why I kept the other constructor around
+		//
+		internal CurrentSystemTimeZone (long lnow)
 		{
 			Int64[] data;
 			string[] names;
 
+			DateTime now = new DateTime (lnow);
 			if (!GetTimeZoneData (now.Year, out data, out names))
 				throw new NotSupportedException (Locale.GetText ("Can't get timezone name."));
 
@@ -279,6 +282,13 @@
 				throw new ArgumentOutOfRangeException ("year", year +
 					Locale.GetText (" is not in a range between 1 and 9999."));
 
+			//
+			// First we try the case for this year, very common, and is used
+			// by DateTime.Now (a popular call) indirectly.
+			//
+			if (year == this_year)
+				return this_year_dlt;
+			
 			lock (m_CachedDaylightChanges) {
 				DaylightTime dlt = (DaylightTime) m_CachedDaylightChanges [year];
 				if (dlt == null) {
@@ -314,13 +324,16 @@
 				Int64[] data;
 				string[] names;
 
-				int year = DateTime.Now.Year;
-				if (!GetTimeZoneData (year, out data, out names))
-					throw new ArgumentException (Locale.GetText ("Can't get timezone data for " + year));
+				this_year = DateTime.Now.Year;
+				if (!GetTimeZoneData (this_year, out data, out names))
+					throw new ArgumentException (Locale.GetText ("Can't get timezone data for " + this_year));
 				dlt = GetDaylightTimeFromData (data);
-			}
+			} else
+				this_year = dlt.Start.Year;
+			
 			utcOffsetWithOutDLS = new TimeSpan (m_ticksOffset);
 			utcOffsetWithDLS = new TimeSpan (m_ticksOffset + dlt.Delta.Ticks);
+			this_year_dlt = dlt;
 		}
 
 		private DaylightTime GetDaylightTimeFromData (long[] data)
