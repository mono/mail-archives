? FileStream.cs.oma
? System.IO.diff
? omacl
? update
Index: BufferedStream.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.IO/BufferedStream.cs,v
retrieving revision 1.6
diff -u -r1.6 BufferedStream.cs
--- BufferedStream.cs	24 Apr 2003 16:26:16 -0000	1.6
+++ BufferedStream.cs	6 May 2003 15:58:08 -0000
@@ -25,14 +25,7 @@
 				throw new ArgumentNullException ("stream was null");
 			if (buffer_size < 0)
 				throw new ArgumentOutOfRangeException ();
-			
-			// There are stream classes that don't support Positioning.
-			if (stream.CanSeek) {
-				// if stream is closed this throws an exception
-				// FIXME: better way?
-				long l = stream.Position;
-			}
-			
+						
 			m_stream = stream;
 			m_buffer = new byte[buffer_size];
 		}
@@ -64,6 +57,7 @@
 		
 		public override long Position {
 			get {
+				CheckObjectDisposedException ();
 				return m_stream.Position - m_buffer_read_ahead + m_buffer_pos;
 			}
 
@@ -74,7 +68,10 @@
 		}
 
 		public override void Close() {
-			Flush();
+			
+			if (m_buffer != null)
+				Flush();
+
 			m_stream.Close();
 			m_buffer = null;
 			disposed = true;
@@ -82,6 +79,8 @@
 
 		public override void Flush() {
 			
+			CheckObjectDisposedException ();
+
 			if (m_buffer_reading) {
 				if (CanSeek)
 					m_stream.Position = Position;
Index: ChangeLog
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.IO/ChangeLog,v
retrieving revision 1.164
diff -u -r1.164 ChangeLog
--- ChangeLog	5 May 2003 23:07:20 -0000	1.164
+++ ChangeLog	6 May 2003 15:58:08 -0000
@@ -1,3 +1,23 @@
+2003-05-06  Ville Palo <vi64pa@kolumbus.fi>
+
+	* BufferedStream.cs: 
+	  - Removed unusefull code.
+	  - Added ObjectDisposedException to Position
+	  - Dont flush if stream is allready closed.
+	  - Flush throws also ObjectDisposedException.
+	* Directory.cs:
+	  - GetFileSystemEtries: ArgumentNullException if pattern is null
+	* DirectoryInfo.cs: Fixed little MoveTo () bug.
+	* FileInfo.cs:
+	  - Exists: If file does not exists when instance is created the
+	  value of the Exists property does not change even if file is created
+	  afterwards.
+	  - Delete: If path is a directory UnauthorizedException is thrown.
+	  - CopyTo: Now we can overwrite file if wanted.
+	* Path.cs: 
+	  - GetFullPath: Now throws exception when path is "   ".
+	* SearchPattern: Added little ms stuff. File extension handling.
+	
 2003-05-04  Ben Maurer <bmaurer@users.sourceforge.net>
 	* Directory.cs (GetLogicalDrives) Marked as MonoTODO
 	because we need to implement the method on Windows.
Index: Directory.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.IO/Directory.cs,v
retrieving revision 1.30
diff -u -r1.30 Directory.cs
--- Directory.cs	5 May 2003 23:07:20 -0000	1.30
+++ Directory.cs	6 May 2003 15:58:09 -0000
@@ -321,7 +321,7 @@
 			MonoIOStat stat;
 			IntPtr find;
 
-			if (path == null)
+			if (path == null || pattern == null)
 				throw new ArgumentNullException ();
 
 			if (path == "")
Index: DirectoryInfo.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.IO/DirectoryInfo.cs,v
retrieving revision 1.13
diff -u -r1.13 DirectoryInfo.cs
--- DirectoryInfo.cs	3 Mar 2003 10:33:05 -0000	1.13
+++ DirectoryInfo.cs	6 May 2003 15:58:09 -0000
@@ -128,7 +128,7 @@
 		}
 
 		public void MoveTo (string dest) {
-			Directory.Move (FullPath, dest);
+ 			Directory.Move (FullPath, Path.GetFullPath (dest));
 		}
 
 		public override string ToString () {
Index: FileInfo.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.IO/FileInfo.cs,v
retrieving revision 1.14
diff -u -r1.14 FileInfo.cs
--- FileInfo.cs	31 Oct 2002 15:55:48 -0000	1.14
+++ FileInfo.cs	6 May 2003 15:58:09 -0000
@@ -17,11 +17,15 @@
 	[Serializable]
 	public sealed class FileInfo : FileSystemInfo {
 	
+
+                private bool exists = false;
+
 		public FileInfo (string path) {
 			CheckPath (path);
 		
 			OriginalPath = path;
-			FullPath = Path.GetFullPath (path);
+			FullPath = Path.GetFullPath (path);
+			exists = File.Exists (path);
 		}
 
 		// public properties
@@ -36,7 +40,7 @@
 				if ((stat.Attributes & FileAttributes.Directory) != 0)
 					return false;
 
-				return File.Exists (FullPath);
+				return exists;
 			}
 		}
 
@@ -113,11 +117,15 @@
 
 		public override void Delete () {
 			MonoIOError error;
-			
+						
 			if (!MonoIO.Exists (FullPath, out error)) {
 				// a weird MS.NET behaviour
 				return;
 			}
+
+			if (MonoIO.ExistsDirectory (FullPath, out error)) {
+				throw new UnauthorizedAccessException ("Access to the path \"" + FullPath + "\" is denied.");
+			}
 			
 			if (!MonoIO.DeleteFile (FullPath, out error)) {
 				throw MonoIO.GetException (OriginalPath,
@@ -135,6 +143,10 @@
 
 		public FileInfo CopyTo (string path, bool overwrite) {
 			string dest = Path.GetFullPath (path);
+
+			if (overwrite && File.Exists (path))
+				File.Delete (path);
+
 			File.Copy (FullPath, dest);
 		
 			return new FileInfo (dest);
Index: Path.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.IO/Path.cs,v
retrieving revision 1.27
diff -u -r1.27 Path.cs
--- Path.cs	5 May 2003 23:07:20 -0000	1.27
+++ Path.cs	6 May 2003 15:58:09 -0000
@@ -161,7 +161,7 @@
 					"path",
 					"You must specify a path when calling System.IO.Path.GetFullPath"));
 			
-			if (path == String.Empty)
+			if (path.Trim () == String.Empty)
 				throw new ArgumentException ("The path is not of a legal form", "path");
 
 			if (!IsPathRooted (path))
Index: SearchPattern.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.IO/SearchPattern.cs,v
retrieving revision 1.1
diff -u -r1.1 SearchPattern.cs
--- SearchPattern.cs	15 Mar 2002 15:07:33 -0000	1.1
+++ SearchPattern.cs	6 May 2003 15:58:09 -0000
@@ -42,9 +42,26 @@
 			if (pattern == "*") {	// common case
 				ops = new Op (OpCode.True);
 				return;
-			}
+			}			
 
 			ops = null;
+
+			/* FIXME: On csc if pattern ends with *.abc it's same as *.abc*,
+			 * but if it ends with *.abcd it is not anymore same as *.abcd*.
+			 * On linux, this is wrong, but msdn says so, so what to do?
+			 * The following list shows the behavior of different lengths for the searchPattern parameter:
+			 *
+			 *    * "*.abc" returns files having an extension of .abc, .abcd, .abcde, .abcdef, and so on.
+			 *    * "*.abcd" returns only files having an extension of .abcd.
+			 *    * "*.abcde" returns only files having an extension of .abcde.
+			 *    * "*.abcdef" returns only files having an extension of .abcdef.
+			 */
+			if (pattern.LastIndexOf("*.") == pattern.Length - 5) {
+				if (Char.IsLetter (pattern [pattern.Length - 3]) 
+				    && Char.IsLetter (pattern [pattern.Length - 2]) 
+				    && Char.IsLetter (pattern [pattern.Length - 1]))
+					pattern += "*";
+			}
 
 			int ptr = 0;
 			Op last_op = null;
