Index: CacheDependency.cs
===================================================================
--- CacheDependency.cs	(revision 67748)
+++ CacheDependency.cs	(working copy)
@@ -30,6 +30,9 @@
 using System.Collections;
 using System.IO;
 using System.Security.Permissions;
+#if NET_2_0
+using System.Text;
+#endif
 
 namespace System.Web.Caching
 {
@@ -51,8 +54,17 @@
 		FileSystemWatcher[] watchers;
 #endif
 		bool hasChanged;
+#if NET_2_0
+		bool used;
+#endif
 		object locker = new object ();
 		
+#if NET_2_0
+		public CacheDependency (): this (null, null, null, DateTime.Now)
+		{
+		}
+#endif
+		
 		public CacheDependency (string filename): this (new string[] { filename }, null, null, DateTime.Now)
 		{
 		}
@@ -114,6 +126,25 @@
 				dependency.DependencyChanged += new EventHandler (OnChildDependencyChanged);
 			this.start = start;
 		}
+
+#if NET_2_0
+		public virtual string GetUniqueID ()
+		{
+			StringBuilder sb = new StringBuilder ();
+			lock (locker) {
+				if (watchers != null)
+					foreach (FileSystemWatcher fsw in watchers)
+						if (fsw != null && fsw.Path != null && fsw.Path.Length != 0)
+							sb.AppendFormat ("_{0}", fsw.Path);
+			}
+
+			if (cachekeys != null)
+				foreach (string key in cachekeys)
+					sb.AppendFormat ("_{0}", key);
+			return sb.ToString ();
+		}
+#endif
+		
 #if !TARGET_JVM
 		void OnChanged (object sender, FileSystemEventArgs args)
 		{
@@ -153,8 +184,22 @@
 		internal void SetCache (Cache c)
 		{
 			cache = c;
+#if NET_2_0
+			used = c != null;
+#endif
 		}
 		
+#if NET_2_0
+		internal bool IsUsed {
+			get { return used; }
+		}
+
+		internal DateTime Start {
+			get { return start; }
+			set { start = value; }
+		}
+#endif
+		
 		public bool HasChanged {
 			get {
 				if (hasChanged)
@@ -190,6 +235,12 @@
 				DependencyChanged (this, null);
 		}
 		
+#if NET_2_0
+		internal void SignalDependencyChanged ()
+		{
+			OnDependencyChanged ();
+		}
+#endif
 		internal event EventHandler DependencyChanged;
 	}
 }
Index: Cache.cs
===================================================================
--- Cache.cs	(revision 67748)
+++ Cache.cs	(working copy)
@@ -176,6 +176,9 @@
 				CacheItem it = (CacheItem) cache [key];
 				if (it != null) {
 					if (it.Dependency != null) {
+#if NET_2_0
+						it.Dependency.SetCache (null);
+#endif
 						it.Dependency.DependencyChanged -= new EventHandler (OnDependencyChanged);
 						it.Dependency.Dispose ();
 					}
Index: AggregateCacheDependency.cs
===================================================================
--- AggregateCacheDependency.cs	(revision 0)
+++ AggregateCacheDependency.cs	(revision 0)
@@ -0,0 +1,88 @@
+//
+// System.Web.Compilation.AggregateCacheDependency
+//
+// Authors:
+//   Marek Habersack (grendello@gmail.com)
+//
+// (C) 2006 Marek Habersack
+//
+
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+#if NET_2_0
+using System;
+using System.Collections.Generic;
+using System.Text;
+using System.Web;
+
+namespace System.Web.Caching 
+{
+	public sealed class AggregateCacheDependency : CacheDependency
+	{
+		private List <CacheDependency> dependencies;
+		
+		public AggregateCacheDependency ()
+		{
+			dependencies = new List <CacheDependency> ();
+		}
+
+		public void Add (params CacheDependency [] dependencies)
+		{
+			if (dependencies == null)
+				throw new ArgumentNullException ("dependencies");
+			foreach (CacheDependency dep in dependencies)
+				if (dep == null || dep.IsUsed)
+					throw new InvalidOperationException ("Cache dependency already in use");
+
+			bool somethingChanged = false;
+			lock (dependencies) {
+				this.dependencies.AddRange (dependencies);
+				foreach (CacheDependency dep in dependencies)
+					if (dep.HasChanged) {
+						somethingChanged = true;
+						break;
+					}
+			}
+			base.Start = DateTime.UtcNow;
+			if (somethingChanged)
+				base.SignalDependencyChanged ();
+		}
+
+		public override string GetUniqueID ()
+		{
+			if (dependencies == null)
+				return null;
+			
+			StringBuilder sb = new StringBuilder ();
+			lock (dependencies) {
+				string depid = null;
+				foreach (CacheDependency dep in dependencies) {
+					depid = dep.GetUniqueID ();
+					if (depid == null || depid.Length == 0)
+						return null;
+					sb.AppendFormat ("{0};", depid);
+				}
+			}
+			return sb.ToString ();
+		}
+	}
+}
+#endif
