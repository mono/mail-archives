Index: Encoding.cs
===================================================================
--- Encoding.cs	(revision 59252)
+++ Encoding.cs	(working copy)
@@ -289,10 +289,10 @@
 	}
 	public virtual byte[] GetBytes (char[] chars)
 	{
-		int numBytes = GetByteCount (chars, 0, chars.Length);
-		byte[] bytes = new byte [numBytes];
-		GetBytes (chars, 0, chars.Length, bytes, 0);
-		return bytes;
+		if (chars == null)
+			throw new ArgumentNullException ("chars");
+
+		return GetBytes (chars, 0, chars.Length);
 	}
 
 	// Get the number of characters needed to decode a byte buffer.
@@ -324,10 +324,7 @@
 		if (bytes == null) {
 			throw new ArgumentNullException ("bytes");
 		}
-		int numChars = GetCharCount (bytes, 0, bytes.Length);
-		char[] chars = new char [numChars];
-		GetChars (bytes, 0, bytes.Length, chars, 0);
-		return chars;
+		return GetChars (bytes, 0, bytes.Length);
 	}
 
 	// Get a decoder that forwards requests to this object.
@@ -663,7 +660,10 @@
 	}
 	public virtual String GetString (byte[] bytes)
 	{
-		return new String (GetChars(bytes));
+		if (bytes == null)
+			throw new ArgumentNullException ("bytes");
+
+		return GetString (bytes, 0, bytes.Length);
 	}
 
 #if !ECMA_COMPAT
Index: UnicodeEncoding.cs
===================================================================
--- UnicodeEncoding.cs	(revision 59252)
+++ UnicodeEncoding.cs	(working copy)
@@ -298,6 +298,29 @@
 
 		return GetCharsInternal (bytes, byteCount, chars, charCount);
 	}
+
+	// Decode a buffer of bytes into a string.
+	public unsafe override String GetString (byte[] bytes, int index, int count)
+	{
+		if (bytes == null)
+			throw new ArgumentNullException ("bytes");
+		if (index < 0 || index > bytes.Length)
+			throw new ArgumentOutOfRangeException ("index", _("ArgRange_Array"));
+		if (count < 0 || count > (bytes.Length - index))
+			throw new ArgumentOutOfRangeException ("count", _("ArgRange_Array"));
+
+		if (count == 0)
+			return string.Empty;
+
+		int charCount = GetCharCount (bytes, index, count);
+		string s = string.InternalAllocateStr (charCount);
+
+		fixed (byte* bytePtr = bytes)
+			fixed (char* charPtr = s)
+				GetCharsInternal (bytePtr + index, count, charPtr, charCount);
+
+		return s;
+	}
 #endif
 
 	private unsafe int GetCharsInternal (byte* bytes, int byteCount,
