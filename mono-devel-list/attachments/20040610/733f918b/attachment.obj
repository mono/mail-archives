using System;
using System.Reflection;
using System.Reflection.Emit;

class Class1
{
	static void Main(string[] args)
	{
		AssemblyName name = new AssemblyName();
		name.Name = "test";
		AssemblyBuilder ab = AppDomain.CurrentDomain.DefineDynamicAssembly(name, AssemblyBuilderAccess.RunAndSave);
		ModuleBuilder mod = ab.DefineDynamicModule("test", "test.dll");
		TypeBuilder tb = mod.DefineType("TestType");
		MethodBuilder mb = tb.DefineMethod("main", MethodAttributes.Static | MethodAttributes.Public, null, null);
		Console.WriteLine(mb.GetToken().Token);
		Console.WriteLine(mod.GetMethodToken(mb).Token);
		mb.GetILGenerator().Emit(OpCodes.Ret);
		Type t = tb.CreateType();
		Console.WriteLine(mod.GetMethodToken(mb).Token);
		Console.WriteLine(mod.GetMethodToken(t.GetMethod("main")).Token);
		ab.Save("test.dll");
	}
}
