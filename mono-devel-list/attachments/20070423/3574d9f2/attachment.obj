Index: System.Windows.Forms/BindingNavigator.cs
===================================================================
--- System.Windows.Forms/BindingNavigator.cs	(revision 0)
+++ System.Windows.Forms/BindingNavigator.cs	(revision 0)
@@ -0,0 +1,321 @@
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+// Copyright (c) 2005 Novell, Inc. (http://www.novell.com)
+//
+// Authors:
+//	Olivier Dufour	olivier.duff@free.fr
+//
+//
+
+#if NET_2_0
+
+using System;
+using System.Collections.Generic;
+using System.Text;
+using System.ComponentModel;
+using System.Runtime.InteropServices;
+
+namespace System.Windows.Forms
+{
+	[ComVisibleAttribute(true)]
+	[ClassInterfaceAttribute(ClassInterfaceType.AutoDispatch)]
+	public class BindingNavigator : ToolStrip, ISupportInitialize
+	{
+		public BindingNavigator() : this(false)
+		{
+		}
+
+		public BindingNavigator(BindingSource bindingSource)
+		{
+			this.bindingSource = bindingSource;
+			this.AddStandardItems();
+		}
+
+		public BindingNavigator(bool addStandardItems) 
+		{
+			this.bindingSource = null;
+			if (addStandardItems)
+				this.AddStandardItems();
+		}
+
+		public BindingNavigator(IContainer container)
+		{
+			container.Add(this);
+			bindingSource = null;
+		}
+
+		#region private fields
+
+		private ToolStripItem addNewItem = null;
+		private BindingSource bindingSource = null;
+		private ToolStripItem countItem = null;
+		private string countItemFormat = Locale.GetText("of {0}");
+		private ToolStripItem deleteItem = null;
+		private ToolStripItem moveFirstItem = null;
+		private ToolStripItem moveLastItem = null;
+		private ToolStripItem moveNextItem = null;
+		private ToolStripItem movePreviousItem = null;
+		private ToolStripItem positionItem = null;
+		private bool initFlag = false;
+		#endregion 
+
+		#region Public Properties
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem AddNewItem {
+			get { return addNewItem; }
+			set {
+				addNewItem.Click -= new EventHandler(OnAddNew);
+				value.Click += new EventHandler(OnAddNew);
+				addNewItem = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public BindingSource BindingSource {
+			get { return bindingSource; }
+			set { 
+				bindingSource = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem CountItem {
+			get { return countItem; }
+			set {
+				countItem = value;
+				this.OnRefreshItems();
+			}
+		}
+		
+		public string CountItemFormat {
+			get { return countItemFormat; }
+			set {
+				countItemFormat = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem DeleteItem {
+			get { return deleteItem; }
+			set {
+				deleteItem.Click -= new EventHandler(OnDelete);
+				value.Click += new EventHandler(OnDelete);
+				deleteItem = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem MoveFirstItem {
+			get { return moveFirstItem; }
+			set {
+				moveFirstItem.Click -= new EventHandler(OnMoveFirst);
+				value.Click += new EventHandler(OnMoveFirst);
+				moveFirstItem = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem MoveLastItem {
+			get { return moveLastItem; }
+			set {
+				moveLastItem.Click -= new EventHandler(OnMoveLast);
+				value.Click += new EventHandler(OnMoveLast);
+				moveLastItem = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem MoveNextItem {
+			get { return moveNextItem; }
+			set {
+				moveNextItem.Click -= new EventHandler(OnMoveNext);
+				value.Click += new EventHandler(OnMoveNext);
+				moveNextItem = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem MovePreviousItem {
+			get { return movePreviousItem; }
+			set {
+				movePreviousItem.Click -= new EventHandler(OnMovePrevious);
+				value.Click += new EventHandler(OnMovePrevious);
+				movePreviousItem = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		[TypeConverter(typeof(ReferenceConverter))]
+		public ToolStripItem PositionItem {
+			get { return positionItem; }
+			set {
+				positionItem = value;
+				this.OnRefreshItems();
+			}
+		}
+
+		#endregion
+
+		#region public Events
+
+		public event EventHandler RefreshItems;
+
+		#endregion
+
+		#region public and protected Methodes
+
+		[MonoTODO("Order of each item, properties(text,image)")]
+		public virtual void AddStandardItems()
+		{
+			addNewItem = new ToolStripButton();
+			this.Items.Add(addNewItem);
+
+			moveFirstItem = new ToolStripButton();
+			this.Items.Add(moveFirstItem);
+
+			moveLastItem = new ToolStripButton();
+			this.Items.Add(moveLastItem);
+
+			moveNextItem = new ToolStripButton();
+			this.Items.Add(moveNextItem);
+
+			movePreviousItem = new ToolStripButton();
+			this.Items.Add(movePreviousItem);
+
+			deleteItem = new ToolStripButton();
+			this.Items.Add(deleteItem);
+
+			countItem = new ToolStripLabel();
+			this.Items.Add(countItem);
+
+			positionItem = new ToolStripTextBox();
+			this.Items.Add(positionItem);
+		}
+
+		public void BeginInit()
+		{
+			initFlag = true;
+		}
+
+		protected override void Dispose(bool disposing)
+		{
+			base.Dispose(disposing);
+		}
+
+		public void EndInit()
+		{
+			initFlag = false;
+			OnRefreshItems();
+		}
+
+		protected virtual void OnRefreshItems()
+		{
+			if (initFlag)
+				return;
+			this.RefreshItems(this, EventArgs.Empty);
+			this.RefreshItemsCore();
+		}
+		
+		protected virtual void RefreshItemsCore()
+		{
+			if (bindingSource == null || !bindingSource.AllowNew)
+				addNewItem.Enabled = false;
+
+			if (bindingSource == null || bindingSource.Position == 0 || !bindingSource.AllowNew)
+				moveFirstItem.Enabled = false;
+
+			if (bindingSource == null || bindingSource.Position >= bindingSource.Count)
+				moveLastItem.Enabled = false;
+
+			if (bindingSource == null || bindingSource.Position >= bindingSource.Count)
+				moveNextItem.Enabled = false;
+
+			if (bindingSource == null || bindingSource.Position <= 0)
+				movePreviousItem.Enabled = false;
+
+			if (bindingSource == null || bindingSource.Count == 0 || !bindingSource.AllowNew)
+				deleteItem.Enabled = false;
+
+			if (bindingSource != null)
+			{
+				countItem.Text = string.Format(countItemFormat, bindingSource.Count);
+				positionItem.Text = string.Format("{0}", bindingSource.Position + 1);
+			}
+		}
+
+		[MonoTODO]
+		public bool Validate()
+		{
+			throw new NotImplementedException();
+		}
+
+		#endregion
+
+		#region private methode
+
+		private void OnAddNew(object sender, EventArgs e)
+		{
+			if (bindingSource != null)
+				bindingSource.AddNew();
+		}
+
+		private void OnDelete(object sender, EventArgs e)
+		{
+			if (bindingSource != null)
+				bindingSource.RemoveCurrent();
+		}
+
+		private void OnMoveFirst(object sender, EventArgs e)
+		{
+			if (bindingSource != null)
+				bindingSource.MoveFirst();
+		}
+
+		private void OnMoveLast(object sender, EventArgs e)
+		{
+			if (bindingSource != null)
+				bindingSource.MoveLast();
+		}
+
+		private void OnMoveNext(object sender, EventArgs e)
+		{
+			if (bindingSource != null)
+				bindingSource.MoveNext();
+		}
+
+		private void OnMovePrevious(object sender, EventArgs e)
+		{
+			if (bindingSource != null)
+				bindingSource.MovePrevious();
+		}
+
+		#endregion
+	}
+}
+
+#endif
Index: System.Windows.Forms/MaskedTextBox.cs
===================================================================
--- System.Windows.Forms/MaskedTextBox.cs	(revision 0)
+++ System.Windows.Forms/MaskedTextBox.cs	(revision 0)
@@ -0,0 +1,417 @@
+//
+// MaskFormat.cs
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+// Copyright (c) 2006 Novell, Inc.
+//
+// Authors:
+//	Olivier Dufour (olivier.duff@free.fr)
+//
+
+
+#if NET_2_0
+
+using System.Windows.Forms;
+using System.ComponentModel;
+using System.Globalization;
+using System.Drawing;
+using System.Runtime.InteropServices;
+
+namespace System.Windows.Forms
+{
+	[ClassInterfaceAttribute(ClassInterfaceType.AutoDispatch)] 
+	[ComVisibleAttribute(true)] 
+	public class MaskedTextBox : TextBoxBase
+	{
+		#region Contructor
+
+		public MaskedTextBox() : this("<>")
+		{}
+
+		public MaskedTextBox(MaskedTextProvider maskedTextProvider)
+		{
+			this.maskedTextProvider = maskedTextProvider;
+		}
+
+		public MaskedTextBox(string mask)  : this( new MaskedTextProvider(mask))
+		{}
+
+		#endregion
+
+		#region private var
+
+		private MaskedTextProvider maskedTextProvider;
+		private bool beepOnError = false;
+		private MaskFormat cutCopyMaskFormat = MaskFormat.IncludeLiterals;
+		private IFormatProvider formatProvider;
+		private bool hidePromptOnLeave;
+		private InsertKeyMode insertKeyMode;
+		private bool rejectInputOnFirstFailure;
+		private HorizontalAlignment textAlign;
+		private MaskFormat textMaskFormat;
+		private bool useSystemPasswordChar;
+		private Type validatingType;
+
+		#endregion
+
+		#region public Properties
+
+		public new bool AcceptsTab { 
+			get { return false; } 
+			set { } 
+		}
+
+		public bool AllowPromptAsInput { 
+			get { return MaskedTextProvider.AllowPromptAsInput; }
+			set { maskedTextProvider = new MaskedTextProvider(maskedTextProvider.Mask,maskedTextProvider.Culture,value,maskedTextProvider.PromptChar,maskedTextProvider.PasswordChar,maskedTextProvider.AsciiOnly); } 
+		}
+
+		public bool AsciiOnly {
+			get { return MaskedTextProvider.AsciiOnly; }
+			set { maskedTextProvider = new MaskedTextProvider(maskedTextProvider.Mask, maskedTextProvider.Culture, maskedTextProvider.AllowPromptAsInput, maskedTextProvider.PromptChar, maskedTextProvider.PasswordChar, value); }
+		}
+
+		public bool BeepOnError { get { return beepOnError; } set { beepOnError = value; } }
+
+		public bool CanUndo { get { return false; } }
+
+		public CultureInfo Culture {		
+			get { return MaskedTextProvider.Culture; }
+			set { maskedTextProvider = new MaskedTextProvider(maskedTextProvider.Mask, value, maskedTextProvider.AllowPromptAsInput, maskedTextProvider.PromptChar, maskedTextProvider.PasswordChar, maskedTextProvider.AsciiOnly); }
+		}
+
+		public MaskFormat CutCopyMaskFormat { get { return cutCopyMaskFormat; } set { cutCopyMaskFormat = value; } }
+
+		public IFormatProvider FormatProvider { get { return formatProvider; } set { formatProvider = value; } }
+
+		public bool HidePromptOnLeave { get { return hidePromptOnLeave; } set { hidePromptOnLeave = value; } }
+
+		public InsertKeyMode InsertKeyMode { get { return insertKeyMode; } set { insertKeyMode = value; } }
+
+		[MonoTODO("If InsertKeyMode is set to Default, it must return the state of the INSERT key")]
+		public bool IsOverwriteMode	{
+			get	{
+				if (this.insertKeyMode == InsertKeyMode.Insert)
+					return false;
+				else if ( this.insertKeyMode == InsertKeyMode.Overwrite)
+						return true;
+				else if ( this.insertKeyMode == InsertKeyMode.Default)
+						return true;//TODO 
+				//else
+				return false;
+			}
+		}
+
+		public string[] Lines { get { return new string[] { this.Text }; } set { } }
+
+		public string Mask {
+			get { return MaskedTextProvider.Mask; }
+			set { maskedTextProvider = new MaskedTextProvider(value, maskedTextProvider.Culture, maskedTextProvider.AllowPromptAsInput, maskedTextProvider.PromptChar, maskedTextProvider.PasswordChar, maskedTextProvider.AsciiOnly); }
+		}
+
+		public bool MaskCompleted {
+			get { return MaskedTextProvider.MaskCompleted; }
+		}
+
+		public MaskedTextProvider MaskedTextProvider { get { return maskedTextProvider; } }
+
+		public bool MaskFull {
+			get { return MaskedTextProvider.MaskFull; }
+		}
+
+		public override int MaxLength { get { return 0; } set { } }
+
+		public override bool Multiline { get { return false; } set { } }
+
+		public char PasswordChar {
+			get { return MaskedTextProvider.PasswordChar; }
+			set { MaskedTextProvider.PasswordChar = value; }
+		}
+
+		public char PromptChar {
+			get { return MaskedTextProvider.PromptChar; }
+			set { MaskedTextProvider.PromptChar = value; }
+		}
+		
+		[MonoTODO("must have something to do but find no info.")]
+		public bool ReadOnly { get { return base.read_only; } set { base.read_only = value; } }
+
+		public bool RejectInputOnFirstFailure { get { return rejectInputOnFirstFailure; } set { rejectInputOnFirstFailure = value; } }
+
+		public bool ResetOnPrompt {
+			get { return MaskedTextProvider.ResetOnPrompt; }
+			set { MaskedTextProvider.ResetOnPrompt = value; }
+		}
+
+		public bool ResetOnSpace {
+			get { return MaskedTextProvider.ResetOnSpace; }
+			set { MaskedTextProvider.ResetOnSpace = value; }
+		}
+
+		[MonoTODO("must have something to do but find no info.")]
+		public override string SelectedText {
+			get { return base.SelectedText; }
+			set { base.SelectedText = value; } 
+		}
+
+		public bool SkipLiterals {
+			get { return MaskedTextProvider.SkipLiterals; }
+			set { MaskedTextProvider.SkipLiterals = value; }
+		}
+
+		[BindableAttribute(true)]
+		[LocalizableAttribute(true)]
+		[MonoTODO("Must be something to make it override...")]
+		public override string Text { 
+			get { 
+				return base.Text;
+			} 
+			set { 
+				base.Text = value;
+			} 
+		}
+
+		[LocalizableAttribute(true)]
+		[MonoTODO]
+		public HorizontalAlignment TextAlign { 
+			get{
+				return textAlign;
+			}
+			set {
+				textAlign = value;
+				OnTextAlignChanged(EventArgs.Empty);
+			}
+		}
+
+		[MonoTODO("Must be something to make it override...")]
+		public override int TextLength { get { return base.TextLength; } }
+
+		public MaskFormat TextMaskFormat { get { return textMaskFormat; } set { textMaskFormat = value; } }
+
+		public bool UseSystemPasswordChar { get { return useSystemPasswordChar; } set { useSystemPasswordChar = value; } }
+
+		public Type ValidatingType { get { return validatingType; } set { validatingType = value; } }
+
+		public bool WordWrap { get { return false;} set { } }
+
+		#endregion
+
+		#region public methods
+
+		public void ClearUndo()
+		{
+			//Do nothing because not supported by maskedtextbox
+		}
+
+		[MonoTODO]
+		public override char GetCharFromPosition(Point pt)
+		{
+			return base.GetCharFromPosition(pt);
+		}
+
+		[MonoTODO]
+		public override int GetCharIndexFromPosition(Point pt)
+		{
+			return base.GetCharIndexFromPosition(pt);
+		}
+
+		public int GetFirstCharIndexFromLine(int lineNumber)
+		{ 
+			return 0; 
+		}
+
+		public int GetFirstCharIndexOfCurrentLine()
+		{
+			return 0;
+		}
+
+		public override int GetLineFromCharIndex(int index)
+		{
+			return 0;
+		}
+
+		[MonoTODO]
+		public override Point GetPositionFromCharIndex(int index)
+		{
+			return base.GetPositionFromCharIndex(index);
+		}
+
+		public void ScrollToCaret()
+		{
+			//DO NOTHING
+		}
+
+		[MonoTODO]
+		public override string ToString()
+		{
+			return base.ToString();
+		}
+
+		public void Undo()
+		{
+			//DO NOTHING
+		}
+
+		[MonoTODO]
+		public object ValidateText()
+		{
+			throw new NotImplementedException();
+		}
+		
+		#endregion
+
+		#region private methods
+
+		internal override Color ChangeBackColor(Color backColor)
+		{
+			if (backColor == Color.Empty)
+			{
+#if NET_2_0
+				backcolor_set = false;
+				if (!ReadOnly)
+				{
+					backColor = SystemColors.Window;
+				}
+#else
+				backColor = SystemColors.Window;
+#endif
+			}
+			return backColor;
+		}
+
+		#endregion
+
+		#region protected methods
+
+		[MonoTODO]
+		protected override void CreateHandle()
+		{
+			base.CreateHandle();
+		}
+
+		[MonoTODO]
+		protected override bool IsInputKey(Keys keyData)
+		{
+			return base.IsInputKey(keyData);
+		}
+
+		[MonoTODO]
+		protected override void OnBackColorChanged(EventArgs e)
+		{
+			base.OnBackColorChanged(e);
+		}
+
+		[MonoTODO]
+		protected override void OnHandleCreated(EventArgs e)
+		{
+			base.OnHandleCreated(e);
+		}
+
+		[MonoTODO]
+		protected virtual void OnIsOverwriteModeChanged(EventArgs e)
+		{
+			throw new NotImplementedException();
+		}
+
+		[MonoTODO]
+		protected override void OnKeyDown(KeyEventArgs e)
+		{
+			base.OnKeyDown(e);
+		}
+
+		[MonoTODO]
+		protected override void OnKeyPress(KeyPressEventArgs e)
+		{
+			base.OnKeyPress(e);
+		}
+
+		[MonoTODO]
+		protected override void OnKeyUp(KeyEventArgs e)
+		{
+			base.OnKeyUp(e);
+		}
+
+		[MonoTODO]
+		protected virtual void OnMaskChanged(EventArgs e)
+		{
+			throw new NotImplementedException();
+		}
+
+		[MonoTODO]
+		protected override void OnMultilineChanged(EventArgs e)
+		{
+			base.OnMultilineChanged(e);
+		}
+
+		[MonoTODO]
+		protected virtual void OnTextAlignChanged(EventArgs e)
+		{
+			throw new NotImplementedException();
+		}
+
+		[MonoTODO]
+		protected override void OnTextChanged(EventArgs e)
+		{
+			base.OnTextChanged(e);
+		}
+
+		[MonoTODO]
+		protected override void OnValidating(CancelEventArgs e)
+		{
+			base.OnValidating(e);
+		}
+
+		[MonoTODO]
+		protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
+		{
+			return base.ProcessCmdKey(ref msg, keyData);
+		}
+
+		[MonoTODO]
+		protected internal override bool ProcessKeyMessage(ref Message m)
+		{
+			throw new NotImplementedException();
+		}
+
+		[MonoTODO]
+		protected override void WndProc(ref Message m)
+		{
+			base.WndProc(ref m);
+		}
+
+		#endregion
+
+		#region Events
+
+		public event EventHandler AcceptsTabChanged;
+		public event EventHandler IsOverwriteModeChanged;
+		public event EventHandler MaskChanged;
+		public event MaskInputRejectedEventHandler MaskInputRejected;
+		public event EventHandler MultilineChanged;
+		public event EventHandler TextAlignChanged;
+		public event TypeValidationEventHandler TypeValidationCompleted;
+
+		#endregion
+	}
+
+}
+
+#endif
Index: System.Windows.Forms/RichTextBox.cs
===================================================================
--- System.Windows.Forms/RichTextBox.cs	(revision 76151)
+++ System.Windows.Forms/RichTextBox.cs	(working copy)
@@ -860,14 +860,8 @@
 			return line.LineNo - 1;
 		}
 
-		public Point GetPositionFromCharIndex(int index) {
-			Line	line;
-			LineTag	tag;
-			int	pos;
-
-			document.CharIndexToLineTag(index, out line, out tag, out pos);
-
-			return new Point((int)line.widths[pos] + 1, line.Y + 1);
+		public override Point GetPositionFromCharIndex(int index) {
+			return base.GetPositionFromCharIndex(index);
 		}
 
 		public void LoadFile(System.IO.Stream data, RichTextBoxStreamType fileType) {
@@ -1600,26 +1594,6 @@
 			OnVScroll(e);
 		}
 
-		private void PointToTagPos(Point pt, out LineTag tag, out int pos) {
-			Point p;
-
-			p = pt;
-
-			if (p.X >= document.ViewPortWidth) {
-				p.X = document.ViewPortWidth - 1;
-			} else if (p.X < 0) {
-				p.X = 0;
-			}
-
-			if (p.Y >= document.ViewPortHeight) {
-				p.Y = document.ViewPortHeight - 1;
-			} else if (p.Y < 0) {
-				p.Y = 0;
-			}
-
-			tag = document.FindCursor(p.X + document.ViewPortX, p.Y + document.ViewPortY, out pos);
-		}
-
 		private void EmitRTFFontProperties(StringBuilder rtf, int prev_index, int font_index, Font prev_font, Font font) {
 			if (prev_index != font_index) {
 				rtf.Append(String.Format("\\f{0}", font_index));	// Font table entry
Index: System.Windows.Forms/TextBoxBase.cs
===================================================================
--- System.Windows.Forms/TextBoxBase.cs	(revision 76151)
+++ System.Windows.Forms/TextBoxBase.cs	(working copy)
@@ -769,6 +769,52 @@
 		public void Undo() {
 			document.undo.Undo();
 		}
+
+		public virtual char GetCharFromPosition(Point pt)
+		{
+			LineTag tag;
+			int pos;
+
+			PointToTagPos(pt, out tag, out pos);
+
+			if (pos >= tag.line.text.Length)
+			{
+				return '\n';
+			}
+
+			return tag.line.text[pos];
+
+		}
+
+		public virtual int GetCharIndexFromPosition(Point pt)
+		{
+			LineTag tag;
+			int pos;
+
+			PointToTagPos(pt, out tag, out pos);
+
+			if (pos >= tag.line.text.Length)
+			{
+				return -1;
+			}
+
+			return pos;
+
+		}
+
+		public virtual Point GetPositionFromCharIndex(int index)
+		{
+			Line line;
+			LineTag tag;
+			int pos;
+
+			document.CharIndexToLineTag(index, out line, out tag, out pos);
+
+			return new Point((int)line.widths[pos] + 1, line.Y + 1);
+		}
+
+
+
 		#endregion	// Public Instance Methods
 
 		#region Protected Instance Methods
@@ -1113,7 +1159,7 @@
 
 				case Keys.Enter: {
 					// ignoring accepts_return, fixes bug #76355
-					if (!read_only && document.multiline && (accepts_return || (FindForm() != null && FindForm().AcceptButton == null) || ((Control.ModifierKeys & Keys.Control) != 0))) {
+					if (!read_only && (accepts_return || (FindForm() != null && FindForm().AcceptButton == null) || ((Control.ModifierKeys & Keys.Control) != 0))) {
 						Line	line;
 
 						if (document.selection_visible) {
@@ -1989,6 +2035,33 @@
 			return true;
 		}
 
+		internal void PointToTagPos(Point pt, out LineTag tag, out int pos)
+		{
+			Point p;
+
+			p = pt;
+
+			if (p.X >= document.ViewPortWidth)
+			{
+				p.X = document.ViewPortWidth - 1;
+			}
+			else if (p.X < 0)
+			{
+				p.X = 0;
+			}
+
+			if (p.Y >= document.ViewPortHeight)
+			{
+				p.Y = document.ViewPortHeight - 1;
+			}
+			else if (p.Y < 0)
+			{
+				p.Y = 0;
+			}
+
+			tag = document.FindCursor(p.X + document.ViewPortX, p.Y + document.ViewPortY, out pos);
+		}
+
 		internal abstract Color ChangeBackColor (Color backColor);
 
 		#endregion	// Private Methods
Index: Test/System.Windows.Forms/BindingNavigatorTest.cs
===================================================================
--- Test/System.Windows.Forms/BindingNavigatorTest.cs	(revision 0)
+++ Test/System.Windows.Forms/BindingNavigatorTest.cs	(revision 0)
@@ -0,0 +1,146 @@
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+// Copyright (c) 2006 Novell, Inc.
+//
+// Authors:
+//	Olivier Dufour	olivier.duff@free.fr
+//
+//
+#if NET_2_0
+
+using System;
+using System.Collections.Generic;
+using System.Text;
+using NUnit.Framework;
+using System.Windows.Forms;
+
+namespace MonoTests.System.Windows.Forms
+{
+
+	[TestFixture]
+	public class BindingNavigatorTest
+	{
+		private bool flag = false;
+
+		[Test]
+		public void Constructor()
+		{
+			BindingNavigator navigator = new BindingNavigator(true);
+			CheckStandardItems(navigator);
+		}
+
+		[Test]
+		public void AddStandardItems()
+		{
+			BindingNavigator navigator = new BindingNavigator();
+			navigator.AddStandardItems();
+			CheckStandardItems(navigator);
+		}
+
+		private void CheckStandardItems(BindingNavigator navigator)
+		{
+			Assert.IsNotNull(navigator.AddNewItem, "*1");
+			Assert.IsNotNull(navigator.MoveFirstItem, "*2");
+			Assert.IsNotNull(navigator.MoveLastItem, "*3");
+			Assert.IsNotNull(navigator.MoveNextItem, "*4");
+			Assert.IsNotNull(navigator.MovePreviousItem, "*5");
+			Assert.IsNotNull(navigator.DeleteItem, "*6");
+			Assert.IsNotNull(navigator.CountItem, "*7");
+			Assert.IsNotNull(navigator.PositionItem, "*8");
+			Assert.IsNotNull(navigator.AddNewItem, "*9");
+			Assert.IsNotNull(navigator.AddNewItem, "*10");
+			Assert.IsNull(navigator.BindingSource, "*11");
+
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.AddNewItem, "#1");
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.MoveFirstItem, "#2");
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.MoveLastItem, "#3");
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.MoveNextItem, "#4");
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.MovePreviousItem, "#5");
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.DeleteItem, "#6");
+			Assert.IsInstanceOfType(typeof(ToolStripLabel), navigator.CountItem, "#7");
+			Assert.IsInstanceOfType(typeof(ToolStripTextBox), navigator.PositionItem, "#8");
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.AddNewItem, "#9");
+			Assert.IsInstanceOfType(typeof(ToolStripButton), navigator.AddNewItem, "#10");
+			Assert.AreEqual("of {0}", navigator.CountItemFormat, "#11");
+		}
+
+		[Test]
+		public void Init()
+		{
+			BindingNavigator navigator = new BindingNavigator();
+			navigator.BeginInit();
+			navigator.RefreshItems += new EventHandler(TestInitFail);
+			//force refresh
+			navigator.AddNewItem = new ToolStripButton();
+			navigator.RefreshItems -= new EventHandler(TestInitFail);
+			navigator.RefreshItems += new EventHandler(TestInitSucceed);
+			navigator.EndInit();
+			Assert.IsTrue(flag, "Refresh not called");
+			flag = false;
+		}
+		public void TestInitFail(object obj, EventArgs args)
+		{
+			Assert.Fail("Init and Refresh called");
+		}
+		public void TestInitSucceed(object obj, EventArgs args)
+		{
+			flag = true;
+		}
+
+		[Test]
+		public void OnRefreshItems()
+		{
+			BindingNavigator navigator = new BindingNavigator(true);
+			//force refresh
+			navigator.RefreshItems += new EventHandler(TestInitSucceed);
+			navigator.AddNewItem = new ToolStripButton();
+			CheckRefreshCore(navigator);
+		}
+
+		[Test]
+		public void RefreshItemsCore()
+		{
+			BindingNavigator navigator = new BindingNavigator(true);
+			navigator.RefreshItems += new EventHandler(TestInitSucceed);
+			navigator.AddNewItem = new ToolStripButton();
+			CheckRefreshCore(navigator);
+		}
+
+		public void CheckRefreshCore(BindingNavigator navigator)
+		{
+			Assert.AreEqual(true, flag, "#1");
+			flag = false;
+			Assert.AreEqual(false, navigator.AddNewItem.Enabled, "#2");
+			Assert.AreEqual(false, navigator.MoveFirstItem.Enabled, "#3");
+			Assert.AreEqual(false, navigator.MoveLastItem.Enabled, "#4");
+			Assert.AreEqual(false, navigator.MoveNextItem.Enabled, "#5");
+			Assert.AreEqual(false, navigator.MovePreviousItem.Enabled, "#6");
+			Assert.AreEqual(false, navigator.DeleteItem.Enabled, "#7");
+		}
+
+		[Test]
+		public void Validate()
+		{
+			//TODO
+		}
+		
+	}
+}
+#endif
