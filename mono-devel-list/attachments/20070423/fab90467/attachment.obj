Index: eglib/eglib.vcproj
===================================================================
--- eglib/eglib.vcproj	(revision 0)
+++ eglib/eglib.vcproj	(revision 0)
@@ -0,0 +1,275 @@
+<?xml version="1.0" encoding="Windows-1252"?>
+<VisualStudioProject
+	ProjectType="Visual C++"
+	Version="8.00"
+	Name="eglib"
+	ProjectGUID="{158073ED-99AE-4196-9EDC-DDB2344F8466}"
+	RootNamespace="eglib"
+	Keyword="Win32Proj"
+	>
+	<Platforms>
+		<Platform
+			Name="Win32"
+		/>
+	</Platforms>
+	<ToolFiles>
+	</ToolFiles>
+	<Configurations>
+		<Configuration
+			Name="Debug|Win32"
+			OutputDirectory="$(SolutionDir)$(ConfigurationName)"
+			IntermediateDirectory="$(ConfigurationName)"
+			ConfigurationType="4"
+			CharacterSet="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				Optimization="0"
+				AdditionalIncludeDirectories="src"
+				PreprocessorDefinitions="WIN32;_DEBUG;_LIB;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE"
+				MinimalRebuild="true"
+				BasicRuntimeChecks="3"
+				RuntimeLibrary="3"
+				UsePrecompiledHeader="0"
+				WarningLevel="3"
+				Detect64BitPortabilityProblems="true"
+				DebugInformationFormat="4"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+		<Configuration
+			Name="Release|Win32"
+			OutputDirectory="$(SolutionDir)$(ConfigurationName)"
+			IntermediateDirectory="$(ConfigurationName)"
+			ConfigurationType="4"
+			CharacterSet="1"
+			WholeProgramOptimization="1"
+			>
+			<Tool
+				Name="VCPreBuildEventTool"
+			/>
+			<Tool
+				Name="VCCustomBuildTool"
+			/>
+			<Tool
+				Name="VCXMLDataGeneratorTool"
+			/>
+			<Tool
+				Name="VCWebServiceProxyGeneratorTool"
+			/>
+			<Tool
+				Name="VCMIDLTool"
+			/>
+			<Tool
+				Name="VCCLCompilerTool"
+				AdditionalIncludeDirectories="src"
+				PreprocessorDefinitions="WIN32;NDEBUG;_LIB;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE"
+				RuntimeLibrary="2"
+				UsePrecompiledHeader="0"
+				WarningLevel="3"
+				Detect64BitPortabilityProblems="true"
+				DebugInformationFormat="3"
+			/>
+			<Tool
+				Name="VCManagedResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCResourceCompilerTool"
+			/>
+			<Tool
+				Name="VCPreLinkEventTool"
+			/>
+			<Tool
+				Name="VCLibrarianTool"
+			/>
+			<Tool
+				Name="VCALinkTool"
+			/>
+			<Tool
+				Name="VCXDCMakeTool"
+			/>
+			<Tool
+				Name="VCBscMakeTool"
+			/>
+			<Tool
+				Name="VCFxCopTool"
+			/>
+			<Tool
+				Name="VCPostBuildEventTool"
+			/>
+		</Configuration>
+	</Configurations>
+	<References>
+	</References>
+	<Files>
+		<Filter
+			Name="Source Files"
+			Filter="cpp;c;cc;cxx;def;odl;idl;hpj;bat;asm;asmx"
+			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}"
+			>
+			<File
+				RelativePath=".\src\garray.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gdate.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gdir.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gerror.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gfile.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\ghashtable.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\glist.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gmarkup.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gmem.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gmisc.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gmodule.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\goutput.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gpath.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gpattern.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gptrarray.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gqueue.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gshell.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gslist.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gspawn.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gstr.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gstring.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gtimer.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gunicode.c"
+				>
+			</File>
+			<File
+				RelativePath=".\src\gutf8.c"
+				>
+			</File>
+		</Filter>
+		<Filter
+			Name="Header Files"
+			Filter="h;hpp;hxx;hm;inl;inc;xsd"
+			UniqueIdentifier="{93995380-89BD-4b04-88EB-625FBE52EBFB}"
+			>
+			<File
+				RelativePath=".\src\eglib-config.h"
+				>
+			</File>
+			<File
+				RelativePath=".\src\glib.h"
+				>
+			</File>
+			<File
+				RelativePath=".\src\sort.frag.h"
+				>
+			</File>
+		</Filter>
+		<Filter
+			Name="Resource Files"
+			Filter="rc;ico;cur;bmp;dlg;rc2;rct;bin;rgs;gif;jpg;jpeg;jpe;resx;tiff;tif;png;wav"
+			UniqueIdentifier="{67DA6AB6-F800-4c08-8B7A-83BB121AAD01}"
+			>
+		</Filter>
+	</Files>
+	<Globals>
+	</Globals>
+</VisualStudioProject>
Index: eglib/src/gdate.c
===================================================================
--- eglib/src/gdate.c	(revision 76120)
+++ eglib/src/gdate.c	(working copy)
@@ -27,7 +27,12 @@
  */
 #include <stdio.h>
 #include <glib.h>
+
+#ifdef _MSC_VER
+#include <winsock2.h>
+#else
 #include <sys/time.h>
+#endif
 
 void
 g_get_current_time (GTimeVal *result)
Index: eglib/src/gdir.c
===================================================================
--- eglib/src/gdir.c	(revision 76120)
+++ eglib/src/gdir.c	(working copy)
@@ -28,14 +28,18 @@
 #include <glib.h>
 #include <stdio.h>
 #include <stdlib.h>
-#include <unistd.h>
 #include <errno.h>
 #include <sys/types.h>
 #include <sys/stat.h>
+#ifndef _MSC_VER
+#include <unistd.h>
 #include <dirent.h>
+#endif
 
 struct _GDir {
 #ifdef G_OS_WIN32
+	/* FIXME */
+	int dir;
 #else
 	DIR *dir;
 #endif
Index: eglib/src/gfile.c
===================================================================
--- eglib/src/gfile.c	(revision 76120)
+++ eglib/src/gfile.c	(working copy)
@@ -28,11 +28,16 @@
 #include <glib.h>
 #include <stdio.h>
 #include <stdlib.h>
-#include <unistd.h>
 #include <errno.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
+#ifdef _MSC_VER
+#include <io.h>
+#define open _open
+#else
+#include <unistd.h>
+#endif
 
 GFileError
 g_file_error_from_errno (gint err_no)
Index: eglib/src/glib.h
===================================================================
--- eglib/src/glib.h	(revision 76120)
+++ eglib/src/glib.h	(working copy)
@@ -5,10 +5,12 @@
 #include <stdlib.h>
 #include <string.h>
 #include <stdio.h>
-#include <stdint.h>
 #include <stddef.h>
 #include <ctype.h>
+#ifndef _MSC_VER
+#include <stdint.h>
 #include <eglib-config.h>
+#endif
 
 #ifndef offsetof
 #   define offsetof(s_name,n_name) (size_t)(char *)&(((s_name*)0)->m_name)
@@ -30,6 +32,64 @@
 typedef char           gchar;
 typedef unsigned char  guchar;
 
+#ifdef _MSC_VER
+typedef __int8				gint8;
+typedef unsigned __int8		guint8;
+typedef __int16				gint16;
+typedef unsigned __int16	guint16;
+typedef __int32				gint32;
+typedef unsigned __int32	guint32;
+typedef __int64				gint64;
+typedef unsigned __int64	guint64;
+typedef float				gfloat;
+typedef double				gdouble;
+typedef unsigned __int16	gunichar2;
+/*
+ * System-dependent settings
+ */
+/*
+#define G_GNUC_PRETTY_FUNCTION   @GNUC_PRETTY@
+#define G_GNUC_UNUSED            @GNUC_UNUSED@
+#define G_BYTE_ORDER             @ORDER@
+#define G_GNUC_NORETURN          @GNUC_NORETURN@
+#define G_BREAKPOINT()           @BREAKPOINT@
+#define G_OS_@OS@
+#define GPOINTER_TO_INT(ptr)   @GPOINTER_TO_INT@
+#define GPOINTER_TO_UINT(ptr)  @GPOINTER_TO_UINT@
+#define GINT_TO_POINTER(v)     @GINT_TO_POINTER@
+#define GUINT_TO_POINTER(v)    @GUINT_TO_POINTER@
+*/
+typedef uintptr_t gsize;
+typedef intptr_t gssize;
+typedef int pid_t;
+
+#define G_DIR_SEPARATOR          '\\'
+#define G_DIR_SEPARATOR_S        "\\"
+#define G_SEARCHPATH_SEPARATOR_S ";"
+#define G_SEARCHPATH_SEPARATOR   ';'
+#define G_GSIZE_FORMAT   "d"
+#define G_GUINT64_FORMAT "d"
+
+#define INT32_MAX 2147483647
+#define INT32_MIN (~ INT32_MAX)
+#define INT64_MAX 9223372036854775807i64
+#define INT64_MIN (~INT64_MAX)
+
+#define STDOUT_FILENO stdout
+#define STDERR_FILENO stderr
+
+/* FIXME: what should this be ?*/
+#define X_OK 1
+#define WNOHANG 1
+#define F_SETFD 1
+#define FD_CLOEXEC 1
+
+#undef inline
+#define inline __inline
+
+#define G_OS_WIN32 1
+
+#else
 /* Types defined in terms of the stdint.h */
 typedef int8_t         gint8;
 typedef uint8_t        guint8;
@@ -42,6 +102,7 @@
 typedef float          gfloat;
 typedef double         gdouble;
 typedef uint16_t       gunichar2;
+#endif
 /*
  * Macros
  */
@@ -439,14 +500,14 @@
 void           g_logv                 (const gchar *log_domain, GLogLevelFlags log_level, const gchar *format, va_list args);
 void           g_log                  (const gchar *log_domain, GLogLevelFlags log_level, const gchar *format, ...);
 
-#define g_error(format...)    g_log (G_LOG_DOMAIN, G_LOG_LEVEL_ERROR, format)
-#define g_critical(format...) g_log (G_LOG_DOMAIN, G_LOG_LEVEL_CRITICAL, format)
-#define g_warning(format...)  g_log (G_LOG_DOMAIN, G_LOG_LEVEL_WARNING, format)
-#define g_message(format...)  g_log (G_LOG_DOMAIN, G_LOG_LEVEL_MESSAGE, format)
-#define g_debug(format...)    g_log (G_LOG_DOMAIN, G_LOG_LEVEL_DEBUG, format)
+#define g_error(format, ...)    g_log (G_LOG_DOMAIN, G_LOG_LEVEL_ERROR, format, __VA_ARGS__)
+#define g_critical(format, ...) g_log (G_LOG_DOMAIN, G_LOG_LEVEL_CRITICAL, format, __VA_ARGS__)
+#define g_warning(format, ...)  g_log (G_LOG_DOMAIN, G_LOG_LEVEL_WARNING, format, __VA_ARGS__)
+#define g_message(format, ...)  g_log (G_LOG_DOMAIN, G_LOG_LEVEL_MESSAGE, format, __VA_ARGS__)
+#define g_debug(format, ...)    g_log (G_LOG_DOMAIN, G_LOG_LEVEL_DEBUG, format, __VA_ARGS__)
 
 #define g_log_set_handler(a,b,c,d)
-#define g_printerr(format...) fprintf (stderr, format)
+#define g_printerr(format, ...) fprintf (stderr, format, __VA_ARGS__)
 /*
  * Conversions
  */
@@ -502,7 +563,7 @@
  * Path
  */
 gchar  *g_build_path           (const gchar *separator, const gchar *first_element, ...);
-#define g_build_filename(x...) g_build_path(G_DIR_SEPARATOR_S, x)
+#define g_build_filename(x, ...) g_build_path(G_DIR_SEPARATOR_S, x, __VA_ARGS__)
 gchar  *g_path_get_dirname     (const gchar *filename);
 gchar  *g_path_get_basename    (const char *filename);
 gchar  *g_find_program_in_path (const gchar *program);
Index: eglib/src/glist.c
===================================================================
--- eglib/src/glist.c	(revision 76120)
+++ eglib/src/glist.c	(working copy)
@@ -205,7 +205,8 @@
 {
 	GList *prev = NULL;
 	GList *current;
-	
+	GList *node;
+
 	if (!func)
 		return list;
 
@@ -216,7 +217,7 @@
 		prev = current;
 	}
 
-	GList *node = new_node (prev, data, current);
+	node = new_node (prev, data, current);
 	return list == current ? node : list;
 }
 
Index: eglib/src/gmarkup.c
===================================================================
--- eglib/src/gmarkup.c	(revision 76120)
+++ eglib/src/gmarkup.c	(working copy)
@@ -42,7 +42,7 @@
 #include <stdio.h>
 #include <glib.h>
 
-#define set_error(msg...) do { if (error != NULL) *error = g_error_new (GINT_TO_POINTER (1), 1, msg); } while (0);
+#define set_error(msg, ...) do { if (error != NULL) *error = g_error_new (GINT_TO_POINTER (1), 1, msg, __VA_ARGS__); } while (0);
 
 typedef enum {
 	START,
Index: eglib/src/gpath.c
===================================================================
--- eglib/src/gpath.c	(revision 76120)
+++ eglib/src/gpath.c	(working copy)
@@ -27,11 +27,14 @@
  */
 #include <stdio.h>
 #include <glib.h>
-#include <unistd.h>
 #include <errno.h>
 #include <sys/types.h>
+
+#ifndef _MSC_VER
+#include <pthread.h>
+#include <unistd.h>
 #include <pwd.h>
-#include <pthread.h>
+#endif
 
 gchar *
 g_build_path (const gchar *separator, const gchar *first_element, ...)
@@ -242,13 +245,21 @@
 #endif
 
 static char *tmp_dir;
+#ifdef _MSC_VER
+/* FIXME */
+#else
 static pthread_mutex_t tmp_lock = PTHREAD_MUTEX_INITIALIZER;
+#endif
 
 const gchar *
 g_get_tmp_dir (void)
 {
 	if (tmp_dir == NULL){
+#ifdef _MSC_VER
+/* FIXME */
+#else
 		pthread_mutex_lock (&tmp_lock);
+#endif
 		if (tmp_dir == NULL){
 			tmp_dir = getenv ("TMPDIR");
 			if (tmp_dir == NULL){
@@ -260,7 +271,11 @@
 				}
 			}
 		}
+#ifdef _MSC_VER
+/* FIXME */
+#else
 		pthread_mutex_unlock (&tmp_lock);
+#endif
 	}
 	return tmp_dir;
 }
Index: eglib/src/gpattern.c
===================================================================
--- eglib/src/gpattern.c	(revision 76120)
+++ eglib/src/gpattern.c	(working copy)
@@ -28,8 +28,10 @@
 #include <glib.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <errno.h>
+#ifndef _MSC_VER
 #include <unistd.h>
-#include <errno.h>
+#endif
 
 typedef enum {
 	MATCH_LITERAL,
Index: eglib/src/gspawn.c
===================================================================
--- eglib/src/gspawn.c	(revision 76120)
+++ eglib/src/gspawn.c	(working copy)
@@ -28,17 +28,20 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <errno.h>
+#include <fcntl.h>
+#include <sys/types.h>
+#ifdef _MSC_VER
+#include <winsock2.h>
+#else
 #include <unistd.h>
-#include <unistd.h>
-#include <fcntl.h>
 #include <sys/time.h>
 #include <sys/wait.h>
-#include <sys/types.h>
+#endif
 #include <glib.h>
 
-#define set_error(msg...) do { if (error != NULL) *error = g_error_new (G_LOG_DOMAIN, 1, msg); } while (0)
-#define set_error_cond(cond,msg...) do { if ((cond) && error != NULL) *error = g_error_new (G_LOG_DOMAIN, 1, msg); } while (0)
-#define set_error_status(status,msg...) do { if (error != NULL) *error = g_error_new (G_LOG_DOMAIN, status, msg); } while (0)
+#define set_error(msg, ...) do { if (error != NULL) *error = g_error_new (G_LOG_DOMAIN, 1, msg, __VA_ARGS__); } while (0)
+#define set_error_cond(cond,msg, ...) do { if ((cond) && error != NULL) *error = g_error_new (G_LOG_DOMAIN, 1, msg, __VA_ARGS__); } while (0)
+#define set_error_status(status,msg, ...) do { if (error != NULL) *error = g_error_new (G_LOG_DOMAIN, status, msg, __VA_ARGS__); } while (0)
 #define NO_INTR(var,cmd) do { (var) = (cmd); } while ((var) == -1 && errno == EINTR)
 #define CLOSE_PIPE(p) do { close (p [0]); close (p [1]); } while (0)
 
Index: eglib/src/gstr.c
===================================================================
--- eglib/src/gstr.c	(revision 76120)
+++ eglib/src/gstr.c	(working copy)
@@ -132,10 +132,10 @@
 gchar *
 g_strconcat (const gchar *first, ...)
 {
-	g_return_val_if_fail (first != NULL, NULL);
 	va_list args;
 	int total = 0;
 	char *s, *ret;
+	g_return_val_if_fail (first != NULL, NULL);
 
 	total += strlen (first);
 	va_start (args, first);
Index: eglib/src/gtimer.c
===================================================================
--- eglib/src/gtimer.c	(revision 76120)
+++ eglib/src/gtimer.c	(working copy)
@@ -26,7 +26,11 @@
  * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
 #include <glib.h>
+#ifdef _MSC_VER
+#include <winsock2.h>
+#else
 #include <sys/time.h>
+#endif
 
 struct _GTimer {
 	struct timeval start;
Index: eglib/src/gunicode.c
===================================================================
--- eglib/src/gunicode.c	(revision 76120)
+++ eglib/src/gunicode.c	(working copy)
@@ -35,9 +35,15 @@
  */
 #include <stdio.h>
 #include <glib.h>
+#include <errno.h>
+#ifdef _MSC_VER
+/* FIXME */
+#define CODESET 1
+typedef int iconv_t;
+#else
 #include <langinfo.h>
 #include <iconv.h>
-#include <errno.h>
+#endif
 
 static char *my_charset;
 static gboolean is_utf8;
