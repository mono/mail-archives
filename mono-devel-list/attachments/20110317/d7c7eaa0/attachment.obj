>From 54ee91fdfd22be012a673d495f3193596a8fe5d3 Mon Sep 17 00:00:00 2001
From: Rolf Bjarne Kvinge <RKvinge@novell.com>
Date: Fri, 4 Feb 2011 13:08:17 +0100
Subject: [PATCH 1/4] [io-layer] Make the special_wait functions take an alertable flag.

---
 mono/io-layer/handles-private.h |    3 ++-
 mono/io-layer/handles.c         |    4 ++--
 mono/io-layer/processes.c       |    6 +++---
 mono/io-layer/wait.c            |    4 ++--
 mono/io-layer/wapi-private.h    |    2 +-
 5 files changed, 10 insertions(+), 9 deletions(-)

diff --git a/mono/io-layer/handles-private.h b/mono/io-layer/handles-private.h
index ebd3068..a9685f5 100644
--- a/mono/io-layer/handles-private.h
+++ b/mono/io-layer/handles-private.h
@@ -68,7 +68,8 @@ extern void _wapi_handle_ops_signal (gpointer handle);
 extern gboolean _wapi_handle_ops_own (gpointer handle);
 extern gboolean _wapi_handle_ops_isowned (gpointer handle);
 extern guint32 _wapi_handle_ops_special_wait (gpointer handle,
-					      guint32 timeout);
+					      guint32 timeout,
+					      gboolean alertable);
 extern void _wapi_handle_ops_prewait (gpointer handle);
 
 extern gboolean _wapi_handle_count_signalled_handles (guint32 numhandles,
diff --git a/mono/io-layer/handles.c b/mono/io-layer/handles.c
index 97be0c7..123f5b0 100644
--- a/mono/io-layer/handles.c
+++ b/mono/io-layer/handles.c
@@ -1287,7 +1287,7 @@ gboolean _wapi_handle_ops_isowned (gpointer handle)
 	}
 }
 
-guint32 _wapi_handle_ops_special_wait (gpointer handle, guint32 timeout)
+guint32 _wapi_handle_ops_special_wait (gpointer handle, guint32 timeout, gboolean alertable)
 {
 	guint32 idx = GPOINTER_TO_UINT(handle);
 	WapiHandleType type;
@@ -1300,7 +1300,7 @@ guint32 _wapi_handle_ops_special_wait (gpointer handle, guint32 timeout)
 	
 	if (handle_ops[type] != NULL &&
 	    handle_ops[type]->special_wait != NULL) {
-		return(handle_ops[type]->special_wait (handle, timeout));
+		return(handle_ops[type]->special_wait (handle, timeout, alertable));
 	} else {
 		return(WAIT_FAILED);
 	}
diff --git a/mono/io-layer/processes.c b/mono/io-layer/processes.c
index d0501a7..9916b8a 100644
--- a/mono/io-layer/processes.c
+++ b/mono/io-layer/processes.c
@@ -83,7 +83,7 @@ extern char **environ;
 
 #undef DEBUG
 
-static guint32 process_wait (gpointer handle, guint32 timeout);
+static guint32 process_wait (gpointer handle, guint32 timeout, gboolean alertable);
 
 #if !defined(__OpenBSD__)
 static FILE *
@@ -241,7 +241,7 @@ void _wapi_process_reap (void)
  * children.  Fixing this means resurrecting a daemon helper to manage
  * processes.
  */
-static guint32 process_wait (gpointer handle, guint32 timeout)
+static guint32 process_wait (gpointer handle, guint32 timeout, gboolean alertable)
 {
 	struct _WapiHandle_process *process_handle;
 	gboolean ok;
@@ -1786,7 +1786,7 @@ gboolean GetExitCodeProcess (gpointer process, guint32 *code)
 	/* Make sure any process exit has been noticed, before
 	 * checking if the process is signalled.  Fixes bug 325463.
 	 */
-	process_wait (process, 0);
+	process_wait (process, 0, TRUE);
 	
 	if (_wapi_handle_issignalled (process) == TRUE) {
 		*code = process_handle->exitstatus;
diff --git a/mono/io-layer/wait.c b/mono/io-layer/wait.c
index 7170e2b..3a86bd2 100644
--- a/mono/io-layer/wait.c
+++ b/mono/io-layer/wait.c
@@ -127,7 +127,7 @@ guint32 WaitForSingleObjectEx(gpointer handle, guint32 timeout,
 		g_message ("%s: handle %p has special wait", __func__, handle);
 #endif
 
-		ret = _wapi_handle_ops_special_wait (handle, timeout);
+		ret = _wapi_handle_ops_special_wait (handle, timeout, alertable);
 	
 		if (alertable && _wapi_thread_apc_pending (current_thread)) {
 			apc_pending = TRUE;
@@ -682,7 +682,7 @@ guint32 WaitForMultipleObjectsEx(guint32 numobjects, gpointer *handles,
 			_wapi_handle_ops_prewait (handles[i]);
 		
 			if (_wapi_handle_test_capabilities (handles[i], WAPI_HANDLE_CAP_SPECIAL_WAIT) == TRUE && _wapi_handle_issignalled (handles[i]) == FALSE) {
-				_wapi_handle_ops_special_wait (handles[i], 0);
+				_wapi_handle_ops_special_wait (handles[i], 0, alertable);
 			}
 		}
 		
diff --git a/mono/io-layer/wapi-private.h b/mono/io-layer/wapi-private.h
index ac7959b..f982d86 100644
--- a/mono/io-layer/wapi-private.h
+++ b/mono/io-layer/wapi-private.h
@@ -92,7 +92,7 @@ struct _WapiHandleOps
 	 * instead of using the normal handle signal mechanism.
 	 * Returns the WaitForSingleObject return code.
 	 */
-	guint32 (*special_wait)(gpointer handle, guint32 timeout);
+	guint32 (*special_wait)(gpointer handle, guint32 timeout, gboolean alertable);
 
 	/* Called by WaitForSingleObject and WaitForMultipleObjects,
 	 * if the handle in question needs some preprocessing before the
-- 
1.7.1

