#include <stdlib.h>
#include <string.h>

/*
#include "config.h"

#include "mono/metadata/class.h"
#include "mono/metadata/tabledefs.h"
#include "mono/interpreter/interp.h"
#include "mono/metadata/appdomain.h"
#include "mono/metadata/debug-helpers.h"

extern MonoPIFunc
mono_create_trampoline (MonoMethodSignature *sig, gboolean string_ctor);
*/

#include "tramp.c"

/*
typedef struct {
        union {
                gint32 i;
                gint64 l;
                double f;
                // native size integer and pointer types
                gpointer p;
                mono_u nati;
                struct {
                        gpointer vt;
                        MonoClass *klass;
                } vt;
        } data;
        unsigned int type;
} stackval;

typedef void (*MonoFunc) (void);
typedef void (*MonoPIFunc) (MonoFunc callme, void *retval, void *obj_this, stackval *arguments);
*/

int foo_func( int a )
{
	return a + 10;
};

MonoMethodSignature * createSig( int numargs )
{
	int bytes;
	MonoMethodSignature * sig;
	
	bytes = sizeof(MonoMethodSignature) + ( numargs * sizeof( MonoType * ) );
	sig = (MonoMethodSignature *)malloc( bytes );
	memset( sig, 0, bytes );
	
	sig->param_count = numargs;
	return sig;
}

int main() 
{
	MonoMethodSignature * sig;
	
	MonoType            ret;
	MonoType            arg;
	MonoPIFunc          func;
	int                 r;
	guint32           * cp;
	stackval            arguments;

	memset( &ret, 0, sizeof( ret ) );
	memset( &arg, 0, sizeof( ret ) );
	ret.type = MONO_TYPE_I;
	arg.type = MONO_TYPE_I;
	
	sig = createSig( 1 );
	
	sig->ret = & ret;
	sig->params[0] = &arg;
	
	func = mono_create_trampoline( sig, 0 );
	unsigned char * foo = (char*)func;

	for( r = 0; r < 30; ++r )
	{
		printf( "%2x ",  *foo++ );
		printf( "%2x ",  *foo++ );
		printf( "%2x ",  *foo++ );
		printf( "%2x\n", *foo++ );
	}


	arguments.type   = 0;
	arguments.data.l = 1000;
	func( (MonoFunc)foo_func, &r, 0, &arguments );

	printf( "\n%d\n", r );
	return 1;
}
