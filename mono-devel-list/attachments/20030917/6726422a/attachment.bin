Index: dis-cil.c
===================================================================
RCS file: /cvs/public/mono/mono/dis/dis-cil.c,v
retrieving revision 1.23
diff -u -u -r1.23 dis-cil.c
--- dis-cil.c	1 Sep 2002 19:14:09 -0000	1.23
+++ dis-cil.c	18 Sep 2003 04:12:20 -0000
@@ -61,7 +61,8 @@
 	const MonoOpcode *entry;
 	char indent[1024];
 	int i, indent_level = 0;
-	const char *clause_names[] = {"catch", "filter", "finally", "fault"};
+	gboolean in_fault = 0;
+	const char *clause_names[] = {"catch", "filter", "finally", "", "fault"};
 
 	indent [0] = 0;
 
@@ -75,7 +76,7 @@
 #endif
 	while (ptr < end){
 		for (i = mh->num_clauses - 1; i >= 0 ; --i) {
-			if ((mh->clauses[i].flags == 0 || mh->clauses[i].flags == 2) && ptr == start + mh->clauses[i].try_offset) {
+			if ((mh->clauses[i].flags == 0 || mh->clauses[i].flags == 2 || mh->clauses[i].flags == 4) && ptr == start + mh->clauses[i].try_offset) {
 				fprintf (output, "\t%s.try { // %d\n", indent, i);
 				CODE_INDENT;
 			}
@@ -84,6 +85,8 @@
 				fprintf (output, "\t%s%s %s { // %d\n", indent, clause_names [mh->clauses[i].flags], klass, i);
 				CODE_INDENT;
 				g_free (klass);
+                                if (mh->clauses[i].flags == MONO_EXCEPTION_CLAUSE_FAULT)
+                                        in_fault = 1;
 			}
 		}
 		fprintf (output, "\t%sIL_%04x: ", indent, (int) (ptr - start));
@@ -94,7 +97,10 @@
 		} 
 		entry = &mono_opcodes [i];
 
-		fprintf (output, "%s ", mono_opcode_names [i]);
+                if (in_fault && entry->opval == 0xDC)
+                        fprintf (output, " %s", "endfault");
+                else
+                        fprintf (output, " %s ", mono_opcode_names [i]);
 		ptr++;
 		switch (entry->argument){
 		case MonoInlineBrTarget: {
@@ -261,13 +267,15 @@
 
 		fprintf (output, "\n");
 		for (i = 0; i < mh->num_clauses; ++i) {
-			if ((mh->clauses[i].flags == 0 || mh->clauses[i].flags == 2)  && ptr == start + mh->clauses[i].try_offset + mh->clauses[i].try_len) {
+			if ((mh->clauses[i].flags == 0 || mh->clauses[i].flags == 2 || mh->clauses[i].flags == 4)  && ptr == start + mh->clauses[i].try_offset + mh->clauses[i].try_len) {
 				CODE_UNINDENT;
 				fprintf (output, "\t%s} // end .try %d\n", indent, i);
 			}
 			if (ptr == start + mh->clauses[i].handler_offset + mh->clauses[i].handler_len) {
 				CODE_UNINDENT;
 				fprintf (output, "\t%s} // end handler %d\n", indent, i);
+                                if (mh->clauses[i].flags == MONO_EXCEPTION_CLAUSE_FAULT)
+                                        in_fault = 0;
 			}
 		}
 	}
