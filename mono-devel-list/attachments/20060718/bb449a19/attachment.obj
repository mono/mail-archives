Index: mcs/class/corlib/System/String.cs
===================================================================
--- mcs/class/corlib/System/String.cs	(revision 62694)
+++ mcs/class/corlib/System/String.cs	(working copy)
@@ -1854,6 +1854,54 @@
 			}
 		}
 
+		// Certain constructors are redirected to CreateString methods with
+		// matching argument list. The this pointer should not be used.
+
+		private unsafe String CreateString (sbyte* value)
+		{
+			byte* bytes = (byte*) value;
+			int length = 0;
+
+			try {
+				while (bytes++ [0] != 0)
+					length++;
+			} catch (NullReferenceException) {
+				throw new ArgumentOutOfRangeException ("value", "Value does not refer to a valid string.");
+			}
+
+			return CreateString (value, 0, length, null);
+		}
+
+		private unsafe String CreateString (sbyte* value, int startIndex, int length)
+		{
+			return CreateString (value, startIndex, length, null);
+		}
+
+		private unsafe String CreateString (sbyte* value, int startIndex, int length, Encoding enc)
+		{
+			if (length < 0)
+				throw new ArgumentOutOfRangeException ("length", "Non-negative number required.");
+			if (startIndex < 0)
+				throw new ArgumentOutOfRangeException ("startIndex", "Non-negative number required.");
+			if (value + startIndex < value)
+				throw new ArgumentOutOfRangeException ("startIndex", "Value, startIndex and length do not refer to a valid string.");
+
+			if (enc == null)
+				enc = Encoding.Default;
+
+			byte [] bytes = new byte [length];
+
+			if (length != 0)
+				fixed (byte* bytePtr = bytes)
+					try {
+						memcpy (bytePtr, (byte*) (value + startIndex), length);
+					} catch (NullReferenceException) {
+						throw new ArgumentOutOfRangeException ("value", "Value, startIndex and length do not refer to a valid string.");
+					}
+
+			return enc.GetString (bytes);
+		}
+
 		/* helpers used by the runtime as well as above or eslewhere in corlib */
 		internal static unsafe void memset (byte *dest, int val, int len)
 		{
Index: mcs/class/corlib/System.Text/Latin1Encoding.cs
===================================================================
--- mcs/class/corlib/System.Text/Latin1Encoding.cs	(revision 62694)
+++ mcs/class/corlib/System.Text/Latin1Encoding.cs	(working copy)
@@ -286,8 +286,19 @@
 		if (count == 0)
 		    return String.Empty;
 		unsafe {
-			fixed (byte *ss = &bytes [0]) {
-				return new String ((sbyte*)ss, index, count);
+			fixed (byte* bytePtr = bytes) {
+				string s = string.InternalAllocateStr (count);
+
+				fixed (char* charPtr = s) {
+					byte* currByte = bytePtr + index;
+					byte* lastByte = currByte + count;
+					char* currChar = charPtr;
+
+					while (currByte < lastByte)
+						currChar++ [0] = (char) currByte++ [0];
+				}
+
+				return s;
 			}
 		}
 	}
@@ -296,14 +307,8 @@
 		if (bytes == null) {
 			throw new ArgumentNullException ("bytes");
 		}
-		int count = bytes.Length;
-		if (count == 0)
-		    return String.Empty;
-		unsafe {
-			fixed (byte *ss = &bytes [0]) {
-				return new String ((sbyte*)ss, 0, count);
-			}
-		}
+
+		return GetString (bytes, 0, bytes.Length);
 	}
 
 #if !ECMA_COMPAT
Index: mcs/class/corlib/System.Text/ASCIIEncoding.cs
===================================================================
--- mcs/class/corlib/System.Text/ASCIIEncoding.cs	(revision 62694)
+++ mcs/class/corlib/System.Text/ASCIIEncoding.cs	(working copy)
@@ -310,8 +310,26 @@
 			return String.Empty;
 		
 		unsafe {
-			fixed (byte *ss = &bytes [0]) {
-				return new String ((sbyte*)ss, index, count);
+			fixed (byte* bytePtr = bytes) {
+				string s = string.InternalAllocateStr (count);
+
+				fixed (char* charPtr = s) {
+					byte* currByte = bytePtr + index;
+					byte* lastByte = currByte + count;
+					char* currChar = charPtr;
+
+					while (currByte < lastByte) {
+#if NET_2_0
+						byte b = currByte++ [0];
+						currChar++ [0] = b <= 0x7F ? (char) b : (char) '?';
+#else
+						// GetString is incompatible with GetChars
+						currChar++ [0] = (char) (currByte++ [0] & 0x7F);
+#endif
+					}
+				}
+
+				return s;
 			}
 		}
 	}
@@ -383,14 +401,8 @@
 		if (bytes == null) {
 			throw new ArgumentNullException ("bytes");
 		}
-		int count = bytes.Length;
-		if (count == 0)
-		    return String.Empty;
-		unsafe {
-			fixed (byte *ss = &bytes [0]) {
-				return new String ((sbyte*)ss, 0, count);
-			}
-		}
+
+		return GetString (bytes, 0, bytes.Length);
 	}
 #endif
 
