Index: Console.cs
===================================================================
--- Console.cs	(revision 62719)
+++ Console.cs	(working copy)
@@ -30,6 +30,7 @@
 //
 
 using System.IO;
+using System.Runtime.InteropServices;
 using System.Security.Permissions;
 using System.Text;
 
@@ -43,42 +44,57 @@
 #endif
 	class Console
 	{
+		[DllImport ("kernel32.dll", ExactSpelling=true)]
+		private static extern int GetConsoleCP ();
+		[DllImport ("kernel32.dll", ExactSpelling=true)]
+		private static extern int GetConsoleOutputCP ();
+
 		private static TextWriter stdout;
 		private static TextWriter stderr;
 		private static TextReader stdin;
 
 		static Console ()
 		{
-			int code_page = 0;
-			Encoding.InternalCodePage (ref code_page);
-			Encoding encoding;
+#if !NET_2_0
+			Encoding inputEncoding;
+			Encoding outputEncoding;
+#endif
 
 			if (Environment.IsRunningOnWindows) {
 				//
 				// On Windows, follow the Windows tradition
 				//
-				encoding = Encoding.Default;
+				try {
+					inputEncoding = Encoding.GetEncoding (GetConsoleCP ());
+					outputEncoding = Encoding.GetEncoding (GetConsoleOutputCP ());
+				} catch {
+					// FIXME: I18N assemblies are not available when compiling mcs
+					inputEncoding = outputEncoding = Encoding.Default;
+				}
 			} else {
 				//
 				// On Unix systems (128), do not output the
 				// UTF-8 ZWNBSP (zero-width non-breaking space).
 				//
+				int code_page = 0;
+				Encoding.InternalCodePage (ref code_page);
+
 				if (code_page != -1 && ((code_page & 0x0fffffff) == 3 // UTF8Encoding.UTF8_CODE_PAGE
 					|| ((code_page & 0x10000000) != 0)))
-					encoding = Encoding.UTF8Unmarked;
+					inputEncoding = outputEncoding = Encoding.UTF8Unmarked;
 				else
-					encoding = Encoding.Default;
+					inputEncoding = outputEncoding = Encoding.Default;
 			}
 
-			stderr = new UnexceptionalStreamWriter (OpenStandardError (0), encoding); 
+			stderr = new UnexceptionalStreamWriter (OpenStandardError (0), outputEncoding); 
 			((StreamWriter)stderr).AutoFlush = true;
 			stderr = TextWriter.Synchronized (stderr, true);
 
-			stdout = new UnexceptionalStreamWriter (OpenStandardOutput (0), encoding);
+			stdout = new UnexceptionalStreamWriter (OpenStandardOutput (0), outputEncoding);
 			((StreamWriter)stdout).AutoFlush = true;
 			stdout = TextWriter.Synchronized (stdout, true);
 
-			stdin  = new UnexceptionalStreamReader (OpenStandardInput (0), encoding);
+			stdin = new UnexceptionalStreamReader (OpenStandardInput (0), inputEncoding);
 			stdin = TextReader.Synchronized (stdin);
 			GC.SuppressFinalize (stdout);
 			GC.SuppressFinalize (stderr);
