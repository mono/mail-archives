Index: class/corlib/System.Collections/SortedList.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.Collections/SortedList.cs,v
retrieving revision 1.11
diff -u -p -r1.11 SortedList.cs
--- class/corlib/System.Collections/SortedList.cs	9 Jun 2003 00:41:38 -0000	1.11
+++ class/corlib/System.Collections/SortedList.cs	11 Jun 2003 08:39:34 -0000
@@ -162,17 +162,35 @@ namespace System.Collections {
 			get {
 				return table.Length;
 			}
+
 			set {
-				Slot [] table = this.table;
-				int current = table.Length;
+				int current = this.table.Length;
 
 				if (inUse > value)
 					throw new ArgumentOutOfRangeException("capacity too small");
 
-				if (value > current) {
+                                if (value == Int32.MaxValue)
+                                        throw new OutOfMemoryException ();
+
+                                else if (value > inUse) {
+                                        Slot [] newTable = new Slot [value];
+                                        Array.Copy (table, newTable, inUse);
+                                        this.table = newTable;
+                                        return;
+
+                                } else if (current > INITIAL_SIZE && value < current) {
+                                        Slot [] newTable = new Slot [INITIAL_SIZE];
+                                        Array.Copy (table, newTable, inUse);
+                                        this.table = newTable;
+                                        return;
+                                
+                                }
+
+                                if (value > current) {
 					Slot [] newTable = new Slot [value];
 					Array.Copy (table, newTable, current);
 					this.table = newTable;
+                                        return;
 				}
 			}
 		}
@@ -320,18 +338,15 @@ namespace System.Collections {
 
 		public virtual int IndexOfValue (object value)
 		{
-			if (null == value)
-				return -1;
+                        if (inUse == 0)
+                                return -1;
+                        
+                        for (int i = 0; i < this.table.Length; i ++) {
+                                Slot current = this.table [i];
 
-			Slot [] table = this.table;
-			int len = table.Length;
-
-			for (int i=0; i < len; i++) {
-				object trialValue = table[i].value;
-				if ((null != trialValue) && (trialValue.Equals (value))) {
+                                if (Equals (current.value, value))
 					return i;
-				}
-			}
+                        }
 
 			return -1;
 		}
@@ -514,14 +529,14 @@ namespace System.Collections {
 
 		private void  CopyToArray (Array arr, int i, 
 					   EnumeratorMode mode)
-		{
-			if (arr == null)
-				throw new ArgumentNullException ("arr");
-
-			if (i < 0 || i + this.Count > arr.Length)
-				throw new ArgumentOutOfRangeException ("i");
-			
-
+		{
+			if (arr == null)
+				throw new ArgumentNullException ("arr");
+
+			if (i < 0 || i + this.Count > arr.Length)
+				throw new ArgumentOutOfRangeException ("i");
+			
+
 			
 			IEnumerator it = new Enumerator (this, mode);
 
@@ -575,8 +590,8 @@ namespace System.Collections {
 			private EnumeratorMode mode;
 
 			private object currentKey;
-			private object currentValue;
-				
+			private object currentValue;
+				
 			bool invalid = false;
 
 			private readonly static string xstr = "SortedList.Enumerator: snapshot out of sync.";
@@ -597,7 +612,7 @@ namespace System.Collections {
 
 			public void Reset ()
 			{
-				if (host.modificationCount != stamp || invalid)
+				if (host.modificationCount != stamp || invalid)
 					throw new InvalidOperationException (xstr);
 
 				pos = -1;
@@ -607,7 +622,7 @@ namespace System.Collections {
 
 			public bool MoveNext ()
 			{
-				if (host.modificationCount != stamp || invalid)
+				if (host.modificationCount != stamp || invalid)
 					throw new InvalidOperationException (xstr);
 
 				Slot [] table = host.table;
@@ -628,8 +643,8 @@ namespace System.Collections {
 			public DictionaryEntry Entry
 			{
 				get {
-					if (invalid || pos >= size || pos == -1)
-						throw new InvalidOperationException (xstr);
+					if (invalid || pos >= size || pos == -1)
+						throw new InvalidOperationException (xstr);
 					
 					return new DictionaryEntry (currentKey,
 					                            currentValue);
@@ -638,7 +653,7 @@ namespace System.Collections {
 
 			public Object Key {
 				get {
-					if (invalid || pos >= size || pos == -1)
+					if (invalid || pos >= size || pos == -1)
 						throw new InvalidOperationException (xstr);
 					return currentKey;
 				}
@@ -646,7 +661,7 @@ namespace System.Collections {
 
 			public Object Value {
 				get {
-					if (invalid || pos >= size || pos == -1)
+					if (invalid || pos >= size || pos == -1)
 						throw new InvalidOperationException (xstr);
 					return currentValue;
 				}
@@ -654,8 +669,8 @@ namespace System.Collections {
 
 			public Object Current {
 				get {
-					if (invalid || pos >= size || pos == -1)
-						throw new InvalidOperationException (xstr);
+					if (invalid || pos >= size || pos == -1)
+						throw new InvalidOperationException (xstr);
 					
 					return (mode == EnumeratorMode.KEY_MODE)
 					        ? currentKey
Index: class/corlib/System.Collections/ChangeLog
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System.Collections/ChangeLog,v
retrieving revision 1.78
diff -u -p -r1.78 ChangeLog
--- class/corlib/System.Collections/ChangeLog	9 Jun 2003 00:43:28 -0000	1.78
+++ class/corlib/System.Collections/ChangeLog	11 Jun 2003 08:39:34 -0000
@@ -1,3 +1,19 @@
+2003-06-11  Duncan Mak  <duncan@ximian.com>
+
+	* SortedList.cs: Oi! What a mess.
+	(Capacity): Throw OutOfMemoryException if it's tries to set
+	Capacity to Int32.MaxValue.
+
+	If the list was constructed using the null-param constructor, and
+	it tries to set it to a size lower than the default, let it do so.
+
+	If the list was constructor with a specific size, and it tries to
+	set it to a size lower than the specified size, set it to the
+	default size.
+
+	(IndexOfValue): Clean up the code somewhat, make it allow for
+	values to be null.
+
 2003-06-08  Ben Maurer <bmaurer@users.sourceforge.net>
 	* ArrayList.cs, Hashtable.cs, SortedList.cs: Enumerator fixes, error
 	checking
