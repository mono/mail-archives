Index: SortedListTest.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/Test/System.Collections/SortedListTest.cs,v
retrieving revision 1.7
diff -u -p -r1.7 SortedListTest.cs
--- SortedListTest.cs	21 Dec 2002 14:11:00 -0000	1.7
+++ SortedListTest.cs	11 Jun 2003 08:29:21 -0000
@@ -21,17 +21,20 @@ namespace MonoTests.System.Collections {
 
 
 /// <summary>SortedList test.</summary>
-public class SortedListTest : TestCase {
+[TestFixture]
+public class SortedListTest : Assertion {
 	protected SortedList sl1;
 	protected SortedList sl2;
 	protected SortedList emptysl;
 	protected const int icap=16;
-		
-	protected override void SetUp() 
+
+        [SetUp]
+	public  void SetUp() 
 	{
 	}
 
-	protected override void TearDown() 
+        [TearDown]
+	public void TearDown() 
 	{
 	}
 
@@ -40,7 +43,8 @@ public class SortedListTest : TestCase {
 		AssertNotNull("sl.constructor-1: returns null", temp1);
 		AssertEquals("sl.constructor-1: incorrect initial capacity", icap, temp1.Capacity);
 	}
-	
+
+        [Test]
 	public void TestConstructor2() {
 		Comparer c = Comparer.Default;
 		SortedList temp1 = new SortedList(c);
@@ -48,6 +52,7 @@ public class SortedListTest : TestCase {
 		AssertEquals("sl.constructor-2: incorrect initial capacity", icap, temp1.Capacity);
 	}
 
+        [Test]
 	public void TestConstructor3() {
 		Hashtable d = new Hashtable();
 		d.Add("one", "Mircosoft");
@@ -79,7 +84,8 @@ public class SortedListTest : TestCase {
 			Fail ("Unexpected Exception throw: e=" + e);
 		}
 	}
-	
+
+        [Test]	
 	public void TestConstructor4() {
 		SortedList temp1 = new SortedList(17);
 		AssertNotNull("sl.constructor-4: returns null", temp1);
@@ -95,6 +101,7 @@ public class SortedListTest : TestCase {
 		}
 	}
 
+        [Test]	
 	public void TestConstructor5() {
 		Comparer c = Comparer.Default;
 		SortedList temp1 = new SortedList(c,27);
@@ -106,6 +113,7 @@ public class SortedListTest : TestCase {
 		} catch (ArgumentOutOfRangeException) {}
 	}
 
+        [Test]	
 	public void TestIsSynchronized() {
 		SortedList sl1 = new SortedList();
 		Assert("sl: should not be synchronized by default", 
@@ -114,6 +122,7 @@ public class SortedListTest : TestCase {
 		Assert("sl: synchronized wrapper not working", sl2.IsSynchronized);
 	}
 
+        [Test]	
 	public void TestCapacity() {
 		for (int i = 0; i < 100; i++) {
 			SortedList sl1 = new SortedList(i);
@@ -122,6 +131,33 @@ public class SortedListTest : TestCase {
 		}
 	}
 
+        [Test]
+        public void TestCapacity2 ()
+        {
+                SortedList list = new SortedList ();
+                list.Capacity = 5;
+
+                Assert (list.Capacity, 5);
+        }
+
+        [Test]
+        public void TestCapacity3 ()
+        {
+                SortedList list = new SortedList (1000);
+                list.Capacity = 5;
+
+                Assert (list.Capacity, 16);
+        }
+
+        [Test]
+        [ExpectedException (typeof (OutOfMemoryException))]
+        public void TestCapacity4 ()
+        {
+                SortedList list = new SortedList ();
+                list.Capacity = Int32.MaxValue;
+        }
+
+        [Test]	
 	public void TestCount() {
 		{
 			SortedList sl1 = new SortedList();
@@ -135,17 +171,21 @@ public class SortedListTest : TestCase {
 		}
 	}
 
+        [Test]	
 	public void TestIsFixed() {
 		SortedList sl1 = new SortedList();
 		Assert("should not be fixed by default", !sl1.IsFixedSize);
 	}
 
+
+        [Test]	
 	public void TestIsReadOnly() {
 		SortedList sl1 = new SortedList();
 		Assert("should not be ReadOnly by default", !sl1.IsReadOnly);
 	}
 
 
+        [Test]	
 	public void TestItem() {
 		SortedList sl1 = new SortedList();
 		string key = null;
@@ -170,9 +210,10 @@ public class SortedListTest : TestCase {
 		}
 	}
 
-  public void TestSyncRoot()
-  {
-  	SortedList sl1 = new SortedList();
+        [Test]
+        public voi
 		SortedList sl1 = new SortedList(24);
 		string s=null;
@@ -499,6 +555,7 @@ public class SortedListTest : TestCase {
 		}
 	}
 
+        [Test]
 	public void TestIndexOfValue() {
 		SortedList sl1 = new SortedList(24);
 		string s=null;
@@ -516,8 +573,30 @@ public class SortedListTest : TestCase {
 			AssertEquals("sl.IndexOfValue: incorrect index key", i, sl1.IndexOfValue(100+i*i));
 		}
 	}
-	
 
+        [Test]
+        public void TestIndexOfValue2 ()
+        {
+                SortedList list = new SortedList ();
+                list.Add ("key0", "la la");
+                list.Add ("key1", "value");
+                list.Add ("key2", "value");
+
+                int i = list.IndexOfValue ("value");
+
+                Assert (i, 1);
+        }
+
+        [Test]
+        public void TestIndexOfValue3 ()
+        {
+                SortedList list = new SortedList ();
+                int i = list.IndexOfValue ((string) null);
+
+                Assert (i, -1);
+        }
+
+        [Test]
 	public void TestRemove() {
 		SortedList sl1 = new SortedList(24);
 		string s=null;
@@ -544,6 +623,7 @@ public class SortedListTest : TestCase {
 			AssertEquals("sl.Remove: removing failed(2)",sl1["kala "+i],null);
 	}
 
+        [Test]
 	public void TestRemoveAt() {
 		SortedList sl1 = new SortedList(24);
 		int k;
@@ -574,6 +654,7 @@ public class SortedListTest : TestCase {
 			AssertEquals("sl.RemoveAt: removing failed(4)",sl1["kala "+string.Format("{0:D2}", i)],i);
 	}
 
+        [Test]
 	public void TestSetByIndex() {
 		SortedList sl1 = new SortedList(24);
 		for (int i = 49; i>=0; i--) sl1.Add(100+i,i);
@@ -597,6 +678,7 @@ public class SortedListTest : TestCase {
 
 	}
 
+        [Test]
 	public void TestTrimToSize() {
 		SortedList sl1 = new SortedList(24);
 		
Index: ChangeLog
===================================================================
RCS file: /cvs/public/mcs/class/corlib/Test/System.Collections/ChangeLog,v
retrieving revision 1.34
diff -u -p -r1.34 ChangeLog
--- ChangeLog	10 Jun 2003 22:42:04 -0000	1.34
+++ ChangeLog	11 Jun 2003 08:29:21 -0000
@@ -1,4 +1,14 @@
+2003-06-11  Duncan Mak  <duncan@ximian.com>
 
+	* SortedListTest.cs: Convert it to the new style of NUnit tests.
+
+	(TestCapacity2):
+	(TestCapacity3):
+	(TestCapacity4): new tests for the Capacity property.
+
+	(TestIndexOfValue2):
+	(TestIndexOfValue3): new tests for the IndexOfValue method.
+	
 2003-06-11  Gonzalo Paniagua Javier <gonzalo@ximian.com>
 
 	* HashtableTest.cs: removed duplicate tests and unneeded inner class.
