diff --git a/class/Mono.CompilerServices.SymbolWriter/SymbolWriterImpl.cs b/class/Mono.CompilerServices.SymbolWriter/SymbolWriterImpl.cs
index b179a83..a1fd0f9 100644
--- a/class/Mono.CompilerServices.SymbolWriter/SymbolWriterImpl.cs
+++ b/class/Mono.CompilerServices.SymbolWriter/SymbolWriterImpl.cs
@@ -43,8 +43,8 @@ namespace Mono.CompilerServices.SymbolWriter
 		MonoSymbolWriter msw;
 
 		int nextLocalIndex;
-//		int currentToken;
-//		string methodName;
+		int currentToken;
+		string methodName;
 		Stack namespaceStack = new Stack ();
 		bool methodOpened;
 
@@ -196,7 +196,7 @@ namespace Mono.CompilerServices.SymbolWriter
 		
 		public void OpenMethod (SymbolToken method)
 		{
-//			currentToken = method.GetToken ();
+			currentToken = method.GetToken ();
 		}
 		
 		public void OpenNamespace (string name)
@@ -206,7 +206,7 @@ namespace Mono.CompilerServices.SymbolWriter
 			n.Name = name;
 			namespaceStack.Push (n);
 		}
-		
+
 		public int OpenScope (int startOffset)
 		{
 			return msw.OpenScope (startOffset);
@@ -220,11 +220,10 @@ namespace Mono.CompilerServices.SymbolWriter
 			int endLine,
 			int endColumn)
 		{
-#if FIXME
-			SourceMethodImpl sm = new SourceMethodImpl (methodName, currentToken, GetCurrentNamespace (startDoc));
-			msw.OpenMethod (startDoc as ISourceFile, sm, startLine, startColumn, endLine, endColumn);
+			int nsId = GetCurrentNamespace (startDoc);
+			SourceMethodImpl sm = new SourceMethodImpl (methodName, currentToken, nsId);
+			msw.OpenMethod (((ICompileUnit)startDoc).Entry, nsId, sm);
 			methodOpened = true;
-#endif
 		}
 		
 		public void SetScopeRange (int scopeID, int startOffset, int endOffset)
@@ -235,9 +234,8 @@ namespace Mono.CompilerServices.SymbolWriter
 		{
 			// This is a hack! but MonoSymbolWriter needs the method name
 			// and ISymbolWriter does not have any method for providing it
-			
-//			if (name == "__name")
-//				methodName = System.Text.Encoding.UTF8.GetString (data);
+			if (name == "__name")
+				methodName = System.Text.Encoding.UTF8.GetString (data);
 		}
 		
 		public void SetUnderlyingWriter (IntPtr underlyingWriter)
@@ -264,7 +262,7 @@ namespace Mono.CompilerServices.SymbolWriter
 			}
 			ni.UsingClauses.Add (fullName);
 		}
-/*		
+
 		int GetCurrentNamespace (ISymbolDocumentWriter doc)
 		{
 			if (namespaceStack.Count == 0) {
@@ -287,7 +285,7 @@ namespace Mono.CompilerServices.SymbolWriter
 			}
 			return ni.NamespaceID;
 		}
-*/
+
 	}
 	
 	class SymbolDocumentWriterImpl: ISymbolDocumentWriter, ISourceFile, ICompileUnit