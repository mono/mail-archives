Index: icall-def.h
===================================================================
--- icall-def.h	(revision 90804)
+++ icall-def.h	(working copy)
@@ -247,6 +247,9 @@
 ICALL(REGINF_1, "construct_internal_region_from_lcid", ves_icall_System_Globalization_RegionInfo_construct_internal_region_from_lcid)
 ICALL(REGINF_2, "construct_internal_region_from_name", ves_icall_System_Globalization_RegionInfo_construct_internal_region_from_name)
 
+ICALL_TYPE(DRVINF, "System.IO.DriveInfo", DRVINF_1)
+ICALL(DRVINF_1, "GetFSUsage", ves_icall_System_IO_DriveInfo_GetFSUsage)
+
 ICALL_TYPE(FAMW, "System.IO.FAMWatcher", FAMW_1)
 ICALL(FAMW_1, "InternalFAMNextEvent", ves_icall_System_IO_FAMW_InternalFAMNextEvent)
 
Index: icall.c
===================================================================
--- icall.c	(revision 90804)
+++ icall.c	(working copy)
@@ -123,6 +123,67 @@
 	return NULL;
 }
 
+enum ves_icall_System_IO_DriveInfo_GetFSUsage_Field {
+	Icall_DRVINF_1_TOTALSIZE = 1,
+	Icall_DRVINF_1_TOTALFREE = 2,
+	Icall_DRVINF_1_AVAILFREE = 3
+};
+
+/* System.IO.DriveInfo (2.0+) */
+
+guint64
+ves_icall_System_IO_DriveInfo_GetFSUsage (MonoString *path, enum ves_icall_System_IO_DriveInfo_GetFSUsage_Field field)
+{
+#if defined (PLATFORM_WIN32)
+	ULARGE_INTEGER retVal = { 0 };
+	BOOL ok = 0;
+	gunichar2 *unipath;
+#else
+	guint64 retVal = 0;
+	gchar *utf8path;
+#endif
+
+	// Probably this check-or-exception logic should be replaced with assertions, since this method is only called at three points
+	MONO_CHECK_ARG_NULL (path);
+	MONO_CHECK_ARG (field, field > 0);
+	MONO_CHECK_ARG (field, field < 4);
+	
+#if defined (PLATFORM_WIN32)
+	unipath = mono_string_to_utf16(path);
+	if (!unipath)
+		return 0;	// Probably should throw OOM, but it's a non-documented exception in this method's managed callers
+
+	switch (field) {
+		case Icall_DRVINF_1_TOTALSIZE:
+			ok = GetDiskFreeSpaceEx (unipath, NULL, &retVal, NULL);
+			break;
+		case Icall_DRVINF_1_TOTALFREE:
+			ok = GetDiskFreeSpaceEx (unipath, NULL, NULL, &retVal);
+			break;
+		case Icall_DRVINF_1_AVAILFREE:
+			ok = GetDiskFreeSpaceEx (unipath, &retVal, NULL, NULL);
+			break;
+	}
+	g_free (unipath);
+	
+	if (0 == ok) {
+		mono_raise_exception (mono_get_exception_io (NULL)); // FIXME: provide a message
+		g_assert_not_reached();
+		return 0;	// W-C4715: not all code paths return a value
+	}
+	else return (guint64)retVal.QuadPart;
+#else
+	utf8path = mono_string_to_utf8(path);
+	if (!utf8path)
+		return 0;	// Probably should throw OOM, but it's a non-documented exception in this method's managed callers
+	
+	// FIXME: implement for non-win32 platforms
+	
+	g_free(utf8path);
+	return 0;
+#endif
+}
+
 static MonoObject *
 ves_icall_System_Array_GetValueImpl (MonoObject *this, guint32 pos)
 {