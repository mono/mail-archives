Index: Test/System.ComponentModel/TypeDescriptorTests.cs
===================================================================
--- Test/System.ComponentModel/TypeDescriptorTests.cs	(revision 101966)
+++ Test/System.ComponentModel/TypeDescriptorTests.cs	(working copy)
@@ -419,7 +419,27 @@
 			return this.GetType().Name;
 		}
 	}
+	
+	public class TestObject
+    	{
+		private int _test;
+		public int ReadWriteProperty
+        	{
+			get { return _test; }
+            		set { _test = value; }
+        	}
 
+        	public int ReadOnlyProperty
+        	{
+			get { return _test; }
+        	}
+
+        	public int WriteOnlyProperty
+        	{
+			set { _test = value; }
+        	}
+    	}
+
 	[TestFixture]
 	public class TypeDescriptorTests
 	{
@@ -427,6 +447,9 @@
 		MyComponent sitedcom = new MyComponent (new MySite ());
 		MyComponent nfscom = new MyComponent (new NoFilterSite (new MyContainer ()));
 		AnotherComponent anothercom = new AnotherComponent ();
+		TestObject testObject = new TestObject();
+        PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(testObject);
+
 		
 		[Test]
 		public void TestICustomTypeDescriptor ()
@@ -863,5 +886,50 @@
 			Assert.AreEqual (1, pc.Count, "#1");
 			Assert.AreEqual ("Length", pc [0].Name, "#2");
 		}
+		
+		
+		[Test]
+        	public void TestPropertyCount()
+        	{
+			Assert.AreEqual(2, properties.Count);
+        	}
+
+        	[Test]
+        	public void TestReadOnlyExists()
+        	{
+			Assert.IsTrue(PropertyDescriptorExists("ReadOnlyProperty"));
+        	}
+
+        	[Test]
+        	public void TestReadWriteExists()
+        	{
+			Assert.IsTrue(PropertyDescriptorExists("ReadWriteProperty"));
+        	}
+
+        	[Test]
+        	public void TestWriteOnlyDoesNotExist()
+        	{
+			Assert.IsFalse(PropertyDescriptorExists("WriteOnlyProperty"));
+        	}
+
+        	[Test]
+        	public void TestGetPropertiesCount()
+        	{
+			PropertyInfo[] props = testObject.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.DeclaredOnly);
+			Assert.AreEqual(2, props.Length);
+        	}
+
+        	private bool PropertyDescriptorExists(string propertyName)
+        	{
+			bool exists = false;
+			foreach (PropertyDescriptor descriptor in properties)
+            		{
+				if (descriptor.Name == propertyName)
+                		{
+					exists = true;
+                		}
+            		}
+            		return exists;
+        	}
 	}
 }
Index: System.ComponentModel/TypeDescriptor.cs
===================================================================
--- System.ComponentModel/TypeDescriptor.cs	(revision 101969)
+++ System.ComponentModel/TypeDescriptor.cs	(working copy)
@@ -1108,6 +1108,7 @@
 				PropertyInfo[] props = currentType.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.DeclaredOnly);
 				foreach (PropertyInfo property in props) {
 					if (property.GetIndexParameters ().Length == 0 &&
+					    property.CanRead &&
 					    !propertiesHash.ContainsKey (property.Name)) {
 						propertiesList.Add (new ReflectionPropertyDescriptor (property));
 						propertiesHash.Add (property.Name, null);