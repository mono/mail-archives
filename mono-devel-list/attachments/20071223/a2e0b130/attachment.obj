Index: class/Makefile
===================================================================
--- class/Makefile	(revision 91819)
+++ class/Makefile	(working copy)
@@ -102,7 +102,8 @@
 	Microsoft.Build.Framework	\
 	Microsoft.Build.Utilities	\
 	Microsoft.Build.Engine		\
-	Microsoft.Build.Tasks
+	Microsoft.Build.Tasks		\
+	System.Threading.Parallel
 
 net_2_1_dirs := \
 	corlib			\
Index: class/System.Threading.Parallel/Assembly/AssemblyInfo.cs
===================================================================
--- class/System.Threading.Parallel/Assembly/AssemblyInfo.cs	(revision 0)
+++ class/System.Threading.Parallel/Assembly/AssemblyInfo.cs	(working copy)
@@ -3,6 +3,7 @@
 //
 // Author:
 //   Andreas Nahr (ClassDevelopment@A-SoftTech.com)
+//   Andreas Faerber (andreas.faerber@web.de)
 //
 // (C) 2003 Ximian, Inc.  http://www.ximian.com
 //
@@ -36,26 +37,26 @@
 using System.Runtime.CompilerServices;
 using System.Runtime.InteropServices;
 
-// General Information about the System.ServiceProcess assembly
+// General Information about the System.Threading.Parallel assembly
 
 [assembly: AssemblyVersion (Consts.FxVersion)]
 [assembly: SatelliteContractVersion (Consts.FxVersion)]
 
-[assembly: AssemblyTitle ("System.ServiceProcess.dll")]
-[assembly: AssemblyDescription ("System.ServiceProcess.dll")]
+[assembly: AssemblyTitle ("System.Threading.Parallel.dll")]
+[assembly: AssemblyDescription ("System.Threading.Parallel.dll")]
 [assembly: AssemblyCompany ("MONO development team")]
 [assembly: AssemblyProduct ("MONO CLI")]
-[assembly: AssemblyCopyright ("(c) 2003 Various Authors")]
+[assembly: AssemblyCopyright ("(c) 2007 Various Authors")]
 
 [assembly: CLSCompliant (true)]
-[assembly: AssemblyDefaultAlias ("System.ServiceProcess.dll")]
+[assembly: AssemblyDefaultAlias ("System.Threading.Parallel.dll")]
 [assembly: AssemblyInformationalVersion ("0.0.0.1")]
 [assembly: NeutralResourcesLanguage ("en-US")]
 
 [assembly: ComVisible (false)]
 
 [assembly: AssemblyDelaySign (true)]
-[assembly: AssemblyKeyFile("../msfinal.pub")]
+[assembly: AssemblyKeyFile("../ecma.pub")]
 
 #if NET_2_0
 [assembly: AssemblyFileVersion (Consts.FxFileVersion)]
Index: class/System.Threading.Parallel/Assembly/ChangeLog
===================================================================
--- class/System.Threading.Parallel/Assembly/ChangeLog	(revision 0)
+++ class/System.Threading.Parallel/Assembly/ChangeLog	(revision 0)
@@ -0,0 +1,3 @@
+2007-12-23  Andreas Faerber  <andreas.faerber@web.de>
+
+	* AssemblyInfo.cs: New
Index: class/System.Threading.Parallel/System.Threading.Parallel.dll.sources
===================================================================
--- class/System.Threading.Parallel/System.Threading.Parallel.dll.sources	(revision 0)
+++ class/System.Threading.Parallel/System.Threading.Parallel.dll.sources	(working copy)
@@ -2,27 +2,7 @@
 ../../build/common/Consts.cs
 ../../build/common/Locale.cs
 ../../build/common/MonoTODOAttribute.cs
-System.ServiceProcess/PowerBroadcastStatus.cs
-System.ServiceProcess/ServiceAccount.cs
-System.ServiceProcess/ServiceController.cs
-System.ServiceProcess/ServiceControllerImpl.cs
-System.ServiceProcess/ServiceControllerPermissionAccess.cs
-System.ServiceProcess/ServiceControllerStatus.cs
-System.ServiceProcess/ServiceInstaller.cs
-System.ServiceProcess/ServiceProcessInstaller.cs
-System.ServiceProcess/ServiceStartMode.cs
-System.ServiceProcess/ServiceType.cs
-System.ServiceProcess/ServiceBase.cs
-System.ServiceProcess/TimeoutException.cs
-System.ServiceProcess/ServiceProcessDescriptionAttribute.cs
-System.ServiceProcess/ServiceControllerPermission.cs
-System.ServiceProcess/ServiceControllerPermissionAttribute.cs
-System.ServiceProcess/ServiceControllerPermissionEntry.cs
-System.ServiceProcess/ServiceControllerPermissionEntryCollection.cs
-System.ServiceProcess/SessionChangeDescription.cs
-System.ServiceProcess/SessionChangeReason.cs
-System.ServiceProcess/UnixServiceController.cs
-System.ServiceProcess/Win32ServiceController.cs
-System.ServiceProcess.Design/ServiceInstallerDialog.cs
-System.ServiceProcess.Design/ServiceInstallerDialogResult.cs
-System.ServiceProcess.Design/ServiceNameConverter.cs
+System.Threading.Parallel/ParallelLoop.cs
+System.Threading.Parallel/ParallelFor.cs
+System.Threading.Parallel/ParallelForEach.cs
+System.Threading.Parallel/ParallelWhile.cs
Index: class/System.Threading.Parallel/Test/System.Threading.Parallel/ChangeLog
===================================================================
--- class/System.Threading.Parallel/Test/System.Threading.Parallel/ChangeLog	(revision 0)
+++ class/System.Threading.Parallel/Test/System.Threading.Parallel/ChangeLog	(revision 0)
@@ -0,0 +1,5 @@
+2007-12-23  Andreas Faerber  <andreas.faerber@web.de>
+
+	* ParallelForTest.cs,
+	  ParallelForEachTest.cs,
+	  ParallelWhileTest.cs: New.
Index: class/System.Threading.Parallel/Test/System.Threading.Parallel/ParallelForTest.cs
===================================================================
--- class/System.Threading.Parallel/Test/System.Threading.Parallel/ParallelForTest.cs	(revision 0)
+++ class/System.Threading.Parallel/Test/System.Threading.Parallel/ParallelForTest.cs	(revision 0)
@@ -0,0 +1,118 @@
+// 
+// ParallelForTest.cs - NUnit test cases for ParallelFor
+// 
+// Authors:
+//   Andreas Faerber  <andreas.faerber@web.de>
+// 
+// (C) 2007 Andreas Faerber
+// 
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+// 
+
+using System;
+using System.Threading;
+using System.Threading.Parallel;
+
+using NUnit.Framework;
+
+namespace MonoTests.System.Threading.Parallel
+{
+	[TestFixture ()]
+	public class ParallelForTest
+	{
+		[Test ()]
+		public void Constructor_Count ()
+		{
+			new ParallelFor (-1);
+			new ParallelFor (0);
+		}
+		
+		[Test ()]
+		public void Constructor_Count_Threads ()
+		{
+			new ParallelFor (-1, 1);
+			new ParallelFor (0, 1);
+			
+			new ParallelFor (1, 0);
+			
+			try {
+				new ParallelFor (1, -1);
+				Assert.Fail ("#C1");
+			} catch (ArgumentException) {
+			}
+		}
+		
+		[Test ()]
+		public void BeginRun_Action ()
+		{
+			ParallelFor loop = new ParallelFor (1, 1);
+			try {
+				loop.BeginRun (null);
+				Assert.Fail ("#A1");
+			} catch (ArgumentNullException) {
+			}
+		}
+		
+		[Test ()]
+		public void Run_Cancel ()
+		{
+			int n = 0;
+			ParallelFor loop = new ParallelFor (2, 1);
+			loop.Run (delegate (int i) {
+				Interlocked.Increment (ref n);
+				loop.Cancel ();
+			});
+			Assert.AreEqual (1, n, "#A1");
+		}
+		
+		[Test ()]
+		public void BeginRun_EndRun_Exception ()
+		{
+			int n = 0;
+			ParallelFor loop = new ParallelFor (2, 1);
+			
+			loop.BeginRun (delegate (int i) {
+				Interlocked.Increment (ref n);
+				if (i == 0)
+					throw new ApplicationException ();
+			});
+			
+			try {
+				loop.EndRun ();
+				Assert.Fail ("#B1");
+			} catch (ApplicationException) {
+			} finally {
+				Assert.AreEqual (1, n, "#B2");
+			}
+		}
+		
+		[Test ()]
+		public void Example_Gauss ()
+		{
+			int count = 100;
+			ParallelFor loop = new ParallelFor (count, 1);
+			int sum = 0;
+			loop.Run (delegate (int i) {
+				Interlocked.Add (ref sum, i + 1);
+			});
+			Assert.AreEqual (count * (count + 1) / 2, sum, "#A1");
+		}
+	}
+}
Index: class/System.Threading.Parallel/Test/System.Threading.Parallel/ParallelForEachTest.cs
===================================================================
--- class/System.Threading.Parallel/Test/System.Threading.Parallel/ParallelForEachTest.cs	(revision 0)
+++ class/System.Threading.Parallel/Test/System.Threading.Parallel/ParallelForEachTest.cs	(revision 0)
@@ -0,0 +1,108 @@
+// 
+// ParallelForEachTest.cs - NUnit test cases for ParallelForEach
+// 
+// Authors:
+//   Andreas Faerber  <andreas.faerber@web.de>
+// 
+// (C) 2007 Andreas Faerber
+// 
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+// 
+
+using System;
+using System.Collections.Generic;
+using System.Threading;
+using System.Threading.Parallel;
+
+using NUnit.Framework;
+
+namespace MonoTests.System.Threading.Parallel
+{
+	[TestFixture ()]
+	public class ParallelForEachTest
+	{
+		[Test ()]
+		public void Constructor_Collection ()
+		{
+			new ParallelForEach<int> (new int [0]);
+			new ParallelForEach<int> (new int [] { 2, 4 });
+		}
+		
+		[Test ()]
+		public void Constructor_Collection_Threads ()
+		{
+			IEnumerable<int> collection = new int [] { 2, 4 };
+			new ParallelForEach<int> (new int [0], 1);
+			new ParallelForEach<int> (collection, 1);
+			
+			new ParallelForEach<int> (collection, 0);
+			
+			try {
+				new ParallelForEach<int> (collection, -1);
+				Assert.Fail ("#C1");
+			} catch (ArgumentException) {
+			}
+		}
+		
+		[Test ()]
+		public void BeginRun_Action ()
+		{
+			ParallelForEach<int> loop = new ParallelForEach<int> (new int [0], 1);
+			try {
+				loop.BeginRun (null);
+				Assert.Fail ("#A1");
+			} catch (ArgumentNullException) {
+			}
+		}
+		
+		[Test ()]
+		public void Run_Cancel ()
+		{
+			int n = 0;
+			ParallelForEach<int> loop = new ParallelForEach<int> (new int [] { 2, 4 }, 1);
+			loop.Run (delegate (int item) {
+				Interlocked.Increment (ref n);
+				loop.Cancel ();
+			});
+			Assert.AreEqual (1, n, "#A1");
+		}
+		
+		[Test ()]
+		public void BeginRun_EndRun_Exception ()
+		{
+			int n = 0;
+			ParallelForEach<int> loop = new ParallelForEach<int> (new int [] { 2, 4 }, 1);
+			
+			loop.BeginRun (delegate (int item) {
+				Interlocked.Increment (ref n);
+				if (item == 2)
+					throw new ApplicationException ();
+			});
+			
+			try {
+				loop.EndRun ();
+				Assert.Fail ("#B1");
+			} catch (ApplicationException) {
+			} finally {
+				Assert.AreEqual (1, n, "#B2");
+			}
+		}
+	}
+}
Index: class/System.Threading.Parallel/Test/System.Threading.Parallel/ParallelWhileTest.cs
===================================================================
--- class/System.Threading.Parallel/Test/System.Threading.Parallel/ParallelWhileTest.cs	(revision 0)
+++ class/System.Threading.Parallel/Test/System.Threading.Parallel/ParallelWhileTest.cs	(revision 0)
@@ -0,0 +1,162 @@
+// 
+// ParallelWhileTest.cs - NUnit test cases for ParallelWhile
+// 
+// Authors:
+//   Andreas Faerber  <andreas.faerber@web.de>
+// 
+// (C) 2007 Andreas Faerber
+// 
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+// 
+
+using System;
+using System.Threading;
+using System.Threading.Parallel;
+
+using NUnit.Framework;
+
+namespace MonoTests.System.Threading.Parallel
+{
+	[TestFixture ()]
+	public class ParallelWhileTest
+	{
+		[Test ()]
+		public void Constructor ()
+		{
+			new ParallelWhile<int> ();
+		}
+		
+		[Test ()]
+		public void Constructor_Threads ()
+		{
+			new ParallelWhile<int> (1);
+			new ParallelWhile<int> (0);
+			
+			try {
+				new ParallelWhile<int> (-1);
+				Assert.Fail ("#B1");
+			} catch (ArgumentException) {
+			}
+		}
+		
+		[Test ()]
+		public void Add ()
+		{
+			new ParallelWhile<object> (1).Add (null);
+			new ParallelWhile<object> (1).Add (new object ());
+		}
+		
+		[Test ()]
+		public void BeginRun_Action ()
+		{
+			ParallelWhile<int> loop = new ParallelWhile<int> (1);
+			try {
+				loop.BeginRun (null);
+				Assert.Fail ("#A1");
+			} catch (ArgumentNullException) {
+			}
+		}
+		
+		[Test ()]
+		public void Run_Cancel ()
+		{
+			int n = 0;
+			ParallelWhile<int> loop = new ParallelWhile<int> (1);
+			loop.Add (2);
+			loop.Add (4);
+			loop.Run (delegate (int item) {
+				Interlocked.Increment (ref n);
+				loop.Cancel ();
+			});
+			Assert.AreEqual (1, n, "#A1");
+		}
+		
+		[Test ()]
+		public void BeginRun_EndRun_Exception ()
+		{
+			int n = 0;
+			ParallelWhile<int> loop = new ParallelWhile<int> (1);
+			loop.Add (2);
+			loop.Add (4);
+			
+			loop.BeginRun (delegate (int item) {
+				Interlocked.Increment (ref n);
+				if (item == 2)
+					throw new ApplicationException ();
+			});
+			
+			try {
+				loop.EndRun ();
+				Assert.Fail ("#B1");
+			} catch (ApplicationException) {
+			} finally {
+				Assert.AreEqual (1, n, "#B2");
+			}
+		}
+		
+		[Test ()]
+		public void Example1 ()
+		{
+			int sum = 0;
+			ParallelWhile<int> loop = new ParallelWhile<int> (1);
+			loop.Add (2);
+			loop.Add (4);
+			loop.Run (delegate (int item) {
+				Interlocked.Add (ref sum, item);
+				if (item <= 4)
+					loop.Add (item + 4);
+			});
+			Assert.AreEqual (20, sum, "#A1");
+		}
+		
+		[Test ()]
+		public void BeginRun_Add_EndRun ()
+		{
+			int sum = 0;
+			ParallelWhile<int> loop = new ParallelWhile<int> (1);
+			loop.Add (2);
+			loop.BeginRun (delegate (int item) {
+				Interlocked.Add (ref sum, item);
+				if (item <= 4)
+					loop.Add (item + 4);
+			});
+			loop.Add (4);
+			loop.EndRun ();
+			Assert.AreEqual (20, sum, "#A1");
+		}
+		
+		[Test ()]
+		public void BeginRun_Cancel_Add_EndRun ()
+		{
+			int sum = 0;
+			ParallelWhile<int> loop = new ParallelWhile<int> (1);
+			loop.Add (2);
+			loop.Add (4);
+			loop.BeginRun (delegate (int item) {
+				Interlocked.Add (ref sum, item);
+				if (item == 2)
+					loop.Cancel ();
+			});
+			loop.Add (6);
+			loop.EndRun ();
+			Assert.AreEqual (2, sum, "#A1");
+		}
+	}
+}
Index: class/System.Threading.Parallel/System.Threading.Parallel/ParallelFor.cs
===================================================================
--- class/System.Threading.Parallel/System.Threading.Parallel/ParallelFor.cs	(revision 0)
+++ class/System.Threading.Parallel/System.Threading.Parallel/ParallelFor.cs	(revision 0)
@@ -0,0 +1,79 @@
+// 
+// System.Threading.Parallel.ParallelFor
+// 
+// Authors:
+//   Andreas Faerber  <andreas.faerber@web.de>
+// 
+// (C) 2007 Andreas Faerber
+// 
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+// 
+
+using System;
+
+namespace System.Threading.Parallel
+{
+	public sealed class ParallelFor : ParallelLoop<int>
+	{
+		private int count;
+		private int numThreads;
+		private bool cancel = false;
+		
+		public ParallelFor (int count) : this (count, 0)
+		{
+		}
+		
+		public ParallelFor (int count, int numThreads)
+		{
+			if (numThreads < 0)
+				throw new ArgumentException ("numThreads must be non-negative");
+			// count values <= 0 don't make sense but no ArgumentException is documented
+			
+			this.count = count;
+			this.numThreads = (numThreads == 0) ?
+#if false
+				ParallelEnvironment.MaxThreads
+#else
+				1
+#endif
+				: numThreads;
+		}
+		
+		public override void BeginRun (Action<int> action)
+		{
+			if (action == null)
+				throw new ArgumentNullException ("action");
+			
+			try {
+				for (int i = 0; (i < count) && !cancel; i++) {
+					action (i);
+				}
+			} catch (Exception ex) {
+				exception = ex;
+			}
+		}
+		
+		// This needs to be thread-safe
+		public override void Cancel ()
+		{
+			cancel = true;
+		}
+	}
+}
Index: class/System.Threading.Parallel/System.Threading.Parallel/ChangeLog
===================================================================
--- class/System.Threading.Parallel/System.Threading.Parallel/ChangeLog	(revision 0)
+++ class/System.Threading.Parallel/System.Threading.Parallel/ChangeLog	(revision 0)
@@ -0,0 +1,7 @@
+2007-12-23  Andreas Faerber  <andreas.faerber@web.de>
+
+	* ParallelFor.cs,
+	  ParallelForEach.cs,
+	  ParallelWhile.cs: New.
+	
+	Contributed unter MIT/X11 license.
Index: class/System.Threading.Parallel/System.Threading.Parallel/ParallelForEach.cs
===================================================================
--- class/System.Threading.Parallel/System.Threading.Parallel/ParallelForEach.cs	(revision 0)
+++ class/System.Threading.Parallel/System.Threading.Parallel/ParallelForEach.cs	(revision 0)
@@ -0,0 +1,89 @@
+// 
+// System.Threading.Parallel.ParallelForEach
+// 
+// Authors:
+//   Andreas Faerber  <andreas.faerber@web.de>
+// 
+// (C) 2007 Andreas Faerber
+// 
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+// 
+
+using System;
+using System.Collections.Generic;
+
+namespace System.Threading.Parallel
+{
+	public sealed class ParallelForEach<T> : ParallelLoop<T>
+	{
+		private IEnumerator<T> en;
+		private int numThreads;
+		private bool cancel = false;
+		
+		public ParallelForEach (IEnumerable<T> collection) : this (collection, 0)
+		{
+		}
+		
+		public ParallelForEach (IEnumerable<T> collection, int numThreads)
+		{
+			if (numThreads < 0)
+				throw new ArgumentException ("numThreads must be non-negative");
+			// XXX no ArgumentNullException is documented for collection==null
+			
+			if (collection != null)
+				en = collection.GetEnumerator ();
+			this.numThreads = (numThreads == 0) ?
+#if false
+				ParallelEnvironment.MaxThreads
+#else
+				1
+#endif
+				: numThreads;
+		}
+		
+		public override void BeginRun (Action<T> action)
+		{
+			if (action == null)
+				throw new ArgumentNullException ("action");
+			
+			try {
+				if (en == null)
+					return; // XXX or throw here?
+				while (en.MoveNext () && !cancel) {
+					action (en.Current);
+				}
+			} catch (Exception ex) {
+				exception = ex;
+			}
+		}
+		
+		public override void Cancel ()
+		{
+			cancel = true;
+		}
+		
+		internal protected override void Dispose (bool disposing)
+		{
+			if (en != null)
+				en.Dispose ();
+			base.Dispose (disposing);
+		}
+	}
+}
Index: class/System.Threading.Parallel/System.Threading.Parallel/ParallelWhile.cs
===================================================================
--- class/System.Threading.Parallel/System.Threading.Parallel/ParallelWhile.cs	(revision 0)
+++ class/System.Threading.Parallel/System.Threading.Parallel/ParallelWhile.cs	(revision 0)
@@ -0,0 +1,113 @@
+// 
+// System.Threading.Parallel.ParallelWhile
+// 
+// Authors:
+//   Andreas Faerber  <andreas.faerber@web.de>
+// 
+// (C) 2007 Andreas Faerber
+// 
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+// 
+
+using System;
+using System.Collections.Generic;
+
+namespace System.Threading.Parallel
+{
+	public sealed class ParallelWhile<T> : ParallelLoop<T>
+	{
+		private List<T> items;
+		private int numThreads;
+		private bool cancel = false;
+		private Action<T> action;
+		
+		public ParallelWhile () : this (0)
+		{
+		}
+		
+		public ParallelWhile (int numThreads)
+		{
+			// XXX not documented for ParallelWhile, but for ParallelFor and ParallelForEach
+			if (numThreads < 0)
+				throw new ArgumentException ("numThreads must be non-negative");
+			
+			items = new List<T> ();
+			this.numThreads = (numThreads == 0) ?
+#if false
+				ParallelEnvironment.MaxThreads
+#else
+				1
+#endif
+				: numThreads;
+		}
+		
+		// needs to be thread-safe
+		public void Add (T item)
+		{
+			lock (items) {
+				items.Add (item);
+			}
+		}
+		
+		private void DoRun ()
+		{
+			try {
+				Monitor.Enter (items);
+				while ((items.Count > 0) && !cancel) {
+					T item = items [0];
+					items.RemoveAt (0);
+					Monitor.Exit (items);
+					
+					action (item);
+					
+					Monitor.Enter (items);
+				}
+				Monitor.Exit (items);
+			} catch (Exception ex) {
+				exception = ex;
+			}
+		}
+		
+		public override void BeginRun (Action<T> action)
+		{
+			if (action == null)
+				throw new ArgumentNullException ("action");
+			
+			this.action = action;
+			DoRun ();
+		}
+		
+		// needs to be thread-safe
+		public override void Cancel ()
+		{
+			cancel = true;
+		}
+		
+		// "override" not in ECMA standard! using "new" would violate required behavior
+		public override void EndRun ()
+		{
+			if ((exception == null) && !cancel) {
+				// handle case that between BeginRun and EndRun Add was called
+				DoRun ();
+			}
+			base.EndRun ();
+		}
+	}
+}
Index: class/System.Threading.Parallel/System.Threading.Parallel/ParallelLoop.cs
===================================================================
--- class/System.Threading.Parallel/System.Threading.Parallel/ParallelLoop.cs	(revision 0)
+++ class/System.Threading.Parallel/System.Threading.Parallel/ParallelLoop.cs	(revision 0)
@@ -0,0 +1,64 @@
+// 
+// System.Threading.Parallel.ParallelLoop
+// 
+// Authors:
+//   Andreas Faerber  <andreas.faerber@web.de>
+// 
+// (C) 2007 Andreas Faerber
+// 
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+// 
+
+using System;
+
+namespace System.Threading.Parallel
+{
+	public abstract class ParallelLoop<T> : IDisposable
+	{
+		internal protected Exception exception = null;
+		
+		public abstract void BeginRun (Action<T> action);
+		
+		// This method needs to be thread-safe.
+		public abstract void Cancel ();
+		
+		public virtual void EndRun ()
+		{
+			if (exception != null)
+				throw exception; // ???
+		}
+		
+		public void Run (Action<T> action)
+		{
+			BeginRun (action);
+			EndRun ();
+		}
+		
+		void IDisposable.Dispose ()
+		{
+			Dispose (true);
+		}
+		
+		// XXX do we need "internal" here?
+		internal protected virtual void Dispose (bool disposing) 
+		{
+		}
+	}
+}
Index: class/System.Threading.Parallel/ChangeLog
===================================================================
--- class/System.Threading.Parallel/ChangeLog	(revision 0)
+++ class/System.Threading.Parallel/ChangeLog	(revision 0)
@@ -0,0 +1,5 @@
+2007-12-23  Andreas Faerber  <andreas.faerber@web.de>
+
+	* Makefile,
+	  System.Threading.Parallel.dll.sources,
+	  System.Threading.Parallel_test.dll.sources: New
Index: class/System.Threading.Parallel/Makefile
===================================================================
--- class/System.Threading.Parallel/Makefile	(revision 0)
+++ class/System.Threading.Parallel/Makefile	(working copy)
@@ -1,10 +1,9 @@
-thisdir = class/System.ServiceProcess
+thisdir = class/System.Threading.Parallel
 SUBDIRS = 
 include ../../build/rules.make
 
-LIBRARY = System.ServiceProcess.dll
-LIB_MCS_FLAGS = /r:System.dll /r:System.Configuration.Install.dll \
-	/r:System.Windows.Forms.dll /nowarn:0618
+LIBRARY = System.Threading.Parallel.dll
+LIB_MCS_FLAGS = /r:System.dll
 TEST_MCS_FLAGS = $(LIB_MCS_FLAGS)
 
 EXTRA_DISTFILES =
Index: class/System.Threading.Parallel/System.Threading.Parallel_test.dll.sources
===================================================================
--- class/System.Threading.Parallel/System.Threading.Parallel_test.dll.sources	(revision 0)
+++ class/System.Threading.Parallel/System.Threading.Parallel_test.dll.sources	(revision 0)
@@ -0,0 +1,3 @@
+System.Threading.Parallel/ParallelForTest.cs
+System.Threading.Parallel/ParallelForEachTest.cs
+System.Threading.Parallel/ParallelWhileTest.cs
Index: class/ChangeLog
===================================================================
--- class/ChangeLog	(revision 91819)
+++ class/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2007-12-23  Andreas Faerber  <andreas.faerber@web.de>
+
+	* Makefile (net_2_0_dirs): Added System.Threading.Parallel.
+
 2007-12-19  Jb Evain  <jbevain@novell.com>
 
 	* Makefile: include MicrosoftAjaxLibrary/License.htm
