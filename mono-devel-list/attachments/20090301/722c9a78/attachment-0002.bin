From c7413570ae2e2a0218b17146cf4eb8af47a3642c Mon Sep 17 00:00:00 2001
From: Andreas <andreas@blacklight.(none)>
Date: Sun, 1 Mar 2009 10:19:22 +0100
Subject: [PATCH] Use new definition of MonoIO.CopyFile to throw exceptions for errors that were returned - error checking is much more atomic.

---
 class/corlib/System.IO/File.cs        |   38 +++++++++++++++++++-------------
 class/corlib/System.IO/MonoIO.cs      |    2 +-
 class/corlib/System.IO/MonoIOError.cs |   17 +++++++++++++-
 3 files changed, 39 insertions(+), 18 deletions(-)

diff --git a/class/corlib/System.IO/File.cs b/class/corlib/System.IO/File.cs
index 2e7ca74..addeb58 100644
--- a/class/corlib/System.IO/File.cs
+++ b/class/corlib/System.IO/File.cs
@@ -99,28 +99,34 @@ namespace System.IO
 			if (destFileName.Length == 0)
 				throw new ArgumentException ("An empty file name is not valid.", "destFileName");
 			if (destFileName.Trim ().Length == 0 || destFileName.IndexOfAny (Path.InvalidPathChars) != -1)
-				throw new ArgumentException ("The file name is not valid.");
-
-			if (!MonoIO.Exists (sourceFileName, out error))
-				throw new FileNotFoundException (Locale.GetText ("{0} does not exist", sourceFileName), sourceFileName);
-			if ((GetAttributes (sourceFileName) & FileAttributes.Directory) == FileAttributes.Directory)
-				throw new ArgumentException (Locale.GetText ("{0} is a directory", sourceFileName));
-
-			if (MonoIO.Exists (destFileName, out error)) {
-				if ((GetAttributes (destFileName) & FileAttributes.Directory) == FileAttributes.Directory)
-					throw new ArgumentException (Locale.GetText ("{0} is a directory", destFileName));
-				if (!overwrite)
-					throw new IOException (Locale.GetText ("{0} already exists", destFileName));
-			}
+				throw new ArgumentException ("The file name is not valid.");				
 
 			string DirName = Path.GetDirectoryName (destFileName);
 			if (DirName != String.Empty && !Directory.Exists (DirName))
 				throw new DirectoryNotFoundException (Locale.GetText ("Destination directory not found: {0}",DirName));
 
-			if (!MonoIO.CopyFile (sourceFileName, destFileName, overwrite, out error)) {
-				string p = Locale.GetText ("{0}\" or \"{1}", sourceFileName, destFileName);
-				throw MonoIO.GetException (p, error);
+			MonoIODistinctError derror = (MonoIODistinctError)MonoIO.CopyFile (sourceFileName, destFileName, overwrite, out error);
+
+			switch(derror)
+			{
+				case MonoIODistinctError.SUCCESS:
+					return;
+				//start map for different exception messages
+				case MonoIODistinctError.SOURCE_NOT_FOUND:
+					throw new FileNotFoundException (Locale.GetText ("{0} does not exist", sourceFileName), sourceFileName);		
+				case MonoIODistinctError.SOURCE_IS_DIRECTORY:
+					throw new ArgumentException (Locale.GetText ("{0} is a directory", sourceFileName));
+				case MonoIODistinctError.DEST_IS_DIRECTORY:
+					throw new ArgumentException (Locale.GetText ("{0} is a directory", destFileName));
+				case MonoIODistinctError.DEST_EXIST:
+					if(!overwrite)
+						throw new IOException (Locale.GetText ("{0} already exists", destFileName));
+					break;
+				//end map for different exception messages
 			}
+			string p = Locale.GetText ("{0}\" or \"{1}", sourceFileName, destFileName);
+			
+			throw MonoIO.GetException (p, error);
 		}
 
 		public static FileStream Create (string path)
diff --git a/class/corlib/System.IO/MonoIO.cs b/class/corlib/System.IO/MonoIO.cs
index 84a78c5..043f9f4 100644
--- a/class/corlib/System.IO/MonoIO.cs
+++ b/class/corlib/System.IO/MonoIO.cs
@@ -186,7 +186,7 @@ namespace System.IO
 						    out MonoIOError error);
 
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
-		public extern static bool CopyFile (string path, string dest,
+		public extern static uint CopyFile (string path, string dest,
 						    bool overwrite,
 						    out MonoIOError error);
 
diff --git a/class/corlib/System.IO/MonoIOError.cs b/class/corlib/System.IO/MonoIOError.cs
index 18db7f9..ea00fd1 100644
--- a/class/corlib/System.IO/MonoIOError.cs
+++ b/class/corlib/System.IO/MonoIOError.cs
@@ -33,7 +33,22 @@
 using System;
 
 namespace System.IO
-{
+{
+	internal enum MonoIODistinctError: uint {
+		SUCCESS                  =  0, 
+		SOURCE_ERROR             =  1,
+		DEST_ERROR               =  2,
+		SOURCE_INVALID_NAME      =  3,
+		SOURCE_INVALID_PARAMETER =  4,
+		SOURCE_IS_DIRECTORY      =  5,
+		SOURCE_NOT_FOUND         =  6,
+		DEST_INVALID_NAME        =  7,
+		DEST_INVALID_PARAMETER   =  8,
+		DEST_IS_DIRECTORY        =  9,
+		DEST_NOT_FOUND           = 10,
+		DEST_EXIST               = 11
+	}
+
 	internal enum MonoIOError: int {
 		ERROR_SUCCESS = 0,
 	/*	ERROR_INVALID_FUNCTION = 1,
-- 
1.6.0.4
