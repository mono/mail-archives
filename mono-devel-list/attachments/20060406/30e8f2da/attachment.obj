Index: class/System.Web.Services/Test/System.Web.Services.Description/test.wsdl
===================================================================
--- class/System.Web.Services/Test/System.Web.Services.Description/test.wsdl	(revision 0)
+++ class/System.Web.Services/Test/System.Web.Services.Description/test.wsdl	(revision 0)
@@ -0,0 +1,104 @@
+<definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
+      xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
+      xmlns:s="http://www.w3.org/2001/XMLSchema"
+      xmlns:http="http://schemas.xmlsoap.org/wsdl/http/"
+      xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/"
+      xmlns:tm="http://microsoft.com/wsdl/mime/textMatching/" xmlns:s0="http://tempuri.org/"
+      name="HelloService" targetNamespace="http://tempuri.org/"
+      xmlns="http://schemas.xmlsoap.org/wsdl/" sdAtt="sdVal">
+  <types>
+    <xs:schema elementFormDefault="qualified" targetNamespace="http://tempuri.org/"
+          xmlns:xs="http://www.w3.org/2001/XMLSchema">
+      <xs:element name="HelloWorld">
+        <xs:complexType/>
+      </xs:element>
+      <xs:element name="HelloWorldResponse">
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element minOccurs="0" maxOccurs="1" name="HelloWorldResult" type="xs:string"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="string" type="xs:string"/>
+    </xs:schema>
+  </types>
+  <message name="HelloWorldSoapIn" msgAtt="msgVal">
+    <part name="parameters" element="s0:HelloWorld" partAtt="partVal"/>
+  </message>
+  <message name="HelloWorldSoapOut">
+    <part name="parameters" element="s0:HelloWorldResponse"/>
+  </message>
+  <message name="HelloWorldHttpGetIn"/>
+  <message name="HelloWorldHttpGetOut">
+    <part name="Body" element="s0:string"/>
+  </message>
+  <message name="HelloWorldHttpPostIn"/>
+  <message name="HelloWorldHttpPostOut">
+    <part name="Body" element="s0:string"/>
+  </message>
+  <portType name="HelloServiceSoap" ptAtt="ptVal">
+    <operation name="HelloWorld" opAtt="opVal">
+      <input message="s0:HelloWorldSoapIn" opmsgAtt="opmsgVal"/>
+      <output message="s0:HelloWorldSoapOut"/>
+    </operation>
+  </portType>
+  <portType name="HelloServiceHttpGet">
+    <operation name="HelloWorld">
+      <input message="s0:HelloWorldHttpGetIn"/>
+      <output message="s0:HelloWorldHttpGetOut"/>
+    </operation>
+  </portType>
+  <portType name="HelloServiceHttpPost">
+    <operation name="HelloWorld">
+      <input message="s0:HelloWorldHttpPostIn"/>
+      <output message="s0:HelloWorldHttpPostOut"/>
+    </operation>
+  </portType>
+  <binding name="HelloServiceSoap" type="s0:HelloServiceSoap" binAtt="binVal">
+    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
+    <operation name="HelloWorld">
+      <soap:operation soapAction="http://tempuri.org/HelloWorld" style="document"/>
+      <input>
+        <soap:body use="literal"/>
+      </input>
+      <output>
+        <soap:body use="literal"/>
+      </output>
+    </operation>
+  </binding>
+  <binding name="HelloServiceHttpGet" type="s0:HelloServiceHttpGet">
+    <http:binding verb="GET"/>
+    <operation name="HelloWorld">
+      <http:operation location="/HelloWorld"/>
+      <input>
+        <http:urlEncoded/>
+      </input>
+      <output>
+        <mime:mimeXml part="Body"/>
+      </output>
+    </operation>
+  </binding>
+  <binding name="HelloServiceHttpPost" type="s0:HelloServiceHttpPost">
+    <http:binding verb="POST"/>
+    <operation name="HelloWorld">
+      <http:operation location="/HelloWorld"/>
+      <input>
+        <mime:content type="application/x-www-form-urlencoded"/>
+      </input>
+      <output>
+        <mime:mimeXml part="Body"/>
+      </output>
+    </operation>
+  </binding>
+  <service name="HelloService" svcAtt="svcVal">
+    <port name="HelloServiceSoap" binding="s0:HelloServiceSoap" portAtt="portVal">
+      <soap:address location="http://192.168.0.128:8080/simple.asmx"/>
+    </port>
+    <port name="HelloServiceHttpGet" binding="s0:HelloServiceHttpGet">
+      <http:address location="http://192.168.0.128:8080/simple.asmx"/>
+    </port>
+    <port name="HelloServiceHttpPost" binding="s0:HelloServiceHttpPost">
+      <http:address location="http://192.168.0.128:8080/simple.asmx"/>
+    </port>
+  </service>
+</definitions>
Index: class/System.Web.Services/Test/System.Web.Services.Description/ChangeLog
===================================================================
--- class/System.Web.Services/Test/System.Web.Services.Description/ChangeLog	(revision 59069)
+++ class/System.Web.Services/Test/System.Web.Services.Description/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2006-04-06  Ankit Jain  <jankit@novell.com>
+
+	* ServiceDescriptionTest.cs (ExtensibleAttributes): New test.
+
 2006-02-04  Gert Driesen  <drieseng@users.sourceforge.net>
 
 	* ServiceDescriptionReflectorTest.cs: Use only one include as otherwise
Index: class/System.Web.Services/Test/System.Web.Services.Description/ServiceDescriptionTest.cs
===================================================================
--- class/System.Web.Services/Test/System.Web.Services.Description/ServiceDescriptionTest.cs	(revision 59069)
+++ class/System.Web.Services/Test/System.Web.Services.Description/ServiceDescriptionTest.cs	(working copy)
@@ -12,6 +12,7 @@
 using System;
 using System.IO;
 using System.Web.Services.Description;
+using System.Xml;
 using System.Xml.Serialization;
 
 namespace MonoTests.System.Web.Services.Description
@@ -26,5 +27,39 @@
 			Assert.IsNull (sd.Name);
 			sd.Write (TextWriter.Null);
 		}
+
+#if NET_2_0
+		[Test]
+		public void ExtensibleAttributes ()
+		{
+		    FileStream fs = new FileStream("Test/System.Web.Services.Description/test.wsdl", FileMode.Open);
+		    XmlTextReader xtr = new XmlTextReader(fs);
+
+		    ServiceDescription sd = ServiceDescription.Read(xtr);
+		    CheckEA (sd, "sdAtt", "sdVal");
+		    CheckEA (sd.Messages [0], "msgAtt", "msgVal");
+		    CheckEA (sd.Messages [0].Parts [0], "partAtt", "partVal");
+
+		    CheckEA (sd.PortTypes [0], "ptAtt", "ptVal");
+		    CheckEA (sd.PortTypes [0].Operations [0], "opAtt", "opVal");
+		    CheckEA (sd.PortTypes [0].Operations [0].Messages[0], "opmsgAtt", "opmsgVal");
+
+		    CheckEA (sd.Services [0], "svcAtt", "svcVal");
+		    CheckEA (sd.Services [0].Ports [0], "portAtt", "portVal");
+
+		    fs.Close ();
+		}
+
+		void CheckEA (DocumentableItem di, string att, string val)
+		{
+			Assert.IsNotNull (di.ExtensibleAttributes);
+			
+			for (int i = 0; i < di.ExtensibleAttributes.Length; i ++) {
+				Assert.AreEqual (att, di.ExtensibleAttributes [i].Name);
+				Assert.AreEqual (val, di.ExtensibleAttributes [i].Value);
+			}
+		}
+#endif
+
 	}
 }
Index: class/System.Web.Services/System.Web.Services.Description/ChangeLog
===================================================================
--- class/System.Web.Services/System.Web.Services.Description/ChangeLog	(revision 59069)
+++ class/System.Web.Services/System.Web.Services.Description/ChangeLog	(working copy)
@@ -1,3 +1,13 @@
+2006-04-06  Ankit Jain  <jankit@novell.com>
+
+	* DocumentableItem.cs (ExtensibleAttributes): Add for NET_2_0 profile.
+	* ServiceDescriptionSerializerBase.cs (ProcessUnknownAttribute): New.  Add any
+	unknown attribute to extensibleAttributes list.
+	(SetExtensibleAttributes): Set DocumentableItem.ExtensibleAttributes
+	accordingly.
+	(ReadObject_*): Use ProcessUnknownAttribute and SetExtensibleAttributes
+	to handle unknown attributes.
+
 2006-03-12  VLadimir Krasnov  <vladimirk@mainsoft.com>
 
 	* ServiceDescription.cs: removed TARGET_JVM directives from
Index: class/System.Web.Services/System.Web.Services.Description/ServiceDescriptionSerializerBase.cs
===================================================================
--- class/System.Web.Services/System.Web.Services.Description/ServiceDescriptionSerializerBase.cs	(revision 59069)
+++ class/System.Web.Services/System.Web.Services.Description/ServiceDescriptionSerializerBase.cs	(working copy)
@@ -25,11 +25,18 @@
 using System.Text;
 using System.Collections;
 using System.Globalization;
+#if NET_2_0
+using System.Collections.Generic;
+#endif
 
 namespace System.Web.Services.Description
 {
 	internal class ServiceDescriptionReaderBase : XmlSerializationReader
 	{
+#if NET_2_0
+		private List<XmlAttribute> extensibleAttributes;
+#endif
+
 		public System.Web.Services.Description.ServiceDescription ReadTree ()
 		{
 			Reader.MoveToContent();
@@ -66,10 +73,12 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
+
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -176,10 +185,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -251,10 +261,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -329,10 +340,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -394,10 +406,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -466,10 +479,11 @@
 				if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -541,10 +555,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -616,10 +631,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -702,10 +718,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -773,10 +790,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -849,10 +867,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -937,10 +956,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -1002,10 +1022,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -1067,10 +1088,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -1135,10 +1157,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -1203,10 +1226,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -1271,10 +1295,11 @@
 				else if (IsXmlnsAttribute (Reader.Name)) {
 				}
 				else {
-					UnknownNode (ob);
+					ProcessUnknownAttribute (ob);
 				}
 			}
 
+			SetExtensibleAttributes (ob);
 			Reader.MoveToElement();
 			if (Reader.IsEmptyElement) {
 				Reader.Skip ();
@@ -1309,6 +1334,28 @@
 			return ob;
 		}
 
+		private void ProcessUnknownAttribute (object ob)
+		{
+#if NET_2_0
+			if (extensibleAttributes == null)
+				extensibleAttributes = new List<XmlAttribute> ();
+
+			extensibleAttributes.Add ((XmlAttribute) ReadXmlNode (false));
+#else
+ 			UnknownNode (ob);
+#endif
+		}
+
+		private void SetExtensibleAttributes (DocumentableItem di)
+		{
+#if NET_2_0
+			if (extensibleAttributes != null && extensibleAttributes.Count > 0) {
+				di.ExtensibleAttributes = extensibleAttributes.ToArray ();
+				extensibleAttributes.Clear ();
+			}
+#endif
+		}
+
 		protected override void InitCallbacks ()
 		{
 		}
Index: class/System.Web.Services/System.Web.Services.Description/DocumentableItem.cs
===================================================================
--- class/System.Web.Services/System.Web.Services.Description/DocumentableItem.cs	(revision 59069)
+++ class/System.Web.Services/System.Web.Services.Description/DocumentableItem.cs	(working copy)
@@ -40,6 +40,10 @@
 
 		XmlElement docElement;
 
+#if NET_2_0
+		XmlAttribute [] extAttributes;
+#endif
+
 		#endregion // Fields
 
 		#region Constructors
@@ -76,7 +80,15 @@
 			get { return docElement; }
 			set { docElement = value; }
 		}
-	
+
+#if NET_2_0
+		[XmlAnyAttribute]
+		public XmlAttribute [] ExtensibleAttributes {
+			get { return extAttributes; }
+			set { extAttributes = value; }
+		}
+#endif
+
 		#endregion // Properties
 	}
 }
