commit 2676a3dcafd66154c829d93a28003e3ede4bff26
Author: Stephane Delcroix <stephane@delcroix.org>
Date:   Thu Nov 19 15:08:15 2009 +0100

    2009-11-19  Stephane Delcroix  <stephane@delcroix.org>
    
    	* Uri.cs (ParseNoExceptions): don't try to find a scheme if the uri is a
    	UnixFileName or WindowsUNC.

diff --git a/class/System/System/ChangeLog b/class/System/System/ChangeLog
index 51e6322..45447c1 100644
--- a/class/System/System/ChangeLog
+++ b/class/System/System/ChangeLog
@@ -1,3 +1,8 @@
+2009-11-19  Stephane Delcroix  <stephane@delcroix.org>
+
+	* Uri.cs (ParseNoExceptions): don't try to find a scheme if the uri is a
+	UnixFileName or WindowsUNC.
+
 2009-11-02  Miguel de Icaza  <miguel@novell.com>
 
 	* UriFormatException.cs: .NET 4.0 API
diff --git a/class/System/System/Uri.cs b/class/System/System/Uri.cs
index b8d740c..3ccd530 100644
--- a/class/System/System/Uri.cs
+++ b/class/System/System/Uri.cs
@@ -13,7 +13,8 @@
 // (C) 2001 Garrett Rooney
 // (C) 2003 Ian MacLean
 // (C) 2003 Ben Maurer
-// Copyright (C) 2003,2005 Novell, Inc (http://www.novell.com)
+// Copyright (C) 2003,2009 Novell, Inc (http://www.novell.com)
+// Copyright (c) 2009 Stephane Delcroix
 //
 // Permission is hereby granted, free of charge, to any person obtaining
 // a copy of this software and associated documentation files (the
@@ -1374,27 +1375,30 @@ namespace System {
 
 			// 1, 2
 			// Identify Windows path, unix path, or standard URI.
+			if (uriString [0] == '/' && Path.DirectorySeparatorChar == '/'){
+				//Unix Path
+				ParseAsUnixAbsoluteFilePath (uriString);
+#if NET_2_1 && !MONOTOUCH
+				isAbsoluteUri = false;
+#else
+				if (kind == UriKind.Relative)
+					isAbsoluteUri = false;
+#endif
+				return null;
+			} else if (uriString.Length >= 2 && uriString [0] == '\\' && uriString [1] == '\\') {
+				//Windows UNC
+				ParseAsWindowsUNC (uriString);
+				return null;
+			}
+
+
 			pos = uriString.IndexOf (':');
 			if (pos == 0) {
 				return "Invalid URI: The format of the URI could not be determined.";
 			} else if (pos < 0) {
-				// It must be Unix file path or Windows UNC
-				if (uriString [0] == '/' && Path.DirectorySeparatorChar == '/'){
-					ParseAsUnixAbsoluteFilePath (uriString);
-#if NET_2_1 && !MONOTOUCH
-					isAbsoluteUri = false;
-#else
-					if (kind == UriKind.Relative)
-						isAbsoluteUri = false;
-#endif
-					
-				} else if (uriString.Length >= 2 && uriString [0] == '\\' && uriString [1] == '\\')
-					ParseAsWindowsUNC (uriString);
-				else {
-					/* Relative path */
-					isAbsoluteUri = false;
-					path = uriString;
-				}
+				/* Relative path */
+				isAbsoluteUri = false;
+				path = uriString;
 				return null;
 			} else if (pos == 1) {
 				if (!IsAlpha (uriString [0]))
diff --git a/class/System/Test/System/UriTest.cs b/class/System/Test/System/UriTest.cs
index beae280..2c5de02 100644
--- a/class/System/Test/System/UriTest.cs
+++ b/class/System/Test/System/UriTest.cs
@@ -1814,6 +1814,19 @@ namespace MonoTests.System
 			Uri fileUri = new Uri (fullpath);
 		}
 
+		[Test]
+		public void UnixAbsoluteFilePath_WithSpecialChars1 ()
+		{
+			Uri unixuri = new Uri ("/home/user/a@b");
+			Assert.AreEqual ("file", unixuri.Scheme, "UnixAbsoluteFilePath_WithSpecialChars #1");
+		}
+
+		[Test]
+		public void UnixAbsoluteFilePath_WithSpecialChars2 ()
+		{
+			Uri unixuri = new Uri ("/home/user/a:b");
+			Assert.AreEqual ("file", unixuri.Scheme, "UnixAbsoluteFilePath_WithSpecialChars #2");
+		}
 
 		public class DerivedUri : Uri
 		{
