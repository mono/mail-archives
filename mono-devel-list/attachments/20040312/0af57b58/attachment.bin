Index: inssel.brg
===================================================================
RCS file: /cvs/public/mono/mono/mini/inssel.brg,v
retrieving revision 1.35
diff -u -r1.35 inssel.brg
--- inssel.brg	5 Mar 2004 03:46:51 -0000	1.35
+++ inssel.brg	12 Mar 2004 22:48:48 -0000
@@ -1964,24 +1964,35 @@
 void 
 mini_emit_isninst_cast (MonoCompile *s, int klass_reg, MonoClass *klass, MonoInst *false_target, MonoInst *true_target)
 {
-	int idepth_reg = mono_regstate_next_int (s->rs);
-	int stypes_reg = mono_regstate_next_int (s->rs);
-	int stype = mono_regstate_next_int (s->rs);
-
-	if (klass->idepth > MONO_DEFAULT_SUPERTABLE_SIZE) {
-		MONO_EMIT_NEW_LOAD_MEMBASE (s, idepth_reg, klass_reg, G_STRUCT_OFFSET (MonoClass, idepth));
-		MONO_EMIT_NEW_BIALU_IMM (s, OP_COMPARE_IMM, -1, idepth_reg, klass->idepth);
-		MONO_EMIT_NEW_BRANCH_LABEL (s, CEE_BLT_UN, false_target);
-	}
-	MONO_EMIT_NEW_LOAD_MEMBASE (s, stypes_reg, klass_reg, G_STRUCT_OFFSET (MonoClass, supertypes));
-	MONO_EMIT_NEW_LOAD_MEMBASE (s, stype, stypes_reg, ((klass->idepth - 1) * SIZEOF_VOID_P));
-	if (mono_compile_aot) {
-		int const_reg = mono_regstate_next_int (s->rs);
-		MONO_EMIT_NEW_CLASSCONST (s, const_reg, klass);
-		MONO_EMIT_NEW_BIALU (s, OP_COMPARE, -1, stype, const_reg);
+	if (klass->flags & TYPE_ATTRIBUTE_SEALED) {
+		if (mono_compile_aot) {
+			int const_reg = mono_regstate_next_int (s->rs);
+			MONO_EMIT_NEW_CLASSCONST (s, const_reg, klass);
+			MONO_EMIT_NEW_BIALU (s, OP_COMPARE, -1, klass_reg, const_reg);
+		} else {
+			MONO_EMIT_NEW_BIALU_IMM (s, OP_COMPARE_IMM, -1, klass_reg, klass);
+		}
 	} else {
-		MONO_EMIT_NEW_BIALU_IMM (s, OP_COMPARE_IMM, -1, stype, klass);
+		int idepth_reg = mono_regstate_next_int (s->rs);
+		int stypes_reg = mono_regstate_next_int (s->rs);
+		int stype = mono_regstate_next_int (s->rs);
+		
+		if (klass->idepth > MONO_DEFAULT_SUPERTABLE_SIZE) {
+			MONO_EMIT_NEW_LOAD_MEMBASE (s, idepth_reg, klass_reg, G_STRUCT_OFFSET (MonoClass, idepth));
+			MONO_EMIT_NEW_BIALU_IMM (s, OP_COMPARE_IMM, -1, idepth_reg, klass->idepth);
+			MONO_EMIT_NEW_BRANCH_LABEL (s, CEE_BLT_UN, false_target);
+		}
+		MONO_EMIT_NEW_LOAD_MEMBASE (s, stypes_reg, klass_reg, G_STRUCT_OFFSET (MonoClass, supertypes));
+		MONO_EMIT_NEW_LOAD_MEMBASE (s, stype, stypes_reg, ((klass->idepth - 1) * SIZEOF_VOID_P));
+		if (mono_compile_aot) {
+			int const_reg = mono_regstate_next_int (s->rs);
+			MONO_EMIT_NEW_CLASSCONST (s, const_reg, klass);
+			MONO_EMIT_NEW_BIALU (s, OP_COMPARE, -1, stype, const_reg);
+		} else {
+			MONO_EMIT_NEW_BIALU_IMM (s, OP_COMPARE_IMM, -1, stype, klass);
+		}
 	}
+	
 	MONO_EMIT_NEW_BRANCH_LABEL (s, CEE_BEQ, true_target);
 }
 
@@ -2016,23 +2027,33 @@
 void 
 mini_emit_castclass (MonoCompile *s, int klass_reg, MonoClass *klass)
 {
-	int idepth_reg = mono_regstate_next_int (s->rs);
-	int stypes_reg = mono_regstate_next_int (s->rs);
-	int stype = mono_regstate_next_int (s->rs);
-
-	if (klass->idepth > MONO_DEFAULT_SUPERTABLE_SIZE) {
-		MONO_EMIT_NEW_LOAD_MEMBASE (s, idepth_reg, klass_reg, G_STRUCT_OFFSET (MonoClass, idepth));
-		MONO_EMIT_NEW_BIALU_IMM (s, OP_COMPARE_IMM, -1, idepth_reg, klass->idepth);
-		MONO_EMIT_NEW_COND_EXC (s, LT_UN, "InvalidCastException");
-	}
-	MONO_EMIT_NEW_LOAD_MEMBASE (s, stypes_reg, klass_reg, G_STRUCT_OFFSET (MonoClass, supertypes));
-	MONO_EMIT_NEW_LOAD_MEMBASE (s, stype, stypes_reg, ((klass->idepth - 1) * SIZEOF_VOID_P));
-	if (mono_compile_aot) {
-		int const_reg = mono_regstate_next_int (s->rs);
-		MONO_EMIT_NEW_CLASSCONST (s, const_reg, klass);
-		MONO_EMIT_NEW_BIALU (s, OP_COMPARE, -1, stype, const_reg);
+	if (klass->flags & TYPE_ATTRIBUTE_SEALED) {
+		if (mono_compile_aot) {
+			int const_reg = mono_regstate_next_int (s->rs);
+			MONO_EMIT_NEW_CLASSCONST (s, const_reg, klass);
+			MONO_EMIT_NEW_BIALU (s, OP_COMPARE, -1, klass_reg, const_reg);
+		} else {
+			MONO_EMIT_NEW_BIALU_IMM (s, OP_COMPARE_IMM, -1, klass_reg, klass);
+		}
 	} else {
-		MONO_EMIT_NEW_BIALU_IMM (s, OP_COMPARE_IMM, -1, stype, klass);
+		int idepth_reg = mono_regstate_next_int (s->rs);
+		int stypes_reg = mono_regstate_next_int (s->rs);
+		int stype = mono_regstate_next_int (s->rs);
+		
+		if (klass->idepth > MONO_DEFAULT_SUPERTABLE_SIZE) {
+			MONO_EMIT_NEW_LOAD_MEMBASE (s, idepth_reg, klass_reg, G_STRUCT_OFFSET (MonoClass, idepth));
+			MONO_EMIT_NEW_BIALU_IMM (s, OP_COMPARE_IMM, -1, idepth_reg, klass->idepth);
+			MONO_EMIT_NEW_COND_EXC (s, LT_UN, "InvalidCastException");
+		}
+		MONO_EMIT_NEW_LOAD_MEMBASE (s, stypes_reg, klass_reg, G_STRUCT_OFFSET (MonoClass, supertypes));
+		MONO_EMIT_NEW_LOAD_MEMBASE (s, stype, stypes_reg, ((klass->idepth - 1) * SIZEOF_VOID_P));
+		if (mono_compile_aot) {
+			int const_reg = mono_regstate_next_int (s->rs);
+			MONO_EMIT_NEW_CLASSCONST (s, const_reg, klass);
+			MONO_EMIT_NEW_BIALU (s, OP_COMPARE, -1, stype, const_reg);
+		} else {
+			MONO_EMIT_NEW_BIALU_IMM (s, OP_COMPARE_IMM, -1, stype, klass);
+		}
 	}
 	MONO_EMIT_NEW_COND_EXC (s, NE_UN, "InvalidCastException");
 }
