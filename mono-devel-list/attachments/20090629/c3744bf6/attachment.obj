Index: mono/io-layer/ChangeLog
===================================================================
--- mono/io-layer/ChangeLog	(revision 137054)
+++ mono/io-layer/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2009-06-29 Sami Nopanen <snopanen@gmail.com>
+
+	* process-private.h: add support for process ids larger than 15 bits.
+
+        * processes.c: Port EnumProcesses, OpenProcess and get_process_name_from_proc
+          to MACOSX.
+
 2009-06-25 Gonzalo Paniagua Javier <gonzalo@novell.com>
 
 	* sockets.c: add the error number to the message so we can figure out
Index: mono/io-layer/processes.c
===================================================================
--- mono/io-layer/processes.c	(revision 137054)
+++ mono/io-layer/processes.c	(working copy)
@@ -26,6 +26,11 @@
 #include <sys/param.h>
 #include <ctype.h>
 
+#ifdef PLATFORM_MACOSX
+#include <stdlib.h>
+#include <sys/sysctl.h>
+#endif
+
 #ifdef HAVE_SYS_MKDEV_H
 #include <sys/mkdev.h>
 #endif
@@ -1472,9 +1477,53 @@
 }
 #endif /* UNUSED_CODE */
 
+#ifdef PLATFORM_MACOSX
 gboolean EnumProcesses (guint32 *pids, guint32 len, guint32 *needed)
 {
 	GArray *processes = g_array_new (FALSE, FALSE, sizeof(pid_t));
+	guint32 fit, i, j, fullLen;
+	int mib[3] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL };
+	size_t bufSize;
+	struct kinfo_proc* bsdProcInfoStruct;
+	
+	mono_once (&process_current_once, process_set_current);
+
+	for(;;) {
+		if(sysctl(mib, 3, NULL, &bufSize, NULL, 0) != 0)
+			return(FALSE);
+		bsdProcInfoStruct = (struct kinfo_proc *) malloc(bufSize);
+		if(bsdProcInfoStruct == NULL)
+			return(FALSE);
+		if(sysctl(mib, 3, bsdProcInfoStruct, &bufSize, NULL, 0) == 0)
+			break;
+		free(bsdProcInfoStruct);
+	}
+
+	for(i = 0; i < (bufSize / sizeof(struct kinfo_proc)); i++) {
+		// 0 = kernel_proc
+		if(bsdProcInfoStruct[i].kp_proc.p_pid != 0) {
+			g_array_append_val (processes, bsdProcInfoStruct[i].kp_proc.p_pid);
+		}
+	}
+
+	free(bsdProcInfoStruct);
+
+	fit=len/sizeof(guint32);
+        fullLen = processes->len;
+	for (i = 0, j = 0; j < fit && i < fullLen; i++) {
+		pids[j++] = g_array_index (processes, pid_t, i);
+	}
+
+	g_array_free (processes, TRUE);
+
+	*needed = fullLen * sizeof(guint32);
+
+	return((fullLen == j) ? TRUE : FALSE);
+}
+#else
+gboolean EnumProcesses (guint32 *pids, guint32 len, guint32 *needed)
+{
+	GArray *processes = g_array_new (FALSE, FALSE, sizeof(pid_t));
 	guint32 fit, i, j;
 	DIR *dir;
 	struct dirent *entry;
@@ -1511,6 +1560,7 @@
 	
 	return(TRUE);
 }
+#endif
 
 static gboolean process_open_compare (gpointer handle, gpointer user_data)
 {
@@ -1554,8 +1604,20 @@
 				      process_open_compare,
 				      GUINT_TO_POINTER (pid), NULL, TRUE);
 	if (handle == 0) {
+#ifdef PLATFORM_MACOSX
+		int mib[4] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, pid };
+		struct kinfo_proc kp;
+		size_t len = sizeof(kp);
+
+		if (sysctl(mib, 4, &kp, &len, NULL, 0) == -1) {
+			SetLastError (ERROR_GEN_FAILURE);
+			return(NULL);
+                }
+		if (len > 0) {
+#else
 		gchar *dir = g_strdup_printf ("/proc/%d", pid);
 		if (!access (dir, F_OK)) {
+#endif
 			/* Return a pseudo handle for processes we
 			 * don't have handles for
 			 */
@@ -1995,8 +2057,26 @@
 	return(TRUE);
 }
 
+#ifdef PLATFORM_MACOSX
 static gchar *get_process_name_from_proc (pid_t pid)
 {
+	int mib[4] = { CTL_KERN, KERN_PROC, KERN_PROC_PID, pid };
+	size_t len = 4;
+	struct kinfo_proc kp;
+	gchar *ret = NULL;
+
+	len = sizeof(kp);
+	if(sysctl(mib, 4, &kp, &len, NULL, 0) == -1) {
+		SetLastError (ERROR_GEN_FAILURE);
+		return NULL;
+	}
+
+        ret = g_strdup(kp.kp_proc.p_comm);
+	return ret;
+}
+#else
+static gchar *get_process_name_from_proc (pid_t pid)
+{
 	gchar *filename = NULL;
 	gchar *ret = NULL;
 	gchar buf[256];
@@ -2054,6 +2134,7 @@
 
 	return(NULL);
 }
+#endif
 
 static guint32 get_module_name (gpointer process, gpointer module,
 				gunichar2 *basename, guint32 size,
Index: mono/io-layer/process-private.h
===================================================================
--- mono/io-layer/process-private.h	(revision 137054)
+++ mono/io-layer/process-private.h	(working copy)
@@ -17,8 +17,7 @@
 #define _WAPI_PROCESS_CURRENT (gpointer)0xFFFFFFFF
 
 /* This marks a system process that we don't have a handle on */
-/* FIXME: cope with pids > 16bit */
-#define _WAPI_PROCESS_UNHANDLED_PID_MASK 0x7FFF
+#define _WAPI_PROCESS_UNHANDLED_PID_MASK ((sizeof(pid_t) == sizeof(long)) ? 0x7FFFFFFF : 0x7FFF)
 #define _WAPI_PROCESS_UNHANDLED (-1 & ~_WAPI_PROCESS_UNHANDLED_PID_MASK)
 
 extern gpointer _wapi_process_duplicate (void);