Index: System.Web.UI/AttributeCollection.cs
===================================================================
--- System.Web.UI/AttributeCollection.cs	(revision 74056)
+++ System.Web.UI/AttributeCollection.cs	(working copy)
@@ -40,6 +40,7 @@
 	{
 		private StateBag bag;
 		private CssStyleCollection styleCollection;
+		internal const string StyleAttribute = "style";
 		
 		public AttributeCollection (StateBag bag)
 		{
@@ -72,7 +73,7 @@
 
 		public void Add (string key, string value)
 		{
-			if (0 == String.Compare (key, "style", true, CultureInfo.InvariantCulture)) {
+			if (0 == String.Compare (key, StyleAttribute, true, CultureInfo.InvariantCulture)) {
 				CssStyle.Value = value;
 				return;
 			}
@@ -95,7 +96,7 @@
 
 		public void Remove (string key)
 		{
-			if (0 == String.Compare (key, "style", true, CultureInfo.InvariantCulture)) {
+			if (0 == String.Compare (key, StyleAttribute, true, CultureInfo.InvariantCulture)) {
 				CssStyle.Clear ();
 				return;
 			}
Index: System.Web.UI/CssStyleCollection.cs
===================================================================
--- System.Web.UI/CssStyleCollection.cs	(revision 74056)
+++ System.Web.UI/CssStyleCollection.cs	(working copy)
@@ -43,24 +43,46 @@
 	{
 		StateBag bag;
 		HybridDictionary style;
+		string _value;
+		
+		string ValueInternal {
+			get { return _value; }
+			set {
+				_value = value;
+				if (bag != null) {
+					if (_value == null) {
+						bag.Remove (AttributeCollection.StyleAttribute);
+					}
+					else {
+						bag [AttributeCollection.StyleAttribute] = _value;
+					}
+				}
+			}
+		}
+		
+		internal CssStyleCollection ()
+		{
+#if NET_2_0
+			style = new HybridDictionary (true);
+#else
+			style = new HybridDictionary (false);
+#endif
+		}
 
 		internal CssStyleCollection (StateBag bag)
+			: this ()
 		{
 			this.bag = bag;
 			if (bag != null)
-				InitFromStyle ();
+				_value = (string) bag [AttributeCollection.StyleAttribute];
+			InitFromStyle ();
 		}
 
 		void InitFromStyle ()
 		{
-#if NET_2_0
-			style = new HybridDictionary (true);
-#else
-			style = new HybridDictionary (false);
-#endif
-			string att = (string) bag ["style"];
-			if (att != null) {
-				FillStyle (att);
+			style.Clear ();
+			if (_value != null) {
+				FillStyle (_value);
 			}
 		}
 
@@ -128,7 +150,7 @@
 		public void Add (string key, string value)
 		{
 			style [key] = value;
-			bag ["style"] = BagToString ();
+			ValueInternal = BagToString ();
 		}
 
 #if NET_2_0
@@ -144,7 +166,7 @@
 		public void Clear ()
 		{
 			style.Clear ();
-			bag.Remove ("style");
+			ValueInternal = null;
 		}
 
 		public void Remove (string key)
@@ -152,7 +174,10 @@
 			if (style [key] == null)
 				return;
 			style.Remove (key);
-			bag ["style"] = BagToString ();
+			if (style.Count == 0)
+				ValueInternal = null;
+			else
+				ValueInternal = BagToString ();
 		}
 #if NET_2_0
 		public string this [HtmlTextWriterStyle key] {
@@ -174,9 +199,9 @@
 		internal
 #endif
 		string Value {
-			get { return BagToString (); }
+			get { return ValueInternal; }
 			set {
-				bag ["style"] = value;
+				ValueInternal = value;
 				InitFromStyle ();
 			}
 		}
Index: Test/System.Web.UI/AttributeCollectionTest.cs
===================================================================
--- Test/System.Web.UI/AttributeCollectionTest.cs	(revision 74056)
+++ Test/System.Web.UI/AttributeCollectionTest.cs	(working copy)
@@ -113,7 +113,6 @@
 		}
 
 		[Test]
-		[Category("NotWorking")]
 		public void InitialNoBag10()
 		{
 		    AC ac = new AC(null);
@@ -123,7 +122,6 @@
 		}
 
 		[Test]
-		[Category("NotWorking")]
 		public void InitialNoBag11()
 		{
 		    AC ac = new AC(null);
@@ -133,7 +131,6 @@
 		}
 
 		[Test]
-		[Category("NotWorking")]
 		public void InitialNoBag12()
 		{
 		    AC ac = new AC(null);
@@ -209,6 +206,67 @@
 			Assert.AreEqual ("", str, "value2");
 			Assert.AreEqual (1, bag.Count, "count2");
 		}
+		
+		[Test]
+		public void Count1 ()
+		{
+			StateBag bag = new StateBag (true);
+			AC ac = new AC (bag);
+			ac.Add ("style", "padding: 0px; margin: 0px");
+			Assert.AreEqual (1, ac.Count, "AttributeCollection.Count");
+			Assert.AreEqual (2, ac.CssStyle.Count, "AttributeCollection.Count");
+			
+			ac.Remove ("style");
+			Assert.AreEqual (0, ac.Count, "AttributeCollection.Count");
+			Assert.AreEqual (0, ac.CssStyle.Count, "AttributeCollection.Count");
+		}
+
+		[Test]
+		public void Count2 ()
+		{
+			StateBag bag = new StateBag (true);
+			AC ac = new AC (bag);
+			ac ["style"] = "padding: 0px; margin: 0px";
+			Assert.AreEqual (1, ac.Count, "AttributeCollection.Count");
+			Assert.AreEqual (2, ac.CssStyle.Count, "AttributeCollection.Count");
+
+			ac ["style"] = null;
+			Assert.AreEqual (0, ac.Count, "AttributeCollection.Count");
+			Assert.AreEqual (0, ac.CssStyle.Count, "AttributeCollection.Count");
+		}
+
+		[Test]
+		public void Count3 ()
+		{
+			StateBag bag = new StateBag (true);
+			AC ac = new AC (bag);
+			ac.CssStyle.Add("padding", "0px");
+			ac.CssStyle.Add("margin", "0px");
+			Assert.AreEqual (1, ac.Count, "AttributeCollection.Count");
+			Assert.AreEqual (2, ac.CssStyle.Count, "AttributeCollection.Count");
+
+			ac.CssStyle.Remove ("padding");
+			ac.CssStyle.Remove ("margin");
+			Assert.AreEqual (0, ac.Count, "AttributeCollection.Count");
+			Assert.AreEqual (0, ac.CssStyle.Count, "AttributeCollection.Count");
+		}
+
+#if NET_2_0
+		[Test]
+		public void Count4 ()
+		{
+			StateBag bag = new StateBag (true);
+			AC ac = new AC (bag);
+			ac.CssStyle ["padding"] = "0px";
+			ac.CssStyle ["margin"] = "0px";
+			Assert.AreEqual (1, ac.Count, "AttributeCollection.Count");
+			Assert.AreEqual (2, ac.CssStyle.Count, "AttributeCollection.Count");
+
+			ac.CssStyle.Value = null;
+			Assert.AreEqual (0, ac.Count, "AttributeCollection.Count");
+			Assert.AreEqual (0, ac.CssStyle.Count, "AttributeCollection.Count");
+		}
+#endif
 	}
 }
 
