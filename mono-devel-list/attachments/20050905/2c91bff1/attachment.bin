/* variable-count list at end of structure */
/* compile as: gcc -g -shared -o libvlist.so vlist.c */
#include <stdlib.h>
#include <stdio.h>

struct Foo {
	int First;
	int Second;
};

struct FooList {
	int Count;
	struct Foo List[0];
};

void
GetFooList (struct FooList *fList)
{
	int i;

	for (i = 0; i < fList->Count; ++i) {
		int n = i+1;
		fList->List[i].First  = n;
		fList->List[i].Second = n*n;
	}
}

void
AllocFooList (struct FooList **pfList)
{
	const int NUM_ENTRIES = 5;
	int i;

	*pfList = malloc (sizeof(struct FooList) + NUM_ENTRIES*(sizeof (struct Foo)));
	(*pfList)->Count = NUM_ENTRIES;

	for (i = 0; i < NUM_ENTRIES; ++i) {
		int n = i+1;
		(*pfList)->List[i].First = n;
		(*pfList)->List[i].Second = n*n*n;
	}
}

static void
print_foo_list (struct FooList *pfList)
{
	int i;
	printf ("Count: %i\n", pfList->Count);
	for (i = 0; i < pfList->Count; ++i) {
		printf (" Elem: {%i, %i}\n", pfList->List[i].First, pfList->List[i].Second);
	}
}

int
main ()
{
	struct FooList* list;
	int i;
	printf ("GetFooList\n");
	list = malloc(sizeof(struct FooList) + 4*(sizeof (struct Foo)));
	list->Count = 4;
	GetFooList (list);
	print_foo_list (list);
	free (list);

	printf ("AllocFooList\n");
	AllocFooList (&list);
	print_foo_list (list);
	free (list);
}
