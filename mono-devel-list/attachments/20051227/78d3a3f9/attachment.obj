Index: System.Xml.Serialization/ChangeLog
===================================================================
--- System.Xml.Serialization/ChangeLog	(revision 54859)
+++ System.Xml.Serialization/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2005-12-27  Gert Driesen  <drieseng@users.sourceforge.net>
+
+	* XmlAttributes.cs: If XmlIgnoreAttribute is applied, then do not
+	process any other attributes. In 2.0 profile, XmlDefaultValue is
+	null by default.
+
 2005-12-07  Lluis Sanchez Gual  <lluis@novell.com>
 
 	* XmlSerializationReaderInterpreter.cs: When deserializing a "flat"
Index: System.Xml.Serialization/XmlAttributes.cs
===================================================================
--- System.Xml.Serialization/XmlAttributes.cs	(revision 54859)
+++ System.Xml.Serialization/XmlAttributes.cs	(working copy)
@@ -46,7 +46,11 @@
 		private XmlArrayItemAttributes xmlArrayItems = new XmlArrayItemAttributes();
 		private XmlAttributeAttribute xmlAttribute;
 		private XmlChoiceIdentifierAttribute xmlChoiceIdentifier;
+#if NET_2_0
+		private object xmlDefaultValue;
+#else
 		private object xmlDefaultValue = System.DBNull.Value;
+#endif
 		private XmlElementAttributes xmlElements = new XmlElementAttributes();
 		private XmlEnumAttribute xmlEnum;
 		private bool xmlIgnore;
@@ -61,6 +65,13 @@
 
 		public XmlAttributes (ICustomAttributeProvider provider)
 		{
+			object[] ignoreAtts = provider.GetCustomAttributes (
+				typeof (XmlIgnoreAttribute), false);
+			if (ignoreAtts.Length > 0) {
+				xmlIgnore = true;
+				return;
+			}
+
 			object[] attributes = provider.GetCustomAttributes(false);
 			foreach(object obj in attributes)
 			{
@@ -82,8 +93,6 @@
 					xmlElements.Add((XmlElementAttribute ) obj);
 				else if(obj is XmlEnumAttribute)
 					xmlEnum = (XmlEnumAttribute) obj;
-				else if(obj is XmlIgnoreAttribute)
-					xmlIgnore = true;
 				else if(obj is XmlNamespaceDeclarationsAttribute)
 					xmlns = true;
 				else if(obj is XmlRootAttribute)
Index: Test/System.Xml.Serialization/ChangeLog
===================================================================
--- Test/System.Xml.Serialization/ChangeLog	(revision 54871)
+++ Test/System.Xml.Serialization/ChangeLog	(working copy)
@@ -1,5 +1,11 @@
 2005-12-27  Gert Driesen  <drieseng@users.sourceforge.net>
 
+	* XmlAttributesTests.cs: In 2.0 profile, XmlDefaultValue is null 
+	instead of DBNull.Value. Added tests to check behaviour of XmlIgnore,
+	and other attributes.
+
+2005-12-27  Gert Driesen  <drieseng@users.sourceforge.net>
+
 	* XmlAttributesTests.cs: No longer derive from Assertion, number
 	individual tests.
 
Index: Test/System.Xml.Serialization/XmlAttributesTests.cs
===================================================================
--- Test/System.Xml.Serialization/XmlAttributesTests.cs	(revision 54871)
+++ Test/System.Xml.Serialization/XmlAttributesTests.cs	(working copy)
@@ -8,6 +8,8 @@
 //
 
 using System;
+using System.Collections;
+using System.ComponentModel;
 using System.IO;
 using System.Text;
 using System.Xml;
@@ -73,21 +75,148 @@
 			Assert.AreEqual (0, atts.XmlArrayItems.Count, "#6");
 			Assert.IsNull (atts.XmlAttribute, "#7");
 			Assert.IsNull (atts.XmlChoiceIdentifier, "#8");
+#if NET_2_0
+			Assert.IsNull (atts.XmlDefaultValue, "#9");
+#else
 			Assert.IsNotNull (atts.XmlDefaultValue, "#9");
-			// DBNull??
 			Assert.AreEqual (DBNull.Value, atts.XmlDefaultValue, "#10");
+#endif
 			Assert.IsNotNull (atts.XmlElements, "#11");
 			Assert.AreEqual (0, atts.XmlElements.Count, "#12");
 			Assert.IsNull (atts.XmlEnum, "#13");
-			Assert.IsNotNull (atts.XmlIgnore, "#14");
-			Assert.AreEqual (TypeCode.Boolean, atts.XmlIgnore.GetTypeCode (), "#15");
-			Assert.AreEqual (false, atts.Xmlns, "#16");
-			Assert.IsNull (atts.XmlRoot, "#17");
+			Assert.IsFalse (atts.XmlIgnore, "#14");
+			Assert.IsFalse (atts.Xmlns, "#15");
+			Assert.IsNull (atts.XmlRoot, "#16");
+			Assert.IsNull (atts.XmlText, "#17");
+			Assert.IsNull (atts.XmlType, "#18");
+		}
+
+		[Test]
+		public void XmlAttributes_Provider_Type ()
+		{
+			XmlAttributes atts = new XmlAttributes (typeof (Store));
+
+			Assert.IsNull (atts.XmlAnyAttribute, "#1");
+			Assert.IsNotNull (atts.XmlAnyElements, "#2");
+			Assert.AreEqual (0, atts.XmlAnyElements.Count, "#3");
+			Assert.IsNull (atts.XmlArray, "#4");
+			Assert.IsNotNull (atts.XmlArrayItems, "#5");
+			Assert.AreEqual (0, atts.XmlArrayItems.Count, "#6");
+			Assert.IsNull (atts.XmlAttribute, "#7");
+			Assert.IsNull (atts.XmlChoiceIdentifier, "#8");
+#if NET_2_0
+			Assert.IsNull (atts.XmlDefaultValue, "#9");
+#else
+			Assert.IsNotNull (atts.XmlDefaultValue, "#9");
+			Assert.AreEqual (DBNull.Value, atts.XmlDefaultValue, "#10");
+#endif
+			Assert.IsNotNull (atts.XmlElements, "#11");
+			Assert.AreEqual (0, atts.XmlElements.Count, "#12");
+			Assert.IsNull (atts.XmlEnum, "#13");
+			Assert.IsFalse (atts.XmlIgnore, "#14");
+			Assert.IsFalse (atts.Xmlns, "#15");
+			Assert.IsNotNull (atts.XmlRoot, "#17");
 			Assert.IsNull (atts.XmlText, "#18");
-			Assert.IsNull (atts.XmlType, "#19");
+			Assert.IsNotNull (atts.XmlType, "#19");
 		}
 
 		[Test]
+		public void XmlAttributes_Provider_Member ()
+		{
+			XmlAttributes atts = new XmlAttributes (typeof (Store).GetProperty("OtherItems"));
+			Assert.IsNull (atts.XmlAnyAttribute, "#A1");
+			Assert.IsNotNull (atts.XmlAnyElements, "#A2");
+			Assert.AreEqual (0, atts.XmlAnyElements.Count, "#A3");
+			Assert.IsNull (atts.XmlArray, "#A4");
+			Assert.IsNotNull (atts.XmlArrayItems, "#A5");
+			Assert.AreEqual (0, atts.XmlArrayItems.Count, "#A6");
+			Assert.IsNull (atts.XmlAttribute, "#A7");
+			Assert.IsNull (atts.XmlChoiceIdentifier, "#A8");
+#if NET_2_0
+			Assert.IsNull (atts.XmlDefaultValue, "#A9");
+#else
+			Assert.IsNotNull (atts.XmlDefaultValue, "#A9");
+			Assert.AreEqual (DBNull.Value, atts.XmlDefaultValue, "#A10");
+#endif
+			Assert.IsNotNull (atts.XmlElements, "#A11");
+			Assert.AreEqual (2, atts.XmlElements.Count, "#A12");
+			Assert.IsNull (atts.XmlEnum, "#A13");
+			Assert.IsFalse (atts.XmlIgnore, "#A14");
+			Assert.IsFalse (atts.Xmlns, "#A15");
+			Assert.IsNull (atts.XmlRoot, "#A17");
+			Assert.IsNull (atts.XmlText, "#A18");
+			Assert.IsNull (atts.XmlType, "#A19");
+
+			atts = new XmlAttributes (typeof (Store).GetProperty ("Items"));
+			Assert.IsNull (atts.XmlAnyAttribute, "#B1");
+			Assert.IsNotNull (atts.XmlAnyElements, "#B2");
+			Assert.AreEqual (0, atts.XmlAnyElements.Count, "#B3");
+			Assert.IsNotNull (atts.XmlArray, "#B4");
+			Assert.IsNotNull (atts.XmlArrayItems, "#B5");
+			Assert.AreEqual (2, atts.XmlArrayItems.Count, "#B6");
+			Assert.IsNull (atts.XmlAttribute, "#B7");
+			Assert.IsNull (atts.XmlChoiceIdentifier, "#B8");
+#if NET_2_0
+			Assert.IsNull (atts.XmlDefaultValue, "#B9");
+#else
+			Assert.IsNotNull (atts.XmlDefaultValue, "#B9");
+			Assert.AreEqual (DBNull.Value, atts.XmlDefaultValue, "#B10");
+#endif
+			Assert.IsNotNull (atts.XmlElements, "#B11");
+			Assert.AreEqual (0, atts.XmlElements.Count, "#B12");
+			Assert.IsNull (atts.XmlEnum, "#B13");
+			Assert.IsFalse (atts.XmlIgnore, "#B14");
+			Assert.IsFalse (atts.Xmlns, "#B15");
+			Assert.IsNull (atts.XmlRoot, "#B17");
+			Assert.IsNull (atts.XmlText, "#B18");
+			Assert.IsNull (atts.XmlType, "#B19");
+
+			atts = new XmlAttributes (typeof (Store).GetField ("All"));
+			Assert.IsNotNull (atts.XmlAnyAttribute, "#C1");
+			Assert.IsNotNull (atts.XmlAnyElements, "#C2");
+			Assert.AreEqual (2, atts.XmlAnyElements.Count, "#C3");
+			Assert.IsNotNull (atts.XmlArray, "#C4");
+			Assert.IsNotNull (atts.XmlArrayItems, "#C5");
+			Assert.AreEqual (1, atts.XmlArrayItems.Count, "#C6");
+			Assert.IsNotNull (atts.XmlAttribute, "#C7");
+			Assert.IsNotNull (atts.XmlChoiceIdentifier, "#C8");
+			Assert.IsNotNull (atts.XmlDefaultValue, "#C9");
+			Assert.AreEqual ("All7", atts.XmlDefaultValue, "#C10");
+			Assert.IsNotNull (atts.XmlElements, "#C11");
+			Assert.AreEqual (3, atts.XmlElements.Count, "#C12");
+			Assert.IsNotNull (atts.XmlEnum, "#C13");
+			Assert.IsFalse (atts.XmlIgnore, "#C14");
+			Assert.IsTrue (atts.Xmlns, "#C15");
+			Assert.IsNull (atts.XmlRoot, "#C17");
+			Assert.IsNotNull (atts.XmlText, "#C18");
+			Assert.IsNull (atts.XmlType, "#C19");
+
+			atts = new XmlAttributes (typeof (Store).GetField ("None"));
+			Assert.IsNull (atts.XmlAnyAttribute, "#D1");
+			Assert.IsNotNull (atts.XmlAnyElements, "#D2");
+			Assert.AreEqual (0, atts.XmlAnyElements.Count, "#D3");
+			Assert.IsNull (atts.XmlArray, "#D4");
+			Assert.IsNotNull (atts.XmlArrayItems, "#D5");
+			Assert.AreEqual (0, atts.XmlArrayItems.Count, "#D6");
+			Assert.IsNull (atts.XmlAttribute, "#D7");
+			Assert.IsNull (atts.XmlChoiceIdentifier, "#D8");
+#if NET_2_0
+			Assert.IsNull (atts.XmlDefaultValue, "#D9");
+#else
+			Assert.IsNotNull (atts.XmlDefaultValue, "#D9");
+			Assert.AreEqual (DBNull.Value, atts.XmlDefaultValue, "#D10");
+#endif
+			Assert.IsNotNull (atts.XmlElements, "#D11");
+			Assert.AreEqual (0, atts.XmlElements.Count, "#D12");
+			Assert.IsNull (atts.XmlEnum, "#D13");
+			Assert.IsTrue (atts.XmlIgnore, "#D14");
+			Assert.IsFalse (atts.Xmlns, "#D15");
+			Assert.IsNull (atts.XmlRoot, "#D17");
+			Assert.IsNull (atts.XmlText, "#D18");
+			Assert.IsNull (atts.XmlType, "#D19");
+		}
+
+		[Test]
 		public void XmlTextAttribute ()
 		{
 			// based on default ctor.
@@ -113,5 +242,81 @@
 			} catch (InvalidOperationException ex) {
 			}
 		}
+
+		[XmlType (Namespace = "http://www.books.com", TypeName = "Store")]
+		[XmlRoot (Namespace = "www.contoso.com", ElementName = "MyGroupName", DataType = "string", IsNullable = true)]
+		public class Store
+		{
+			[XmlArray(ElementName="Authors", Namespace="http://www.books.com", IsNullable=true)]
+			public string[] Names = new string[] { "Bill", "Alan" };
+
+			[XmlArrayItem (ElementName = "Item", IsNullable = true, Type = typeof (Item), Namespace = "http://www.books.com")]
+			[XmlArrayItem (ElementName = "BookItem", IsNullable = true, Type = typeof (BookItem), Namespace = "http://www.cohowinery.com")]
+			[XmlArray]
+			public Item[] Items
+			{
+				get { return _items; }
+				set { _items = value; }
+			}
+
+			[XmlElement (typeof (Item))]
+			[XmlElement (typeof (BookItem), ElementName = "Book")]
+			public ArrayList OtherItems
+			{
+				get { return _otherItems; }
+				set { _otherItems = value; }
+			}
+
+			[XmlAnyAttribute ()]
+			[XmlAnyElement (Name = "All1")]
+			[XmlAnyElement (Name = "All2")]
+			[XmlArray (ElementName = "All3")]
+			[XmlArrayItem (ElementName = "All4", IsNullable = true, Type = typeof (Item), Namespace = "http://www.books.com")]
+			[XmlAttribute (AttributeName = "All5")]
+			[XmlChoiceIdentifier (MemberName = "All6")]
+			[DefaultValue ("All7")]
+			[XmlElement (typeof (BookItem), ElementName = "All8")]
+			[XmlElement (typeof (BookItem), ElementName = "All9")]
+			[XmlElement (typeof (BookItem), ElementName = "All10")]
+			[XmlEnum (Name = "All11")]
+			[XmlNamespaceDeclarations]
+			[XmlText (DataType = "Name")]
+			public Item[] All;
+
+			[XmlAnyAttribute ()]
+			[XmlAnyElement (Name = "All1")]
+			[XmlAnyElement (Name = "All2")]
+			[XmlArray (ElementName = "All3")]
+			[XmlArrayItem (ElementName = "All4", IsNullable = true, Type = typeof (Item), Namespace = "http://www.books.com")]
+			[XmlAttribute (AttributeName = "All5")]
+			[XmlChoiceIdentifier (MemberName = "All6")]
+			[DefaultValue ("All7")]
+			[XmlIgnore]
+			[XmlElement (typeof (BookItem), ElementName = "All8")]
+			[XmlElement (typeof (BookItem), ElementName = "All9")]
+			[XmlElement (typeof (BookItem), ElementName = "All10")]
+			[XmlEnum (Name = "All11")]
+			[XmlNamespaceDeclarations]
+			[XmlText (DataType = "Name")]
+			public Item[] None;
+
+			private ArrayList _otherItems = new ArrayList ();
+			private Item[] _items;
+		}
+
+		public class Item {
+			[XmlElement(ElementName="OrderItem")]
+			public string ItemName;
+			public string ItemCode;
+			public decimal ItemPrice;
+			public int ItemQuantity;
+		}
+
+		public class BookItem : Item
+		{
+			public string Title;
+			public string Author;
+			public string ISBN;
+		}
 	}
 }
