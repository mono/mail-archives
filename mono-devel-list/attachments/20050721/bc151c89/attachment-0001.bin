// DataViewSortingTest.cs - Nunit Test Cases for testing the DataView
// sorting
// Authors:
//	Marc Haisenko (marc@darkdust.net)
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//



using NUnit.Framework;
using System;
using System.Data;
using System.ComponentModel;
using System.IO;
using MonoTests.System.Data.Test.Utils;

namespace MonoTests.System.Data
{
	[TestFixture]
	public class DataViewSortingTest : Assertion
	{
		DataTable dataTable;
		DataView  dataView;

		[SetUp]
		public void GetReady ()
		{
			dataTable = new DataTable ("itemTable");
			DataColumn dc1 = new DataColumn ("itemId", typeof(int));
			DataColumn dc2 = new DataColumn ("itemName", typeof(string));
			
			dataTable.Columns.Add (dc1);
			dataTable.Columns.Add (dc2);

			dataTable.Rows.Add (new object[2] { 1, "First entry" });
			dataTable.Rows.Add (new object[2] { 0, "Second entry" });
			dataTable.Rows.Add (new object[2] { 3, "Third entry" });
			dataTable.Rows.Add (new object[2] { 2, "Fourth entry" });
			
			dataView = new DataView (dataTable);
		}

		[TearDown]
		public void Clean () 
		{
			dataTable = null;
			dataView = null;
		}

		public void MyAssert (int a, Object b, string s)
		{
			AssertEquals (s, a, (int) b);
		}

		[Test]
		public void Test ()
		{
			string s = "Default sorting: ";
			MyAssert (1, dataView[0][0], s + "First entry has wrong item");
			MyAssert (0, dataView[1][0], s + "Second entry has wrong item");
			MyAssert (3, dataView[2][0], s + "Third entry has wrong item");
			MyAssert (2, dataView[3][0], s + "Fourth entry has wrong item");

			s = "Ascending sorting: ";
			dataView.Sort = "itemId ASC";
			MyAssert (0, dataView[0][0], s + "First entry has wrong item");
			MyAssert (1, dataView[1][0], s + "Second entry has wrong item");
			MyAssert (2, dataView[2][0], s + "Third entry has wrong item");
			MyAssert (3, dataView[3][0], s + "Fourth entry has wrong item");

			s = "Descending sorting: ";
			dataView.Sort = "itemId DESC";
			MyAssert (3, dataView[0][0], s + "First entry has wrong item");
			MyAssert (2, dataView[1][0], s + "Second entry has wrong item");
			MyAssert (1, dataView[2][0], s + "Third entry has wrong item");
			MyAssert (0, dataView[3][0], s + "Fourth entry has wrong item");

			s = "Reverted to default sorting: ";
			dataView.Sort = null;
			MyAssert (1, dataView[0][0], s + "First entry has wrong item");
			MyAssert (0, dataView[1][0], s + "Second entry has wrong item");
			MyAssert (3, dataView[2][0], s + "Third entry has wrong item");
			MyAssert (2, dataView[3][0], s + "Fourth entry has wrong item");
		}
	}
}
