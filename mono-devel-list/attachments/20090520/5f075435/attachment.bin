Index: Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/RabbitMQMessageQueue.cs
===================================================================
--- Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/RabbitMQMessageQueue.cs	(revision 134437)
+++ Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/RabbitMQMessageQueue.cs	(working copy)
@@ -209,8 +209,7 @@
 			
 			using (IConnection cn = cf.CreateConnection (qRef.Host)) {
 				using (IModel model = cn.CreateModel ()) {
-					ushort ticket = model.AccessRequest (realm);
-					model.QueueDelete (ticket, qRef.Queue, false, false, false);
+					model.QueueDelete (qRef.Queue, false, false, false);
 				}
 			}
 		}			
@@ -298,11 +297,10 @@
 		
 		private void Send (IModel model, IMessage msg)
 		{
-			ushort ticket = model.AccessRequest ("/data");
-			string finalName = model.QueueDeclare (ticket, QRef.Queue, true);
+			string finalName = model.QueueDeclare (QRef.Queue, true);
 			IMessageBuilder mb = helper.WriteMessage (model, msg);
 
-			model.BasicPublish (ticket, "", finalName,
+			model.BasicPublish ("", finalName,
 			                    (IBasicProperties) mb.GetContentHeader(),
 			                    mb.GetContentBody ());
 		}
@@ -313,8 +311,7 @@
 
 			using (IConnection cn = cf.CreateConnection (QRef.Host)) {
 				using (IModel model = cn.CreateModel ()) {
-					ushort ticket = model.AccessRequest (realm);
-					model.QueuePurge (ticket, QRef.Queue, false);
+					model.QueuePurge (QRef.Queue, false);
 				}
 			}
 		}
@@ -677,10 +674,9 @@
 		
 		private IMessage Receive (IModel model, int timeout, bool doAck)
 		{
-			ushort ticket = model.AccessRequest (realm);
-			string finalName = model.QueueDeclare (ticket, QRef.Queue, false);
+			string finalName = model.QueueDeclare (QRef.Queue, false);
 			
-			using (Subscription sub = new Subscription (model, ticket, finalName)) {
+			using (Subscription sub = new Subscription (model, finalName)) {
 				BasicDeliverEventArgs result;
 				if (sub.Next (timeout, out result)) {
 					IMessage m = helper.ReadMessage (QRef, result);
@@ -696,10 +692,9 @@
 		private IMessage Receive (IModel model, int timeout, 
 		                          bool doAck, IsMatch matcher)
 		{
-			ushort ticket = model.AccessRequest (realm);
-			string finalName = model.QueueDeclare (ticket, QRef.Queue, false);
+			string finalName = model.QueueDeclare (QRef.Queue, false);
 			
-			using (Subscription sub = new Subscription (model, ticket, finalName)) {
+			using (Subscription sub = new Subscription (model, finalName)) {
 				BasicDeliverEventArgs result;
 				while (sub.Next (timeout, out result)) {
 					
Index: Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/ChangeLog
===================================================================
--- Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/ChangeLog	(revision 134437)
+++ Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/ChangeLog	(working copy)
@@ -47,4 +47,9 @@
 	
 2009-05-19  Michael Barker  <mike@middlesoft.co.uk>
 
-	* RabbitMQMessageQueue.cs: Added comments.
\ No newline at end of file
+	* RabbitMQMessageQueue.cs: Added comments.
+	
+2009-05-20  Michael Barker  <mike@middlesoft.co.uk>
+
+	* RabbitMQMessageEnumerator.cs:  Removed references to realms & tickets.
+	* RabbitMQMessageQueue.cs:  Removed references to realms & tickets.
\ No newline at end of file
Index: Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/RabbitMQMessageEnumerator.cs
===================================================================
--- Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/RabbitMQMessageEnumerator.cs	(revision 134381)
+++ Mono.Messaging.RabbitMQ/Mono.Messaging.RabbitMQ/RabbitMQMessageEnumerator.cs	(working copy)
@@ -117,10 +117,10 @@
 				if (subscription == null) {
 					IModel ch = Model;
 					
-					ushort ticket = ch.AccessRequest ("/data");
-					string finalName = ch.QueueDeclare (ticket, qRef.Queue, false);
+					//ushort ticket = ch.AccessRequest ("/data");
+					string finalName = ch.QueueDeclare (qRef.Queue, false);
 					
-					subscription = new Subscription (ch, ticket, finalName);
+					subscription = new Subscription (ch, finalName);
 				}
 				
 				return subscription;