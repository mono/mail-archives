Index: vbnc/vbnc/source/Expressions/InvocationOrIndexExpression.vb
===================================================================
--- vbnc/vbnc/source/Expressions/InvocationOrIndexExpression.vb	(revision 65145)
+++ vbnc/vbnc/source/Expressions/InvocationOrIndexExpression.vb	(working copy)
@@ -48,6 +48,13 @@
     Private m_ConstantValue As Object
     Private m_ExpressionType As Type
 
+    ' AscW is replaced with the first parameter casted to Integer when:
+    ' /novbruntimeref is used
+    ' the called AscW is declared in the code being compiled
+    ' the called AscW is Shared or is declared in a Module
+    ' the first argument of the the called AscW is a ByVal Char
+    Private m_AscWExpression As Expression
+
     ''' <summary>
     ''' If this method is not nothing then the arguments are emitted and then the method is called.
     ''' </summary>
@@ -111,6 +118,13 @@
     Protected Overrides Function GenerateCodeInternal(ByVal Info As EmitInfo) As Boolean
         Dim result As Boolean = True
 
+        If m_AscWExpression IsNot Nothing Then
+            result = m_AscWExpression.GenerateCode(Info.Clone(True, False, TypeCache.Char)) AndAlso result
+            Info.Stack.SwitchHead(TypeCache.Char, TypeCache.Integer)
+
+            Return result
+        End If
+
         If m_InvocationMethod IsNot Nothing Then
             result = Helper.EmitArgumentsAndCallOrCallVirt(Info, m_Expression, m_ArgumentList, m_InvocationMethod) AndAlso result
             Return True
@@ -410,10 +424,23 @@
         End If
 
         If mgc.ResolvedMethodInfo IsNot Nothing Then
-            If mgc.ResolvedMethodInfo.ReturnType Is Nothing Then
+            Dim methodInfo As MethodInfo = mgc.ResolvedMethodInfo
+
+            If Compiler.CommandLine.NoVBRuntimeRef AndAlso Compiler.Assembly.IsDefinedHere(methodInfo.DeclaringType) AndAlso methodInfo.IsStatic AndAlso Helper.CompareNameOrdinal(methodInfo.Name, "AscW") Then
+                Dim methodParameters() As ParameterInfo = Helper.GetParameters(Compiler, methodInfo)
+
+                If methodParameters.Length <> 0 AndAlso Helper.CompareType(methodParameters(0).ParameterType, TypeCache.Char) Then
+                    m_AscWExpression = ArgumentList(0).Expression
+                    Classification = New ValueClassification(Me, TypeCache.Integer)
+
+                    Return result
+                End If
+            End If
+
+            If methodInfo.ReturnType Is Nothing Then
                 Classification = New VoidClassification(Me)
             Else
-                Classification = New ValueClassification(Me, mgc.ResolvedMethodInfo.ReturnType)
+                Classification = New ValueClassification(Me, methodInfo.ReturnType)
             End If
         ElseIf mgc.ResolvedConstructor IsNot Nothing Then
             Classification = New VoidClassification(Me)
Index: vbnc/vbnc/tests/CompileTime/NoVBRuntimeRef1.vb
===================================================================
--- vbnc/vbnc/tests/CompileTime/NoVBRuntimeRef1.vb	(revision 65145)
+++ vbnc/vbnc/tests/CompileTime/NoVBRuntimeRef1.vb	(working copy)
@@ -5,9 +5,17 @@
             Return AscW(x, "x"c)
         End Function
 
+        Public Shared Function AscW(Optional ByVal x As Char = "x"c) As Integer
+            Return AscW()
+        End Function
+
         Public Shared Function Asc1(ByVal x As Char) As Integer
             Return AscW(x, x)
         End Function
+
+        Public Shared Function Asc2(ByVal x As Char) As Integer
+            Return AscW("x"c, x)
+        End Function
 End Class
 
 Class novbruntimeref1
