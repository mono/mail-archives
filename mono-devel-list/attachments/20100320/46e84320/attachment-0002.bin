Index: mono/metadata/sgen-gc.c
===================================================================
--- mono/metadata/sgen-gc.c	(revision 153865)
+++ mono/metadata/sgen-gc.c	(working copy)
@@ -581,6 +581,7 @@
 /* good sizes are 512KB-1MB: larger ones increase a lot memzeroing time */
 //#define DEFAULT_NURSERY_SIZE (1024*512*125+4096*118)
 #define DEFAULT_NURSERY_SIZE (1024*512*2)
+//#define DEFAULT_NURSERY_SIZE (1024*511*2) /* To test with arbitrary nursery sizes*/
 /* The number of trailing 0 bits in DEFAULT_NURSERY_SIZE */
 #define DEFAULT_NURSERY_BITS 20
 #define MAJOR_SECTION_SIZE	(128*1024)
@@ -7797,10 +7798,38 @@
 		mono_mb_emit_icon (mb, (mword)nursery_start >> DEFAULT_NURSERY_BITS);
 		label_no_wb_2 = mono_mb_emit_branch (mb, CEE_BNE_UN);
 #else
-		// FIXME:
-		g_assert_not_reached ();
-#endif
 
+		// if (ptr > (nursery_start - 1) && ptr < nursery_real_end);
+		mono_mb_emit_ldarg (mb, 0);
+		mono_mb_emit_ptr (mb, (gpointer)((nursery_start - 1)));
+		mono_mb_emit_byte (mb, CEE_PREFIX1);
+		mono_mb_emit_byte (mb, CEE_CGT);
+
+		mono_mb_emit_ldarg (mb, 0);
+		mono_mb_emit_ptr (mb, (gpointer) nursery_real_end);
+		mono_mb_emit_byte (mb, CEE_PREFIX1);
+		mono_mb_emit_byte (mb, CEE_CLT);
+
+		mono_mb_emit_byte (mb, CEE_AND);
+		label_no_wb_1 = mono_mb_emit_branch (mb, CEE_BRTRUE);
+
+		// if (!(*ptr > (nursery_start - 1) && *ptr < nursery_end))
+		mono_mb_emit_ldarg (mb, 0);
+		mono_mb_emit_byte (mb, CEE_LDIND_I);
+		mono_mb_emit_ptr (mb, (gpointer) (nursery_start - 1));
+		mono_mb_emit_byte (mb, CEE_PREFIX1);
+		mono_mb_emit_byte (mb, CEE_CGT);
+
+		mono_mb_emit_ldarg (mb, 0);
+		mono_mb_emit_byte (mb, CEE_LDIND_I);
+		mono_mb_emit_ptr (mb, (gpointer) (nursery_real_end));
+		mono_mb_emit_byte (mb, CEE_PREFIX1);
+		mono_mb_emit_byte (mb, CEE_CLT);
+
+		mono_mb_emit_byte (mb, CEE_AND);
+		label_no_wb_2 = mono_mb_emit_branch (mb, CEE_BRFALSE);
+
+#endif 
 		// if (ptr >= stack_end) goto need_wb;
 		mono_mb_emit_ldarg (mb, 0);
 		EMIT_TLS_ACCESS (mb, stack_end, stack_end_offset);
