Index: TestPoint.cs
===================================================================
--- TestPoint.cs	(revision 46515)
+++ TestPoint.cs	(working copy)
@@ -176,6 +176,24 @@
 			pt.Offset (0, -1);
 			AssertEquals (pt, pt1_0);
 		}
+		
+		[Test]
+		public void GetHashCodeTest ()
+		{
+			AssertEquals (0, pt1_1.GetHashCode ());
+			AssertEquals (1, pt1_0.GetHashCode ());
+			AssertEquals (1, pt0_1.GetHashCode ());
+			Point pt = new Point(0xFF, 0xFF00);
+			AssertEquals (0xFFFF, pt.GetHashCode ());
+		}
+
+		[Test]
+		public void ToStringTest ()
+		{
+			AssertEquals ("{X=1,Y=1}", pt1_1.ToString ());
+			AssertEquals ("{X=1,Y=0}", pt1_0.ToString ());
+			AssertEquals ("{X=0,Y=1}", pt0_1.ToString ());
+		}
 	}
 }
 
Index: TestPointF.cs
===================================================================
--- TestPointF.cs	(revision 46515)
+++ TestPointF.cs	(working copy)
@@ -94,6 +94,7 @@
 		{
 			AssertEquals ("ADD#1", pt11_0, pt11_0 + new Size (0, 0));
 			AssertEquals ("ADD#2", pt0_11, pt0_11 + new Size (0, 0));
+			AssertEquals ("ADD#3", new PointF (2, 5.1F), pt0_11 + new Size (2, 4));
 		}
 
 		[Test]
@@ -121,8 +122,33 @@
 		{
 			AssertEquals ("SUB#1", pt11_0, pt11_0 - new Size (0, 0));
 			AssertEquals ("SUB#2", pt0_11, pt0_11 - new Size (0, 0));
+			PointF expected = new PointF (0.1F, 1.9F);
+			PointF actual = pt11_99 - new Size (1, 8);
+			//need to permit a small delta on floating point
+			AssertEquals ("SUB#3", expected.X, actual.X, 1e-5);
+			AssertEquals ("SUB#3", expected.Y, actual.Y, 1e-5);
 		}
-	
+
+		[Test]
+		public void GetHashCodeTest ()
+		{
+			AssertEquals ("GHC#1", 0, pt0_11.GetHashCode ());
+			AssertEquals ("GHC#2", 1066192077, pt11_0.GetHashCode ());
+			AssertEquals ("GHC#3", 1066192077, pt11_99.GetHashCode ());
+			float f = 1234;
+			PointF pt = new PointF (f, float.NaN);
+			AssertEquals ("GHC#4",  f.GetHashCode (), pt.GetHashCode ());
+		}
+
+		[Test]
+		public void ToStringTest ()
+		{
+			AssertEquals ("TS#1", "{X=0, Y=1.1}", pt0_11.ToString ());
+			AssertEquals ("TS#2", "{X=1.1, Y=0}", pt11_0.ToString ());
+			AssertEquals ("TS#3", "{X=1.1, Y=9.9}", pt11_99.ToString ());
+			PointF pt = new PointF (float.NaN, float.NegativeInfinity);
+			AssertEquals ("TS#4", "{X=NaN, Y=-Infinity}", pt.ToString ());
+		}
 	}
 }
 
Index: TestRectangle.cs
===================================================================
--- TestRectangle.cs	(revision 46515)
+++ TestRectangle.cs	(working copy)
@@ -50,19 +49,22 @@
 			rect_0 = new Rectangle (10, 10, 40, 40);
 			rect_1 = new Rectangle (5, 5, 5, 5);
 			rect_2 = Rectangle.Empty;
-			rect_3 = new Rectangle (25, 25, 0, 0);
-			rect_4 = new Rectangle (25, 252, 10, 20);
+			rect_3 = new Rectangle (new Point (25, 25), new Size (0, 0));
+			rect_4 = new Rectangle (new Point (25, 252), new Size (10, 20));
 			rect_5 = new Rectangle (40, 40, 50, 50);
 		}
 
 		[Test]
 		public void Contains ()
 		{
-			AssertEquals (rect_0.Contains (5, 5), false);
-			AssertEquals (rect_0.Contains (12, 12), true);
-			AssertEquals (rect_0.Contains (10, 10), true);
-			AssertEquals (rect_0.Contains (10, 50), false);
-			AssertEquals (rect_0.Contains (50, 10), false);
+			AssertEquals (false, rect_0.Contains (5, 5));
+			AssertEquals (true, rect_0.Contains (12, 12));
+			AssertEquals (true, rect_0.Contains (new Point (10, 10)));
+			AssertEquals (false, rect_0.Contains (new Point (10, 50)));
+			AssertEquals (false, rect_0.Contains (50, 10));
+			AssertEquals (true, rect_0.Contains (new Rectangle (20, 20, 15, 15)));
+			AssertEquals (false, rect_0.Contains (new Rectangle (5, 5, 20, 20)));
+			AssertEquals (true, rect_2.Contains (rect_2));
 		}
 
 		[Test]
@@ -83,13 +85,8 @@
 		}
 
 		[Test]
-		public void Contents ()
+		public void GetContents ()
 		{
-			AssertEquals (rect_4.X, 25);
-			AssertEquals (rect_4.Y, 252);
-			AssertEquals (rect_4.Width, 10);
-			AssertEquals (rect_4.Height, 20);
-			AssertEquals (rect_4.Size, new Size (10, 20));
 			AssertEquals (rect_4.Right, rect_4.X + rect_4.Width);
 			AssertEquals (rect_4.Left, rect_4.X);
 			AssertEquals (rect_4.Bottom, rect_4.Y + rect_4.Height);
@@ -106,6 +103,43 @@
 			AssertEquals (rect_0.IntersectsWith (rect_4), false);
 		}
 
+		[Test]
+		public void Location ()
+		{
+			AssertEquals (new Point (25, 252), rect_4.Location);
+			Point p = new Point (11, 121);
+			rect_4.Location = p;
+			AssertEquals (p, rect_4.Location);
+			AssertEquals (rect_4.X, 11);
+			AssertEquals (rect_4.Y, 121);
+			rect_4.X = 10;
+			rect_4.Y = 15;
+			AssertEquals (new Point (10, 15), rect_4.Location);
+		}
+
+		[Test]
+		public void Size ()
+		{
+			AssertEquals (rect_4.Width, 10);
+			AssertEquals (rect_4.Height, 20);
+			rect_4.Width = 40;
+			rect_4.Height = 100;
+			AssertEquals (rect_4.Size, new Size (40, 100));
+			rect_4.Size = new Size (1, 2);
+			AssertEquals (rect_4.Width, 1);
+			AssertEquals (rect_4.Height, 2);
+		}
+
+		[Test]
+		public void ConvertFromRectangleF ()
+		{
+			AssertEquals (rect_0, Rectangle.Ceiling (
+				new RectangleF (9.9F, 9.1F, 39.04F, 39.999F)));
+			AssertEquals (rect_0, Rectangle.Round  (
+				new RectangleF (9.5F, 10.499F, 40.01F, 39.6F)));
+			AssertEquals (rect_0, Rectangle.Truncate (
+				new RectangleF (10.999F, 10.01F, 40.3F, 40.0F)));
+		}
 	}
 }
 
