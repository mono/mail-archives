Index: Makefile.am
===================================================================
RCS file: /mono/mono/mono/tests/Makefile.am,v
retrieving revision 1.139
diff -u -p -r1.139 Makefile.am
--- Makefile.am	2 Jul 2003 10:20:19 -0000	1.139
+++ Makefile.am	3 Jul 2003 21:20:29 -0000
@@ -257,6 +257,8 @@ check:
 
 noinst_LTLIBRARIES = libtest.la
 
+INCLUDES = $(GLIB_CFLAGS)
+
 libtest_la_LDFLAGS = -rpath `pwd`
 libtest_la_SOURCES = libtest.c
 
Index: libtest.c
===================================================================
RCS file: /mono/mono/mono/tests/libtest.c,v
retrieving revision 1.26
diff -u -p -r1.26 libtest.c
--- libtest.c	12 Jun 2003 14:00:20 -0000	1.26
+++ libtest.c	3 Jul 2003 21:20:29 -0000
@@ -1,5 +1,6 @@
 #include <stdio.h>
 #include <string.h>
+#include <glib.h>
 
 unsigned short*
 test_lpwstr_marshal (unsigned short* chars, long length)
@@ -36,6 +37,28 @@ int mono_return_int (int a) {
 	printf ("Got value %d\n", a);
 	return a;
 }
+
+struct ss
+{
+	int i;
+};
+
+int mono_return_int_ss (struct ss a) {
+	printf ("Got value %d\n", a.i);
+	return a.i;
+}
+
+union su
+{
+	int i1;
+	int i2;
+};
+
+int mono_return_int_su (union su a) {
+	printf ("Got value %d\n", a.i1);
+	return a.i1;
+}
+
 int mono_test_many_int_arguments (int a, int b, int c, int d, int e,
 				  int f, int g, int h, int i, int j);
 short mono_test_many_short_arguments (short a, short b, short c, short d, short e,
@@ -61,6 +84,18 @@ mono_test_many_byte_arguments (char a, c
 	return a + b + c + d + e + f + g + h + i + j;
 }
 
+float
+mono_test_many_float_arguments (float a, float b, float c, float d, float e, float f, float g, float h, float i, float j)
+{
+	return a + b + c + d + e + f + g + h + i + j;
+}
+
+double
+mono_test_many_double_arguments (double a, double b, double c, double d, double e, double f, double g, double h, double i, double j)
+{
+	return a + b + c + d + e + f + g + h + i + j;
+}
+
 int
 mono_test_puts_static (char *s)
 {
@@ -208,6 +243,28 @@ mono_test_marshal_struct (simplestruct s
 	return 1;
 }
 
+typedef struct {
+	int a;
+	int b;
+	int c;
+	char *d;
+	unsigned char e;
+	double f;
+	unsigned char g;
+	guint64 h;
+} simplestruct2;
+
+int
+mono_test_marshal_struct2 (simplestruct2 ss)
+{
+	if (ss.a == 0 && ss.b == 1 && ss.c == 0 &&
+	    !strcmp (ss.d, "TEST") && 
+	    ss.e == 99 && ss.f == 1.5 && ss.g == 42 && ss.h == (guint64)123)
+		return 0;
+
+	return 1;
+}
+
 
 typedef int (*SimpleDelegate) (int a);
 
@@ -245,8 +302,10 @@ mono_test_marshal_stringbuilder (char *s
 	return 0;
 }
 
+#ifdef __GNUC__
 typedef struct {
 } EmptyStruct;
+#endif
 
 int
 mono_test_marshal_string_array (char **array)
@@ -255,6 +314,7 @@ mono_test_marshal_string_array (char **a
 	return 0;
 }
 
+#ifdef __GNUC__
 /* this does not work on Redhat gcc 2.96 */
 int 
 mono_test_empty_struct (int a, EmptyStruct es, int b)
@@ -265,6 +325,7 @@ mono_test_empty_struct (int a, EmptyStru
 		return 0;
 	return 1;
 }
+#endif
 
 typedef struct {
        char a[100];
Index: marshal2.cs
===================================================================
RCS file: /mono/mono/mono/tests/marshal2.cs,v
retrieving revision 1.10
diff -u -p -r1.10 marshal2.cs
--- marshal2.cs	5 Jun 2003 10:19:08 -0000	1.10
+++ marshal2.cs	3 Jul 2003 21:20:29 -0000
@@ -64,74 +64,74 @@ public class Test {
 		if (Marshal.ReadInt32 (p, (int)Marshal.OffsetOf (t, "a")) != 1)
 			return 1;
 		if (Marshal.ReadInt32 (p, (int)Marshal.OffsetOf (t, "bool1")) != 1)
-			return 1;
+			return 2;
 		if (Marshal.ReadInt32 (p, (int)Marshal.OffsetOf (t, "bool2")) != 0)
-			return 1;
+			return 3;
 		if (Marshal.ReadInt32 (p, (int)Marshal.OffsetOf (t, "b")) != 2)
-			return 1;
+			return 4;
 		if (Marshal.ReadInt16 (p, 16) != 6)
-			return 1;
+			return 5;
 		if (Marshal.ReadInt16 (p, 18) != 5)
-			return 1;
+			return 6;
 		if (Marshal.ReadByte (p, 20) != 97)
-			return 1;
+			return 7;
 		if (Marshal.ReadByte (p, 21) != 98)
-			return 1;
+			return 8;
 		if (Marshal.ReadByte (p, 22) != 99)
-			return 1;
+			return 9;
 		if (Marshal.ReadByte (p, 23) != 0)
-			return 1;
+			return 10;
 		if (Marshal.ReadInt32 (p, 24) != 3)
-			return 1;
+			return 11;
 		if (Marshal.ReadInt32 (p, 28) != 4)
-			return 1;
+			return 12;
 		if (Marshal.ReadInt32 (p, 32) != 10)
-			return 1;
+			return 13;
 		if (Marshal.ReadInt32 (p, 36) != 11)
-			return 1;
+			return 14;
 		if (Marshal.ReadInt32 (p, (int)Marshal.OffsetOf (t, "s2")) == 0)
-			return 1;
+			return 15;
 
 		SimpleStruct cp = (SimpleStruct)Marshal.PtrToStructure (p, ss.GetType ());
 
 		if (cp.a != 1)
-			return 2;
+			return 16;
 
 		if (cp.bool1 != true)
-			return 2;
+			return 17;
 
 		if (cp.bool2 != false)
-			return 2;
+			return 18;
 
 		if (cp.b != 2)
-			return 2;
+			return 19;
 
 		if (cp.a1 [0] != 6)
-			return 2;
+			return 20;
 		
 		if (cp.a1 [1] != 5)
-			return 2;
+			return 21;
 
 		if (cp.s1 != "abc")
-			return 3;
+			return 22;
 		
 		if (cp.emb1.a != 3)
-			return 2;
+			return 23;
 
 		if (cp.emb1.b != 4)
-			return 2;
+			return 24;
 
 		if (cp.emb2.a != 10)
-			return 2;
+			return 25;
 
 		if (cp.emb2.b != 11)
-			return 2;
+			return 26;
 
 		if (cp.s2 != "just a test")
-			return 2;
+			return 27;
 
 		if (cp.x != 1.5)
-			return 2;
+			return 28;
 		
 		return 0;
 	}
Index: marshal4.cs
===================================================================
RCS file: /mono/mono/mono/tests/marshal4.cs,v
retrieving revision 1.1
diff -u -p -r1.1 marshal4.cs
--- marshal4.cs	12 Sep 2002 10:50:09 -0000	1.1
+++ marshal4.cs	3 Jul 2003 21:20:29 -0000
@@ -24,7 +24,7 @@ public class Test {
 		int size = Marshal.SizeOf (typeof (DelegateStruct));
 		
 		Console.WriteLine ("DelegateStruct:" + size);
-		if (size != 8)
+		if (size != 2 * sizeof(void *)) // not right for 64 bit pointers which can be 4 byte aligned
 			return 1;
 		
 		ss.a = 123;
Index: marshal6.cs
===================================================================
RCS file: /mono/mono/mono/tests/marshal6.cs,v
retrieving revision 1.1
diff -u -p -r1.1 marshal6.cs
--- marshal6.cs	5 May 2003 10:44:58 -0000	1.1
+++ marshal6.cs	3 Jul 2003 21:20:29 -0000
@@ -17,7 +17,16 @@ public class X {
 		IntPtr p = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Dummy)));
 		Marshal.StructureToPtr(dummy, p, false);
 		
-		if(Marshal.ReadInt32(p, 0) != 0x64636261) {
+		if(Marshal.ReadByte(p, 0) != 0x61) {
+			return 1;
+		}
+		if(Marshal.ReadByte(p, 1) != 0x62) {
+			return 1;
+		}
+		if(Marshal.ReadByte(p, 2) != 0x63) {
+			return 1;
+		}
+		if(Marshal.ReadByte(p, 3) != 0x64) {
 			return 1;
 		}
 		return 0;
Index: pinvoke.cs
===================================================================
RCS file: /mono/mono/mono/tests/pinvoke.cs,v
retrieving revision 1.4
diff -u -p -r1.4 pinvoke.cs
--- pinvoke.cs	19 Feb 2002 20:53:40 -0000	1.4
+++ pinvoke.cs	3 Jul 2003 21:20:29 -0000
@@ -15,6 +15,12 @@ public class Test {
 	[DllImport ("libtest.so", EntryPoint="mono_test_many_byte_arguments")]
 	public static extern int mono_test_many_byte_arguments (byte a, byte b, byte c, byte d, byte e,
 								byte f, byte g, byte h, byte i, byte j);
+	[DllImport ("libtest.so", EntryPoint="mono_test_many_float_arguments")]
+	public static extern float mono_test_many_float_arguments (float a, float b, float c, float d, float e,
+								float f, float g, float h, float i, float j);
+	[DllImport ("libtest.so", EntryPoint="mono_test_many_double_arguments")]
+	public static extern double mono_test_many_double_arguments (double a, double b, double c, double d, double e,
+								double f, double g, double h, double i, double j);
 
 	public static int Main () {
 		puts ("A simple Test for PInvoke");
@@ -22,13 +28,17 @@ public class Test {
 		if (Math.Cos (Math.PI) != -1)
 			return 1;
 		if (Math.Acos (1) != 0)
-			return 1;
+			return 2;
 		if (mono_test_many_int_arguments (1, 1, 1, 1, 1, 1, 1, 1, 1, 1) != 10)
-			return 1;
+			return 3;
 		if (mono_test_many_short_arguments (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) != 55)
-			return 1;
+			return 4;
 		if (mono_test_many_byte_arguments (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) != 55)
-			return 1;
+			return 5;
+		if (mono_test_many_float_arguments (1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f) != 55.0f)
+			return 6;
+		if (mono_test_many_double_arguments (1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0) != 55.0)
+			return 7;
 		
 		return 0;
 	}
Index: pinvoke11.cs
===================================================================
RCS file: /mono/mono/mono/tests/pinvoke11.cs,v
retrieving revision 1.2
diff -u -p -r1.2 pinvoke11.cs
--- pinvoke11.cs	8 May 2003 21:32:38 -0000	1.2
+++ pinvoke11.cs	3 Jul 2003 21:20:29 -0000
@@ -30,10 +30,10 @@ public class Test
 	[DllImport ("libtest.so")]
 	public static extern int mono_return_int (int a);
 
-	[DllImport ("libtest.so", EntryPoint="mono_return_int")]
+	[DllImport ("libtest.so", EntryPoint="mono_return_int_ss")]
 	public static extern int mono_return_int_ss (ss a);
 
-	[DllImport ("libtest.so", EntryPoint="mono_return_int")]
+	[DllImport ("libtest.so", EntryPoint="mono_return_int_su")]
 	public static extern int mono_return_int_su (su a);
 
         static int Main()
Index: pinvoke2.cs
===================================================================
RCS file: /mono/mono/mono/tests/pinvoke2.cs,v
retrieving revision 1.1
diff -u -p -r1.1 pinvoke2.cs
--- pinvoke2.cs	16 Jul 2002 08:18:51 -0000	1.1
+++ pinvoke2.cs	3 Jul 2003 21:20:29 -0000
@@ -21,6 +21,19 @@ public class Test {
 		public string d;
 	}
 
+	[StructLayout (LayoutKind.Sequential)]
+	public struct SimpleStruct2 {
+		public bool a;
+		public bool b;
+		public bool c;
+		public string d;
+		public byte e;
+		public double f;
+		public byte g;
+		public long h;
+	}
+
+
 	[DllImport ("libtest.so", EntryPoint="mono_test_marshal_char")]
 	public static extern int mono_test_marshal_char (char a1);
 
@@ -30,6 +43,9 @@ public class Test {
 	[DllImport ("libtest.so", EntryPoint="mono_test_marshal_struct")]
 	public static extern int mono_test_marshal_struct (SimpleStruct ss);
 
+	[DllImport ("libtest.so", EntryPoint="mono_test_marshal_struct2")]
+	public static extern int mono_test_marshal_struct2 (SimpleStruct2 ss);
+
 	[DllImport ("libtest.so", EntryPoint="mono_test_marshal_delegate")]
 	public static extern int mono_test_marshal_delegate (SimpleDelegate d);
 
@@ -49,13 +65,24 @@ public class Test {
 		SimpleStruct ss = new  SimpleStruct ();
 		ss.b = true;
 		ss.d = "TEST";
-		mono_test_marshal_struct (ss);
+		if (mono_test_marshal_struct (ss) != 0)
+			return 3;
+
+		SimpleStruct2 ss2 = new  SimpleStruct2 ();
+		ss2.b = true;
+		ss2.d = "TEST";
+		ss2.e = 99;
+		ss2.f = 1.5;
+		ss2.g = 42;
+		ss2.h = 123L;
+		if (mono_test_marshal_struct2 (ss2) != 0)
+			return 4;
 		
 		SimpleDelegate d = new SimpleDelegate (delegate_test);
 
 		if (mono_test_marshal_delegate (d) != 0)
-			return 1;
-		
+			return 5;
+
 		return 0;
 	}
 }
Index: pointer.cs
===================================================================
RCS file: /mono/mono/mono/tests/pointer.cs,v
retrieving revision 1.1
diff -u -p -r1.1 pointer.cs
--- pointer.cs	14 Feb 2002 07:31:11 -0000	1.1
+++ pointer.cs	3 Jul 2003 21:20:29 -0000
@@ -16,15 +16,15 @@ public class Test {
 			return num;
 		
 		num++;
-		if (sizeof (void*) != 4)
+		if (sizeof (void*) != sizeof(IntPtr))
 			return num;
 
 		num++;
-		if (sizeof (byte*) != 4)
+		if (sizeof (byte*) != sizeof (void *))
 			return num;
 
 		num++;
-		if (sizeof (int*) != 4)
+		if (sizeof (int*) != sizeof (int *))
 			return num;
 
                 return 0;
