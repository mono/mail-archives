Index: socket-io.c
===================================================================
RCS file: /mono/mono/mono/metadata/socket-io.c,v
retrieving revision 1.37
diff -u -p -r1.37 socket-io.c
--- socket-io.c	14 Jul 2003 16:08:47 -0000	1.37
+++ socket-io.c	15 Jul 2003 15:47:19 -0000
@@ -505,8 +505,9 @@ static gint32 convert_sockopt_level_and_
 static MonoImage *system_assembly=NULL;
 
 
+#ifdef AF_INET6
 static gint32 get_family_hint(void)
-{
+{
 	MonoClass *socket_class;
 	MonoClassField *ipv6_field, *ipv4_field;
 	gint32 ipv6_enabled = -1, ipv4_enabled = -1;
@@ -520,13 +521,14 @@ static gint32 get_family_hint(void)
 	mono_field_static_get_value(vtable, ipv4_field, &ipv4_enabled);
 	mono_field_static_get_value(vtable, ipv6_field, &ipv6_enabled);
 
-	if(ipv4_enabled == 1 && ipv6_enabled == 1)
-		return PF_UNSPEC;
-	else if(ipv4_enabled == 1)
-		return PF_INET;
-	else 
-		return PF_INET6;
+	if(ipv4_enabled == 1 && ipv6_enabled == 1)
+		return PF_UNSPEC;
+	else if(ipv4_enabled == 1)
+		return PF_INET;
+	else 
+		return PF_INET6;
 }
+#endif
 
 static MonoException *get_socket_exception(guint32 error_code)
 {
@@ -585,8 +587,12 @@ gpointer ves_icall_System_Net_Sockets_So
 		return(NULL);
 	}
 
-	if ( (sock_family == AF_INET || sock_family == AF_INET6) && sock_type == SOCK_DGRAM)
+	if ( sock_family == AF_INET && sock_type == SOCK_DGRAM)
+		return (GUINT_TO_POINTER (sock));
+#ifdef AF_INET6
+	if ( sock_family == AF_INET6 && sock_type == SOCK_DGRAM)
 		return (GUINT_TO_POINTER (sock));
+#endif
 
 	/* .net seems to set this by default for SOCK_STREAM,
 	 * not for SOCK_DGRAM (see bug #36322) */
@@ -756,11 +762,11 @@ static MonoObject *create_object_from_so
 		mono_array_set(data, guint8, 24, sa_in->sin6_scope_id & 0xff);
 		mono_array_set(data, guint8, 25, (sa_in->sin6_scope_id >> 8) & 0xff);
 		mono_array_set(data, guint8, 26, (sa_in->sin6_scope_id >> 16) & 0xff);
-		mono_array_set(data, guint8, 27, (sa_in->sin6_scope_id >> 24) & 0xff);
-
+		mono_array_set(data, guint8, 27, (sa_in->sin6_scope_id >> 24) & 0xff);
+
 		*(MonoArray **)(((char *)sockaddr_obj) + field->offset)=data;
-
-		return(sockaddr_obj);
+
+		return(sockaddr_obj);
 #endif
 #ifdef HAVE_SYS_UN_H
 	} else if (saddr->sa_family == AF_UNIX) {
@@ -1441,11 +1447,11 @@ void ves_icall_System_Net_Sockets_Socket
 
 #ifdef AF_INET6
 			if(system_level == SOL_IPV6)
-			{
+			{
 				struct ipv6_mreq mreq6;
 
-				/*
-				 *	Get group address
+				/*
+				 *	Get group address
 				 */
 				field = mono_class_get_field_from_name (obj_val->vtable->klass, "group");
 				address = *(gpointer *)(((char *)obj_val) + field->offset);
@@ -1455,13 +1461,13 @@ void ves_icall_System_Net_Sockets_Socket
 
 				field=mono_class_get_field_from_name(obj_val->vtable->klass, "ifIndex");
 				mreq6.ipv6mr_interface =*(guint64 *)(((char *)obj_val)+field->offset);
-
+
 				ret = setsockopt (sock, system_level, system_name,
 					&mreq6, sizeof (mreq6));
 			}
 			else if(system_level == SOL_IP)
 #endif /* AF_INET6 */
-			{
+			{
 #ifdef HAVE_STRUCT_IP_MREQN
 				struct ip_mreqn mreq = {{0}};
 #else
@@ -1589,192 +1595,192 @@ static gboolean hostent_to_IPHostEntry(s
 }
 
 #if defined(AF_INET6) && defined(HAVE_GETHOSTBYNAME2_R)
-static gboolean hostent_to_IPHostEntry2(struct hostent *he1,struct hostent *he2, MonoString **h_name,
-										MonoArray **h_aliases,
-										MonoArray **h_addr_list)
-{
-	MonoDomain *domain = mono_domain_get ();
-	int i, host_count, host_index, family_hint;
-
-	family_hint = get_family_hint ();
-
-	if(he1 == NULL && he2 == NULL)
-		return(FALSE);
-
-	/*
-	 * Check if address length and family are correct
-	 */ 
-	if ( he1 != NULL && (he1->h_length!=4 || he1->h_addrtype!=AF_INET) )
-		return(FALSE);
-
-	if ( he2 != NULL && (he2->h_length!=16 || he2->h_addrtype!=AF_INET6) )
-		return(FALSE);
-
-	/*
-	 *	Get the aliases and host name from he1 or he2 whichever is not null,
-	 *  if he1 is not null then take aliases from he1
-	 */ 
-	if ( he1 != NULL && (family_hint == PF_UNSPEC || family_hint == PF_INET) ) {
-		*h_name=mono_string_new (domain, he1->h_name);
-
-		i=0;
-		while(he1->h_aliases[i]!=NULL)
-			i++;
-
-		*h_aliases=mono_array_new (domain, mono_defaults.string_class, i);
-		i=0;
-		while(he1->h_aliases[i]!=NULL) {
-			MonoString *alias;
-
-			alias=mono_string_new (domain, he1->h_aliases[i]);
-			mono_array_set (*h_aliases, MonoString *, i, alias);
-			i++;
-		}
-
-	} else if (family_hint == PF_UNSPEC || family_hint == PF_INET6) {
-		*h_name=mono_string_new (domain, he2->h_name);
-
-		i=0;
-		while(he2->h_aliases [i] != NULL)
-			i++;
-
-		*h_aliases=mono_array_new (domain, mono_defaults.string_class, i);
-		i=0;
-		while(he2->h_aliases[i]!=NULL) {
-			MonoString *alias;
-
-			alias=mono_string_new (domain, he2->h_aliases[i]);
-			mono_array_set (*h_aliases, MonoString *, i, alias);
-			i++;
-		}
-	}
-
-	/*
-	 *	Count the number of addresses in he1 + he2
-	 */
-	host_count = 0;
-	if (he1 != NULL && (family_hint == PF_UNSPEC || family_hint == PF_INET) ) {
-		i=0;
-		while(he1->h_addr_list[i]!=NULL) {
-			i++;
-			host_count++;
-		}
-	}
-
-	if (he2 != NULL && (family_hint == PF_UNSPEC || family_hint == PF_INET6) ) {
-		i=0;
-		while(he2->h_addr_list[i]!=NULL) {
-			i++;
-			host_count++;
-		}
-	}
-
-	/*
-	 *	Fills the array
-	 */ 
-	*h_addr_list=mono_array_new (domain, mono_defaults.string_class, host_count);
-
-	host_index = 0;
-
-	if ( he2 != NULL && (family_hint == PF_UNSPEC || family_hint == PF_INET6) ) {
-		i = 0;
-		while(he2->h_addr_list[i] != NULL) {
-			MonoString *addr_string;
-			char addr[40];
-
-			inet_ntop (AF_INET6, he2->h_addr_list[i], addr, sizeof(addr));
-
-			addr_string = mono_string_new (domain, addr);
-			mono_array_set (*h_addr_list, MonoString *, host_index, addr_string);
-			i++;
-			host_index++;
-		}
-	}
-
-	if ( he1 != NULL && (family_hint == PF_UNSPEC || family_hint == PF_INET) ) {
-		i=0;
-		while(he1->h_addr_list[i] != NULL) {
-			MonoString *addr_string;
-			char addr[17];
-
-			inet_ntop (AF_INET, he1->h_addr_list[i], addr, sizeof(addr));
-
-			addr_string=mono_string_new (domain, addr);
-			mono_array_set (*h_addr_list, MonoString *, host_index, addr_string); 
-			i++;
-			host_index++;
-		}
-	}
-
-	return(TRUE);
-}
-#endif
+static gboolean hostent_to_IPHostEntry2(struct hostent *he1,struct hostent *he2, MonoString **h_name,
+										MonoArray **h_aliases,
+										MonoArray **h_addr_list)
+{
+	MonoDomain *domain = mono_domain_get ();
+	int i, host_count, host_index, family_hint;
+
+	family_hint = get_family_hint ();
+
+	if(he1 == NULL && he2 == NULL)
+		return(FALSE);
+
+	/*
+	 * Check if address length and family are correct
+	 */ 
+	if ( he1 != NULL && (he1->h_length!=4 || he1->h_addrtype!=AF_INET) )
+		return(FALSE);
+
+	if ( he2 != NULL && (he2->h_length!=16 || he2->h_addrtype!=AF_INET6) )
+		return(FALSE);
+
+	/*
+	 *	Get the aliases and host name from he1 or he2 whichever is not null,
+	 *  if he1 is not null then take aliases from he1
+	 */ 
+	if ( he1 != NULL && (family_hint == PF_UNSPEC || family_hint == PF_INET) ) {
+		*h_name=mono_string_new (domain, he1->h_name);
+
+		i=0;
+		while(he1->h_aliases[i]!=NULL)
+			i++;
+
+		*h_aliases=mono_array_new (domain, mono_defaults.string_class, i);
+		i=0;
+		while(he1->h_aliases[i]!=NULL) {
+			MonoString *alias;
+
+			alias=mono_string_new (domain, he1->h_aliases[i]);
+			mono_array_set (*h_aliases, MonoString *, i, alias);
+			i++;
+		}
+
+	} else if (family_hint == PF_UNSPEC || family_hint == PF_INET6) {
+		*h_name=mono_string_new (domain, he2->h_name);
+
+		i=0;
+		while(he2->h_aliases [i] != NULL)
+			i++;
+
+		*h_aliases=mono_array_new (domain, mono_defaults.string_class, i);
+		i=0;
+		while(he2->h_aliases[i]!=NULL) {
+			MonoString *alias;
+
+			alias=mono_string_new (domain, he2->h_aliases[i]);
+			mono_array_set (*h_aliases, MonoString *, i, alias);
+			i++;
+		}
+	}
+
+	/*
+	 *	Count the number of addresses in he1 + he2
+	 */
+	host_count = 0;
+	if (he1 != NULL && (family_hint == PF_UNSPEC || family_hint == PF_INET) ) {
+		i=0;
+		while(he1->h_addr_list[i]!=NULL) {
+			i++;
+			host_count++;
+		}
+	}
+
+	if (he2 != NULL && (family_hint == PF_UNSPEC || family_hint == PF_INET6) ) {
+		i=0;
+		while(he2->h_addr_list[i]!=NULL) {
+			i++;
+			host_count++;
+		}
+	}
+
+	/*
+	 *	Fills the array
+	 */ 
+	*h_addr_list=mono_array_new (domain, mono_defaults.string_class, host_count);
+
+	host_index = 0;
+
+	if ( he2 != NULL && (family_hint == PF_UNSPEC || family_hint == PF_INET6) ) {
+		i = 0;
+		while(he2->h_addr_list[i] != NULL) {
+			MonoString *addr_string;
+			char addr[40];
+
+			inet_ntop (AF_INET6, he2->h_addr_list[i], addr, sizeof(addr));
+
+			addr_string = mono_string_new (domain, addr);
+			mono_array_set (*h_addr_list, MonoString *, host_index, addr_string);
+			i++;
+			host_index++;
+		}
+	}
+
+	if ( he1 != NULL && (family_hint == PF_UNSPEC || family_hint == PF_INET) ) {
+		i=0;
+		while(he1->h_addr_list[i] != NULL) {
+			MonoString *addr_string;
+			char addr[17];
+
+			inet_ntop (AF_INET, he1->h_addr_list[i], addr, sizeof(addr));
+
+			addr_string=mono_string_new (domain, addr);
+			mono_array_set (*h_addr_list, MonoString *, host_index, addr_string); 
+			i++;
+			host_index++;
+		}
+	}
+
+	return(TRUE);
+}
+#endif
 
 #if defined(AF_INET6)
 static gboolean 
 addrinfo_to_IPHostEntry(struct addrinfo *info, MonoString **h_name,
 						MonoArray **h_aliases,
 						MonoArray **h_addr_list)
-{
+{
 	gint32 count, i;
 	struct addrinfo *ai = NULL;
 
 	MonoDomain *domain = mono_domain_get ();
 
-	for (count=0, ai=info; ai!=NULL; ai=ai->ai_next)
-	{
-		if ((ai->ai_family != PF_INET) && (ai->ai_family != PF_INET6))
-			continue;
-
-		count++;
-	}
-
+	for (count=0, ai=info; ai!=NULL; ai=ai->ai_next)
+	{
+		if ((ai->ai_family != PF_INET) && (ai->ai_family != PF_INET6))
+			continue;
+
+		count++;
+	}
+
 	*h_aliases=mono_array_new(domain, mono_defaults.string_class, 0);
 	*h_addr_list=mono_array_new(domain, mono_defaults.string_class, count);
-
-	for (ai=info, i=0; ai!=NULL; ai=ai->ai_next) {
+
+	for (ai=info, i=0; ai!=NULL; ai=ai->ai_next) {
 		MonoString *addr_string;
 		char *ret, *buffer;
 		gint32 buffer_size = 0;
 
-		if ((ai->ai_family != PF_INET) && (ai->ai_family != PF_INET6))
-			continue;
-
-		buffer_size = 256;
-		do {
-			buffer = g_malloc0(buffer_size);
-
-			if(ai->ai_family == PF_INET)
-				ret = inet_ntop(ai->ai_family, (void*)&(((struct sockaddr_in*)ai->ai_addr)->sin_addr), buffer, buffer_size);
-			else
-				ret = inet_ntop(ai->ai_family, (void*)&(((struct sockaddr_in6*)ai->ai_addr)->sin6_addr), buffer, buffer_size);
-
-			if(ret == 0) {
-				g_free(buffer);
-				buffer_size += 256;
-			}
-
-		} while(ret == 0 && errno == ENOSPC);
-
-		if(ret) {
+		if ((ai->ai_family != PF_INET) && (ai->ai_family != PF_INET6))
+			continue;
+
+		buffer_size = 256;
+		do {
+			buffer = g_malloc0(buffer_size);
+
+			if(ai->ai_family == PF_INET)
+				ret = inet_ntop(ai->ai_family, (void*)&(((struct sockaddr_in*)ai->ai_addr)->sin_addr), buffer, buffer_size);
+			else
+				ret = inet_ntop(ai->ai_family, (void*)&(((struct sockaddr_in6*)ai->ai_addr)->sin6_addr), buffer, buffer_size);
+
+			if(ret == 0) {
+				g_free(buffer);
+				buffer_size += 256;
+			}
+
+		} while(ret == 0 && errno == ENOSPC);
+
+		if(ret) {
 			addr_string=mono_string_new(domain, buffer);
-			g_free(buffer);
+			g_free(buffer);
 		}
-		else
+		else
 			addr_string=mono_string_new(domain, "");
-
+
 		mono_array_set(*h_addr_list, MonoString *, i, addr_string);
-
-		if(!i)
+
+		if(!i)
 			*h_name=mono_string_new(domain, ai->ai_canonname);
 
 		i++;
-	}
-
-	if(info)
-		freeaddrinfo(info);
-
-	return(TRUE);
+	}
+
+	if(info)
+		freeaddrinfo(info);
+
+	return(TRUE);
 }
 #endif
 
@@ -1790,43 +1796,43 @@ extern MonoBoolean ves_icall_System_Net_
 #if !defined(HAVE_GETHOSTBYNAME2_R)
 	struct addrinfo *info = NULL, hints;
 
-	memset(&hints, 0, sizeof(hints));
-	hints.ai_family		= get_family_hint ();
-	hints.ai_socktype	= SOCK_STREAM;
-	hints.ai_flags		= AI_CANONNAME;
-
-	if( getaddrinfo(hostname, NULL, &hints, &info) == -1 )
-		return FALSE;
+	memset(&hints, 0, sizeof(hints));
+	hints.ai_family		= get_family_hint ();
+	hints.ai_socktype	= SOCK_STREAM;
+	hints.ai_flags		= AI_CANONNAME;
+
+	if( getaddrinfo(hostname, NULL, &hints, &info) == -1 )
+		return FALSE;
 	g_free(hostname);
-
+
 	return(addrinfo_to_IPHostEntry(info, h_name, h_aliases, h_addr_list));
 #else
-	struct hostent he1,*hp1, he2, *hp2;
-	int buffer_size1, buffer_size2;
-	char *buffer1, *buffer2;
-	int herr;
-	gboolean return_value;
-
-	buffer_size1 = 512;
-	buffer_size2 = 512;
-	buffer1 = g_malloc0(buffer_size1);
-	buffer2 = g_malloc0(buffer_size2);
-
-	while (gethostbyname2_r(hostname, AF_INET, &he1, buffer1, buffer_size1, &hp1, &herr) == ERANGE) {
-		buffer_size1 *= 2;
-		buffer1 = g_realloc(buffer1, buffer_size1);
-	}
-
-	while (gethostbyname2_r(hostname, AF_INET6, &he2, buffer2, buffer_size2, &hp2, &herr) == ERANGE) {
-		buffer_size2 *= 2;
-		buffer2 = g_realloc(buffer2, buffer_size2);
-	}
-
-	return_value = hostent_to_IPHostEntry2(hp1, hp2, h_name, h_aliases, h_addr_list);
-
-	g_free(buffer1);
-	g_free(buffer2);
-
+	struct hostent he1,*hp1, he2, *hp2;
+	int buffer_size1, buffer_size2;
+	char *buffer1, *buffer2;
+	int herr;
+	gboolean return_value;
+
+	buffer_size1 = 512;
+	buffer_size2 = 512;
+	buffer1 = g_malloc0(buffer_size1);
+	buffer2 = g_malloc0(buffer_size2);
+
+	while (gethostbyname2_r(hostname, AF_INET, &he1, buffer1, buffer_size1, &hp1, &herr) == ERANGE) {
+		buffer_size1 *= 2;
+		buffer1 = g_realloc(buffer1, buffer_size1);
+	}
+
+	while (gethostbyname2_r(hostname, AF_INET6, &he2, buffer2, buffer_size2, &hp2, &herr) == ERANGE) {
+		buffer_size2 *= 2;
+		buffer2 = g_realloc(buffer2, buffer_size2);
+	}
+
+	return_value = hostent_to_IPHostEntry2(hp1, hp2, h_name, h_aliases, h_addr_list);
+
+	g_free(buffer1);
+	g_free(buffer2);
+
 	return return_value;
 #endif /* HAVE_GETHOSTBYNAME2_R */
 
@@ -1919,26 +1925,26 @@ extern MonoBoolean ves_icall_System_Net_
 		saddr.sin_family = AF_INET;
 	}
 	g_free(address);
-
-	if(family == AF_INET) {
-		if(getnameinfo ((struct sockaddr*)&saddr, sizeof(saddr), hostname, sizeof(hostname), NULL, 0, NI_NAMEREQD) != 0)
-			return FALSE;
-	}
-	else if(family == AF_INET6) {
-		if(getnameinfo ((struct sockaddr*)&saddr6, sizeof(saddr6), hostname, sizeof(hostname), NULL, 0, NI_NAMEREQD) != 0)
-			return FALSE;
-	}
-
-	memset (&hints, 0, sizeof(hints));
-	hints.ai_family		= get_family_hint ();
-	hints.ai_socktype	= SOCK_STREAM;
-	hints.ai_flags		= AI_CANONNAME;
-
-	if( getaddrinfo (hostname, NULL, &hints, &info) == -1 )
-		return FALSE;
-
-	return(addrinfo_to_IPHostEntry (info, h_name, h_aliases, h_addr_list));
-#else
+
+	if(family == AF_INET) {
+		if(getnameinfo ((struct sockaddr*)&saddr, sizeof(saddr), hostname, sizeof(hostname), NULL, 0, NI_NAMEREQD) != 0)
+			return FALSE;
+	}
+	else if(family == AF_INET6) {
+		if(getnameinfo ((struct sockaddr*)&saddr6, sizeof(saddr6), hostname, sizeof(hostname), NULL, 0, NI_NAMEREQD) != 0)
+			return FALSE;
+	}
+
+	memset (&hints, 0, sizeof(hints));
+	hints.ai_family		= get_family_hint ();
+	hints.ai_socktype	= SOCK_STREAM;
+	hints.ai_flags		= AI_CANONNAME;
+
+	if( getaddrinfo (hostname, NULL, &hints, &info) == -1 )
+		return FALSE;
+
+	return(addrinfo_to_IPHostEntry (info, h_name, h_aliases, h_addr_list));
+#else
 	if (inet_pton (AF_INET, address, &inaddr) <= 0) {
 		g_free (address);
 		return FALSE;
