--- /home/pablo/tmp/mcs-1.0/class/Microsoft.VisualBasic/Makefile	2004-06-29 06:51:48.000000000 +0200
+++ /home/pablo/mcs-1.0/class/Microsoft.VisualBasic/Makefile	2004-07-15 12:22:24.000000000 +0200
@@ -4,7 +4,7 @@
 include ../../build/rules.make
 
 LIBRARY = Microsoft.VisualBasic.dll
-LIB_MCS_FLAGS = /r:$(corlib) /r:System.dll @Microsoft.VisualBasic.dll.resources
+LIB_MCS_FLAGS = /r:$(corlib) /r:System.dll @Microsoft.VisualBasic.dll.resources /unsafe
 
 LIB_MCS_FLAGS_RESOURCES = $(LIB_MCS_FLAGS) 
 
--- /home/pablo/tmp/mcs-1.0/class/Microsoft.VisualBasic/Microsoft.VisualBasic/DateAndTime.cs	2004-06-24 16:06:50.000000000 +0200
+++ /home/pablo/mcs-1.0/class/Microsoft.VisualBasic/Microsoft.VisualBasic/DateAndTime.cs	2004-07-15 12:32:35.000000000 +0200
@@ -3,7 +3,8 @@
 //
 // Author:
 //   Chris J Breisch (cjbreisch@altavista.net) 
-//
+//   Pablo Cardona (pcardona37@hotmail.com) CRL Team
+
 // (C) 2002 Chris J Breisch
 //
 
@@ -66,24 +67,26 @@
 				}
 			} 
 		}
+		
+                // extern function used for setting the system date and time in unix systems.
+                [DllImport("libc")]
+                unsafe static extern int stime (void *t);
 
-		public static System.DateTime Today {
+		unsafe public static System.DateTime Today {
 			get { return DateTime.Today; }
 			set { 
-				// FIXME: This needs to use some OS specific code
-				//	I've already written it for Windows
-				//	and Unix won't be hard, but need an
-				//	OS object from the compiler
-				//	OS specific code needs to check permissions
-				//	too, and throw an ArgumentOutOfRangeException
-				//	if no permissions
-//				DateTime dtNow = DateTime.Now;
-//
-//				SysTime.LocalTime = new DateTime(value.Year,
-//					value.Month, value.Day, dtNow.Hour,
-//					dtNow.Minute, dtNow.Second, dtNow.Millisecond);
-				throw new NotImplementedException();
-			} 
+				System.DateTime Now = DateTime.Now;
+                                System.DateTime NewDate = new DateTime(value.Year, value.Month, value.Day,
+                                                                        Now.Hour, Now.Minute, Now.Second, Now.Millisecond);
+                                // Calculates the seconds from the epoch to the new date.
+                                System.TimeSpan secondsTimeSpan = NewDate.ToUniversalTime() - new DateTime(1970, 1, 1, 0, 0, 0);
+                                int seconds = (int) secondsTimeSpan.TotalSeconds;
+                                // Needs to be super-user to modified the system date.
+                                if(stime((void *) &seconds) == -1)
+                                        throw new UnauthorizedAccessException("The caller is not the super-user.");
+
+            		}
+ 
 		}
 
 		public static double Timer {  
@@ -100,7 +103,7 @@
 			get { return DateTime.Now; }
 		}
 
-		public static System.DateTime TimeOfDay {  
+		unsafe public static System.DateTime TimeOfDay {  
 			get { 
 				TimeSpan TSpan = DateTime.Now.TimeOfDay;
 
@@ -108,21 +111,18 @@
 					TSpan.Minutes, TSpan.Seconds, 
 					TSpan.Milliseconds); 
 			}
-			set { 
-				// FIXME: This needs to use some OS specific code
-				//	I've already written it for Windows
-				//	and Unix won't be hard, but need an
-				//	OS object from the compiler
-				//	OS specific code needs to check permissions
-				//	too, and throw an ArgumentOutOfRangeException
-				//	if no permissions
-//				DateTime dtToday = DateTime.Today;
-//
-//				SysTime.LocalTime = new DateTime(dtToday.Year,
-//					dtToday.Month, dtToday.Day, value.Hour, 
-//					value.Minute, value.Second, value.Millisecond);
-				throw new NotImplementedException();
-			} 
+			set {
+        		         Today = DateTime.Now;
+		                 System.DateTime NewTime = new DateTime(Today.Year, Today.Month, Today.Day,
+                		                                        value.Hour,value.Minute,value.Second);
+		                 // Calculates the seconds from the epoch to the new time.
+		                 TimeSpan secondsTimeSpan = NewTime.ToUniversalTime() - new DateTime(1970, 1, 1, 0, 0, 0, 0);
+                		 int seconds = (int) secondsTimeSpan.TotalSeconds;
+		                 //Needs to be super-user to modified the system time.
+                		 if(stime((void *) &seconds) == -1)
+					 throw new UnauthorizedAccessException("The caller is not the super-user.");
+           		}
+ 
 		}
 
 		public static string TimeString {  
@@ -142,7 +142,7 @@
 				} 
 			} 
 		}
-
+	
 		// Methods
 		public static System.DateTime DateAdd (DateInterval Interval, 
 			double Number, System.DateTime DateValue) {
--- /home/pablo/tmp/mcs-1.0/class/Microsoft.VisualBasic/Microsoft.VisualBasic/Strings.cs	2004-06-24 16:06:50.000000000 +0200
+++ /home/pablo/mcs-1.0/class/Microsoft.VisualBasic/Microsoft.VisualBasic/Strings.cs	2004-07-15 12:10:43.000000000 +0200
@@ -9,7 +9,8 @@
 //   Rafael Teixeira (rafaelteixeirabr@hotmail.com)
 //   Jochen Wezel (jwezel@compumaster.de)
 //   Dennis Hayes (dennish@raytek.com)
-//
+//   Pablo Cardona (pcardona37@hotmail.com) CRL Team
+// 
 // (C) 2002 Ximian Inc.
 //     2002 Tipic, Inc. (http://www.tipic.com)
 //     2003 CompuMaster GmbH (http://www.compumaster.de)
@@ -312,7 +313,8 @@
 								switch (expression.ToString().ToLower())
 								{
 									case "true":
-									case "On":
+									//Changed the label (On by on) to lower case
+									case "on":
 										if (style.ToLower ()=="yes/no")
 											returnstr="Yes";
 										else
