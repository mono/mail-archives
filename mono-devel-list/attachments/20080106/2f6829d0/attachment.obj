Index: System.Web.dll.sources
===================================================================
--- System.Web.dll.sources	(revision 92327)
+++ System.Web.dll.sources	(working copy)
@@ -598,6 +598,7 @@
 System.Web.UI/IResourceUrlGenerator.cs
 System.Web.UI/IStateFormatter.cs
 System.Web.UI/IStateManager.cs
+System.Web.UI/IScriptManager.cs
 System.Web.UI/IStyleSheet.cs
 System.Web.UI/ITagNameToTypeMapper.cs
 System.Web.UI/ITemplate.cs
Index: System.Web.UI.WebControls/BaseCompareValidator.cs
===================================================================
--- System.Web.UI.WebControls/BaseCompareValidator.cs	(revision 92327)
+++ System.Web.UI.WebControls/BaseCompareValidator.cs	(working copy)
@@ -53,22 +53,22 @@
 			if (RenderUplevel) {
 #if NET_2_0
 				if (Page!=null){
-					Page.ClientScript.RegisterExpandoAttribute (ClientID, "type", Type.ToString ());
+					RegisterExpandoAttribute (ClientID, "type", Type.ToString ());
 
 					switch (Type) {
 					case ValidationDataType.Date:
 						DateTimeFormatInfo dateTimeFormat = CultureInfo.CurrentCulture.DateTimeFormat;
 						string pattern = dateTimeFormat.ShortDatePattern;
 						string dateorder = (pattern.StartsWith ("y", true, CultureInfo.InvariantCulture) ? "ymd" : (pattern.StartsWith ("m", true, CultureInfo.InvariantCulture) ? "mdy" : "dmy"));
-						Page.ClientScript.RegisterExpandoAttribute (ClientID, "dateorder", dateorder);
-						Page.ClientScript.RegisterExpandoAttribute (ClientID, "cutoffyear", dateTimeFormat.Calendar.TwoDigitYearMax.ToString ());
+						RegisterExpandoAttribute (ClientID, "dateorder", dateorder);
+						RegisterExpandoAttribute (ClientID, "cutoffyear", dateTimeFormat.Calendar.TwoDigitYearMax.ToString ());
 						break;
 					case ValidationDataType.Currency:
 						NumberFormatInfo numberFormat = CultureInfo.CurrentCulture.NumberFormat;
-						Page.ClientScript.RegisterExpandoAttribute (ClientID, "decimalchar", numberFormat.CurrencyDecimalSeparator);
-						Page.ClientScript.RegisterExpandoAttribute (ClientID, "groupchar", numberFormat.CurrencyGroupSeparator);
-						Page.ClientScript.RegisterExpandoAttribute (ClientID, "digits", numberFormat.CurrencyDecimalDigits.ToString());
-						Page.ClientScript.RegisterExpandoAttribute (ClientID, "groupsize", numberFormat.CurrencyGroupSizes [0].ToString ());
+						RegisterExpandoAttribute (ClientID, "decimalchar", numberFormat.CurrencyDecimalSeparator, true);
+						RegisterExpandoAttribute (ClientID, "groupchar", numberFormat.CurrencyGroupSeparator, true);
+						RegisterExpandoAttribute (ClientID, "digits", numberFormat.CurrencyDecimalDigits.ToString());
+						RegisterExpandoAttribute (ClientID, "groupsize", numberFormat.CurrencyGroupSizes [0].ToString ());
 						break;
 					}
 				}
Index: System.Web.UI.WebControls/BaseValidator.cs
===================================================================
--- System.Web.UI.WebControls/BaseValidator.cs	(revision 92327)
+++ System.Web.UI.WebControls/BaseValidator.cs	(working copy)
@@ -212,14 +212,14 @@
 
 				if (ControlToValidate != String.Empty)
 #if NET_2_0
-					Page.ClientScript.RegisterExpandoAttribute (ClientID, "controltovalidate", GetControlRenderID (ControlToValidate));
+					RegisterExpandoAttribute (ClientID, "controltovalidate", GetControlRenderID (ControlToValidate));
 #else
 					writer.AddAttribute ("controltovalidate", GetControlRenderID (ControlToValidate));
 #endif
 
 				if (ErrorMessage != String.Empty)
 #if NET_2_0
-					Page.ClientScript.RegisterExpandoAttribute (ClientID, "errormessage", ErrorMessage);
+					RegisterExpandoAttribute (ClientID, "errormessage", ErrorMessage, true);
 #else
 					writer.AddAttribute ("errormessage", ErrorMessage);
 
@@ -229,21 +229,21 @@
 
 #if NET_2_0
 				if (ValidationGroup != String.Empty)
-					Page.ClientScript.RegisterExpandoAttribute (ClientID, "validationGroup", ValidationGroup);
+					RegisterExpandoAttribute (ClientID, "validationGroup", ValidationGroup, true);
 
 				if (SetFocusOnError)
-					Page.ClientScript.RegisterExpandoAttribute (ClientID, "focusOnError", "t");
+					RegisterExpandoAttribute (ClientID, "focusOnError", "t");
 #endif
 				if (!Enabled)
 #if NET_2_0
-					Page.ClientScript.RegisterExpandoAttribute (ClientID, "enabled", "False");
+					RegisterExpandoAttribute (ClientID, "enabled", "False");
 #else
 					writer.AddAttribute ("enabled", "false", false);
 #endif
 
 #if NET_2_0
 				if (Enabled && !IsValid) {
-					Page.ClientScript.RegisterExpandoAttribute (ClientID, "isvalid", "False");
+					RegisterExpandoAttribute (ClientID, "isvalid", "False");
 #else
 				if (!IsValid) {
 					writer.AddAttribute ("isvalid", "false", false);
@@ -258,7 +258,7 @@
 
 				if (Display != ValidatorDisplay.Static)
 #if NET_2_0
-					Page.ClientScript.RegisterExpandoAttribute (ClientID, "display", Display.ToString ());
+					RegisterExpandoAttribute (ClientID, "display", Display.ToString ());
 #else
 					writer.AddAttribute ("display", Display.ToString());
 #endif
@@ -267,6 +267,19 @@
 			base.AddAttributesToRender (writer);
 		}
 
+#if NET_2_0
+		internal void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue) {
+			RegisterExpandoAttribute (controlId, attributeName, attributeValue, false);
+		}
+
+		internal void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode) {
+			if (Page.ScriptManager != null)
+				Page.ScriptManager.RegisterExpandoAttribute (this, controlId, attributeName, attributeValue, encode);
+			else
+				Page.ClientScript.RegisterExpandoAttribute (controlId, attributeName, attributeValue, encode);
+		}
+#endif
+
 		protected void CheckControlValidationProperty (string name, string propertyName)
 		{
 			Control control = NamingContainer.FindControl (name);
@@ -429,26 +442,24 @@
 
 		protected void RegisterValidatorCommonScript ()
 		{
+#if NET_2_0
+			if (Page.ScriptManager != null) {
+				Page.ScriptManager.RegisterClientScriptResource (this, typeof (BaseValidator), "WebUIValidation_2.0.js");
+				Page.ScriptManager.RegisterClientScriptBlock (this, typeof (BaseValidator), "ValidationInitializeScript", Page.ValidationInitializeScript, true);
+				Page.ScriptManager.RegisterOnSubmitStatement (this, typeof (BaseValidator), "ValidationOnSubmitStatement", Page.ValidationOnSubmitStatement);
+				Page.ScriptManager.RegisterStartupScript (this, typeof (BaseValidator), "ValidationStartupScript", Page.ValidationStartupScript, true);
+			}
+			else
+#endif
 			if (!Page.ClientScript.IsClientScriptIncludeRegistered (typeof (BaseValidator), "Mono-System.Web-ValidationClientScriptBlock"))
 			{
 				Page.ClientScript.RegisterClientScriptInclude (typeof (BaseValidator), "Mono-System.Web-ValidationClientScriptBlock",
 					Page.ClientScript.GetWebResourceUrl (typeof (BaseValidator), 
 #if NET_2_0
 						"WebUIValidation_2.0.js"));
-				string webForm = (Page.IsMultiForm ? Page.theForm : "window");
-				Page.ClientScript.RegisterClientScriptBlock (typeof (BaseValidator), "Mono-System.Web-ValidationClientScriptBlock.Initialize", "WebFormValidation_Initialize(" + webForm + ");", true);
-				Page.ClientScript.RegisterOnSubmitStatement ("Mono-System.Web-ValidationOnSubmitStatement", "if (!" + webForm + ".ValidatorOnSubmit()) return false;");
-				Page.ClientScript.RegisterStartupScript (typeof (BaseValidator), "Mono-System.Web-ValidationStartupScript",
-@"
-" + webForm + @".Page_ValidationActive = false;
-" + webForm + @".ValidatorOnLoad();
-" + webForm + @".ValidatorOnSubmit = function () {
-	if (this.Page_ValidationActive) {
-		return this.ValidatorCommonOnSubmit();
-	}
-	return true;
-};
-", true);
+				Page.ClientScript.RegisterClientScriptBlock (typeof (BaseValidator), "Mono-System.Web-ValidationClientScriptBlock.Initialize", Page.ValidationInitializeScript, true);
+				Page.ClientScript.RegisterOnSubmitStatement (typeof (BaseValidator), "Mono-System.Web-ValidationOnSubmitStatement", Page.ValidationOnSubmitStatement);
+				Page.ClientScript.RegisterStartupScript (typeof (BaseValidator), "Mono-System.Web-ValidationStartupScript", Page.ValidationStartupScript, true);
 #else		
 						"WebUIValidation.js"));
 
@@ -475,6 +486,18 @@
 
 		protected virtual void RegisterValidatorDeclaration ()
 		{
+#if NET_2_0
+			if (Page.ScriptManager != null) {
+				Page.ScriptManager.RegisterArrayDeclaration (this, "Page_Validators", String.Concat ("document.getElementById ('", ClientID, "')"));
+				Page.ScriptManager.RegisterStartupScript (this, typeof (BaseValidator), ClientID + "DisposeScript",
+@"
+document.getElementById('" + ClientID + @"').dispose = function() {
+    Array.remove(Page_Validators, document.getElementById('" + ClientID + @"'));
+}
+", true);
+			}
+			else
+#endif
 			Page.ClientScript.RegisterArrayDeclaration ("Page_Validators",
 								    String.Concat ("document.getElementById ('", ClientID, "')"));
 		}
Index: System.Web.UI.WebControls/CompareValidator.cs
===================================================================
--- System.Web.UI.WebControls/CompareValidator.cs	(revision 92327)
+++ System.Web.UI.WebControls/CompareValidator.cs	(working copy)
@@ -50,12 +50,12 @@
 		{
 			if (RenderUplevel) {
 #if NET_2_0
-				Page.ClientScript.RegisterExpandoAttribute (ClientID, "evaluationfunction", "CompareValidatorEvaluateIsValid");
+				RegisterExpandoAttribute (ClientID, "evaluationfunction", "CompareValidatorEvaluateIsValid");
 				if (ControlToCompare.Length > 0)
-					Page.ClientScript.RegisterExpandoAttribute (ClientID, "controltocompare", GetControlRenderID (ControlToCompare));
+					RegisterExpandoAttribute (ClientID, "controltocompare", GetControlRenderID (ControlToCompare));
 				if (ValueToCompare.Length > 0)
-					Page.ClientScript.RegisterExpandoAttribute (ClientID, "valuetocompare", ValueToCompare);
-				Page.ClientScript.RegisterExpandoAttribute (ClientID, "operator", Operator.ToString ());
+					RegisterExpandoAttribute (ClientID, "valuetocompare", ValueToCompare, true);
+				RegisterExpandoAttribute (ClientID, "operator", Operator.ToString ());
 #else
 				if (ControlToCompare != "")
 					w.AddAttribute ("controltocompare", GetControlRenderID(ControlToCompare));
Index: System.Web.UI.WebControls/CustomValidator.cs
===================================================================
--- System.Web.UI.WebControls/CustomValidator.cs	(revision 92327)
+++ System.Web.UI.WebControls/CustomValidator.cs	(working copy)
@@ -73,11 +73,11 @@
 			if (base.RenderUplevel) {
 				string s;
 #if NET_2_0
-				Page.ClientScript.RegisterExpandoAttribute (ClientID, "evaluationfunction", "CustomValidatorEvaluateIsValid");
+				RegisterExpandoAttribute (ClientID, "evaluationfunction", "CustomValidatorEvaluateIsValid");
 				if (ValidateEmptyText)
-					Page.ClientScript.RegisterExpandoAttribute (ClientID, "validateemptytext", "true");
+					RegisterExpandoAttribute (ClientID, "validateemptytext", "true");
 				if (ClientValidationFunction.Length > 0)
-					Page.ClientScript.RegisterExpandoAttribute (ClientID, "clientvalidationfunction", ClientValidationFunction);
+					RegisterExpandoAttribute (ClientID, "clientvalidationfunction", ClientValidationFunction, true);
 #else
 				writer.AddAttribute ("evaluationfunction", "CustomValidatorEvaluateIsValid", false);
 
Index: System.Web.UI.WebControls/RangeValidator.cs
===================================================================
--- System.Web.UI.WebControls/RangeValidator.cs	(revision 92327)
+++ System.Web.UI.WebControls/RangeValidator.cs	(working copy)
@@ -91,9 +91,9 @@
 
 			if (RenderUplevel) {
 #if NET_2_0
-				Page.ClientScript.RegisterExpandoAttribute (ClientID, "evaluationfunction", "RangeValidatorEvaluateIsValid");
-				Page.ClientScript.RegisterExpandoAttribute (ClientID, "minimumvalue", MinimumValue);
-				Page.ClientScript.RegisterExpandoAttribute (ClientID, "maximumvalue", MaximumValue);
+				RegisterExpandoAttribute (ClientID, "evaluationfunction", "RangeValidatorEvaluateIsValid");
+				RegisterExpandoAttribute (ClientID, "minimumvalue", MinimumValue, true);
+				RegisterExpandoAttribute (ClientID, "maximumvalue", MaximumValue, true);
 #else
 				writer.AddAttribute("evaluationfunction", "RangeValidatorEvaluateIsValid", false); // FIXME - we need to define this in client code
 				writer.AddAttribute("minimumValue", MinimumValue.ToString(CultureInfo.InvariantCulture));
Index: System.Web.UI.WebControls/RegularExpressionValidator.cs
===================================================================
--- System.Web.UI.WebControls/RegularExpressionValidator.cs	(revision 92327)
+++ System.Web.UI.WebControls/RegularExpressionValidator.cs	(working copy)
@@ -54,9 +54,9 @@
 		{
 			if (RenderUplevel) {
 #if NET_2_0
-				Page.ClientScript.RegisterExpandoAttribute (ClientID, "evaluationfunction", "RegularExpressionValidatorEvaluateIsValid");
+				RegisterExpandoAttribute (ClientID, "evaluationfunction", "RegularExpressionValidatorEvaluateIsValid");
 				if (ValidationExpression.Length > 0)
-					Page.ClientScript.RegisterExpandoAttribute (ClientID, "validationexpression", ValidationExpression);
+					RegisterExpandoAttribute (ClientID, "validationexpression", ValidationExpression, true);
 #else
 				w.AddAttribute ("evaluationfunction", "RegularExpressionValidatorEvaluateIsValid", false);
 				if (ValidationExpression != "")
Index: System.Web.UI.WebControls/RequiredFieldValidator.cs
===================================================================
--- System.Web.UI.WebControls/RequiredFieldValidator.cs	(revision 92327)
+++ System.Web.UI.WebControls/RequiredFieldValidator.cs	(working copy)
@@ -44,8 +44,8 @@
 		{
 			if (RenderUplevel) {
 #if NET_2_0
-				Page.ClientScript.RegisterExpandoAttribute (ClientID, "evaluationfunction", "RequiredFieldValidatorEvaluateIsValid");
-				Page.ClientScript.RegisterExpandoAttribute (ClientID, "initialvalue", InitialValue);
+				RegisterExpandoAttribute (ClientID, "evaluationfunction", "RequiredFieldValidatorEvaluateIsValid");
+				RegisterExpandoAttribute (ClientID, "initialvalue", InitialValue, true);
 #else
 				w.AddAttribute ("evaluationfunction", "RequiredFieldValidatorEvaluateIsValid", false);
 				w.AddAttribute ("initialvalue", InitialValue);
Index: System.Web.UI/IScriptManager.cs
===================================================================
--- System.Web.UI/IScriptManager.cs	(revision 0)
+++ System.Web.UI/IScriptManager.cs	(revision 0)
@@ -0,0 +1,53 @@
+//
+// System.Web.UI.ClientScriptManager.cs
+//
+// Authors:
+//   Igor Zelmanovich (igorz@mainsoft.com)
+//
+// (c) 2008 Mainsoft, Inc. (http://www.mainsoft.com)
+//
+
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+#if NET_2_0
+using System;
+using System.Collections.Generic;
+using System.Text;
+
+namespace System.Web.UI
+{
+#if (TARGET_JVM || TARGET_DOTNET)
+	public
+#endif
+	interface IScriptManager
+	{
+		void RegisterOnSubmitStatement (Control control, Type type, string key, string script);
+		void RegisterExpandoAttribute (Control control, string controlId, string attributeName, string attributeValue, bool encode);
+		void RegisterHiddenField (Control control, string hiddenFieldName, string hiddenFieldInitialValue);
+		void RegisterStartupScript (Control control, Type type, string key, string script, bool addScriptTags);
+		void RegisterArrayDeclaration (Control control, string arrayName, string arrayValue);
+		void RegisterClientScriptBlock (Control control, Type type, string key, string script, bool addScriptTags);
+		void RegisterClientScriptInclude (Control control, Type type, string key, string url);
+		void RegisterClientScriptResource (Control control, Type type, string resourceName);
+	}
+}
+#endif
\ No newline at end of file
Index: System.Web.UI/Page.cs
===================================================================
--- System.Web.UI/Page.cs	(revision 92327)
+++ System.Web.UI/Page.cs	(working copy)
@@ -448,6 +448,59 @@
 			return (PageAdapter)Adapter;
 		}
 	}
+
+	string _validationStartupScript;
+	string _validationOnSubmitStatement;
+	string _validationInitializeScript;
+	string _webFormScriptReference;
+
+	internal string WebFormScriptReference {
+		get {
+			if (_webFormScriptReference == null)
+				_webFormScriptReference = IsMultiForm ? theForm : "window";
+			return _webFormScriptReference;
+		}
+	}
+
+	internal string ValidationStartupScript {
+		get {
+			if (_validationStartupScript == null) {
+				_validationStartupScript =
+@"
+" + WebFormScriptReference + @".Page_ValidationActive = false;
+" + WebFormScriptReference + @".ValidatorOnLoad();
+" + WebFormScriptReference + @".ValidatorOnSubmit = function () {
+	if (this.Page_ValidationActive) {
+		return this.ValidatorCommonOnSubmit();
+	}
+	return true;
+};
+";
+			}
+			return _validationStartupScript;
+		}
+	}
+
+	internal string ValidationOnSubmitStatement {
+		get {
+			if (_validationOnSubmitStatement == null)
+				_validationOnSubmitStatement = "if (!" + WebFormScriptReference + ".ValidatorOnSubmit()) return false;";
+			return _validationOnSubmitStatement;
+		}
+	}
+
+	internal string ValidationInitializeScript {
+		get {
+			if (_validationInitializeScript == null)
+				_validationInitializeScript = "WebFormValidation_Initialize(" + WebFormScriptReference + ");";
+			return _validationInitializeScript;
+		}
+	}
+
+	internal IScriptManager ScriptManager {
+		get { return (IScriptManager) Items [typeof (IScriptManager)]; }
+	}
+
 #endif
 
 #if !TARGET_J2EE
