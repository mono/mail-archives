[From nobody Wed Feb 13 12:01:11 2008
Subject: Mono/Alpha patches
From: Sergey Tikhonov &lt;tsv@solvo.ru&gt;
To: mono-devel-list &lt;mono-devel-list@ximian.com&gt;
Content-Type: multipart/mixed; boundary=&quot;=-q3Nt2JUuhyDSUbsPZ0eS&quot;
Message-Id: &lt;1202854699.17184.4.camel@user-222.pool-10.telix.ru&gt;
Mime-Version: 1.0
X-Mailer: Evolution 2.12.2 (2.12.2-2.fc8) 
Date: Wed, 13 Feb 2008 01:18:20 +0300


--=-q3Nt2JUuhyDSUbsPZ0eS
Content-Type: text/plain
Content-Transfer-Encoding: 7bit

Hello,

Here are patches to bring the Mono/Alpha port to the current level.

Thank you,
Sergey.


--=-q3Nt2JUuhyDSUbsPZ0eS
Content-Disposition: attachment; filename=mono-alpha.patch
Content-Type: text/x-patch; name=mono-alpha.patch; charset=us-ascii
Content-Transfer-Encoding: 7bit

Index: mono/mono/mini/tramp-alpha.c
===================================================================
--- mono/mono/mini/tramp-alpha.c	(revision 95543)
+++ mono/mono/mini/tramp-alpha.c	(working copy)
@@ -181,7 +181,7 @@
       }
     
     // alpha_at points to start of this method !!!
-    alpha_ldq(code, alpha_r0, alpha_at, off);
+    alpha_ldq(code, alpha_pv, alpha_at, off);
     alpha_br(code, alpha_zero, 2);
     
     *code = (unsigned int)(((unsigned long)mono_get_lmf_addr) &amp; 0xFFFFFFFF);
@@ -193,7 +193,7 @@
      * The call might clobber argument registers, but they are already
      * saved to the stack/global regs.
      */
-    alpha_jsr(code, alpha_ra, alpha_r0, 0);
+    alpha_jsr(code, alpha_ra, alpha_pv, 0);
     
     // Save lmf_addr
     alpha_stq(code, alpha_r0, alpha_sp,
Index: mono/mono/mini/mini-alpha.c
===================================================================
--- mono/mono/mini/mini-alpha.c	(revision 95543)
+++ mono/mono/mini/mini-alpha.c	(working copy)
@@ -25,9 +25,9 @@
 #define ALPHA_PRINT if (mini_alpha_verbose_level)
 
 #define NEW_INS(cfg,ins,dest,op) do {					\
-   (dest) = mono_mempool_alloc0 ((cfg)-&gt;mempool, sizeof (MonoInst));       \
-   (dest)-&gt;opcode = (op);  \
-   MONO_INST_LIST_ADD_TAIL (&amp;(dest)-&gt;node, &amp;(ins)-&gt;node);
+   (dest) = mono_mempool_alloc0 ((cfg)-&gt;mempool, sizeof (MonoInst));    \
+   (dest)-&gt;opcode = (op);                                               \
+   MONO_INST_LIST_ADD_TAIL (&amp;(dest)-&gt;node, &amp;(ins)-&gt;node);               \
 } while (0)
 
 #define NEW_ICONST(cfg,dest,val) do {					\
@@ -91,6 +91,9 @@
 
 gboolean lmf_addr_key_inited = FALSE;
 
+MonoBreakpointInfo
+mono_breakpoint_info [MONO_BREAKPOINT_ARRAY_SIZE];
+
 /*====================== End of Global Variables ===================*/
 
 gpointer mono_arch_get_lmf_addr (void);
@@ -191,7 +194,7 @@
 }
 
 static void
-add_valuetype (MonoGenericSharingContext *ctx, MonoMethodSignature *sig, ArgInfo *ainfo, MonoType *type,
+add_valuetype (MonoGenericSharingContext *gsctx, MonoMethodSignature *sig, ArgInfo *ainfo, MonoType *type,
                gboolean is_return,
                guint32 *gr, guint32 *fr, guint32 *stack_size)
 {
@@ -419,17 +422,21 @@
 
 /*========================= End of Function ========================*/
 
+// This peephole function is called before &quot;local_regalloc&quot; method
+// TSV_TODO - Check what we need to move here
 void
 mono_arch_peephole_pass_1 (MonoCompile *cfg, MonoBasicBlock *bb)
 {
+  CFG_DEBUG(3) g_print (&quot;ALPHA: PEEPHOLE_1 pass\n&quot;);
 }
 
+// This peephole function is called after &quot;local_regalloc&quot; method
 void
 mono_arch_peephole_pass_2 (MonoCompile *cfg, MonoBasicBlock *bb)
 {
   MonoInst *ins, *n;
    
-  CFG_DEBUG(3) g_print (&quot;ALPHA: PEEPHOLE pass\n&quot;);
+  CFG_DEBUG(3) g_print (&quot;ALPHA: PEEPHOLE_2 pass\n&quot;);
 
   MONO_INST_LIST_FOR_EACH_ENTRY_SAFE (ins, n, &amp;bb-&gt;ins_list, node) {
       MonoInst *last_ins = mono_inst_list_prev (&amp;ins-&gt;node, &amp;bb-&gt;ins_list);
@@ -910,8 +917,8 @@
  * Converts complex opcodes into simpler ones so that each IR instruction
  * corresponds to one machine instruction.
  */
-static void
-  mono_arch_lowering_pass (MonoCompile *cfg, MonoBasicBlock *bb)
+void
+mono_arch_lowering_pass (MonoCompile *cfg, MonoBasicBlock *bb)
 {   
    MonoInst *ins, *n, *next, *temp;
    
@@ -983,7 +990,7 @@
 	       ins-&gt;sreg2 = temp-&gt;dreg;
 				  
 	       // We should try to reevaluate new IR opcode
-	       continue;
+	       //continue;
 	     }
 	   
 	   next = mono_inst_list_next (&amp;ins-&gt;node, &amp;bb-&gt;ins_list);
@@ -1003,7 +1010,7 @@
                ins-&gt;sreg2 = temp-&gt;dreg;
 
                // We should try to reevaluate new IR opcode
-               continue;
+               //continue;
              }
 
 	   next = mono_inst_list_next (&amp;ins-&gt;node, &amp;bb-&gt;ins_list);
@@ -5861,9 +5868,39 @@
   return 0;
 }
 
+gpointer
+mono_arch_get_this_arg_from_call (MonoMethodSignature *sig, gssize *regs, guint8 *code)
+{
+  unsigned int *pc = (unsigned int *)code;
 
+  ALPHA_PRINT g_debug(&quot;ALPHA_CHECK: [mono_arch_get_this_arg_from_call] code: %p regs: %p&quot;,
+          pc, regs);
+
+        if (MONO_TYPE_ISSTRUCT (sig-&gt;ret))
+                return (gpointer)regs [alpha_a1];
+        else
+                return (gpointer)regs [alpha_a0];
+}
+
+gpointer
+mono_arch_get_delegate_invoke_impl (MonoMethodSignature *sig, gboolean has_target)
+{
+	unsigned int *code, *start;
+        MonoDomain *domain = mono_domain_get ();
+        int i;
+
+  	ALPHA_PRINT g_debug(&quot;ALPHA_CHECK: [mono_arch_get_delegate_invoke_impl]&quot;);
+
+        /* FIXME: Support more cases */
+        if (MONO_TYPE_ISSTRUCT (sig-&gt;ret))
+                return NULL;
+
+	return NULL;
+}
+
 guint32
 mono_arch_get_patch_offset (guint8 *code)
 {
   return 3;
 }
+
Index: mono/mono/mini/mini-alpha.h
===================================================================
--- mono/mono/mini/mini-alpha.h	(revision 95543)
+++ mono/mono/mini/mini-alpha.h	(working copy)
@@ -306,5 +306,10 @@
 #define MONO_ARCH_HAVE_CREATE_TRAMPOLINE_FROM_TOKEN 1
 #define MONO_ARCH_HAVE_CREATE_DELEGATE_TRAMPOLINE 1
 
+typedef struct {
+    guint8 *address;
+    guint8 *saved_byte;
+} MonoBreakpointInfo;
 
+extern MonoBreakpointInfo  mono_breakpoint_info[MONO_BREAKPOINT_ARRAY_SIZE];
 #endif /* __MONO_MINI_ALPHA_H__ */  
Index: mono/mono/utils/mono-membar.h
===================================================================
--- mono/mono/utils/mono-membar.h	(revision 95543)
+++ mono/mono/utils/mono-membar.h	(working copy)
@@ -135,6 +135,21 @@
 {
 	mono_memory_barrier ();
 }
+#elif defined(__alpha__)
+static inline void mono_memory_barrier (void)
+{
+        __asm__ __volatile__ (&quot;mb&quot; : : : &quot;memory&quot;);
+}
+
+static inline void mono_memory_read_barrier (void)
+{
+        mono_memory_barrier ();
+}
+
+static inline void mono_memory_write_barrier (void)
+{
+        mono_memory_barrier ();
+}
 #endif
 
 #endif	/* _MONO_UTILS_MONO_MEMBAR_H_ */

--=-q3Nt2JUuhyDSUbsPZ0eS--
]