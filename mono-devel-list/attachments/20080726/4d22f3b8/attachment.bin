Index: HttpCachePolicy.cs
===================================================================
--- HttpCachePolicy.cs	(revision 108870)
+++ HttpCachePolicy.cs	(working copy)
@@ -75,18 +75,28 @@
 		//
 		// Used externally
 		//
-		internal bool have_expire_date;
-		internal DateTime expire_date;
-		internal bool have_last_modified;
-		internal DateTime last_modified;
+#if NET_2_0
+		DateTime? expire_date;
+		DateTime? last_modified;
+#else
+		bool have_expire_date;
+		DateTime expire_date;
+		bool have_last_modified;
+		DateTime last_modified;
+#endif
 
 		//bool LastModifiedFromFileDependencies;
 		HttpCacheRevalidation revalidation;
 		string vary_by_custom;
-		bool HaveMaxAge;
-		TimeSpan MaxAge;
-		bool HaveProxyMaxAge;
-		TimeSpan ProxyMaxAge;
+#if NET_2_0
+		TimeSpan? max_age;
+		TimeSpan? proxy_max_age;
+#else
+		bool have_max_age;
+		TimeSpan max_age;
+		bool have_proxy_max_age;
+		TimeSpan proxy_max_age;
+#endif
 		ArrayList fields;
 		bool sliding_expiration;
 		int duration;
@@ -133,10 +143,6 @@
 			get { return sliding_expiration; }
 		}
 
-		internal DateTime Expires {
-			get { return expire_date; }
-		}
-
 		internal ArrayList ValidationCallbacks {
 			get { return validation_callbacks; }
 		}
@@ -152,12 +158,92 @@
 
 		internal int ExpireMinutes ()
 		{
-			if (!have_expire_date)
+			if (!HasExpireDate)
 				return 0;
 
-			return (expire_date - DateTime.Now).Minutes;
+			return (Expires - DateTime.Now).Minutes;
 		}
 
+		internal DateTime Expires {
+			get {
+#if NET_2_0
+				return expire_date.GetValueOrDefault ();
+#else
+				return expire_date;
+#endif
+			}
+		}
+
+		private bool HasExpireDate {
+			get {
+#if NET_2_0
+				return expire_date.HasValue;
+#else
+				return have_expire_date;
+#endif
+			}
+		}
+
+		private DateTime LastModified {
+			get {
+#if NET_2_0
+				return last_modified.GetValueOrDefault ();
+#else
+				return last_modified;
+#endif
+			}
+		}
+
+		private bool HasLastModified {
+			get {
+#if NET_2_0
+				return last_modified.HasValue;
+#else
+				return have_last_modified;
+#endif
+			}
+		}
+
+		private TimeSpan MaxAge {
+			get {
+#if NET_2_0
+				return max_age.GetValueOrDefault ();
+#else
+				return max_age;
+#endif
+			}
+		}
+
+		private bool HasMaxAge {
+			get {
+#if NET_2_0
+				return max_age.HasValue;
+#else
+				return have_max_age;
+#endif
+			}
+		}
+
+		private TimeSpan ProxyMaxAge {
+			get {
+#if NET_2_0
+				return proxy_max_age.GetValueOrDefault ();
+#else
+				return proxy_max_age;
+#endif
+			}
+		}
+
+		private bool HasProxyMaxAge {
+			get {
+#if NET_2_0
+				return proxy_max_age.HasValue;
+#else
+				return have_proxy_max_age;
+#endif
+			}
+		}
+
 		public void AddValidationCallback (HttpCacheValidateHandler handler, object data)
 		{
 			if (handler == null)
@@ -235,10 +321,12 @@
 
 		public void SetExpires (DateTime date)
 		{
-			if (have_expire_date && date > expire_date)
+			if (HasExpireDate && date > Expires)
 				return;
 
+#if ONLY_1_1
 			have_expire_date = true;
+#endif
 			expire_date = date;
 		}
 
@@ -247,10 +335,12 @@
 			if (date > DateTime.Now)
 				throw new ArgumentOutOfRangeException ("date");
 
-			if (have_last_modified && date < last_modified)
+			if (HasLastModified && date < LastModified)
 				return;
 
+#if ONLY_1_1
 			have_last_modified = true;
+#endif
 			last_modified = date;
 		}
 
@@ -264,11 +354,13 @@
 			if (date < TimeSpan.Zero)
 				throw new ArgumentOutOfRangeException ("date");
 
-			if (HaveMaxAge && MaxAge < date)
+			if (HasMaxAge && MaxAge < date)
 				return;
 
-			MaxAge = date;
-			HaveMaxAge = true;
+#if ONLY_1_1
+			have_max_age = true;
+#endif
+			max_age = date;
 		}
 
 		public void SetNoServerCaching ()
@@ -291,10 +383,13 @@
 			if (delta < TimeSpan.Zero)
 				throw new ArgumentOutOfRangeException ("delta");
 
-			if (HaveProxyMaxAge && ProxyMaxAge < delta)
+			if (HasProxyMaxAge && ProxyMaxAge < delta)
 				return;
 
-			ProxyMaxAge = delta;
+#if ONLY_1_1
+			have_proxy_max_age = true;
+#endif
+			proxy_max_age = delta;
 		}
 
 		public void SetRevalidation (HttpCacheRevalidation revalidation)
@@ -369,11 +464,11 @@
 					headers.Add (new UnknownResponseHeader ("Pragma", "no-cache"));
 				}
 			} else {
-				if (MaxAge.TotalSeconds != 0)
+				if (HasMaxAge && MaxAge.TotalSeconds != 0)
 					cc = String.Concat (cc, ", max-age=", ((long) MaxAge.TotalSeconds).ToString ());
 
-				if (have_expire_date) {
-					string expires = TimeUtil.ToUtcTimeString (expire_date);
+				if (HasExpireDate) {
+					string expires = TimeUtil.ToUtcTimeString (Expires);
 					headers.Add (new UnknownResponseHeader ("Expires", expires));
 				}
 			}
@@ -391,9 +486,9 @@
 			if (etag != null)
 				headers.Add (new UnknownResponseHeader ("ETag", etag));
 
-			if (have_last_modified)
+			if (HasLastModified)
 				headers.Add (new UnknownResponseHeader ("Last-Modified",
-							     TimeUtil.ToUtcTimeString (last_modified)));
+							     TimeUtil.ToUtcTimeString (LastModified)));
 
 			if (!vary_by_params.IgnoreParams) {
 				BaseResponseHeader vb = vary_by_params.GetResponseHeader ();
@@ -434,7 +529,9 @@
 
 			if (last_modified_from_file_dependencies && latest_mod > DateTime.MinValue) {
 				last_modified = latest_mod;
+#if ONLY_1_1
 				have_last_modified = true;
+#endif
 			}
 
 			if (doEtag && etagsb.Length > 0)
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 108870)
+++ ChangeLog	(working copy)
@@ -1,5 +1,11 @@
 2008-07-26  Gert Driesen  <drieseng@users.sourceforge.net>
 
+	* HttpCachePolicy.cs: On the 2.0 profile, use nullable types instead
+	of separate bool fields to track whether a given field is set.
+	Changed accessibility for a few fields from internal to private.
+
+2008-07-26  Gert Driesen  <drieseng@users.sourceforge.net>
+
 	* HttpCachePolicy.cs: Only add Expires header if expire date is
 	actually set. Removed extra tabs and regions. Code formatting.
 
