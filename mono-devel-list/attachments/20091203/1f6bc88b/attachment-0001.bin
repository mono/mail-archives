Index: System/String.cs
===================================================================
--- System/String.cs	(revision 147553)
+++ System/String.cs	(working copy)
@@ -2479,25 +2479,6 @@
 			}
 		}
 
-		internal unsafe void InternalSetLength (int newLength)
-		{
-			if (newLength > length)
-				throw new ArgumentOutOfRangeException ("newLength", "newLength as to be <= length");
-
-			// zero terminate, we can pass string objects directly via pinvoke
-			// we also zero the rest of the string, since the new GC needs to be
-			// able to handle the changing size (it will skip the 0 bytes).
-			fixed (char * pStr = &start_char) {
-				char *p = pStr + newLength;
-				char *end = pStr + length;
-				while (p < end) {
-					p [0] = '\0';
-					p++;
-				}
-			}
-			length = newLength;
-		}
-
 		[ReliabilityContractAttribute (Consistency.WillNotCorruptState, Cer.MayFail)]
 		// When modifying it, GetCaseInsensitiveHashCode() should be modified as well.
 		public unsafe override int GetHashCode ()
Index: System.Text/StringBuilder.cs
===================================================================
--- System.Text/StringBuilder.cs	(revision 147553)
+++ System.Text/StringBuilder.cs	(working copy)
@@ -207,8 +207,7 @@
 			if (null != _cached_str)
 				return _cached_str;
 
-			// If we only have a half-full buffer we return a new string.
-			if (_length < (_str.Length >> 1)) 
+			if (_length != _str.Length)
 			{
 				// use String.SubstringUnchecked instead of String.Substring
 				// as the former is guaranteed to create a new string object
@@ -217,7 +216,6 @@
 			}
 
 			_cached_str = _str;
-			_str.InternalSetLength(_length);
 
 			return _str;
 		}