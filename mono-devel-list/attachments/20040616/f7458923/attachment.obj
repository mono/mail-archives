? gc.log
Index: System.Data/ChangeLog
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data/ChangeLog,v
retrieving revision 1.218
diff -u -r1.218 ChangeLog
--- System.Data/ChangeLog	15 Jun 2004 09:50:39 -0000	1.218
+++ System.Data/ChangeLog	16 Jun 2004 17:41:13 -0000
@@ -1,3 +1,8 @@
+2004-06-16  Gert Driesen <drieseng@users.sourceforge.net>
+
+	* DBConcurrencyException.cs: fixed serialization compatibility with
+	MS.NET
+
 2004-06-15  Atsushi Enomoto  <atsushi@ximian.com>
 
 	* DataSet.cs : children of non-root rows were not properly written.
Index: System.Data/DBConcurrencyException.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data/DBConcurrencyException.cs,v
retrieving revision 1.10
diff -u -r1.10 DBConcurrencyException.cs
--- System.Data/DBConcurrencyException.cs	16 Jun 2004 13:37:06 -0000	1.10
+++ System.Data/DBConcurrencyException.cs	16 Jun 2004 17:41:14 -0000
@@ -60,7 +60,12 @@
 			: base (message, inner)
 		{
 		}
-#endif
+#endif
+
+		private DBConcurrencyException (SerializationInfo si, StreamingContext sc) : base(si, sc)
+		{
+		}
+
 		#endregion // Constructors
 
 		#region Properties
@@ -99,9 +104,8 @@
 		public override void GetObjectData (SerializationInfo info, StreamingContext context)
 		{
 			if (info == null)
-                                throw new ArgumentNullException ("info");
+				throw new ArgumentNullException ("info");
 
-			info.AddValue ("DataRow", row);
 			base.GetObjectData (info, context);
 		}
 
Index: System.Data.Odbc/ChangeLog
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data.Odbc/ChangeLog,v
retrieving revision 1.28
diff -u -r1.28 ChangeLog
--- System.Data.Odbc/ChangeLog	16 Jun 2004 06:23:05 -0000	1.28
+++ System.Data.Odbc/ChangeLog	16 Jun 2004 17:41:15 -0000
@@ -1,3 +1,10 @@
+2004-06-16  Gert Driesen <drieseng@users.sourceforge.net>
+
+	* OdbcError.cs: fixed serialization compatibility with MS.NET
+	* OdbcErrorCollection.cs: fixed serialization compatibility with
+	MS.NET
+	* OdbcException.cs: fixed serialization compatibility with MS.NET
+
 2004-06-16  Sureshkumar T (tsureshkumar@novell.com)
 	* OdbcDataReader.cs: Added GetValue support for Sql Binary type to return byte array.
 			     Implemented GetBytes method.
Index: System.Data.Odbc/OdbcError.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data.Odbc/OdbcError.cs,v
retrieving revision 1.5
diff -u -r1.5 OdbcError.cs
--- System.Data.Odbc/OdbcError.cs	16 Jun 2004 13:41:13 -0000	1.5
+++ System.Data.Odbc/OdbcError.cs	16 Jun 2004 17:41:15 -0000
@@ -6,29 +6,29 @@
 //
 // Copyright (C) Brian Ritchie, 2002
 //
-
-//
-// Copyright (C) 2004 Novell, Inc (http://www.novell.com)
-//
-// Permission is hereby granted, free of charge, to any person obtaining
-// a copy of this software and associated documentation files (the
-// "Software"), to deal in the Software without restriction, including
-// without limitation the rights to use, copy, modify, merge, publish,
-// distribute, sublicense, and/or sell copies of the Software, and to
-// permit persons to whom the Software is furnished to do so, subject to
-// the following conditions:
-// 
-// The above copyright notice and this permission notice shall be
-// included in all copies or substantial portions of the Software.
-// 
-// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
-// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
-// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
-// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-//
+
+//
+// Copyright (C) 2004 Novell, Inc (http://www.novell.com)
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
 
 using System.Collections;
 using System.ComponentModel;
@@ -37,19 +37,22 @@
 
 namespace System.Data.Odbc
 {
+	[Serializable]
 	public sealed class OdbcError
 	{
-		string message,source,sqlstate;
-		int nativeerror;
+		string _message;
+		string _source;
+		string _state;
+		int _nativeerror;
 
 		#region Constructors
 
 		internal OdbcError(string Source)
 		{
-			nativeerror=1;
-			source=Source;
-			message="Error in "+source;
-			sqlstate="";
+			_nativeerror = 1;
+			_source = Source;
+			_message = "Error in " + _source;
+			_state = "";
 		}
 
 		internal OdbcError(string Source, OdbcHandleType HandleType, IntPtr Handle)
@@ -59,26 +62,26 @@
 			byte[] buf_MsgText=new byte[buflen];
 			byte[] buf_SqlState=new byte[buflen];
 			bool NeedsDecode=true;
-			this.source=Source;
+			_source = Source;
 			switch (HandleType)
 			{
 				case OdbcHandleType.Dbc:
 					ret=libodbc.SQLError(IntPtr.Zero,Handle,IntPtr.Zero, buf_SqlState,
-						ref nativeerror, buf_MsgText, buflen, ref txtlen);
+						ref _nativeerror, buf_MsgText, buflen, ref txtlen);
 					break;
 				case OdbcHandleType.Stmt:
 					ret=libodbc.SQLError(IntPtr.Zero,IntPtr.Zero,Handle, buf_SqlState,
-						ref nativeerror, buf_MsgText, buflen, ref txtlen);
+						ref _nativeerror, buf_MsgText, buflen, ref txtlen);
 					break;
 				case OdbcHandleType.Env:
 					ret=libodbc.SQLError(Handle,IntPtr.Zero,IntPtr.Zero, buf_SqlState,
-						ref nativeerror, buf_MsgText, buflen, ref txtlen);
+						ref _nativeerror, buf_MsgText, buflen, ref txtlen);
 					break;
 				default:
-					nativeerror=1;
-					source=Source;
-					message="Error in "+source;
-					sqlstate="";
+					_nativeerror = 1;
+					_source = Source;
+					_message = "Error in " + _source;
+					_state = "";
 					NeedsDecode=false;
 					break;
 			}
@@ -86,15 +89,15 @@
 			{
 				if (ret!=OdbcReturn.Success)
 				{
-					nativeerror=1;
-					source=Source;
-					message="Unable to retreive error information from ODBC driver manager";
-					sqlstate="";
+					_nativeerror = 1;
+					_source = Source;
+					_message = "Unable to retreive error information from ODBC driver manager";
+					_state = "";
 				}
 				else
 				{
-					sqlstate=System.Text.Encoding.Default.GetString(buf_SqlState).Replace((char) 0,' ').Trim();;
-					message=System.Text.Encoding.Default.GetString(buf_MsgText).Replace((char) 0,' ').Trim();;
+					_state = System.Text.Encoding.Default.GetString (buf_SqlState).Replace ((char) 0, ' ').Trim ();
+					_message = System.Text.Encoding.Default.GetString (buf_MsgText).Replace ((char) 0, ' ').Trim ();
 				}
 			}
 		}
@@ -107,7 +110,7 @@
 		{
 			get
 			{
-				return message;
+				return _message;
 			}
 		}
 
@@ -115,7 +118,7 @@
 		{
 			get
 			{
-				return nativeerror;
+				return _nativeerror;
 			}
 		}
 
@@ -123,7 +126,7 @@
 		{
 			get
 			{
-				return source;
+				return _source;
 			}
 		}
 
@@ -131,7 +134,7 @@
 		{
 			get
 			{
-				return sqlstate;
+				return _state;
 			}
 		}
 
Index: System.Data.Odbc/OdbcErrorCollection.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data.Odbc/OdbcErrorCollection.cs,v
retrieving revision 1.5
diff -u -r1.5 OdbcErrorCollection.cs
--- System.Data.Odbc/OdbcErrorCollection.cs	16 Jun 2004 13:41:13 -0000	1.5
+++ System.Data.Odbc/OdbcErrorCollection.cs	16 Jun 2004 17:41:15 -0000
@@ -37,13 +37,14 @@
 
 namespace System.Data.Odbc
 {
-	public sealed class OdbcErrorCollection : ICollection, IEnumerable
-	{
-		#region Fields
-
-		ArrayList list = new ArrayList ();
-	
-		#endregion // Fields
+	[Serializable]
+	public sealed class OdbcErrorCollection : ICollection, IEnumerable
+	{
+		#region Fields
+
+		ArrayList _items = new ArrayList ();
+	
+		#endregion // Fields
 
 		#region Constructors
 
@@ -58,69 +59,69 @@
 		{
 			get 
 			{
-				return list.Count;
-			}
-		}
-
-		public OdbcError this[int index] 
-		{
-			get 
+				return _items.Count;
+			}
+		}
+
+		public OdbcError this[int index] 
+		{
+			get 
 			{
-				return (OdbcError) list[index];
-			}
-		}
-
-		object ICollection.SyncRoot 
-		{
-			get 
+				return (OdbcError) _items[index];
+			}
+		}
+
+		object ICollection.SyncRoot 
+		{
+			get 
 			{
-				return list.SyncRoot;
-			}
-		}
-
-		bool ICollection.IsSynchronized 
-		{
-			get 
+				return _items.SyncRoot;
+			}
+		}
+
+		bool ICollection.IsSynchronized 
+		{
+			get 
 			{
-				return list.IsSynchronized;
-			}
-		}
-
-		#endregion // Properties
-
-		#region Methods
-
-		internal void Add (OdbcError error)
-		{
-			list.Add ((object) error);
-		}
-		
-		public void CopyTo (Array array, int index)
-		{
-			if (array == null)
-				throw new ArgumentNullException("array");		
-			
-			if ((index < array.GetLowerBound (0)) || (index > array.GetUpperBound (0)))
-				throw new ArgumentOutOfRangeException("index");
-		
-			// is the check for IsFixedSize required?
-			if ((array.IsFixedSize) || (index + this.Count > array.GetUpperBound (0)))
+				return _items.IsSynchronized;
+			}
+		}
+
+		#endregion // Properties
+
+		#region Methods
+
+		internal void Add (OdbcError error)
+		{
+			_items.Add ((object) error);
+		}
+		
+		public void CopyTo (Array array, int index)
+		{
+			if (array == null)
+				throw new ArgumentNullException("array");		
+			
+			if ((index < array.GetLowerBound (0)) || (index > array.GetUpperBound (0)))
+				throw new ArgumentOutOfRangeException("index");
+		
+			// is the check for IsFixedSize required?
+			if ((array.IsFixedSize) || (index + this.Count > array.GetUpperBound (0)))
 				throw new ArgumentException("array");
 
-			((OdbcError[])(list.ToArray ())).CopyTo (array, index);
-			 
-		}
-
-		public IEnumerator GetEnumerator ()
-		{
-			return list.GetEnumerator ();
-		}
-
-		IEnumerator IEnumerable.GetEnumerator ()
-		{
-			return GetEnumerator ();
-		}
+			((OdbcError[]) (_items.ToArray ())).CopyTo (array, index);
 
-		#endregion // Methods
-	}
-}
+		}
+
+		public IEnumerator GetEnumerator ()
+		{
+			return _items.GetEnumerator ();
+		}
+
+		IEnumerator IEnumerable.GetEnumerator ()
+		{
+			return GetEnumerator ();
+		}
+
+		#endregion // Methods
+	}
+}
Index: System.Data.Odbc/OdbcException.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data.Odbc/OdbcException.cs,v
retrieving revision 1.6
diff -u -r1.6 OdbcException.cs
--- System.Data.Odbc/OdbcException.cs	16 Jun 2004 13:41:13 -0000	1.6
+++ System.Data.Odbc/OdbcException.cs	16 Jun 2004 17:41:15 -0000
@@ -1,11 +1,11 @@
 //
-// System.Data.Odbc.OdbcDataReader
+// System.Data.Odbc.OdbcException
 //
 // Author:
-//   Brian Ritchie (brianlritchie@hotmail.com) 
+//   Brian Ritchie (brianlritchie@hotmail.com)
 //
 // Copyright (C) Brian Ritchie, 2002
-//
+//
 
 //
 // Copyright (C) 2004 Novell, Inc (http://www.novell.com)
@@ -28,7 +28,7 @@
 // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-//
+//
 
 using System.Collections;
 using System.ComponentModel;
@@ -39,52 +39,59 @@
 
 namespace System.Data.Odbc
 {
-	public sealed class OdbcException : SystemException 
+	[Serializable]
+	public sealed class OdbcException : SystemException
 	{
-		OdbcErrorCollection col;
-
-		internal OdbcException(OdbcError Error) : base (Error.Message)
-		{
-			col=new OdbcErrorCollection();
-			col.Add(Error);
-		}
+		OdbcErrorCollection odbcErrors;
 
-		public OdbcErrorCollection Errors 
+		internal OdbcException(OdbcError Error) : base (Error.Message)
 		{
-			get 
+			odbcErrors = new OdbcErrorCollection ();
+			odbcErrors.Add (Error);
+		}
+
+		public OdbcErrorCollection Errors 
+		{
+			get 
 			{
-				return col;
-			}
-		}
-
-		public override string Source 
-		{	
-			get
+				return odbcErrors;
+			}
+		}
+
+		public override string Source 
+		{	
+			get
 			{
-				return col[0].Source;
-			}
-		}
-
-
-		public override string Message {
-			get 
+				return odbcErrors[0].Source;
+			}
+		}
+
+
+		public override string Message {
+			get 
 			{
-				
-				return  col[0].Message;
-			}
-		}	
-		
-		#region Methods
 
-		public override void GetObjectData (SerializationInfo si, StreamingContext context)
-		{
-			if (si == null)
-				throw new ArgumentNullException ("si");
+				return odbcErrors[0].Message;
+			}
+		}
 
-			si.AddValue ("col", col);
-			base.GetObjectData (si, context);
+		private OdbcException (SerializationInfo si, StreamingContext sc) : base(si, sc)
+		{
+			odbcErrors = new OdbcErrorCollection ();
+			odbcErrors = ((OdbcErrorCollection) si.GetValue ("odbcErrors", typeof(OdbcErrorCollection)));
 		}
+
+		#region Methods
+
+		public override void GetObjectData (SerializationInfo si, StreamingContext context)
+		{
+			if (si == null)
+				throw new ArgumentNullException ("si");
 
-		#endregion // Methods
-	}
-}
+			si.AddValue ("odbcErrors", odbcErrors, typeof(OdbcErrorCollection));
+			base.GetObjectData (si, context);
+		}
+
+		#endregion // Methods
+	}
+}
Index: System.Data.OleDb/ChangeLog
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data.OleDb/ChangeLog,v
retrieving revision 1.31
diff -u -r1.31 ChangeLog
--- System.Data.OleDb/ChangeLog	15 Jun 2004 05:01:54 -0000	1.31
+++ System.Data.OleDb/ChangeLog	16 Jun 2004 17:41:15 -0000
@@ -1,3 +1,9 @@
+2004-06-16  Gert Driesen <drieseng@users.sourceforge.net>
+
+	* OleDbError.cs: fixed serialization compatibility with MS.NET
+	* OleDbErrorCollection.cs: fixed serialization compatibility with
+	MS.NET
+
 2004-06-13  Gert Driesen <drieseng@users.sourceforge.net>
 
 	* OleDbLiteral.cs: changed enum field values to match MS.NET
Index: System.Data.OleDb/OleDbError.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data.OleDb/OleDbError.cs,v
retrieving revision 1.5
diff -u -r1.5 OleDbError.cs
--- System.Data.OleDb/OleDbError.cs	16 Jun 2004 13:42:38 -0000	1.5
+++ System.Data.OleDb/OleDbError.cs	16 Jun 2004 17:41:16 -0000
@@ -37,20 +37,21 @@
 
 namespace System.Data.OleDb
 {
+	[Serializable]
 	public sealed class OleDbError
 	{
-		private string errorMessage;
+		private string message;
 		private int nativeError;
-		private string errorSource;
+		private string source;
 		private string sqlState;
 
 		#region Constructors
 
 		internal OleDbError (string msg, int code, string source, string sql)
-		{
-			errorMessage = msg;
-			nativeError = code;
-			errorSource = source;
+		{
+			message = msg;
+			nativeError = code;
+			this.source = source;
 			sqlState = sql;
 		}
 		
@@ -59,8 +60,8 @@
 		#region Properties
 
 		public string Message {
-			get {
-				return errorMessage;
+			get {
+				return message;
 			}
 		}
 
@@ -71,8 +72,8 @@
 		}
 
 		public string Source {
-			get {
-				return errorSource;
+			get {
+				return source;
 			}
 		}
 
@@ -92,9 +93,9 @@
 			string toStr;
                         String stackTrace;
                         stackTrace = " <Stack Trace>";
-                        // FIXME: generate the correct SQL error string
-                        toStr = "OleDbError:" + errorMessage + stackTrace;
-                        return toStr;
+                        // FIXME: generate the correct SQL error string
+			toStr = "OleDbError:" + message + stackTrace;
+			return toStr;
 
 		}
 
Index: System.Data.OleDb/OleDbErrorCollection.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data.OleDb/OleDbErrorCollection.cs,v
retrieving revision 1.6
diff -u -r1.6 OleDbErrorCollection.cs
--- System.Data.OleDb/OleDbErrorCollection.cs	16 Jun 2004 13:42:38 -0000	1.6
+++ System.Data.OleDb/OleDbErrorCollection.cs	16 Jun 2004 17:41:16 -0000
@@ -39,46 +39,46 @@
 
 namespace System.Data.OleDb
 {
-	[ListBindableAttribute ( false)]	
-
+	[ListBindableAttribute ( false)]
+	[Serializable]
 	public sealed class OleDbErrorCollection : ICollection, IEnumerable
 	{
 		#region Fields
 
-		ArrayList list;
+		ArrayList items;
 	
-		#endregion // Fields
-
-		#region Constructors
-
-		internal OleDbErrorCollection() {
-		}
-
+		#endregion // Fields
+
+		#region Constructors
+
+		internal OleDbErrorCollection() {
+		}
+
 		#endregion Constructors
 
 		#region Properties 
 
 		public int Count {
-			get {
-				return list.Count;
+			get {
+				return items.Count;
 			}
 		}
 
 		public OleDbError this[int index] {
-			get {
-				return (OleDbError) list[index];
+			get {
+				return (OleDbError) items[index];
 			}
 		}
 
 		object ICollection.SyncRoot {
-			get {
-				return list.SyncRoot;
+			get {
+				return items.SyncRoot;
 			}
 		}
 
 		bool ICollection.IsSynchronized {
-			get {
-				return list.IsSynchronized;
+			get {
+				return items.IsSynchronized;
 			}
 		}
 
@@ -87,8 +87,8 @@
 		#region Methods
 
 		internal void Add (OleDbError error)
-		{
-			list.Add ((object) error);
+		{
+			items.Add ((object) error);
 		}
 		
 		public void CopyTo (Array array, int index) 
@@ -101,16 +101,16 @@
                                                                                                     
                         // is the check for IsFixedSize required?
                         if ((array.IsFixedSize) || (index + this.Count > array.GetUpperBound (0)))
-                                throw new ArgumentException("array");
-                                                                                                    
-                        ((OleDbError[])(list.ToArray ())).CopyTo (array, index);
-                                                                                                    
-
+                                throw new ArgumentException("array");
+
+			((OleDbError[]) (items.ToArray ())).CopyTo (array, index);
+
+
 		}
 
 		public IEnumerator GetEnumerator ()
-		{
-			return list.GetEnumerator ();
+		{
+			return items.GetEnumerator ();
 		}
 
 		IEnumerator IEnumerable.GetEnumerator ()
Index: System.Data.SqlTypes/ChangeLog
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data.SqlTypes/ChangeLog,v
retrieving revision 1.21
diff -u -r1.21 ChangeLog
--- System.Data.SqlTypes/ChangeLog	8 Jun 2004 04:45:30 -0000	1.21
+++ System.Data.SqlTypes/ChangeLog	16 Jun 2004 17:41:17 -0000
@@ -1,5 +1,13 @@
-2004-06-08 Umadevi S <sumadevi@novell.com>
-	* SqlGuid.cs - fixed bug 59420. Implemented CompareTo according to MSDN documenation
+2044-06-16  Gert Driesen <drieseng@users.sourceforge.net>
+
+	* SqlNullValueException.cs: fixed serialization
+	* SqlTruncateException.cs: fixed serialization
+	* SqlTypeException.cs: fixed serialization
+
+2004-06-08  Umadevi S <sumadevi@novell.com>
+
+	* SqlGuid.cs - fixed bug 59420. Implemented CompareTo according 
+	to MSDN documenation
 
 2004-05-27  Atsushi Enomoto  <atsushi@ximian.com>
 
Index: System.Data.SqlTypes/SqlNullValueException.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data.SqlTypes/SqlNullValueException.cs,v
retrieving revision 1.6
diff -u -r1.6 SqlNullValueException.cs
--- System.Data.SqlTypes/SqlNullValueException.cs	16 Jun 2004 13:50:41 -0000	1.6
+++ System.Data.SqlTypes/SqlNullValueException.cs	16 Jun 2004 17:41:17 -0000
@@ -33,9 +33,8 @@
 using System.Runtime.Serialization;
 
 namespace System.Data.SqlTypes {
-
 	[Serializable]
-	public sealed class SqlNullValueException : SqlTypeException
+	public sealed class SqlNullValueException : SqlTypeException, ISerializable
 	{
 		public SqlNullValueException ()
 			: base (Locale.GetText ("Data is Null. This method or property cannot be called on Null values."))
@@ -50,6 +49,16 @@
 		public SqlNullValueException (string message, Exception inner)
 			: base (message, inner)
 		{
-		}
+		}
+
+		private SqlNullValueException (SerializationInfo si, StreamingContext sc) 
+			: base(si.GetString("SqlNullValueExceptionMessage"))
+		{
+		}
+
+		void ISerializable.GetObjectData (SerializationInfo si, StreamingContext context)
+		{
+			si.AddValue ("SqlNullValueExceptionMessage", Message, typeof(string));
+		}
 	}
 }
Index: System.Data.SqlTypes/SqlTruncateException.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data.SqlTypes/SqlTruncateException.cs,v
retrieving revision 1.5
diff -u -r1.5 SqlTruncateException.cs
--- System.Data.SqlTypes/SqlTruncateException.cs	16 Jun 2004 13:50:41 -0000	1.5
+++ System.Data.SqlTypes/SqlTruncateException.cs	16 Jun 2004 17:41:17 -0000
@@ -35,7 +35,7 @@
 namespace System.Data.SqlTypes {
 
 	[Serializable]
-	public sealed class SqlTruncateException : SqlTypeException
+	public sealed class SqlTruncateException : SqlTypeException, ISerializable
 	{
 		public SqlTruncateException ()
 			: base (Locale.GetText ("This value is being truncated"))
@@ -50,6 +50,16 @@
 		public SqlTruncateException (string message, Exception inner)
 			: base (message, inner)
 		{
-		}
+		}
+
+		private SqlTruncateException (SerializationInfo si, StreamingContext sc) 
+			: base(si.GetString("SqlTruncateExceptionMessage"))
+		{
+		}
+
+		void ISerializable.GetObjectData (SerializationInfo si, StreamingContext context)
+		{
+			si.AddValue ("SqlTruncateExceptionMessage", Message, typeof(string));
+		}
 	}
 }
Index: System.Data.SqlTypes/SqlTypeException.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data.SqlTypes/SqlTypeException.cs,v
retrieving revision 1.5
diff -u -r1.5 SqlTypeException.cs
--- System.Data.SqlTypes/SqlTypeException.cs	16 Jun 2004 13:50:41 -0000	1.5
+++ System.Data.SqlTypes/SqlTypeException.cs	16 Jun 2004 17:41:17 -0000
@@ -34,10 +34,9 @@
 
 namespace System.Data.SqlTypes {
 
-	[Serializable]			
-	public class SqlTypeException : SystemException
+	[Serializable]
+	public class SqlTypeException : SystemException, ISerializable
 	{
-		
 		public SqlTypeException()
 			: base (Locale.GetText ("A sql exception has occured."))
 		{
@@ -46,17 +45,21 @@
 		public SqlTypeException (string message)
 			: base (message)
 		{
-		}
-
-		protected SqlTypeException (SerializationInfo info, StreamingContext context)
-			: base (info, context)
-		{
-		}
-
+		}
+
 		public SqlTypeException (string message, Exception inner)
-                        : base (message, inner)
-                {
-                }
-
+			: base (message, inner)
+		{
+		}
+
+		protected SqlTypeException (SerializationInfo si, StreamingContext sc) 
+			: base(si.GetString("SqlTypeExceptionMessage"))
+		{
+		}
+
+		void ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
+		{
+			si.AddValue ("SqlTypeExceptionMessage", Message, typeof(string));
+		}
 	}
 }
