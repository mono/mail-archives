Index: Mono.WebServer.FastCgi/ApplicationHost.cs
===================================================================
--- Mono.WebServer.FastCgi/ApplicationHost.cs	(revision 146684)
+++ Mono.WebServer.FastCgi/ApplicationHost.cs	(working copy)
@@ -27,11 +27,10 @@
 //
 
 using System;
-using Mono.FastCgi;
-using Mono.WebServer;
 using System.Web;
 using System.IO;
 using System.Text;
+using IOPath = System.IO.Path;
 
 namespace Mono.WebServer.FastCgi
 {
@@ -47,8 +46,8 @@
 				this);
 			
 			string path = responder.Path;
-			if (path [path.Length - 1] != '/' && Directory.Exists (
-				worker.MapPath (path))) {
+			if (path != null && path.Length > 0 && path [path.Length - 1] != '/' 
+					&& VirtualDirectoryExists (path, worker)) {
 				Redirect (worker, path + '/');
 				return;
 			}
@@ -79,5 +78,156 @@
 			wr.FlushResponse (true);
 			wr.CloseConnection ();
 		}
+		
+		/// <summary>
+		///    Splits a virtual URI into its virtual path and virtual 
+		///    path-info parts as identified by the web-application 
+		///    host in the current <see cref="AppDomain" />.
+		/// </summary>
+		/// <param name="verb">
+		///    The HTTP verb of the request.
+		/// </param>
+		/// <param name="uri">
+		///    The virtual URI, including any path-info, which need to be split.
+		/// </param>
+		/// <param name="realUri">
+		///    Returns the path part of the URI.
+		/// </param>
+		/// <param name="pathInfo">
+		///    Returns the trailing path-info part of the URI, if any.
+		/// </param>
+		/// <remarks>
+		///    This method wraps the <see 
+		///    cref="Mono.WebServer.Paths.GetPathsFromUri" /> 
+		///    method so that it can easily be called 
+		///    from a remote <see cref="AppDomain" />.
+		/// </remarks>
+		public void GetPathsFromUri (string verb, string uri, out string realUri, out string pathInfo)
+		{
+			Paths.GetPathsFromUri (this, verb, uri, out realUri, out pathInfo);
+		}
+		
+		/// <summary>
+		///    Maps the specified virtual path to a physical path on 
+		///    the server as defined in the <see cref="AppDomain" /> 
+		///    of the current <see cref="ApplicationHost" />.
+		/// </summary>
+		/// <param name="virtualPath">
+		///    The virtual path to be mapped.
+		/// </param>
+		/// <returns>
+		///    The physical path of the specified virtual path.
+		/// </returns>
+		/// <remarks>
+		///    As a method that is available on this <see 
+		///    cref="ApplicationHost" />, which derives 
+		///    from <see cref="MarshalByRefObject" />, it 
+		///    enables path mapping to be queried from a 
+		///    remote <see cref="AppDomain" />.
+		/// </remarks>
+		public string MapPath (string virtualPath)
+		{
+			string physPath;
+
+			#if NET_2_0
+			physPath = System.Web.Hosting.HostingEnvironment.MapPath (
+				(virtualPath == null || virtualPath.Length == 0 || 
+					virtualPath.TrimStart().Length == 0) ? "/" : virtualPath);
+			if (physPath != null && physPath.Length != 0)
+				return physPath;
+			#endif
+
+			// For old .NET 1.x, and as a fallback mechanism until Mono's 
+			// HostingEnvironment.MapPath method can perform the mapping 
+			// without requiring an HttpContext.Current.Request object
+			// (the MS one can do it), just map the path somewhat similar 
+			// to the Mono.WebServer.MonoWorkerRequest.MapPath method (but 
+			// unfortunately without the customizable event mechanism)...
+			// TODO: Remove the logic below for NET_2_0 as soon as Mono's DefaultVirtualPathProvider.MapPath method works properly (and then also remove the workarounds in ApplicationHost.VirtualFileExists and ApplicationHost.VirtualDirectoryExists)
+
+			if (virtualPath == null || virtualPath.Length == 0 || virtualPath == this.VPath)
+				return this.Path.Replace ('/', IOPath.DirectorySeparatorChar);
+
+			physPath = virtualPath;
+			if (physPath[0] == '~' && physPath.Length > 2 && physPath[1] == '/')
+				physPath = physPath.Substring (1);
+
+			int len = this.VPath.Length;
+			if (physPath.StartsWith (this.VPath) && (physPath.Length == len || physPath[len] == '/'))
+				physPath = physPath.Substring (len + 1);
+
+			while (physPath.Length > 0 && physPath[0] == '/') {
+				physPath = physPath.Substring (1);
+			}
+
+			if (IOPath.DirectorySeparatorChar != '/')
+				physPath = physPath.Replace ('/', IOPath.DirectorySeparatorChar);
+
+			return IOPath.Combine (this.Path, physPath);
+		}
+		
+		/// <summary>
+		///    Determines if a virtual path specifies a file on 
+		///    the server as defined in the <see cref="AppDomain" /> 
+		///    of the current <see cref="ApplicationHost" />.
+		/// </summary>
+		/// <param name="virtualPath">
+		///    The virtual path to be checked.
+		/// </param>
+		/// <returns>
+		///    True if the virtual path is that of a file, otherwise false.
+		/// </returns>
+		/// <remarks>
+		///    As a method that is available on this <see 
+		///    cref="ApplicationHost" />, which derives 
+		///    from <see cref="MarshalByRefObject" />, it 
+		///    enables virtual file checks to be performed 
+		///    from a remote <see cref="AppDomain" />.
+		/// </remarks>
+		public bool VirtualFileExists (string virtualPath)
+		{
+			#if NET_2_0
+			System.Web.Hosting.VirtualPathProvider vpp = 
+				System.Web.Hosting.HostingEnvironment.VirtualPathProvider;
+			// TODO: Remove the second condition of the "if" statement (it is only a workaround) involving DefaultVirtualPathProvider as soon as Mono's DefaultVirtualPathProvider.FileExists method works properly (i.e., the indirectly-called HostingEnvironment.MapPath method should not require an HttpContext.Current.Request object to do its work; also see the comment in the ApplicationHost.MapPath method above)
+			if (vpp != null && !vpp.GetType().FullName.Equals("System.Web.Hosting.DefaultVirtualPathProvider", StringComparison.Ordinal))
+				return vpp.FileExists (virtualPath);
+			#endif
+			string physicalPath = MapPath (virtualPath);
+			return File.Exists (physicalPath);
+		}
+		
+		/// <summary>
+		///    Determines if a virtual path specifies a directory on 
+		///    the server as defined in the <see cref="AppDomain" /> 
+		///    of the current <see cref="ApplicationHost" />, while 
+		///    possibly using the specified <see cref="WorkerRequest" /> 
+		///    to help with path mapping if needed.
+		/// </summary>
+		/// <param name="virtualPath">
+		///    The virtual path to be checked.
+		/// </param>
+		/// <param name="worker">
+		///    The worker request that should be used to perform 
+		///    the mapping of the virtual path to the physical 
+		///    path if no virtual-path provider is registered 
+		///    in the current <see cref="AppDomain" />.
+		/// </param>
+		/// <returns>
+		///    True if the virtual path is that of a directory, otherwise false.
+		/// </returns>
+		private bool VirtualDirectoryExists (string virtualPath, WorkerRequest worker)
+		{
+			#if NET_2_0
+			System.Web.Hosting.VirtualPathProvider vpp = 
+				System.Web.Hosting.HostingEnvironment.VirtualPathProvider;
+			// TODO: Remove the second condition of the "if" statement (it is only a workaround) involving DefaultVirtualPathProvider as soon as Mono's DefaultVirtualPathProvider.DirectoryExists method works properly (i.e., the indirectly-called HostingEnvironment.MapPath method should not require an HttpContext.Current.Request object to do its work; also see the comment in the ApplicationHost.MapPath method above)
+			if (vpp != null && !vpp.GetType().FullName.Equals("System.Web.Hosting.DefaultVirtualPathProvider", StringComparison.Ordinal))
+				return vpp.DirectoryExists (virtualPath);
+			#endif
+			string physicalPath = (worker != null) ? 
+				worker.MapPath (virtualPath) : MapPath (virtualPath);
+			return Directory.Exists (physicalPath);
+		}
 	}
 }
Index: Mono.WebServer.FastCgi/Request.cs
===================================================================
--- Mono.WebServer.FastCgi/Request.cs	(revision 146684)
+++ Mono.WebServer.FastCgi/Request.cs	(working copy)
@@ -247,6 +247,12 @@
 		private string rpath = null;
 		
 		/// <summary>
+		///    Contains the application host, after 
+		///    <see cref="ParseParameterData" /> is called.
+		/// </summary>
+		private Mono.WebServer.FastCgi.ApplicationHost appHost;
+		
+		/// <summary>
 		///    Gets the host name used to make the request handled by
 		///    the current instance.
 		/// </summary>
@@ -314,6 +320,22 @@
 			}
 		}
 		
+		/// <summary>
+		///    Gets the application host mapped to the current instance.
+		/// </summary>
+		/// <value>
+		///    A <see cref="Mono.WebServer.FastCgi.ApplicationHost" /> 
+		///    containing the application host mapped to current instance.
+		/// </value>
+		/// <remarks>
+		///    This is a marshalled object from the hosting <see cref="AppDomain" />.
+		/// </remarks>
+		internal protected Mono.WebServer.FastCgi.ApplicationHost ApplicationHost {
+			get {
+				return appHost;
+			}
+		}
+		
 		#endregion
 		
 		
@@ -419,129 +441,113 @@
 		}
 
 		/// <summary>
-		///    Parses the parameters and tries to deduce SCRIPT_NAME & PATH_INFO
-		///    from several other params supplied by the web server.
+		///    Parses the parameters and tries to deduce consistent 
+		///    values for the following from other parameters that 
+		///    may be supplied by the web server:
+		///        SCRIPT_NAME (virtual path), 
+		///        SCRIPT_FILENAME (physical path), 
+		///        PATH_INFO (virtual path-info) and 
+		///        PATH_TRANSLATED (physical path-info).
 		///    Required by Apache.
 		/// </summary>
 		void ParseParameterData ()
 		{
-			string redirectUrl = GetParameter ("REDIRECT_URL");
-			if (redirectUrl == null || redirectUrl.Length == 0)
-				return;
-
+			string redirectUrl;
 			string pathInfo = GetParameter ("PATH_INFO");
-			if (pathInfo == null || pathInfo.Length == 0)
-				return;
-
-			if (pathInfo [0] != '/' || pathInfo != redirectUrl)
-				return;
-
 			string pathTranslated = GetParameter ("PATH_TRANSLATED");
-			if (pathTranslated == null || pathTranslated.Length == 0)
+			Mono.WebServer.VPathToHost vapp;
+			if (pathTranslated == null || pathTranslated.Length == 0 || 
+				pathInfo == null || pathInfo.Length == 0 || pathInfo [0] != '/' || 
+				(null != (redirectUrl = GetParameter ("REDIRECT_URL")) && redirectUrl.Length != 0 && pathInfo != redirectUrl)) {
+				// Only consider REDIRECT_URL if it actually contains 
+				// something, since it may not always be present (depending 
+				// on installed Apache modules & setup).  Also, never allow 
+				// PATH_INFO to be null (nor PATH_TRANSLATED), even for 
+				// cases where this method is mostly short-circuited.
+				if (pathInfo == null)
+					SetParameter ("PATH_INFO", String.Empty);
+				if (pathTranslated == null)
+					SetParameter ("PATH_TRANSLATED", String.Empty);
+				vapp = Mono.WebServer.FastCgi.Server.GetApplicationForPath (
+					this.HostName, this.PortNumber, this.Path, this.PhysicalPath);
+				if (vapp != null)
+					appHost = (Mono.WebServer.FastCgi.ApplicationHost)vapp.AppHost;
 				return;
+			}
 
-			string documentRoot = GetParameter ("DOCUMENT_ROOT");
-			if (documentRoot == null || documentRoot.Length == 0)
-				return;
-
-			// At this point we have:
+			// At this point we have:  (with REDIRECT_URL being optional)
 			//
 			// REDIRECT_URL=/dir/test.aspx/foo
 			// PATH_INFO=/dir/test.aspx/foo
 			// PATH_TRANSLATED=/srv/www/htdocs/dir/test.aspx/foo
 			// SCRIPT_NAME=/cgi-bin/fastcgi-mono-server
 			// SCRIPT_FILENAME=/srv/www/cgi-bin/fastcgi-mono-server
-			// DOCUMENT_ROOT=/srv/www/htdocs
 
-			bool trailingSlash = pathTranslated [pathTranslated.Length - 1] == '/' ||
-				(IOPath.DirectorySeparatorChar != '/' && pathTranslated [pathTranslated.Length - 1] == IOPath.DirectorySeparatorChar);
+			string virtPath = pathInfo;
+			string physPath = pathTranslated;
+			string virtPathInfo = String.Empty;
+			string physPathInfo = String.Empty;
+			try {
+				vapp = Mono.WebServer.FastCgi.Server.GetApplicationForPath (
+					this.HostName, this.PortNumber, virtPath, physPath);
+				if (vapp == null)
+					return;  // Set values in finally
+				appHost = (Mono.WebServer.FastCgi.ApplicationHost)vapp.AppHost;
+				if (appHost == null)
+					return;  // Set values in finally
 
-			if ((trailingSlash || !File.Exists (pathTranslated)) && !Directory.Exists (pathTranslated)) {
-				char [] separators;
-				string physPath = pathTranslated;
-				string filePath = null;
+				// Split the virtual path and virtual path-info
+				string verb = GetParameter ("REQUEST_METHOD");
+				if (verb == null || verb.Length == 0)
+					verb = "GET";  // For the sake of paths, assume a default
+				appHost.GetPathsFromUri (verb, pathInfo, out virtPath, out virtPathInfo);
+				if (virtPathInfo == null)
+					virtPathInfo = String.Empty;
+				if (virtPath == null)
+					virtPath = String.Empty;
 
-				if (IOPath.DirectorySeparatorChar == '/')
-					separators = null;
-				else
-					separators = new char [] { '/', IOPath.DirectorySeparatorChar };
+				// Re-map the physical path
+				physPath = appHost.MapPath (virtPath);
+				if (physPath == null)
+					physPath = String.Empty;
 
-				// Reverse scan until the first existing file is found.
-				// When the last existing component is a directory the
-				// following component is considered to be the file name.
-
-				while (true) {
-					int index;
-					string virtPath;
-					string virtPathInfo;
-					string physPathInfo;
-
-					if (IOPath.DirectorySeparatorChar == '/')
-						index = physPath.LastIndexOf ('/');
-					else
-						index = physPath.LastIndexOfAny (separators);
-
-					// No more path components to trim
-					if (index <= 0 || pathInfo.Length <= (pathTranslated.Length - index)) {
-						if (filePath == null)
-							break;
-
-						physPath = filePath;
-					} else {
-						physPath = pathTranslated.Substring (0, index);
-
-						if (!File.Exists (physPath)) {
-							// Last component with a trailing slash has already been tested.
-							if ((filePath != null || !trailingSlash) && Directory.Exists (physPath)) {
-								if (filePath == null)
-									break;
-
-								physPath = filePath;
-							} else {
-								filePath = physPath;
-								continue;
-							}
-						}
+				// Re-map the physical path-info
+				string relaPathInfo = virtPathInfo;
+				if (relaPathInfo.Length != 0 && IOPath.DirectorySeparatorChar != '/')
+					relaPathInfo = relaPathInfo.Replace ('/', IOPath.DirectorySeparatorChar);
+				while (relaPathInfo.Length > 0 && relaPathInfo[0] == IOPath.DirectorySeparatorChar) {
+					relaPathInfo = relaPathInfo.Substring (1);
+				}
+				if (physPath.Length == 0) {
+					physPathInfo = relaPathInfo;
+					return;  // Set values in finally
+				}
+				string physRoot = physPath;
+				try {
+					if (appHost.VirtualFileExists (virtPath)) {
+						physRoot = IOPath.GetDirectoryName (physRoot);
+						if (physRoot == null)
+							physRoot = String.Empty;
 					}
-
-					// Now we set:
-					//
-					// SCRIPT_NAME=/dir/test.aspx
-					// SCRIPT_FILENAME=/srv/www/htdocs/dir/test.aspx
-					// PATH_INFO=/foo
-					// PATH_TRANSLATED=/srv/www/htdocs/dir/foo
-
-					virtPath = pathInfo.Substring (0, pathInfo.Length - (pathTranslated.Length - physPath.Length));
-					virtPathInfo = pathInfo.Substring (virtPath.Length);
-
-					// Ensure that physical and virtual path info are the same.
-					if (IOPath.DirectorySeparatorChar == '/') {
-						if (string.Compare (pathTranslated, physPath.Length, virtPathInfo, 0, virtPathInfo.Length) != 0)
-							break;
-						physPathInfo = virtPathInfo;
-					} else {
-						physPathInfo = pathTranslated.Substring (physPath.Length);
-						if (physPathInfo.Replace (IOPath.DirectorySeparatorChar, '/') != virtPathInfo)
-							break;
-					}
-
-					SetParameter ("SCRIPT_NAME", virtPath);
-					SetParameter ("SCRIPT_FILENAME", physPath);
-					SetParameter ("PATH_INFO", virtPathInfo);
-					// Actual physical path info may be different but this is safe and PHP does the same.
-					if (documentRoot [documentRoot.Length - 1] == '/' ||
-						(IOPath.DirectorySeparatorChar != '/' && documentRoot [documentRoot.Length - 1] == IOPath.DirectorySeparatorChar))
-						documentRoot = documentRoot.Substring (0, documentRoot.Length - 1);
-					SetParameter ("PATH_TRANSLATED", documentRoot + physPathInfo);
-					return;
+				} catch {
+					// Assume virtPath, physPath & physRoot 
+					// specify directories (and not files)
 				}
+				physPathInfo = IOPath.Combine (physRoot, relaPathInfo);
 			}
+			finally {
+				// Now, if all went well, we set:
+				//
+				// SCRIPT_NAME=/dir/test.aspx
+				// SCRIPT_FILENAME=/srv/www/htdocs/dir/test.aspx
+				// PATH_INFO=/foo
+				// PATH_TRANSLATED=/srv/www/htdocs/dir/foo
 
-			// There is no path info
-			SetParameter ("SCRIPT_NAME", pathInfo);
-			SetParameter ("SCRIPT_FILENAME", pathTranslated);
-			SetParameter ("PATH_INFO", null);
-			SetParameter ("PATH_TRANSLATED", null);
+				SetParameter ("SCRIPT_NAME", virtPath);
+				SetParameter ("SCRIPT_FILENAME", physPath);
+				SetParameter ("PATH_INFO", virtPathInfo);
+				SetParameter ("PATH_TRANSLATED", physPathInfo);
+			}
 		}
 
 		/// <summary>
Index: Mono.WebServer.FastCgi/Responder.cs
===================================================================
--- Mono.WebServer.FastCgi/Responder.cs	(revision 146684)
+++ Mono.WebServer.FastCgi/Responder.cs	(working copy)
@@ -78,13 +78,12 @@
 			request.SendOutputText (Path + "\r\n");
 			request.SendOutputText (PhysicalPath + "\r\n");
 		*/
+
+			ApplicationHost appHost = request.ApplicationHost;
 			
-			VPathToHost host = Server.GetApplicationForPath (
-				HostName, PortNumber, Path, PhysicalPath);
-			
-			// If the host is null, the server was unable to
-			// determine a sane plan. Alert the client.
-			if (host == null) {
+			// If the application host is null, the server was
+			// unable to determine a sane plan. Alert the client.
+			if (appHost == null) {
 				request.SendOutputText (string.Format (error500,
 					HostName, PortNumber,
 					Path, PhysicalPath));
@@ -92,7 +91,7 @@
 			}
 			
 			try {
-				((ApplicationHost)host.AppHost).ProcessRequest (this);
+				appHost.ProcessRequest (this);
 			} catch (Exception e) {
 				Logger.Write (LogLevel.Error,
 					"ERROR PROCESSING REQUEST: " + e);
