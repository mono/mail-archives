
using System;
using System.Runtime.InteropServices;
using System.Text;
using MbUnit.Framework;
using MbUnit.Core;

namespace NormalizationTest
{
	[TestFixture]
	public class NormalizationTests
	{
		
		[RowTest]
		[Row(new byte[] { 76, 97, 204, 129, 116, 105, 204, 136, 110, 204, 131, 32, 79, 204, 130, 110, 101, 204, 128 }, "Látïñ Ônè")]
		[Row(new byte[] { 206, 155, 206, 191, 204, 129, 206, 179, 206, 191, 207, 130 }, "Λόγος")]
		[Row(new byte[] { 67, 111, 109, 98, 111, 32, 206, 155, 206, 191, 204, 129, 206, 179, 206, 191, 207, 130, 32, 215, 148, 214, 184, 215, 153, 214, 184, 215, 148, 32, 215, 148, 214, 183, 215, 147, 214, 184, 214, 188, 215, 145, 214, 184, 215, 168, 32, 208, 191, 208, 190, 209, 135, 208, 181, 209, 130, 208, 186, 209, 131, 32, 227, 129, 175, 227, 129, 171, 227, 130, 136, 32, 115, 116, 114, 105, 110, 103 }, "Combo Λόγος הָיָה הַדָּבָר почетку はによ string")]
		[Row(new byte[] { 206, 177, 204, 147, 205, 133 }, "ᾀ")]
		public void TestNormalizeWithMono(byte[] abyInput, string strExpected)
		{
			string strToNormalize = System.Text.Encoding.UTF8.GetString(abyInput);
			string monoNorm = strToNormalize.Normalize(NormalizationForm.FormC);

			Console.WriteLine("normalize(NormalizationForm.formC): {0}", monoNorm);
/*			Console.WriteLine("Mono gives strExpected: {0}", monoNorm == strExpected);
			WriteBytesToConsole(monoNorm, strExpected);
*/			
			Assert.AreEqual(monoNorm, strExpected);
		}

		private void WriteBytesToConsole(string strNorm, string strExpected)
		{
			byte[] normBytes = Encoding.UTF8.GetBytes(strNorm);
			byte[] expectedBytes = Encoding.UTF8.GetBytes(strExpected);

			for (int byteIndex = 0; byteIndex < normBytes.Length || byteIndex < expectedBytes.Length; ++byteIndex)
			{
				if (byteIndex < normBytes.Length)
					Console.Write(" normalizedBytes[{0}] = {1} ", byteIndex, normBytes[byteIndex]);
				else
					Console.Write("                            ");

				if (byteIndex < expectedBytes.Length)
					Console.WriteLine(" exepectedBytes[{0}] = {1}", byteIndex, expectedBytes[byteIndex]);
				else
					Console.WriteLine("");
			}
		}
	}
	
	public class Program
	{
		public static int Main(string[] args)
		{
			using (AutoRunner runner = new AutoRunner())
			{
				runner.Load();
				runner.Run();
				return runner.ExitCode;
			}
		}
	}
}