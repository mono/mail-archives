@@ -58,9 +58,7 @@ static void
 update_current_thread_stack (void *start)
 {
 	int stack_guard = 0;
-#ifndef USE_MONO_CTX
-	void *reg_ptr = cur_thread_regs;
-#endif
+
 	SgenThreadInfo *info = mono_thread_info_current ();
 	
 	info->stack_start = align_pointer (&stack_guard);
@@ -71,8 +69,8 @@ update_current_thread_stack (void *start)
 	if (mono_gc_get_gc_callbacks ()->thread_suspend_func)
 		mono_gc_get_gc_callbacks ()->thread_suspend_func (info->runtime_data, NULL, &info->ctx);
 #else
-	ARCH_STORE_REGS (reg_ptr);
-	memcpy (&info->regs, reg_ptr, sizeof (info->regs));
+	ARCH_STORE_REGS (cur_thread_regs);
+	memcpy (&info->regs, cur_thread_regs, sizeof (info->regs));
 	if (mono_gc_get_gc_callbacks ()->thread_suspend_func)
 		mono_gc_get_gc_callbacks ()->thread_suspend_func (info->runtime_data, NULL, NULL);
 #endif
@@ -116,7 +114,7 @@ restart_threads_until_none_in_managed_allocator (void)
 			if (!info->thread_is_dying && (!info->stack_start || info->in_critical_region ||
 					is_ip_in_managed_allocator (info->stopped_domain, info->stopped_ip))) {
 				binary_protocol_thread_restart ((gpointer)mono_thread_info_get_tid (info));
-				SGEN_LOG (3, "thread %p resumed.", (void*)info->info.native_handle);
+				SGEN_LOG (3, "thread %p resumed.", (void*) (size_t) info->info.native_handle);
 				result = sgen_resume_thread (info);
 				if (result) {
 					++restart_count;
