Index: class/corlib/System.Runtime.Remoting.Channels/CrossAppDomainChannel.cs
===================================================================
RCS file: /mono/mcs/class/corlib/System.Runtime.Remoting.Channels/CrossAppDomainChannel.cs,v
retrieving revision 1.5
diff -u -r1.5 CrossAppDomainChannel.cs
--- class/corlib/System.Runtime.Remoting.Channels/CrossAppDomainChannel.cs	15 Mar 2003 16:34:21 -0000	1.5
+++ class/corlib/System.Runtime.Remoting.Channels/CrossAppDomainChannel.cs	6 Apr 2003 20:01:29 -0000
@@ -15,6 +15,7 @@
 using System.Runtime.Remoting.Contexts; 
 using System.Runtime.Serialization;
 using System.Runtime.Serialization.Formatters.Binary;
+using System.Runtime.CompilerServices;
 
 namespace System.Runtime.Remoting.Channels 
 {
@@ -25,22 +26,32 @@
 	{
 		// TODO: Add context support
 		private int _domainId;
+		private int _processId;
 
-		internal CrossAppDomainChannelData(int domainId) 
+		internal CrossAppDomainChannelData(int domainId, int processId) 
 		{
 			_domainId = domainId;
+			_processId	= processId;
 		}
 
 		internal int DomainID 
 		{  
 			get { return _domainId;	}
 		}
+
+		internal int ProcessID 
+		{  
+			get { return _processId;	}
+		}
 	}
 
 	// Responsible for marshalling objects between appdomains
 	[Serializable]
 	internal class CrossAppDomainChannel : IChannel, IChannelSender, IChannelReceiver 
 	{
+		[MethodImplAttribute(MethodImplOptions.InternalCall)]
+		private extern static int GetPid_internal();
+
 		private const String _strName = "MONOCAD";
 		private const String _strBaseURI = "MONOCADURI";
 		
@@ -76,7 +87,7 @@
 		// IChannelReceiver
 		public virtual Object ChannelData 
 		{
-			get { return new CrossAppDomainChannelData(Thread.GetDomainID()); }
+			get { return new CrossAppDomainChannelData(Thread.GetDomainID(), GetPid_internal()); }
 		}	
 		
 		public virtual String[] GetUrlsForUri(String objectURI) 
@@ -94,13 +105,18 @@
 			uri = null;
 			IMessageSink sink = null;
             
-			if (url == null && data != null) 
+			if (url == null && data != null)
 			{
 				// Get the data and then get the sink
 				CrossAppDomainChannelData cadData = data as CrossAppDomainChannelData;
 				if (cadData != null) 
-					// GetSink creates a new sink if we don't have any (use contexts here later)
-					sink = CrossAppDomainSink.GetSink(cadData.DomainID);
+				{
+					if(GetPid_internal() == cadData.ProcessID)
+					{
+						// GetSink creates a new sink if we don't have any (use contexts here later)
+						sink = CrossAppDomainSink.GetSink(cadData.DomainID);
+					}
+				}
 			} 
 			else 
 			{
