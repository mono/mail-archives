using System;
using System.Threading;

namespace MyApp
{
	[Serializable]
	public class MainClass
	{
		[STAThread]
		public static void Main(string[] arg)
		{
			AppDomain d = AppDomain.CreateDomain("Draggon");
			
			#if AnonymousMethods
			
			/*Issue Tips: With Anonymous methods the serializations fails.
			 * The exception is this: The type 'MyApp.MainClass+<>c__CompilerGenerated1' from the assembly 'MyApp, Version=1.0.2511.3145, Culture=neutral, PublicKeyToken=null' is not marked as serializable.
			 * (spanish) :El tipo 'MyApp.MainClass+<>c__CompilerGenerated1' del ensamblado 'MyApp, Version=1.0.2511.3255, Culture=neutral, PublicKeyToken=null' no está marcado como serializable.
			 * 
			 * I think that c__CompilerGenerated1 is a delegate type generated for the Anonymous method used in the code.
			 * and the solution is mark this generated type as Serializable.
			 * */
			
			d.UnhandledException+= delegate { 
				//c__CompilerGenerated is generated because this Anonymous method?
			Console.WriteLine("Log Exception inside the application domain"); 
			};
			#else
			//Issue Tips: Without Anonymous methods the remoting serializations works fine
			d.UnhandledException+= new UnhandledExceptionEventHandler(AppDomainExCatch);
			#endif
			
			
			Dragon dr = (Dragon) d.CreateInstanceFromAndUnwrap("MyApp.exe","MyApp.Dragon");
			dr.Dragoon();
			ThreadPool.QueueUserWorkItem(new WaitCallback(meto));
			Thread.Sleep(5000);
			Console.Read();
		}
		#if !AnonymousMethods
		public static void AppDomainExCatch(object obj,UnhandledExceptionEventArgs e)
		{
		Console.WriteLine("Log Exception inside the application domain,It works fine...");
		}
		#endif
		public static void meto(object obj)
		{
			Console.WriteLine("It works fine...");
		}
	}
}