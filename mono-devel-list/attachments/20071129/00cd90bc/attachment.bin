Index: SHA1.cs
===================================================================
--- SHA1.cs	(revision 90411)
+++ SHA1.cs	(working copy)
@@ -36,11 +36,24 @@
 #if NET_2_0
 	[ComVisible (true)]
 #endif
-	public abstract class SHA1 : HashAlgorithm {
+	public abstract class SHA1 : HashAlgorithm {
 
+		/// <summary>The block size given in the default spec (FIPS 160-1)</summary>		
+		protected const int SPEC_BLOCKSIZE = 64;
+
 		protected SHA1 ()
 		{
 			HashSizeValue = 160;
+		}
+		
+		public override int InputBlockSize
+		{
+			get { return SPEC_BLOCKSIZE; }
+		}
+		
+		public override int OutputBlockSize
+		{
+			get { return SPEC_BLOCKSIZE; }
 		}
 	
 		public static new SHA1 Create () 
Index: SHA256.cs
===================================================================
--- SHA256.cs	(revision 90411)
+++ SHA256.cs	(working copy)
@@ -36,8 +36,11 @@
 #if NET_2_0
 	[ComVisible (true)]
 #endif
-	public abstract class SHA256 : HashAlgorithm {
+	public abstract class SHA256 : HashAlgorithm {
 
+		/// <summary>The block size given in the default spec (FIPS 180-2)</summary>
+		protected const int SPEC_BLOCKSIZE = 64;
+
 #if NET_2_0
 		protected SHA256 ()
 #else
@@ -45,6 +48,16 @@
 #endif
 		{
 			HashSizeValue = 256;
+		}
+
+		public override int InputBlockSize
+		{
+			get { return SPEC_BLOCKSIZE; }
+		}
+		
+		public override int OutputBlockSize
+		{
+			get { return SPEC_BLOCKSIZE; }
 		}
 	
 		public static new SHA256 Create () 
Index: MD5.cs
===================================================================
--- MD5.cs	(revision 90411)
+++ MD5.cs	(working copy)
@@ -36,12 +36,25 @@
 #if NET_2_0
 	[ComVisible (true)]
 #endif
-	public abstract class MD5 : HashAlgorithm {
+	public abstract class MD5 : HashAlgorithm {
+		
+		/// <summary>The block size given in the default spec (RFC 1321)</summary>		
+		protected const int SPEC_BLOCKSIZE = 64;
 
 		// Why is it protected when others abstract hash classes are public ?
 		protected MD5 () 
 		{
 			HashSizeValue = 128;
+		}
+		
+		public override int InputBlockSize
+		{
+			get { return SPEC_BLOCKSIZE; }
+		}
+		
+		public override int OutputBlockSize
+		{
+			get { return SPEC_BLOCKSIZE; }
 		}
 	
 		public static new MD5 Create () 
Index: RIPEMD160.cs
===================================================================
--- RIPEMD160.cs	(revision 90411)
+++ RIPEMD160.cs	(working copy)
@@ -39,6 +39,10 @@
 	[ComVisible (true)]
 #endif
 	public abstract class RIPEMD160 : HashAlgorithm {
+		
+		/// <summary>The block size given in the default spec</summary>
+		protected const int SPEC_BLOCKSIZE = 64;
+
 		/// <summary>
 		/// Initializes a new instance of <see cref="RIPEMD160"/>.
 		/// </summary>
@@ -47,6 +51,16 @@
 			this.HashSizeValue = 160;
 		}
 
+		public override int InputBlockSize
+		{
+			get { return SPEC_BLOCKSIZE; }
+		}
+		
+		public override int OutputBlockSize
+		{
+			get { return SPEC_BLOCKSIZE; }
+		}
+
 		/// <summary>
 		/// Creates an instance of the default implementation of the <see cref="RIPEMD160"/> hash algorithm.
 		/// </summary>
Index: SHA512.cs
===================================================================
--- SHA512.cs	(revision 90411)
+++ SHA512.cs	(working copy)
@@ -36,8 +36,11 @@
 #if NET_2_0
 	[ComVisible (true)]
 #endif
-	public abstract class SHA512 : HashAlgorithm {
+	public abstract class SHA512 : HashAlgorithm {
 
+		/// <summary>The block size given in the default spec (FIPS 180-2)</summary>
+		protected const int SPEC_BLOCKSIZE = 128;
+
 #if NET_2_0
 		protected SHA512 ()
 #else
@@ -45,6 +48,16 @@
 #endif
 		{
 			HashSizeValue = 512;
+		}
+
+		public override int InputBlockSize
+		{
+			get { return SPEC_BLOCKSIZE; }
+		}
+		
+		public override int OutputBlockSize
+		{
+			get { return SPEC_BLOCKSIZE; }
 		}
 
 		public static new SHA512 Create () 
Index: SHA384.cs
===================================================================
--- SHA384.cs	(revision 90411)
+++ SHA384.cs	(working copy)
@@ -36,8 +36,11 @@
 #if NET_2_0
 	[ComVisible (true)]
 #endif
-	public abstract class SHA384 : HashAlgorithm {
+	public abstract class SHA384 : HashAlgorithm {
 
+		/// <summary>The block size given in the default spec (FIPS 180-2)</summary>
+		protected const int SPEC_BLOCKSIZE = 128;
+
 #if NET_2_0
 		protected SHA384 ()
 #else
@@ -45,6 +48,16 @@
 #endif
 		{
 			HashSizeValue = 384;
+		}
+
+		public override int InputBlockSize
+		{
+			get { return SPEC_BLOCKSIZE; }
+		}
+		
+		public override int OutputBlockSize
+		{
+			get { return SPEC_BLOCKSIZE; }
 		}
 
 		public static new SHA384 Create () 