Index: /monobuild/mcs/class/System/System.Text.RegularExpressions/arch.cs
===================================================================
--- /monobuild/mcs/class/System/System.Text.RegularExpressions/arch.cs	(revision 87867)
+++ /monobuild/mcs/class/System/System.Text.RegularExpressions/arch.cs	(revision 88065)
@@ -101,12 +101,16 @@
 
 	interface IMachine {
 		Match Scan (Regex regex, string text, int start, int end);
+		string [] Split (Regex regex, string input, int count, int startat);
+		string Replace (Regex regex, string input, string replacement, int count, int startat);
+		string Result (string replacement, Match match);
 	}
 
 	interface IMachineFactory {
 		IMachine NewInstance ();
 		IDictionary Mapping { get; set; }
 		int GroupCount { get; }
+		string [] NamesMapping { get; set; }
 	}
 
 	// Anchor SKIP OFFSET
Index: /monobuild/mcs/class/System/System.Text.RegularExpressions/Match.cs
===================================================================
--- /monobuild/mcs/class/System/System.Text.RegularExpressions/Match.cs	(revision 87867)
+++ /monobuild/mcs/class/System/System.Text.RegularExpressions/Match.cs	(revision 88065)
@@ -30,7 +30,7 @@
 namespace System.Text.RegularExpressions {
 
 	[Serializable]
-	public class Match : Group {
+	public partial class Match : Group {
 		public static Match Empty {
 			get { return empty; }
 		}
@@ -69,7 +69,7 @@
 			if (replacement.Length == 0)
 				throw new NotSupportedException ();
 
-			return ReplacementEvaluator.Evaluate (replacement, this);
+			return machine.Result (replacement, this);
 		}
 
 		// internal
@@ -83,7 +83,7 @@
 			this.groups = new GroupCollection (1);
 			groups.SetValue (this, 0);
 		}
-		
+#if !TARGET_JVM 
 		internal Match (Regex regex, IMachine machine, string text, int text_length, int n_groups, 
 				int index, int length, int n_caps) :
 			base (text, index, length, n_caps)
@@ -95,7 +95,7 @@
 			this.groups = new GroupCollection (n_groups);
 			groups.SetValue (this, 0);
 		}
-
+#endif
 		internal Regex Regex {
 			get { return regex; }
 		}
Index: /monobuild/mcs/class/System/System.Text.RegularExpressions/BaseMachine.cs
===================================================================
--- /monobuild/mcs/class/System/System.Text.RegularExpressions/BaseMachine.cs	(revision 0)
+++ /monobuild/mcs/class/System/System.Text.RegularExpressions/BaseMachine.cs	(revision 88065)
@@ -0,0 +1,127 @@
+ï»¿//
+// BaseMachine.jvm.cs
+//
+// Author:
+//	Arina Itkes  <arinai@mainsoft.com>
+//
+// Copyright (C) 2007 Mainsoft, Inc.
+//
+
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+
+
+using System;
+using System.Collections;
+
+namespace System.Text.RegularExpressions
+{
+	abstract class BaseMachine : IMachine
+	{
+		delegate void MatchAppendEvaluator (Match match, StringBuilder sb);
+
+		virtual public string Replace (Regex regex, string input, string replacement, int count, int startat) {
+			ReplacementEvaluator ev = new ReplacementEvaluator (regex, replacement);
+			return Replace (regex, input, new MatchAppendEvaluator (ev.EvaluateAppend), count, startat);
+		}
+
+		virtual public string [] Split (Regex regex, string input, int count, int startat) {
+			ArrayList splits = new ArrayList ();
+			if (count == 0)
+				count = Int32.MaxValue;
+
+			int ptr = startat;
+			Match m = null;
+			while (--count > 0) {
+				if (m != null)
+					m = m.NextMatch ();
+				else
+					m = regex.Match (input, ptr);
+
+				if (!m.Success)
+					break;
+
+				if (regex.RightToLeft)
+					splits.Add (input.Substring (m.Index + m.Length, ptr - m.Index - m.Length));
+				else
+					splits.Add (input.Substring (ptr, m.Index - ptr));
+
+				int gcount = m.Groups.Count;
+				for (int gindex = 1; gindex < gcount; gindex++) {
+					Group grp = m.Groups [gindex];
+					splits.Add (input.Substring (grp.Index, grp.Length));
+				}
+
+				if (regex.RightToLeft)
+					ptr = m.Index;
+				else
+					ptr = m.Index + m.Length;
+
+			}
+
+			if (regex.RightToLeft && ptr >= 0)
+				splits.Add (input.Substring (0, ptr));
+			if (!regex.RightToLeft && ptr <= input.Length)
+				splits.Add (input.Substring (ptr));
+
+			return (string []) splits.ToArray (typeof (string));
+		}
+
+		virtual public Match Scan (Regex regex, string text, int start, int end) {
+			throw new NotImplementedException ("Scan method must be implemented in derived classes");
+		}
+
+		virtual public string Result (string replacement, Match match)
+		{
+			return ReplacementEvaluator.Evaluate (replacement, match);
+		}
+
+		private static string Replace (Regex regex, string input, MatchAppendEvaluator evaluator, int count, int startat) {
+			StringBuilder result = new StringBuilder ();
+			int ptr = startat;
+			int counter = count;
+
+			result.Append (input, 0, ptr);
+
+			Match m = regex.Match (input, startat);
+			while (m.Success) {
+				if (count != -1)
+					if (counter-- <= 0)
+						break;
+				if (m.Index < ptr)
+					throw new SystemException ("how");
+				result.Append (input, ptr, m.Index - ptr);
+				evaluator (m, result);
+
+				ptr = m.Index + m.Length;
+				m = m.NextMatch ();
+			}
+
+			if (ptr == 0)
+				return input;
+
+			result.Append (input, ptr, input.Length - ptr);
+
+			return result.ToString ();
+		}
+	}
+}
Index: /monobuild/mcs/class/System/System.Text.RegularExpressions/interpreter.cs
===================================================================
--- /monobuild/mcs/class/System/System.Text.RegularExpressions/interpreter.cs	(revision 87867)
+++ /monobuild/mcs/class/System/System.Text.RegularExpressions/interpreter.cs	(revision 88065)
@@ -34,7 +34,7 @@
 
 namespace System.Text.RegularExpressions {
 
-	class Interpreter : IMachine {
+	partial class Interpreter : BaseMachine {
 		private int ReadProgramCount (int ptr)
 		{
 			int ret = program [ptr + 1];
@@ -61,7 +61,7 @@
 
 		// IMachine implementation
 
-		public Match Scan (Regex regex, string text, int start, int end) {
+		public override Match Scan (Regex regex, string text, int start, int end) {
 			this.text = text;
 			this.text_end = end;
 			this.scan_ptr = start;
Index: /monobuild/mcs/class/System/System.Text.RegularExpressions/Regex.cs
===================================================================
--- /monobuild/mcs/class/System/System.Text.RegularExpressions/Regex.cs	(revision 87867)
+++ /monobuild/mcs/class/System/System.Text.RegularExpressions/Regex.cs	(revision 88065)
@@ -43,7 +43,7 @@
 namespace System.Text.RegularExpressions {
 	
 	[Serializable]
-	public class Regex : ISerializable {
+	public partial class Regex : ISerializable {
 
 #if NET_2_0
 		private static int cache_size = 15;
@@ -210,39 +210,48 @@
 			this.roptions = options;
 			Init ();
 		}
-
+#if !TARGET_JVM
 		private void Init ()
 		{
 			this.machineFactory = cache.Lookup (this.pattern, this.roptions);
 
 			if (this.machineFactory == null) {
-				// parse and install group mapping
+				InitNewRegex();
+			} else {
+				this.group_count = this.machineFactory.GroupCount;
+				this.mapping = this.machineFactory.Mapping;
+				this._groupNumberToNameMap = this.machineFactory.NamesMapping;
+			}
+		}
+#endif
 
-				Parser psr = new Parser ();
-				RegularExpression re = psr.ParseRegularExpression (this.pattern, this.roptions);
-				this.group_count = re.GroupCount;
-				this.mapping = psr.GetMapping ();
+		private void InitNewRegex () 
+		{
+			this.machineFactory = CreateMachineFactory (this.pattern, this.roptions);
+			this.group_count = machineFactory.GroupCount;
+			this.mapping = machineFactory.Mapping;
+			this._groupNumberToNameMap = this.machineFactory.NamesMapping;
+		}
 
-				// compile
-				
-				ICompiler cmp;
-				//if ((this.roptions & RegexOptions.Compiled) != 0)
-				//	//throw new Exception ("Not implemented.");
-				//	cmp = new CILCompiler ();
-				//else
-				cmp = new PatternCompiler ();
+		private static IMachineFactory CreateMachineFactory (string pattern, RegexOptions options) 
+		{
+			Parser psr = new Parser ();
+			RegularExpression re = psr.ParseRegularExpression (pattern, options);
 
-				re.Compile (cmp, RightToLeft);
+			ICompiler cmp;
+			//if ((options & RegexOptions.Compiled) != 0)
+			//	//throw new Exception ("Not implemented.");
+			//	cmp = new CILCompiler ();
+			//else
+			cmp = new PatternCompiler ();
 
-				// install machine factory and add to pattern cache
+			re.Compile (cmp, (options & RegexOptions.RightToLeft) != 0);
 
-				this.machineFactory = cmp.GetMachineFactory ();
-				this.machineFactory.Mapping = mapping;
-				cache.Add (this.pattern, this.roptions, this.machineFactory);
-			} else {
-				this.group_count = this.machineFactory.GroupCount;
-				this.mapping = this.machineFactory.Mapping;
-			}
+			IMachineFactory machineFactory = cmp.GetMachineFactory ();
+			machineFactory.Mapping = psr.GetMapping ();
+			machineFactory.NamesMapping = GetGroupNamesArray (machineFactory.GroupCount, machineFactory.Mapping);
+
+			return machineFactory;
 		}
 
 #if NET_2_0
@@ -292,15 +301,10 @@
 
 		public string GroupNameFromNumber (int i)
 		{
-			if (i > group_count)
+			if (i < 0 || i > group_count)
 				return "";
-		
-			foreach (string name in mapping.Keys) {
-				if ((int) mapping [name] == i)
-					return name;
-			}
 
-			return "";
+			return _groupNumberToNameMap [i];
 		}
 
 		public int GroupNumberFromName (string name)
@@ -417,8 +421,7 @@
 
 		public string Replace (string input, string replacement, int count, int startat)
 		{
-			ReplacementEvaluator ev = new ReplacementEvaluator (this, replacement);
-			return Replace (input, new MatchAppendEvaluator (ev.EvaluateAppend), count, startat);
+			return CreateMachine ().Replace (this, input, replacement, count, startat);
 		}
 
 		// split methods
@@ -435,45 +438,7 @@
 
 		public string [] Split (string input, int count, int startat)
 		{
-			ArrayList splits = new ArrayList ();
-			if (count == 0)
-				count = Int32.MaxValue;
-
-			int ptr = startat;
-			Match m = null;
-			while (--count > 0) {
-				if (m != null)
-					m = m.NextMatch ();
-				else
-					m = Match (input, ptr);
-
-				if (!m.Success)
-					break;
-			
-				if (RightToLeft)
-					splits.Add (input.Substring (m.Index + m.Length, ptr - m.Index - m.Length));
-				else
-					splits.Add (input.Substring (ptr, m.Index - ptr));
-					
-				int gcount = m.Groups.Count;
-				for (int gindex = 1; gindex < gcount; gindex++) {
-					Group grp = m.Groups [gindex];
-					splits.Add (input.Substring (grp.Index, grp.Length));
-				}
-
-				if (RightToLeft)
-					ptr = m.Index; 
-				else
-					ptr = m.Index + m.Length;
-					
-			}
-
-			if (RightToLeft && ptr >= 0)
-				splits.Add (input.Substring (0, ptr));
-			if (!RightToLeft && ptr <= input.Length)
-				splits.Add (input.Substring (ptr));
-
-			return (string []) splits.ToArray (typeof (string));
+			return CreateMachine ().Split (this, input, count, startat);
 		}
 
 		// This method is called at the end of the constructor of compiled
@@ -528,10 +493,20 @@
 			return machineFactory.NewInstance ();
 		}
 
+		private static string [] GetGroupNamesArray (int groupCount, IDictionary mapping) 
+		{
+			string [] groupNumberToNameMap = new string [groupCount + 1];
+			foreach (string name in mapping.Keys) {
+				groupNumberToNameMap [(int) mapping [name]] = name;
+			}
+			return groupNumberToNameMap;
+		}
+
 		private IMachineFactory machineFactory;
 		private IDictionary mapping;
 		private int group_count;
 		private bool refsInitialized;
+		private string [] _groupNumberToNameMap;
 
 		
 		// protected members
Index: /monobuild/mcs/class/System/System.Text.RegularExpressions/compiler.cs
===================================================================
--- /monobuild/mcs/class/System/System.Text.RegularExpressions/compiler.cs	(revision 87867)
+++ /monobuild/mcs/class/System/System.Text.RegularExpressions/compiler.cs	(revision 88065)
@@ -102,8 +102,14 @@
 			set { mapping = value; }
 		}
 
+		public string [] NamesMapping {
+			get { return namesMapping; }
+			set { namesMapping = value; }
+		}
+
 		private IDictionary mapping;
 		private ushort[] pattern;
+		private string [] namesMapping;
 	}
 
 	class PatternCompiler : ICompiler {
