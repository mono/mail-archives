Index: ilasm/codegen/DeclSecurity.cs
===================================================================
--- ilasm/codegen/DeclSecurity.cs	(revision 0)
+++ ilasm/codegen/DeclSecurity.cs	(revision 0)
@@ -0,0 +1,38 @@
+//
+// Mono.ILASM.DeclSecurity
+//
+// Author(s):
+//  Ankit Jain  <JAnkit@novell.com>
+//
+// (C) 2005 Ankit Jain, All rights reserved
+//
+
+
+using System;
+using System.Collections;
+
+namespace Mono.ILASM {
+
+        public interface IDeclSecurityTarget {
+                void AddDeclSecurity (DeclSecurity declsecurity);
+        }
+
+        public class DeclSecurity {
+
+		private PEAPI.SecurityAction sec_action;
+		private byte[] data;
+
+		public DeclSecurity (PEAPI.SecurityAction sec_action, byte [] data)
+                {
+			this.sec_action = sec_action;
+                        this.data = data;
+                }
+
+                public void AddTo (CodeGen code_gen, PEAPI.MetaDataElement elem)
+                {
+                        code_gen.PEFile.AddDeclSecurity (sec_action, data, elem);
+                }
+
+        }
+
+}
Index: ilasm/codegen/TypeDef.cs
===================================================================
--- ilasm/codegen/TypeDef.cs	(revision 47904)
+++ ilasm/codegen/TypeDef.cs	(working copy)
@@ -13,7 +13,7 @@
 
 namespace Mono.ILASM {
 
-        public class TypeDef : ICustomAttrTarget {
+        public class TypeDef : ICustomAttrTarget, IDeclSecurityTarget {
 
                 protected class GenericInfo {
                         public string Id;
@@ -32,6 +32,7 @@
                 private ArrayList field_list;
                 private Hashtable method_table;
                 private ArrayList customattr_list;
+                private ArrayList declsecurity_list;
                 private ArrayList event_list;
                 private ArrayList property_list;
                 private ArrayList typar_list;
@@ -212,6 +213,14 @@
                         customattr_list.Add (customattr);
                 }
 
+                public void AddDeclSecurity (DeclSecurity declsecurity)
+                {
+                        if (declsecurity_list == null)
+                                declsecurity_list = new ArrayList ();
+
+                        declsecurity_list.Add (declsecurity);
+                }
+
                 public void AddGenericParam (string id)
                 {
                         if (typar_list == null)
@@ -355,7 +364,15 @@
                                 foreach (CustomAttr customattr in customattr_list)
                                         customattr.AddTo (code_gen, classdef);
                         }
+                        
+                        /// Add declarative security to this method
+                        if (declsecurity_list != null) {
+                                foreach (DeclSecurity declsecurity in declsecurity_list)
+                                        declsecurity.AddTo (code_gen, classdef);
 
+                                classdef.AddAttribute (PEAPI.TypeAttr.HasSecurity);
+			}	
+
                         if (override_list != null) {
                                 foreach (DictionaryEntry entry in override_list) {
                                         MethodDef body = (MethodDef) entry.Key;
Index: ilasm/codegen/ChangeLog
===================================================================
--- ilasm/codegen/ChangeLog	(revision 47940)
+++ ilasm/codegen/ChangeLog	(working copy)
@@ -1,3 +1,20 @@
+2005-08-04  Ankit Jain  <jankit@novell.com>
+
+	* DeclSecurity.cs: New File.
+	  (DeclSecurity): New class.
+	  (IDeclSecurityTarget): New interface.
+	* TypeDef.cs (TypeDef): Implement IDeclSecurityTarget.
+	  (TypeDef.DefineContents): Add DeclSecurity info.
+	* CodeGen.cs (CurrentDeclSecurityTarget): New. Property for current
+	  DeclSecurity target.
+	  (BeginTypeDef, BeginMethodDef, BeginAssemblyRef): Set current DeclSecurity
+	  target accordingly.
+	  (AddAssemblyDeclSecurity): New. Add DeclSecurity info to assembly.
+	* ExternTable.cs (ExternAssembly): Implement IDeclSecurityTarget.
+	  (Resolve): Add DeclSecurity info to AssemblyRef.
+	* MethodDef.cs (MethodDef): Implement IDeclSecurityTarget.
+	  (WriteCode): Add DeclSecurity info to MethodDef.
+
 2005-08-03  Ankit Jain  <jankit@novell.com>
 
 	* GlobalMethodRef.cs (GlobalMethodRef.Resolve): Use CreateVarargSignature
Index: ilasm/codegen/CodeGen.cs
===================================================================
--- ilasm/codegen/CodeGen.cs	(revision 47904)
+++ ilasm/codegen/CodeGen.cs	(working copy)
@@ -33,6 +33,7 @@
 		private int typedef_stack_top;
 		private SymbolWriter symwriter;
                 private ICustomAttrTarget current_customattrtarget;
+                private IDeclSecurityTarget current_declsectarget;
 
                 private byte [] assembly_public_key;
                 private int assembly_major_version;
@@ -42,6 +43,7 @@
                 private string assembly_locale;
                 private int assembly_hash_algorithm;
                 private ArrayList assembly_custom_attributes;
+                private ArrayList assembly_declsec;
                         
                 private TypeManager type_manager;
                 private ExternTable extern_table;
@@ -140,6 +142,11 @@
                         set { current_customattrtarget = value; }
                 }
 
+                public IDeclSecurityTarget CurrentDeclSecurityTarget {
+                        get { return current_declsectarget; }
+                        set { current_declsectarget = value; }
+                }
+
                 public ExternTable ExternTable {
                         get { return extern_table; }
                 }
@@ -223,6 +230,7 @@
                         if (typedef != null) {
                                 // Class head is allready defined, we are just reopening the class
                                 current_customattrtarget = current_typedef = typedef;
+                                current_declsectarget = typedef;
                                 typedef_stack.Add (current_typedef);
 				typedef_stack_top++;
                                 return;
@@ -236,6 +244,7 @@
 
                         type_manager[cache_name] = typedef;
                         current_customattrtarget = current_typedef = typedef;
+                        current_declsectarget = typedef;
 			typedef_stack.Add (typedef);
 			typedef_stack_top++;
                 }
@@ -282,6 +291,7 @@
                         }
 
                         current_customattrtarget = current_methoddef = methoddef;
+                        current_declsectarget = methoddef;
                 }
 
                 public void EndMethodDef (Location location)
@@ -307,6 +317,7 @@
                 public void BeginAssemblyRef (string name, AssemblyName asmb_name)
                 {
                         current_customattrtarget = current_assemblyref = ExternTable.AddAssembly (name, asmb_name);
+                        current_declsectarget = current_assemblyref;
                 }
 
                 public void EndAssemblyRef ()
@@ -349,6 +360,13 @@
                         assembly_custom_attributes.Add (attribute);
                 }
 
+                public void AddAssemblyDeclSecurity (DeclSecurity decl_sec)
+                {
+                        if (assembly_declsec == null)
+                                assembly_declsec = new ArrayList ();
+                        assembly_declsec.Add (decl_sec);
+                }
+
                 public void Write ()
                 {
                         FileStream out_stream = null;
@@ -385,6 +403,11 @@
                                         foreach (CustomAttr cattr in assembly_custom_attributes)
                                                 cattr.AddTo (this, asmb);
                                 }
+                                
+                                if (assembly_declsec != null) {
+                                        foreach (DeclSecurity decl_sec in assembly_declsec)
+                                                decl_sec.AddTo (this, asmb);
+                                }
 
                                 if (sub_system != -1)
                                         pefile.SetSubSystem ((PEAPI.SubSystem) sub_system);
Index: ilasm/codegen/ExternTable.cs
===================================================================
--- ilasm/codegen/ExternTable.cs	(revision 47904)
+++ ilasm/codegen/ExternTable.cs	(working copy)
@@ -110,7 +110,7 @@
                 }
         }
 
-        public class ExternAssembly : ExternRef {
+        public class ExternAssembly : ExternRef, IDeclSecurityTarget {
                         
                 public PEAPI.AssemblyRef AssemblyRef;
 
@@ -119,6 +119,7 @@
                 private byte [] public_key_token;
                 private string locale;
                 private byte [] hash;
+                private ArrayList declsec_list;
 
                 public ExternAssembly (string name, AssemblyName asmb_name) : base (name)
                 {
@@ -143,6 +144,10 @@
                         if (customattr_list != null)
                                 foreach (CustomAttr customattr in customattr_list)
                                         customattr.AddTo (code_gen, AssemblyRef);
+                                        
+                        if (declsec_list != null)
+                                foreach (DeclSecurity decl_sec in declsec_list)
+                                        decl_sec.AddTo (code_gen, AssemblyRef);
 
                         class_table = new Hashtable ();
                 }
@@ -151,7 +156,15 @@
                 {
                         return AssemblyRef;
                 }
+                
+                public void AddDeclSecurity (DeclSecurity decl_sec)
+                {
+                        if (declsec_list == null)
+                                declsec_list = new ArrayList ();
 
+                        declsec_list.Add (decl_sec);
+                }
+
                 public void SetVersion (int major, int minor, int build, int revision)
                 {
                         this.major = major;
Index: ilasm/codegen/MethodDef.cs
===================================================================
--- ilasm/codegen/MethodDef.cs	(revision 47904)
+++ ilasm/codegen/MethodDef.cs	(working copy)
@@ -15,7 +15,7 @@
 
 namespace Mono.ILASM {
 
-        public class MethodDef : ICustomAttrTarget {
+        public class MethodDef : ICustomAttrTarget, IDeclSecurityTarget {
 
                 protected class GenericInfo {
                         public string Id;
@@ -33,6 +33,7 @@
                 private ArrayList param_list;
                 private ArrayList inst_list;
                 private ArrayList customattr_list;
+                private ArrayList declsecurity_list;
                 private Hashtable label_table;
                 private Hashtable labelref_table;
                 private ArrayList label_list;
@@ -183,7 +184,14 @@
                         customattr_list.Add (customattr);
                 }
 
+                public void AddDeclSecurity (DeclSecurity declsecurity)
+                {
+                        if (declsecurity_list == null)
+                                declsecurity_list = new ArrayList ();
 
+                        declsecurity_list.Add (declsecurity);
+                }
+
                 public void AddLocals (ArrayList local_list)
                 {
                         int slot_pos = this.local_list.Count;
@@ -417,6 +425,14 @@
                                 foreach (CustomAttr customattr in customattr_list)
                                         customattr.AddTo (code_gen, methoddef);
 
+                        /// Add declarative security to this method
+                        if (declsecurity_list != null) {
+                                foreach (DeclSecurity declsecurity in declsecurity_list)
+                                        declsecurity.AddTo (code_gen, methoddef);
+
+                                methoddef.AddMethAttribute (PEAPI.MethAttr.HasSecurity);
+                        }        
+
                         if (pinvoke_info) {
                                 methoddef.AddPInvokeInfo (pinvoke_mod.ModuleRef,
                                                 (pinvoke_name != null ? pinvoke_name : name), pinvoke_attr);
Index: ilasm/ChangeLog
===================================================================
--- ilasm/ChangeLog	(revision 47904)
+++ ilasm/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2005-08-04  Ankit Jain  <jankit@novell.com>
+
+	* ilasm.exe.sources: Add DeclSecurity.cs to the build.
+
 2005-05-12  Ankit Jain  <ankit@corewars.org>
 
 	* Makefile (LOCAL_MCS_FLAGS): Use the in-tree PEAPI.dll as its public
Index: ilasm/ilasm.exe.sources
===================================================================
--- ilasm/ilasm.exe.sources	(revision 47904)
+++ ilasm/ilasm.exe.sources	(working copy)
@@ -54,6 +54,7 @@
 codegen/FaultBlock.cs
 codegen/CatchBlock.cs
 codegen/CustomAttr.cs
+codegen/DeclSecurity.cs
 codegen/GenericTypeRef.cs
 codegen/GenericTypeInst.cs
 codegen/TypeSpecMethodRef.cs
Index: ilasm/parser/ILParser.jay
===================================================================
--- ilasm/parser/ILParser.jay	(revision 47904)
+++ ilasm/parser/ILParser.jay	(working copy)
@@ -657,6 +657,9 @@
 			| field_decl
 			| data_decl
 			| sec_decl
+			  {
+				codegen.CurrentDeclSecurityTarget.AddDeclSecurity ((DeclSecurity) $1);
+			  }
 			| extsource_spec
 			| customattr_decl
                           {
@@ -1728,6 +1731,9 @@
 			| seh_block
 			| instr
 			| sec_decl
+			  {
+				codegen.CurrentDeclSecurityTarget.AddDeclSecurity ((DeclSecurity) $1);
+			  }
 			| extsource_spec
 			| language_decl
 			| customattr_decl
@@ -2353,6 +2359,9 @@
 sec_decl		: D_PERMISSION sec_action type_spec OPEN_PARENS nameval_pairs CLOSE_PARENS
 			| D_PERMISSION sec_action type_spec
 			| D_PERMISSIONSET sec_action ASSIGN bytes_list
+			  {
+				$$ = new DeclSecurity ((PEAPI.SecurityAction) $2, (byte []) $4);
+			  }
 			;
 
 nameval_pairs		: nameval_pair 
@@ -2373,20 +2382,66 @@
 			;
 
 sec_action		: K_REQUEST
+			  {
+				$$ = PEAPI.SecurityAction.Request;
+			  }
 			| K_DEMAND
+			  {
+				$$ = PEAPI.SecurityAction.Demand;
+			  }
 			| K_ASSERT
+			  {
+				$$ = PEAPI.SecurityAction.Assert;
+			  }
 			| K_DENY
+			  {
+				$$ = PEAPI.SecurityAction.Deny;
+			  }
 			| K_PERMITONLY
+			  {
+				$$ = PEAPI.SecurityAction.PermitOnly;
+			  }
 			| K_LINKCHECK
+			  {
+				$$ = PEAPI.SecurityAction.LinkDemand;
+			  }
 			| K_INHERITCHECK
+			  {
+				$$ = PEAPI.SecurityAction.InheritDemand;
+			  }
 			| K_REQMIN
+			  {
+				$$ = PEAPI.SecurityAction.RequestMinimum;
+			  }
 			| K_REQOPT
+			  {
+				$$ = PEAPI.SecurityAction.RequestOptional;
+			  }
 			| K_REQREFUSE
+			  {
+				$$ = PEAPI.SecurityAction.RequestRefuse;
+			  }
 			| K_PREJITGRANT
+			  {
+				$$ = PEAPI.SecurityAction.PreJitGrant;
+			  }
 			| K_PREJITDENY
+			  {
+				$$ = PEAPI.SecurityAction.PreJitDeny;
+			  }
 			| K_NONCASDEMAND
+			  {
+				$$ = PEAPI.SecurityAction.NonCasDemand;
+			  }
 			| K_NONCASLINKDEMAND
+			  {
+				$$ = PEAPI.SecurityAction.NonCasLinkDemand;
+			  }
 			| K_NONCASINHERITANCE
+			  {
+				$$ = PEAPI.SecurityAction.NonCasInheritance;
+			  }
+			/* FIXME: Should we have LinkDemandChoice, InheritDemandChoice and DemandChoice ? */  
 			;
 
 module_head		: D_MODULE
@@ -2475,6 +2530,9 @@
 				codegen.AddAssemblyCustomAttribute ((CustomAttr) $1);
 			  }
 			| sec_decl
+			  {
+				codegen.AddAssemblyDeclSecurity ((DeclSecurity) $1);
+			  }
 			;
 
 asm_or_ref_decl		: D_PUBLICKEY ASSIGN bytes_list
Index: ilasm/parser/ChangeLog
===================================================================
--- ilasm/parser/ChangeLog	(revision 47904)
+++ ilasm/parser/ChangeLog	(working copy)
@@ -1,3 +1,13 @@
+2005-08-04  Ankit Jain  <jankit@novell.com>
+
+	* ILParser.jay (class_decl, method_decl | sec_decl): Use
+	  codegen.CurrentDeclSecurityTarget for adding DeclSecurity info.
+	  (assembly_decl | sec_decl): Use codegen.AddAssemblyDeclSecurity
+	  for adding DeclSecurity info.
+	  (sec_decl): Instantiate DeclSecurity object.
+	  (sec_action | K_REQUEST, K_DEMAND, .. etc): Use the corresponding
+	  value from PEAPI.SecurityAction enum.
+
 2005-05-12  Jackson Harper  <jackson@ximian.com>
 
 	* ILParser.jay: Handle lists of data items correctly.