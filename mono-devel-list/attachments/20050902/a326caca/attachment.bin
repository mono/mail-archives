Index: Mono.Cairo/Cairo.cs
===================================================================
--- Mono.Cairo/Cairo.cs	(revision 49350)
+++ Mono.Cairo/Cairo.cs	(working copy)
@@ -356,6 +356,9 @@
 		[DllImport (CairoImp)]
                 public static extern IntPtr cairo_xlib_surface_create (IntPtr dpi,
 			IntPtr win, IntPtr visual, int w, int h);
+
+		[DllImport (CairoImp)]
+                public static extern void cairo_xlib_surface_set_drawable (IntPtr surface, IntPtr drawable, int width, int height);
 		
 		[DllImport (CairoImp)]
                 public static extern void cairo_xlib_surface_set_size (IntPtr surface, int width, int height);
@@ -394,6 +397,21 @@
                 [DllImport (CairoImp)]                
                 public static extern void cairo_surface_write_to_png (IntPtr surface, string filename);
 
+                [DllImport (CairoImp)]                
+                public static extern IntPtr cairo_pdf_surface_create (string filename, double width, double height);
+
+                [DllImport (CairoImp)]                
+                public static extern void cairo_pdf_surface_set_dpi (IntPtr surface, double x_dpi, double y_dpi);
+
+                [DllImport (CairoImp)]                
+                public static extern IntPtr cairo_ps_surface_create (string filename, double width, double height);
+
+                [DllImport (CairoImp)]                
+                public static extern void cairo_ps_surface_set_dpi (IntPtr surface, double x_dpi, double y_dpi);
+				
+                [DllImport (CairoImp)]                
+                public static extern IntPtr cairo_win32_surface_create (IntPtr hdc);
+
                 //
                 // Matrix
                 //
Index: Mono.Cairo/Graphics.cs
===================================================================
--- Mono.Cairo/Graphics.cs	(revision 49350)
+++ Mono.Cairo/Graphics.cs	(working copy)
@@ -618,6 +618,11 @@
 		public double FontSize {
 			set { CairoAPI.cairo_set_font_size (state, value); }
 		}
+
+		public void ShowPage ()
+		{
+			CairoAPI.cairo_show_page (state);
+		}
 		
                 public void ShowText (string str)
                 {
Index: Mono.Cairo/Surface.cs
===================================================================
--- Mono.Cairo/Surface.cs	(revision 49350)
+++ Mono.Cairo/Surface.cs	(working copy)
@@ -59,6 +59,77 @@
 		}
 		
 	}
+
+	#if UNSTABLE
+	public class PdfSurface : Surface
+	{
+		public PdfSurface (string filename, double width, double height)
+		{
+			surface = CairoAPI.cairo_pdf_surface_create (filename, width, height);
+
+			CairoAPI.cairo_surface_reference (surface);
+		}
+
+		public void SetDPI (double x_dpi, double y_dpi)
+		{
+			CairoAPI.cairo_pdf_surface_set_dpi (surface, x_dpi, y_dpi);
+		}
+	}
+
+	public class PostscriptSurface : Surface
+	{
+		public PostscriptSurface (string filename, double width, double height)
+		{
+			surface = CairoAPI.cairo_ps_surface_create (filename, width, height);
+
+			CairoAPI.cairo_surface_reference (surface);
+		}
+
+		public void SetDPI (double x_dpi, double y_dpi)
+		{
+			CairoAPI.cairo_ps_surface_set_dpi (surface, x_dpi, y_dpi);
+		}
+	}
+	#endif
+
+	public class Win32Surface : Surface
+	{
+		public Win32Surface (IntPtr hdc)
+		{
+			surface = CairoAPI.cairo_win32_surface_create (hdc);
+
+			CairoAPI.cairo_surface_reference (surface);
+		}
+	}
+
+	public class XlibSurface : Surface
+	{
+		public XlibSurface (IntPtr display, IntPtr drawable, IntPtr visual, int width, int height)
+		{
+			surface = CairoAPI.cairo_xlib_surface_create (display, drawable, visual, width, height);
+
+			CairoAPI.cairo_surface_reference (surface);
+		}
+
+		/* FIXME: has the same parameters as above
+		public XlibSurface (IntPtr display, IntPtr bitmap, IntPtr screen, int width, int height)
+		{
+			surface = CairoAPI.cairo_xlib_surface_create_for_bitmap (display, bitmap, screen, width, height);
+
+			CairoAPI.cairo_surface_reference (surface);
+		}
+		*/
+
+		public void SetDrawable (IntPtr drawable, int width, int height)
+		{
+			CairoAPI.cairo_xlib_surface_set_drawable (surface, drawable, width, height);
+		}
+
+		public void SetSize (int width, int height)
+		{
+			CairoAPI.cairo_xlib_surface_set_size (surface, width, height);
+		}
+	}
    
 	public class Surface : IDisposable 
         {						
@@ -89,16 +160,6 @@
 			}
 		}		
 		
-		public static Cairo.Surface CreateForXlib (IntPtr display, IntPtr win,
-							   IntPtr visual, int w, 
-							   int h)
-		{
-			IntPtr p = CairoAPI.cairo_xlib_surface_create (display, win,
-								   visual, w, h);
-			if(p == IntPtr.Zero) System.Console.WriteLine("Failed creating surface");
-			return new Cairo.Surface (p, false);
-		}
-		
                 public static Cairo.Surface CreateForImage (
                         string data, Cairo.Format format, int width, int height, int stride)
                 {
@@ -181,11 +242,6 @@
 			}
 		}
 		
-		public void XlibSetSize (int w, int h)
-		{
-			CairoAPI.cairo_xlib_surface_set_size (surface, w, h);
-		}
-		
 		public void Destroy()
 		{
 			CairoAPI.cairo_surface_destroy (surface);
Index: Samples/win32/arc.cs
===================================================================
--- Samples/win32/arc.cs	(revision 0)
+++ Samples/win32/arc.cs	(revision 0)
@@ -0,0 +1,74 @@
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using Cairo;
+using System.Windows.Forms;
+	
+public class SwfCairo : Form
+{
+	const double M_PI = Math.PI;
+		
+	static void Main ()
+	{		
+		SwfCairo f = new SwfCairo ();
+		f.ShowDialog ();
+	}
+
+	protected override void OnPaint (PaintEventArgs a)
+	{
+		IntPtr hdc = a.Graphics.GetHdc ();
+		Win32Surface s = new Win32Surface (hdc);
+		Graphics g = new Graphics (s);
+		draw (g, this.Width, this.Height);
+		
+		a.Graphics.ReleaseHdc (hdc);
+	}
+	
+	static void draw (Cairo.Graphics gr, int width, int height)
+	{
+		double xc = 0.5;
+		double yc = 0.5;
+		double radius = 0.4;
+		double angle1 = 45.0  * (M_PI/180.0);  // angles are specified
+		double angle2 = 180.0 * (M_PI/180.0);  // in radians
+		
+		gr.Scale (width, height);
+		gr.LineWidth = 0.04;
+
+		
+		gr.Arc (xc, yc, radius, angle1, angle2);
+		gr.Stroke ();
+		
+		// draw helping lines
+		gr.Color = new Color(1, 0.2, 0.2, 0.6);
+		gr.Arc (xc, yc, 0.05, 0, 2*M_PI);
+		gr.Fill ();
+		gr.LineWidth = 0.03;
+		gr.Arc (xc, yc, radius, angle1, angle1);
+		gr.LineTo (new PointD(xc, yc));
+		gr.Arc (xc, yc, radius, angle2, angle2);
+		gr.LineTo (new PointD(xc, yc));
+		gr.Stroke ();
+		
+	}
+}
+
Index: Samples/gtk/sysdraw.cs
===================================================================
--- Samples/gtk/sysdraw.cs	(revision 49350)
+++ Samples/gtk/sysdraw.cs	(working copy)
@@ -71,7 +71,7 @@
 			IntPtr Xvisual = gdk_x11_visual_get_xvisual(visual);
 			IntPtr Xdrawable = gdk_x11_drawable_get_xid (x_drawable);
 			
-			Cairo.Surface s = Cairo.Surface.CreateForXlib(Xdisplay,
+			Cairo.XlibSurface s = new Cairo.XlibSurface (Xdisplay,
 								   Xdrawable,
 								   Xvisual,
 								   w, h);
Index: Samples/x11/fillstroke.cs
===================================================================
--- Samples/x11/fillstroke.cs	(revision 49350)
+++ Samples/x11/fillstroke.cs	(working copy)
@@ -67,7 +67,7 @@
 		
 		win.Show ();
 		
-		Cairo.Surface s = Cairo.Surface.CreateForXlib (win.Display,
+		Cairo.XlibSurface s = new Cairo.XlibSurface (win.Display,
 			       win.XWindow,
 			       X11.XDefaultVisual (win.Display, win.Screen),
 			       (int)win.Width, (int)win.Height);
Index: Samples/x11/image_pattern.cs
===================================================================
--- Samples/x11/image_pattern.cs	(revision 49350)
+++ Samples/x11/image_pattern.cs	(working copy)
@@ -81,7 +81,7 @@
 		
 		win.Show ();
 		
-		Cairo.Surface s = Cairo.Surface.CreateForXlib (win.Display,
+		Cairo.XlibSurface s = new Cairo.XlibSurface (win.Display,
 			       win.XWindow,
 			       X11.XDefaultVisual (win.Display, win.Screen),
 			       (int)win.Width, (int)win.Height);
Index: Samples/x11/image.cs
===================================================================
--- Samples/x11/image.cs	(revision 49350)
+++ Samples/x11/image.cs	(working copy)
@@ -65,7 +65,7 @@
 		
 		win.Show ();
 		
-		Cairo.Surface s = Cairo.Surface.CreateForXlib (win.Display,
+		Cairo.XlibSurface s = new Cairo.XlibSurface (win.Display,
 			       win.XWindow,
 			       X11.XDefaultVisual (win.Display, win.Screen),
 			       (int)win.Width, (int)win.Height);
Index: Samples/x11/clip_img.cs
===================================================================
--- Samples/x11/clip_img.cs	(revision 49350)
+++ Samples/x11/clip_img.cs	(working copy)
@@ -79,7 +79,7 @@
 		
 		win.Show ();
 		
-		Cairo.Surface s = Cairo.Surface.CreateForXlib (win.Display,
+		Cairo.XlibSurface s = new Cairo.XlibSurface (win.Display,
 			       win.XWindow,
 			       X11.XDefaultVisual (win.Display, win.Screen),
 			       (int)win.Width, (int)win.Height);
Index: Samples/x11/text.cs
===================================================================
--- Samples/x11/text.cs	(revision 49350)
+++ Samples/x11/text.cs	(working copy)
@@ -67,7 +67,7 @@
 		
 		win.Show ();
 		
-		Cairo.Surface s = Cairo.Surface.CreateForXlib (win.Display,
+		Cairo.XlibSurface s = new Cairo.XlibSurface (win.Display,
 			       win.XWindow,
 			       X11.XDefaultVisual (win.Display, win.Screen),
 			       (int)win.Width, (int)win.Height);
Index: Samples/x11/curve_to.cs
===================================================================
--- Samples/x11/curve_to.cs	(revision 49350)
+++ Samples/x11/curve_to.cs	(working copy)
@@ -67,7 +67,7 @@
 		
 		win.Show ();
 		
-		Cairo.Surface s = Cairo.Surface.CreateForXlib (win.Display,
+		Cairo.XlibSurface s = new Cairo.XlibSurface (win.Display,
 			       win.XWindow,
 			       X11.XDefaultVisual (win.Display, win.Screen),
 			       (int)win.Width, (int)win.Height);
Index: Samples/x11/clip.cs
===================================================================
--- Samples/x11/clip.cs	(revision 49350)
+++ Samples/x11/clip.cs	(working copy)
@@ -62,7 +62,7 @@
 		
 		win.Show ();
 		
-		Cairo.Surface s = Cairo.Surface.CreateForXlib (win.Display,
+		Cairo.XlibSurface s = new Cairo.XlibSurface (win.Display,
 			       win.XWindow,
 			       X11.XDefaultVisual (win.Display, win.Screen),
 			       (int)win.Width, (int)win.Height);
Index: Samples/x11/gradient.cs
===================================================================
--- Samples/x11/gradient.cs	(revision 49350)
+++ Samples/x11/gradient.cs	(working copy)
@@ -71,7 +71,7 @@
 		
 		win.Show ();
 		
-		Cairo.Surface s = Cairo.Surface.CreateForXlib (win.Display,
+		Cairo.XlibSurface s = new Cairo.XlibSurface (win.Display,
 			       win.XWindow,
 			       X11.XDefaultVisual (win.Display, win.Screen),
 			       (int)win.Width, (int)win.Height);
Index: Samples/x11/arcneg.cs
===================================================================
--- Samples/x11/arcneg.cs	(revision 49350)
+++ Samples/x11/arcneg.cs	(working copy)
@@ -69,7 +69,7 @@
 		
 		win.Show ();
 		
-		Cairo.Surface s = Cairo.Surface.CreateForXlib (win.Display,
+		Cairo.XlibSurface s = new Cairo.XlibSurface (win.Display,
 			       win.XWindow,
 			       X11.XDefaultVisual (win.Display, win.Screen),
 			       (int)win.Width, (int)win.Height);
Index: Samples/x11/curve_rect.cs
===================================================================
--- Samples/x11/curve_rect.cs	(revision 49350)
+++ Samples/x11/curve_rect.cs	(working copy)
@@ -172,7 +172,7 @@
 		
 		win.Show ();
 		
-		Cairo.Surface s = Cairo.Surface.CreateForXlib (win.Display,
+		Cairo.XlibSurface s = new Cairo.XlibSurface (win.Display,
 			       win.XWindow,
 			       X11.XDefaultVisual (win.Display, win.Screen),
 			       (int)win.Width, (int)win.Height);
Index: Samples/x11/arc.cs
===================================================================
--- Samples/x11/arc.cs	(revision 49350)
+++ Samples/x11/arc.cs	(working copy)
@@ -70,7 +70,7 @@
 		
 		win.Show ();
 		
-		Cairo.Surface s = Cairo.Surface.CreateForXlib (win.Display,
+		Cairo.XlibSurface s = new Cairo.XlibSurface (win.Display,
 			       win.XWindow,
 			       X11.XDefaultVisual (win.Display, win.Screen),
 			       (int)win.Width, (int)win.Height);
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 49350)
+++ ChangeLog	(working copy)
@@ -1,5 +1,19 @@
 2005-09-01  John Luke  <john.luke@gmail.com>
 
+	* Mono.Cairo/Cairo.cs: add some imports used by
+	the extra surface types
+	* Mono.Cairo/Surface.cs: add XlibSurface and Win32Surface
+	remove Surface.CreateForXlib () 
+	add PdfSurface and PsSurface for future use (#if'ed out)
+	* Mono.Cairo/Graphics.cs: add ShowPage() method
+	* Samples/win32/arc.cs: add win32 sample
+	* Samples/gtk/sysdraw.cs: use XlibSurface instead of
+	Surface.CreateForXlib ()
+	* Samples/x11/*.cs: use XlibSurface instead of
+	Surface.CreateForXlib ()
+
+2005-09-01  John Luke  <john.luke@gmail.com>
+
 	* Mono.Cairo/Cairo.cs: p/invoke the windows dll name
 	  (libcairo-2.dll) so that we can work on .net also 
 	* Mono.Cairo/Cairo.cs: add cairo_set_antialias and
