Index: Mono.Cairo/Cairo.cs
===================================================================
--- Mono.Cairo/Cairo.cs	(revision 49350)
+++ Mono.Cairo/Cairo.cs	(working copy)
@@ -626,31 +626,31 @@
         [StructLayout(LayoutKind.Sequential)]
         public struct FontExtents
         {
-                public  double ascent;
-                public  double descent;
-                public  double height;
-                public  double max_x_advance;
-                public  double max_y_advance;
+                public  double Ascent;
+                public  double Descent;
+                public  double Height;
+                public  double MaxXAdvance;
+                public  double MaxYAdvance;
         }        
    
    
         [StructLayout(LayoutKind.Sequential)]
         public struct TextExtents
         {
-                public  double x_bearing;
-                public  double y_bearing;
-                public  double width;
-                public  double height;
-                public  double x_advance;
-                public  double y_advance;
+                public  double XBearing;
+                public  double YBearing;
+                public  double Width;
+                public  double Height;
+                public  double XAdvance;
+                public  double YAdvance;
         }
 
         [StructLayout(LayoutKind.Sequential)]
         public struct Glyph
         {
-                public  long index;
-                public  double x;
-                public  double y;
+                public  long Index;
+                public  double X;
+                public  double Y;
         }
 
 		public  delegate void ClosePathCallback (object closure);
Index: Mono.Cairo/Pattern.cs
===================================================================
--- Mono.Cairo/Pattern.cs	(revision 49350)
+++ Mono.Cairo/Pattern.cs	(working copy)
@@ -33,18 +33,18 @@
 
 namespace Cairo {
    
-        public class PatternLinear : Pattern
+        public class LinearGradient : Gradient
         {		
-	        public PatternLinear (double x0, double y0, double x1, double y1) : base()
+	        public LinearGradient (double x0, double y0, double x1, double y1) : base()
                 {
                         pattern = CairoAPI.cairo_pattern_create_linear (x0, y0, x1, y1);
 			Reference ();
                 }		
 	}
    
-        public class PatternRadial : Pattern
-        {
-		public PatternRadial (double cx0, double cy0, double radius0,
+        public class RadialGradient : Gradient
+		{
+		public RadialGradient (double cx0, double cy0, double radius0,
 				      double cx1, double cy1, double radius1) : base()
                 {
                         pattern = CairoAPI.cairo_pattern_create_radial (cx0, cy0, radius0,
@@ -53,14 +53,52 @@
                 }
 	}
 
-        public class PatternRgba : Pattern
-        {
-	        public PatternRgba (double r, double g, double b, double a) : base ()
+		public class Gradient : Pattern
 		{
-			pattern = CairoAPI.cairo_pattern_create_rgba (r, g, b, a);
-			Reference();
+                public Status AddColorStop (double offset, Cairo.Color c)
+                {
+                        return CairoAPI.cairo_pattern_add_color_stop_rgba (pattern, offset, 
+								  c.R, c.G, c.B, c.A);                
+                }
+
+                public Status AddColorStopRgb (double offset, Cairo.Color c)
+                {
+                        return CairoAPI.cairo_pattern_add_color_stop_rgb (pattern, offset, 
+								  c.R, c.G, c.B);
+                }		
 		}
-	}
+
+		// FIXME: probably will change to a better name at some point
+		public class SolidPattern : Pattern
+		{
+			public SolidPattern (Color color, bool solid)
+			{
+				if (solid)
+					pattern = CairoAPI.cairo_pattern_create_rgb (color.R, color.G, color.B);
+				else
+					pattern = CairoAPI.cairo_pattern_create_rgba (color.R, color.G, color.B, color.A);
+				Reference ();
+			}
+		}
+
+		public class SurfacePattern : Pattern
+		{
+			public SurfacePattern (Surface surface)
+			{
+				pattern = CairoAPI.cairo_pattern_create_for_surface (surface.Pointer);
+				Reference ();
+			}
+
+			public Extend Extend {
+				set { CairoAPI.cairo_pattern_set_extend (pattern, value); }
+				get { return CairoAPI.cairo_pattern_get_extend (pattern); }
+			}
+
+			public Filter Filter {
+				set { CairoAPI.cairo_pattern_set_filter (pattern, value); }
+				get { return CairoAPI.cairo_pattern_get_filter (pattern); }
+			}
+		}
    
         public class Pattern
         {
@@ -89,19 +127,7 @@
                 {
                         CairoAPI.cairo_pattern_destroy (pattern);
                 }
-
-                public Status AddColorStop (double offset, Cairo.Color c)
-                {
-                        return CairoAPI.cairo_pattern_add_color_stop_rgba (pattern, offset, 
-								  c.R, c.G, c.B, c.A);                
-                }
 		
-                public Status AddColorStopRgb (double offset, Cairo.Color c)
-                {
-                        return CairoAPI.cairo_pattern_add_color_stop_rgb (pattern, offset, 
-								  c.R, c.G, c.B);
-                }		
-		
 		public Status Status
 		{
 			get { return CairoAPI.cairo_pattern_status (pattern); }
@@ -123,17 +149,7 @@
 				return new Cairo.Matrix (matrix);
                         }
                 }
-		
-                public Extend Extend {
-                        set { CairoAPI.cairo_pattern_set_extend (pattern, value); }
-                        get { return CairoAPI.cairo_pattern_get_extend (pattern); }
-                }
 
-                public Filter Filter {
-                        set { CairoAPI.cairo_pattern_set_filter (pattern, value); }
-                        get { return CairoAPI.cairo_pattern_get_filter (pattern); }
-                }
-
                 public IntPtr Pointer {
                         get { return pattern; }
                 }		
Index: Mono.Cairo/Surface.cs
===================================================================
--- Mono.Cairo/Surface.cs	(revision 49350)
+++ Mono.Cairo/Surface.cs	(working copy)
@@ -37,10 +37,10 @@
 
 namespace Cairo {
 
-        public class SurfaceImage : Surface
+        public class ImageSurface : Surface
         {
 		
-		public SurfaceImage (string filename)
+		public ImageSurface (string filename)
 		{
 			surface = CairoAPI.cairo_image_surface_create_from_png (filename);
 			lock (surfaces.SyncRoot){
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 49350)
+++ ChangeLog	(working copy)
@@ -1,3 +1,11 @@
+2005-09-02  John Luke  <john.luke@gmail.com>
+
+	* Mono.Cairo/Cairo.cs: studly-case fields in the structs
+	* Mono.Cairo/Pattern.cs: use the names and hierarchy suggested
+	in the cairo language bindings docs
+	* Mono.Cairo/Surface.cs: rename SurfaceImage to ImageSurface
+	for consistency
+
 2005-09-01  John Luke  <john.luke@gmail.com>
 
 	* Mono.Cairo/Cairo.cs: p/invoke the windows dll name
