Index: class/System/Test/System.Collections.Generic/SortedListTest.cs
===================================================================
--- class/System/Test/System.Collections.Generic/SortedListTest.cs	(revision 132563)
+++ class/System/Test/System.Collections.Generic/SortedListTest.cs	(working copy)
@@ -275,6 +275,35 @@
 			Assert.AreEqual ("B", values [1]);
 			Assert.AreEqual ("C", values [2]);
 		}
+		
+		[Test]
+		public void CopyTo ()
+		{	
+			ICollection<KeyValuePair<int, string>> col1 =
+				list as ICollection<KeyValuePair<int, string>>;
+			KeyValuePair <int, string> [] array1 =
+				new KeyValuePair <int, string> [col1.Count];
+			col1.CopyTo (array1, 0);
+			Assert.AreEqual (3, array1.Length);
+			
+			ICollection col = list as ICollection;
+			array1 = new KeyValuePair <int, string> [col.Count];
+			col.CopyTo (array1, 0);			
+			Assert.AreEqual (3, array1.Length);
+			
+			ICollection<KeyValuePair<string, int>> col2 =
+				list2 as ICollection<KeyValuePair<string, int>>;
+			KeyValuePair <string, int> [] array2 =
+				new KeyValuePair <string, int> [col2.Count];
+			col2.CopyTo (array2, 0);
+			Assert.AreEqual (0, array2.Length);
+			
+			col = list2 as ICollection;
+			array2 = new KeyValuePair <string, int> [col.Count];
+			col.CopyTo (array2, 0);
+			Assert.AreEqual (0, array2.Length);			
+		}
 	}
 }
 
Index: class/System/Test/System.Collections.Generic/LinkedListTest.cs
===================================================================
--- class/System/Test/System.Collections.Generic/LinkedListTest.cs	(revision 132563)
+++ class/System/Test/System.Collections.Generic/LinkedListTest.cs	(working copy)
@@ -127,6 +127,12 @@
 			intlist.CopyTo (output, 0);
 			for (int i = 0; i < 3; i++)
 				Assert.AreEqual (values [i], output [i]);
+			
+			LinkedList <int> l = new LinkedList <int> ();
+			values = new int [l.Count];
+			l.CopyTo (values, 0);
 		}
 
 		[Test]
Index: class/System/Test/System.Collections.Generic/ChangeLog
===================================================================
--- class/System/Test/System.Collections.Generic/ChangeLog	(revision 132563)
+++ class/System/Test/System.Collections.Generic/ChangeLog	(working copy)
@@ -1,3 +1,13 @@
+2009-05-06  Pia Eriksson  <pe@hallerud.se>
+
+	* SortedListTest.cs: Added test for CopyTo
+	* LinkedListTest.cs: Test for CopyTo extended w. case when Count == 0
+	* LinkedListTest.cs: Test for CopyTo extended w. case when Count == 0
+	* QueueTest.cs: Test for CopyTo extended w. case when Count == 0
+	* StackTest.cs: Test for CopyTo extended w. case when Count == 0
+	* SortedDictionaryTest.cs: Added test for CopyTo on SortedDictionary,
+	SortedDictionary.Keys and SortedDictionary.Values
+
 2007-08-20  Jb Evain  <jbevain@novell.com>
 
 	* SortedListTest.cs: Tests for #82492.
Index: class/System/Test/System.Collections.Generic/QueueTest.cs
===================================================================
--- class/System/Test/System.Collections.Generic/QueueTest.cs	(revision 132563)
+++ class/System/Test/System.Collections.Generic/QueueTest.cs	(working copy)
@@ -110,6 +110,15 @@
 			Assert.AreEqual (10, x [0], "#1");
 			Assert.AreEqual (1, x [1], "#2");
 			Assert.AreEqual (2, x [2], "#3");
+			
+			z = new Queue <int> ();
+			x = new int [z.Count];
+			z.CopyTo (x, 0);
+			
+			ICollection c = new Queue <int> ();
+			x = new int [c.Count];
+			c.CopyTo (x, 0);
 		}
 
 		[Test]
Index: class/System/Test/System.Collections.Generic/StackTest.cs
===================================================================
--- class/System/Test/System.Collections.Generic/StackTest.cs	(revision 132563)
+++ class/System/Test/System.Collections.Generic/StackTest.cs	(working copy)
@@ -103,6 +103,15 @@
 			Assert.AreEqual  (10, x [0], "#1");
 			Assert.AreEqual (2, x [1], "#2");
 			Assert.AreEqual (1, x [2], "#3");
+			
+			z = new Stack <int> ();
+			x = new int [z.Count];
+			z.CopyTo (x, 0);			
+			
+			ICollection c = new Stack <int> ();
+			x = new int [c.Count];
+			c.CopyTo (x, 0);
 		}
 
 		[Test]
Index: class/System/Test/System.Collections.Generic/SortedDictionaryTest.cs
===================================================================
--- class/System/Test/System.Collections.Generic/SortedDictionaryTest.cs	(revision 132563)
+++ class/System/Test/System.Collections.Generic/SortedDictionaryTest.cs	(working copy)
@@ -247,6 +247,31 @@
 			Assert.IsFalse (d.TryGetValue (1, out s), "#5");
 			Assert.IsNull (s, "#6");
 		}
+		
+		[Test]
+		public void CopyTo ()
+		{
+			SortedDictionary<int,string> d =
+				new SortedDictionary<int,string> ();			
+			d.Add (1, "A");			
+			KeyValuePair <int, string> [] array =
+				new KeyValuePair <int, string> [d.Count];
+			d.CopyTo (array, 0);
+			Assert.AreEqual (1, array.Length);
+			Assert.AreEqual (1, array [0].Key);
+			Assert.AreEqual ("A", array [0].Value);
+			
+			d = new SortedDictionary<int,string> ();			
+			array = new KeyValuePair <int, string> [d.Count];
+			d.CopyTo (array, 0);
+			Assert.AreEqual (0, array.Length);
+			
+			ICollection c = new SortedDictionary<int,string> ();
+			array = new KeyValuePair <int, string> [c.Count];
+			c.CopyTo (array, 0);
+			Assert.AreEqual (0, array.Length);
+		}
 
 		[Test]
 		[ExpectedException (typeof (ArgumentNullException))]
@@ -310,6 +335,24 @@
 			ICollection<int> col = d.Keys;
 			col.Remove (1);
 		}
+		
+		[Test]		
+		public void KeysICollectionCopyTo ()
+		{
+			SortedDictionary<int,string> d = new SortedDictionary<int, string> ();
+			d.Add (1, "A");
+			ICollection<int> col = d.Keys;
+			int[] array = new int [col.Count];
+			col.CopyTo (array, 0);
+			Assert.AreEqual (1, array.Length);
+			Assert.AreEqual (1, array [0]);
+			
+			// Bug #497720
+			d = new SortedDictionary<int, string> ();			
+			col = d.Keys;
+			array = new int [col.Count];
+			col.CopyTo (array, 0);
+		}
 
 		[Test]
 		[ExpectedException (typeof (NotSupportedException))]
@@ -340,6 +383,24 @@
 			ICollection<string> col = d.Values;
 			col.Remove ("A");
 		}
+		
+		[Test]		
+		public void ValuesICollectionCopyTo ()
+		{
+			SortedDictionary<int,string> d = new SortedDictionary<int,string> ();
+			d.Add (1, "A");
+			ICollection<string> col = d.Values;
+			string[] array = new string [col.Count];
+			col.CopyTo (array, 0);
+			Assert.AreEqual (1, array.Length);
+			Assert.AreEqual ("A", array [0]);
+			
+			d = new SortedDictionary<int,string> ();			
+			col = d.Values;
+			array = new string [col.Count];
+			col.CopyTo (array, 0);
+		}
 
 		[Test]
 		public void KeysGetEnumerator1 ()
