Index: class/System.ServiceModel.Web/Test/config/webHttpBinding
===================================================================
--- class/System.ServiceModel.Web/Test/config/webHttpBinding	(revision 0)
+++ class/System.ServiceModel.Web/Test/config/webHttpBinding	(revision 0)
@@ -0,0 +1,3 @@
+DO NOT DELETE,
+IT IS PLACEHOLDER, REQUIRED FOR READING *.config FILE
+USING ConfigurationManager.OpenExeConfiguration API.
\ No newline at end of file
Index: class/System.ServiceModel.Web/Test/config/webHttpBinding.config
===================================================================
--- class/System.ServiceModel.Web/Test/config/webHttpBinding.config	(revision 0)
+++ class/System.ServiceModel.Web/Test/config/webHttpBinding.config	(revision 0)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8" ?>
+<configuration>
+  <system.serviceModel>
+      <bindings>
+        <webHttpBinding>
+          <binding name="WebHttpBinding1_Service"
+          	allowCookies="true"
+          	bypassProxyOnLocal="true"
+          	hostNameComparisonMode="Exact"
+          	maxBufferPoolSize="262144"
+          	maxBufferSize="32768"
+          	maxReceivedMessageSize="16384"
+          	proxyAddress="proxy"
+          	writeEncoding="unicode"
+          	transferMode="streamed">
+            <security mode="TransportCredentialOnly">
+              <transport 
+              	clientCredentialType="Basic"
+              	proxyCredentialType="NTLM"
+              	realm="realm" />
+            </security>
+          </binding>
+        </webHttpBinding>
+      </bindings>
+    </system.serviceModel>
+</configuration>
\ No newline at end of file
Index: class/System.ServiceModel.Web/Test/System.ServiceModel.Configuration/WebHttpBindingElementTest.cs
===================================================================
--- class/System.ServiceModel.Web/Test/System.ServiceModel.Configuration/WebHttpBindingElementTest.cs	(revision 0)
+++ class/System.ServiceModel.Web/Test/System.ServiceModel.Configuration/WebHttpBindingElementTest.cs	(revision 0)
@@ -0,0 +1,65 @@
+
+using System;
+using System.ServiceModel.Configuration;
+using NUnit.Framework;
+using System.ServiceModel;
+using System.Text;
+using System.Configuration;
+
+namespace MonoTests.System.ServiceModel.Configuration
+{
+	[TestFixture]
+	public class WebHttpBindingElementTest
+	{
+		class Poker : WebHttpBindingElement
+		{
+			public Type GetBindingElementType () {
+				return BindingElementType;
+			}
+		}
+
+		[Test]
+		public void BindingElementType () {
+			Poker poker = new Poker ();
+			Assert.AreEqual (typeof (WebHttpBinding), poker.GetBindingElementType (), "BindingElementType");
+		}
+		
+		[Test]
+		public void ApplyConfiguration ()
+		{
+			WebHttpBinding b = CreateBindingFromConfig ();
+
+			Assert.AreEqual (true, b.AllowCookies, "#1");
+			Assert.AreEqual (true, b.BypassProxyOnLocal, "#2");
+			Assert.AreEqual (HostNameComparisonMode.Exact, b.HostNameComparisonMode, "#3");
+			Assert.AreEqual (262144, b.MaxBufferPoolSize, "#4");
+			Assert.AreEqual (32768, b.MaxBufferSize, "#5");
+			Assert.AreEqual (16384, b.MaxReceivedMessageSize, "#6");
+			Assert.AreEqual ("proxy", b.ProxyAddress.ToString (), "#7");
+			Assert.AreEqual (Encoding.Unicode, b.WriteEncoding, "#8");
+			Assert.AreEqual (TransferMode.Streamed, b.TransferMode, "#9");
+		}
+		
+		[Test]
+		public void Security()
+		{
+			WebHttpBinding b = CreateBindingFromConfig();
+			Assert.AreEqual(WebHttpSecurityMode.TransportCredentialOnly, b.Security.Mode, "#1");
+			Assert.AreEqual(HttpClientCredentialType.Basic, b.Security.Transport.ClientCredentialType, "#2");
+			
+		}
+		
+		private WebHttpBinding CreateBindingFromConfig ()
+		{
+			ServiceModelSectionGroup config = (ServiceModelSectionGroup) ConfigurationManager.OpenExeConfiguration ("Test/config/webHttpBinding").GetSectionGroup ("system.serviceModel");
+			WebHttpBindingCollectionElement collectionElement = (WebHttpBindingCollectionElement)config.Bindings["webHttpBinding"];
+			
+			WebHttpBindingElement el = collectionElement.Bindings["WebHttpBinding1_Service"];
+
+			WebHttpBinding b = new WebHttpBinding ();
+			el.ApplyConfiguration (b);
+
+			return b;
+		}
+	}
+}
Index: class/System.ServiceModel.Web/Test/System.ServiceModel.Configuration/ChangeLog
===================================================================
--- class/System.ServiceModel.Web/Test/System.ServiceModel.Configuration/ChangeLog	(revision 0)
+++ class/System.ServiceModel.Web/Test/System.ServiceModel.Configuration/ChangeLog	(revision 0)
@@ -0,0 +1,3 @@
+2010-03-01  Sander Rijken  <sr@d-90.nl>
+
+	* WebHttpBindingElementTest.cs : new test.
Index: class/System.ServiceModel.Web/System.ServiceModel.Configuration/EncodingConverter.cs
===================================================================
--- class/System.ServiceModel.Web/System.ServiceModel.Configuration/EncodingConverter.cs	(revision 0)
+++ class/System.ServiceModel.Web/System.ServiceModel.Configuration/EncodingConverter.cs	(revision 0)
@@ -0,0 +1,50 @@
+//
+// WebHttpSecurity.cs
+//
+// Author:
+//	Sander Rijken <sr@d-90.nl>
+//
+// Copyright (C) 2008 Novell, Inc (http://www.novell.com)
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+namespace System.ServiceModel.Configuration
+{
+	internal class EncodingConverter : TypeConverter
+	{
+		public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
+		{
+			return sourceType == typeof(string) || base.CanConvertFrom(context, sourceType);
+		}
+
+		public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
+		{
+			if(!value is string)
+				return base.ConvertFrom(context, culture, value);
+				
+			string source = (string)value;
+			Encoding encoding = Encoding.GetEncoding(source);
+			if(encoding == null)
+				throw new ArgumentException("Invalid encoding", "value");
+			
+			return encoding;
+		}
+	}
+}
\ No newline at end of file
Index: class/System.ServiceModel.Web/System.ServiceModel.Configuration/WebHttpSecurityElement.cs
===================================================================
--- class/System.ServiceModel.Web/System.ServiceModel.Configuration/WebHttpSecurityElement.cs	(revision 152535)
+++ class/System.ServiceModel.Web/System.ServiceModel.Configuration/WebHttpSecurityElement.cs	(working copy)
@@ -95,8 +95,12 @@
 		public HttpTransportSecurityElement Transport {
 			get { return (HttpTransportSecurityElement) base [transport]; }
 		}
-
-
+		
+		internal void ApplyConfiguration(WebHttpSecurity security)
+		{
+			security.Mode = Mode;
+			security.Transport.ClientCredentialType = Transport.ClientCredentialType;
+		}
 	}
 
 }
Index: class/System.ServiceModel.Web/System.ServiceModel.Configuration/WebHttpBindingElement.cs
===================================================================
--- class/System.ServiceModel.Web/System.ServiceModel.Configuration/WebHttpBindingElement.cs	(revision 152535)
+++ class/System.ServiceModel.Web/System.ServiceModel.Configuration/WebHttpBindingElement.cs	(working copy)
@@ -50,125 +50,40 @@
 	public partial class WebHttpBindingElement
 		 : StandardBindingElement,  IBindingConfigurationElement
 	{
-		// Static Fields
-		static ConfigurationPropertyCollection properties;
-		static ConfigurationProperty allow_cookies;
-		static ConfigurationProperty binding_element_type;
-		static ConfigurationProperty bypass_proxy_on_local;
-		static ConfigurationProperty host_name_comparison_mode;
-		static ConfigurationProperty max_buffer_pool_size;
-		static ConfigurationProperty max_buffer_size;
-		static ConfigurationProperty max_received_message_size;
-		static ConfigurationProperty proxy_address;
-		static ConfigurationProperty reader_quotas;
-		static ConfigurationProperty security;
-		static ConfigurationProperty write_encoding;
-		static ConfigurationProperty transfer_mode;
-		static ConfigurationProperty use_default_web_proxy;
+		ConfigurationPropertyCollection _properties;
 
-		static WebHttpBindingElement ()
-		{
-			properties = new ConfigurationPropertyCollection ();
-			allow_cookies = new ConfigurationProperty ("allowCookies",
-				typeof (bool), "false", new BooleanConverter (), null,
-				ConfigurationPropertyOptions.None);
-
-			binding_element_type = new ConfigurationProperty ("",
-				typeof (Type), null, new TypeConverter (), null,
-				ConfigurationPropertyOptions.None);
-
-			bypass_proxy_on_local = new ConfigurationProperty ("bypassProxyOnLocal",
-				typeof (bool), "false", new BooleanConverter (), null,
-				ConfigurationPropertyOptions.None);
-
-			host_name_comparison_mode = new ConfigurationProperty ("hostNameComparisonMode",
-				typeof (HostNameComparisonMode), "StrongWildcard", null/* FIXME: get converter for HostNameComparisonMode*/, null,
-				ConfigurationPropertyOptions.None);
-
-			max_buffer_pool_size = new ConfigurationProperty ("maxBufferPoolSize",
-				typeof (long), "524288", null/* FIXME: get converter for long*/, null,
-				ConfigurationPropertyOptions.None);
-
-			max_buffer_size = new ConfigurationProperty ("maxBufferSize",
-				typeof (int), "65536", null/* FIXME: get converter for int*/, null,
-				ConfigurationPropertyOptions.None);
-
-			max_received_message_size = new ConfigurationProperty ("maxReceivedMessageSize",
-				typeof (long), "65536", null/* FIXME: get converter for long*/, null,
-				ConfigurationPropertyOptions.None);
-
-			proxy_address = new ConfigurationProperty ("proxyAddress",
-				typeof (Uri), null, new UriTypeConverter (), null,
-				ConfigurationPropertyOptions.None);
-
-			reader_quotas = new ConfigurationProperty ("readerQuotas",
-				typeof (XmlDictionaryReaderQuotasElement), null, null/* FIXME: get converter for XmlDictionaryReaderQuotasElement*/, null,
-				ConfigurationPropertyOptions.None);
-
-			security = new ConfigurationProperty ("security",
-				typeof (WebHttpSecurityElement), null, null/* FIXME: get converter for WebHttpSecurityElement*/, null,
-				ConfigurationPropertyOptions.None);
-
-			write_encoding = new ConfigurationProperty ("writeEncoding",
-				typeof (Encoding), "utf-8", null/* FIXME: get converter for Encoding*/, null,
-				ConfigurationPropertyOptions.None);
-
-			transfer_mode = new ConfigurationProperty ("transferMode",
-				typeof (TransferMode), "Buffered", null/* FIXME: get converter for TransferMode*/, null,
-				ConfigurationPropertyOptions.None);
-
-			use_default_web_proxy = new ConfigurationProperty ("useDefaultWebProxy",
-				typeof (bool), "true", new BooleanConverter (), null,
-				ConfigurationPropertyOptions.None);
-
-			properties.Add (allow_cookies);
-			properties.Add (binding_element_type);
-			properties.Add (bypass_proxy_on_local);
-			properties.Add (host_name_comparison_mode);
-			properties.Add (max_buffer_pool_size);
-			properties.Add (max_buffer_size);
-			properties.Add (max_received_message_size);
-			properties.Add (proxy_address);
-			properties.Add (reader_quotas);
-			properties.Add (security);
-			properties.Add (write_encoding);
-			properties.Add (transfer_mode);
-			properties.Add (use_default_web_proxy);
-		}
-
 		public WebHttpBindingElement ()
 		{
 		}
 
-
 		// Properties
 
 		[ConfigurationProperty ("allowCookies",
 			DefaultValue = false,
 			 Options = ConfigurationPropertyOptions.None)]
 		public bool AllowCookies {
-			get { return (bool) base [allow_cookies]; }
-			set { base [allow_cookies] = value; }
+			get { return (bool) base ["allowCookies"]; }
+			set { base ["allowCookies"] = value; }
 		}
 
 		protected override Type BindingElementType {
-			get { return (Type) base [binding_element_type]; }
+			get { return typeof(WebHttpBinding); }
 		}
 
 		[ConfigurationProperty ("bypassProxyOnLocal",
 			DefaultValue = false,
 			 Options = ConfigurationPropertyOptions.None)]
 		public bool BypassProxyOnLocal {
-			get { return (bool) base [bypass_proxy_on_local]; }
-			set { base [bypass_proxy_on_local] = value; }
+			get { return (bool) base ["bypassProxyOnLocal"]; }
+			set { base ["bypassProxyOnLocal"] = value; }
 		}
 
 		[ConfigurationProperty ("hostNameComparisonMode",
 			 DefaultValue = "StrongWildcard",
 			 Options = ConfigurationPropertyOptions.None)]
 		public HostNameComparisonMode HostNameComparisonMode {
-			get { return (HostNameComparisonMode) base [host_name_comparison_mode]; }
-			set { base [host_name_comparison_mode] = value; }
+			get { return (HostNameComparisonMode) base ["hostNameComparisonMode"]; }
+			set { base ["hostNameComparisonMode"] = value; }
 		}
 
 		[LongValidator ( MinValue = 0,
@@ -178,8 +93,8 @@
 			 DefaultValue = "524288",
 			 Options = ConfigurationPropertyOptions.None)]
 		public long MaxBufferPoolSize {
-			get { return (long) base [max_buffer_pool_size]; }
-			set { base [max_buffer_pool_size] = value; }
+			get { return (long) base ["maxBufferPoolSize"]; }
+			set { base ["maxBufferPoolSize"] = value; }
 		}
 
 		[IntegerValidator ( MinValue = 1,
@@ -189,8 +104,8 @@
 			 DefaultValue = "65536",
 			 Options = ConfigurationPropertyOptions.None)]
 		public int MaxBufferSize {
-			get { return (int) base [max_buffer_size]; }
-			set { base [max_buffer_size] = value; }
+			get { return (int) base ["maxBufferSize"]; }
+			set { base ["maxBufferSize"] = value; }
 		}
 
 		[LongValidator ( MinValue = 1,
@@ -200,32 +115,91 @@
 			 DefaultValue = "65536",
 			 Options = ConfigurationPropertyOptions.None)]
 		public long MaxReceivedMessageSize {
-			get { return (long) base [max_received_message_size]; }
-			set { base [max_received_message_size] = value; }
+			get { return (long) base ["maxReceivedMessageSize"]; }
+			set { base ["maxReceivedMessageSize"] = value; }
 		}
 
 		protected override ConfigurationPropertyCollection Properties {
-			get { return properties; }
+			get {
+				if(_properties != null)
+					return _properties;
+					
+				_properties = base.Properties;
+				
+				_properties.Add(new ConfigurationProperty ("allowCookies",
+					typeof (bool), "false", new BooleanConverter (), null,
+					ConfigurationPropertyOptions.None));
+
+				_properties.Add(new ConfigurationProperty ("",
+					typeof (Type), null, new TypeConverter (), null,
+					ConfigurationPropertyOptions.None));
+
+				_properties.Add(new ConfigurationProperty ("bypassProxyOnLocal",
+					typeof (bool), "false", new BooleanConverter (), null,
+					ConfigurationPropertyOptions.None));
+
+				_properties.Add(new ConfigurationProperty ("hostNameComparisonMode",
+					typeof (HostNameComparisonMode), "StrongWildcard", null, null,
+					ConfigurationPropertyOptions.None));
+
+				_properties.Add(new ConfigurationProperty ("maxBufferPoolSize",
+					typeof (long), "524288", new Int64Converter(), null,
+					ConfigurationPropertyOptions.None));
+
+				_properties.Add(new ConfigurationProperty ("maxBufferSize",
+					typeof (int), "65536", new Int32Converter(), null,
+					ConfigurationPropertyOptions.None));
+
+				_properties.Add(new ConfigurationProperty ("maxReceivedMessageSize",
+					typeof (long), "65536", new Int64Converter(), null,
+					ConfigurationPropertyOptions.None));
+
+				_properties.Add(new ConfigurationProperty ("proxyAddress",
+					typeof (Uri), null, new UriTypeConverter (), null,
+					ConfigurationPropertyOptions.None));
+
+				_properties.Add(new ConfigurationProperty ("readerQuotas",
+					typeof (XmlDictionaryReaderQuotasElement), null, null/* FIXME: get converter for XmlDictionaryReaderQuotasElement*/, null,
+					ConfigurationPropertyOptions.None));
+
+				_properties.Add(new ConfigurationProperty ("security",
+					typeof (WebHttpSecurityElement), null, null, null,
+					ConfigurationPropertyOptions.None));
+
+				_properties.Add(new ConfigurationProperty ("writeEncoding",
+					typeof (Encoding), "utf-8", new EncodingConverter(), null,
+					ConfigurationPropertyOptions.None));
+
+				_properties.Add(new ConfigurationProperty ("transferMode",
+					typeof (TransferMode), "Buffered", null, null,
+					ConfigurationPropertyOptions.None));
+
+				_properties.Add(new ConfigurationProperty ("useDefaultWebProxy",
+					typeof (bool), "true", new BooleanConverter (), null,
+					ConfigurationPropertyOptions.None));
+					
+				return _properties;
+			}
 		}
 
 		[ConfigurationProperty ("proxyAddress",
 			 DefaultValue = null,
 			 Options = ConfigurationPropertyOptions.None)]
 		public Uri ProxyAddress {
-			get { return (Uri) base [proxy_address]; }
-			set { base [proxy_address] = value; }
+			get { return (Uri) base ["proxyAddress"]; }
+			set { base ["proxyAddress"] = value; }
 		}
 
 		[ConfigurationProperty ("readerQuotas",
 			 Options = ConfigurationPropertyOptions.None)]
 		public XmlDictionaryReaderQuotasElement ReaderQuotas {
-			get { return (XmlDictionaryReaderQuotasElement) base [reader_quotas]; }
+			get { return (XmlDictionaryReaderQuotasElement) base ["readerQuotas"]; }
 		}
 
 		[ConfigurationProperty ("security",
 			 Options = ConfigurationPropertyOptions.None)]
 		public WebHttpSecurityElement Security {
-			get { return (WebHttpSecurityElement) base [security]; }
+			get { return (WebHttpSecurityElement) base ["security"]; }
 		}
 
 		[TypeConverter ()]
@@ -233,30 +207,43 @@
 			 DefaultValue = "utf-8",
 			 Options = ConfigurationPropertyOptions.None)]
 		public Encoding WriteEncoding {
-			get { return (Encoding) base [write_encoding]; }
-			set { base [write_encoding] = value; }
+			get { return (Encoding) base ["writeEncoding"]; }
+			set { base ["writeEncoding"] = value; }
 		}
 
 		[ConfigurationProperty ("transferMode",
 			 DefaultValue = "Buffered",
 			 Options = ConfigurationPropertyOptions.None)]
 		public TransferMode TransferMode {
-			get { return (TransferMode) base [transfer_mode]; }
-			set { base [transfer_mode] = value; }
+			get { return (TransferMode) base ["transferMode"]; }
+			set { base ["transferMode"] = value; }
 		}
 
 		[ConfigurationProperty ("useDefaultWebProxy",
 			DefaultValue = true,
 			 Options = ConfigurationPropertyOptions.None)]
 		public bool UseDefaultWebProxy {
-			get { return (bool) base [use_default_web_proxy]; }
-			set { base [use_default_web_proxy] = value; }
+			get { return (bool) base ["useDefaultWebProxy"]; }
+			set { base ["useDefaultWebProxy"] = value; }
 		}
 
 		protected override void OnApplyConfiguration (Binding binding)
 		{
-			throw new NotImplementedException ();
+			WebHttpBinding webBinding = (WebHttpBinding)binding;
+			
+			webBinding.AllowCookies = AllowCookies;
+			webBinding.BypassProxyOnLocal = BypassProxyOnLocal;
+			webBinding.HostNameComparisonMode = HostNameComparisonMode;
+			webBinding.MaxBufferPoolSize = MaxBufferPoolSize;
+			webBinding.MaxBufferSize = MaxBufferSize;
+			webBinding.MaxReceivedMessageSize = MaxReceivedMessageSize;
+			if(ProxyAddress != null)
+				webBinding.ProxyAddress = ProxyAddress;
+			webBinding.TransferMode = TransferMode;
+			webBinding.UseDefaultWebProxy = UseDefaultWebProxy;
+			webBinding.WriteEncoding = WriteEncoding;
+
+			Security.ApplyConfiguration(webBinding.Security);
 		}
 	}
-
 }
Index: class/System.ServiceModel.Web/System.ServiceModel.Web_test.dll.sources
===================================================================
--- class/System.ServiceModel.Web/System.ServiceModel.Web_test.dll.sources	(revision 152535)
+++ class/System.ServiceModel.Web/System.ServiceModel.Web_test.dll.sources	(working copy)
@@ -4,6 +4,7 @@
 System.ServiceModel.Activation/WebScriptServiceHostFactoryTest.cs
 System.ServiceModel.Channels/WebBodyFormatMessagePropertyTest.cs
 System.ServiceModel.Channels/WebMessageEncodingBindingElementTest.cs
+System.ServiceModel.Configuration/WebHttpBindingElementTest.cs
 System.ServiceModel.Description/WebHttpBehaviorTest.cs
 System.ServiceModel.Description/WebScriptEnablingBehaviorTest.cs
 System.ServiceModel.Dispatcher/JsonQueryStringConverterTest.cs