Index: ../mcs/class/System.Configuration/System.Configuration/ConfigurationManager.cs
===================================================================
--- ../mcs/class/System.Configuration/System.Configuration/ConfigurationManager.cs	(revision 55978)
+++ ../mcs/class/System.Configuration/System.Configuration/ConfigurationManager.cs	(working copy)
@@ -77,7 +77,7 @@
 			return Path.Combine (String.Format ("{0}_{1}", app_name, evidence_str), version);
 		}
 
-		static Configuration OpenExeConfigurationInternal (ConfigurationUserLevel userLevel, Assembly calling_assembly, string exePath)
+		static Configuration OpenExeConfigurationInternal (ConfigurationUserLevel userLevel, Assembly callingAssembly, string exePath)
 		{
 			ExeConfigurationFileMap map = new ExeConfigurationFileMap ();
 
@@ -90,22 +90,24 @@
 
 			switch (userLevel) {
 			case ConfigurationUserLevel.None:
-				if (exePath == null)
-					exePath = Assembly.GetCallingAssembly ().Location;
-				else if (!File.Exists (exePath))
-					exePath = "";
-
-				if (exePath != "")
-					map.ExeConfigFilename = exePath + ".config";
-
+				string configFile = AppDomain.CurrentDomain.SetupInformation.ConfigurationFile;
+				if(exePath == null)
+					exePath = configFile;
+				if(exePath == string.Empty)
+					exePath = configFile;
+				if(!exePath.EndsWith (".config"))
+					exePath = string.Format ("{0}.config", exePath);
+				if(!File.Exists (exePath))
+					exePath = configFile;
+				map.ExeConfigFilename = exePath;
 				break;
 			case ConfigurationUserLevel.PerUserRoaming:
-				map.RoamingUserConfigFilename = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData), GetAssemblyInfo(calling_assembly));
+				map.RoamingUserConfigFilename = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData), GetAssemblyInfo(callingAssembly));
 				map.RoamingUserConfigFilename = Path.Combine (map.RoamingUserConfigFilename, "user.config");
 				goto case ConfigurationUserLevel.PerUserRoamingAndLocal;
 
 			case ConfigurationUserLevel.PerUserRoamingAndLocal:
-				map.LocalUserConfigFilename = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData), GetAssemblyInfo(calling_assembly));
+				map.LocalUserConfigFilename = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData), GetAssemblyInfo(callingAssembly));
 				map.LocalUserConfigFilename = Path.Combine (map.LocalUserConfigFilename, "user.config");
 				break;
 			}
@@ -115,7 +117,7 @@
 
 		public static Configuration OpenExeConfiguration (ConfigurationUserLevel userLevel)
 		{
-			return OpenExeConfigurationInternal (userLevel, Assembly.GetCallingAssembly (), Assembly.GetCallingAssembly ().Location);
+			return OpenExeConfigurationInternal (userLevel, Assembly.GetCallingAssembly (), null);
 		}
 		
 		public static Configuration OpenExeConfiguration (string exePath)
@@ -144,14 +146,9 @@
 			get { return configFactory; }
 		}
 
-		[MonoTODO ("this assembly stuff is probably wrong")]
 		public static object GetSection (string sectionName)
 		{
-			Assembly a = Assembly.GetEntryAssembly ();
-			if (a == null)
-				a = Assembly.GetCallingAssembly ();
-			Configuration cfg = OpenExeConfigurationInternal (ConfigurationUserLevel.None,
-									  a, a.Location);
+			Configuration cfg = OpenExeConfigurationInternal (ConfigurationUserLevel.None, Assembly.GetCallingAssembly (), null);
 
 			if (cfg == null)
 				return null;