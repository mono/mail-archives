Index: CsharpLDAP/Novell.Directory.LDAP/Novell.Directory.Ldap/Connection.cs
===================================================================
RCS file: /cvsroot/ldapcsharp/CsharpLDAP/Novell.Directory.Ldap/Novell.Directory.Ldap/Connection.cs,v
retrieving revision 1.12
diff -r1.12 Connection.cs
330c330
< 		private System.IO.IOException deadReaderException = null; // Last exception of reader
---
> 		private System.Exception deadReaderException = null; // Last exception of reader
431d430
< 			Novell.Directory.Ldap.Connection.protocol = Connection.protocol;
591c590
< 						System.IO.IOException lex = deadReaderException;
---
> 						System.Exception lex = deadReaderException;
1374c1373
< 				System.IO.IOException ioex = null;
---
> 				System.Exception lastEx = null;
1377,1386c1376,1385
< //				Console.WriteLine("Inside run:" + this.enclosingInstance.reader.Name);
< 				try
< 				{
< 					for (; ; )
< 					{
< 						// -------------------------------------------------------
< 						// Decode an RfcLdapMessage directly from the socket.
< 						// -------------------------------------------------------
< 						Asn1Identifier asn1ID;
< 						System.IO.Stream myIn;
---
> //				Console.WriteLine("Inside run:" + this.enclosingInstance.reader.Name);
> 				try
> 				{
> 					for (; ; )
> 					{
> 						// -------------------------------------------------------
> 						// Decode an RfcLdapMessage directly from the socket.
> 						// -------------------------------------------------------
> 						Asn1Identifier asn1ID;
> 						System.IO.Stream myIn;
1389,1422c1388,1421
< 						*/
< 						myIn = this.enclosingInstance.in_Renamed;
< 						if (myIn == null)
< 						{
< 							break;
< 						}
< 						asn1ID = new Asn1Identifier(myIn);
< 						int tag = asn1ID.Tag;
< 						if (asn1ID.Tag != Asn1Sequence.TAG)
< 						{
< 							continue; // loop looking for an RfcLdapMessage identifier
< 						}
< 						
< 						// Turn the message into an RfcMessage class
< 						Asn1Length asn1Len = new Asn1Length(myIn);
< 						
< 						RfcLdapMessage msg = new RfcLdapMessage(this.enclosingInstance.decoder, myIn, asn1Len.Length);
< 						
< 						// ------------------------------------------------------------
< 						// Process the decoded RfcLdapMessage.
< 						// ------------------------------------------------------------
< 						int msgId = msg.MessageID;
< 						
< 						// Find the message which requested this response.
< 						// It is possible to receive a response for a request which
< 						// has been abandoned. If abandoned, throw it away
< 						try
< 						{
< 							info = this.enclosingInstance.messages.findMessageById(msgId);
< 							info.putReply(msg); // queue & wake up waiting thread
< 						}
< 						catch (System.FieldAccessException ex)
< 						{
< 							
---
> 						*/
> 						myIn = this.enclosingInstance.in_Renamed;
> 						if (myIn == null)
> 						{
> 							break;
> 						}
> 						asn1ID = new Asn1Identifier(myIn);
> 						int tag = asn1ID.Tag;
> 						if (asn1ID.Tag != Asn1Sequence.TAG)
> 						{
> 							continue; // loop looking for an RfcLdapMessage identifier
> 						}
> 
> 						// Turn the message into an RfcMessage class
> 						Asn1Length asn1Len = new Asn1Length(myIn);
> 
> 						RfcLdapMessage msg = new RfcLdapMessage(this.enclosingInstance.decoder, myIn, asn1Len.Length);
> 
> 						// ------------------------------------------------------------
> 						// Process the decoded RfcLdapMessage.
> 						// ------------------------------------------------------------
> 						int msgId = msg.MessageID;
> 
> 						// Find the message which requested this response.
> 						// It is possible to receive a response for a request which
> 						// has been abandoned. If abandoned, throw it away
> 						try
> 						{
> 							info = this.enclosingInstance.messages.findMessageById(msgId);
> 							info.putReply(msg); // queue & wake up waiting thread
> 						}
> 						catch (System.FieldAccessException ex)
> 						{
> 
1430,1432c1429,1431
< 							*/
< 							
< 							
---
> 							*/
> 
> 
1442,1449c1441,1448
< 							*/
< 							if (msgId == 0)
< 							{
< 								
< 								
< 								// Notify any listeners that might have been registered
< 								this.enclosingInstance.notifyAllUnsolicitedListeners(msg);
< 								
---
> 							*/
> 							if (msgId == 0)
> 							{
> 
> 
> 								// Notify any listeners that might have been registered
> 								this.enclosingInstance.notifyAllUnsolicitedListeners(msg);
> 
1455,1493c1454,1503
< 								*/
< 								if (this.enclosingInstance.unsolSvrShutDnNotification)
< 								{
< 									notify = new InterThreadException(ExceptionMessages.SERVER_SHUTDOWN_REQ, new System.Object[]{this.enclosingInstance.host, this.enclosingInstance.port}, LdapException.CONNECT_ERROR, null, null);
< 									
< 									return ;
< 								}
< 							}
< 							else
< 							{
< 								
< 							}
< 						}
< 						if ((this.enclosingInstance.stopReaderMessageID == msgId) || (this.enclosingInstance.stopReaderMessageID == Novell.Directory.Ldap.Connection.STOP_READING))
< 						{
< 							// Stop the reader Thread.
< 							return ;
< 						}
< 					}
< 				}
< 				catch(ThreadAbortException tae)
< 				{
< 					// Abort has been called on reader
< 					// before closing sockets, from shutdown
< 					return;
< 				}
< 
< 				catch (System.IO.IOException ioe)
< 				{
< 					
< 					ioex = ioe;
< 					if ((this.enclosingInstance.stopReaderMessageID != Novell.Directory.Ldap.Connection.STOP_READING) && this.enclosingInstance.clientActive)
< 					{
< 						// Connection lost waiting for results from host:port
< 						notify = new InterThreadException(ExceptionMessages.CONNECTION_WAIT, new System.Object[]{this.enclosingInstance.host, this.enclosingInstance.port}, LdapException.CONNECT_ERROR, ioe, info);
< 					}
< 					// The connection is no good, don't use it any more
< 					this.enclosingInstance.in_Renamed = null;
< 					this.enclosingInstance.out_Renamed = null;
---
> 								*/
> 								if (this.enclosingInstance.unsolSvrShutDnNotification)
> 								{
> 									notify = new InterThreadException(ExceptionMessages.SERVER_SHUTDOWN_REQ, new System.Object[] { this.enclosingInstance.host, this.enclosingInstance.port }, LdapException.CONNECT_ERROR, null, null);
> 
> 									return;
> 								}
> 							}
> 							else
> 							{
> 
> 							}
> 						}
> 						if ((this.enclosingInstance.stopReaderMessageID == msgId) || (this.enclosingInstance.stopReaderMessageID == Novell.Directory.Ldap.Connection.STOP_READING))
> 						{
> 							// Stop the reader Thread.
> 							return;
> 						}
> 					}
> 				}
> 				catch (ThreadAbortException)
> 				{
> 					// Abort has been called on reader
> 					// before closing sockets, from shutdown
> 					return;
> 				}
> 
> 				catch (System.IO.IOException ioe)
> 				{
> 
> 					lastEx = ioe;
> 					if ((this.enclosingInstance.stopReaderMessageID != Novell.Directory.Ldap.Connection.STOP_READING) && this.enclosingInstance.clientActive)
> 					{
> 						// Connection lost waiting for results from host:port
> 						notify = new InterThreadException(ExceptionMessages.CONNECTION_WAIT, new System.Object[] { this.enclosingInstance.host, this.enclosingInstance.port }, LdapException.CONNECT_ERROR, ioe, info);
> 					}
> 					// The connection is no good, don't use it any more
> 					this.enclosingInstance.in_Renamed = null;
> 					this.enclosingInstance.out_Renamed = null;
> 				}
> 				catch (Exception ex)
> 				{
> 					//We have to handle all exceptions so the application does not terminate in .NET 2.0
> 					//in the event of a background thread unhandled exception.
> 					lastEx = ex;
> 
> 					notify = new InterThreadException(ExceptionMessages.CONNECTION_ERROR, new System.Object[] { this.enclosingInstance.host, this.enclosingInstance.port }, LdapException.OPERATIONS_ERROR, ex, info);
> 
> 					this.enclosingInstance.in_Renamed = null;
> 					this.enclosingInstance.out_Renamed = null;
1526c1536
< 				this.enclosingInstance.deadReaderException = ioex;
---
> 				this.enclosingInstance.deadReaderException = lastEx;
Index: CsharpLDAP/Novell.Directory.LDAP/Novell.Directory.Ldap/LdapSearchConstraints.cs
===================================================================
RCS file: /cvsroot/ldapcsharp/CsharpLDAP/Novell.Directory.Ldap/Novell.Directory.Ldap/LdapSearchConstraints.cs,v
retrieving revision 1.4
diff -r1.4 LdapSearchConstraints.cs
241c241
< 		new private static System.Object nameLock; // protect agentNum
---
> 		private static System.Object nameLock; // protect agentNum
243c243
< 		new private System.String name; // String name for debug
---
> 		private System.String name; // String name for debug
Index: CsharpLDAP/Novell.Directory.LDAP/Novell.Directory.Ldap/Message.cs
===================================================================
RCS file: /cvsroot/ldapcsharp/CsharpLDAP/Novell.Directory.Ldap/Novell.Directory.Ldap/Message.cs,v
retrieving revision 1.5
diff -r1.5 Message.cs
422d421
< 			stopTimer(); // Make sure timer stopped
424c423,425
< 			{
---
> 			{
> 				stopTimer(); // Make sure timer stopped
> 				
Index: CsharpLDAP/Novell.Directory.LDAP/Novell.Directory.Ldap/MessageVector.cs
===================================================================
RCS file: /cvsroot/ldapcsharp/CsharpLDAP/Novell.Directory.Ldap/Novell.Directory.Ldap/MessageVector.cs,v
retrieving revision 1.2
diff -r1.2 MessageVector.cs
41,42c41,44
< 	class MessageVector:System.Collections.ArrayList
< 	{
---
> 	class MessageVector:System.Collections.IList
> 	{
> 		private System.Collections.ArrayList _innerList;
> 
56c58
< 				lock (this)
---
> 				lock (this.SyncRoot)
71,73c73,75
< 		internal MessageVector(int cap, int incr):base(cap)
< 		{
< 			return ;
---
> 		internal MessageVector(int cap, int incr):base()
> 		{
> 			_innerList = System.Collections.ArrayList.Synchronized(new System.Collections.ArrayList(cap));
91c93
< 			lock (this)
---
> 			lock (this.SyncRoot)
106,108c108,211
< 			}
< 		}
< 	}
---
> 			}
> 		}
> 
> 		#region ArrayList members
> 		public object[] ToArray()
> 		{
> 			return _innerList.ToArray();
> 		}
> 		#endregion
> 
> 		#region IList Members
> 
> 		public int Add(object value)
> 		{
> 			return _innerList.Add(value);
> 		}
> 
> 		public void Clear()
> 		{
> 			_innerList.Clear();
> 		}
> 
> 		public bool Contains(object value)
> 		{
> 			return _innerList.Contains(value);
> 		}
> 
> 		public int IndexOf(object value)
> 		{
> 			return _innerList.IndexOf(value);
> 		}
> 
> 		public void Insert(int index, object value)
> 		{
> 			_innerList.Insert(index, value);
> 		}
> 
> 		public bool IsFixedSize
> 		{
> 			get { return _innerList.IsFixedSize; }
> 		}
> 
> 		public bool IsReadOnly
> 		{
> 			get { return _innerList.IsReadOnly; }
> 		}
> 
> 		public void Remove(object value)
> 		{
> 			_innerList.Remove(value);
> 		}
> 
> 		public void RemoveAt(int index)
> 		{
> 			_innerList.RemoveAt(index);
> 		}
> 
> 		public object this[int index]
> 		{
> 			get
> 			{
> 				return _innerList[index];
> 			}
> 			set
> 			{
> 				_innerList[index] = value;
> 			}
> 		}
> 
> 		#endregion
> 
> 		#region ICollection Members
> 
> 		public void CopyTo(Array array, int index)
> 		{
> 			_innerList.CopyTo(array, index);
> 		}
> 
> 		public int Count
> 		{
> 			get { return _innerList.Count; }
> 		}
> 
> 		public bool IsSynchronized
> 		{
> 			get { return _innerList.IsSynchronized; }
> 		}
> 
> 		public object SyncRoot
> 		{
> 			get { return _innerList.SyncRoot; }
> 		}
> 
> 		#endregion
> 
> 		#region IEnumerable Members
> 
> 		public System.Collections.IEnumerator GetEnumerator()
> 		{
> 			return _innerList.GetEnumerator();
> 		}
> 
> 		#endregion
> }
Index: CsharpLDAP/Novell.Directory.LDAP/Novell.Directory.Ldap/SupportClass.cs
===================================================================
RCS file: /cvsroot/ldapcsharp/CsharpLDAP/Novell.Directory.Ldap/Novell.Directory.Ldap/SupportClass.cs,v
retrieving revision 1.4
diff -r1.4 SupportClass.cs
552c552
< 		/// <param name="arrayList">The ArrayList instance</param>
---
> 		/// <param name="arrayList">The IList instance</param>
555c555
< 		public static System.Boolean VectorRemoveElement(System.Collections.ArrayList arrayList, System.Object element)
---
> 		public static System.Boolean VectorRemoveElement(System.Collections.IList arrayList, System.Object element)
Index: CsharpLDAP/Novell.Directory.LDAP/Novell.Directory.Ldap.Events/DirectoryExceptionEventArgs.cs
===================================================================
RCS file: /cvsroot/ldapcsharp/CsharpLDAP/Novell.Directory.Ldap/Novell.Directory.Ldap.Events/DirectoryExceptionEventArgs.cs,v
retrieving revision 1.1
diff -r1.1 DirectoryExceptionEventArgs.cs
44,45c44,45
<     protected LdapException ldap_exception_object;
<     public LdapException LdapExceptionObject
---
>     protected Exception ldap_exception_object;
>     public Exception LdapExceptionObject
53c53
<     public DirectoryExceptionEventArgs(LdapMessage message, LdapException ldapException)
---
>     public DirectoryExceptionEventArgs(LdapMessage message, Exception ldapException)
Index: CsharpLDAP/Novell.Directory.LDAP/Novell.Directory.Ldap.Events/LdapEventSource.cs
===================================================================
RCS file: /cvsroot/ldapcsharp/CsharpLDAP/Novell.Directory.Ldap/Novell.Directory.Ldap.Events/LdapEventSource.cs,v
retrieving revision 1.1
diff -r1.1 LdapEventSource.cs
270,271c270,278
<     }
< 
---
>     }
> 
> 	  protected void NotifyExceptionListeners(LdapMessage sourceMessage, Exception unknownException)
> 	  {
> 		  if (null != directory_exception_event)
> 		  {
> 			  directory_exception_event(this, new DirectoryExceptionEventArgs(sourceMessage, unknownException));
> 		  }
> 	  }
318,348c325,359
< 	  LdapMessage response = null;
< 	  try 
< 	  {
< 	    while ((isrunning)
< 		   && (!searchqueue.isResponseReceived(messageid))) 
< 	    {
< 	      try 
< 	      {
< 		Thread.Sleep(sleep_time);
< 	      } 
< 	      catch (ThreadInterruptedException e) 
< 	      {
< 		Console.WriteLine("EventsGenerator::Run Got ThreadInterruptedException e = {0}", e);
< 	      }
< 	    }
< 	    
< 	    if (isrunning) 
< 	    {
< 	      response = searchqueue.getResponse(messageid);
< 	    }
< 	    
< 	    if (response != null) 
< 	    {
< 	      processmessage(response);
< 	    }
< 	  } 
< 	  catch (LdapException e) 
< 	  {
< 	    m_objLdapEventSource.NotifyExceptionListeners(response, e);
< 	  }
< 	}
---
> 	  LdapMessage response = null;
> 	  try
> 	  {
> 		  while ((isrunning)
> 			 && (!searchqueue.isResponseReceived(messageid)))
> 		  {
> 			  try
> 			  {
> 				  Thread.Sleep(sleep_time);
> 			  }
> 			  catch (ThreadInterruptedException e)
> 			  {
> 				  Console.WriteLine("EventsGenerator::Run Got ThreadInterruptedException e = {0}", e);
> 			  }
> 		  }
> 
> 		  if (isrunning)
> 		  {
> 			  response = searchqueue.getResponse(messageid);
> 		  }
> 
> 		  if (response != null)
> 		  {
> 			  processmessage(response);
> 		  }
> 	  }
> 	  catch (LdapException e)
> 	  {
> 		  m_objLdapEventSource.NotifyExceptionListeners(response, e);
> 	  }
> 	  catch (Exception e)
> 	  {
> 		  m_objLdapEventSource.NotifyExceptionListeners(response, e);
> 	  }
>   }
Index: CsharpLDAP/Novell.Directory.LDAP/Novell.Directory.Ldap.Extensions/SetReplicationFilterRequest.cs
===================================================================
RCS file: /cvsroot/ldapcsharp/CsharpLDAP/Novell.Directory.Ldap/Novell.Directory.Ldap.Extensions/SetReplicationFilterRequest.cs,v
retrieving revision 1.3
diff -r1.3 SetReplicationFilterRequest.cs
82a83
> 		[CLSCompliant(false)]
Index: CsharpLDAP/Novell.Directory.LDAP/Novell.Directory.Ldap.Rfc2251/RfcBindRequest.cs
===================================================================
RCS file: /cvsroot/ldapcsharp/CsharpLDAP/Novell.Directory.Ldap/Novell.Directory.Ldap.Rfc2251/RfcBindRequest.cs,v
retrieving revision 1.4
diff -r1.4 RfcBindRequest.cs
103c103
< 		new private static readonly Asn1Identifier ID = new Asn1Identifier(Asn1Identifier.APPLICATION, true, LdapMessage.BIND_REQUEST);
---
> 		private static readonly Asn1Identifier ID = new Asn1Identifier(Asn1Identifier.APPLICATION, true, LdapMessage.BIND_REQUEST);
