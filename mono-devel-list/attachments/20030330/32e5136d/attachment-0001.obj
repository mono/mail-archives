Index: class/corlib/System.Runtime.Remoting.Channels/ChannelServices.cs
===================================================================
RCS file: /mono/mcs/class/corlib/System.Runtime.Remoting.Channels/ChannelServices.cs,v
retrieving revision 1.12
diff -u -r1.12 ChannelServices.cs
--- class/corlib/System.Runtime.Remoting.Channels/ChannelServices.cs	3 Mar 2003 16:40:35 -0000	1.12
+++ class/corlib/System.Runtime.Remoting.Channels/ChannelServices.cs	30 Mar 2003 20:14:42 -0000
@@ -44,6 +44,7 @@
 	public sealed class ChannelServices
 	{
 		private static ArrayList registeredChannels = new ArrayList ();
+		private static ArrayList _crossAppDomainChannels = new ArrayList();
 		private static CrossContextChannel _crossContextSink = new CrossContextChannel();
 		
 		internal static string CrossContextUrl = "__CrossContext";
@@ -64,11 +65,22 @@
 
 			object[] channelDataArray = (object[])remoteChannelData;
 
-			foreach (IChannel c in registeredChannels) 
+			IMessageSink sink = CreateClientChannelSinkChain(registeredChannels, url, channelDataArray, out objectUri);
+
+			if(sink == null)
+				sink = CreateClientChannelSinkChain(_crossAppDomainChannels, url, channelDataArray, out objectUri);
+
+			return sink;
+		}
+
+		private static IMessageSink CreateClientChannelSinkChain(ArrayList channels, string url, object[] channelDataArray, out string objectUri)
+		{
+			foreach (IChannel c in channels) 
 			{
-				IChannelSender sender = c as IChannelSender;
 				if (c == null) continue;
 
+				IChannelSender sender = c as IChannelSender;
+
 				if (channelDataArray == null) {
 					IMessageSink sink = sender.CreateMessageSink (url, null, out objectUri);
 					if (sink != null) return sink;		// URL is ok, this is the channel and the sink
@@ -80,8 +92,8 @@
 					}
 				}
 			}
-			objectUri = null;
-			return null;
+			objectUri = null;
+			return null;
 		}
 		
 		public static IChannel[] RegisteredChannels
@@ -150,6 +162,11 @@
 
 		public static void RegisterChannel (IChannel chnl)
 		{
+			if(chnl is CrossAppDomainChannel) {
+				_crossAppDomainChannels.Add(chnl);
+				return;
+			}
+
 			// Put the channel in the correct place according to its priority.
 			// Since there are not many channels, a linear search is ok.
 
@@ -186,18 +203,26 @@
 		internal static object [] GetCurrentChannelInfo ()
 		{
 			ArrayList list = new ArrayList ();
+
+			GetCurrentChannelInfo(list, _crossAppDomainChannels);
+			GetCurrentChannelInfo(list, registeredChannels);
 			
-			foreach (object chnl_obj in registeredChannels) {
+			return  list.ToArray ();
+		}
+
+		private static void GetCurrentChannelInfo(ArrayList list, ArrayList channels)
+		{
+			foreach (object chnl_obj in channels)  
+			{
 				IChannelReceiver chnl = chnl_obj as IChannelReceiver;
 			
-				if (chnl != null) {
+				if (chnl != null) 
+				{
 					object chnl_data = chnl.ChannelData;
 					if (chnl_data != null)
 						list.Add (chnl_data);
 				}
-			}
-
-			return  list.ToArray ();
+			}
 		}
 	}
 }
