Make mono-ehash SGen-aware.

From: Mark Probst <mark.probst@gmail.com>


---
 mono/utils/mono-ehash.c |   91 ++++++++++++++++++++++++++++++++++++++++++++---
 1 files changed, 86 insertions(+), 5 deletions(-)

diff --git a/mono/utils/mono-ehash.c b/mono/utils/mono-ehash.c
index 1e6370c..95eb904 100644
--- a/mono/utils/mono-ehash.c
+++ b/mono/utils/mono-ehash.c
@@ -73,6 +73,33 @@ static const int prime_tbl[] = {
 	6153409, 9230113, 13845163
 };
 
+#ifdef HAVE_SGEN_GC
+static void *hash_descr = NULL;
+
+static void mono_g_hash_mark (void *addr, MonoGCCopyFunc mark_func);
+
+static Slot*
+new_slot (MonoGHashTable *hash)
+{
+	if (hash->gc_type == MONO_HASH_CONSERVATIVE_GC)
+		return mono_gc_alloc_fixed (sizeof (Slot), NULL);
+	else
+		return mg_new (Slot, 1);
+}
+
+static void
+free_slot (MonoGHashTable *hash, Slot *slot)
+{
+	if (hash->gc_type == MONO_HASH_CONSERVATIVE_GC)
+		mono_gc_free_fixed (slot);
+	else
+		mg_free (slot);
+}
+#else
+#define new_slot(h)	mg_new(Slot,1)
+#define free_slot(h,s)	mg_free((s))
+#endif
+
 static gboolean
 test_prime (int x)
 {
@@ -106,7 +133,20 @@ mono_g_hash_table_new_type (GHashFunc hash_func, GEqualFunc key_equal_func, Mono
 	MonoGHashTable *hash = mono_g_hash_table_new (hash_func, key_equal_func);
 
 	hash->gc_type = type;
-	
+
+#ifdef HAVE_SGEN_GC
+	if (type < 0 || type > MONO_HASH_KEY_VALUE_GC)
+		g_error ("wrong type for gc hashtable");
+	/*
+	 * We use a user defined marking function to avoid having to register a GC root for
+	 * each hash node.
+	 */
+	if (!hash_descr)
+		hash_descr = mono_gc_make_root_descr_user (mono_g_hash_mark);
+	if (type != MONO_HASH_CONSERVATIVE_GC)
+		mono_gc_register_root_wbarrier ((char*)hash, sizeof (MonoGHashTable), hash_descr);
+#endif
+
 	return hash;
 }
 
@@ -283,7 +323,7 @@ mono_g_hash_table_remove (MonoGHashTable *hash, gconstpointer key)
 				hash->table [hashcode] = s->next;
 			else
 				last->next = s->next;
-			mg_free (s);
+			free_slot (hash, s);
 			hash->in_use--;
 			return TRUE;
 		}
@@ -320,7 +360,7 @@ mono_g_hash_table_foreach_remove (MonoGHashTable *hash, GHRFunc func, gpointer u
 					last->next = s->next;
 					n = last->next;
 				}
-				mg_free (s);
+				free_slot (hash, s);
 				hash->in_use--;
 				count++;
 				s = n;
@@ -342,6 +382,10 @@ mono_g_hash_table_destroy (MonoGHashTable *hash)
 	
 	g_return_if_fail (hash != NULL);
 
+#ifdef HAVE_SGEN_GC
+	mono_gc_deregister_root ((char*)hash);
+#endif
+
 	for (i = 0; i < hash->table_size; i++){
 		Slot *s, *next;
 
@@ -352,7 +396,7 @@ mono_g_hash_table_destroy (MonoGHashTable *hash)
 				(*hash->key_destroy_func)(s->key);
 			if (hash->value_destroy_func != NULL)
 				(*hash->value_destroy_func)(s->value);
-			mg_free (s);
+			free_slot (hash, s);
 		}
 	}
 	mg_free (hash->table);
@@ -386,7 +430,7 @@ mono_g_hash_table_insert_replace (MonoGHashTable *hash, gpointer key, gpointer v
 			return;
 		}
 	}
-	s = mg_new (Slot, 1);
+	s = new_slot (hash);
 	s->key = key;
 	s->value = value;
 	s->next = hash->table [hashcode];
@@ -406,3 +450,40 @@ mono_g_hash_table_replace(MonoGHashTable *h, gpointer k, gpointer v)
 	mono_g_hash_table_insert_replace (h, k, v, TRUE);
 }
 
+#ifdef HAVE_SGEN_GC
+
+/* GC marker function */
+static void
+mono_g_hash_mark (void *addr, MonoGCCopyFunc mark_func)
+{
+	MonoGHashTable *table = (MonoGHashTable*)addr;
+	Slot *node;
+	int i;
+
+	if (table->gc_type == MONO_HASH_KEY_GC) {
+		for (i = 0; i < table->table_size; i++) {
+			for (node = table->table [i]; node; node = node->next) {
+				if (node->key)
+					node->key = mark_func (node->key);
+			}
+		}
+	} else if (table->gc_type == MONO_HASH_VALUE_GC) {
+		for (i = 0; i < table->table_size; i++) {
+			for (node = table->table [i]; node; node = node->next) {
+				if (node->value)
+					node->value = mark_func (node->value);
+			}
+		}
+	} else if (table->gc_type == MONO_HASH_KEY_VALUE_GC) {
+		for (i = 0; i < table->table_size; i++) {
+			for (node = table->table [i]; node; node = node->next) {
+				if (node->key)
+					node->key = mark_func (node->key);
+				if (node->value)
+					node->value = mark_func (node->value);
+			}
+		}
+	}
+}
+
+#endif