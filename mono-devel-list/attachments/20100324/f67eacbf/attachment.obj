//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.Threading;
using System.ServiceModel.Channels;
using System.Net;
using NUnit.Framework;

namespace MonoTests.System.ServiceModel
{
	[ServiceContract]
	public interface IDummyService
	{
		[OperationContract]
		void DummyOperation ();
	}
	public class DummyService : IDummyService
	{
		public void DummyOperation ()
		{
			// Do nothing
		}
	}
	[ServiceContract]
	public interface INotImplementedService
	{
		[OperationContract]
		void NotImplementedOperation ();
	}
	public class DestinationUnreachableClient : ClientBase<INotImplementedService>, INotImplementedService
	{
		public void NotImplementedOperation ()
		{
			Channel.NotImplementedOperation ();
		}
		
		public DestinationUnreachableClient (Binding binding, string address) 
			: base (binding, new EndpointAddress (address))
		{
		}
	}
	[TestFixture]
	public static class DestinationUnreachableTest
	{
		[Test]
		public static void RunDestinationUnreachableTest()
		{
			string address = "http://192.168.0.146:8000/";
			var host = OpenHost (address);
			
			var binding = new BasicHttpBinding ();
			var client = new DestinationUnreachableClient (binding, address);
			
			try {
				client.NotImplementedOperation ();
			}
			catch (WebException ex) {
				Console.WriteLine("Caught web exception: " + ex.Message);
			}
			catch (FaultException ex) {
				Assert.AreEqual(ex.Code.Name, "DestinationUnreachable");
				// ex.Message contains details
				Console.WriteLine(ex.Message);
			}
		}
		
		private static ServiceHost OpenHost (string address)
		{
			var baseAddresses = new Uri[] { 
					new Uri(address)
			    };

			var host = new ServiceHost(typeof(DummyService), baseAddresses);
			var basicBinding = new BasicHttpBinding ();
			host.AddServiceEndpoint (typeof(IDummyService), basicBinding, new Uri ("", UriKind.Relative));
			host.Open ();
			return host;
		}
	}
	
	public class DestinationUnreachableProgram
	{
		static void Main(string[] args)
		{
			Console.WriteLine("running test");

			DestinationUnreachableTest.RunDestinationUnreachableTest();
			
			Console.WriteLine("done");
			Console.ReadLine();
		}
	}
}

