Make mono-ehash SGen-aware.

From: Mark Probst <mark.probst@gmail.com>


---
 mono/metadata/boehm-gc.c    |    6 ++
 mono/metadata/gc-internal.h |    2 +
 mono/metadata/null-gc.c     |    6 ++
 mono/metadata/sgen-gc.c     |   18 +++++++
 mono/metadata/sgen-gc.h     |    2 +
 mono/utils/mono-ehash.c     |  119 +++++++++++++++++++++++++++++++++++++++----
 mono/utils/mono-hash.c      |   52 +++++++++++++------
 7 files changed, 178 insertions(+), 27 deletions(-)

diff --git a/mono/metadata/boehm-gc.c b/mono/metadata/boehm-gc.c
index 4f1fd91..8ac0f8e 100644
--- a/mono/metadata/boehm-gc.c
+++ b/mono/metadata/boehm-gc.c
@@ -932,5 +932,11 @@ mono_gc_get_write_barrier (void)
 
 #endif
 
+void
+mono_gc_invoke_without_moving (void (*func) (void*), void *data)
+{
+	func (data);
+}
+
 #endif /* no Boehm GC */
 
diff --git a/mono/metadata/gc-internal.h b/mono/metadata/gc-internal.h
index be805ad..24d8f05 100644
--- a/mono/metadata/gc-internal.h
+++ b/mono/metadata/gc-internal.h
@@ -214,6 +214,8 @@ gsize* mono_gc_get_bitmap_for_descr (void *descr, int *numbits) MONO_INTERNAL;
    or -1 if not applicable. */
 int mono_gc_get_suspend_signal (void) MONO_INTERNAL;
 
+void mono_gc_invoke_without_moving (void (*func) (void*), void *data) MONO_INTERNAL;
+
 #ifdef HAVE_SGEN_GC
 int mono_gc_get_los_limit (void) MONO_INTERNAL;
 #endif
diff --git a/mono/metadata/null-gc.c b/mono/metadata/null-gc.c
index 90b0a13..79fa464 100644
--- a/mono/metadata/null-gc.c
+++ b/mono/metadata/null-gc.c
@@ -262,5 +262,11 @@ mono_gc_get_write_barrier (void)
 	return NULL;
 }
 
+void
+mono_gc_invoke_without_moving (void (*func) (void*), void *data)
+{
+	func (data);
+}
+
 #endif
 
diff --git a/mono/metadata/sgen-gc.c b/mono/metadata/sgen-gc.c
index afb710e..34998ea 100644
--- a/mono/metadata/sgen-gc.c
+++ b/mono/metadata/sgen-gc.c
@@ -597,6 +597,7 @@ safe_object_get_size (MonoObject* o)
  * ######################################################################
  */
 static LOCK_DECLARE (gc_mutex);
+static LOCK_DECLARE (interruption_mutex);
 static int gc_disabled = 0;
 static int num_minor_gcs = 0;
 static int num_major_gcs = 0;
@@ -3337,6 +3338,8 @@ collect_nursery (size_t requested_size)
 	TV_DECLARE (atv);
 	TV_DECLARE (btv);
 
+	LOCK_INTERRUPTION;
+
 	init_stats ();
 	binary_protocol_collection (GENERATION_NURSERY);
 	check_scan_starts ();
@@ -3458,6 +3461,8 @@ collect_nursery (size_t requested_size)
 	sections_alloced = num_major_sections - old_num_major_sections;
 	minor_collection_sections_alloced += sections_alloced;
 
+	UNLOCK_INTERRUPTION;
+
 	return minor_collection_sections_alloced > minor_collection_section_allowance;
 }
 
@@ -3489,6 +3494,8 @@ major_collection (const char *reason)
 	int old_num_major_sections = num_major_sections;
 	int num_major_sections_saved, save_target, allowance_target;
 
+	LOCK_INTERRUPTION;
+
 	init_stats ();
 	binary_protocol_collection (GENERATION_OLD);
 	check_scan_starts ();
@@ -3517,6 +3524,7 @@ major_collection (const char *reason)
 	 * it is not ideal specially with large heaps.
 	 */
 	if (g_getenv ("MONO_GC_NO_MAJOR")) {
+		UNLOCK_INTERRUPTION;
 		collect_nursery (0);
 		return;
 	}
@@ -3738,6 +3746,8 @@ major_collection (const char *reason)
 	minor_collection_sections_alloced = 0;
 
 	check_scan_starts ();
+
+	UNLOCK_INTERRUPTION;
 }
 
 /*
@@ -7263,6 +7273,14 @@ mono_gc_free_fixed (void* addr)
 	free (addr);
 }
 
+void
+mono_gc_invoke_without_moving (void (*func) (void*), void *data)
+{
+	LOCK_INTERRUPTION;
+	func (data);
+	UNLOCK_INTERRUPTION;
+}
+
 gboolean
 mono_gc_is_gc_thread (void)
 {
diff --git a/mono/metadata/sgen-gc.h b/mono/metadata/sgen-gc.h
index ad3dab7..126bd4a 100644
--- a/mono/metadata/sgen-gc.h
+++ b/mono/metadata/sgen-gc.h
@@ -38,6 +38,8 @@
 #define LOCK_INIT(name)
 #define LOCK_GC pthread_mutex_lock (&gc_mutex)
 #define UNLOCK_GC pthread_mutex_unlock (&gc_mutex)
+#define LOCK_INTERRUPTION pthread_mutex_lock (&interruption_mutex)
+#define UNLOCK_INTERRUPTION pthread_mutex_unlock (&interruption_mutex)
 
 /* non-pthread will need to provide their own version of start/stop */
 #define USE_SIGNAL_BASED_START_STOP_WORLD 1
diff --git a/mono/utils/mono-ehash.c b/mono/utils/mono-ehash.c
index 1e6370c..3531458 100644
--- a/mono/utils/mono-ehash.c
+++ b/mono/utils/mono-ehash.c
@@ -73,6 +73,33 @@ static const int prime_tbl[] = {
 	6153409, 9230113, 13845163
 };
 
+#ifdef HAVE_SGEN_GC
+static void *table_hash_descr = NULL;
+
+static void mono_g_hash_mark (void *addr, MonoGCCopyFunc mark_func);
+
+static Slot*
+new_slot (MonoGHashTable *hash)
+{
+	if (hash->gc_type == MONO_HASH_CONSERVATIVE_GC)
+		return mono_gc_alloc_fixed (sizeof (Slot), NULL);
+	else
+		return mg_new (Slot, 1);
+}
+
+static void
+free_slot (MonoGHashTable *hash, Slot *slot)
+{
+	if (hash->gc_type == MONO_HASH_CONSERVATIVE_GC)
+		mono_gc_free_fixed (slot);
+	else
+		mg_free (slot);
+}
+#else
+#define new_slot(h)	mg_new(Slot,1)
+#define free_slot(h,s)	mg_free((s))
+#endif
+
 static gboolean
 test_prime (int x)
 {
@@ -106,7 +133,20 @@ mono_g_hash_table_new_type (GHashFunc hash_func, GEqualFunc key_equal_func, Mono
 	MonoGHashTable *hash = mono_g_hash_table_new (hash_func, key_equal_func);
 
 	hash->gc_type = type;
-	
+
+#ifdef HAVE_SGEN_GC
+	if (type < 0 || type > MONO_HASH_KEY_VALUE_GC)
+		g_error ("wrong type for gc hashtable");
+	/*
+	 * We use a user defined marking function to avoid having to register a GC root for
+	 * each hash node.
+	 */
+	if (!table_hash_descr)
+		table_hash_descr = mono_gc_make_root_descr_user (mono_g_hash_mark);
+	if (type != MONO_HASH_CONSERVATIVE_GC)
+		mono_gc_register_root_wbarrier ((char*)hash, sizeof (MonoGHashTable), table_hash_descr);
+#endif
+
 	return hash;
 }
 
@@ -145,20 +185,28 @@ mono_g_hash_table_new_full (GHashFunc hash_func, GEqualFunc key_equal_func,
 	return hash;
 }
 
+typedef struct {
+	MonoGHashTable *hash;
+	int new_size;
+	Slot **table;		/* in and out */
+} RehashData;
+
 static void
-do_rehash (MonoGHashTable *hash)
+do_rehash (void *_data)
 {
+	RehashData *data = _data;
+	MonoGHashTable *hash = data->hash;
 	int current_size, i;
 	Slot **table;
 
 	/* printf ("Resizing diff=%d slots=%d\n", hash->in_use - hash->last_rehash, hash->table_size); */
 	hash->last_rehash = hash->table_size;
 	current_size = hash->table_size;
-	hash->table_size = g_spaced_primes_closest (hash->in_use);
+	hash->table_size = data->new_size;
 	/* printf ("New size: %d\n", hash->table_size); */
 	table = hash->table;
-	hash->table = mg_new0 (Slot *, hash->table_size);
-	
+	hash->table = data->table;
+
 	for (i = 0; i < current_size; i++){
 		Slot *s, *next;
 
@@ -170,20 +218,28 @@ do_rehash (MonoGHashTable *hash)
 			hash->table [hashcode] = s;
 		}
 	}
-	mg_free (table);
+	data->table = table;
 }
 
 static void
 rehash (MonoGHashTable *hash)
 {
 	int diff = ABS (hash->last_rehash - hash->in_use);
+	RehashData data;
 
 	/* These are the factors to play with to change the rehashing strategy */
 	/* I played with them with a large range, and could not really get */
 	/* something that was too good, maybe the tests are not that great */
 	if (!(diff * 0.75 > hash->table_size * 2))
 		return;
-	do_rehash (hash);
+
+	data.hash = hash;
+	data.new_size = g_spaced_primes_closest (hash->in_use);
+	data.table = mg_new0 (Slot *, data.new_size);
+
+	mono_gc_invoke_without_moving (do_rehash, &data);
+
+	mg_free (data.table);
 }
 
 guint
@@ -283,7 +339,7 @@ mono_g_hash_table_remove (MonoGHashTable *hash, gconstpointer key)
 				hash->table [hashcode] = s->next;
 			else
 				last->next = s->next;
-			mg_free (s);
+			free_slot (hash, s);
 			hash->in_use--;
 			return TRUE;
 		}
@@ -320,7 +376,7 @@ mono_g_hash_table_foreach_remove (MonoGHashTable *hash, GHRFunc func, gpointer u
 					last->next = s->next;
 					n = last->next;
 				}
-				mg_free (s);
+				free_slot (hash, s);
 				hash->in_use--;
 				count++;
 				s = n;
@@ -342,6 +398,10 @@ mono_g_hash_table_destroy (MonoGHashTable *hash)
 	
 	g_return_if_fail (hash != NULL);
 
+#ifdef HAVE_SGEN_GC
+	mono_gc_deregister_root ((char*)hash);
+#endif
+
 	for (i = 0; i < hash->table_size; i++){
 		Slot *s, *next;
 
@@ -352,7 +412,7 @@ mono_g_hash_table_destroy (MonoGHashTable *hash)
 				(*hash->key_destroy_func)(s->key);
 			if (hash->value_destroy_func != NULL)
 				(*hash->value_destroy_func)(s->value);
-			mg_free (s);
+			free_slot (hash, s);
 		}
 	}
 	mg_free (hash->table);
@@ -386,7 +446,7 @@ mono_g_hash_table_insert_replace (MonoGHashTable *hash, gpointer key, gpointer v
 			return;
 		}
 	}
-	s = mg_new (Slot, 1);
+	s = new_slot (hash);
 	s->key = key;
 	s->value = value;
 	s->next = hash->table [hashcode];
@@ -406,3 +466,40 @@ mono_g_hash_table_replace(MonoGHashTable *h, gpointer k, gpointer v)
 	mono_g_hash_table_insert_replace (h, k, v, TRUE);
 }
 
+#ifdef HAVE_SGEN_GC
+
+/* GC marker function */
+static void
+mono_g_hash_mark (void *addr, MonoGCCopyFunc mark_func)
+{
+	MonoGHashTable *table = (MonoGHashTable*)addr;
+	Slot *node;
+	int i;
+
+	if (table->gc_type == MONO_HASH_KEY_GC) {
+		for (i = 0; i < table->table_size; i++) {
+			for (node = table->table [i]; node; node = node->next) {
+				if (node->key)
+					node->key = mark_func (node->key);
+			}
+		}
+	} else if (table->gc_type == MONO_HASH_VALUE_GC) {
+		for (i = 0; i < table->table_size; i++) {
+			for (node = table->table [i]; node; node = node->next) {
+				if (node->value)
+					node->value = mark_func (node->value);
+			}
+		}
+	} else if (table->gc_type == MONO_HASH_KEY_VALUE_GC) {
+		for (i = 0; i < table->table_size; i++) {
+			for (node = table->table [i]; node; node = node->next) {
+				if (node->key)
+					node->key = mark_func (node->key);
+				if (node->value)
+					node->value = mark_func (node->value);
+			}
+		}
+	}
+}
+
+#endif
diff --git a/mono/utils/mono-hash.c b/mono/utils/mono-hash.c
index c6c947b..ea613ed 100644
--- a/mono/utils/mono-hash.c
+++ b/mono/utils/mono-hash.c
@@ -788,25 +788,24 @@ mono_g_hash_table_remap (MonoGHashTable *hash_table,
 	  }
 }
 
+typedef struct {
+	MonoGHashTable *hash;
+	gint new_size;
+	MonoGHashNode **nodes;	/* in and out */
+} ResizeData;
+
 static void
-g_hash_table_resize (MonoGHashTable *hash_table)
+do_resize (void *_data)
 {
-  MonoGHashNode **new_nodes;
+  ResizeData *data = _data;
+  MonoGHashTable *hash_table = data->hash;
+  MonoGHashNode **new_nodes = data->nodes;
   MonoGHashNode *node;
   MonoGHashNode *next;
   guint hash_val;
-  gint new_size;
+  gint new_size = data->new_size;
   gint i;
 
-  new_size = g_spaced_primes_closest (hash_table->nnodes);
-  new_size = CLAMP (new_size, HASH_TABLE_MIN_SIZE, HASH_TABLE_MAX_SIZE);
- 
-#if HAVE_BOEHM_GC
-  new_nodes              = GC_MALLOC (sizeof (MonoGHashNode*) * new_size);
-#else
-  new_nodes              = g_new0 (MonoGHashNode*, new_size);
-#endif
-  
   for (i = 0; i < hash_table->size; i++)
     for (node = hash_table->nodes[i]; node; node = next)
       {
@@ -817,13 +816,34 @@ g_hash_table_resize (MonoGHashTable *hash_table)
 	node->next = new_nodes[hash_val];
 	new_nodes[hash_val] = node;
       }
-  
+
+  data->nodes = hash_table->nodes;
+
+  hash_table->nodes = new_nodes;
+  hash_table->size = new_size;
+}
+
+static void
+g_hash_table_resize (MonoGHashTable *hash_table)
+{
+	ResizeData data;
+
+	data.hash = hash_table;
+	data.new_size = g_spaced_primes_closest (hash_table->nnodes);
+	data.new_size = CLAMP (data.new_size, HASH_TABLE_MIN_SIZE, HASH_TABLE_MAX_SIZE);
+
 #if HAVE_BOEHM_GC
+	data.nodes = GC_MALLOC (sizeof (MonoGHashNode*) * data.new_size);
 #else
-  g_free (hash_table->nodes);
+	data.nodes = g_new0 (MonoGHashNode*, data.new_size);
+#endif
+
+	mono_gc_invoke_without_moving (do_resize, &data);
+
+#if HAVE_BOEHM_GC
+#else
+	g_free (data.nodes);
 #endif
-  hash_table->nodes = new_nodes;
-  hash_table->size = new_size;
 }
 
 static void