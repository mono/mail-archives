Index: Environment.cs
===================================================================
RCS file: /cvs/public/mcs/class/corlib/System/Environment.cs,v
retrieving revision 1.76
diff -u -r1.76 Environment.cs
--- Environment.cs	11 Jun 2004 01:59:23 -0000	1.76
+++ Environment.cs	15 Jun 2004 22:41:06 -0000
@@ -90,6 +90,8 @@
 			MyPictures = 0x27,
 			CommonProgramFiles = 0x2b,
 		}
+		
+		const SpecialFolder MAX_SPECIAL_FOLDER = SpecialFolder.CommonProgramFiles;
 
 		// TODO: Make sure the security attributes do what I expect
 			
@@ -367,96 +369,24 @@
 
 
 		[MethodImplAttribute (MethodImplOptions.InternalCall)]
-		private extern static string GetWindowsFolderPath (int folder);
+		private extern static string GetFolderPathInternal (int folder);
 
+		static string [] get_folder_path_cache;
 		/// <summary>
 		/// Returns the fully qualified path of the
 		/// folder specified by the "folder" parameter
 		/// </summary>
 		public static string GetFolderPath (SpecialFolder folder)
 		{
-			if ((int) Platform != 128)
-				return GetWindowsFolderPath ((int) folder);
-
-			// we can do this in managed code for non-Windows environments
-			string path = String.Empty;
-
-			string home = GetEnvironmentVariable ("HOME");
-
-			// http://freedesktop.org/Standards/basedir-spec/basedir-spec-0.6.html
-			string data = GetEnvironmentVariable ("XDG_DATA_HOME");
-			if ((data == null) || (data == String.Empty)) {
-				data = Path.Combine (home, ".local");
-				data = Path.Combine (data, "share");
-			}
-
-			string config = GetEnvironmentVariable ("XDG_CONFIG_HOME");
-			if ((config == null) || (config == String.Empty)) {
-				config = Path.Combine (home, ".config");
-			}
-
-			string cache = GetEnvironmentVariable ("XDG_CACHE_HOME");
-			if ((cache == null) || (cache == String.Empty)) {
-				cache = Path.Combine (home, ".cache");
+			if (get_folder_path_cache != null) {
+				string s = get_folder_path_cache [(int) folder];
+				if (s != null)
+					return s;
+			} else {
+				get_folder_path_cache = new string [(int)MAX_SPECIAL_FOLDER + 1];
 			}
-
-			switch (folder) {
-#if NET_1_1
-			case SpecialFolder.MyComputer: // MyComputer is a virtual directory
-				path = "";
-				break;
-#endif				      
-
-			case SpecialFolder.Personal:
-				path = home;
-				break;
-
-			// data related
-			case SpecialFolder.ApplicationData:
-			case SpecialFolder.LocalApplicationData:
-			case SpecialFolder.MyMusic:
-			case SpecialFolder.MyPictures:
-			case SpecialFolder.Templates:
-				path = data;
-				break;
-
-			// configuration related
-#if NET_1_1
-			case SpecialFolder.Desktop:
-#endif
-			case SpecialFolder.DesktopDirectory:
-			case SpecialFolder.Favorites:
-			case SpecialFolder.Programs:
-			case SpecialFolder.SendTo:
-			case SpecialFolder.StartMenu:
-			case SpecialFolder.Startup:
-				path = config;
-				break;
-
-			// cache related (could disappear)
-			case SpecialFolder.Cookies:
-			case SpecialFolder.History:
-			case SpecialFolder.InternetCache:
-			case SpecialFolder.Recent:
-				path = cache;
-				break;
-
-			// programs
-			case SpecialFolder.CommonProgramFiles:
-			case SpecialFolder.ProgramFiles:
-			case SpecialFolder.System:
-				break;
-
-			// Directories shared by all users
-			case SpecialFolder.CommonApplicationData:
-				path = Path.GetDirectoryName (GetMachineConfigPath ());
-				break;
-
-			default:
-				throw new ArgumentException ("Invalid SpecialFolder");
-                        }
-
-			return path;
+			
+			return get_folder_path_cache [(int) folder] = GetFolderPathInternal ((int) folder);
                 }
 
 		public static string[] GetLogicalDrives ()
