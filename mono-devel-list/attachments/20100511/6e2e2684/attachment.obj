--- mono-svn/mono/metadata/socket-io.c	2010-01-05 13:35:15.300401028 -0500
+++ mono/mono/metadata/socket-io.c	2010-01-04 15:16:27.466427688 -0500
@@ -155,7 +155,7 @@
 #endif
 		break;
 	default:
-		g_warning("System.Net.Sockets.AddressFamily has unknown value 0x%x", mono_family);
+		family = mono_family;
 	}
 
 	return(family);
@@ -208,7 +208,7 @@
 		break;
 #endif
 	default:
-		g_warning("unknown address family 0x%x", af_family);
+		family = af_family;		
 	}
 
 	return(family);
@@ -252,37 +252,7 @@
 
 static gint32 convert_proto(MonoProtocolType mono_proto)
 {
-	gint32 proto=-1;
-	
-	switch(mono_proto) {
-	case ProtocolType_IP:
-	case ProtocolType_IPv6:
-	case ProtocolType_Icmp:
-	case ProtocolType_Igmp:
-	case ProtocolType_Ggp:
-	case ProtocolType_Tcp:
-	case ProtocolType_Pup:
-	case ProtocolType_Udp:
-	case ProtocolType_Idp:
-		/* These protocols are known (on my system at least) */
-		proto=mono_proto;
-		break;
-		
-	case ProtocolType_ND:
-	case ProtocolType_Raw:
-	case ProtocolType_Ipx:
-	case ProtocolType_Spx:
-	case ProtocolType_SpxII:
-	case ProtocolType_Unknown:
-		/* These protocols arent */
-		g_warning("System.Net.Sockets.ProtocolType has unsupported value 0x%x", mono_proto);
-		break;
-		
-	default:
-		break;
-	}
-
-	return(proto);
+	return (gint32) mono_proto;
 }
 
 /* Convert MonoSocketFlags */
@@ -628,8 +598,10 @@
 		break;
 
 	default:
-		g_warning("System.Net.Sockets.SocketOptionLevel has unknown value 0x%x", mono_level);
-		return(-1);
+		/* Don't know what this is - map it straight through */
+		*system_level = mono_level;
+		*system_name = mono_name;
+		return(0);
 	}
 
 	return(0);
@@ -987,8 +959,16 @@
 		return sockaddr_obj;
 #endif
 	} else {
-		*error = WSAEAFNOSUPPORT;
-		return(NULL);
+		/* We don't know what this is. Let the higher level handle the bytes */
+		
+		int i;
+		for(i=0; i < sa_size; i++){
+			mono_array_set (data, guint8, i+2, saddr->sa_data[i]);
+		}
+
+		mono_field_set_value (sockaddr_obj, field, data);
+		
+		return(sockaddr_obj);		
 	}
 }
 
@@ -1147,8 +1127,20 @@
 		return (struct sockaddr *)sock_un;
 #endif
 	} else {
-		*error = WSAEAFNOSUPPORT;
-		return(0);
+
+		int i;
+
+		
+		/* Give a last ditch effor at converting the address
+		 * if we don't know what else to do with it.
+		 */
+		guint8 *addr = g_malloc0(len);
+		for(i=0; i < len; i++)
+			addr[i] = mono_array_get (data, guint8, i);
+
+		*sa_size = len;
+
+		return (struct sockaddr *) addr;
 	}
 }
 
