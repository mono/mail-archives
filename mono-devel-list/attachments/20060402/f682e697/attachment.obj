Index: Test/System.Web/HttpUtilityTest.cs
===================================================================
--- Test/System.Web/HttpUtilityTest.cs	(revision 58909)
+++ Test/System.Web/HttpUtilityTest.cs	(working copy)
@@ -138,6 +138,52 @@
 			string str = "../../&amp;param2=%CURRREV%";
 			Assert.AreEqual (str, HttpUtility.UrlDecode (str), "#1");
 		}
+
+		static char [] hexChars = "0123456789abcdef".ToCharArray ();
+
+		const string notEncoded = "!'()*-._";
+
+		static void EncodeByte (byte b, StringBuilder sb)
+		{
+			char c = (char) b;
+			if (c>' ' && notEncoded.IndexOf (c)!=-1) {
+				sb.Append (c);
+				return;
+			}
+			if (c==' ') {
+				sb.Append ('+');
+				return;
+			}
+			if ((c == ' ') ||
+					(c < '0') ||
+					(c < 'A' && c > '9') ||
+					(c > 'Z' && c < 'a') ||
+					(c > 'z')) {
+				sb.Append ("%");
+				int idx = ((int) c) >> 4;
+				sb.Append (hexChars [idx]);
+				idx = ((int) c) & 0x0F;
+				sb.Append (hexChars [idx]);
+			}
+			else
+				sb.Append (c);
+			}
+
+		[Test]
+		public void UrlEncode ()
+		{
+			for (char c=char.MinValue; c<char.MaxValue; c++) {
+				byte [] bIn;
+				bIn = Encoding.UTF8.GetBytes (c.ToString ());
+				string sActual = HttpUtility.UrlEncode (bIn);
+				StringBuilder sbExpected = new StringBuilder ();
+
+				for (int i = 0; i<bIn.Length; i++)
+					EncodeByte (bIn[i], sbExpected);
+
+				Assert.AreEqual (sActual, sbExpected.ToString());
+			}
+		}
 	}
 }
 
Index: System.Web/HttpUtility.cs
===================================================================
--- System.Web/HttpUtility.cs	(revision 58909)
+++ System.Web/HttpUtility.cs	(working copy)
@@ -648,7 +648,33 @@
 		}
 
 		static char [] hexChars = "0123456789abcdef".ToCharArray ();
+		const string notEncoded = "!'()*-._";
 
+		static void EncodeByte (byte b, Stream s) {
+			char c = (char) b;
+			if (c>' ' && notEncoded.IndexOf (c)!=-1) {
+				s.WriteByte (b);
+				return;
+			}
+			if (c==' ') {
+				s.WriteByte ((byte)'+');
+				return;
+			}
+			if ((c == ' ') ||
+				(c < '0') ||
+				(c < 'A' && c > '9') ||
+				(c > 'Z' && c < 'a') ||
+				(c > 'z')) {
+				s.WriteByte ((byte)'%');
+				int idx = ((int) c) >> 4;
+				s.WriteByte ((byte)hexChars [idx]);
+				idx = ((int) c) & 0x0F;
+				s.WriteByte ((byte)hexChars [idx]);
+			}
+			else
+				s.WriteByte (b);
+		}
+
 		public static byte [] UrlEncodeToBytes (byte [] bytes, int offset, int count)
 		{
 			if (bytes == null)
@@ -666,21 +692,8 @@
 
 			MemoryStream result = new MemoryStream ();
 			int end = offset + count;
-			for (int i = offset; i < end; i++) {
-				char c = (char) bytes [i];
-				if ((c == ' ') || (c < '0' && c != '-' && c != '.') ||
-				    (c < 'A' && c > '9') ||
-				    (c > 'Z' && c < 'a' && c != '_') ||
-				    (c > 'z')) {
-					result.WriteByte ((byte) '%');
-					int idx = ((int) c) >> 4;
-					result.WriteByte ((byte) hexChars [idx]);
-					idx = ((int) c) & 0x0F;
-					result.WriteByte ((byte) hexChars [idx]);
-				} else {
-					result.WriteByte ((byte) c);
-				}
-			}
+			for (int i = offset; i < end; i++)
+				EncodeByte (bytes [i], result);
 
 			return result.ToArray ();
 		}
