Index: System.Security/SecureString.cs
===================================================================
--- System.Security/SecureString.cs	(revision 54164)
+++ System.Security/SecureString.cs	(working copy)
@@ -36,7 +36,7 @@
 
 namespace System.Security {
 
-	[MonoTODO ("work in progress - encryption is missing")]
+	[MonoTODO ("CriticalFinalizerObject isn't handled by the runtime.")]
 	public sealed class SecureString : CriticalFinalizerObject, IDisposable {
 
 		private const int BlockSize = 16;
@@ -229,19 +229,23 @@
 
 		// internal/private stuff
 
-		[MonoTODO ("ProtectedMemory is in System.Security.dll - move this into the runtime/icall")]
 		private void Encrypt ()
 		{
-			if ((data != null) && (data.Length > 0)) {
-//				ProtectedMemory.Protect (data, MemoryProtectionScope.SameProcess);
+			if ((data != null) && (length > 0)) {
+				// 0 == MemoryProtectionScope.SameProcess
+				if (!ProtectedMemory.InternalProtectMemory (data, 0)) {
+					throw new NotSupportedException ();
+				}
 			}
 		}
 
-		[MonoTODO ("ProtectedMemory is in System.Security.dll - move this into the runtime/icall")]
 		private void Decrypt ()
 		{
-			if ((data != null) && (data.Length > 0)) {
-//				ProtectedMemory.Unprotect (data, MemoryProtectionScope.SameProcess);
+			if ((data != null) && (length > 0)) {
+				// 0 == MemoryProtectionScope.SameProcess
+				if (!ProtectedMemory.InternalUnprotectMemory (data, 0)) {
+					throw new NotSupportedException ();
+				}
 			}
 		}
 
Index: corlib.dll.sources
===================================================================
--- corlib.dll.sources	(revision 54164)
+++ corlib.dll.sources	(working copy)
@@ -1080,6 +1080,7 @@
 System.Security.Cryptography/MD5CryptoServiceProvider.cs
 System.Security.Cryptography/PaddingMode.cs
 System.Security.Cryptography/PasswordDeriveBytes.cs
+System.Security.Cryptography/ProtectedMemory.cs
 System.Security.Cryptography/PKCS1MaskGenerationMethod.cs
 System.Security.Cryptography/RandomNumberGenerator.cs
 System.Security.Cryptography/RC2.cs
Index: System.Security.Cryptography/ProtectedMemory.cs
===================================================================
--- System.Security.Cryptography/ProtectedMemory.cs	(revision 0)
+++ System.Security.Cryptography/ProtectedMemory.cs	(revision 0)
@@ -0,0 +1,45 @@
+//
+// ProtectedMemory.cs: Special version for internal call (icall) access
+//
+// Author:
+//	Sebastien Pouliot  <sebastien@ximian.com>
+//
+// Copyright (C) 2005 Novell, Inc (http://www.novell.com)
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+#if NET_2_0
+
+using System.Runtime.CompilerServices;
+
+namespace System.Security.Cryptography {
+
+	internal sealed class ProtectedMemory {
+
+		[MethodImplAttribute (MethodImplOptions.InternalCall)]
+		public static extern bool InternalProtectMemory (byte[] pData, uint dwFlags);
+
+		[MethodImplAttribute (MethodImplOptions.InternalCall)]
+		public static extern bool InternalUnprotectMemory (byte[] pData, uint dwFlags);
+	} 
+}
+
+#endif

