Index: typemanager.cs
===================================================================
RCS file: /cvs/public/mcs/mcs/typemanager.cs,v
retrieving revision 1.216
diff -u -3 -p -r1.216 typemanager.cs
--- typemanager.cs	6 Apr 2003 21:31:26 -0000	1.216
+++ typemanager.cs	9 Apr 2003 16:37:58 -0000
@@ -228,6 +228,8 @@ public class TypeManager {
 
 	static Hashtable builder_to_method;
 
+	static Hashtable assemblies_namespaces = new Hashtable ();
+		
 	struct Signature {
 		public string name;
 		public Type [] args;
@@ -325,10 +327,23 @@ public class TypeManager {
 		InitExpressionTypes ();
 	}
 
+	private static void AddNamespacesOf (Type t)
+	{
+		if (!assemblies_namespaces.Contains (t.Namespace)) {
+			string [] ns_elements = t.Namespace.Split ('.');
+		
+			for (int i = 1; i <= ns_elements.Length; i++){
+				string ns = String.Join (".", ns_elements, 0, i);
+				assemblies_namespaces [ns] = ns;
+			}
+		}
+	}
+
 	public static void AddUserType (string name, TypeBuilder t, Type [] ifaces)
 	{
 		try {
 			types.Add (name, t);
+			AddNamespacesOf (t);
 		} catch {
 			Type prev = (Type) types [name];
 			TypeContainer tc = builder_to_declspace [prev] as TypeContainer;
@@ -376,12 +391,14 @@ public class TypeManager {
 	public static void AddDelegateType (string name, TypeBuilder t, Delegate del)
 	{
 		types.Add (name, t);
+		AddNamespacesOf (t);
 		builder_to_declspace.Add (t, del);
 	}
 	
 	public static void AddEnumType (string name, TypeBuilder t, Enum en)
 	{
 		types.Add (name, t);
+		AddNamespacesOf (t);
 		builder_to_declspace.Add (t, en);
 	}
 
@@ -512,9 +529,10 @@ public class TypeManager {
 			return null;
 
 		types [name] = t;
+		AddNamespacesOf (t);
 		return t;
 	}
-	
+
 	/// <summary>
 	///   Returns the Type associated with @name, takes care of the fact that
 	///   reflection expects nested types to be separated from the main type
@@ -541,13 +559,17 @@ public class TypeManager {
 		// Optimization: ComposedCast will work with an existing type, and might already have the
 		// full name of the type, so the full system lookup can probably be avoided.
 		//
-		
+
 		string [] elements = name.Split ('.');
 		int count = elements.Length;
 
 		for (int n = 1; n <= count; n++){
 			string top_level_type = String.Join (".", elements, 0, n);
 
+			if (assemblies_namespaces != null)
+				if (assemblies_namespaces.Contains (top_level_type))
+					continue;
+
 			t = (Type) types [top_level_type];
 			if (t == null){
 				t = LookupTypeReflection (top_level_type);
@@ -557,6 +579,7 @@ public class TypeManager {
 			
 			if (count == n){
 				types [name] = t;
+				AddNamespacesOf (t);
 				return t;
 			} 
 
@@ -580,8 +603,6 @@ public class TypeManager {
 		return null;
 	}
 
-	static Hashtable assemblies_namespaces = new Hashtable ();
-	
 	//
 	// Returns a list of all namespaces in the assemblies and types loaded.
 	//
@@ -2017,7 +2038,7 @@ public class TypeManager {
 	public static ArrayList CopyNewMethods (ArrayList target_list, MemberList new_members)
 	{
 		if (target_list == null){
-			target_list = new ArrayList ();
+			target_list = new ArrayList (new_members.Count);
 
 			foreach (MemberInfo mi in new_members){
 				if (mi is MethodBase)
