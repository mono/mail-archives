Index: mcs/ChangeLog
from  Raja R Harinath  <rharinath@novell.com>

	* expression.cs (Invocation): Remove is_base field.
	(Invocation.DoResolve): Don't use is_base.  Use mg.IsBase.
	(Invocation.Emit): Likewise.

Index: mcs/expression.cs
--- mcs/expression.cs	23 Sep 2004 19:47:46 -0000	1.617
+++ mcs/expression.cs	30 Sep 2004 12:11:01 -0000
@@ -4096,7 +4097,6 @@
 
 		Expression expr;
 		MethodBase method = null;
-		bool is_base;
 		
 		static Hashtable method_parameter_cache;
 
@@ -4933,9 +4941,6 @@
 			// First, resolve the expression that is used to
 			// trigger the invocation
 			//
-			if (expr is BaseAccess)
-				is_base = true;
-
 			expr = expr.Resolve (ec, ResolveFlags.VariableOrValue | ResolveFlags.MethodGroup);
 			if (expr == null)
 				return null;
@@ -5001,14 +5006,14 @@
 			//
 			// Only base will allow this invocation to happen.
 			//
-			if (is_base && method.IsAbstract){
+			if (mg.IsBase && method.IsAbstract){
 				Report.Error (205, loc, "Cannot call an abstract base member: " +
 					      FullMethodDesc (method));
 				return null;
 			}
 
 			if (method.Name == "Finalize" && Arguments == null) {
-				if (is_base)
+				if (mg.IsBase)
 					Report.Error (250, loc, "Do not directly call your base class Finalize method. It is called automatically from your destructor");
 				else
 					Report.Error (245, loc, "Destructors and object.Finalize cannot be called directly. Consider calling IDisposable.Dispose if available");
@@ -5349,7 +5354,7 @@
 		{
 			MethodGroupExpr mg = (MethodGroupExpr) this.expr;
 
-			EmitCall (ec, is_base, method.IsStatic, mg.InstanceExpression, method, Arguments, loc);
+			EmitCall (ec, mg.IsBase, method.IsStatic, mg.InstanceExpression, method, Arguments, loc);
 		}
 		
 		public override void EmitStatement (EmitContext ec)
