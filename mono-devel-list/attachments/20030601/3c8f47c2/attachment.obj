Index: mono/metadata/socket-io.c
===================================================================
RCS file: /mono/mono/mono/metadata/socket-io.c,v
retrieving revision 1.35
diff -u -r1.35 socket-io.c
--- mono/metadata/socket-io.c	14 May 2003 12:58:17 -0000	1.35
+++ mono/metadata/socket-io.c	1 Jun 2003 20:19:16 -0000
@@ -13,6 +13,7 @@
 #include <string.h>
 #include <stdlib.h>
 #include <unistd.h>
+#include <errno.h>
 
 #include <mono/metadata/object.h>
 #include <mono/io-layer/io-layer.h>
@@ -96,7 +97,7 @@
 		family=AF_APPLETALK;
 		break;
 		
-#ifdef AF_INET6
+#if defined(AF_INET6) /* && (defined(NET_1_0) || defined(NET_1_1)) */
 	case AddressFamily_InterNetworkV6:
 		family=AF_INET6;
 		break;
@@ -148,7 +149,7 @@
 		family=AddressFamily_AppleTalk;
 		break;
 		
-#ifdef AF_INET6
+#if defined(AF_INET6) /* && defined(NET_1_1) */
 	case AF_INET6:
 		family=AddressFamily_InterNetworkV6;
 		break;
@@ -208,6 +209,7 @@
 	
 	switch(mono_proto) {
 	case ProtocolType_IP:
+	case ProtocolType_IPv6:
 	case ProtocolType_Icmp:
 	case ProtocolType_Igmp:
 	case ProtocolType_Ggp:
@@ -387,6 +389,51 @@
 			return(-1);
 		}
 		break;
+
+#if defined(AF_INET6) /* && defined(NET_1_1) */
+	case SocketOptionLevel_IPv6:
+		*system_level = SOL_IPV6;
+
+		switch(mono_name) {
+		case SocketOptionName_IpTimeToLive:
+			*system_name = IPV6_UNICAST_HOPS;
+			break;
+		case SocketOptionName_MulticastInterface:
+			*system_name = IPV6_MULTICAST_IF;
+			break;
+		case SocketOptionName_MulticastTimeToLive:
+			*system_name = IPV6_MULTICAST_HOPS;
+			break;
+		case SocketOptionName_MulticastLoopback:
+			*system_name = IPV6_MULTICAST_LOOP;
+			break;
+		case SocketOptionName_AddMembership:
+			*system_name = IPV6_JOIN_GROUP;
+			break;
+		case SocketOptionName_DropMembership:
+			*system_name = IPV6_LEAVE_GROUP;
+			break;
+		case SocketOptionName_PacketInformation:
+			*system_name = IPV6_PKTINFO;
+			break;
+		case SocketOptionName_HeaderIncluded:
+		case SocketOptionName_IPOptions:
+		case SocketOptionName_TypeOfService:
+		case SocketOptionName_DontFragment:
+		case SocketOptionName_AddSourceMembership:
+		case SocketOptionName_DropSourceMembership:
+		case SocketOptionName_BlockSource:
+		case SocketOptionName_UnblockSource:
+			/* Can't figure out how to map these, so fall
+			 * through
+			 */
+		default:
+			g_warning("System.Net.Sockets.SocketOptionName 0x%x is not supported at IPv6 level", mono_name);
+			return(-1);
+		}
+
+		break;	/// SocketOptionLevel_IPv6
+#endif
 		
 	case SocketOptionLevel_Tcp:
 #ifdef HAVE_SOL_TCP
@@ -513,7 +560,7 @@
 		return(NULL);
 	}
 
-	if (sock_family == AF_INET && sock_type == SOCK_DGRAM)
+	if ( (sock_family == AF_INET || sock_family == AF_INET6) && sock_type == SOCK_DGRAM)
 		return (GUINT_TO_POINTER (sock));
 
 	/* .net seems to set this by default for SOCK_STREAM,
@@ -664,6 +711,32 @@
 		*(MonoArray **)(((char *)sockaddr_obj) + field->offset)=data;
 
 		return(sockaddr_obj);
+#if defined(AF_INET6) /* && defined(NET_1_1) */
+	} else if (saddr->sa_family == AF_INET6) {
+		struct sockaddr_in6 *sa_in=(struct sockaddr_in6 *)saddr;
+		int i;
+
+		guint16 port=ntohs(sa_in->sin6_port);
+
+		if(sa_size<28) {
+			mono_raise_exception((MonoException *)mono_exception_from_name(mono_defaults.corlib, "System", "SystemException"));
+		}
+
+		mono_array_set(data, guint8, 2, (port>>8) & 0xff);
+		mono_array_set(data, guint8, 3, (port) & 0xff);
+
+		for(i=0; i<16; i++)
+			mono_array_set(data, guint8, 8+i, sa_in->sin6_addr.s6_addr[i]);
+
+		mono_array_set(data, guint8, 24, sa_in->sin6_scope_id & 0xff);
+		mono_array_set(data, guint8, 25, (sa_in->sin6_scope_id >> 8) & 0xff);
+		mono_array_set(data, guint8, 26, (sa_in->sin6_scope_id >> 16) & 0xff);
+		mono_array_set(data, guint8, 27, (sa_in->sin6_scope_id >> 24) & 0xff);
+
+		*(MonoArray **)(((char *)sockaddr_obj) + field->offset)=data;
+
+		return(sockaddr_obj);
+#endif
 #ifdef HAVE_SYS_UN_H
 	} else if (saddr->sa_family == AF_UNIX) {
 		int i;
@@ -683,14 +756,14 @@
 
 extern MonoObject *ves_icall_System_Net_Sockets_Socket_LocalEndPoint_internal(SOCKET sock)
 {
-	struct sockaddr sa;
+	gchar sa[32];	/// sockaddr in not big enough for sockaddr_in6
 	int salen;
 	int ret;
 	
 	MONO_ARCH_SAVE_REGS;
 
-	salen=sizeof(struct sockaddr);
-	ret=getsockname(sock, &sa, &salen);
+	salen=sizeof(sa);
+	ret=getsockname(sock, (struct sockaddr*)sa, &salen);
 	
 	if(ret==SOCKET_ERROR) {
 		mono_raise_exception(get_socket_exception(WSAGetLastError()));
@@ -705,13 +778,13 @@
 
 extern MonoObject *ves_icall_System_Net_Sockets_Socket_RemoteEndPoint_internal(SOCKET sock)
 {
-	struct sockaddr sa;
+	gchar sa[32];	/// sockaddr in not big enough for sockaddr_in6
 	int salen;
 	int ret;
 	
 	MONO_ARCH_SAVE_REGS;
 
-	salen=sizeof(struct sockaddr);
+	salen=sizeof(sa);
 	ret=getpeername(sock, &sa, &salen);
 	
 	if(ret==SOCKET_ERROR) {
@@ -722,7 +795,7 @@
 	g_message(G_GNUC_PRETTY_FUNCTION ": connected to %s port %d", inet_ntoa(((struct sockaddr_in *)&sa)->sin_addr), ntohs(((struct sockaddr_in *)&sa)->sin_port));
 #endif
 
-	return(create_object_from_sockaddr(&sa, salen));
+	return(create_object_from_sockaddr((struct sockaddr*)sa, salen));
 }
 
 static struct sockaddr *create_sockaddr_from_object(MonoObject *saddr_obj,
@@ -767,6 +840,28 @@
 
 		*sa_size=sizeof(struct sockaddr_in);
 		return((struct sockaddr *)sa);
+
+#if defined(AF_INET6) /* && defined(NET_1_1) */
+	} else if (family == AF_INET6) {
+		struct sockaddr_in6 *sa=g_new0(struct sockaddr_in6, 1);
+		int i;
+
+		guint16 port = mono_array_get(data, guint8, 3) + (mono_array_get(data, guint8, 2) << 8);
+		guint32 scopeid = mono_array_get(data, guint8, 24) + 
+			(mono_array_get(data, guint8, 25)<<8) + 
+			(mono_array_get(data, guint8, 26)<<16) + 
+			(mono_array_get(data, guint8, 27)<<24);
+
+		sa->sin6_family=family;
+		sa->sin6_port=htons(port);
+		sa->sin6_scope_id = scopeid;
+
+		for(i=0; i<16; i++)
+			sa->sin6_addr.s6_addr[i] = mono_array_get(data, guint8, 8+i);
+
+		*sa_size=sizeof(struct sockaddr_in6);
+		return((struct sockaddr *)sa);
+#endif
 #ifdef HAVE_SYS_UN_H
 	} else if (family == AF_UNIX) {
 		struct sockaddr_un *sock_un = g_new0 (struct sockaddr_un, 1);
@@ -803,6 +898,7 @@
 #ifdef DEBUG
 	g_message(G_GNUC_PRETTY_FUNCTION ": binding to %s port %d", inet_ntoa(((struct sockaddr_in *)sa)->sin_addr), ntohs (((struct sockaddr_in *)sa)->sin_port));
 #endif
+
 	ret=bind(sock, sa, sa_size);
 	g_free(sa);
 	
@@ -1251,6 +1347,24 @@
 	return(inaddr);
 }
 
+#if defined(AF_INET6) /* && defined(NET_1_1) */
+static struct in6_addr ipaddress_to_struct_in6_addr(MonoObject *ipaddr)
+{
+	struct in6_addr in6addr;
+	MonoClassField *field;
+	MonoArray *data;
+	int i;
+
+	field=mono_class_get_field_from_name(ipaddr->vtable->klass, "_numbers");
+	data=*(MonoArray **)(((char *)ipaddr) + field->offset);
+
+	for(i=0; i<8; i++)
+		in6addr.s6_addr16[i] = mono_array_get (data, guint16, i);
+
+	return(in6addr);
+}
+#endif /* AF_INET6 */
+
 void ves_icall_System_Net_Sockets_Socket_SetSocketOption_internal(SOCKET sock, gint32 level, gint32 name, MonoObject *obj_val, MonoArray *byte_val, gint32 int_val)
 {
 	int system_level;
@@ -1299,37 +1413,61 @@
 		{
 			MonoObject *address = NULL;
 
+#if defined(AF_INET6) /* && defined(NET_1_1) */
+			if(system_level == SOL_IPV6)
+			{
+				struct ipv6_mreq mreq6;
+
+				/*
+				 *	Get group address
+				 */
+				field = mono_class_get_field_from_name (obj_val->vtable->klass, "group");
+				address = *(gpointer *)(((char *)obj_val) + field->offset);
+				
+				if(address)
+					mreq6.ipv6mr_multiaddr = ipaddress_to_struct_in6_addr (address);
+
+				field=mono_class_get_field_from_name(obj_val->vtable->klass, "ifIndex");
+				mreq6.ipv6mr_interface =*(guint64 *)(((char *)obj_val)+field->offset);
+
+				ret = setsockopt (sock, system_level, system_name,
+					&mreq6, sizeof (mreq6));
+			}
+			else if(system_level == SOL_IP)
+#endif /* AF_INET6 */
+			{
 #ifdef HAVE_STRUCT_IP_MREQN
-			struct ip_mreqn mreq = {{0}};
+				struct ip_mreqn mreq = {{0}};
 #else
-			struct ip_mreq mreq = {{0}};
+				struct ip_mreq mreq = {{0}};
 #endif /* HAVE_STRUCT_IP_MREQN */
 			
-			/* pain! MulticastOption holds two IPAddress
-			 * members, so I have to dig the value out of
-			 * those :-(
-			 */
-			field = mono_class_get_field_from_name (obj_val->vtable->klass, "group");
-			address = *(gpointer *)(((char *)obj_val) + field->offset);
-
-			/* address might not be defined and if so, set the address to ADDR_ANY.
-			 */
-			if(address)
-				mreq.imr_multiaddr = ipaddress_to_struct_in_addr (address);
+				/* pain! MulticastOption holds two IPAddress
+				 * members, so I have to dig the value out of
+				 * those :-(
+				 */
+				field = mono_class_get_field_from_name (obj_val->vtable->klass, "group");
+				address = *(gpointer *)(((char *)obj_val) + field->offset);
+
+				/* address might not be defined and if so, set the address to ADDR_ANY.
+				 */
+				if(address)
+					mreq.imr_multiaddr = ipaddress_to_struct_in_addr (address);
 
-			field = mono_class_get_field_from_name (obj_val->vtable->klass, "local");
-			address = *(gpointer *)(((char *)obj_val) + field->offset);
+				field = mono_class_get_field_from_name (obj_val->vtable->klass, "local");
+				address = *(gpointer *)(((char *)obj_val) + field->offset);
 
 #ifdef HAVE_STRUCT_IP_MREQN
-			if(address)
-				mreq.imr_address = ipaddress_to_struct_in_addr (address);
+				if(address)
+					mreq.imr_address = ipaddress_to_struct_in_addr (address);
 #else
-			if(address)
-				mreq.imr_interface = ipaddress_to_struct_in_addr (address);
+				if(address)
+					mreq.imr_interface = ipaddress_to_struct_in_addr (address);
 #endif /* HAVE_STRUCT_IP_MREQN */
 			
-			ret = setsockopt (sock, system_level, system_name,
-					  &mreq, sizeof (mreq));
+				ret = setsockopt (sock, system_level, system_name,
+						&mreq, sizeof (mreq));
+			}
 			break;
 		}
 		default:
@@ -1423,22 +1561,107 @@
 	return(TRUE);
 }
 
+#if defined(AF_INET6) /* && defined(NET_1_1) */
+static gboolean 
+addrinfo_to_IPHostEntry(struct addrinfo *info, MonoString **h_name,
+						MonoArray **h_aliases,
+						MonoArray **h_addr_list)
+{
+	gint32 count, i;
+	struct addrinfo *ai = NULL;
+
+	MonoDomain *domain = mono_domain_get ();
+
+	for (count=0, ai=info; ai!=NULL; ai=ai->ai_next)
+	{
+		if ((ai->ai_family != PF_INET) && (ai->ai_family != PF_INET6))
+			continue;
+
+		count++;
+	}
+
+	*h_aliases=mono_array_new(domain, mono_defaults.string_class, 0);
+	*h_addr_list=mono_array_new(domain, mono_defaults.string_class, count);
+
+	for (ai=info, i=0; ai!=NULL; ai=ai->ai_next) {
+		MonoString *addr_string;
+		char *ret, *buffer;
+		gint32 buffer_size = 0;
+
+		if ((ai->ai_family != PF_INET) && (ai->ai_family != PF_INET6))
+			continue;
+
+		buffer_size = 256;
+		do {
+			buffer = g_malloc0(buffer_size);
+
+			if(ai->ai_family == PF_INET)
+				ret = inet_ntop(ai->ai_family, (void*)&(((struct sockaddr_in*)ai->ai_addr)->sin_addr), buffer, buffer_size);
+			else
+				ret = inet_ntop(ai->ai_family, (void*)&(((struct sockaddr_in6*)ai->ai_addr)->sin6_addr), buffer, buffer_size);
+
+			if(ret == 0) {
+				g_free(buffer);
+				buffer_size += 256;
+			}
+
+		} while(ret == 0 && errno == ENOSPC);
+
+		if(ret) {
+			addr_string=mono_string_new(domain, buffer);
+			g_free(buffer);
+		}
+		else
+			addr_string=mono_string_new(domain, "");
+
+		mono_array_set(*h_addr_list, MonoString *, i, addr_string);
+
+		if(!i)
+			*h_name=mono_string_new(domain, ai->ai_canonname);
+
+		i++;
+	}
+
+	if(info)
+		freeaddrinfo(info);
+
+	return(TRUE);
+}
+#endif
+
 extern MonoBoolean ves_icall_System_Net_Dns_GetHostByName_internal(MonoString *host, MonoString **h_name, MonoArray **h_aliases, MonoArray **h_addr_list)
 {
 	char *hostname;
-	struct hostent *he;
 	
 	MONO_ARCH_SAVE_REGS;
 
 	hostname=mono_string_to_utf8(host);
+
+#if defined(AF_INET6) /* && defined(NET_1_1) */
+	struct addrinfo *info = NULL, hints;
+
+	memset(&hints, 0, sizeof(hints));
+	hints.ai_family		= PF_UNSPEC;
+	hints.ai_socktype	= SOCK_STREAM;
+	hints.ai_flags		= AI_PASSIVE | AI_CANONNAME;
+
+	if( getaddrinfo(hostname, NULL, &hints, &info) == -1 )
+		return FALSE;
+	g_free(hostname);
+
+	return(addrinfo_to_IPHostEntry(info, h_name, h_aliases, h_addr_list));
+#else
+	struct hostent *he;
+
 	he=gethostbyname(hostname);
 	g_free(hostname);
-	
+
 	if(he==NULL) {
 		return(FALSE);
 	}
 
 	return(hostent_to_IPHostEntry(he, h_name, h_aliases, h_addr_list));
+#endif
 }
 
 #ifndef HAVE_INET_PTON
@@ -1482,23 +1705,75 @@
 
 extern MonoBoolean ves_icall_System_Net_Dns_GetHostByAddr_internal(MonoString *addr, MonoString **h_name, MonoArray **h_aliases, MonoArray **h_addr_list)
 {
+	char *address;
+
+#if defined(AF_INET6) /* && defined(NET_1_1) */
+	struct sockaddr_in saddr;
+	struct sockaddr_in6 saddr6;
+	struct addrinfo *info = NULL, hints;
+	gint32 family;
+	char hostname[1024] = {0};
+#else
 	struct in_addr inaddr;
 	struct hostent *he;
-	char *address;
-	
+#endif
+
 	MONO_ARCH_SAVE_REGS;
 
 	address = mono_string_to_utf8 (addr);
+
+#if defined(AF_INET6) /* && defined(NET_1_1) */
+	if (inet_pton (AF_INET, address, &saddr.sin_addr ) <= 0) {
+		/* Maybe an ipv6 address */
+		if (inet_pton (AF_INET6, address, &saddr6.sin6_addr) <= 0) {
+			g_free (address);
+			return FALSE;
+		}
+		else {
+			family = AF_INET6;
+			saddr6.sin6_family = AF_INET6;
+		}
+	}
+	else {
+		family = AF_INET;
+		saddr.sin_family = AF_INET;
+	}
+
+	g_free(address);
+
+	if(family == AF_INET) {
+		if(getnameinfo((struct sockaddr*)&saddr, sizeof(saddr), hostname, 1024, NULL, 0, NI_NAMEREQD) != 0) {
+			return FALSE;
+		}
+	}
+	else if(family == AF_INET6) {
+		if(getnameinfo((struct sockaddr*)&saddr6, sizeof(saddr6), hostname, 1024, NULL, 0, NI_NAMEREQD) != 0) {
+			return FALSE;
+		}
+	}
+
+	memset(&hints, 0, sizeof(hints));
+	hints.ai_family		= PF_UNSPEC;
+	hints.ai_socktype	= SOCK_STREAM;
+	hints.ai_flags		= AI_PASSIVE | AI_CANONNAME;
+
+	if( getaddrinfo(hostname, NULL, &hints, &info) == -1 )
+		return FALSE;
+
+	return(addrinfo_to_IPHostEntry(info, h_name, h_aliases, h_addr_list));
+#else
 	if (inet_pton (AF_INET, address, &inaddr) <= 0) {
 		g_free (address);
 		return FALSE;
 	}
-	
 	g_free (address);
+
 	if ((he = gethostbyaddr ((char *) &inaddr, sizeof (inaddr), AF_INET)) == NULL)
 		return FALSE;
-	
+
 	return(hostent_to_IPHostEntry(he, h_name, h_aliases, h_addr_list));
+
+#endif
 }
 
 extern MonoBoolean ves_icall_System_Net_Dns_GetHostName_internal(MonoString **h_name)
Index: mono/metadata/socket-io.h
===================================================================
RCS file: /mono/mono/mono/metadata/socket-io.h,v
retrieving revision 1.4
diff -u -r1.4 socket-io.h
--- mono/metadata/socket-io.h	3 Oct 2002 09:13:56 -0000	1.4
+++ mono/metadata/socket-io.h	1 Jun 2003 20:19:16 -0000
@@ -70,6 +70,7 @@
 	ProtocolType_Pup=12,
 	ProtocolType_Udp=17,
 	ProtocolType_Idp=22,
+	ProtocolType_IPv6=41,
 	ProtocolType_ND=77,
 	ProtocolType_Raw=255,
 	ProtocolType_Unspecified=0,
@@ -83,6 +84,7 @@
 typedef enum {
 	SocketOptionLevel_Socket=65535,
 	SocketOptionLevel_IP=0,
+	SocketOptionLevel_IPv6=41,
 	SocketOptionLevel_Tcp=6,
 	SocketOptionLevel_Udp=17,
 } MonoSocketOptionLevel;
