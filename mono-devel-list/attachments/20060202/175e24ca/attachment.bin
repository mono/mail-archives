Index: mono/metadata/socket-io.h
===================================================================
--- mono/metadata/socket-io.h	(revision 56384)
+++ mono/metadata/socket-io.h	(working copy)
@@ -138,6 +138,16 @@
 	SocketOptionName_PeerCred=10001
 } MonoSocketOptionName;
 
+/* This is a copy of System.Net.Sockets.SocketFlags */
+typedef enum {
+	SocketFlags_None = 0,
+	SocketFlags_OutOfBand = 1,
+	SocketFlags_MaxIOVectorLength = 0x10,
+	SocketFlags_Peek = 2,
+	SocketFlags_DontRoute = 4,
+	SocketFlags_Partial = 0x8000
+} MonoSocketFlags;
+
 typedef struct _MonoSocketAsyncResult {
 	MonoObject obj;
 	MonoObject *socket;
Index: mono/metadata/ChangeLog
===================================================================
--- mono/metadata/ChangeLog	(revision 56384)
+++ mono/metadata/ChangeLog	(working copy)
@@ -1,3 +1,12 @@
+2006-02-02  Ankit Jain  <jankit@novell.com>
+
+	* socket-io.h (MonoSocketFlags): New. Copy of System.Net.Sockets.SocketFlags
+	* socket-io.c (convert_socketflags): New. Convert SocketFlags to native ones.
+	(ves_icall_System_Net_Sockets_Socket_Receive_internal): Convert flags using convert_socketflags.
+	(ves_icall_System_Net_Sockets_Socket_ReceiveFrom_internal): Likewise.
+	(ves_icall_System_Net_Sockets_Socket_Send_internal): Likewise.
+	(ves_icall_System_Net_Sockets_Socket_SendTo_internal): Likewise.
+
 2006-01-31  Zoltan Varga  <vargaz@gmail.com>
 
 	* icall.c (ves_icall_Type_GetInterfaceMapData): Make sure 
Index: mono/metadata/socket-io.c
===================================================================
--- mono/metadata/socket-io.c	(revision 56384)
+++ mono/metadata/socket-io.c	(working copy)
@@ -263,6 +263,39 @@
 	return(proto);
 }
 
+/* Convert MonoSocketFlags */
+static gint32 convert_socketflags (gint32 sflags)
+{
+	gint32 flags = 0;
+
+	if (!sflags)
+		/* SocketFlags.None */
+		return 0;
+
+	if (sflags & ~(SocketFlags_OutOfBand | SocketFlags_MaxIOVectorLength | SocketFlags_Peek | 
+			SocketFlags_DontRoute | SocketFlags_Partial))
+		/* Contains invalid flag values */
+		return -1;
+
+	if (sflags & SocketFlags_OutOfBand)
+		flags |= MSG_OOB;
+	if (sflags & SocketFlags_Peek)
+		flags |= MSG_PEEK;
+	if (sflags & SocketFlags_DontRoute)
+		flags |= MSG_DONTROUTE;
+	if (sflags & SocketFlags_Partial)
+#ifdef MSG_MORE
+		flags |= MSG_MORE;
+#else
+		return -1;	
+#endif
+	if (sflags & SocketFlags_MaxIOVectorLength)
+		/* FIXME: Don't know what to do for MaxIOVectorLength query */
+		return -1;	
+	
+	return (flags ? flags : -1);
+}
+
 static gint32 convert_sockopt_level_and_name(MonoSocketOptionLevel mono_level,
 					     MonoSocketOptionName mono_name,
 					     int *system_level,
@@ -1146,6 +1179,12 @@
 	
 	buf=mono_array_addr(buffer, guchar, offset);
 	
+	recvflags = convert_socketflags (flags);
+	if (recvflags == -1) {
+		*error = WSAEOPNOTSUPP;
+		return (0);
+	}
+		
 	ret = _wapi_recv (sock, buf, count, recvflags);
 	if(ret==SOCKET_ERROR) {
 		*error = WSAGetLastError ();
@@ -1180,6 +1219,12 @@
 	
 	buf=mono_array_addr(buffer, guchar, offset);
 	
+	recvflags = convert_socketflags (flags);
+	if (recvflags == -1) {
+		*error = WSAEOPNOTSUPP;
+		return (0);
+	}
+
 	ret = _wapi_recvfrom (sock, buf, count, recvflags, sa, &sa_size);
 	if(ret==SOCKET_ERROR) {
 		g_free(sa);
@@ -1227,6 +1272,12 @@
 	g_message(G_GNUC_PRETTY_FUNCTION ": Sending %d bytes", count);
 #endif
 
+	sendflags = convert_socketflags (flags);
+	if (sendflags == -1) {
+		*error = WSAEOPNOTSUPP;
+		return (0);
+	}
+
 	ret = _wapi_send (sock, buf, count, sendflags);
 	if(ret==SOCKET_ERROR) {
 		*error = WSAGetLastError ();
@@ -1269,6 +1320,12 @@
 	g_message(G_GNUC_PRETTY_FUNCTION ": Sending %d bytes", count);
 #endif
 
+	sendflags = convert_socketflags (flags);
+	if (sendflags == -1) {
+		*error = WSAEOPNOTSUPP;
+		return (0);
+	}
+
 	ret = _wapi_sendto (sock, buf, count, sendflags, sa, sa_size);
 	if(ret==SOCKET_ERROR) {
 		*error = WSAGetLastError ();

