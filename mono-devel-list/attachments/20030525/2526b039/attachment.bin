Index: ChangeLog
===================================================================
RCS file: /cvs/public/xsp/server/ChangeLog,v
retrieving revision 1.27
diff -u -r1.27 ChangeLog
--- ChangeLog	25 May 2003 14:46:01 -0000	1.27
+++ ChangeLog	25 May 2003 18:20:00 -0000
@@ -1,3 +1,7 @@
+2003-05-25  Ben Maurer <bmaurer@users.sourceforge.net>
+	* XSPWorkerRequest.cs: Fixed up more path stuff. Includes support
+	for URL "tails" (e.g. foo.aspx/tail).
+
 2003-05-24  Ben Maurer <bmaurer@users.sourceforge.net>
 	* XSPWorkerRequest.cs: Now /foo/ does not redirect to
 	/foo/index.aspx, it just does a Response.Transfer () sort of
Index: XSPWorkerRequest.cs
===================================================================
RCS file: /cvs/public/xsp/server/XSPWorkerRequest.cs,v
retrieving revision 1.11
diff -u -r1.11 XSPWorkerRequest.cs
--- XSPWorkerRequest.cs	25 May 2003 14:46:01 -0000	1.11
+++ XSPWorkerRequest.cs	25 May 2003 18:20:00 -0000
@@ -30,8 +30,11 @@
 		IApplicationHost appHost;
 		Stream stream;
 		string verb;
+		string rawUrl;
 		string path;
+		string filePath;
 		string queryString;
+		string pathInfo;
 		string protocol;
 		Hashtable headers;
 		string [][] unknownHeaders;
@@ -214,7 +217,7 @@
 		public override string GetFilePath ()
 		{
 			WebTrace.WriteLine ("GetFilePath()");
-			return path;
+			return filePath;
 		}
 
 		public override string GetHttpVerbName ()
@@ -297,7 +300,7 @@
 		public override string GetPathInfo ()
 		{
 			WebTrace.WriteLine ("GetPathInfo()");
-			return "GetPathInfo";
+			return pathInfo;
 		}
 
 		public override byte [] GetPreloadedEntityBody ()
@@ -323,10 +326,7 @@
 		public override string GetRawUrl ()
 		{
 			WebTrace.WriteLine ("GetRawUrl()");
-			if (queryString != null && queryString.Length > 0)
-				return path + "?" + queryString;
-
-			return path;
+			return rawUrl;
 		}
 
 		public override string GetRemoteAddress ()
@@ -341,7 +341,6 @@
 			return 0;
 		}
 
-
 		public override string GetServerName ()
 		{
 			WebTrace.WriteLine ("GetServerName()");
@@ -410,6 +409,7 @@
 				string testfile = Path.Combine (localPath, indexFile);
 				if (File.Exists (testfile)) {
 					path += indexFile;
+					filePath = path;
 					return true;
 				}
 			}
@@ -425,43 +425,47 @@
 		private bool GetRequestLine ()
 		{
 			string req = ReadLine ();
+			
 			if (req == null)
 				return false;
-
-			req = req.Trim ();
-			int length = req.Length;
-			if (length >= 5 && 0 == String.Compare ("GET ", req.Substring (0, 4), true))
-				verb = "GET";
-			else if (length >= 6 && 0 == String.Compare ("POST ", req.Substring (0, 5), true))
-				verb = "POST";
-			else
-				throw new InvalidOperationException ("Unsupported method in query: " + req);
-
-			req = req.Substring (verb.Length + 1).TrimStart ();
-			string [] s = req.Split (' ');
-			length = s.Length;
-
-			switch (length) {
-			case 1:
-				path = s [0];
-				break;
-			case 2:
-				path = s [0];
-				protocol = s [1];
-				break;
-			default:
+			
+			string [] s = req.Trim ().Split (' ');
+			WebTrace.WriteLine (req);
+			if (s.Length < 2 || s.Length > 3)
 				return false;
+			
+			verb = s [0];
+			rawUrl = s [1];
+			protocol = (s.Length == 3) ? s [2] : "HTTP/1.0";
+			
+			if (verb != "GET" && verb != "POST") 
+				throw new InvalidOperationException ("Unsupported method in query: " + req);
+			
+			// Let's find the query string
+			int indexQS = rawUrl.IndexOf ('?');
+			if (indexQS > 0) {
+				path = rawUrl.Substring (0, indexQS);
+				queryString = rawUrl.Substring (indexQS + 1);
+			} else {
+				path = rawUrl;
+				queryString = String.Empty;
 			}
 
-			int qmark = path.IndexOf ('?');
-			if (qmark != -1) {
-				queryString = path.Substring (qmark + 1);
-				path = path.Substring (0, qmark);
-			}
-
-			if (path.StartsWith ("/~/")) {
-				// Not sure about this. It makes request such us /~/dir/file work
-				path = path.Substring (2);
+			// Now URL decode the path
+			if (path.IndexOf('%') >= 0)
+				path = HttpUtility.UrlDecode (path);
+			
+			// Parese the pathInfo
+			int lastDot = path.LastIndexOf ('.');
+			int lastSlash = path.LastIndexOf ('/');
+			
+			if (lastDot >= 0 && lastSlash >= 0 && lastDot < lastSlash) {
+				int indexPathInfo = path.IndexOf ('/', lastDot);
+				filePath = path.Substring (0, indexPathInfo);
+				pathInfo = path.Substring (indexPathInfo);
+			} else {
+				filePath = path;
+				pathInfo = String.Empty;
 			}
 
 			return true;
@@ -498,9 +502,12 @@
 				}
 
 				WebTrace.WriteLine ("verb: " + verb);
+				WebTrace.WriteLine ("filePath: " + filePath);
 				WebTrace.WriteLine ("path: " + path);
+				WebTrace.WriteLine ("pathInfo: " + pathInfo);
 				WebTrace.WriteLine ("queryString: " + queryString);
 				WebTrace.WriteLine ("protocol: " + protocol);
+				
 				if (headers != null) {
 					foreach (string key in headers.Keys)
 						WebTrace.WriteLine (key + ": " + headers [key]);
