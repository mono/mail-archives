Index: engine/provider.cs
===================================================================
--- engine/provider.cs	(revision 49928)
+++ engine/provider.cs	(working copy)
@@ -1261,7 +1261,14 @@
 	
 	public IndexReader GetIndex ()
 	{
-		return IndexReader.Load (Path.Combine (basedir, "monodoc.index"));
+		//try to load from basedir
+		string index_file = Path.Combine (basedir, "monodoc.index");
+		if (File.Exists (index_file))
+			return IndexReader.Load (index_file);
+		//then, try to load from config dir
+		index_file = Path.Combine (SettingsHandler.Path, "monodoc.index");
+		return IndexReader.Load (index_file);
+		
 	}
 
 	public static void MakeIndex ()
@@ -1276,17 +1283,35 @@
 			hs.PopulateIndex (index_maker);
 		}
 
-		index_maker.Save (Path.Combine (root.basedir, "monodoc.index"));
+		// if the user has no write permissions use config dir
+		string path = Path.Combine (root.basedir, "monodoc.index");
+		try {
+			index_maker.Save (path);
+		} catch (System.UnauthorizedAccessException) {
+			path = Path.Combine (SettingsHandler.Path, "monodoc.index");
+			try {
+				index_maker.Save (path);
+			} catch (System.UnauthorizedAccessException) {
+				Console.WriteLine ("Unable to write index file in {0}", Path.Combine (SettingsHandler.Path, "monodoc.index")); 
+				return;
+			}
+		}
 
 		// No octal in C#, how lame is that
-		chmod (Path.Combine (root.basedir, "monodoc.index"), 0x1a4);
+		chmod (path, 0x1a4);
 		Console.WriteLine ("Documentation index updated");
 	}
 	
 	// Search Index
 	public SearchableIndex GetSearchIndex ()
 	{
-		return SearchableIndex.Load (Path.Combine (basedir, "search_index"));
+		//try to load from basedir
+		string index_file = Path.Combine (basedir, "search_index");
+		if (Directory.Exists (index_file))
+			return SearchableIndex.Load (index_file);
+		//then, try to load from config dir
+		index_file = Path.Combine (SettingsHandler.Path, "search_index");
+		return SearchableIndex.Load (index_file);
 	}
 
 	public static void MakeSearchIndex ()
@@ -1306,8 +1331,17 @@
 
 			writer = new IndexWriter(Lucene.Net.Store.FSDirectory.GetDirectory(dir, true), new StandardAnalyzer(), true);
 		} catch (UnauthorizedAccessException) {
-			Console.WriteLine ("You don't have permissions to wirte on " + dir);
-			return;
+			//try in the .config directory
+			try {
+				dir = Path.Combine (SettingsHandler.Path, "search_index");
+				if (!Directory.Exists (dir)) 
+					Directory.CreateDirectory (dir);
+
+				writer = new IndexWriter(Lucene.Net.Store.FSDirectory.GetDirectory(dir, true), new StandardAnalyzer(), true);
+			} catch (UnauthorizedAccessException) {
+				Console.WriteLine ("You don't have permissions to write on " + dir);
+				return;
+			}
 		}
 
 		//Collect all the documents
Index: engine/index.cs
===================================================================
--- engine/index.cs	(revision 49928)
+++ engine/index.cs	(working copy)
@@ -251,9 +251,6 @@
 	{
 		Encoding utf8 = new UTF8Encoding (false, true);
 
-		// If the user doesn't have write access to the path then an
-		// exception will be thrown
-		try {	
 			using (FileStream fs = File.OpenWrite (filename)){
 				BinaryWriter writer = 
 						new BinaryWriter (fs, utf8);
@@ -274,10 +271,6 @@
 				fs.Position = 4;
 				writer.Write (index_position);
 			}
-		} catch(System.UnauthorizedAccessException suae) {
-			Console.WriteLine ("\nMonodoc has no write permissions to write {0}", filename);
-			Console.WriteLine ("Please re-run this command as root (superuser)\n");
-		}
 	}
 }
 
Index: engine/ChangeLog
===================================================================
--- engine/ChangeLog	(revision 49928)
+++ engine/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2005-09-16 Mario Sopena Novales <mario.sopena@gmail.com>
+	* provider.cs: look for index in the monodoc dir and if it fails, in the
+	user .config dir (for reading and writing)
+	* index.cs: let the UnauthorizedAccessException to be catched by the
+	calling method so it can try with other dirs
+
 2005-09-08 Mario Sopena Novales <mario.sopena@gmail.com>
 	* ecma-provider.cs: Track use_css better
 	