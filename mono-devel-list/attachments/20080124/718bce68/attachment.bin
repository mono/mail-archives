Index: Mono.Unix.Native/Stdlib.cs
===================================================================
--- Mono.Unix.Native/Stdlib.cs	(revision 92060)
+++ Mono.Unix.Native/Stdlib.cs	(working copy)
@@ -454,6 +454,9 @@
 		private static extern IntPtr sys_signal (int signum, IntPtr handler);
 
 		[CLSCompliant (false)]
+		[Obsolete ("This is not safe; " + 
+				"use Mono.Unix.UnixSignal for signal delivery " +
+				"or signal_default(), signal_error(), or signal_ignore()")]
 		public static SignalHandler signal (Signum signum, SignalHandler handler)
 		{
 			int _sig = NativeConvert.FromSignum (signum);
@@ -494,6 +497,30 @@
 #endif
 		}
 
+		public static int signal_default (Signum signal)
+		{
+			IntPtr r = sys_signal (NativeConvert.FromSignum (signal), _SIG_DFL);
+			if (r == _SIG_ERR)
+				return -1;
+			return 0;
+		}
+
+		public static int signal_error (Signum signal)
+		{
+			IntPtr r = sys_signal (NativeConvert.FromSignum (signal), _SIG_ERR);
+			if (r == _SIG_ERR)
+				return -1;
+			return 0;
+		}
+
+		public static int signal_ignore (Signum signal)
+		{
+			IntPtr r = sys_signal (NativeConvert.FromSignum (signal), _SIG_IGN);
+			if (r == _SIG_ERR)
+				return -1;
+			return 0;
+		}
+
 		[DllImport (LIBC, CallingConvention=CallingConvention.Cdecl, EntryPoint="raise")]
 		private static extern int sys_raise (int sig);
 
Index: Mono.Unix.Native/ChangeLog
===================================================================
--- Mono.Unix.Native/ChangeLog	(revision 92274)
+++ Mono.Unix.Native/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2008-01-24  Jonathan Pryor  <jpryor@novell.com>
+
+	* Stdlib.cs: Obsolete Stdlib.signal(), as it's not safe; see also:
+	  http://lists.ximian.com/pipermail/mono-devel-list/2008-January/026501.html
+	  http://lists.ximian.com/pipermail/mono-devel-list/2008-January/026503.html
+	  Add signal_default(), signal_error(), signal_ignore() as replacements.
+
 2008-01-05  Jonathan Pryor  <jonpryor@vt.edu>
 
 	* Syscall.cs: Add ST_NOEXEC, ST_REMOUNT, ST_BIND to MountFlags.  Patch from
Index: Mono.Posix.dll.sources
===================================================================
--- Mono.Posix.dll.sources	(revision 92060)
+++ Mono.Posix.dll.sources	(working copy)
@@ -25,6 +25,7 @@
 ./Mono.Unix/UnixPath.cs
 ./Mono.Unix/UnixPipes.cs
 ./Mono.Unix/UnixProcess.cs
+./Mono.Unix/UnixSignal.cs
 ./Mono.Unix/UnixStream.cs
 ./Mono.Unix/UnixSymbolicLinkInfo.cs
 ./Mono.Unix/UnixUserInfo.cs
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 92060)
+++ ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2008-01-10  Jonathan Pryor  <jpryor@novell.com>
+
+	* Mono.Posix.dll.sources: Add Mono.Unix/UnixSignal.cs.
+
 2006-10-24  Jonathan Pryor  <jonpryor@vt.edu>
 
 	* Makefile: Don't build make-map.exe.
Index: Mono.Unix/UnixSignal.cs
===================================================================
--- Mono.Unix/UnixSignal.cs	(revision 0)
+++ Mono.Unix/UnixSignal.cs	(revision 0)
@@ -0,0 +1,142 @@
+//
+// Mono.Unix/UnixSignal.cs
+//
+// Authors:
+//   Jonathan Pryor (jpryor@novell.com)
+//
+// (C) 2008 Novell, Inc.
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Runtime.InteropServices;
+using System.Threading;
+
+using Mono.Unix.Native;
+
+namespace Mono.Unix {
+	public class UnixSignal : WaitHandle {
+		private Signum signum;
+		private int _signum;
+		private IntPtr signal_info;
+
+		public UnixSignal (Signum signum)
+		{
+			this.signum = signum;
+			this._signum = NativeConvert.FromSignum (signum);
+			this.signal_info = install (_signum);
+			if (this.signal_info == IntPtr.Zero) {
+				throw new ArgumentException ("Unable to handle signal", "signum");
+			}
+		}
+
+		public Signum Signum {
+			get { return signum; }
+		}
+
+		[DllImport (Stdlib.MPH, CallingConvention=CallingConvention.Cdecl,
+				EntryPoint="Mono_Unix_UnixSignal_install")]
+		private static extern IntPtr install (int signum);
+
+		[DllImport (Stdlib.MPH, CallingConvention=CallingConvention.Cdecl,
+				EntryPoint="Mono_Unix_UnixSignal_uninstall")]
+		private static extern int uninstall (int signum);
+
+		[DllImport (Stdlib.MPH, CallingConvention=CallingConvention.Cdecl,
+				EntryPoint="Mono_Unix_UnixSignal_wait")]
+		private static extern int wait (int signum, int timeout);
+
+		private void AssertValid ()
+		{
+			if (signal_info == IntPtr.Zero)
+				throw new ObjectDisposedException (GetType().FullName);
+		}
+
+		private unsafe SignalInfo* Info {
+			get {return (SignalInfo*) signal_info;}
+		}
+
+		public bool IsSet {
+			get {
+				AssertValid ();
+				return Count > 0;
+			}
+		}
+
+		public unsafe bool Reset ()
+		{
+			AssertValid ();
+			int n = Info->count;
+			Info->count = 0;
+			return n != 0;
+		}
+
+		public unsafe int Count {
+			get {return Info->count;}
+			set {Info->count = value;}
+		}
+
+		[Map]
+		struct SignalInfo {
+			public int count, write_fd, have_handler;
+			public IntPtr handler;
+		}
+
+		#region WaitHandle overrides
+		protected unsafe override void Dispose (bool disposing)
+		{
+			if (signal_info == IntPtr.Zero)
+				return;
+			uninstall (_signum);
+			signal_info = IntPtr.Zero;
+		}
+
+		public override bool WaitOne ()
+		{
+			return WaitOne (-1, false);
+		}
+
+		public override bool WaitOne (TimeSpan timeout, bool exitContext)
+		{
+			AssertValid ();
+			long ms = (long) timeout.TotalMilliseconds;
+			if (ms < -1 || ms > Int32.MaxValue)
+				throw new ArgumentOutOfRangeException ("timeout");
+			return WaitOne ((int) ms, exitContext);
+		}
+
+		public override bool WaitOne (int millisecondsTimeout, bool exitContext)
+		{
+			AssertValid ();
+			if (exitContext)
+				throw new InvalidOperationException ("exitContext is not supported");
+			if (millisecondsTimeout < -1)
+				throw new ArgumentOutOfRangeException ("millisecondsTimeout");
+
+			int r = wait (_signum, millisecondsTimeout);
+			if (r > 0)
+				return true;
+			return false;
+		}
+		#endregion
+	}
+}
+
Index: Mono.Unix/ChangeLog
===================================================================
--- Mono.Unix/ChangeLog	(revision 92060)
+++ Mono.Unix/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2008-01-24  Jonathan Pryor  <jpryor@novell.com>
+
+	* UnixSignal.cs: Added; Polling and blocking based Unix signal mechanism.
+	  http://lists.ximian.com/pipermail/mono-devel-list/2008-January/026501.html
+
 2007-12-17  Jonathan Pryor  <jpryor@novell.com>
 
 	* UnixEnvironment.cs: Update MachineName property accesor to use uname(2)
