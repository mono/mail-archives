From fe2e4c1f0e6f022ea3149afcd34e8da623cdb297 Mon Sep 17 00:00:00 2001
From: Michel Foucault <mmarsu@gmail.com>
Date: Sun, 2 Jan 2011 17:10:04 +0100
Subject: [PATCH] assemblyPath support

---
 mcs/tools/svcutil/Driver.cs |   90 ++++++++++++++++++++++---------------------
 1 files changed, 46 insertions(+), 44 deletions(-)

diff --git a/mcs/tools/svcutil/Driver.cs b/mcs/tools/svcutil/Driver.cs
index 07f4a84..689cd91 100644
--- a/mcs/tools/svcutil/Driver.cs
+++ b/mcs/tools/svcutil/Driver.cs
@@ -66,56 +66,58 @@ namespace Mono.ServiceContractTool
 
 			// For now only assemblyPath is supported.
 			foreach (string arg in co.RemainingArguments) {
-				Uri uri = null;
-				if (Uri.TryCreate (arg, UriKind.Absolute, out uri)) {
-					metadata = ResolveWithDisco (arg);
-					if (metadata == null)
-						metadata = ResolveWithWSMex (arg);
-
-					continue;
+				if(!File.Exists(arg)) {
+					Uri uri = null;
+					if (Uri.TryCreate (arg, UriKind.Absolute, out uri)) {
+						metadata = ResolveWithDisco (arg);
+						if (metadata == null)
+							metadata = ResolveWithWSMex (arg);
+
+							continue;
+					}
 				}
-
-				FileInfo fi = new FileInfo (arg);
-				if (!fi.Exists)
-				switch (fi.Extension) {
-				case ".exe":
-				case ".dll":
-					GenerateContractType (fi.FullName);
-					break;
-				default:
-					throw new NotSupportedException ("Not supported file extension: " + fi.Extension);
+				else {
+					FileInfo fi = new FileInfo (arg);
+					if (fi.Exists)
+					switch (fi.Extension) {
+					case ".exe":
+					case ".dll":
+						GenerateContractType (fi.FullName);
+						break;
+					default:
+						throw new NotSupportedException ("Not supported file extension: " + fi.Extension);
+					}
 				}
 			}
 
-			if (metadata == null)
-				return;
-			
-			List<IWsdlImportExtension> list = new List<IWsdlImportExtension> ();
-			list.Add (new TransportBindingElementImporter ());
-			//list.Add (new DataContractSerializerMessageContractImporter ());
-			list.Add (new XmlSerializerMessageContractImporter ());
-
-			//WsdlImporter importer = new WsdlImporter (metadata, null, list);
-			WsdlImporter importer = new WsdlImporter (metadata);
-			ServiceEndpointCollection endpoints = importer.ImportAllEndpoints ();
-			Collection<ContractDescription> contracts = new Collection<ContractDescription> ((from se in endpoints select se.Contract).ToArray ());
-
-			Console.WriteLine ("Generating files..");
-
-			// FIXME: could better become IWsdlExportExtension
-			foreach (ContractDescription cd in contracts) {
-				if (co.GenerateMoonlightProxy) {
-					var moonctx = new MoonlightChannelBaseContext ();
-					cd.Behaviors.Add (new MoonlightChannelBaseContractExtension (moonctx, co.GenerateMonoTouchProxy));
-					foreach (var od in cd.Operations)
-						od.Behaviors.Add (new MoonlightChannelBaseOperationExtension (moonctx, co.GenerateMonoTouchProxy));
-					generator.GenerateServiceContractType (cd);
-					moonctx.Fixup ();
+			if (metadata != null)
+			{
+				List<IWsdlImportExtension> list = new List<IWsdlImportExtension> ();
+				list.Add (new TransportBindingElementImporter ());
+				//list.Add (new DataContractSerializerMessageContractImporter ());
+				list.Add (new XmlSerializerMessageContractImporter ());
+
+				//WsdlImporter importer = new WsdlImporter (metadata, null, list);
+				WsdlImporter importer = new WsdlImporter (metadata);
+				ServiceEndpointCollection endpoints = importer.ImportAllEndpoints ();
+				Collection<ContractDescription> contracts = new Collection<ContractDescription> ((from se in endpoints select se.Contract).ToArray ());
+
+				Console.WriteLine ("Generating files..");
+
+				// FIXME: could better become IWsdlExportExtension
+				foreach (ContractDescription cd in contracts) {
+					if (co.GenerateMoonlightProxy) {
+						var moonctx = new MoonlightChannelBaseContext ();
+						cd.Behaviors.Add (new MoonlightChannelBaseContractExtension (moonctx, co.GenerateMonoTouchProxy));
+						foreach (var od in cd.Operations)
+							od.Behaviors.Add (new MoonlightChannelBaseOperationExtension (moonctx, co.GenerateMonoTouchProxy));
+						generator.GenerateServiceContractType (cd);
+						moonctx.Fixup ();
+					}
+					else
+						generator.GenerateServiceContractType (cd);
 				}
-				else
-					generator.GenerateServiceContractType (cd);
 			}
-
 			/*if (cns.Types.Count == 0) {
 				Console.Error.WriteLine ("Argument assemblies have no types.");
 				Environment.Exit (1);
-- 
1.7.3.2
