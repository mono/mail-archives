using System;
using System.Collections;
using System.Text;
using System.Reflection;
using System.IO;
using System.Web;
using System.Web.Hosting;
using System.Threading;
using System.Web.Util;

namespace NunitWeb
{
	public class Helper
	{
		public delegate void AnyMethod (HttpContext context, object anyParam);

		static Helper _instance;

		MyHost host;
		string baseDir;
		string binDir;

		private Helper ()
		{
			string tmpFile = Path.GetTempFileName ();
			File.Delete (tmpFile);
			Directory.CreateDirectory (tmpFile);
			baseDir = tmpFile;
			binDir = Directory.CreateDirectory (Path.Combine (baseDir, "bin")).FullName;

			foreach (Assembly ass in AppDomain.CurrentDomain.GetAssemblies ())
				CopyAssembly (ass);
			CopyWebConfig ();

			host = (MyHost) ApplicationHost.CreateApplicationHost (typeof (MyHost), "/NunitWeb", baseDir);

			int domainId = host.Initialize ();
		}

		private void CopyAssembly (Assembly ass)
		{
			if (ass.GlobalAssemblyCache)
				return;
			string oldfn = ass.ManifestModule.FullyQualifiedName;
			if (oldfn.EndsWith (".exe"))
				return;
			string newfn = Path.Combine (binDir, Path.GetFileName (oldfn));

			File.Copy (oldfn, newfn);
		}

		private void CopyWebConfig ()
		{
			using (Stream webconfig = Assembly.GetExecutingAssembly ().GetManifestResourceStream ("NunitWeb.Web.config")) {
				using (FileStream new_webconfig = new FileStream (Path.Combine (baseDir, "Web.config"), FileMode.CreateNew)) {
					byte[] array = new byte[webconfig.Length];
					webconfig.Read (array, 0, array.Length);
					new_webconfig.Write (array, 0, array.Length);
				}
			}
		}

		private string doRun (AnyMethod method, object anyParam)
		{
			if (method.Target != null && !(method.Target is MarshalByRefObject))
				throw new ArgumentException ("delegate Target must be MarshalByRefObject to pass AppDomain boundaries");

			try {
				return host.Run (method, anyParam);
			}
			catch (TargetInvocationException e) {
				if (e.InnerException != null)
					throw e.InnerException;
				else
					throw;
			}
		}

		static public string Run (AnyMethod method, object anyParam)
		{
			if (_instance == null)
				_instance = new Helper ();
			return _instance.doRun (method, anyParam);
		}

	}
}
