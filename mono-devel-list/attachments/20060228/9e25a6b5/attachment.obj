using System;

namespace System.Diagnostics
{
    /// <summary>
    /// Provides a set of methods and properties that you can use to accurately measure elapsed time
    /// </summary>
	class Stopwatch
	{
        /// <summary>
        /// Gets the frequency of the timer as the number of ticks per second.
        /// </summary>
		public static long Frequency
		{
			get { return TimeSpan.TicksPerSecond; }
		}

        /// <summary>
        /// Indicates whether the timer is based on a high-resolution performance counter.
        /// </summary>
		public static bool IsHighResolution
		{
			// This implementation makes use of System DateTime
			// which is not considered a high-resolution timer
			get { return false; }	
		}

        /// <summary>
        ///  Gets the current number of ticks in the timer mechanism.
        /// </summary>
		public static long GetTimestamp()
		{
			return System.DateTime.UtcNow.Ticks;
		}

        /// <summary>
        /// Initializes a new Stopwatch instance, sets the elapsed time property to zero, and starts measuring elapsed time.
        /// </summary>
		public static Stopwatch StartNew()
		{
			Stopwatch s = new Stopwatch();
			s.Start();
			return s;
		}

		private long startTicks;
		private long stopTicks;
		private long accumTicks;
		private bool running;

        /// <summary>
        /// Initializes a new instance of the Stopwatch class.
        /// </summary>
		public Stopwatch()
		{
			Reset();
		}

        /// <summary>
        /// Gets the total elapsed time measured by the current instance.
        /// </summary>
		public TimeSpan Elapsed
		{
			get { return new TimeSpan(ElapsedTicks); }
		}

        /// <summary>
        /// Gets the total elapsed time measured by the current instance, in milliseconds.
        /// </summary>
		public long ElapsedMilliseconds
		{
			get { return (long)(1000*((double)ElapsedTicks/(double)Frequency)); }
		}

        /// <summary>
        /// Gets the total elapsed time measured by the current instance, in timer ticks.
        /// </summary>
		public long ElapsedTicks
		{
			get { 
				if(running) {
					return (GetTimestamp() - startTicks) + accumTicks;
				} else {
					return accumTicks;
				}
			}
		}

        /// <summary>
        /// Gets a value indicating whether the Stopwatch timer is running.
        /// </summary>
		public bool IsRunning
		{
			get { return running; }
		}

        /// <summary>
        ///  Starts, or resumes, measuring elapsed time for an interval.
        /// </summary>
		public void Start()
		{
            if (!running)
            {
                running = true;
                startTicks = GetTimestamp();
            }
		}

        /// <summary>
        ///  Stops measuring elapsed time for an interval.
        /// </summary>
		public void Stop()
		{
            if (running)
            {
                stopTicks = GetTimestamp();
                running = false;
                accumTicks += (stopTicks - startTicks);
            }
		}

        /// <summary>
        ///  Stops time interval measurement and resets the elapsed time to zero.
        /// </summary>
		public void Reset()
		{
			running = false;
			startTicks = stopTicks = accumTicks = 0;
		}
	}
}