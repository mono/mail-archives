Index: Test/System.Data/DataSetTest2.cs
===================================================================
--- Test/System.Data/DataSetTest2.cs	(revision 72737)
+++ Test/System.Data/DataSetTest2.cs	(working copy)
@@ -3345,6 +3345,16 @@
 		}
 
 		[Test]
+		public void ReadXmlSchema_TableOrder ()
+		{
+			DataSet ds = new DataSet ();
+			ds.ReadXmlSchema ("Test/System.Data/schemas/Items.xsd");
+			Assert.AreEqual ("category", ds.Tables [0].TableName, "#1");
+			Assert.AreEqual ("childItemId", ds.Tables [1].TableName, "#2");
+			Assert.AreEqual ("item", ds.Tables [2].TableName, "#3");
+		}
+
+		[Test]
 		public void ReadXml_Diffgram_MissingSchema ()
 		{
 			DataSet ds = new DataSet ();
Index: Test/System.Data/schemas/Items.xsd
===================================================================
--- Test/System.Data/schemas/Items.xsd	(revision 0)
+++ Test/System.Data/schemas/Items.xsd	(revision 0)
@@ -0,0 +1,46 @@
+<?xml version="1.0" standalone="yes"?>
+<xs:schema id="items" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
+  <xs:element name="items" msdata:IsDataSet="true" msdata:UseCurrentLocale="true">
+    <xs:complexType>
+      <xs:choice minOccurs="0" maxOccurs="unbounded">
+        <xs:element name="category">
+          <xs:complexType>
+            <xs:sequence>
+              <xs:element name="id" type="xs:string" />
+              <xs:element name="visible" type="xs:string" />
+              <xs:element name="title" type="xs:string" />
+              <xs:element name="description" type="xs:string" minOccurs="0" />
+              <xs:element name="imageUrl" type="xs:string" minOccurs="0" />
+              <xs:element name="imageAltText" type="xs:string" minOccurs="0" />
+              <xs:element name="parentCategoryId" type="xs:string" minOccurs="0" />
+              <xs:element name="childItemId" nillable="true" minOccurs="0" maxOccurs="unbounded">
+                <xs:complexType>
+                  <xs:simpleContent msdata:ColumnName="childItemId_Text" msdata:Ordinal="0">
+                    <xs:extension base="xs:string">
+                    </xs:extension>
+                  </xs:simpleContent>
+                </xs:complexType>
+              </xs:element>
+
+            </xs:sequence>
+          </xs:complexType>
+          
+        </xs:element>
+        <xs:element name="item">
+          <xs:complexType>
+            <xs:sequence>
+              <xs:element name="id" type="xs:string" minOccurs="0" />
+              <xs:element name="visible" type="xs:string" minOccurs="0" />
+              <xs:element name="title" type="xs:string" minOccurs="0" />
+              <xs:element name="description" type="xs:string" minOccurs="0" />
+              <xs:element name="price" type="xs:string" minOccurs="0" />
+              <xs:element name="inStock" type="xs:string" minOccurs="0" />
+              <xs:element name="imageUrl" type="xs:string" minOccurs="0" />
+              <xs:element name="imageAltText" type="xs:string" minOccurs="0" />
+            </xs:sequence>
+          </xs:complexType>
+        </xs:element>
+      </xs:choice>
+    </xs:complexType>
+  </xs:element>
+</xs:schema>
\ No newline at end of file
Index: System.Data/XmlSchemaDataImporter.cs
===================================================================
--- System.Data/XmlSchemaDataImporter.cs	(revision 73102)
+++ System.Data/XmlSchemaDataImporter.cs	(working copy)
@@ -559,6 +559,7 @@
 
 			DataTable table = new DataTable (tableName);
 			table.Namespace = el.QualifiedName.Namespace;
+			TableStructure oldTable = currentTable;
 			currentTable = new TableStructure (table);
 
 			dataset.Tables.Add (table);
@@ -616,6 +617,8 @@
 				table.Columns.Add ((DataColumn) de.Value);
 			foreach (DataColumn dc in currentTable.NonOrdinalColumns)
 				table.Columns.Add (dc);
+
+			currentTable = oldTable;
 		}
 
 		private DataRelation GenerateRelationship (RelationStructure rs)
@@ -813,7 +816,7 @@
 
 			// If the element is not referenced one, the element will be handled later.
 			if (el.RefName == XmlQualifiedName.Empty)
-				targetElements.Add (el);
+				ProcessDataTableElement (el);
 
 		}
 
