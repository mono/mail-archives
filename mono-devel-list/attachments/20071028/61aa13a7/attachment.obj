Index: RegexMatchTests.cs
===================================================================
--- RegexMatchTests.cs	(revision 0)
+++ RegexMatchTests.cs	(revision 0)
@@ -0,0 +1,247 @@
+using System;
+using System.Text;
+using System.Text.RegularExpressions;
+
+using NUnit.Framework;
+
+namespace MonoTests.System.Text.RegularExpressions
+{
+	[TestFixture]
+	public class RegexMatchTests
+	{
+		static RegexTrial [] trials = new RegexTrial [] {
+			new RegexTrial (@"(a)(b)(c)", RegexOptions.ExplicitCapture, "abc", "Pass. Group[0]=(0,3)"),//0
+			new RegexTrial (@"(a)(?<1>b)(c)", RegexOptions.ExplicitCapture, "abc", "Pass. Group[0]=(0,3) Group[1]=(1,1)"),//1
+			new RegexTrial (@"(a)(?<2>b)(c)", RegexOptions.None, "abc", "Pass. Group[0]=(0,3) Group[1]=(0,1) Group[1]=(1,1)(2,1)"),//2
+			new RegexTrial (@"(a)(?<foo>b)(c)", RegexOptions.ExplicitCapture, "abc", "Pass. Group[0]=(0,3) Group[1]=(1,1)"),//3
+			new RegexTrial (@"(F)(2)(3)(4)(5)(6)(7)(8)(9)(10)(L)\11", RegexOptions.None, "F2345678910LL", "Pass. Group[0]=(0,13)"//4
+			+ " Group[1]=(0,1)"
+			+ " Group[2]=(1,1)"
+			+ " Group[3]=(2,1)"
+			+ " Group[4]=(3,1)"
+			+ " Group[5]=(4,1)"
+			+ " Group[6]=(5,1)"
+			+ " Group[7]=(6,1)"
+			+ " Group[8]=(7,1)"
+			+ " Group[9]=(8,1)"
+			+ " Group[10]=(9,2)"
+			+ " Group[11]=(11,1)"
+			),
+			new RegexTrial (@"(F)(2)(3)(4)(5)(6)(7)(8)(9)(10)(L)\11", RegexOptions.ExplicitCapture, "F2345678910LL", "Fail"),//5
+			new RegexTrial (@"(F)(2)(3)(4)(5)(6)(?<S>7)(8)(9)(10)(L)\1", RegexOptions.None, "F2345678910L71", "Fail."),//6
+			new RegexTrial (@"(F)(2)(3)(4)(5)(6)(7)(8)(9)(10)(L)\11", RegexOptions.None, "F2345678910LF1", "Fail."),//7
+			new RegexTrial (@"(F)(2)(3)(4)(5)(6)(?<S>7)(8)(9)(10)(L)\11", RegexOptions.None, "F2345678910L71", "Pass."//8
+			+ "	Group[0]=(0,13)"
+			+ " Group[1]=(0,1)"
+			+ " Group[2]=(1,1)"
+			+ " Group[3]=(2,1)"
+			+ " Group[4]=(3,1)"
+			+ " Group[5]=(4,1)"
+			+ " Group[6]=(5,1)"
+			+ " Group[7]=(7,1)"
+			+ " Group[8]=(8,1)"
+			+ " Group[9]=(9,2)"
+			+ " Group[10]=(11,1)"
+			+ " Group[11]=(6,1)"
+			),
+			new RegexTrial (@"(F)(2)(3)(?<S>4)(5)(6)(?'S'7)(8)(9)(10)(L)\10", RegexOptions.None, "F2345678910L71", "Pass."//9
+			+ "	Group[0]=(0,13)"
+			+ " Group[1]=(0,1)"
+			+ " Group[2]=(1,1)"
+			+ " Group[3]=(2,1)"
+			+ " Group[4]=(4,1)"
+			+ " Group[5]=(5,1)"
+			+ " Group[6]=(7,1)"
+			+ " Group[7]=(8,1)"
+			+ " Group[8]=(9,2)"
+			+ " Group[9]=(11,1)"
+			+ " Group[10]=(3,1)(6,1)"
+			),
+			new RegexTrial (@"(F)(2)(3)(?<S>4)(5)(6)(?'S'7)(8)(9)(10)(L)\10", RegexOptions.ExplicitCapture, "F2345678910L70", "Fail."),//10
+			new RegexTrial (@"(F)(2)(3)(?<S>4)(5)(6)(?'S'7)(8)(9)(10)(L)\1", RegexOptions.ExplicitCapture, "F2345678910L70", "Pass. Group[0]=(0,13) Group[1]=(3,1)(6,1)"),//11
+			new RegexTrial (@"(?n:(F)(2)(3)(?<S>4)(5)(6)(?'S'7)(8)(9)(10)(L)\1)", RegexOptions.None, "F2345678910L70", "Pass. Group[0]=(0,13) Group[1]=(3,1)(6,1)"),//12
+			new RegexTrial (@"(F)(2)(3)(?<S>4)(5)(6)(?'S'7)(8)(9)(10)(L)(?(10)\10)", RegexOptions.None, "F2345678910L70","Pass."//13
+			+ "	Group[0]=(0,13)"
+			+ " Group[1]=(0,1)"
+			+ " Group[2]=(1,1)"
+			+ " Group[3]=(2,1)"
+			+ " Group[4]=(4,1)"
+			+ " Group[5]=(5,1)"
+			+ " Group[6]=(7,1)"
+			+ " Group[7]=(8,1)"
+			+ " Group[8]=(9,2)"
+			+ " Group[9]=(11,1)"
+			+ " Group[10]=(3,1)(6,1)"
+			),
+			new RegexTrial (@"(F)(2)(3)(?<S>4)(5)(6)(?'S'7)(8)(9)(10)(L)(?(S)|\10)", RegexOptions.None, "F2345678910L70","Pass."//14
+			+ "	Group[0]=(0,12)"
+			+ " Group[1]=(0,1)"
+			+ " Group[2]=(1,1)"
+			+ " Group[3]=(2,1)"
+			+ " Group[4]=(4,1)"
+			+ " Group[5]=(5,1)"
+			+ " Group[6]=(7,1)"
+			+ " Group[7]=(8,1)"
+			+ " Group[8]=(9,2)"
+			+ " Group[9]=(11,1)"
+			+ " Group[10]=(3,1)(6,1)"
+			),
+			new RegexTrial (@"(F)(2)(3)(?<S>4)(5)(6)(?'S'7)(8)(9)(10)(L)(?(7)|\10)", RegexOptions.None, "F2345678910L70","Pass."//15
+			+ "	Group[0]=(0,12)"
+			+ " Group[1]=(0,1)"
+			+ " Group[2]=(1,1)"
+			+ " Group[3]=(2,1)"
+			+ " Group[4]=(4,1)"
+			+ " Group[5]=(5,1)"
+			+ " Group[6]=(7,1)"
+			+ " Group[7]=(8,1)"
+			+ " Group[8]=(9,2)"
+			+ " Group[9]=(11,1)"
+			+ " Group[10]=(3,1)(6,1)"
+			),
+			new RegexTrial (@"(F)(2)(3)(?<S>4)(5)(6)(?'S'7)(8)(9)(10)(L)(?(K)|\10)", RegexOptions.None, "F2345678910L70","Pass."//16
+			+ "	Group[0]=(0,13)"
+			+ " Group[1]=(0,1)"
+			+ " Group[2]=(1,1)"
+			+ " Group[3]=(2,1)"
+			+ " Group[4]=(4,1)"
+			+ " Group[5]=(5,1)"
+			+ " Group[6]=(7,1)"
+			+ " Group[7]=(8,1)"
+			+ " Group[8]=(9,2)"
+			+ " Group[9]=(11,1)"
+			+ " Group[10]=(3,1)(6,1)"
+			),
+			new RegexTrial (@"\P{IsHebrew}", RegexOptions.None, "Fì", "Pass. Group[0]=(0,1)"),//17
+			new RegexTrial (@"\p{IsHebrew}", RegexOptions.None, "Fì", "Pass. Group[0]=(1,1)"),//18
+			new RegexTrial (@"(?<=a+)(?:a)*bc", RegexOptions.None, "aabc", "Pass. Group[0]=(1,3)"),//19
+			new RegexTrial (@"(?<=a*)(?:a)*bc", RegexOptions.None, "aabc", "Pass. Group[0]=(0,4)"),//20
+			new RegexTrial (@"(?<=a{1,5})(?:a)*bc", RegexOptions.None, "aabc", "Pass. Group[0]=(1,3)"),//21
+			new RegexTrial (@"(?<=a{1})(?:a)*bc", RegexOptions.None, "aabc", "Pass. Group[0]=(1,3)"),//22
+			new RegexTrial (@"(?<=a{1,})(?:a)*bc", RegexOptions.None, "aabc", "Pass. Group[0]=(1,3)"),//23
+			new RegexTrial (@"(?<=a+?)(?:a)*bc", RegexOptions.None, "aabc", "Pass. Group[0]=(1,3)"),//24
+			new RegexTrial (@"(?<=a*?)(?:a)*bc", RegexOptions.None, "aabc", "Pass. Group[0]=(0,4)"),//25
+			new RegexTrial (@"(?<=a{1,5}?)(?:a)*bc", RegexOptions.None, "aabc", "Pass. Group[0]=(1,3)"),//26
+			new RegexTrial (@"(?<=a{1}?)(?:a)*bc", RegexOptions.None, "aabc", "Pass. Group[0]=(1,3)"),//27
+			new RegexTrial (@"(?<=a{1}?)(?:a)*bc", RegexOptions.None, "aabc", "Pass. Group[0]=(1,3)"),//28
+			new RegexTrial (@"(?<!a+)(?:a)*bc", RegexOptions.None, "aabc", "Pass. Group[0]=(0,4)"),//29
+			new RegexTrial (@"(?<!a*)(?:a)*bc", RegexOptions.None, "aabc", "Fail."),//30
+			new RegexTrial (@"abc*(?=c*)", RegexOptions.None, "abcc", "Pass. Group[0]=(0,4)"),//31
+			new RegexTrial (@"abc*(?=c+)", RegexOptions.None, "abcc", "Pass. Group[0]=(0,3)"),//32
+			new RegexTrial (@"abc*(?=c{1})", RegexOptions.None, "abcc", "Pass. Group[0]=(0,3)"),//33
+			new RegexTrial (@"abc*(?=c{1,5})", RegexOptions.None, "abcc", "Pass. Group[0]=(0,3)"),//34
+			new RegexTrial (@"abc*(?=c{1,})", RegexOptions.None, "abcc", "Pass. Group[0]=(0,3)"),//35
+			new RegexTrial (@"abc*(?=c*?)", RegexOptions.None, "abcc", "Pass. Group[0]=(0,4)"),//36
+			new RegexTrial (@"abc*(?=c+?)", RegexOptions.None, "abcc", "Pass. Group[0]=(0,3)"),//37
+			new RegexTrial (@"abc*(?=c{1}?)", RegexOptions.None, "abcc", "Pass. Group[0]=(0,3)"),//38
+			new RegexTrial (@"abc*(?=c{1,5}?)", RegexOptions.None, "abcc", "Pass. Group[0]=(0,3)"),//39
+			new RegexTrial (@"abc*(?=c{1,}?)", RegexOptions.None, "abcc", "Pass. Group[0]=(0,3)"),//40
+			new RegexTrial (@"abc*?(?=c*)", RegexOptions.None, "abcc", "Pass. Group[0]=(0,2)"),//41
+			new RegexTrial (@"abc*?(?=c+)", RegexOptions.None, "abcc", "Pass. Group[0]=(0,2)"),//42
+			new RegexTrial (@"abc*?(?=c{1})", RegexOptions.None, "abcc", "Pass. Group[0]=(0,2)"),//43
+			new RegexTrial (@"abc*?(?=c{1,5})", RegexOptions.None, "abcc", "Pass. Group[0]=(0,2)"),//44
+			new RegexTrial (@"abc*?(?=c{1,})", RegexOptions.None, "abcc", "Pass. Group[0]=(0,2)"),//45
+			new RegexTrial (@"abc*(?!c*)", RegexOptions.None, "abcc", "Fail."),//46
+			new RegexTrial (@"abc*(?!c+)", RegexOptions.None, "abcc", "Pass. Group[0]=(0,4)"),//47
+			new RegexTrial (@"abc*(?!c{1})", RegexOptions.None, "abcc", "Pass. Group[0]=(0,4)"),//48
+			new RegexTrial (@"abc*(?!c{1,5})", RegexOptions.None, "abcc", "Pass. Group[0]=(0,4)"),//49
+			new RegexTrial (@"abc*(?!c{1,})", RegexOptions.None, "abcc", "Pass. Group[0]=(0,4)"),//50
+			new RegexTrial (@"(a)(?<1>b)(?'1'c)", RegexOptions.ExplicitCapture, "abc", "Pass. Group[0]=(0,3) Group[1]=(1,1)(2,1)"),//51
+			new RegexTrial (@"(?>a*).", RegexOptions.ExplicitCapture, "aaaa", "Fail."),//52
+		};
+
+		[Test]	public void RegexJvmTrial0000 () { trials [0].Execute (); }
+		[Test]	public void RegexJvmTrial0001 () { trials [1].Execute (); }
+
+		[Test]
+		[Category ("NotWorking")]
+		public void RegexJvmTrial0002 () { trials [2].Execute (); }
+
+		[Test]	public void RegexJvmTrial0003 () { trials [3].Execute (); }
+		[Test]	public void RegexJvmTrial0004 () { trials [4].Execute (); }
+
+		[Test]
+		[Category ("NotWorking")]
+		public void RegexJvmTrial0005 () { trials [5].Execute (); }
+
+		[Test]	public void RegexJvmTrial0006 () { trials [6].Execute (); }
+		[Test]	public void RegexJvmTrial0007 () { trials [7].Execute (); }
+
+		[Test]
+		[Category ("NotWorking")]
+		public void RegexJvmTrial0008 () { trials [8].Execute (); }
+
+		[Test]
+		[Category ("NotWorking")]
+		public void RegexJvmTrial0009 () { trials [9].Execute (); }
+
+		[Test]
+		[Category ("NotWorking")]
+		public void RegexJvmTrial0010 () { trials [10].Execute (); }
+
+		[Test]
+		[Category ("NotWorking")]
+		public void RegexJvmTrial0011 () { trials [11].Execute (); }
+
+		[Test]
+		[Category ("NotWorking")]
+		public void RegexJvmTrial0012 () { trials [12].Execute (); }
+
+		[Test]
+		[Category ("NotWorking")]
+		public void RegexJvmTrial0013 () { trials [13].Execute (); }
+
+		[Test]
+		[Category ("NotWorking")]
+		public void RegexJvmTrial0014 () { trials [14].Execute (); }
+
+		[Test]
+		[Category ("NotWorking")]
+		public void RegexJvmTrial0015 () { trials [15].Execute (); }
+
+		[Test]
+		[Category ("NotWorking")]
+		public void RegexJvmTrial0016 () { trials [16].Execute (); }
+
+		[Test]	public void RegexJvmTrial0017 () { trials [17].Execute (); }
+
+		[Test]
+		[Category ("NotWorking")]
+		public void RegexJvmTrial0018 () { trials [18].Execute (); }
+		
+		[Test]	public void RegexJvmTrial0019 () { trials [19].Execute (); }
+		[Test]	public void RegexJvmTrial0020 () { trials [20].Execute (); }
+		[Test]	public void RegexJvmTrial0021 () { trials [21].Execute (); }
+		[Test]	public void RegexJvmTrial0022 () { trials [22].Execute (); }
+		[Test]	public void RegexJvmTrial0023 () { trials [23].Execute (); }
+		[Test]	public void RegexJvmTrial0024 () { trials [24].Execute (); }
+		[Test]	public void RegexJvmTrial0025 () { trials [25].Execute (); }
+		[Test]	public void RegexJvmTrial0026 () { trials [26].Execute (); }
+		[Test]	public void RegexJvmTrial0027 () { trials [27].Execute (); }
+		[Test]	public void RegexJvmTrial0028 () { trials [28].Execute (); }
+		[Test]	public void RegexJvmTrial0029 () { trials [29].Execute (); }
+		[Test]	public void RegexJvmTrial0030 () { trials [30].Execute (); }
+		[Test]	public void RegexJvmTrial0031 () { trials [31].Execute (); }
+		[Test]	public void RegexJvmTrial0032 () { trials [32].Execute (); }
+		[Test]	public void RegexJvmTrial0033 () { trials [33].Execute (); }
+		[Test]	public void RegexJvmTrial0034 () { trials [34].Execute (); }
+		[Test]	public void RegexJvmTrial0035 () { trials [35].Execute (); }
+		[Test]	public void RegexJvmTrial0036 () { trials [36].Execute (); }
+		[Test]	public void RegexJvmTrial0037 () { trials [37].Execute (); }
+		[Test]	public void RegexJvmTrial0038 () { trials [38].Execute (); }
+		[Test]	public void RegexJvmTrial0039 () { trials [39].Execute (); }
+		[Test]	public void RegexJvmTrial0040 () { trials [40].Execute (); }
+		[Test]	public void RegexJvmTrial0041 () { trials [41].Execute (); }
+		[Test]	public void RegexJvmTrial0042 () { trials [42].Execute (); }
+		[Test]	public void RegexJvmTrial0043 () { trials [43].Execute (); }
+		[Test]	public void RegexJvmTrial0044 () { trials [44].Execute (); }
+		[Test]	public void RegexJvmTrial0045 () { trials [45].Execute (); }
+		[Test]	public void RegexJvmTrial0046 () { trials [46].Execute (); }
+		[Test]	public void RegexJvmTrial0047 () { trials [47].Execute (); }
+		[Test]	public void RegexJvmTrial0048 () { trials [48].Execute (); }
+		[Test]	public void RegexJvmTrial0049 () { trials [49].Execute (); }
+		[Test]	public void RegexJvmTrial0050 () { trials [50].Execute (); }
+		[Test]	public void RegexJvmTrial0051 () { trials [51].Execute (); }
+		[Test]	public void RegexJvmTrial0052 () { trials [52].Execute (); }
+	}
+}

Property changes on: RegexMatchTests.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: RegexReplace.cs
===================================================================
--- RegexReplace.cs	(revision 88349)
+++ RegexReplace.cs	(working copy)
@@ -66,6 +66,13 @@
 			new testcase ("314 1592 65358",		@"\d\d\d\d|\d\d\d", "a",	"a a a8"	),
 			new testcase ("2 314 1592 65358", 	@"\d\d\d\d|\d\d\d", "a",	"2 a a a8"	),
 			new testcase ("<i>am not</i>", 		"<(.+?)>", 	"[$0:$1]",	"[<i>:i]am not[</i>:/i]"),
+			new testcase ("texts",	"(?<foo>e)(x)", 	"${foo}$1$2$_",		"texetextsts" 	),
+			new testcase ("texts",	"(?<foo>e)(x)", 	"${foo}$1$2$`",		"texetts" 	),
+			new testcase ("texts",	"(?<foo>e)(x)", 	"${foo}$1$2$'",		"texetsts" 	),
+			new testcase ("texts",	"(?<foo>e)(x)", 	"${foo}$1$2$&",		"texeexts" 	),
+			//new testcase ("F2345678910L71",	@"(F)(2)(3)(4)(5)(6)(?<S>7)(8)(9)(10)(L)\11", 	"${S}$11$1", "77F1" 	),
+			new testcase ("F2345678910L71",	@"(F)(2)(3)(4)(5)(6)(7)(8)(9)(10)(L)\11", 	"${S}$11$1", "F2345678910L71" 	),
+			new testcase ("F2345678910LL1",	@"(F)(2)(3)(4)(5)(6)(7)(8)(9)(10)(L)\11", 	"${S}$11$1", "${S}LF1" 	),
 		};
 
 		[Test]
Index: RegexResultTests.cs
===================================================================
--- RegexResultTests.cs	(revision 0)
+++ RegexResultTests.cs	(revision 0)
@@ -0,0 +1,176 @@
+using System;
+using System.Text;
+using System.Text.RegularExpressions;
+using NUnit.Framework;
+
+namespace MonoTests.System.Text.RegularExpressions
+{
+	[TestFixture]
+	public class RegexResultTests
+	{
+
+		struct testcase
+		{
+			public string original, pattern, replacement, expected;
+			public testcase (string o, string p, string r, string e) {
+				original = o;
+				pattern = p;
+				replacement = r;
+				expected = e;
+			}
+			public void Execute () {
+				string result;
+				try {
+					Match match = Regex.Match (original, pattern);
+					result = match.Result (replacement);
+				}
+				catch (Exception e) {
+					result = "Error.";
+				}
+				Assert.AreEqual (result, expected, "rr#: {1} ~ s,{2},{3},",
+				original, pattern, replacement);
+
+			}
+		}
+		static testcase [] tests = {
+			//	original 	pattern			replacement		expected
+			new testcase ("F2345678910L71",	@"(F)(2)(3)(4)(5)(6)(7)(8)(9)(10)(L)\11", 	"${S}$11$1", "Error." 	),//0
+			new testcase ("F2345678910LL1",	@"(F)(2)(3)(4)(5)(6)(7)(8)(9)(10)(L)\11", 	"${S}$11$1", "${S}LF" 	),//1
+			new testcase ("texts",	"(?<foo>e)(x)", 	"${foo}$1$2$&",		"exeex" 	),//2
+			new testcase ("texts",	"(?<foo>e)(x)", 	"${foo}$1$2$_",		"exetexts" 	),//3
+			new testcase ("texts",	"(?<foo>e)(x)", 	"${foo}$1$2$`",		"exet" 	),//4
+			new testcase ("texts",	"(?<foo>e)(x)", 	"${foo}$1$2$'",		"exets" 	),//5
+			new testcase ("text",	"x",			"y",			"y"		),//6
+			new testcase ("text",	"x",			"$",			"$"		),//7
+			new testcase ("text",	"x",			"$1",			"$1"		),//8
+			new testcase ("text",	"x",			"${1}",			"${1}"	),//9
+			new testcase ("text",	"x",			"$5",			"$5"		),//10
+			new testcase ("te(x)t",	"x",			"$5",			"$5"	),//11
+			new testcase ("text",	"x",			"${5",			"${5"	),//12
+			new testcase ("text",	"x",			"${foo",		"${foo"	),//13
+			new testcase ("text",	"(x)",			"$5",			"$5"		),//14
+			new testcase ("text",	"(x)",			"$1",			"x"		),//15
+			new testcase ("text",	"e(x)",			"$1",			"x"		),//16
+			new testcase ("text",	"e(x)",			"$5",			"$5"		),//17
+			new testcase ("text",	"e(x)",			"$4",			"$4"		),//18
+			new testcase ("text",	"e(x)",			"$3",			"$3"		),//19
+			new testcase ("text",	"e(x)",			"${1}",			"x"		),//20
+			new testcase ("text",	"e(x)",			"${3}",			"${3}"	),//21
+			new testcase ("text",	"e(x)",			"${1}${3}",		"x${3}"	),//22
+			new testcase ("text",	"e(x)",			"${1}${name}",		"x${name}"	),//23
+			new testcase ("text",	"e(?<foo>x)",		"${1}${name}",		"x${name}"	),//24
+			new testcase ("text",	"e(?<foo>x)",		"${1}${foo}",		"xx"		),//25
+			new testcase ("text",	"e(?<foo>x)",		"${goll}${foo}",	"${goll}x"	),//26
+			new testcase ("text",	"e(?<foo>x)",		"${goll${foo}",		"${gollx"	),//27
+			new testcase ("text",	"e(?<foo>x)",		"${goll${foo}}",	"${gollx}"	),//28
+			new testcase ("text",	"e(?<foo>x)",		"$${foo}}",		"${foo}}"	),//29
+			new testcase ("text",	"e(?<foo>x)",		"${${foo}}",		"${x}"	),//30
+			new testcase ("text",	"e(?<foo>x)",		"$${foo}}",		"${foo}}"	),//31
+			new testcase ("text",	"e(?<foo>x)",		"$${bfoo}}",		"${bfoo}}"	),//32
+			new testcase ("text",	"e(?<foo>x)",		"$${foo}}",		"${foo}}"	),//33
+			new testcase ("text",	"e(?<foo>x)",		"$${foo}",		"${foo}"	),//34
+			new testcase ("text",	"e(?<foo>x)",		"$$",			"$"		),//35
+			new testcase ("text",	"(?<foo>e)(?<foo>x)", 	"${foo}$1$2",		"xx$2" 	),//36
+			new testcase ("text",	"(e)(?<foo>x)", 	"${foo}$1$2",		"xex" 	),//37
+			new testcase ("text",	"(?<foo>e)(x)", 	"${foo}$1$2",		"exe" 	),//38
+			new testcase ("text",	"(e)(?<foo>x)", 	"${foo}$1$2$+",		"xexx" 	),//39
+			new testcase ("text",	"(?<foo>e)(x)", 	"${foo}$1$2$+",		"exee" 	),//40
+			new testcase ("314 1592 65358",		@"\d\d\d\d|\d\d\d", "a",	"a"	),//41
+			new testcase ("2 314 1592 65358", 	@"\d\d\d\d|\d\d\d", "a",	"a"	),//42
+			new testcase ("<i>am not</i>", 		"<(.+?)>", 	"[$0:$1]",	"[<i>:i]"),//43
+			new testcase ("F2345678910L71",	@"(F)(2)(3)(4)(5)(6)(?<S>7)(8)(9)(10)(L)\11", 	"${S}$11$1", "77F1" 	),//44
+		};
+
+		[Test]
+		public void ResultTest_000 () { tests [0].Execute (); }
+		[Test]
+		public void ResultTest_001 () { tests [1].Execute (); }
+		[Test]
+		public void ResultTest_002 () { tests [2].Execute (); }
+		[Test]
+		public void ResultTest_003 () { tests [3].Execute (); }
+		[Test]
+		public void ResultTest_004 () { tests [4].Execute (); }
+		[Test]
+		public void ResultTest_005 () { tests [5].Execute (); }
+		[Test]
+		public void ResultTest_006 () { tests [6].Execute (); }
+		[Test]
+		public void ResultTest_007 () { tests [7].Execute (); }
+		[Test]
+		public void ResultTest_008 () { tests [8].Execute (); }
+		[Test]
+		public void ResultTest_009 () { tests [9].Execute (); }
+		[Test]
+		public void ResultTest_010 () { tests [10].Execute (); }
+		[Test]
+		public void ResultTest_011 () { tests [11].Execute (); }
+		[Test]
+		public void ResultTest_012 () { tests [12].Execute (); }
+		[Test]
+		public void ResultTest_013 () { tests [13].Execute (); }
+		[Test]
+		public void ResultTest_014 () { tests [14].Execute (); }
+		[Test]
+		public void ResultTest_015 () { tests [15].Execute (); }
+		[Test]
+		public void ResultTest_016 () { tests [16].Execute (); }
+		[Test]
+		public void ResultTest_017 () { tests [17].Execute (); }
+		[Test]
+		public void ResultTest_018 () { tests [18].Execute (); }
+		[Test]
+		public void ResultTest_019 () { tests [19].Execute (); }
+		[Test]
+		public void ResultTest_020 () { tests [20].Execute (); }
+		[Test]
+		public void ResultTest_021 () { tests [21].Execute (); }
+		[Test]
+		public void ResultTest_022 () { tests [22].Execute (); }
+		[Test]
+		public void ResultTest_023 () { tests [23].Execute (); }
+		[Test]
+		public void ResultTest_024 () { tests [24].Execute (); }
+		[Test]
+		public void ResultTest_025 () { tests [25].Execute (); }
+		[Test]
+		public void ResultTest_026 () { tests [26].Execute (); }
+		[Test]
+		public void ResultTest_027 () { tests [27].Execute (); }
+		[Test]
+		public void ResultTest_028 () { tests [28].Execute (); }
+		[Test]
+		public void ResultTest_029 () { tests [29].Execute (); }
+		[Test]
+		public void ResultTest_030 () { tests [30].Execute (); }
+		[Test]
+		public void ResultTest_031 () { tests [31].Execute (); }
+		[Test]
+		public void ResultTest_032 () { tests [32].Execute (); }
+		[Test]
+		public void ResultTest_033 () { tests [33].Execute (); }
+		[Test]
+		public void ResultTest_034 () { tests [34].Execute (); }
+		[Test]
+		public void ResultTest_035 () { tests [35].Execute (); }
+		[Test]
+		public void ResultTest_036 () { tests [36].Execute (); }
+		[Test]
+		public void ResultTest_037 () { tests [37].Execute (); }
+		[Test]
+		public void ResultTest_038 () { tests [38].Execute (); }
+		[Test]
+		public void ResultTest_039 () { tests [39].Execute (); }
+		[Test]
+		public void ResultTest_040 () { tests [40].Execute (); }
+		[Test]
+		public void ResultTest_041 () { tests [41].Execute (); }
+		[Test]
+		public void ResultTest_042 () { tests [42].Execute (); }
+		[Test]
+		public void ResultTest_043 () { tests [43].Execute (); }
+		[Test]
+		[Category("NotWorking")]
+		public void ResultTest_044 () { tests [44].Execute (); }
+	}
+}

Property changes on: RegexResultTests.cs
___________________________________________________________________
Name: svn:eol-style
   + native

