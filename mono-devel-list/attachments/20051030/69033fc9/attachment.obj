Index: HttpRemotingHandlerFactory.cs
===================================================================
--- HttpRemotingHandlerFactory.cs	(revision 52268)
+++ HttpRemotingHandlerFactory.cs	(working copy)
@@ -62,27 +62,54 @@
 			{
 				if (webConfigLoaded) return;
 				
+				try
+				{
+					//Configure Web.config
+					String cfg = AppDomain.CurrentDomain.SetupInformation.ConfigurationFile;
+					System.Runtime.Remoting.RemotingConfiguration.Configure(cfg);
+				}
+				catch(Exception e) 
+				{
+#if DEBUG
+					Console.WriteLine("ERROR in RemotingConfiguration.Configure() {0},{1}",e.GetType(), e.Message);
+#endif
+				}
+			
 				// Look for a channel that wants to receive http request
-				
+				IChannelReceiverHook chook = null;
 				foreach (IChannel channel in ChannelServices.RegisteredChannels)
 				{
-					IChannelReceiverHook chook = channel as IChannelReceiverHook;
+					chook = channel as IChannelReceiverHook;
 					if (chook == null) continue;
 					
 					if (chook.ChannelScheme != "http")
 						throw new RemotingException ("Only http channels are allowed when hosting remoting objects in a web server");
 					
-					if (!chook.WantsToListen) continue;
+					if (!chook.WantsToListen) 
+					{
+						chook = null;
+						continue;
+					}
 					
-					// Register the uri for the channel. The channel uri includes the scheme, the
-					// host and the application path
+					//found chook
+					break;
+				}
+
+				if (chook == null)
+				{
+					HttpChannel chan = new HttpChannel();
+					ChannelServices.RegisterChannel(chan);
+					chook = chan;
+				}
 					
-					string channelUrl = context.Request.Url.GetLeftPart(UriPartial.Authority);
-					channelUrl += context.Request.ApplicationPath;
-					chook.AddHookChannelUri (channelUrl);
+				// Register the uri for the channel. The channel uri includes the scheme, the
+				// host and the application path
 					
-					transportSink = new HttpServerTransportSink (chook.ChannelSinkChain, null);
-				}
+				string channelUrl = context.Request.Url.GetLeftPart(UriPartial.Authority);
+				channelUrl += context.Request.ApplicationPath;
+				chook.AddHookChannelUri (channelUrl);
+					
+				transportSink = new HttpServerTransportSink (chook.ChannelSinkChain, null);
 				webConfigLoaded = true;
 			}
 		}
