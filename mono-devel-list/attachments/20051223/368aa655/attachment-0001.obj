Index: mono/dis/main.c
===================================================================
--- mono/dis/main.c	(revision 54789)
+++ mono/dis/main.c	(working copy)
@@ -966,9 +966,10 @@
 	prop_flags = cols [MONO_PROPERTY_FLAGS];
 	ptr = mono_metadata_blob_heap (m, cols [MONO_PROPERTY_TYPE]);
 	mono_metadata_decode_blob_size (ptr, &ptr);
-	/* ECMA claims 0x08 ... */
-	if (*ptr != 0x28 && *ptr != 0x08)
-		g_warning("incorrect signature in propert blob: 0x%x", *ptr);
+	if (!(*ptr & 0x08))
+		g_warning("incorrect signature in property blob: 0x%x", *ptr);
+	if (*ptr & 0x20)
+		g_string_append (res, "instance ");
 	ptr++;
 	pcount = mono_metadata_decode_value (ptr, &ptr);
 	type = mono_metadata_parse_type_full (m, context, MONO_PARSE_TYPE, 0, ptr, &ptr);
Index: mono/metadata/reflection.c
===================================================================
--- mono/metadata/reflection.c	(revision 54789)
+++ mono/metadata/reflection.c	(working copy)
@@ -1826,20 +1826,25 @@
 property_encode_signature (MonoDynamicImage *assembly, MonoReflectionPropertyBuilder *fb)
 {
 	char *buf, *p;
-	char blob_size [6];
+	char blob_size [6], sig = 0x08;
 	char *b = blob_size;
 	guint32 nparams = 0;
 	MonoReflectionMethodBuilder *mb = fb->get_method;
 	MonoReflectionMethodBuilder *smb = fb->set_method;
 	guint32 idx, i, size;
 
-	if (mb && mb->parameters)
+	if (mb && mb->parameters) {
 		nparams = mono_array_length (mb->parameters);
-	if (!mb && smb && smb->parameters)
+		if (!(mb->attrs & METHOD_ATTRIBUTE_STATIC))
+			sig |= 0x20; /* hasthis */
+	} else if (!mb && smb && smb->parameters) {
 		nparams = mono_array_length (smb->parameters) - 1;
+		if (!(smb->attrs & METHOD_ATTRIBUTE_STATIC))
+			sig |= 0x20; /* hasthis */
+	}
 	size = 24 + nparams * 10;
 	buf = p = g_malloc (size);
-	*p = 0x08;
+	*p = sig;
 	p++;
 	mono_metadata_encode_value (nparams, p, &p);
 	if (mb) {
