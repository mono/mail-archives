Index: core/nunit.core.dll.sources
===================================================================
--- core/nunit.core.dll.sources	(revision 39045)
+++ core/nunit.core.dll.sources	(working copy)
@@ -38,3 +38,4 @@
 ./TestSuiteBuilder.cs
 ./TestSuite.cs
 ./TestSuiteResult.cs
+./RunWhenFilter.cs
Index: core/TestCaseBuilder.cs
===================================================================
--- core/TestCaseBuilder.cs	(revision 39045)
+++ core/TestCaseBuilder.cs	(working copy)
@@ -94,6 +94,10 @@
 						testCase.Categories = categories;
 					}
 
+					if (Reflect.HasRunWhenAttribute(method)) {
+						testCase.ExternalFilters = Reflect.GetExternalFilters(method);
+					}
+
 					testCase.IsExplicit = Reflect.HasExplicitAttribute(method);
 
 					testCase.Description = Reflect.GetDescription(method);
Index: core/Reflect.cs
===================================================================
--- core/Reflect.cs	(revision 39045)
+++ core/Reflect.cs	(working copy)
@@ -34,6 +34,7 @@
 		public static readonly Type IgnoreType = typeof( IgnoreAttribute );
 		public static readonly Type ExpectedExceptionType = typeof( ExpectedExceptionAttribute );
 		public static readonly Type SuiteType = typeof( SuiteAttribute );
+		public static readonly Type RunWhenType = typeof( RunWhenAttribute );
 		
 		#endregion
 
@@ -91,6 +92,12 @@
 			return property.IsDefined( SuiteType, false );
 		}
 
+		public static bool HasRunWhenAttribute(MemberInfo member) 
+		{
+			return member.IsDefined( RunWhenType, false );
+		}
+
+		
 		#endregion
 
 		#region Legacy Checks on Names
@@ -353,6 +360,21 @@
 
 		#endregion
 
+		#region ExternalFilters
+
+		public static ExternalFilter[] GetExternalFilters( MemberInfo member )
+		{
+			object[] attributes = member.GetCustomAttributes( RunWhenType, false );
+			ArrayList externalFilters = new ArrayList();
+
+			foreach(RunWhenAttribute attribute in attributes) 
+				externalFilters.Add(new ExternalFilter(attribute.ExternalFilterType, attribute.ExternalFilterParameters));
+			
+			return (ExternalFilter[])externalFilters.ToArray(typeof(ExternalFilter));
+		}
+
+		#endregion
+
 		#region Invoke Methods
 
 		public static object Construct( Type type )
Index: core/Test.cs
===================================================================
--- core/Test.cs	(revision 39045)
+++ core/Test.cs	(working copy)
@@ -94,7 +94,12 @@
 		/// True if the test had the Explicit attribute
 		/// </summary>
 		private bool isExplicit;
-
+		
+		/// <summary>
+		/// List of external filters applying to this test
+		/// </summary>
+		private ExternalFilter[] externalFilters;
+		
 		#endregion
 
 		#region Constructors
@@ -227,6 +232,20 @@
 			}
 		}
 
+		public ExternalFilter[] ExternalFilters
+		{
+			set { externalFilters = value; }
+		}
+		
+		public virtual bool ExecuteExternalFilters()
+		{
+			if (externalFilters != null)
+				foreach(ExternalFilter externalFilter in externalFilters)
+					if (externalFilter.DontRunTest)
+						return false;
+			return true;
+		}
+
 		public IList Categories 
 		{
 			get { return categories; }
Index: core/RunWhenFilter.cs
===================================================================
--- core/RunWhenFilter.cs	(revision 0)
+++ core/RunWhenFilter.cs	(revision 0)
@@ -0,0 +1,86 @@
+#region Copyright (c) 2005, Rafael 'Monoman' Teixeira
+/************************************************************************************
+'
+' Copyright Â© 2004 Rafael 'Monoman' Teixeira
+'
+' This software is provided 'as-is', without any express or implied warranty. In no 
+' event will the authors be held liable for any damages arising from the use of this 
+' software.
+' 
+' Permission is granted to anyone to use this software for any purpose, including 
+' commercial applications, and to alter it and redistribute it freely, subject to the 
+' following restrictions:
+'
+' 1. The origin of this software must not be misrepresented; you must not claim that 
+' you wrote the original software. If you use this software in a product, an 
+' acknowledgment (see the following) in the product documentation is required.
+'
+' Portions Copyright Â© 2003 James W. Newkirk, Michael C. Two, Alexei A. Vorontsov, Charlie Poole
+' or Copyright Â© 2000-2003 Philip A. Craig or Copyright Â© 2005 Rafael 'Monoman' Teixeira
+'
+' 2. Altered source versions must be plainly marked as such, and must not be 
+' misrepresented as being the original software.
+'
+' 3. This notice may not be removed or altered from any source distribution.
+'
+'***********************************************************************************/
+#endregion
+
+using System;
+using System.Collections;
+
+namespace NUnit.Core
+{
+
+	public class ExternalFilter
+	{
+		private Type externalFilterType;
+		private object[] externalFilterParameters;
+		
+		public ExternalFilter(Type externalFilterType, string[] externalFilterParameters)
+		{
+			this.externalFilterType = externalFilterType;
+			this.externalFilterParameters = externalFilterParameters;
+		}		
+		
+		public bool DontRunTest
+		{
+			get {
+				// TODO: construct external filter, evaluate it passing the array of parameters
+				return false;
+			}	
+		}
+	}
+
+	/// <summary>
+	/// Summary description for RunWhenFilter.
+	/// </summary>
+	/// 
+	[Serializable]
+	public class RunWhenFilter : Filter
+	{
+		public RunWhenFilter() : base( false ) {}
+
+		#region IFilter Members
+
+		public override bool Pass(TestSuite suite)
+		{
+			if (suite.ExecuteExternalFilters())
+				return true;
+
+			foreach (Test test in suite.Tests) 
+				if (test.ExecuteExternalFilters())
+					return true;
+
+			return false;
+		}
+
+		public override bool Pass(TestCase test)
+		{
+			return test.ExecuteExternalFilters();
+		}
+
+		#endregion
+
+	}
+}
Index: nunit-console/ConsoleUi.cs
===================================================================
--- nunit-console/ConsoleUi.cs	(revision 39045)
+++ nunit-console/ConsoleUi.cs	(working copy)
@@ -218,6 +218,9 @@
 				testDomain.SetFilter( new CategoryFilter( options.ExcludedCategories, true ) );
 			}
 
+			// if (options.RunExternalFilters)
+			testDomain.SetFilter( new RunWhenFilter() );
+
 			TestResult result = null;
 			if ( options.thread )
 			{
Index: framework/NUnit.Framework.dll.sources
===================================================================
--- framework/NUnit.Framework.dll.sources	(revision 39045)
+++ framework/NUnit.Framework.dll.sources	(working copy)
@@ -16,3 +16,4 @@
 ./TestFixtureAttribute.cs
 ./TestFixtureSetUpAttribute.cs
 ./TestFixtureTearDownAttribute.cs
+./RunWhenAttribute.cs
Index: framework/RunWhenAttribute.cs
===================================================================
--- framework/RunWhenAttribute.cs	(revision 0)
+++ framework/RunWhenAttribute.cs	(revision 0)
@@ -0,0 +1,51 @@
+#region Copyright (c) 2005, Rafael 'Monoman' Teixeira
+/************************************************************************************
+'
+' Copyright © 2004 Rafael 'Monoman' Teixeira
+'
+' This software is provided 'as-is', without any express or implied warranty. In no 
+' event will the authors be held liable for any damages arising from the use of this 
+' software.
+' 
+' Permission is granted to anyone to use this software for any purpose, including 
+' commercial applications, and to alter it and redistribute it freely, subject to the 
+' following restrictions:
+'
+' 1. The origin of this software must not be misrepresented; you must not claim that 
+' you wrote the original software. If you use this software in a product, an 
+' acknowledgment (see the following) in the product documentation is required.
+'
+' Portions Copyright © 2003 James W. Newkirk, Michael C. Two, Alexei A. Vorontsov, Charlie Poole
+' or Copyright © 2000-2003 Philip A. Craig or Copyright © 2005 Rafael 'Monoman' Teixeira
+'
+' 2. Altered source versions must be plainly marked as such, and must not be 
+' misrepresented as being the original software.
+'
+' 3. This notice may not be removed or altered from any source distribution.
+'
+'***********************************************************************************/
+#endregion
+
+using System;
+
+namespace NUnit.Framework
+{
+	/// <summary>
+	/// Summary description for RunWhenAttribute
+	/// </summary>
+	/// 
+	[AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple=true)]
+	public class RunWhenAttribute : Attribute
+	{
+		public Type ExternalFilterType;
+		public string[] ExternalFilterParameters;
+		
+		public RunWhenAttribute(Type externalFilterType, string externalFilterParametersCommaSeparated) 
+		{
+			//TODO: check constraints
+			ExternalFilterType = externalFilterType;
+			ExternalFilterParameters = externalFilterParametersCommaSeparated.Split(',');
+		}	
+	}
+	
+}
