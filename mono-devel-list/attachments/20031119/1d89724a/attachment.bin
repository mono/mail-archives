Index: quicksearch.cs
===================================================================
RCS file: /mono/mcs/class/System/System.Text.RegularExpressions/quicksearch.cs,v
retrieving revision 1.1
diff -u -r1.1 quicksearch.cs
--- quicksearch.cs	31 Jan 2002 08:00:16 -0000	1.1
+++ quicksearch.cs	19 Nov 2003 21:44:56 -0000
@@ -6,7 +6,8 @@
 // author:	Dan Lewis (dlewis@gmx.co.uk)
 // 		(c) 2002
 
-using System;
+using System;
+using System.Collections;
 
 namespace System.Text.RegularExpressions {
 
@@ -49,7 +50,7 @@
 					}
 
 					if (ptr < end)
-						ptr += shift[text[ptr + len]];
+						ptr += GetShiftDistance(text[ptr + len]);
 					else
 						break;
 				}
@@ -66,7 +67,7 @@
 					}
 
 					if (ptr < end)
-						ptr += shift[text[ptr + len]];
+						ptr += GetShiftDistance(text[ptr + len]);
 					else
 						break;
 				}
@@ -81,15 +82,7 @@
 			if (ignore)
 				str = str.ToLower ();
 
-			// this is a 64k entry shift table. that's 128kb per pattern!
-			// is it worth compressing this by only storing shifts within
-			// a (lo, hi) character range? for most substrings this would
-			// be around 50 bytes...
-
-			shift = new int[0x1000];
-			for (int i = 0; i < 0x1000; ++ i)
-				shift[i] = len + 1;
-
+			shift = new Hashtable();
 			for (int i = 0; i < len; ++ i) {
 				char c = str[i];
 
@@ -97,12 +90,17 @@
 				if (ignore)
 					shift[Char.ToUpper (c)] = len - i;
 			}
+		}
+
+		private int GetShiftDistance (char c) {
+			object s = shift[c];
+			return (s != null ? (int)s : len + 1);
 		}
 
 		private string str;
 		private int len;
 		private bool ignore;
 
-		private int[] shift;
+		private Hashtable shift;
 	}
 }
