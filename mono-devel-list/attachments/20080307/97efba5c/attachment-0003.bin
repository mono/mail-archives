Index: class/corlib/System.Reflection.Emit/DynamicMethod.cs
===================================================================
--- class/corlib/System.Reflection.Emit/DynamicMethod.cs	(revision 97638)
+++ class/corlib/System.Reflection.Emit/DynamicMethod.cs	(working copy)
@@ -61,6 +61,7 @@
 		private object[] refs;
 		private IntPtr referenced_by;
 		private Type owner;
+        private DynamicILInfo dynil;
 		#endregion
 		private Delegate deleg;
 		private MonoMethod method;
@@ -128,10 +129,12 @@
 
 		private void CreateDynMethod () {
 			if (mhandle.Value == IntPtr.Zero) {
-				if (ilgen == null || (ILGenerator.Mono_GetCurrentOffset (ilgen) == 0))
+				if ((ilgen == null || (ILGenerator.Mono_GetCurrentOffset (ilgen) == 0))
+					&& dynil == null)
 					throw new InvalidOperationException ("Method '" + name + "' does not have a method body.");
 
-				ilgen.label_fixup ();
+				if (ilgen != null)
+					ilgen.label_fixup ();
 
 				// Have to create all DynamicMethods referenced by this one
 				try {
@@ -217,9 +220,11 @@
 			throw new NotImplementedException ();
 		}
 
-		[MonoTODO("Not implemented")]
+		[MonoTODO("Some functionality still missing")]
 		public DynamicILInfo GetDynamicILInfo () {
-			throw new NotImplementedException ();
+			if (dynil == null)
+				dynil = new DynamicILInfo(this);
+			return dynil;
 		}
 
 		public ILGenerator GetILGenerator () {
Index: class/corlib/System.Reflection.Emit/DynamicILInfo.cs
===================================================================
--- class/corlib/System.Reflection.Emit/DynamicILInfo.cs	(revision 97638)
+++ class/corlib/System.Reflection.Emit/DynamicILInfo.cs	(working copy)
@@ -37,14 +37,24 @@
 	[ComVisible (true)]
 	public class DynamicILInfo {
 
-		internal DynamicILInfo ()
+#region Sync with object-internals.h
+		private byte[] code;
+		private int code_len;
+		private int max_stack;
+		private byte[] exceptions;
+		private byte[] localsig;
+#endregion
+		private DynamicMethod dm;
+
+		internal DynamicILInfo (DynamicMethod dm)
 		{
+			this.dm = dm;
 		}
 
 		[MonoTODO]
 		public DynamicMethod DynamicMethod { 
 			get {
-				throw new NotImplementedException ();
+				return dm;
 			}
 		}
 
@@ -83,9 +93,10 @@
 			throw new NotImplementedException ();
 		}
 		
-		[MonoTODO]
 		public void SetCode (byte[] code, int maxStackSize) {
-			throw new NotImplementedException ();
+			this.code = (byte[]) code.Clone();
+			code_len = this.code.Length;
+			this.max_stack = maxStackSize;
 		}
 
 		[MonoTODO]
@@ -96,7 +107,7 @@
 
 		[MonoTODO]
 		public void SetExceptions (byte[] exceptions) {
-			throw new NotImplementedException ();
+			this.exceptions = (byte[]) exceptions.Clone();
 		}
 
 		[MonoTODO]
@@ -105,9 +116,8 @@
 			throw new NotImplementedException ();
 		}
 
-		[MonoTODO]
 		public void SetLocalSignature (byte[] localSignature) {
-			throw new NotImplementedException ();
+			localsig = (byte[]) localSignature.Clone();
 		}
 
 		[MonoTODO]
