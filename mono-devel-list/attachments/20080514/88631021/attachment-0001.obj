Index: System.Linq.Expressions/ChangeLog
===================================================================
--- System.Linq.Expressions/ChangeLog	(revision 103128)
+++ System.Linq.Expressions/ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+ 2008-05-14  Roei Erez  <roeie@mainsoft.com>
+	
+	* EmitContext.cs.cs:
+	* LambdaExpression.cs: make sure LambdaExpression is emitted as a new delegate
+	when used in side expression.
+
 2008-05-08  Jb Evain  <jbevain@novell.com>
 
 	* Expression.cs, EmitContext.cs: deal with call to methods
Index: System.Linq.Expressions/EmitContext.cs
===================================================================
--- System.Linq.Expressions/EmitContext.cs	(revision 103128)
+++ System.Linq.Expressions/EmitContext.cs	(working copy)
@@ -240,7 +240,7 @@
 			method = new DynamicMethod (GenerateName (), return_type, param_types, typeof (ExecutionScope), true);
 			ig = method.GetILGenerator ();
 
-			owner.Emit (this);
+			owner.EmitBodyOnly (this);
 		}
 
 		public override Delegate CreateDelegate ()
@@ -273,7 +273,7 @@
 			var method = type.DefineMethod (name, MethodAttributes.Public | MethodAttributes.Static, return_type, param_types);
 			ig = method.GetILGenerator ();
 
-			owner.Emit (this);
+			owner.EmitBodyOnly (this);
 
 			type.CreateType ();
 			assembly.Save (file_name);
Index: System.Linq.Expressions/LambdaExpression.cs
===================================================================
--- System.Linq.Expressions/LambdaExpression.cs	(revision 103128)
+++ System.Linq.Expressions/LambdaExpression.cs	(working copy)
@@ -39,6 +39,7 @@
 
 		Expression body;
 		ReadOnlyCollection<ParameterExpression> parameters;
+		Delegate compiled_delegate;
 
 		public Expression Body {
 			get { return body; }
@@ -63,6 +64,12 @@
 
 		internal override void Emit (EmitContext ec)
 		{
+			Delegate compiled = Compile ();
+			ec.EmitReadGlobal (compiled);
+		}
+
+		internal void EmitBodyOnly (EmitContext ec) 
+		{
 			body.Emit (ec);
 			EmitPopIfNeeded (ec);
 			ec.ig.Emit (OpCodes.Ret);
@@ -75,15 +82,22 @@
 
 		public Delegate Compile ()
 		{
+			if (compiled_delegate == null) {
+				lock (this) {
+					if (compiled_delegate == null) {
 #if TARGET_JVM
-			System.Linq.jvm.Interpreter inter =
-				new System.Linq.jvm.Interpreter (this);
-			inter.Validate ();
-			return inter.CreateDelegate ();
+						System.Linq.jvm.Interpreter inter =
+							new System.Linq.jvm.Interpreter (this);
+						inter.Validate ();
+						compiled_delegate = inter.CreateDelegate ();
 #else
-			var context = EmitContext.Create (this);
-			return context.CreateDelegate ();
+						var context = EmitContext.Create (this);
+						compiled_delegate = context.CreateDelegate ();
 #endif
+					}
+				}
+			}
+			return compiled_delegate;
 		}
 	}
 }
Index: Test/System.Linq.Expressions/ChangeLog
===================================================================
--- Test/System.Linq.Expressions/ChangeLog	(revision 103128)
+++ Test/System.Linq.Expressions/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2008-05-14  Roei Erez  <roeie@mainsoft.com>
+	
+	* ExpressionTest_Lambda.cs: Add test for Lambda as delegate.
+
 2008-05-13  Roei Erez  <roeie@mainsoft.com>
 	
 	* ExpressionTest.cs: Exclude tests only in JAVAEE environment.
Index: Test/System.Linq.Expressions/ExpressionTest_Lambda.cs
===================================================================
--- Test/System.Linq.Expressions/ExpressionTest_Lambda.cs	(revision 103128)
+++ Test/System.Linq.Expressions/ExpressionTest_Lambda.cs	(working copy)
@@ -187,5 +187,20 @@
 
 			Assert.AreEqual (typeof (Expression<Func<string>>), l.GetType ());
 		}
+
+		[Test]
+		public void LambdaAsDelegate () 
+		{
+			Expression<Func<int, int>> parameter = i => i;
+			MethodInfo m = GetType().GetMethod ("FooDelegate", BindingFlags.Static | BindingFlags.Public);
+			ParameterExpression paramExp = Expression.Parameter (typeof (int), "nn");
+			Expression<Func<int, int>> eee = Expression.Lambda<Func<int, int>> (
+				Expression.Call (null, m, parameter), paramExp);
+			Assert.AreEqual( eee.Compile ()(10),10);
+		}
+
+		public static int FooDelegate (Func<int, int> e) {
+			return e (10);
+		}
 	}
 }
