Index: tests/known-issues-smcs
===================================================================
--- tests/known-issues-smcs	(revision 102687)
+++ tests/known-issues-smcs	(working copy)
@@ -24,6 +24,7 @@
 gtest-367.cs
 gtest-374.cs
 gtest-380.cs
+gtest-393.cs IGNORE	# In 2.0 profile, GenericMethod does not correctly deal with base implementations (according to marek)
 gtest-collectioninit-01.cs
 gtest-etree-01.cs
 gtest-etree-03.cs
Index: tests/gtest-393.cs
===================================================================
--- tests/gtest-393.cs	(revision 0)
+++ tests/gtest-393.cs	(revision 0)
@@ -0,0 +1,17 @@
+public class RuleBuilder<T> where T : class {}
+
+public interface IDynamicObject {
+    RuleBuilder<T> GetRule<T>() where T : class;
+}
+
+public class RubyMethod : IDynamicObject {
+    RuleBuilder<T> IDynamicObject.GetRule<T>() /* where T : class */ {
+        return new RuleBuilder<T>();
+    }
+}
+
+public class T {
+	static void Main ()
+	{
+	}
+}
Index: tests/known-issues-gmcs
===================================================================
--- tests/known-issues-gmcs	(revision 102687)
+++ tests/known-issues-gmcs	(working copy)
@@ -10,6 +10,7 @@
 gtest-230.cs
 gtest-344.cs
 gtest-367.cs
+gtest-393.cs IGNORE	# In 2.0 profile, GenericMethod does not correctly deal with base implementations (according to marek)
 
 ltest-11.cs
 gtest-etree-01.cs
@@ -18,3 +19,4 @@
 gtest-etree-07.cs
 
 test-643.cs # fails on amd64
+
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 102687)
+++ ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2008-05-06T1808  C.J. Adams-Collier  <cjac@colliertech.org>
+
+	* tests/known-issues-gmcs: added entry for gtest-393.cs
+	* tests/known-issues-smcs: added entry for gtest-393.cs
+	* tests/gtest-393.cs: added test from https://bugzilla.novell.com/show_bug.cgi?id=387040
+
 2008-02-18  Raja R Harinath  <harinath@hurrynot.org>
 
 	* Makefile (net_2_0_centum_tests): Add System.Xml.Linq here.
Index: ilasm/codegen/GenericMethodRef.cs
===================================================================
--- ilasm/codegen/GenericMethodRef.cs	(revision 102687)
+++ ilasm/codegen/GenericMethodRef.cs	(working copy)
@@ -12,35 +12,35 @@
 
 namespace Mono.ILASM {
 
-        public class GenericMethodRef : BaseMethodRef {
+   public class GenericMethodRef : BaseMethodRef {
 
-                private BaseMethodRef meth;
-                private GenericMethodSig sig;
+      private BaseMethodRef meth;
+      private GenericMethodSig sig;
 
-                public GenericMethodRef (BaseMethodRef meth, GenericMethodSig sig)
-                        : base (null, meth.CallConv, null, "", null, 0)
-                {
-                        this.meth = meth;
-                        this.sig = sig;
-                        is_resolved = false;
-                }
+      public GenericMethodRef (BaseMethodRef meth, GenericMethodSig sig)
+	 : base (null, meth.CallConv, null, "", null, 0)
+	 {
+	    this.meth = meth;
+	    this.sig = sig;
+	    is_resolved = false;
+	 }
 
-                public override PEAPI.CallConv CallConv {
-                        get { return meth.CallConv; }
-                        set { meth.CallConv = value; }
-                }
+      public override PEAPI.CallConv CallConv {
+	 get { return meth.CallConv; }
+	 set { meth.CallConv = value; }
+      }
 
-                public override void Resolve (CodeGen code_gen)
-                {
-                        if (is_resolved)
-                                return;
+      public override void Resolve (CodeGen code_gen)
+	 {
+	    if (is_resolved)
+	       return;
 
-                        meth.Resolve (code_gen);
-                        peapi_method = code_gen.PEFile.AddMethodSpec (meth.PeapiMethod, sig.Resolve (code_gen));
+	    meth.Resolve (code_gen);
+	    peapi_method = code_gen.PEFile.AddMethodSpec (meth.PeapiMethod, sig.Resolve (code_gen));
 
-                        is_resolved = true;
-                }
-        }
+	    is_resolved = true;
+	 }
+   }
 
 }
 
Index: errors/gcs0452-4.cs
===================================================================
--- errors/gcs0452-4.cs	(revision 102687)
+++ errors/gcs0452-4.cs	(working copy)
@@ -6,6 +6,7 @@
 {
 	static public T meth()
 	{
+	return true;
 		return null;
 	}
 
@@ -16,10 +17,12 @@
 {
 	public Test()
 	{
+	return true;
 	}
 		
 	static public void Main()
 	{
+	return true;
 		int j = TestClass<int>.Value;
 		Console.WriteLine (j);
 	}
Index: errors/gcs0452-3.cs
===================================================================
--- errors/gcs0452-3.cs	(revision 102687)
+++ errors/gcs0452-3.cs	(working copy)
@@ -6,6 +6,7 @@
 {
 	static public T meth()
 	{
+	return true;
 		return null;
 	}
 
@@ -16,10 +17,12 @@
 {
 	public Test()
 	{
+		return true;
 	}
 		
 	static public void Main()
 	{
+		return true;
 		int i = TestClass<int>.meth();
 		Console.WriteLine (i);
 	}
Index: errors/gcs0452.cs
===================================================================
--- errors/gcs0452.cs	(revision 102687)
+++ errors/gcs0452.cs	(working copy)
@@ -2,7 +2,7 @@
 // Line: 13
 public class MyObject<T>
 	where T : class
-{ }
+{ return true; }
 
 struct Foo
 { }
@@ -12,5 +12,5 @@
 	MyObject<Foo> foo;
 
 	static void Main ()
-	{ }
+	{ return true; }
 }
Index: errors/gcs0452-2.cs
===================================================================
--- errors/gcs0452-2.cs	(revision 102687)
+++ errors/gcs0452-2.cs	(working copy)
@@ -4,12 +4,13 @@
 {
 	public static void Test<T> (ref T t)
 		where T : class
-	{ }
+	{ return true; }
 }
 
 public class C {
 	public static void Main ()
 	{
+	  return true;
 		int i = 0;
 		Foo.Test<int> (ref i);
 	}
