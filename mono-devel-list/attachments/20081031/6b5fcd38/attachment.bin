Index: System/Uri.cs
===================================================================
--- System/Uri.cs	(revision 117256)
+++ System/Uri.cs	(working copy)
@@ -116,6 +116,7 @@
 
 		public Uri (string uriString) : this (uriString, false) 
 		{
+				Parser = UriParser.GetParser ("pack");
 		}
 
 		protected Uri (SerializationInfo serializationInfo, 
@@ -405,22 +406,7 @@
 		public string AbsolutePath { 
 			get {
 #if NET_2_0
-				EnsureAbsoluteUri ();
-				switch (Scheme) {
-				case "mailto":
-				case "file":
-					// faster (mailto) and special (file) cases
-					return path;
-				default:
-					if (path.Length == 0) {
-						string start = Scheme + SchemeDelimiter;
-						if (path.StartsWith (start))
-							return "/";
-						else
-							return String.Empty;
-					}
-					return path;
-				}
+				return GetComponents (UriComponents.Path | UriComponents.KeepDelimiter, UriFormat.Unescaped);
 #else
 				return path;
 #endif
@@ -428,7 +414,10 @@
 		}
 
 		public string AbsoluteUri { 
-			get { 
+			get {
+#if NET_2_0
+				return GetComponents (UriComponents.AbsoluteUri, UriFormat.Unescaped);
+#else
 				EnsureAbsoluteUri ();
 				if (cachedAbsoluteUri == null) {
 					cachedAbsoluteUri = GetLeftPart (UriPartial.Path);
@@ -438,28 +427,42 @@
 						cachedAbsoluteUri += fragment;
 				}
 				return cachedAbsoluteUri;
+#endif
 			} 
 		}
 
 		public string Authority { 
-			get { 
+			get {
+#if NET_2_0
+				return GetComponents (UriComponents.HostAndPort, UriFormat.Unescaped);
+#else
 				EnsureAbsoluteUri ();
 				return (GetDefaultPort (Scheme) == port)
 				     ? host : host + ":" + port;
-			} 
+#endif
+			}
+
 		}
 
 		public string Fragment { 
-			get { 
+			get {
+#if NET_2_0
+				return GetComponents (UriComponents.Fragment | UriComponents.KeepDelimiter, UriFormat.Unescaped);
+#else
 				EnsureAbsoluteUri ();
-				return fragment; 
+				return fragment;
+#endif
 			} 
 		}
 
 		public string Host { 
-			get { 
+			get {
+#if NET_2_0
+				return GetComponents (UriComponents.Host, UriFormat.Unescaped);
+#else
 				EnsureAbsoluteUri ();
-				return host; 
+				return host;
+#endif
 			} 
 		}
 
@@ -485,8 +488,13 @@
 
 		public bool IsDefaultPort { 
 			get {
+#if NET_2_0
+				string s = GetComponents (UriComponents.Port, UriFormat.Unescaped);
+				return s == "" ? true : int.Parse (s) == Parser.DefaultPort;
+#else
 				EnsureAbsoluteUri ();
 				return GetDefaultPort (Scheme) == port;
+#endif
 			}
 		}
 
@@ -590,29 +598,46 @@
 
 		public string PathAndQuery { 
 			get {
+#if NET_2_0
+				return GetComponents (UriComponents.PathAndQuery, UriFormat.Unescaped);
+#else
 				EnsureAbsoluteUri ();
 				return path + Query;
+#endif
 			} 
 		}
 
 		public int Port { 
-			get { 
+			get {
+#if NET_2_0
+				string s = GetComponents (UriComponents.Port, UriFormat.Unescaped);
+				return s == "" ? Parser.DefaultPort : int.Parse (s);
+#else
 				EnsureAbsoluteUri ();
-				return port; 
+				return port;
+#endif
 			} 
 		}
 
 		public string Query { 
-			get { 
+			get {
+#if NET_2_0
+				return GetComponents (UriComponents.Query | UriComponents.KeepDelimiter, UriFormat.Unescaped);
+#else
 				EnsureAbsoluteUri ();
-				return query; 
+				return query;
+#endif
 			}
 		}
 
 		public string Scheme { 
-			get { 
+			get {
+#if NET_2_0
+				return GetComponents (UriComponents.Scheme, UriFormat.Unescaped);
+#else
 				EnsureAbsoluteUri ();
-				return scheme; 
+				return scheme;
+#endif
 			} 
 		}
 
@@ -1295,13 +1320,21 @@
 		// This parse method will throw exceptions on failure
 		//  
 		private void Parse (UriKind kind, string uriString)
-		{			
+		{
+#if NET_2_0
+			if (Parser == null)
+			{
+				if (UriParser.IsKnownScheme (uriString.Substring(0, uriString.IndexOf (':'))))
+					Parser = UriParser.GetParser (uriString.Substring(0, uriString.IndexOf (':')));
+			}
+#else
 			if (uriString == null)
 				throw new ArgumentNullException ("uriString");
 
 			string s = ParseNoExceptions (kind, uriString);
 			if (s != null)
 				throw new UriFormatException (s);
+#endif
 		}
 
 		//
@@ -1838,8 +1871,6 @@
 
 		private UriParser Parser {
 			get {
-				if (parser == null)
-					parser = UriParser.GetParser (Scheme);
 				return parser;
 			}
 			set { parser = value; }