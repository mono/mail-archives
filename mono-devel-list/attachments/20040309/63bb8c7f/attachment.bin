Index: ChangeLog
===================================================================
RCS file: /mono/mcs/class/System.Web/System.Web.UI/ChangeLog,v
retrieving revision 1.215
diff -u -r1.215 ChangeLog
--- ChangeLog	4 Mar 2004 19:00:55 -0000	1.215
+++ ChangeLog	9 Mar 2004 18:23:54 -0000
@@ -1,3 +1,8 @@
+2004-03-09  Juraj Skripsky <juraj@hotfeet.ch>
+
+	* DataBinder.cs: allow unquoted string expressions (e.g. "[test]") and
+	handle single quotes and a few corner cases correctly (see test cases).
+
 2004-03-04  Gonzalo Paniagua Javier <gonzalo@ximian.com>
 
 	* TemplateControl.cs: fixed typos and added new method names to the set
Index: DataBinder.cs
===================================================================
RCS file: /mono/mcs/class/System.Web/System.Web.UI/DataBinder.cs,v
retrieving revision 1.10
diff -u -r1.10 DataBinder.cs
--- DataBinder.cs	5 Dec 2003 19:00:28 -0000	1.10
+++ DataBinder.cs	9 Mar 2004 18:23:54 -0000
@@ -75,26 +75,31 @@
 
 			string val = expr.Substring (openIdx + 1, closeIdx - openIdx - 1);
 			val = val.Trim ();
-			int valLength = val.Length;
-			if (valLength == 0)
+			if (val.Length == 0)
 				throw new ArgumentException (expr + " is not a valid indexed expression.");
 
+			bool is_string = false;
+			// a quoted val means we have a string
+			if ((val[0] == '\'' && val[val.Length - 1] == '\'') ||
+				(val[0] == '\"' && val[val.Length - 1] == '\"')) {
+				is_string = true;
+				val = val.Substring(1, val.Length - 2);
+			} else {
+				// if all chars are digits, then we have a int
+				for(int i = 0; i < val.Length; i++)
+					if (!Char.IsDigit(val[i])) {
+						is_string = true;
+						break;
+					}
+			}
+
 			int intVal = 0;
-			bool is_string;
-			char first = val [0];
-			if (first >= '0' && first <= '9') {
-				is_string = false;
+			if (!is_string) {
 				try {
 					intVal = Int32.Parse (val);
 				} catch {
 					throw new ArgumentException (expr + " is not a valid indexed expression.");
 				}
-
-			} else if (first == '"' && val [valLength - 1] == '"') {
-				is_string = true;
-				val = val.Substring (0, val.Length - 1).Substring (1);
-			} else {
-				throw new ArgumentException (expr + " is not a valid indexed expression.");
 			}
 
 			string property = null;
