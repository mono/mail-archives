Index: corlib.dll.sources
===================================================================
--- corlib.dll.sources	(revision 55095)
+++ corlib.dll.sources	(working copy)
@@ -332,6 +332,7 @@
 System.IO/Directory.cs
 System.IO/DirectoryInfo.cs
 System.IO/DirectoryNotFoundException.cs
+System.IO/DriveNotFoundException.cs
 System.IO/EndOfStreamException.cs
 System.IO/File.cs
 System.IO/FileAccess.cs
Index: System.IO/MonoIO.cs
===================================================================
--- System.IO/MonoIO.cs	(revision 55095)
+++ System.IO/MonoIO.cs	(working copy)
@@ -63,7 +63,7 @@
 								  path);
 
 			case MonoIOError.ERROR_TOO_MANY_OPEN_FILES:
-				return new IOException ("Too many open files");
+				return new IOException ("Too many open files", unchecked((int)0x80070000) | (int)error);
 				
 			case MonoIOError.ERROR_PATH_NOT_FOUND:
 				message = String.Format ("Could not find a part of the path \"{0}\"", path);
@@ -75,11 +75,17 @@
 
 			case MonoIOError.ERROR_INVALID_HANDLE:
 				message = String.Format ("Invalid handle to path \"{0}\"", path);
-				return new IOException (message);
-				
+				return new IOException (message, unchecked((int)0x80070000) | (int)error);
+			case MonoIOError.ERROR_INVALID_DRIVE:
+				message = String.Format ("Could not find the drive  '{0}'. The drive might not be ready or might not be mapped.", path);
+#if NET_2_0
+				return new DriveNotFoundException (message);
+#else
+				return new IOException (message, unchecked((int)0x80070000) | (int)error);
+#endif
 			case MonoIOError.ERROR_FILE_EXISTS:
 				message = String.Format ("Could not create file \"{0}\". File already exists.", path);
-				return new IOException (message);
+				return new IOException (message, unchecked((int)0x80070000) | (int)error);
 
 			case MonoIOError.ERROR_FILENAME_EXCED_RANGE:
 				message = String.Format ("Path is too long. Path: {0}", path); 
@@ -87,27 +93,27 @@
 
 			case MonoIOError.ERROR_INVALID_PARAMETER:
 				message = String.Format ("Invalid parameter");
-				return new IOException (message);
+				return new IOException (message, unchecked((int)0x80070000) | (int)error);
 
 			case MonoIOError.ERROR_WRITE_FAULT:
 				message = String.Format ("Write fault on path {0}", path);
-				return new IOException (message);
+				return new IOException (message, unchecked((int)0x80070000) | (int)error);
 
 			case MonoIOError.ERROR_SHARING_VIOLATION:
 				message = String.Format ("Sharing violation on path {0}", path);
-				return new IOException (message);
+				return new IOException (message, unchecked((int)0x80070000) | (int)error);
 				
 			case MonoIOError.ERROR_LOCK_VIOLATION:
 				message = String.Format ("Lock violation on path {0}", path);
-				return new IOException (message);
+				return new IOException (message, unchecked((int)0x80070000) | (int)error);
 
 			case MonoIOError.ERROR_DIR_NOT_EMPTY:
 				message = String.Format ("Directory {0} is not empty", path);
-				return new IOException (message);
+				return new IOException (message, unchecked((int)0x80070000) | (int)error);
 				
 			default:
 				message = String.Format ("Win32 IO returned {0}. Path: {1}", error, path);
-				return new IOException (message);
+				return new IOException (message, unchecked((int)0x80070000) | (int)error);
 			}
 		}
 
Index: System.IO/DriveNotFoundException.cs
===================================================================
--- System.IO/DriveNotFoundException.cs	(revision 0)
+++ System.IO/DriveNotFoundException.cs	(revision 0)
@@ -0,0 +1,68 @@
+//
+// System.IO.DriveNotFoundException.cs
+//
+// Author:
+//   Kornél Pál <http://www.kornelpal.hu/>
+//
+// Copyright (C) 2006 Kornél Pál
+//
+
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+#if NET_2_0
+using System.Runtime.InteropServices;
+using System.Runtime.Serialization;
+
+namespace System.IO
+{
+	[Serializable]
+	[ComVisible (true)]
+	public class DriveNotFoundException : IOException
+	{
+		private const int ErrorCode = unchecked((int)80070003);
+
+		// Constructors
+		public DriveNotFoundException ()
+			: base ("Attempted to access a drive that is not available.")
+		{
+			this.HResult = ErrorCode;
+		}
+
+		public DriveNotFoundException (string message)
+			: base (message)
+		{
+			this.HResult = ErrorCode;
+		}
+
+		public DriveNotFoundException (string message, Exception inner)
+			: base (message, inner)
+		{
+			this.HResult = ErrorCode;
+		}
+
+		protected DriveNotFoundException (SerializationInfo info, StreamingContext context)
+			: base (info, context)
+		{
+		}
+	}
+}
+#endif

Property changes on: System.IO\DriveNotFoundException.cs
___________________________________________________________________
Name: svn:eol-style
   + native

Index: System.IO/MonoIOError.cs
===================================================================
--- System.IO/MonoIOError.cs	(revision 55095)
+++ System.IO/MonoIOError.cs	(working copy)
@@ -50,8 +50,8 @@
 		ERROR_INVALID_ACCESS = 12,
 		ERROR_INVALID_DATA = 13,
 		ERROR_OUTOFMEMORY = 14,
-		ERROR_INVALID_DRIVE = 15,
-		ERROR_CURRENT_DIRECTORY = 16,
+	*/	ERROR_INVALID_DRIVE = 15,
+	/*	ERROR_CURRENT_DIRECTORY = 16,
 		ERROR_NOT_SAME_DEVICE = 17,
 	*/	ERROR_NO_MORE_FILES = 18,
 	/*	ERROR_WRITE_PROTECT = 19,
