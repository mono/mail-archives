--- monodoc.ashx.orig	2005-04-03 20:59:16.000000000 -0300
+++ monodoc.ashx	2005-04-03 20:58:40.000000000 -0300
@@ -32,6 +32,7 @@
 		static MonodocHandler ()
 		{
 			help_tree = RootTree.LoadTree ();
+			Monodoc.SettingsHandler.Settings.ShowInheritedMembers = true;
 		}
 		
 		void IHttpHandler.ProcessRequest (HttpContext context)
@@ -65,7 +66,7 @@
 		void HandleTree (HttpContext context, string tree)
 		{
 		    context.Response.ContentType = "text/xml";
-		    //Console.WriteLine ("Tree request: " + tree);
+		    Console.WriteLine ("Tree request: " + tree);
 		    try {
 			//
 			// Walk the url, found what we are supposed to render.
@@ -86,16 +87,12 @@
 				w.WriteStartElement ("tree");
 				w.WriteAttributeString ("text", n.Caption);
 #if MONODOC_PTREE
-				if (n.tree != null && n.tree.HelpSource != null)
-					w.WriteAttributeString ("action", n.tree.HelpSource.SourceID + "@" + HttpUtility.UrlEncode (n.URL));
-
+				w.WriteAttributeString ("action", n.tree.HelpSource.SourceID + "@" + HttpUtility.UrlEncode (n.URL));
 				if (n.Nodes != null){
 					w.WriteAttributeString ("src", tree + "@" + i);
 				}
 #else
-				if (n.tree != null && n.tree.HelpSource != null)
-					w.WriteAttributeString ("action", "monodoc.ashx?tlink="+n.tree.HelpSource.SourceID + "@" + HttpUtility.UrlEncode (n.URL));
-
+				w.WriteAttributeString ("action", "monodoc.ashx?tlink="+n.tree.HelpSource.SourceID + "@" + HttpUtility.UrlEncode (n.URL));
 				w.WriteAttributeString ("target", "content");
 				if (n.Nodes != null){
 					w.WriteAttributeString ("src", "monodoc.ashx?tree=" + tree + "@" + i);
@@ -107,7 +104,7 @@
 	           } catch (Exception e) {
 			Console.WriteLine (e);
 		   }
-		   //Console.WriteLine ("Tree request satisfied");
+		   Console.WriteLine ("Tree request satisfied");
 		}
 		
 		void CheckLastModified (HttpContext context)
@@ -165,9 +162,6 @@
 				Copy (s, context.Response.OutputStream);
 				return;
 			}
-
-			if (help_tree == null)
-				return;
 			Node n;
 			string content = help_tree.RenderUrl (link, out n);
 			CheckLastModified (context);
@@ -236,6 +230,31 @@
 	}
 }
 
+function addTag(tagName)
+{
+	switch (tagName)
+	{
+		case 'para':
+			document.edit.content.value += ""\n<para>\n</para>"";
+			break;
+		case 'note':
+			document.edit.content.value += ""\n<block subset='none' type='note'>\n <para>\n </para>\n</block>"";
+			break;
+		case 'example':	
+			document.edit.content.value += ""\n<example>\n <code lang='C#'>\n </code>\n</example>"";
+			break;
+		case 'list':
+			document.edit.content.value += ""\n<list type='bullet'>\n <item>\n <term>First Item</term>\n</list>"";
+			break;	
+		case 'table':
+			document.edit.content.value += ""\n<list type='table'>\n <listheader>\n <term>Column</term>\n <description>Description</description>\n</listheader><item>\n<term>Term</term>\n<description>Description</description>\n</item></list>"";
+			break;	
+		case 'see':
+			document.edit.content.value += ""<see cref='T:System.Object'/>"";
+			break;	
+	}
+}
+
 function makeLink (link)
 {
 	if (link == '') return '';
@@ -264,17 +283,100 @@
 		");
 			// Set up object variable, as it's required by the MakeLink delegate
 			requestPath=ctx.Request.Path;
-			string output;
-
+			string output = null;
+			
+			string url = ctx.Request.Params ["link"];
+			
 			if (content == null)
-				output = "No documentation available on this topic";
+			{
+				if (url != null)
+				{
+					if (url.StartsWith ("edit:"))
+					{
+						output = ProcessEditMode (url, ctx.Request.Params ["content"], ctx.Request.Params ["preview"]);
+					}
+				}	
+				else
+					output = "No documentation available on this topic";
+				
+			}	
 			else
 				output = MakeLinks(content);
 			ctx.Response.Write (output);
 			ctx.Response.Write (@"</body></html>");
 		}
 
+		string ProcessEditMode(string url, string content, string preview)
+		{
+			string output = null;
+			    
+			XmlNode edit_node = EditingUtils.GetNodeFromUrl (url, help_tree);
+			
+			if (content == null)
+			    content = edit_node.InnerXml;
+			
+			output = @"Please enter the text here:
+				<form name='edit' id='edit'>
+					<center>
+						<input name='example' type='button' value='<e_xample>' onclick=""addTag('example')"">
+						<input name='example' type='button' value='<list>'     onclick=""addTag('list')"">
+						<input name='example' type='button' value='<_table>'   onclick=""addTag('table')"">
+						<input name='example' type='button' value='<_see...>'  onclick=""addTag('see')"">
+						<input name='example' type='button' value='<_para>'    onclick=""addTag('para')"">
+						<input name='example' type='button' value='<Add Note>' onclick=""addTag('note')"">
+					</center>
+					<textarea name='content' style='width: 100%' rows='15'>" + content + @" </textarea> 
+					<br>
+					<center>
+						<input name='preview' type='submit' value='Preview'>
+						<input name='upload'  type='submit' value='Upload'>
+					</center>
+					<input name='link' type='hidden' value='" + url + @"'>
+				<form>";
+					
+			if (preview != null)
+			{		
+				if (content != null)
+				{
+        				StringWriter sw = new StringWriter ();
+        				XmlWriter w = new XmlTextWriter (sw);
+				
+        				try {
+        					edit_node.InnerXml = content;
+        					EditingUtils.RenderEditPreview (url, help_tree, edit_node, w);
+        					w.Flush ();
+        				} catch (Exception e) {
+						return null;
+					}    							
+					output += @"<div style='width: 100%; overflow: auto; height: 280px'> " + sw.ToString() + " </div>";
 
+				}		
+			}
+			else
+			{
+			    ProcessUpload(url, edit_node);
+			}
+			
+			return output;
+		}	
+		
+		void ProcessUpload(string url, System.Xml.XmlNode edit_node)
+		{
+			EditingUtils.SaveChange (url, help_tree, edit_node);
+			
+			ContributionsSoap d;
+			d = new ContributionsSoap ();
+			d.Url = "http://www.go-mono.com/docs/server.asmx";
+			
+			int serial = d.GetSerial (SettingsHandler.Settings.Email, SettingsHandler.Settings.Key);
+			
+			GlobalChangeset cs = EditingUtils.GetChangesFrom (serial);
+			CopyXmlNodeWriter w = new CopyXmlNodeWriter ();	
+			GlobalChangeset.serializer.Serialize (w, cs);
+			XmlDocument dd = (XmlDocument) w.Document;
+			d.Submit (SettingsHandler.Settings.Email, SettingsHandler.Settings.Key, ((XmlDocument) w.Document).DocumentElement);	
+		}
+		
 		string MakeLinks(string content)
 		{
 			MatchEvaluator linkUpdater=new MatchEvaluator(MakeLink);