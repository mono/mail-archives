Index: TimeZone.cs
===================================================================
--- TimeZone.cs	(revision 62295)
+++ TimeZone.cs	(working copy)
@@ -107,11 +107,21 @@
 
 		public virtual DateTime ToLocalTime (DateTime time)
 		{
+#if NET_2_0
+			if (time.Kind == DateTimeKind.Local) {
+				return time;
+			}
+#endif
+
 			DaylightTime dlt = GetDaylightChanges (time.Year);
 			TimeSpan utcOffset = GetUtcOffset (time);
 			if (utcOffset.Ticks > 0) {
 				if (DateTime.MaxValue - utcOffset < time)
+#if NET_2_0
+					return DateTime.SpecifyKind(DateTime.MaxValue, DateTimeKind.Local);
+#else
 					return DateTime.MaxValue;
+#endif
 			//} else if (utcOffset.Ticks < 0) {
 			//	LAMESPEC: MS.NET fails to check validity here
 			//	it may throw ArgumentOutOfRangeException.
@@ -119,7 +129,11 @@
 
 			DateTime local = time.Add (utcOffset);
 			if (dlt.Delta.Ticks == 0)
+#if NET_2_0
+				return DateTime.SpecifyKind(local, DateTimeKind.Local);
+#else
 				return local;
+#endif
 
 			// FIXME: check all of the combination of
 			//	- basis: local-based or UTC-based
@@ -128,27 +142,57 @@
 
 			// PST should work fine here.
 			if (local < dlt.End && dlt.End.Subtract (dlt.Delta) <= local)
+#if NET_2_0
+				return DateTime.SpecifyKind(local, DateTimeKind.Local);
+#else
 				return local;
+#endif
 			if (local >= dlt.Start && dlt.Start.Add (dlt.Delta) > local)
+#if NET_2_0
+				return DateTime.SpecifyKind(local.Subtract (dlt.Delta), DateTimeKind.Local);
+#else
 				return local.Subtract (dlt.Delta);
+#endif
 
 			TimeSpan localOffset = GetUtcOffset (local);
+#if NET_2_0
+			return DateTime.SpecifyKind(time.Add (localOffset), DateTimeKind.Local);
+#else
 			return time.Add (localOffset);
+#endif
 		}
 
 		public virtual DateTime ToUniversalTime (DateTime time)
 		{
+#if NET_2_0
+			if (time.Kind == DateTimeKind.Utc) {
+				return time;
+			}
+#endif
+
 			TimeSpan offset = GetUtcOffset (time);
 
 			if (offset.Ticks < 0) {
 				if (DateTime.MaxValue + offset < time)
+#if NET_2_0
+					return DateTime.SpecifyKind(DateTime.MaxValue, DateTimeKind.Utc);
+#else
 					return DateTime.MaxValue;
+#endif
 			} else if (offset.Ticks > 0) {
 				if (DateTime.MinValue + offset > time)
+#if NET_2_0
+					return DateTime.SpecifyKind(DateTime.MinValue, DateTimeKind.Utc);
+#else
 					return DateTime.MinValue;
+#endif
 			}
 
+#if NET_2_0
+			return DateTime.SpecifyKind(new DateTime (time.Ticks - offset.Ticks), DateTimeKind.Utc);
+#else
 			return new DateTime (time.Ticks - offset.Ticks);
+#endif		
 		}
 	}
 
