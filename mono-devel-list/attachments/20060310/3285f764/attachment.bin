Index: System.Net.Mail/MailAddress.cs
===================================================================
--- System.Net.Mail/MailAddress.cs	(revision 57778)
+++ System.Net.Mail/MailAddress.cs	(working copy)
@@ -39,7 +39,7 @@
 
 		string address;
 		string displayName;
-		Encoding displayNameEncoding;
+		//Encoding displayNameEncoding;
 
 		#endregion // Fields
 
@@ -57,7 +57,7 @@
 		{
 			this.address = address;
 			this.displayName = name;
-			this.displayNameEncoding = displayNameEncoding;
+			//this.displayNameEncoding = displayNameEncoding;
 		}
 
 		#endregion // Constructors
@@ -84,7 +84,6 @@
 
 		#region Methods
 		
-		[MonoTODO]
 		public override bool Equals (object obj)
 		{
 			return Equals (obj as MailAddress);
@@ -95,7 +94,6 @@
 			return other != null && Address == other.Address;
 		}
 
-		[MonoTODO]
 		public override int GetHashCode ()
 		{
 			return address.GetHashCode ();
Index: System.Configuration/ConfigurationSettings.cs
===================================================================
--- System.Configuration/ConfigurationSettings.cs	(revision 57778)
+++ System.Configuration/ConfigurationSettings.cs	(working copy)
@@ -100,7 +100,8 @@
 			}
 		}
 
-		// Invoked from System.Web
+		// Invoked from System.Web, disable warning
+#pragma warning disable 169
 		static IConfigurationSystem ChangeConfigurationSystem (IConfigurationSystem newSystem)
 		{
 			if (newSystem == null)
@@ -116,6 +117,7 @@
 			}
 		}
 	}
+#pragma warning restore
 
 	//
 	// class DefaultConfig: read configuration from machine.config file and application
Index: System.Collections.Specialized/IOrderedDictionary.cs
===================================================================
--- System.Collections.Specialized/IOrderedDictionary.cs	(revision 57778)
+++ System.Collections.Specialized/IOrderedDictionary.cs	(working copy)
@@ -32,7 +32,7 @@
 {
 	public interface IOrderedDictionary : IDictionary
 	{
-		IDictionaryEnumerator GetEnumerator ();
+		new IDictionaryEnumerator GetEnumerator ();
 		void Insert (int idx, object key, object value);
 		void RemoveAt (int idx);
 		
Index: System.CodeDom/CodeNamespaceImportCollection.cs
===================================================================
--- System.CodeDom/CodeNamespaceImportCollection.cs	(revision 57778)
+++ System.CodeDom/CodeNamespaceImportCollection.cs	(working copy)
@@ -57,6 +57,12 @@
 		//
 		// Properties
 		//
+		int ICollection.Count {
+			get {
+				return namespaceImports.Count;
+			}
+		}
+		
 		public int Count {
 			get {
 				return namespaceImports.Count;
@@ -104,6 +110,11 @@
 			}
 		}
 
+		void IList.Clear ()
+		{
+			namespaceImports.Clear ();
+		}
+		
 		public void Clear ()
 		{
 			namespaceImports.Clear ();
@@ -180,6 +191,12 @@
 		}
 
 		// IEnumerable implementation
+		IEnumerator IEnumerable.GetEnumerator ()
+		{
+			return namespaceImports.GetEnumerator();
+		}
+		
+		// IEnumerable implementation
 		public IEnumerator GetEnumerator ()
 		{
 			return namespaceImports.GetEnumerator();
Index: System.IO.Ports/SerialPortStream.cs
===================================================================
--- System.IO.Ports/SerialPortStream.cs	(revision 57778)
+++ System.IO.Ports/SerialPortStream.cs	(working copy)
@@ -165,7 +165,7 @@
 			write_serial (fd, buffer, offset, count, writeTimeout);
 		}
 
-		protected void Dispose (bool disposing)
+		protected override void Dispose (bool disposing)
 		{
 			if (disposed)
 				return;
Index: System.IO.Ports/SerialPort.cs
===================================================================
--- System.IO.Ports/SerialPort.cs	(revision 57778)
+++ System.IO.Ports/SerialPort.cs	(working copy)
@@ -31,7 +31,6 @@
 		int writeBufferSize = DefaultWriteBufferSize;
 		int readBufferOffset;
 		int readBufferLength;
-		int writeBufferOffset;
 		int writeBufferLength;
 		byte [] readBuffer;
 		byte [] writeBuffer;
@@ -546,10 +545,11 @@
 		}
 
 		// events
-
+#pragma warning disable 67
 		public event SerialErrorReceivedEventHandler ErrorReceived;
 		public event SerialPinChangedEventHandler PinChanged;
 		public event SerialDataReceivedEventHandler DataReceived;
+#pragma warning restore
 	}
 
 	public delegate void SerialDataReceivedEventHandler (object sender, SerialDataReceivedEventArgs e);
Index: System.Net.NetworkInformation/NetworkInformationException.cs
===================================================================
--- System.Net.NetworkInformation/NetworkInformationException.cs	(revision 57778)
+++ System.Net.NetworkInformation/NetworkInformationException.cs	(working copy)
@@ -49,7 +49,7 @@
 		}
 
 		public override int ErrorCode {
-			get { return NativeErrorCode; }
+			get { return error_code; }
 		}
 	}
 }
Index: System.Net.NetworkInformation/NetworkChange.cs
===================================================================
--- System.Net.NetworkInformation/NetworkChange.cs	(revision 57778)
+++ System.Net.NetworkInformation/NetworkChange.cs	(working copy)
@@ -32,8 +32,11 @@
 		{
 		}
 
+		// Disable the warnings about the events not being used.
+#pragma warning disable 67
 		public static event NetworkAddressChangedEventHandler NetworkAddressChanged;
 		public static event NetworkAvailabilityChangedEventHandler NetworkAvailabilityChanged;
+#pragma warning restore
 	}
 }
 #endif
Index: System.Net/IPAddress.cs
===================================================================
--- System.Net/IPAddress.cs	(revision 57778)
+++ System.Net/IPAddress.cs	(working copy)
@@ -47,7 +47,6 @@
 		private AddressFamily m_Family = AddressFamily.InterNetwork;
 		private ushort[] m_Numbers = new ushort[8];	/// ip6 Stored in network order (as ip4)
 		private long m_ScopeId = 0;
-		private int m_HashCode;	// Added for serialization compatibility with MS.NET
 
 		public static readonly IPAddress Any = new IPAddress(0);
 		public static readonly IPAddress Broadcast = IPAddress.Parse ("255.255.255.255");
@@ -418,5 +417,11 @@
 		{
 			return i ^ (j << 13 | j >> 19) ^ (k << 26 | k >> 6) ^ (l << 7 | l >> 25);
 		}
+
+#pragma warning disable 169
+		// Added for serialization compatibility with MS.NET
+		private int m_HashCode;	
+#pragma warning restore
+		
 	}
 }
Index: System.Net/FtpWebResponse.cs
===================================================================
--- System.Net/FtpWebResponse.cs	(revision 57778)
+++ System.Net/FtpWebResponse.cs	(working copy)
@@ -26,7 +26,7 @@
 		string exitMessage = String.Empty;
 		string statusDescription;
 		string method;
-		bool keepAlive;
+		//bool keepAlive;
 		bool disposed;
 		internal long contentLength = -1;
 		
@@ -34,7 +34,7 @@
 		{
 			this.uri = uri;
 			this.method = method;
-			this.keepAlive = keepAlive;
+			//this.keepAlive = keepAlive;
 		}
 		
 		public override long ContentLength {
Index: System.Net/FtpDataStream.cs
===================================================================
--- System.Net/FtpDataStream.cs	(revision 57778)
+++ System.Net/FtpDataStream.cs	(working copy)
@@ -230,7 +230,7 @@
 			GC.SuppressFinalize (this);
 		}
 
-		void Dispose (bool disposing)
+		protected override void Dispose (bool disposing)
 		{
 			if (disposed)
 				return;
Index: System.Net/WebClient.cs
===================================================================
--- System.Net/WebClient.cs	(revision 57778)
+++ System.Net/WebClient.cs	(working copy)
@@ -142,11 +142,15 @@
 #if NET_2_0
 		public
 #endif
-		byte [] DownloadData (Uri address)
+		byte [] DownloadData (Uri address, string method)
 		{
-			return DownloadData (address, "GET");
+			WebRequest request = SetupRequest (address, method);
+			request.Method = method;
+			WebResponse response = request.GetResponse ();
+			Stream st = ProcessResponse (response);
+			return ReadAll (st, (int) response.ContentLength);
 		}
-		
+
 #if NET_2_0
 		public
 #endif
@@ -156,17 +160,12 @@
 		}
 
 #if NET_2_0
-		public
-#endif
-		byte [] DownloadData (Uri address, string method)
+		public byte [] DownloadData (Uri address)
 		{
-			WebRequest request = SetupRequest (address, method);
-			request.Method = method;
-			WebResponse response = request.GetResponse ();
-			Stream st = ProcessResponse (response);
-			return ReadAll (st, (int) response.ContentLength);
+			return DownloadData (address, "GET");
 		}
-
+#endif
+		
 		public void DownloadFile (string address, string fileName)
 		{
 			DownloadFile (MakeUri (address), fileName);
Index: System.Security.Cryptography.X509Certificates/X500DistinguishedName.cs
===================================================================
--- System.Security.Cryptography.X509Certificates/X500DistinguishedName.cs	(revision 57778)
+++ System.Security.Cryptography.X509Certificates/X500DistinguishedName.cs	(working copy)
@@ -148,6 +148,7 @@
 			// needs quotes ?
 		}
 
+#if false
 		private string GetSeparator (X500DistinguishedNameFlags flag)
 		{
 			if ((flag & X500DistinguishedNameFlags.UseSemicolons) != 0)
@@ -158,6 +159,7 @@
 				return Environment.NewLine;
 			return ","; //default
 		}
+#endif
 
 		// decode the DN using the (byte[]) RawData
 		private void DecodeRawData ()
Index: System.Net.Security/AuthenticatedStream.cs
===================================================================
--- System.Net.Security/AuthenticatedStream.cs	(revision 57778)
+++ System.Net.Security/AuthenticatedStream.cs	(working copy)
@@ -46,10 +46,10 @@
 
 		#region Constructors
 
-		public AuthenticatedStream (Stream innerStream, bool leaveStreamOpen)
+		public AuthenticatedStream (Stream innerStream, bool leaveInnerStreamOpen)
 		{
 			this.innerStream = innerStream;
-			this.leaveStreamOpen = leaveStreamOpen;
+			this.leaveStreamOpen = leaveInnerStreamOpen;
 		}
 
 		#endregion // Constructors
@@ -72,6 +72,8 @@
 
 		public override void Close ()
 		{
+			if (leaveStreamOpen)
+				return;
 			innerStream.Close ();
 		}
 
Index: System.Net.Sockets/NetworkStream.cs
===================================================================
--- System.Net.Sockets/NetworkStream.cs	(revision 57778)
+++ System.Net.Sockets/NetworkStream.cs	(working copy)
@@ -206,7 +206,11 @@
 			((IDisposable) this).Dispose ();
 		}
 
-		protected virtual void Dispose (bool disposing)
+		protected
+#if NET_2_0
+		override
+#endif
+		void Dispose (bool disposing)
 		{
 			if (disposed) 
 				return;
Index: System/Uri.cs
===================================================================
--- System/Uri.cs	(revision 57778)
+++ System/Uri.cs	(working copy)
@@ -33,7 +33,10 @@
 // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 //
-
+// See RFC 2396 for more info on URI's.
+//
+// TODO: optimize by parsing host string only once
+//
 using System.ComponentModel;
 using System.IO;
 using System.Net;
@@ -42,10 +45,11 @@
 using System.Collections;
 using System.Globalization;
 
-// See RFC 2396 for more info on URI's.
+//
+// Disable warnings on Obsolete methods being used
+//
+#pragma warning disable 612
 
-// TODO: optimize by parsing host string only once
-
 namespace System {
 
 	[Serializable]
Index: System.IO.Compression/DeflateStream.cs
===================================================================
--- System.IO.Compression/DeflateStream.cs	(revision 57778)
+++ System.IO.Compression/DeflateStream.cs	(working copy)
@@ -58,9 +58,9 @@
 		static extern int z_stream_get_avail_in(IntPtr z_stream);
 		[DllImport("MonoPosixHelper")]
 		static extern void z_stream_set_next_out(IntPtr z_stream, IntPtr next_out);
+		//[DllImport("MonoPosixHelper")]
+		//static extern void z_stream_set_avail_out(IntPtr z_stream, int avail_out);
 		[DllImport("MonoPosixHelper")]
-		static extern void z_stream_set_avail_out(IntPtr z_stream, int avail_out);
-		[DllImport("MonoPosixHelper")]
 		static extern ZReturnConsts z_stream_inflate(IntPtr z_stream, ref int avail_out);
 		[DllImport("MonoPosixHelper")]
 		static extern ZReturnConsts z_stream_deflate(IntPtr z_stream, ZFlushConsts flush, IntPtr next_out, ref int avail_out);
Index: System.CodeDom.Compiler/TempFileCollection.cs
===================================================================
--- System.CodeDom.Compiler/TempFileCollection.cs	(revision 57778)
+++ System.CodeDom.Compiler/TempFileCollection.cs	(working copy)
@@ -91,6 +91,12 @@
 			}
 		}
 
+		int ICollection.Count {
+			get {
+				return filehash.Count;
+			}
+		}
+		
 		public int Count
 		{
 			get {
@@ -174,6 +180,11 @@
 			}
 		}
 
+		IEnumerator IEnumerable.GetEnumerator ()
+		{
+			return(filehash.Keys.GetEnumerator());
+		}
+		
 		public IEnumerator GetEnumerator()
 		{
 			return(filehash.Keys.GetEnumerator());
Index: System.CodeDom.Compiler/CodeDomConfigurationHandler.cs
===================================================================
--- System.CodeDom.Compiler/CodeDomConfigurationHandler.cs	(revision 57778)
+++ System.CodeDom.Compiler/CodeDomConfigurationHandler.cs	(working copy)
@@ -153,6 +153,9 @@
 			return ExtractAttributeValue (name, node, true);
 		}
 
+#if false
+		// Not used for now
+		
 		static string ShortAsmName (string long_name)
 		{
 			int i = long_name.IndexOf (',');
@@ -160,6 +163,7 @@
 				return long_name + ".dll";
 			return long_name.Substring (0, i) + ".dll";
 		}
+#endif
 		
 		static void ThrowException (string message, XmlNode node)
 		{
Index: System.Collections.Generic/SortedList.cs
===================================================================
--- System.Collections.Generic/SortedList.cs	(revision 57778)
+++ System.Collections.Generic/SortedList.cs	(working copy)
@@ -270,6 +270,14 @@
 
 		// IDictionary<TKey, TValue>
 
+		void IDictionary<TKey,TValue>.Add (TKey key, TValue value)
+		{
+			if (key == null)
+				throw new ArgumentNullException ("key");
+
+			PutImpl (key, value, false);
+		}
+		
 		public virtual void Add (TKey key, TValue value)
 		{
 			if (key == null)
@@ -295,6 +303,20 @@
 			}
 		}
 
+		bool IDictionary<TKey,TValue>.Remove (TKey key)
+		{
+			if (key == null)
+				throw new ArgumentNullException ("key");
+
+			int i = IndexOfKey (key);
+			if (i >= 0) {
+				RemoveAt (i);
+				return true;
+			}
+			else
+				return false;
+		}
+
 		public virtual bool Remove (TKey key)
 		{
 			if (key == null)
@@ -311,6 +333,14 @@
 
 		// ICollection<KeyValuePair<TKey, TValue>>
 
+		void ICollection<KeyValuePair<TKey, TValue>>.Clear () 
+		{
+			defaultCapacity = INITIAL_SIZE;
+			this.table = new KeyValuePair<TKey, TValue> [defaultCapacity];
+			inUse = 0;
+			modificationCount++;
+		}
+
 		public virtual void Clear () 
 		{
 			defaultCapacity = INITIAL_SIZE;
Index: System.Collections.Generic/LinkedList.cs
===================================================================
--- System.Collections.Generic/LinkedList.cs	(revision 57778)
+++ System.Collections.Generic/LinkedList.cs	(working copy)
@@ -274,7 +274,7 @@
 			info.AddValue (VersionKey, version);
 		}
 		
-		public void OnDeserialization (object sender)
+		public virtual void OnDeserialization (object sender)
 		{
 			if (si != null)
 			{
@@ -489,4 +489,4 @@
 		}
 	}
 }
-#endif
\ No newline at end of file
+#endif
Index: System.Collections.Generic/Queue.cs
===================================================================
--- System.Collections.Generic/Queue.cs	(revision 57778)
+++ System.Collections.Generic/Queue.cs	(working copy)
@@ -38,6 +38,7 @@
 namespace System.Collections.Generic
 {
 	[ComVisible(false)]
+	[Serializable]
 	public class Queue<T> : IEnumerable <T>, ICollection, IEnumerable
 	{
 		T [] data;
