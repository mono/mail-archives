Index: icall.c
===================================================================
--- icall.c	(revisiÃ³n: 44715)
+++ icall.c	(copia de trabajo)
@@ -3477,11 +3477,14 @@
 ves_icall_System_Reflection_Assembly_GetReferencedAssemblies (MonoReflectionAssembly *assembly) 
 {
 	static MonoClass *System_Reflection_AssemblyName;
+	static MonoClass *System_Version;
 	MonoArray *result;
 	MonoDomain *domain = mono_object_domain (assembly);
 	int i, count = 0;
 	static MonoMethod *create_culture = NULL;
+	static MonoMethod *create_version = NULL;
 	MonoTableInfo *t;
+	gpointer args [4];
 
 	MONO_ARCH_SAVE_REGS;
 
@@ -3489,6 +3492,12 @@
 		System_Reflection_AssemblyName = mono_class_from_name (
 			mono_defaults.corlib, "System.Reflection", "AssemblyName");
 
+	if (!System_Version) {
+		System_Version = mono_class_from_name (
+				mono_defaults.corlib, "System", "Version");
+		g_assert (System_Version);
+	}
+
 	t = &assembly->assembly->image->tables [MONO_TABLE_ASSEMBLYREF];
 	count = t->rows;
 
@@ -3502,6 +3511,13 @@
 		mono_method_desc_free (desc);
 	}
 
+	if (count > 0 && !create_version) {
+		MonoMethodDesc *desc = mono_method_desc_new (":.ctor(int,int,int,int)", FALSE);
+		create_version = mono_method_desc_search_in_class (desc, System_Version);
+		g_assert (create_version);
+		mono_method_desc_free (desc);
+	}
+
 	for (i = 0; i < count; i++) {
 		MonoAssembly *assem;
 		MonoReflectionAssemblyName *aname;
@@ -3530,6 +3546,13 @@
 		aname->flags = assem->aname.flags;
 		aname->versioncompat = 1; /* SameMachine (default) */
 
+		args [0] = &assem->aname.major;
+		args [1] = &assem->aname.minor;
+		args [2] = &assem->aname.build;
+		args [3] = &assem->aname.revision;
+		aname->version = mono_object_new (domain, System_Version);
+		mono_runtime_invoke (create_version, aname->version, args, NULL);
+
 		if (create_culture) {
 			gpointer args [1];
 			args [0] = mono_string_new (domain, assem->aname.culture);
@@ -3929,8 +3952,11 @@
 static void
 fill_reflection_assembly_name (MonoDomain *domain, MonoReflectionAssemblyName *aname, MonoAssemblyName *name, const char *absolute)
 {
+	static MonoClass *System_Version = NULL;
 	static MonoMethod *create_culture = NULL;
+	static MonoMethod *create_version = NULL;
 	gpointer args [1];
+	gpointer vargs [4];
 	guint32 pkey_len;
 	const char *pkey_ptr;
 	gchar *codebase;
@@ -3944,6 +3970,25 @@
 	aname->revision = name->revision;
 	aname->hashalg = name->hash_alg;
 
+	if (!System_Version) {
+		System_Version = mono_class_from_name (mono_defaults.corlib, "System", "Version");
+		g_assert (System_Version);
+	}
+	
+	if (!create_version) {
+		MonoMethodDesc *desc = mono_method_desc_new (":.ctor(int,int,int,int)", FALSE);
+		create_version = mono_method_desc_search_in_class (desc, System_Version);
+		g_assert (create_version);
+		mono_method_desc_free (desc);
+	}
+
+	vargs [0] = &aname->major;
+	vargs [1] = &aname->minor;
+	vargs [2] = &aname->build;
+	vargs [3] = &aname->revision;
+	aname->version = mono_object_new (domain, System_Version);
+	mono_runtime_invoke (create_version, aname->version, vargs, NULL);
+	
 	codebase = g_filename_to_uri (absolute, NULL, NULL);
 	if (codebase) {
 		aname->codebase = mono_string_new (domain, codebase);
