Index: System.Windows.Forms/X11Structs.cs
===================================================================
--- System.Windows.Forms/X11Structs.cs	(revision 38141)
+++ System.Windows.Forms/X11Structs.cs	(working copy)
@@ -35,10 +35,17 @@
 /// X11 Version
 namespace System.Windows.Forms {
 	#region X11 Structures
+
+	//
+	// In the structures below, fields of type long are mapped to IntPtr.
+	// This will work on all platforms where sizeof(long)==sizeof(void*), which
+	// is almost all platforms except WIN64.
+	//
+
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XAnyEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
@@ -47,13 +54,13 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XKeyEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
 		internal IntPtr		root;
 		internal IntPtr		subwindow;
-		internal int		time;
+		internal IntPtr		time;
 		internal int		x;
 		internal int		y;
 		internal int		x_root;
@@ -66,13 +73,13 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XButtonEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
 		internal IntPtr		root;
 		internal IntPtr		subwindow;
-		internal int		time;
+		internal IntPtr		time;
 		internal int		x;
 		internal int		y;
 		internal int		x_root;
@@ -85,13 +92,13 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XMotionEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
 		internal IntPtr		root;
 		internal IntPtr		subwindow;
-		internal int		time;
+		internal IntPtr		time;
 		internal int		x;
 		internal int		y;
 		internal int		x_root;
@@ -104,13 +111,13 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XCrossingEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
 		internal IntPtr		root;
 		internal IntPtr		subwindow;
-		internal int		time;
+		internal IntPtr		time;
 		internal int		x;
 		internal int		y;
 		internal int		x_root;
@@ -125,7 +132,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XFocusChangeEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
@@ -136,7 +143,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XKeymapEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
@@ -177,7 +184,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XExposeEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
@@ -191,7 +198,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XGraphicsExposeEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		drawable;
@@ -207,7 +214,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XNoExposeEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		drawable;
@@ -218,7 +225,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XVisibilityEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
@@ -228,7 +235,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XCreateWindowEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		parent;
@@ -244,7 +251,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XDestroyWindowEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		xevent;
@@ -254,7 +261,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XUnmapEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		xevent;
@@ -265,7 +272,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XMapEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		xevent;
@@ -276,7 +283,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XMapRequestEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		parent;
@@ -286,7 +293,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XReparentEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		xevent;
@@ -300,7 +307,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XConfigureEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		xevent;
@@ -317,7 +324,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XGravityEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		xevent;
@@ -329,7 +336,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XResizeRequestEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
@@ -340,7 +347,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XConfigureRequestEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
@@ -351,7 +358,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XCirculateEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		xevent;
@@ -362,7 +369,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XCirculateRequestEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		parent;
@@ -373,30 +380,30 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XPropertyEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
 		internal IntPtr		atom;
-		internal int		time;
+		internal IntPtr		time;
 		internal int		state;
 	}
 
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XSelectionClearEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
 		internal IntPtr		selection;
-		internal int		time;
+		internal IntPtr		time;
 	}
 
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XSelectionRequestEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		owner;
@@ -404,26 +411,26 @@
 		internal IntPtr		selection;
 		internal IntPtr		target;
 		internal IntPtr		property;
-		internal int		time;
+		internal IntPtr		time;
 	}
 
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XSelectionEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		requestor;
 		internal IntPtr		selection;
 		internal IntPtr		target;
 		internal IntPtr		property;
-		internal int		time;
+		internal IntPtr		time;
 	}
 
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XColormapEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
@@ -435,7 +442,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XClientMessageEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
@@ -451,7 +458,7 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XMappingEvent {
 		internal XEventName	type;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal bool		send_event;
 		internal IntPtr		display;
 		internal IntPtr		window;
@@ -465,7 +472,7 @@
 		internal XEventName	type;
 		internal IntPtr		display;
 		internal IntPtr		resourceid;
-		internal int		serial;
+		internal IntPtr		serial;
 		internal byte		error_code;
 		internal byte		request_code;
 		internal byte		minor_code;
@@ -479,30 +486,30 @@
 
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XEventPad {
-		internal int pad0;
-		internal int pad1;
-		internal int pad2;
-		internal int pad3;
-		internal int pad4;
-		internal int pad5;
-		internal int pad6;
-		internal int pad7;
-		internal int pad8;
-		internal int pad9;
-		internal int pad10;
-		internal int pad11;
-		internal int pad12;
-		internal int pad13;
-		internal int pad14;
-		internal int pad15;
-		internal int pad16;
-		internal int pad17;
-		internal int pad18;
-		internal int pad19;
-		internal int pad20;
-		internal int pad21;
-		internal int pad22;
-		internal int pad23;
+		internal IntPtr pad0;
+		internal IntPtr pad1;
+		internal IntPtr pad2;
+		internal IntPtr pad3;
+		internal IntPtr pad4;
+		internal IntPtr pad5;
+		internal IntPtr pad6;
+		internal IntPtr pad7;
+		internal IntPtr pad8;
+		internal IntPtr pad9;
+		internal IntPtr pad10;
+		internal IntPtr pad11;
+		internal IntPtr pad12;
+		internal IntPtr pad13;
+		internal IntPtr pad14;
+		internal IntPtr pad15;
+		internal IntPtr pad16;
+		internal IntPtr pad17;
+		internal IntPtr pad18;
+		internal IntPtr pad19;
+		internal IntPtr pad20;
+		internal IntPtr pad21;
+		internal IntPtr pad22;
+		internal IntPtr pad23;
 	}
 
 	[StructLayout(LayoutKind.Explicit)]
@@ -549,19 +556,19 @@
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XSetWindowAttributes {
 		internal IntPtr		background_pixmap;
-		internal uint		background_pixel;
+		internal IntPtr		background_pixel;
 		internal IntPtr		border_pixmap;
-		internal uint		border_pixel;
+		internal IntPtr		border_pixel;
 		internal Gravity	bit_gravity;
 		internal Gravity	win_gravity;
 		internal int		backing_store;
-		internal uint		backing_planes;
-		internal uint		backing_pixel;
+		internal IntPtr		backing_planes;
+		internal IntPtr		backing_pixel;
 		internal bool		save_under;
-		internal int		event_mask;
-		internal int		do_not_propagate_mask;
+		internal IntPtr		event_mask;
+		internal IntPtr		do_not_propagate_mask;
 		internal bool		override_redirect;
-		internal uint		colormap;
+		internal IntPtr		colormap;
 		internal IntPtr		cursor;
 	}
 
@@ -579,15 +586,15 @@
 		internal Gravity	bit_gravity;
 		internal Gravity	win_gravity;
 		internal int		backing_store;
-		internal uint		backing_planes;
-		internal uint		backing_pixel;
+		internal IntPtr		backing_planes;
+		internal IntPtr		backing_pixel;
 		internal bool		save_under;
-		internal uint		colormap;
+		internal IntPtr		colormap;
 		internal bool		map_installed;
 		internal int		map_state;
-		internal int		all_event_masks;
-		internal int		your_event_mask;
-		internal int		do_not_propagate_mask;
+		internal IntPtr		all_event_masks;
+		internal IntPtr		your_event_mask;
+		internal IntPtr		do_not_propagate_mask;
 		internal bool		override_direct;
 		internal IntPtr		screen;
 	}
@@ -597,7 +604,7 @@
 		internal string		value;
 		internal IntPtr		encoding;
 		internal int		format;
-		internal ulong		nitems;
+		internal IntPtr		nitems;
 	}
 	#endregion
 
@@ -754,21 +761,21 @@
 
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct XStandardColormap {
-		internal uint		colormap;
-		internal uint		red_max;
-		internal uint		red_mult;
-		internal uint		green_max;
-		internal uint		green_mult;
-		internal uint		blue_max;
-		internal uint		blue_mult;
-		internal uint		base_pixel;
-		internal uint		visualid;
-		internal uint		killid;
+		internal IntPtr		colormap;
+		internal IntPtr		red_max;
+		internal IntPtr		red_mult;
+		internal IntPtr		green_max;
+		internal IntPtr		green_mult;
+		internal IntPtr		blue_max;
+		internal IntPtr		blue_mult;
+		internal IntPtr		base_pixel;
+		internal IntPtr		visualid;
+		internal IntPtr		killid;
 	}
 
 	[StructLayout(LayoutKind.Sequential, Pack=2)]
 	internal struct XColor {
-		internal uint		pixel;
+		internal IntPtr		pixel;
 		internal ushort		red;
 		internal ushort		green;
 		internal ushort		blue;
@@ -863,14 +870,14 @@
 		internal int		root_depth;
 		internal IntPtr		root_visual;
 		internal IntPtr		default_gc;
-		internal uint		cmap;
-		internal uint		white_pixel;
-		internal uint		black_pixel;
+		internal IntPtr		cmap;
+		internal IntPtr		white_pixel;
+		internal IntPtr		black_pixel;
 		internal int		max_maps;
 		internal int		min_maps;
 		internal int		backing_store;
 		internal bool		save_unders;
-		internal EventMask	root_input_mask;
+		internal IntPtr	    root_input_mask;
 	}
 
 	[Flags]
@@ -928,11 +935,11 @@
 
 	[StructLayout(LayoutKind.Sequential)]
 	internal struct MotifWmHints {
-		internal MotifFlags		flags;
-		internal MotifFunctions		functions;
-		internal MotifDecorations	decorations;
-		internal MotifInputMode		input_mode;
-		internal uint			status;
+		internal IntPtr		flags;
+		internal IntPtr		functions;
+		internal IntPtr	    decorations;
+		internal IntPtr		input_mode;
+		internal IntPtr		status;
 	}
 
 	[Flags]
@@ -996,7 +1003,7 @@
 		int key_click_percent;
 		int bell_percent;
 		uint bell_pitch, bell_duration;
-		uint led_mask;
+		IntPtr led_mask;
 		int global_auto_repeat;
 		AutoRepeats auto_repeats;
 
@@ -1081,9 +1088,9 @@
 	[StructLayout (LayoutKind.Sequential)]
 	internal struct XGCValues {
 		internal GXFunction		function;
-		internal uint			plane_mask;
-		internal uint			foreground;
-		internal uint			background;
+		internal IntPtr			plane_mask;
+		internal IntPtr			foreground;
+		internal IntPtr			background;
 		internal int			line_width;
 		internal GCLineStyle		line_style;
 		internal GCCapStyle		cap_style;
Index: System.Windows.Forms/ChangeLog
===================================================================
--- System.Windows.Forms/ChangeLog	(revision 38141)
+++ System.Windows.Forms/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2004-12-28  Zoltan Varga  <vargaz@freemail.hu>
+
+	* X11Structs.cs X11Keyboard.cs XplatUIX11.cs: Fix 64 bit issues.
+
 2004-12-28  Peter Bartok  <pbartok@novell.com>
 
 	* CommonDialog.cs: 
Index: System.Windows.Forms/X11Keyboard.cs
===================================================================
--- System.Windows.Forms/X11Keyboard.cs	(revision 38141)
+++ System.Windows.Forms/X11Keyboard.cs	(working copy)
@@ -75,7 +75,7 @@
 			if ((xevent.KeyEvent.keycode >> 8) == 0x10)
 				xevent.KeyEvent.keycode = xevent.KeyEvent.keycode & 0xFF;
 
-			int event_time = xevent.KeyEvent.time;
+			int event_time = (int)xevent.KeyEvent.time;
 			int vkey = EventToVkey (xevent);
 
 			if (vkey == 0)
Index: System.Windows.Forms/XplatUIX11.cs
===================================================================
--- System.Windows.Forms/XplatUIX11.cs	(revision 38141)
+++ System.Windows.Forms/XplatUIX11.cs	(working copy)
@@ -88,7 +88,7 @@
 		private static int		net_active_window;	// X Atom
 		private static int		async_method;
 		private static int		post_message;		// X Atom send to generate a PostMessage event
-		private static uint		default_colormap;	// X Colormap ID
+		private static IntPtr		default_colormap;	// X Colormap ID
 		internal static MouseButtons	mouse_state;
 		internal static Point		mouse_position;
 		internal static bool		grab_confined;		// Is the current grab (if any) confined to grab_area?
@@ -98,7 +98,7 @@
 		internal static Msg		click_pending_message;	// 
 		internal static IntPtr		click_pending_lparam;	// 
 		internal static IntPtr		click_pending_wparam;	// 
-		internal static int		click_pending_time;	// Last time we received a mouse click
+		internal static long		click_pending_time;	// Last time we received a mouse click
 		internal static bool		click_pending;		// True if we haven't sent the last mouse click
 		internal static int		double_click_interval;	// in milliseconds, how fast one has to click for a double click
 		internal static Stack		modal_window;		// Stack of modal window handles
@@ -421,7 +421,7 @@
 			int			Width;
 			int			Height;
 			MotifWmHints		mwmHints;
-			uint[]			atoms;
+			IntPtr[]	atoms;
 			int			atom_count;
 			int			BorderWidth;
 			int			protocols;
@@ -484,61 +484,65 @@
 					XSetTransientForHint(DisplayHandle, WindowHandle, ParentHandle);
 				}
 
+				MotifFunctions functions = 0;
+				MotifDecorations decorations = 0;
 				mwmHints = new MotifWmHints();
-				mwmHints.flags = MotifFlags.Functions | MotifFlags.Decorations;
-				mwmHints.functions = 0;
-				mwmHints.decorations = 0;
+				mwmHints.flags = (IntPtr)(MotifFlags.Functions | MotifFlags.Decorations);
+				mwmHints.functions = (IntPtr)0;
+				mwmHints.decorations = (IntPtr)0;
 				
 				if ((cp.Style & ((int)WindowStyles.WS_CAPTION)) != 0) {
-					mwmHints.functions |= MotifFunctions.Move;
-					mwmHints.decorations |= MotifDecorations.Title | MotifDecorations.Menu;
+					functions |= MotifFunctions.Move;
+					decorations |= MotifDecorations.Title | MotifDecorations.Menu;
 				}
 
 				if ((cp.Style & ((int)WindowStyles.WS_THICKFRAME)) != 0) {
-					mwmHints.functions |= MotifFunctions.Move | MotifFunctions.Resize;
-					mwmHints.decorations |= MotifDecorations.Border | MotifDecorations.ResizeH;
+					functions |= MotifFunctions.Move | MotifFunctions.Resize;
+					decorations |= MotifDecorations.Border | MotifDecorations.ResizeH;
 				}
 
 				if ((cp.Style & ((int)WindowStyles.WS_MINIMIZEBOX)) != 0) {
-					mwmHints.functions |= MotifFunctions.Minimize;
-					mwmHints.decorations |= MotifDecorations.Minimize;
+					functions |= MotifFunctions.Minimize;
+					decorations |= MotifDecorations.Minimize;
 				}
 
 				if ((cp.Style & ((int)WindowStyles.WS_MAXIMIZEBOX)) != 0) {
-					mwmHints.functions |= MotifFunctions.Maximize;
-					mwmHints.decorations |= MotifDecorations.Maximize;
+					functions |= MotifFunctions.Maximize;
+					decorations |= MotifDecorations.Maximize;
 				}
 
 				if ((cp.Style & ((int)WindowStyles.WS_SYSMENU)) != 0) {
-					mwmHints.functions |= MotifFunctions.Close;
+					functions |= MotifFunctions.Close;
 				}
 
 				if ((cp.ExStyle & ((int)WindowStyles.WS_EX_DLGMODALFRAME)) != 0) {
-					mwmHints.decorations |= MotifDecorations.Border;
+					decorations |= MotifDecorations.Border;
 				}
 
 				if ((cp.Style & ((int)WindowStyles.WS_DLGFRAME)) != 0) {
-					mwmHints.decorations |= MotifDecorations.Border;
+					decorations |= MotifDecorations.Border;
 				}
 
 				if ((cp.Style & ((int)WindowStyles.WS_BORDER)) != 0) {
-					mwmHints.decorations |= MotifDecorations.Border;
+					decorations |= MotifDecorations.Border;
 				}
 
-
 				if ((cp.ExStyle & ((int)WindowStyles.WS_EX_TOOLWINDOW)) != 0) {
-					mwmHints.functions = 0;
-					mwmHints.decorations = 0;
+					functions = 0;
+					decorations = 0;
 				}
 
+				mwmHints.functions = (IntPtr)functions;
+				mwmHints.decorations = (IntPtr)decorations;
+
 				XChangeProperty(DisplayHandle, WindowHandle, mwm_hints, mwm_hints, 32, PropertyMode.Replace, ref mwmHints, 5);
 
-				atoms = new uint[8];
+				atoms = new IntPtr[8];
 				atom_count = 0;
 
 				if ((cp.ExStyle & ((int)WindowStyles.WS_EX_TOOLWINDOW)) != 0) {
-					atoms[atom_count++] = (uint)wm_state_above;
-					atoms[atom_count++] = (uint)wm_no_taskbar;
+					atoms[atom_count++] = (IntPtr)wm_state_above;
+					atoms[atom_count++] = (IntPtr)wm_no_taskbar;
 				}
 				XChangeProperty(DisplayHandle, WindowHandle, net_wm_state, atom, 32, PropertyMode.Replace, ref atoms, atom_count);
 
@@ -1039,9 +1043,9 @@
 						click_pending_message = msg.message;
 						click_pending_wparam = msg.wParam;
 						click_pending_lparam = msg.lParam;
-						click_pending_time = xevent.ButtonEvent.time;
+						click_pending_time = (long)xevent.ButtonEvent.time;
 					} else {
-						if (((xevent.ButtonEvent.time - click_pending_time)<double_click_interval) && (msg.wParam == click_pending_wparam) && (msg.lParam == click_pending_lparam) && (msg.message == click_pending_message)) {
+						if ((((long)xevent.ButtonEvent.time - click_pending_time)<double_click_interval) && (msg.wParam == click_pending_wparam) && (msg.lParam == click_pending_lparam) && (msg.message == click_pending_message)) {
 							// Looks like a genuine double click, clicked twice on the same spot with the same keys
 							switch(xevent.ButtonEvent.button) {
 								case 1: {
@@ -1779,19 +1783,19 @@
 		internal extern static int XScreenNumberOfScreen(IntPtr display, IntPtr Screen);
 
 		[DllImport ("libX11", EntryPoint="XDefaultVisual")]
-		internal extern static uint XDefaultVisual(IntPtr display, int screen_number);
+		internal extern static IntPtr XDefaultVisual(IntPtr display, int screen_number);
 
 		[DllImport ("libX11", EntryPoint="XDefaultDepth")]
 		internal extern static uint XDefaultDepth(IntPtr display, int screen_number);
 
 		[DllImport ("libX11", EntryPoint="XDefaultColormap")]
-		internal extern static uint XDefaultColormap(IntPtr display, int screen_number);
+		internal extern static IntPtr XDefaultColormap(IntPtr display, int screen_number);
 
 		[DllImport ("libX11", EntryPoint="XLookupColor")]
-		internal extern static int XLookupColor(IntPtr display, uint Colormap, string Coloranem, ref XColor exact_def_color, ref XColor screen_def_color);
+		internal extern static int XLookupColor(IntPtr display, IntPtr Colormap, string Coloranem, ref XColor exact_def_color, ref XColor screen_def_color);
 
 		[DllImport ("libX11", EntryPoint="XAllocColor")]
-		internal extern static int XAllocColor(IntPtr display, uint Colormap, ref XColor colorcell_def);
+		internal extern static int XAllocColor(IntPtr display, IntPtr Colormap, ref XColor colorcell_def);
 
 		[DllImport ("libX11", EntryPoint="XSetTransientForHint")]
 		internal extern static int XSetTransientForHint(IntPtr display, IntPtr window, IntPtr prop_window);
@@ -1800,10 +1804,10 @@
 		internal extern static int XChangeProperty(IntPtr display, IntPtr window, int property, int type, int format, PropertyMode  mode, ref MotifWmHints data, int nelements);
 
 		[DllImport ("libX11", EntryPoint="XChangeProperty")]
-		internal extern static int XChangeProperty(IntPtr display, IntPtr window, int property, Atom format, int type, PropertyMode  mode, ref uint[] atoms, int nelements);
+		internal extern static int XChangeProperty(IntPtr display, IntPtr window, int property, Atom format, int type, PropertyMode  mode, ref IntPtr[] atoms, int nelements);
 
 		[DllImport ("libX11", EntryPoint="XChangeProperty")]
-		internal extern static int XChangeProperty(IntPtr display, IntPtr window, int property, int format, int type, PropertyMode  mode, ref uint[] atoms, int nelements);
+		internal extern static int XChangeProperty(IntPtr display, IntPtr window, int property, int format, int type, PropertyMode  mode, ref IntPtr[] atoms, int nelements);
 
 		[DllImport ("libX11", EntryPoint="XChangeProperty")]
 		internal extern static int XChangeProperty(IntPtr display, IntPtr window, int property, int format, int type, PropertyMode  mode, IntPtr data, int nelements);
@@ -1828,7 +1832,7 @@
 		internal extern static int XDrawLine(IntPtr display, IntPtr drawable, IntPtr gc, int x1, int y1, int x2, int y2);
 
 		[DllImport ("libX11", EntryPoint="XSetWindowBackground")]
-		internal extern static int XSetWindowBackground(IntPtr display, IntPtr window, uint background);
+		internal extern static int XSetWindowBackground(IntPtr display, IntPtr window, IntPtr background);
 
 		[DllImport ("libX11", EntryPoint="XCopyArea")]
 		internal extern static int XCopyArea(IntPtr display, IntPtr src, IntPtr dest, IntPtr gc, int src_x, int src_y, int width, int height, int dest_x, int dest_y);
