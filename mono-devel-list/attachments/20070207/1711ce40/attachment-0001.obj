Index: test/web.config
===================================================================
--- test/web.config	(revision 71176)
+++ test/web.config	(working copy)
@@ -17,8 +17,6 @@
 		</soapExtensionTypes>
 	</webServices>
 	-->
-	<authentication mode= "None">
-	</authentication>
     	<httpModules>
 	<!-- Some modules available in Mono.Http -->
 	<!--
Index: src/server.cs
===================================================================
--- src/server.cs	(revision 71176)
+++ src/server.cs	(working copy)
@@ -38,7 +38,7 @@
 using System.Security.Cryptography;
 using System.Security.Cryptography.X509Certificates;
 #if !MODMONO_SERVER
-using Mono.Security.Protocol.Tls;
+//using Mono.Security.Protocol.Tls;
 #endif
 using Mono.WebServer;
 
@@ -230,7 +230,7 @@
 		static NameValueCollection AppSettings {
 			get {
 #if NET_2_0
-				return ConfigurationManager.AppSettings;
+				return System.Configuration.ConfigurationManager.AppSettings;
 #else
 				return ConfigurationSettings.AppSettings;
 #endif
@@ -239,7 +239,7 @@
 
 		public static int Main (string [] args)
 		{
-			SecurityConfiguration security = new SecurityConfiguration ();
+			//SecurityConfiguration security = new SecurityConfiguration ();
 			bool nonstop = false;
 			bool verbose = false;
 			Trace.Listeners.Add (new TextWriterTraceListener (Console.Out));
@@ -283,34 +283,34 @@
 #else
 				case "--https":
 					CheckAndSetOptions (a, Options.Https, ref options);
-					security.Enabled = true;
+					//security.Enabled = true;
 					break;
 				case "--https-client-accept":
 					CheckAndSetOptions (a, Options.Https, ref options);
-					security.Enabled = true;
-					security.AcceptClientCertificates = true;
-					security.RequireClientCertificates = false;
+					//security.Enabled = true;
+					//security.AcceptClientCertificates = true;
+					//security.RequireClientCertificates = false;
 					break;
 				case "--https-client-require":
 					CheckAndSetOptions (a, Options.Https, ref options);
-					security.Enabled = true;
-					security.AcceptClientCertificates = true;
-					security.RequireClientCertificates = true;
+					//security.Enabled = true;
+					//security.AcceptClientCertificates = true;
+					//security.RequireClientCertificates = true;
 					break;
 				case "--p12file":
-					security.Pkcs12File = args [++i];
+					//security.Pkcs12File = args [++i];
 					break;
 				case "--cert":
-					security.CertificateFile = args [++i];
+					//security.CertificateFile = args [++i];
 					break;
 				case "--pkfile":
-					security.PvkFile = args [++i];
+					//security.PvkFile = args [++i];
 					break;
 				case "--pkpwd":
-					security.Password = args [++i];
+					//security.Password = args [++i];
 					break;
 				case "--protocols":
-					security.SetProtocol (args [++i]);
+					//security.SetProtocol (args [++i]);
 					break;
 #endif
 				case "--port":
@@ -426,20 +426,20 @@
 
 			ApplicationServer server = new ApplicationServer (webSource);
 #else
-			if (security.Enabled) {
-				try {
-					key = security.KeyPair;
-					webSource = new XSPWebSource (ipaddr, port, security.Protocol, security.ServerCertificate, 
-						new PrivateKeySelectionCallback (GetPrivateKey), 
-						security.AcceptClientCertificates, security.RequireClientCertificates);
-				}
-				catch (CryptographicException ce) {
-					Console.WriteLine (ce.Message);
-					return 1;
-				}
-			} else {
+			//if (security.Enabled) {
+			//    try {
+			//        key = security.KeyPair;
+			//        webSource = new XSPWebSource (ipaddr, port, security.Protocol, security.ServerCertificate, 
+			//            new PrivateKeySelectionCallback (GetPrivateKey), 
+			//            security.AcceptClientCertificates, security.RequireClientCertificates);
+			//    }
+			//    catch (CryptographicException ce) {
+			//        Console.WriteLine (ce.Message);
+			//        return 1;
+			//    }
+			//} else {
 				webSource = new XSPWebSource (ipaddr, port);
-			}
+			//}
 
 			ApplicationServer server = new ApplicationServer (webSource);
 #endif
@@ -463,7 +463,8 @@
 			} else
 #endif
 			{
-				Console.WriteLine ("Listening on port: {0} {1}", port, security);
+				//Console.WriteLine ("Listening on port: {0} {1}", port, security);
+				Console.WriteLine ("Listening on port: {0}", port);
 				Console.WriteLine ("Listening on address: {0}", ip);
 			}
 			
Index: src/Mono.WebServer/XSPWorkerRequest.cs
===================================================================
--- src/Mono.WebServer/XSPWorkerRequest.cs	(revision 71176)
+++ src/Mono.WebServer/XSPWorkerRequest.cs	(working copy)
@@ -107,7 +107,7 @@
 			serverHeader = String.Format ("Server: {0} {1}\r\n", server_software, plat);
 
 #if NET_2_0
-			string indexes = ConfigurationManager.AppSettings ["MonoServerDefaultIndexFiles"];
+			string indexes = System.Configuration.ConfigurationManager.AppSettings ["MonoServerDefaultIndexFiles"];			
 #else
 			string indexes = ConfigurationSettings.AppSettings ["MonoServerDefaultIndexFiles"];
 #endif
Index: src/Mono.WebServer/XSPApplicationHost.cs
===================================================================
--- src/Mono.WebServer/XSPApplicationHost.cs	(revision 71176)
+++ src/Mono.WebServer/XSPApplicationHost.cs	(working copy)
@@ -37,8 +37,8 @@
 using System.Web;
 using System.Security.Cryptography;
 using System.Security.Cryptography.X509Certificates;
-using Mono.Security.Protocol.Tls;
-using SecurityProtocolType = Mono.Security.Protocol.Tls.SecurityProtocolType;
+//using Mono.Security.Protocol.Tls;
+//using SecurityProtocolType = Mono.Security.Protocol.Tls.SecurityProtocolType;
 using X509Certificate = System.Security.Cryptography.X509Certificates.X509Certificate;
 
 namespace Mono.WebServer
@@ -53,12 +53,12 @@
 		bool secureConnection;
 		SecurityProtocolType SecurityProtocol;
 		X509Certificate cert;
-		PrivateKeySelectionCallback keyCB;
+		object keyCB;
 		bool allowClientCert;
 		bool requireClientCert;
 
 		public XSPWebSource(IPAddress address, int port, SecurityProtocolType securityProtocol,
-					X509Certificate cert, PrivateKeySelectionCallback keyCB, 
+					X509Certificate cert, object keyCB, 
 					bool allowClientCert, bool requireClientCert)
 		{			
 			secureConnection = (cert != null && keyCB != null);
@@ -300,23 +300,23 @@
 
 		public XSPWorker (Socket client, EndPoint localEP, ApplicationServer server,
 			bool secureConnection,
-			Mono.Security.Protocol.Tls.SecurityProtocolType SecurityProtocol,
+			SecurityProtocolType SecurityProtocol,
 			X509Certificate cert,
-			PrivateKeySelectionCallback keyCB,
+			object keyCB,
 			bool allowClientCert,
 			bool requireClientCert) 
 		{
 			if (secureConnection) {
-				ssl = new SslInformations ();
-				ssl.AllowClientCertificate = allowClientCert;
-				ssl.RequireClientCertificate = requireClientCert;
-				ssl.RawServerCertificate = cert.GetRawCertData ();
+				//ssl = new SslInformations ();
+				//ssl.AllowClientCertificate = allowClientCert;
+				//ssl.RequireClientCertificate = requireClientCert;
+				//ssl.RawServerCertificate = cert.GetRawCertData ();
 
-				netStream = new LingeringNetworkStream (client, true);
-				SslServerStream s = new SslServerStream (netStream, cert, requireClientCert, false);
-				s.PrivateKeyCertSelectionDelegate += keyCB;
-				s.ClientCertValidationDelegate += new CertificateValidationCallback (ClientCertificateValidation);
-				stream = s;
+				//netStream = new LingeringNetworkStream (client, true);
+				//SslServerStream s = new SslServerStream (netStream, cert, requireClientCert, false);
+				//s.PrivateKeyCertSelectionDelegate += keyCB;
+				//s.ClientCertValidationDelegate += new CertificateValidationCallback (ClientCertificateValidation);
+				//stream = s;
 			} else {
 				netStream = new LingeringNetworkStream (client, false);
 				stream = netStream;
@@ -408,9 +408,9 @@
 			requestId = broker.RegisterRequest (this);
 
 			if (ssl != null) {
-				SslServerStream s = (stream as SslServerStream);
-				ssl.KeySize = s.CipherStrength;
-				ssl.SecretKeySize = s.KeyExchangeStrength;
+				//SslServerStream s = (stream as SslServerStream);
+				//ssl.KeySize = s.CipherStrength;
+				//ssl.SecretKeySize = s.KeyExchangeStrength;
 			}
 
 			try {
Index: src/security.cs
===================================================================
--- src/security.cs	(revision 71176)
+++ src/security.cs	(working copy)
@@ -34,11 +34,11 @@
 using System.Security.Cryptography.X509Certificates;
 using System.Text;
 
-using Mono.Security.Authenticode;
-using Mono.Security.Protocol.Tls;
-using MSX = Mono.Security.X509;
-using Mono.Security.X509.Extensions;
-using SecurityProtocolType = Mono.Security.Protocol.Tls.SecurityProtocolType;
+//using Mono.Security.Authenticode;
+//using Mono.Security.Protocol.Tls;
+//using MSX = Mono.Security.X509;
+//using Mono.Security.X509.Extensions;
+//using SecurityProtocolType = Mono.Security.Protocol.Tls.SecurityProtocolType;
 #endif
 
 namespace Mono.XSP {
