Index: System.Web.Configuration_2.0/WebConfigurationManager.cs
===================================================================
--- System.Web.Configuration_2.0/WebConfigurationManager.cs	(revision 72271)
+++ System.Web.Configuration_2.0/WebConfigurationManager.cs	(working copy)
@@ -39,7 +39,8 @@
 using System.Configuration.Internal;
 using _Configuration = System.Configuration.Configuration;
 
-namespace System.Web.Configuration {
+namespace System.Web.Configuration
+{
 
 	public static class WebConfigurationManager
 	{
@@ -98,108 +99,100 @@
 		static internal ArrayList ExtraAssemblies {
 			get {
 				if (extra_assemblies == null)
-					extra_assemblies = new ArrayList();
+					extra_assemblies = new ArrayList ();
 				return extra_assemblies;
 			}
 		}
-		
-		static WebConfigurationManager ()
-		{
+
+		static WebConfigurationManager () {
+#if DOTNET_RUNTIME
+			configFactory = new InternalConfigurationFactory ();
+#else
 			PropertyInfo prop = typeof(ConfigurationManager).GetProperty ("ConfigurationFactory", BindingFlags.Static | BindingFlags.NonPublic);
 			if (prop != null)
 				configFactory = prop.GetValue (null, null) as IInternalConfigConfigurationFactory;
+#endif
 		}
 
-		public static _Configuration OpenMachineConfiguration ()
-		{
+		public static _Configuration OpenMachineConfiguration () {
 			return ConfigurationManager.OpenMachineConfiguration ();
 		}
-		
+
 		[MonoTODO ("need to handle locationSubPath")]
-		public static _Configuration OpenMachineConfiguration (string locationSubPath)
-		{
+		public static _Configuration OpenMachineConfiguration (string locationSubPath) {
 			return OpenMachineConfiguration ();
 		}
 
-		[MonoTODO("Mono does not support remote configuration")]
+		[MonoTODO ("Mono does not support remote configuration")]
 		public static _Configuration OpenMachineConfiguration (string locationSubPath,
-								       string server)
-		{
+									   string server) {
 			if (server == null)
 				return OpenMachineConfiguration (locationSubPath);
 
 			throw new NotSupportedException ("Mono doesn't support remote configuration");
 		}
 
-		[MonoTODO("Mono does not support remote configuration")]
+		[MonoTODO ("Mono does not support remote configuration")]
 		public static _Configuration OpenMachineConfiguration (string locationSubPath,
-								       string server,
-								       IntPtr userToken)
-		{
+									   string server,
+									   IntPtr userToken) {
 			if (server == null)
 				return OpenMachineConfiguration (locationSubPath);
 			throw new NotSupportedException ("Mono doesn't support remote configuration");
 		}
 
-		[MonoTODO("Mono does not support remote configuration")]
+		[MonoTODO ("Mono does not support remote configuration")]
 		public static _Configuration OpenMachineConfiguration (string locationSubPath,
-								       string server,
-								       string userName,
-								       string password)
-		{
+									   string server,
+									   string userName,
+									   string password) {
 			if (server == null)
 				return OpenMachineConfiguration (locationSubPath);
 			throw new NotSupportedException ("Mono doesn't support remote configuration");
 		}
 
-		public static _Configuration OpenWebConfiguration (string path)
-		{
+		public static _Configuration OpenWebConfiguration (string path) {
 			return OpenWebConfiguration (path, null, null, null, null, null);
 		}
-		
-		public static _Configuration OpenWebConfiguration (string path, string site)
-		{
+
+		public static _Configuration OpenWebConfiguration (string path, string site) {
 			return OpenWebConfiguration (path, site, null, null, null, null);
 		}
-		
-		public static _Configuration OpenWebConfiguration (string path, string site, string locationSubPath)
-		{
+
+		public static _Configuration OpenWebConfiguration (string path, string site, string locationSubPath) {
 			return OpenWebConfiguration (path, site, locationSubPath, null, null, null);
 		}
 
-		public static _Configuration OpenWebConfiguration (string path, string site, string locationSubPath, string server)
-		{
+		public static _Configuration OpenWebConfiguration (string path, string site, string locationSubPath, string server) {
 			return OpenWebConfiguration (path, site, locationSubPath, server, null, null);
 		}
 
-		public static _Configuration OpenWebConfiguration (string path, string site, string locationSubPath, string server, IntPtr userToken)
-		{
+		public static _Configuration OpenWebConfiguration (string path, string site, string locationSubPath, string server, IntPtr userToken) {
 			return OpenWebConfiguration (path, site, locationSubPath, server, null, null);
 		}
-		
-		public static _Configuration OpenWebConfiguration (string path, string site, string locationSubPath, string server, string userName, string password)
-		{
+
+		public static _Configuration OpenWebConfiguration (string path, string site, string locationSubPath, string server, string userName, string password) {
 			if (path == null)
 				path = "";
 
 			string basePath = GetBasePath (path);
 			_Configuration conf;
 
-			
+
 			lock (configurations) {
 				conf = (_Configuration) configurations [basePath];
 				if (conf == null) {
-					conf = ConfigurationFactory.Create (typeof(WebConfigurationHost), null, basePath, site, locationSubPath, server, userName, password);
+					conf = ConfigurationFactory.Create (typeof (WebConfigurationHost), null, basePath, site, locationSubPath, server, userName, password);
 					configurations [basePath] = conf;
 				}
 			}
 			if (basePath.Length < path.Length) {
-			
+
 				// If the path has a file name, look for a location specific configuration
-				
+
 				int dif = path.Length - basePath.Length;
 				string file = path.Substring (path.Length - dif);
-				int i=0;
+				int i = 0;
 				while (i < file.Length && file [i] == '/')
 					i++;
 				if (i != 0)
@@ -215,43 +208,36 @@
 			return conf;
 		}
 
-		public static _Configuration OpenMappedWebConfiguration (WebConfigurationFileMap fileMap, string path)
-		{
-			return ConfigurationFactory.Create (typeof(WebConfigurationHost), fileMap, path);
+		public static _Configuration OpenMappedWebConfiguration (WebConfigurationFileMap fileMap, string path) {
+			return ConfigurationFactory.Create (typeof (WebConfigurationHost), fileMap, path);
 		}
-		
-		public static _Configuration OpenMappedWebConfiguration (WebConfigurationFileMap fileMap, string path, string site)
-		{
-			return ConfigurationFactory.Create (typeof(WebConfigurationHost), fileMap, path, site);
+
+		public static _Configuration OpenMappedWebConfiguration (WebConfigurationFileMap fileMap, string path, string site) {
+			return ConfigurationFactory.Create (typeof (WebConfigurationHost), fileMap, path, site);
 		}
-		
-		public static _Configuration OpenMappedWebConfiguration (WebConfigurationFileMap fileMap, string path, string site, string locationSubPath)
-		{
-			return ConfigurationFactory.Create (typeof(WebConfigurationHost), fileMap, path, site, locationSubPath);
+
+		public static _Configuration OpenMappedWebConfiguration (WebConfigurationFileMap fileMap, string path, string site, string locationSubPath) {
+			return ConfigurationFactory.Create (typeof (WebConfigurationHost), fileMap, path, site, locationSubPath);
 		}
-		
-		public static _Configuration OpenMappedMachineConfiguration (ConfigurationFileMap fileMap)
-		{
-			return ConfigurationFactory.Create (typeof(WebConfigurationHost), fileMap);
+
+		public static _Configuration OpenMappedMachineConfiguration (ConfigurationFileMap fileMap) {
+			return ConfigurationFactory.Create (typeof (WebConfigurationHost), fileMap);
 		}
 
 		public static _Configuration OpenMappedMachineConfiguration (ConfigurationFileMap fileMap,
-									     string locationSubPath)
-		{
+										 string locationSubPath) {
 			return OpenMappedMachineConfiguration (fileMap);
 		}
 
-		public static object GetSection (string sectionName)
-		{
+		public static object GetSection (string sectionName) {
 			string path = (HttpContext.Current != null
-			    && HttpContext.Current.Request != null) ?
+				&& HttpContext.Current.Request != null) ?
 				HttpContext.Current.Request.Path : HttpRuntime.AppDomainAppVirtualPath;
 
 			return GetSection (sectionName, path);
 		}
 
-		public static object GetSection (string sectionName, string path)
-		{
+		public static object GetSection (string sectionName, string path) {
 			_Configuration c = OpenWebConfiguration (path);
 			ConfigurationSection section = c.GetSection (sectionName);
 
@@ -263,8 +249,7 @@
 
 		readonly static MethodInfo get_runtime_object = typeof (ConfigurationSection).GetMethod ("GetRuntimeObject", BindingFlags.NonPublic | BindingFlags.Instance);
 
-		public static object GetWebApplicationSection (string sectionName)
-		{
+		public static object GetWebApplicationSection (string sectionName) {
 			string path = (HttpContext.Current == null
 				|| HttpContext.Current.Request == null
 				|| HttpContext.Current.Request.ApplicationPath == null
@@ -285,25 +270,24 @@
 		internal static IInternalConfigConfigurationFactory ConfigurationFactory {
 			get { return configFactory; }
 		}
-		
-		static string GetBasePath (string path)
-		{
- 			if (path == "/" || path == "")
+
+		static string GetBasePath (string path) {
+			if (path == "/" || path == "")
 				return path;
 
 			/* first if we can, map it to a physical path
 			 * to see if it corresponds to a file */
 			if (HttpContext.Current != null
-			    && HttpContext.Current.Request != null) {
+				&& HttpContext.Current.Request != null) {
 				string pd = HttpContext.Current.Request.MapPath (path);
 
 				if (!Directory.Exists (pd)) {
 					/* if it does, remove the file from the url */
 					int i = path.LastIndexOf ('/');
 					path = path.Substring (0, i);
-				} 
+				}
 			}
-			
+
 			if (path.Length == 0)
 				return path;
 
@@ -315,7 +299,7 @@
 		}
 
 
-#region stuff copied from WebConfigurationSettings
+		#region stuff copied from WebConfigurationSettings
 #if TARGET_J2EE
 		static internal IConfigurationSystem oldConfig {
 			get {
@@ -351,8 +335,8 @@
 		const BindingFlags privStatic = BindingFlags.NonPublic | BindingFlags.Static;
 		static readonly object lockobj = new object ();
 
-		internal static void Init ()
-		{
+		internal static void Init () {
+#if false
 			lock (lockobj) {
 				if (config != null)
 					return;
@@ -389,6 +373,7 @@
 					//configSystem = system;
 				}
 			}
+#endif
 		}
 	}
 
@@ -412,18 +397,15 @@
 		static Web20DefaultConfig instance;
 #endif
 
-		static Web20DefaultConfig ()
-		{
+		static Web20DefaultConfig () {
 			instance = new Web20DefaultConfig ();
 		}
 
-		public static Web20DefaultConfig GetInstance ()
-		{
+		public static Web20DefaultConfig GetInstance () {
 			return instance;
 		}
 
-		public object GetConfig (string sectionName)
-		{
+		public object GetConfig (string sectionName) {
 			object o = WebConfigurationManager.GetWebApplicationSection (sectionName);
 
 			if (o == null || o is IgnoreSection) {
@@ -443,13 +425,12 @@
 			return o;
 		}
 
-		public void Init ()
-		{
+		public void Init () {
 			// nothing. We need a context.
 		}
 	}
 
-#endregion
+		#endregion
 }
 
 #endif
Index: System.Web.Handlers/AssemblyResourceLoader.cs
===================================================================
--- System.Web.Handlers/AssemblyResourceLoader.cs	(revision 71176)
+++ System.Web.Handlers/AssemblyResourceLoader.cs	(working copy)
@@ -95,7 +95,7 @@
 			if (!found)
 				return;
 			
-			Stream s = assembly.GetManifestResourceStream (resourceName);
+			Stream s = assembly.GetManifestResourceStream ("System.Web.resources." + resourceName);
 			if (s == null)
 				return;
 			
Index: System.Web/HttpRequest.cs
===================================================================
--- System.Web/HttpRequest.cs	(revision 71176)
+++ System.Web/HttpRequest.cs	(working copy)
@@ -580,7 +580,7 @@
 
 		TempFileStream GetTempStream ()
 		{
-			string tempdir = AppDomain.CurrentDomain.SetupInformation.DynamicBase;
+			string tempdir = AppDomain.CurrentDomain.DynamicDirectory;
 			TempFileStream f = null;
 			string path;
 			Random rnd = new Random ();
Index: System.Web/HttpApplicationFactory.cs
===================================================================
--- System.Web/HttpApplicationFactory.cs	(revision 71176)
+++ System.Web/HttpApplicationFactory.cs	(working copy)
@@ -396,8 +396,8 @@
 				// Todo: Generate profile properties assembly from Web.config here
 				
 				// Todo: Compile code from App_Code here
-				AppCodeCompiler acc = new AppCodeCompiler ();
-				acc.Compile ();
+				//AppCodeCompiler acc = new AppCodeCompiler ();
+				//acc.Compile ();
 #endif
 
 				if (File.Exists (app_file)) {
Index: System.Web/HttpResponseStream.cs
===================================================================
--- System.Web/HttpResponseStream.cs	(revision 71176)
+++ System.Web/HttpResponseStream.cs	(working copy)
@@ -74,7 +74,7 @@
 				filter = value;
 			}
 		}
-#if TARGET_JVM
+#if true
 
 		class BlockManager {
 			const int PreferredLength = 16 * 1024;
Index: Assembly/AssemblyInfo.cs
===================================================================
--- Assembly/AssemblyInfo.cs	(revision 71176)
+++ Assembly/AssemblyInfo.cs	(working copy)
@@ -60,10 +60,10 @@
 
 [assembly: AllowPartiallyTrustedCallers()]
 [assembly: TagPrefix("System.Web.UI.WebControls", "asp")]
-#if !TARGET_JVM
-[assembly: AssemblyDelaySign(true)]
-[assembly: AssemblyKeyFile("../msfinal.pub")]
-#endif
+//#if !TARGET_JVM
+//[assembly: AssemblyDelaySign(true)]
+//[assembly: AssemblyKeyFile("../msfinal.pub")]
+//#endif
 
 // Resources
 
Index: System.Web.Hosting/BareApplicationHost.cs
===================================================================
--- System.Web.Hosting/BareApplicationHost.cs	(revision 71176)
+++ System.Web.Hosting/BareApplicationHost.cs	(working copy)
@@ -115,7 +115,7 @@
 
 		public string GetCodeGenDir ()
 		{
-			return AppDomain.CurrentDomain.SetupInformation.DynamicBase;
+            return AppDomain.CurrentDomain.DynamicDirectory;
 		}
 
 		void OnDomainUnload (object sender, EventArgs args)
Index: System.Web.Hosting/ApplicationHost.cs
===================================================================
--- System.Web.Hosting/ApplicationHost.cs	(revision 71176)
+++ System.Web.Hosting/ApplicationHost.cs	(working copy)
@@ -30,6 +30,8 @@
 using System.IO;
 using System.Security.Permissions;
 using System.Security.Policy;
+using System.Reflection;
+using System.Collections;
 
 namespace System.Web.Hosting {
 
@@ -105,11 +107,12 @@
 
 			setup.ApplicationBase = physicalDir;
 
-			setup.CachePath = null;
 			setup.ApplicationName = domain_id;
 			setup.ConfigurationFile = FindWebConfig (physicalDir);
 			setup.DisallowCodeDownload = true;
-			string bin_path = Path.Combine (physicalDir, "bin");
+			//string bin_path = Path.Combine (physicalDir, "bin");
+			string bin_path = @"C:\cygwin1\monobuild1\xspnet\src\bin\Debug";
+			//string bin_path = Path.Combine( physicalDir, @"src\bin\Debug");
 			setup.PrivateBinPath = bin_path;
 			setup.PrivateBinPathProbe = "*";
 			setup.ShadowCopyFiles = "true";
@@ -134,13 +137,18 @@
 			}
 			setup.DynamicBase = dynamic_dir;
 			CreateDirectory (setup.DynamicBase);
+			setup.CachePath = setup.DynamicBase;
 
 			//
 			// Create app domain
 			//
 			AppDomain appdomain;
 			appdomain = AppDomain.CreateDomain (domain_id, evidence, setup);
+            if (!Directory.Exists(appdomain.DynamicDirectory))
+                Directory.CreateDirectory(appdomain.DynamicDirectory);
 
+            appdomain.TypeResolve += new ResolveEventHandler(appdomain_TypeResolve);
+
 			//
 			// Populate with the AppDomain data keys expected, Mono only uses a
 			// few, but third party apps might use others:
@@ -155,7 +163,27 @@
 			appdomain.SetData (".hostingVirtualPath", virtualDir);
 			appdomain.SetData (".hostingInstallDir", Path.GetDirectoryName (typeof (Object).Assembly.CodeBase));
 
-			return appdomain.CreateInstanceAndUnwrap (hostType.Module.Assembly.FullName, hostType.FullName);
+			//return appdomain.CreateInstanceFromAndUnwrap (hostType.Module.FullyQualifiedName,
+			return appdomain.CreateInstanceAndUnwrap (hostType.Module.Assembly.FullName,
+				hostType.FullName);
 		}
+
+		static System.Reflection.Assembly appdomain_TypeResolve (object sender, ResolveEventArgs args)
+		{
+			AppDomain domain = (AppDomain) sender;
+
+			ArrayList files = new ArrayList ();
+			files.AddRange (Directory.GetFiles (domain.DynamicDirectory, "*.dll"));
+			files.AddRange (Directory.GetFiles (@"C:\cygwin\monobuild\xspnet\src\bin\Debug", "*.dll"));
+			foreach (string file in files) {
+				Assembly ass = Assembly.LoadFrom (file);
+				Type t = ass.GetType (args.Name, false);
+				if (t != null)
+					return ass;
+			}
+
+			return null;
+			//throw new Exception("The method or operation is not implemented.");
+		}
 	}
 }
Index: System.Web.UI.WebControls/HyperLinkField.cs
===================================================================
--- System.Web.UI.WebControls/HyperLinkField.cs	(revision 71189)
+++ System.Web.UI.WebControls/HyperLinkField.cs	(working copy)
@@ -222,7 +222,7 @@
 			
 			string[] urlFields = DataNavigateUrlFields;
 			if (urlFields.Length > 0) {
-				if (urlProperties == null) SetupProperties (controlContainer);
+				/*if (urlProperties == null)*/ SetupProperties (controlContainer);
 				object[] dataUrlValues = new object [urlFields.Length];
 				for (int n=0; n<dataUrlValues.Length; n++)
 					dataUrlValues [n] = urlProperties [n].GetValue (item);
Index: System.Web.Compilation/AspTokenizer.cs
===================================================================
--- System.Web.Compilation/AspTokenizer.cs	(revision 71176)
+++ System.Web.Compilation/AspTokenizer.cs	(working copy)
@@ -190,7 +190,7 @@
 						read_char ();
 						break;
 					}
-				} else if (quoted && c == quoteChar) {
+				} else if (!inServerTag && quoted && c == quoteChar) {
 					alternatingQuotes = false;
 				}
 
Index: System.Web.Compilation/AppResourcesCompiler.cs
===================================================================
--- System.Web.Compilation/AppResourcesCompiler.cs	(revision 71176)
+++ System.Web.Compilation/AppResourcesCompiler.cs	(working copy)
@@ -563,8 +563,8 @@
 		IResourceReader GetReaderForKind (AppResourceFileKind kind, Stream stream)
 		{
 			switch (kind) {
-				case AppResourceFileKind.ResX:
-					return new ResXResourceReader (stream);
+				//case AppResourceFileKind.ResX:
+				//	return new ResXResourceReader (stream);
 
 				case AppResourceFileKind.Resource:
 					return new ResourceReader (stream);
Index: System.Web.Compilation/AssemblyBuilder.cs
===================================================================
--- System.Web.Compilation/AssemblyBuilder.cs	(revision 71176)
+++ System.Web.Compilation/AssemblyBuilder.cs	(working copy)
@@ -72,8 +72,8 @@
 			else
 				section = (CompilationSection) WebConfigurationManager.GetSection ("system.web/compilation");
 			string tempdir = section.TempDirectory;
-			if (tempdir == null || tempdir == "")
-				tempdir = AppDomain.CurrentDomain.SetupInformation.DynamicBase;
+			if (tempdir == null || tempdir == "")
+                tempdir = AppDomain.CurrentDomain.DynamicDirectory;
 				
 			temp_files = new TempFileCollection (tempdir, KeepFiles);
 		}
Index: System.Web.Compilation/CachingCompiler.cs
===================================================================
--- System.Web.Compilation/CachingCompiler.cs	(revision 71176)
+++ System.Web.Compilation/CachingCompiler.cs	(working copy)
@@ -43,7 +43,7 @@
 {
 	class CachingCompiler
 	{
-		static string dynamicBase = AppDomain.CurrentDomain.SetupInformation.DynamicBase;
+        static string dynamicBase = AppDomain.CurrentDomain.DynamicDirectory;
 		static Hashtable compilationTickets = new Hashtable ();
 		const string cachePrefix = "@@Assembly";
 		const string cacheTypePrefix = "@@@Type";
Index: System.Web.Compilation/BaseCompiler.cs
===================================================================
--- System.Web.Compilation/BaseCompiler.cs	(revision 71176)
+++ System.Web.Compilation/BaseCompiler.cs	(working copy)
@@ -347,7 +347,7 @@
 
 		protected string DynamicDir ()
 		{
-			return AppDomain.CurrentDomain.SetupInformation.DynamicBase;
+            return AppDomain.CurrentDomain.DynamicDirectory;
 		}
 
 		[MonoTODO ("find out how to extract the warningLevel and compilerOptions in the <system.codedom> case")]
