Index: mono/metadata/class.c
===================================================================
--- mono/metadata/class.c	(revision 42100)
+++ mono/metadata/class.c	(working copy)
@@ -2918,7 +2918,10 @@
 		mono_metadata_decode_row (tt, tidx - 1, cols, MONO_TYPEDEF_SIZE);
 		name = mono_metadata_string_heap (image, cols [MONO_TYPEDEF_NAME]);
 		nspace = mono_metadata_string_heap (image, cols [MONO_TYPEDEF_NAMESPACE]);
-		return g_strdup_printf ("%s.%s", nspace, name);
+		if (strlen (nspace) == 0)
+			return g_strdup_printf ("%s", name);
+		else
+			return g_strdup_printf ("%s.%s", nspace, name);
 	}
 
 	case MONO_TOKEN_TYPE_REF: {
@@ -2928,7 +2931,10 @@
 		mono_metadata_decode_row (t, (type_token&0xffffff)-1, cols, MONO_TYPEREF_SIZE);
 		name = mono_metadata_string_heap (image, cols [MONO_TYPEREF_NAME]);
 		nspace = mono_metadata_string_heap (image, cols [MONO_TYPEREF_NAMESPACE]);
-		return g_strdup_printf ("%s.%s", nspace, name);
+		if (strlen (nspace) == 0)
+			return g_strdup_printf ("%s", name);
+		else
+			return g_strdup_printf ("%s.%s", nspace, name);
 	}
 		
 	case MONO_TOKEN_TYPE_SPEC:
@@ -2973,7 +2979,7 @@
 
 	if (!class){
 		char *name = mono_class_name_from_token (image, type_token, context);
-		g_warning ("Could not load class from %s (token 0x%08x) in %s", name, type_token, image->name);
+		g_warning ("The class %s could not be loaded, used in %s (token 0x%08x)", name, image->name, type_token);
 		g_free (name);
 	}
 
Index: mono/metadata/assembly.c
===================================================================
--- mono/metadata/assembly.c	(revision 42100)
+++ mono/metadata/assembly.c	(working copy)
@@ -492,7 +492,9 @@
 	if (reference == NULL){
 		char *extra_msg = g_strdup ("");
 
-		if (status == MONO_IMAGE_ERROR_ERRNO) {
+		if (status == MONO_IMAGE_ERROR_ERRNO && errno == ENOENT) {
+			extra_msg = g_strdup_printf ("The assembly was not found in the Global Assembly Cache, a path listed in the MONO_PATH environment variable, or in the location of the executing assembly (%s).\n", image->assembly->basedir);
+		} else if (status == MONO_IMAGE_ERROR_ERRNO) {
 			extra_msg = g_strdup_printf ("System error: %s\n", strerror (errno));
 		} else if (status == MONO_IMAGE_MISSING_ASSEMBLYREF) {
 			extra_msg = g_strdup ("Cannot find an assembly referenced from this one.\n");
@@ -500,13 +502,13 @@
 			extra_msg = g_strdup ("The file exists but is not a valid assembly.\n");
 		}
 		
-		g_warning ("Could not find assembly %s, references from %s (assemblyref_index=%d)\n"
-				   "     Major/Minor: %d,%d\n"
-				   "     Build:       %d,%d\n"
-				   "     Token:       %s\n%s",
-				   aname.name, image->name, index,
+		g_warning ("The following assembly referenced from %s could not be loaded:\n"
+				   "     Assembly:   %s    (assemblyref_index=%d)\n"
+				   "     Version:    %d.%d.%d.%d\n"
+				   "     Public Key: %s\n%s",
+				   image->name, aname.name, index,
 				   aname.major, aname.minor, aname.build, aname.revision,
-				   aname.public_key_token, extra_msg);
+				   strlen(aname.public_key_token) == 0 ? "(none)" : aname.public_key_token, extra_msg);
 		g_free (extra_msg);
 	}
 
Index: mono/metadata/ChangeLog
===================================================================
--- mono/metadata/ChangeLog	(revision 42100)
+++ mono/metadata/ChangeLog	(working copy)
@@ -1,3 +1,16 @@
+2005-03-22  Joshua Tauberer  <tauberer@for.net>
+
+	* class.c: Changed mono_class_name_from_token so that types
+	outside of a namespace don't have an initial period.  Improved
+	the g_warning message used in _mono_class_get when loading
+	fails.
+	* assembly.c: In mono_assembly_load_reference, when an assembly
+	can't be found, "No such file or directory" is misleading and
+	unhelpful because a few paths were checked for the presence of
+	the assembly.  When that happens (ENOENT), display a nicer
+	message indicating the directories that were searched.  In all
+	cases, the warning is made easier to read for non-hackers.
+
 2005-03-22  Zoltan Varga  <vargaz@freemail.hu>
 
 	* marshal.c (mono_marshal_get_runtime_invoke): Add support for
