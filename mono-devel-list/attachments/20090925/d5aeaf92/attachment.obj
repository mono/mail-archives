diff --git a/mono/metadata/ChangeLog b/mono/metadata/ChangeLog
index 3150b70..b1fa1f6 100644
--- a/mono/metadata/ChangeLog
+++ b/mono/metadata/ChangeLog
@@ -1,3 +1,10 @@
+2009-09-25  Rolf Bjarne Kvinge  <RKvinge@novell.com>
+
+	* appdomain.c|h: Add a mono_domain_unload_embedded method which is
+	equivalent to mono_domain_unload, except that it returns an exception
+	instead of throwing it. Make mono_domain_unload use the
+	mono_domain_unload_embedded method to avoid code-duplication.
+
 2009-09-24  Zoltan Varga  <vargaz@gmail.com>
 
 	* marshal.c (emit_ptr_to_object_conv): Generate an exception instead of
diff --git a/mono/metadata/appdomain.c b/mono/metadata/appdomain.c
index 2858dd7..7778d9e 100644
--- a/mono/metadata/appdomain.c
+++ b/mono/metadata/appdomain.c
@@ -2103,22 +2103,45 @@ unload_thread_main (void *arg)
  * mono_domain_unload:
  * @domain: The domain to unload
  *
+ *  Unloads an appdomain. Follows the process outlined in the comment
+ *  for mono_domain_unload_embedded.
+ */
+void
+mono_domain_unload (MonoDomain *domain)
+{
+	MonoObject *exc = NULL;
+	mono_domain_unload_embedded (domain, &exc);
+	if (exc)
+		mono_raise_exception ((MonoException*)exc);
+}
+
+/*
+ * mono_domain_unload:
+ * @domain: The domain to unload
+ * @exc: Exception information
+ *
  *  Unloads an appdomain. Follows the process outlined in:
  *  http://blogs.gotdotnet.com/cbrumme
  *
  *  If doing things the 'right' way is too hard or complex, we do it the 
  *  'simple' way, which means do everything needed to avoid crashes and
  *  memory leaks, but not much else.
+ *
+ *  It is required to pass a valid reference to the exc argument, upon return
+ *  from this function *exc will be set to the exception thrown, if any.
+ *
+ *  If this method is not called from an icall (embedded scenario for instance),
+ *  it must not be called with any managed frames on the stack, since the unload
+ *  process could end up trying to abort the current thread.
  */
 void
-mono_domain_unload (MonoDomain *domain)
+mono_domain_unload_embedded (MonoDomain *domain, MonoObject **exc)
 {
 	HANDLE thread_handle;
 	gsize tid;
 	guint32 res;
 	MonoAppDomainState prev_state;
 	MonoMethod *method;
-	MonoObject *exc;
 	unload_data thread_data;
 	MonoDomain *caller_domain = mono_domain_get ();
 
@@ -2132,11 +2155,11 @@ mono_domain_unload (MonoDomain *domain)
 		switch (prev_state) {
 		case MONO_APPDOMAIN_UNLOADING_START:
 		case MONO_APPDOMAIN_UNLOADING:
-			mono_raise_exception (mono_get_exception_cannot_unload_appdomain ("Appdomain is already being unloaded."));
-			break;
+			*exc = (MonoObject *) mono_get_exception_cannot_unload_appdomain ("Appdomain is already being unloaded.");
+			return;
 		case MONO_APPDOMAIN_UNLOADED:
-			mono_raise_exception (mono_get_exception_cannot_unload_appdomain ("Appdomain is already unloaded."));
-			break;
+			*exc = (MonoObject *) mono_get_exception_cannot_unload_appdomain ("Appdomain is already unloaded.");
+			return;
 		default:
 			g_warning ("Incalid appdomain state %d", prev_state);
 			g_assert_not_reached ();
@@ -2150,13 +2173,12 @@ mono_domain_unload (MonoDomain *domain)
 	method = mono_class_get_method_from_name (domain->domain->mbr.obj.vtable->klass, "DoDomainUnload", -1);	
 	g_assert (method);
 
-	exc = NULL;
-	mono_runtime_invoke (method, domain->domain, NULL, &exc);
-	if (exc) {
+	mono_runtime_invoke (method, domain->domain, NULL, exc);
+	if (*exc) {
 		/* Roll back the state change */
 		domain->state = MONO_APPDOMAIN_CREATED;
 		mono_domain_set (caller_domain, FALSE);
-		mono_raise_exception ((MonoException*)exc);
+		return;
 	}
 	mono_domain_set (caller_domain, FALSE);
 
@@ -2195,18 +2217,14 @@ mono_domain_unload (MonoDomain *domain)
 	CloseHandle (thread_handle);
 
 	if (thread_data.failure_reason) {
-		MonoException *ex;
-
 		/* Roll back the state change */
 		domain->state = MONO_APPDOMAIN_CREATED;
 
 		g_warning ("%s", thread_data.failure_reason);
 
-		ex = mono_get_exception_cannot_unload_appdomain (thread_data.failure_reason);
+		*exc = (MonoObject *) mono_get_exception_cannot_unload_appdomain (thread_data.failure_reason);
 
 		g_free (thread_data.failure_reason);
 		thread_data.failure_reason = NULL;
-
-		mono_raise_exception (ex);
 	}
 }
diff --git a/mono/metadata/appdomain.h b/mono/metadata/appdomain.h
index e4da4e4..5a8cfaa 100644
--- a/mono/metadata/appdomain.h
+++ b/mono/metadata/appdomain.h
@@ -85,6 +85,9 @@ mono_domain_set_internal   (MonoDomain *domain);
 void
 mono_domain_unload (MonoDomain *domain);
 
+void
+mono_domain_unload_embedded (MonoDomain *domain, MonoObject **exc);
+
 gboolean
 mono_domain_is_unloading   (MonoDomain *domain);
 
