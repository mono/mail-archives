Index: ChangeLog
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data.Odbc/ChangeLog,v
retrieving revision 1.28
diff -u -r1.28 ChangeLog
--- ChangeLog	16 Jun 2004 06:23:05 -0000	1.28
+++ ChangeLog	18 Jun 2004 03:47:20 -0000
@@ -1,3 +1,7 @@
+2004-06-18  Sureshkumar T (tsureshkumar@novell.com)
+	* OdbcConnection.cs: Moved env allocation to Open method. Disconnect & free handles
+			     are done in Close method to avoid simultaneous connections.
+
 2004-06-16  Sureshkumar T (tsureshkumar@novell.com)
 	* OdbcDataReader.cs: Added GetValue support for Sql Binary type to return byte array.
 			     Implemented GetBytes method.
Index: OdbcConnection.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data.Odbc/OdbcConnection.cs,v
retrieving revision 1.7
diff -u -r1.7 OdbcConnection.cs
--- OdbcConnection.cs	2 Jun 2004 05:02:58 -0000	1.7
+++ OdbcConnection.cs	18 Jun 2004 03:47:20 -0000
@@ -30,17 +30,6 @@
 		
 		public OdbcConnection ()
 		{
-			OdbcReturn ret;
-		
-			// allocate Environment handle	
-			ret=libodbc.SQLAllocHandle(OdbcHandleType.Env, IntPtr.Zero, ref henv);
-			if ((ret!=OdbcReturn.Success) && (ret!=OdbcReturn.SuccessWithInfo)) 
-				throw new OdbcException(new OdbcError("SQLAllocHandle"));
-		
-			ret=libodbc.SQLSetEnvAttr(henv, OdbcEnv.OdbcVersion, (IntPtr) 3 , 0); 
-			if ((ret!=OdbcReturn.Success) && (ret!=OdbcReturn.SuccessWithInfo)) 
-				throw new OdbcException(new OdbcError("SQLSetEnvAttr",OdbcHandleType.Env,henv));
-		
 			connectionTimeout = 15;
 			connectionString = null;
 		}
@@ -180,13 +169,32 @@
 
 		public void Close ()
 		{
+			OdbcReturn ret = OdbcReturn.Error;
 			if (State == ConnectionState.Open) {
-				// TODO: Free handles
+				// disconnect
+				ret = libodbc.SQLDisconnect (hdbc);
+				if ( (ret!=OdbcReturn.Success) && (ret!=OdbcReturn.SuccessWithInfo)) 
+					throw new OdbcException (new OdbcError ("SQLConnect", OdbcHandleType.Dbc,hdbc));
+
+				// free handles
+				if (hdbc != IntPtr.Zero) {
+					ret = libodbc.SQLFreeHandle ( (ushort) OdbcHandleType.Dbc, hdbc);	
+					if ( (ret!=OdbcReturn.Success) && (ret!=OdbcReturn.SuccessWithInfo)) 
+						throw new OdbcException (new OdbcError ("SQLConnect", OdbcHandleType.Dbc,hdbc));
+				}
 				hdbc = IntPtr.Zero;
-				transaction=null;
+
+				if (henv != IntPtr.Zero) {
+					ret = libodbc.SQLFreeHandle ( (ushort) OdbcHandleType.Env, henv);	
+					if ( (ret!=OdbcReturn.Success) && (ret!=OdbcReturn.SuccessWithInfo)) 
+						throw new OdbcException (new OdbcError ("SQLConnect", OdbcHandleType.Dbc,hdbc));
+				}
+				henv = IntPtr.Zero;
+
+				transaction = null;
 			}
 			else
-				throw new InvalidOperationException();
+				throw new InvalidOperationException ();
 		}
 
 		public OdbcCommand CreateCommand ()
@@ -220,11 +228,22 @@
 		{
 			if (State == ConnectionState.Open)
 				throw new InvalidOperationException ();
-						
-			// allocate connection handle
-			OdbcReturn ret=libodbc.SQLAllocHandle(OdbcHandleType.Dbc, henv, ref hdbc);
+
+			OdbcReturn ret = OdbcReturn.Error;
+		
+			// allocate Environment handle	
+			ret = libodbc.SQLAllocHandle (OdbcHandleType.Env, IntPtr.Zero, ref henv);
+			if ( (ret!=OdbcReturn.Success) && (ret!=OdbcReturn.SuccessWithInfo)) 
+				throw new OdbcException (new OdbcError ("SQLAllocHandle"));
+		
+			ret=libodbc.SQLSetEnvAttr (henv, OdbcEnv.OdbcVersion, (IntPtr) libodbc.SQL_OV_ODBC3 , 0); 
 			if ((ret!=OdbcReturn.Success) && (ret!=OdbcReturn.SuccessWithInfo)) 
-				throw new OdbcException(new OdbcError("SQLAllocHandle",OdbcHandleType.Env,henv));
+				throw new OdbcException (new OdbcError ("SQLSetEnvAttr", OdbcHandleType.Env,henv));
+		
+			// allocate connection handle
+			ret=libodbc.SQLAllocHandle (OdbcHandleType.Dbc, henv, ref hdbc);
+			if ( (ret!=OdbcReturn.Success) && (ret!=OdbcReturn.SuccessWithInfo)) 
+				throw new OdbcException (new OdbcError ("SQLAllocHandle",OdbcHandleType.Env,henv));
 			
 			// DSN connection
 			if (connectionString.ToLower().IndexOf("dsn=")>=0)
Index: libodbc.cs
===================================================================
RCS file: /cvs/public/mcs/class/System.Data/System.Data.Odbc/libodbc.cs,v
retrieving revision 1.8
diff -u -r1.8 libodbc.cs
--- libodbc.cs	16 Jun 2004 06:23:05 -0000	1.8
+++ libodbc.cs	18 Jun 2004 03:47:20 -0000
@@ -76,6 +76,9 @@
 	internal class libodbc
 	{
                 #region global constants
+		internal static int		SQL_OV_ODBC2		= 2;
+		internal static int		SQL_OV_ODBC3		= 3;
+
                 internal static string          SQLSTATE_RIGHT_TRUNC    = "01004";
                 internal static char            C_NULL                  = '\0';
                 #endregion
