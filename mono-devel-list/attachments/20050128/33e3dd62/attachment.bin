Index: metadata/domain.c
===================================================================
--- metadata/domain.c	(revision 39700)
+++ metadata/domain.c	(working copy)
@@ -65,12 +65,6 @@
 
 static MonoDomain *mono_root_domain = NULL;
 
-/* RuntimeInfo: Contains information about versions supported by this runtime */
-typedef struct  {
-	const char* runtime_version;
-	const char* framework_version;
-} RuntimeInfo;
-
 /* AppConfigInfo: Information about runtime versions supported by an 
  * aplication.
  */
@@ -81,21 +75,23 @@
 	int startup_count;
 } AppConfigInfo;
 
-static RuntimeInfo *current_runtime = NULL;
+static MonoRuntimeInfo *current_runtime = NULL;
 
 /* This is the list of runtime versions supported by this JIT.
  */
-static RuntimeInfo supported_runtimes[] = {
-	{"v1.0.3705", "1.0"}, {"v1.1.4322", "1.0"}, {"v2.0.40607","2.0"} 
+static MonoRuntimeInfo supported_runtimes[] = {
+	{"v1.0.3705", "1.0", 1,0,5000,0},
+	{"v1.1.4322", "1.0", 1,0,5000,0},
+	{"v2.0.40607","2.0", 2,0,3600,0} 
 };
 
 /* The stable runtime version */
 #define DEFAULT_RUNTIME_VERSION "v1.1.4322"
 
-static RuntimeInfo*	
+static MonoRuntimeInfo*	
 get_runtime_from_exe (const char *exe_file);
 
-static RuntimeInfo*
+static MonoRuntimeInfo*
 get_runtime_by_version (const char *version);
 
 guint32
@@ -337,11 +333,16 @@
 
 	/* find the corlib */
 	corlib_aname.name = "mscorlib";
+	corlib_aname.major = current_runtime->assembly_major;
+	corlib_aname.minor = current_runtime->assembly_minor;
+	corlib_aname.build = current_runtime->assembly_build;
+	corlib_aname.revision = current_runtime->assembly_revision;
+	
 	ass = mono_assembly_load (&corlib_aname, NULL, &status);
 	if ((status != MONO_IMAGE_OK) || (ass == NULL)) {
 		switch (status){
 		case MONO_IMAGE_ERROR_ERRNO: {
-			char *corlib_file = g_build_filename (mono_assembly_getrootdir (), "mono", mono_get_framework_version (), "mscorlib.dll", NULL);
+			char *corlib_file = g_build_filename (mono_assembly_getrootdir (), "mono", current_runtime->framework_version, "mscorlib.dll", NULL);
 			g_print ("The assembly mscorlib.dll was not found or could not be loaded.\n");
 			g_print ("It should have been installed in the `%s' directory.\n", corlib_file);
 			g_free (corlib_file);
@@ -1126,7 +1127,7 @@
 }
 
 
-static RuntimeInfo*
+static MonoRuntimeInfo*
 get_runtime_by_version (const char *version)
 {
 	int n;
@@ -1139,13 +1140,13 @@
 	return NULL;
 }
 
-static RuntimeInfo*	
+static MonoRuntimeInfo*	
 get_runtime_from_exe (const char *exe_file)
 {
 	AppConfigInfo* app_config;
 	char *version;
 	char *config_name;
-	RuntimeInfo* runtime = NULL;
+	MonoRuntimeInfo* runtime = NULL;
 	MonoImage *image = NULL;
 	
 	config_name = g_strconcat (exe_file, ".config", NULL);
@@ -1191,22 +1192,21 @@
 	return runtime;
 }
 
-const char*
-mono_get_framework_version (void)
+/**
+ * mono_get_framework_assembly_version:
+ *
+ * Returns: the version of the current runtime instance.
+ */
+MonoRuntimeInfo*
+mono_get_runtime_info (void)
 {
-	return current_runtime->framework_version;
+	return current_runtime;
 }
 
-const char*
-mono_get_runtime_version (void)
-{
-	return current_runtime->runtime_version;
-}
-
 gchar *
 mono_debugger_check_runtime_version (const char *filename)
 {
-	RuntimeInfo *rinfo;
+	MonoRuntimeInfo *rinfo;
 
 	rinfo = get_runtime_from_exe (filename);
 	if (!rinfo)
Index: metadata/assembly.c
===================================================================
--- metadata/assembly.c	(revision 39700)
+++ metadata/assembly.c	(working copy)
@@ -43,6 +43,55 @@
 /* Contains the list of directories that point to auxiliary GACs */
 static char **extra_gac_paths = NULL;
 
+static const char *framework_assemblies [] = {
+	"Accessibility",
+	"Commons.Xml.Relaxng",
+	"I18N.CJK",
+	"I18N",
+	"I18N.MidEast",
+	"I18N.Other",
+	"I18N.Rare",
+	"I18N.West",
+	"Mono.Cairo",
+	"Mono.CompilerServices.SymbolWriter",
+	"Mono.Data",
+	"Mono.Data.SqliteClient",
+	"Mono.Data.SybaseClient",
+	"Mono.Data.TdsClient",
+	"Mono.Data.Tds",
+	"Mono.GetOptions",
+	"Mono.Http",
+	"Mono.Posix",
+	"Mono.Security",
+	"Mono.Security.Win32",
+	"mscorlib",
+	"Mono.Xml.Ext",
+	"Novell.Directory.Ldap",
+	"Npgsql",
+	"PEAPI",
+	"System",
+	"System.Configuration.Install",
+	"System.Data",
+	"System.Data.OracleClient",
+	"System.Data.SqlXml",
+	"System.Design",
+	"System.DirectoryServices",
+	"System.Drawing",
+	"System.Drawing.Design",
+	"System.EnterpriseServices",
+	"System.Management",
+	"System.Messaging",
+	"System.Runtime.Remoting",
+	"System.Runtime.Serialization.Formatters.Soap",
+	"System.Security",
+	"System.ServiceProcess",
+	"System.Web",
+	"System.Web.Mobile",
+	"System.Web.Services",
+	"System.Windows.Forms",
+	"System.Xml"
+};
+	
 /*
  * keeps track of loaded assemblies
  */
@@ -314,6 +363,42 @@
 	LeaveCriticalSection (&assemblies_mutex);
 }
 
+static MonoAssemblyName *
+mono_assembly_remap_version (MonoAssemblyName *aname, MonoAssemblyName *dest_aname)
+{
+	MonoRuntimeInfo *current_runtime;
+	int n;
+
+	if (aname->name == NULL) return aname;
+	current_runtime = mono_get_runtime_info ();
+
+	if (aname->major != current_runtime->assembly_major ||
+		aname->minor != current_runtime->assembly_minor ||
+		aname->build != current_runtime->assembly_build ||
+		aname->revision != current_runtime->assembly_revision) {
+
+		for (n = 0; n < G_N_ELEMENTS (framework_assemblies); n++) {
+			if (strcmp (framework_assemblies[n], aname->name) == 0) {
+			
+				int warn = (aname->major | aname->minor | aname->build | aname->revision) != 0;
+				if (warn && g_getenv ("MONO_SILENT_WARNING") == NULL)
+					g_print ("Compat mode: the request to load %s v%d.%d.%d.%d was remapped to v%d.%d.%d.%d (http://www.go-mono.com/remap.html)\n",
+								aname->name,
+								aname->major, aname->minor, aname->build, aname->revision,
+								current_runtime->assembly_major, current_runtime->assembly_minor, current_runtime->assembly_build, current_runtime->assembly_revision
+								);
+				memcpy (dest_aname, aname, sizeof(MonoAssemblyName));
+				dest_aname->major = current_runtime->assembly_major;
+				dest_aname->minor = current_runtime->assembly_minor;
+				dest_aname->build = current_runtime->assembly_build;
+				dest_aname->revision = current_runtime->assembly_revision;
+				return dest_aname;
+			}
+		}
+	}
+	return aname;
+}
+
 void
 mono_assembly_load_reference (MonoImage *image, int index)
 {
@@ -355,47 +440,29 @@
 		g_free (token);
 	} else {
 		memset (aname.public_key_token, 0, MONO_PUBLIC_KEY_TOKEN_LENGTH);
-	} 
+	}
 
 	reference = mono_assembly_load (&aname, image->assembly->basedir, &status);
 
 	if (reference == NULL){
-		/*
-		** Temporary work around: any System.* which are 3300 build, will get
-		** remapped, this is to keep old applications running that might have
-		** been linked against our 5000 API, before we were strongnamed, and
-		** hence were labeled as 3300 builds by reflection.c
-		*/
-		if (aname.build == 3300 && strncmp (aname.name, "System", 6) == 0){
-			aname.build = 5000;
-				
-			reference = mono_assembly_load (&aname, image->assembly->basedir, &status);
-		}
-		if (reference != NULL){
-			if (g_getenv ("MONO_SILENT_WARNING") == NULL)
-				g_printerr ("Compat mode: the request from %s to load %s was remapped (http://www.go-mono.com/remap.html)\n",
-							image->name, aname.name);
-			
-		} else {
-			char *extra_msg = g_strdup ("");
+		char *extra_msg = g_strdup ("");
 
-			if (status == MONO_IMAGE_ERROR_ERRNO) {
-				extra_msg = g_strdup_printf ("System error: %s\n", strerror (errno));
-			} else if (status == MONO_IMAGE_MISSING_ASSEMBLYREF) {
-				extra_msg = g_strdup ("Cannot find an assembly referenced from this one.\n");
-			} else if (status == MONO_IMAGE_IMAGE_INVALID) {
-				extra_msg = g_strdup ("The file exists but is not a valid assembly.\n");
-			}
-			
-			g_warning ("Could not find assembly %s, references from %s (assemblyref_index=%d)\n"
-					   "     Major/Minor: %d,%d\n"
-					   "     Build:       %d,%d\n"
-					   "     Token:       %s\n%s",
-					   aname.name, image->name, index,
-					   aname.major, aname.minor, aname.build, aname.revision,
-					   aname.public_key_token, extra_msg);
-			g_free (extra_msg);
+		if (status == MONO_IMAGE_ERROR_ERRNO) {
+			extra_msg = g_strdup_printf ("System error: %s\n", strerror (errno));
+		} else if (status == MONO_IMAGE_MISSING_ASSEMBLYREF) {
+			extra_msg = g_strdup ("Cannot find an assembly referenced from this one.\n");
+		} else if (status == MONO_IMAGE_IMAGE_INVALID) {
+			extra_msg = g_strdup ("The file exists but is not a valid assembly.\n");
 		}
+		
+		g_warning ("Could not find assembly %s, references from %s (assemblyref_index=%d)\n"
+				   "     Major/Minor: %d,%d\n"
+				   "     Build:       %d,%d\n"
+				   "     Token:       %s\n%s",
+				   aname.name, image->name, index,
+				   aname.major, aname.minor, aname.build, aname.revision,
+				   aname.public_key_token, extra_msg);
+		g_free (extra_msg);
 	}
 
 	EnterCriticalSection (&assemblies_mutex);
@@ -983,7 +1050,10 @@
 {
 	MonoAssembly *result;
 	char *fullpath, *filename;
+	MonoAssemblyName maped_aname;
 
+	aname = mono_assembly_remap_version (aname, &maped_aname);
+
 	result = mono_assembly_loaded (aname);
 	if (result)
 		return result;
@@ -1015,7 +1085,7 @@
 	
 		/* Load corlib from mono/<version> */
 		
-		corlib_file = g_build_filename ("mono", mono_get_framework_version (), "mscorlib.dll", NULL);
+		corlib_file = g_build_filename ("mono", mono_get_runtime_info ()->framework_version, "mscorlib.dll", NULL);
 		if (assemblies_path) {
 			corlib = load_in_path (corlib_file, (const char**)assemblies_path, status);
 			if (corlib) {
@@ -1062,7 +1132,10 @@
 mono_assembly_loaded (MonoAssemblyName *aname)
 {
 	MonoAssembly *res;
+	MonoAssemblyName maped_aname;
 
+	aname = mono_assembly_remap_version (aname, &maped_aname);
+
 	EnterCriticalSection (&assemblies_mutex);
 	res = search_loaded (aname);
 	LeaveCriticalSection (&assemblies_mutex);
Index: metadata/ChangeLog
===================================================================
--- metadata/ChangeLog	(revision 39700)
+++ metadata/ChangeLog	(working copy)
@@ -1,4 +1,16 @@
+2005-01-28  Lluis Sanchez Gual  <lluis@novell.com>
 
+	* domain.c, domain-internals.h: Moved RuntimeInfo to domain-internals.h,
+	and renamed to MonoRuntimeInfo. Added fields to store the expected
+	framework assembly version. Changed mono_get_framework_version and
+	mono_get_runtime_version for a single mono_get_runtime_info method.
+	
+	* assembly.c: Added method to remap system assembly versions to the
+	current executing runtime version. Removed old mapping code.
+	Remap assembly versions in mono_assembly_load and mono_assembly_loaded.
+	
+	* icall.c, reflection.c: Track api changes.
+
 Wed Jan 26 22:20:46 CET 2005 Paolo Molaro <lupus@ximian.com>
 
 	* gc.c: rework the gc handles code to reuse handles
Index: metadata/domain-internals.h
===================================================================
--- metadata/domain-internals.h	(revision 39700)
+++ metadata/domain-internals.h	(working copy)
@@ -130,6 +130,13 @@
 	GHashTable         *finalizable_objects_hash;
 };
 
+/* MonoRuntimeInfo: Contains information about versions supported by this runtime */
+typedef struct  {
+	const char* runtime_version;
+	const char* framework_version;
+	guint16 assembly_major, assembly_minor, assembly_build, assembly_revision;
+} MonoRuntimeInfo;
+
 #define mono_domain_lock(domain)   EnterCriticalSection(&(domain)->lock)
 #define mono_domain_unlock(domain) LeaveCriticalSection(&(domain)->lock)
 
@@ -223,11 +230,7 @@
 MonoString *
 ves_icall_System_AppDomain_InternalGetProcessGuid (MonoString* newguid);
 
-const char*
-mono_get_framework_version (void);
+MonoRuntimeInfo*
+mono_get_runtime_info (void);
 
-const char*
-mono_get_runtime_version (void);
-
-
 #endif /* __MONO_METADATA_DOMAIN_INTERNALS_H__ */
Index: metadata/icall.c
===================================================================
--- metadata/icall.c	(revision 39700)
+++ metadata/icall.c	(working copy)
@@ -5323,7 +5323,7 @@
 
 	MONO_ARCH_SAVE_REGS;
 
-	path = g_build_path (G_DIR_SEPARATOR_S, mono_get_config_dir (), "mono", mono_get_framework_version (), "machine.config", NULL);
+	path = g_build_path (G_DIR_SEPARATOR_S, mono_get_config_dir (), "mono", mono_get_runtime_info ()->framework_version, "machine.config", NULL);
 
 #if defined (PLATFORM_WIN32)
 	/* Avoid mixing '/' and '\\' */
Index: metadata/reflection.c
===================================================================
--- metadata/reflection.c	(revision 39700)
+++ metadata/reflection.c	(working copy)
@@ -4196,7 +4196,7 @@
 	MonoDynamicImage *image;
 	int i;
 
-	const char *version = mono_get_runtime_version ();
+	const char *version = mono_get_runtime_info ()->runtime_version;
 
 #if HAVE_BOEHM_GC
 	image = GC_MALLOC (sizeof (MonoDynamicImage));
