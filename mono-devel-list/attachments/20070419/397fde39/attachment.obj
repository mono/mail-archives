Index: System.Web.Services.Protocols/WebServiceHelper.cs
===================================================================
--- System.Web.Services.Protocols/WebServiceHelper.cs	(revision 75954)
+++ System.Web.Services.Protocols/WebServiceHelper.cs	(working copy)
@@ -82,7 +82,7 @@
 			content_type = content_type.Trim ();
 			for (start = idx + 1; idx != -1;)
 			{
-				idx = cts.IndexOf (";", start);
+				idx = cts.IndexOf (';', start);
 				string body;
 				if (idx == -1)
 					body = cts.Substring (start);
@@ -92,7 +92,7 @@
 					start = idx + 1;
 				}
 				body = body.Trim ();
-				if (body.StartsWith ("charset="))
+				if (String.CompareOrdinal (body, 0, "charset=", 0, 8) == 0)
 				{
 					encoding = body.Substring (8);
 					encoding = encoding.TrimStart (trimChars).TrimEnd (trimChars);
@@ -102,6 +102,36 @@
 			return Encoding.GetEncoding (encoding);
 		}
 
+		public static string GetContextAction (string cts) {
+			if (cts == null || cts.Length == 0)
+				return null;
+
+			int start = 0;
+			int idx = cts.IndexOf (';');
+			for (start = idx + 1; idx != -1;)
+			{
+				idx = cts.IndexOf (';', start);
+				string body;
+				if (idx == -1)
+					body = cts.Substring (start);
+				else 
+				{
+					body = cts.Substring (start, idx - start);
+					start = idx + 1;
+				}
+				body = body.Trim ();
+				string actionEq = "action=";
+				if (String.CompareOrdinal(body, 0, actionEq, 0, actionEq.Length) == 0)
+				{
+					string action = body.Substring (actionEq.Length);
+					return action.Trim (trimChars);
+				}
+			}
+
+
+			return null;
+		}
+
 		public static void WriteSoapMessage (XmlTextWriter xtw, SoapMethodStubInfo method, SoapHeaderDirection dir, object bodyContent, SoapHeaderCollection headers, bool soap12)
 		{
 			SoapBindingUse methodUse = dir == SoapHeaderDirection.Fault ? SoapBindingUse.Literal : method.Use;
Index: System.Web.Services.Protocols/HttpSoapWebServiceHandler.cs
===================================================================
--- System.Web.Services.Protocols/HttpSoapWebServiceHandler.cs	(revision 75954)
+++ System.Web.Services.Protocols/HttpSoapWebServiceHandler.cs	(working copy)
@@ -144,13 +144,20 @@
 				// If the routing style is SoapAction, then we can get the method information now
 				// and set it to the SoapMessage
 
-				if (_typeStubInfo.RoutingStyle == SoapServiceRoutingStyle.SoapAction && !message.IsSoap12)
+				if (_typeStubInfo.RoutingStyle == SoapServiceRoutingStyle.SoapAction)
 				{
-					soapAction = request.Headers ["SOAPAction"];
-					if (soapAction == null) throw new SoapException ("Missing SOAPAction header", WebServiceHelper.ClientFaultCode (message.IsSoap12));
+					string headerName = message.IsSoap12 ? "action" : "SOAPAction";
+					soapAction = message.IsSoap12 ? WebServiceHelper.GetContextAction(request.ContentType) : request.Headers [headerName];
+					if (soapAction == null) {
+						if (!message.IsSoap12)
+							throw new SoapException ("Missing SOAPAction header", WebServiceHelper.ClientFaultCode (message.IsSoap12));
+					}
+					else
+					{
 					methodInfo = _typeStubInfo.GetMethodForSoapAction (soapAction);
-					if (methodInfo == null) throw new SoapException ("Server did not recognize the value of HTTP header SOAPAction: " + soapAction, WebServiceHelper.ClientFaultCode (message.IsSoap12));
+					if (methodInfo == null) throw new SoapException ("Server did not recognize the value of HTTP header " + headerName + ": " + soapAction, WebServiceHelper.ClientFaultCode (message.IsSoap12));
 					message.MethodStubInfo = methodInfo;
+					}
 				}
 
 				// Execute the high priority global extensions. Do not try to execute the medium and
@@ -164,7 +171,7 @@
 				// If the routing style is RequestElement, try to get the method name from the
 				// stream processed by the high priority extensions
 
-				if (_typeStubInfo.RoutingStyle == SoapServiceRoutingStyle.RequestElement || message.IsSoap12)
+				if (_typeStubInfo.RoutingStyle == SoapServiceRoutingStyle.RequestElement || (message.IsSoap12 && soapAction == null))
 				{
 					MemoryStream mstream;
 					byte[] buffer = null;
