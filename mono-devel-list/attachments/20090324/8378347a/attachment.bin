#include <glib.h>
#include <mono/jit/jit.h>
#include <mono/metadata/assembly.h>
#include <mono/metadata/debug-helpers.h>


void 
chen_go ()
{
	g_print ("Lets see how it goes \n");
}

int 
main (int argc, char *argv[])
{
	MonoDomain *domain;
	MonoAssembly *assembly;
	MonoImage *image;
	MonoMethod *method;
	MonoClass *mclass, *mclass1;
	MonoMethodDesc *desc;
	MonoObject *result, *this, *obool;
	void *args [1];
	gboolean val;
	

	domain = mono_jit_init ("/home/chen/practice/sample.dll");
	mono_thread_attach (domain);
	mono_config_parse (NULL);

	assembly = mono_domain_assembly_open (domain, "/home/chen/practice/sample.dll");
	if (!assembly) {
		g_print ("Opening assembly failed :( \n)");
		return 0;
	}
	mono_jit_exec (domain, assembly, argc -1, argv + 1);

/*	
	image = mono_assembly_get_image (assembly);
	desc = mono_method_desc_new ("test", FALSE);
	mclass = mono_class_from_name (image, "Myspace", "simple");
	mclass1 = mono_class_get_parent (mclass);
	if (mclass1)
	{
		g_print ("Got the parent class \n");
	} else {
		g_print ("No parent \n");
		return;
	}

	gpointer iter = NULL;

	while (method = mono_class_get_methods (mclass1, &iter)) {
		g_print ("\n Method name is : %s  \n", mono_method_get_name (method));
	}

	val = FALSE;
	args [0] = &val;

	method = mono_class_get_method_from_name (mclass1, "CallMe", -1);
	if (!method) {
		g_print ("Unable to get the method :( \n)");
		return 0;
	}
	this = mono_object_new (domain, mclass);
	mono_runtime_object_init (this);
	result = mono_runtime_invoke (method, this, NULL, NULL); */

	return 0;	
}
