using System;

public abstract class Bla {
    public int baseCount;

    public abstract void work<T> ();
    public abstract void ngWork ();
}

public class Ble : Bla {
    public int count;

    public override void work<T> () { ++count; }
    public override void ngWork () { ++count; }
}

public class Bli : Bla {
    public int count;

    public override void work<T> () { ++count; }
    public override void ngWork () { ++count; }
}

public class Blo : Bla {
    public int count;

    public override void work<T> () { ++count; }
    public override void ngWork () { ++count; }
}

public class Blu : Bla {
    public int count;

    public override void work<T> () { ++count; }
    public override void ngWork () { ++count; }
}

public class main {
    delegate void BenchDelegate (int iters);

    static Bla[] blas;

    static void benchNoCalls (int iters) {
	int i, j = 0, k = 0;

	for (i = 0; i < iters; ++i) {
	    Bla bla = blas [j % 4];

	    switch (k % 3) {
		case 0: ++bla.baseCount; break;
		case 1: ++bla.baseCount; break;
		case 2: ++bla.baseCount; break;
	    }

	    j += 1;
	    k += 1;
	}
    }

    static void benchNonGenericCalls (int iters) {
	int i, j = 0, k = 0;

	for (i = 0; i < iters; ++i) {
	    Bla bla = blas [j % 4];

	    switch (k % 3) {
		case 0: bla.ngWork (); break;
		case 1: bla.ngWork (); break;
		case 2: bla.ngWork (); break;
	    }

	    j += 1;
	    k += 1;
	}
    }

    static void benchGenericCalls (int iters) {
	int i, j = 0, k = 0;

	for (i = 0; i < iters; ++i) {
	    Bla bla = blas [j % 4];

	    switch (k % 3) {
		case 0: bla.work<int> (); break;
		case 1: bla.work<object> (); break;
		case 2: bla.work<string> (); break;
	    }

	    j += 1;
	    k += 1;
	}
    }

    static double timeBench (BenchDelegate bench) {
	bench (1000);

	DateTime startTime = DateTime.Now;

	bench (100000000);

	DateTime stopTime = DateTime.Now;

	TimeSpan duration = stopTime - startTime;

	return duration.TotalMilliseconds * 1000.0 * 1000.0 / 100000000.0;
    }

    public static int Main (string[] argv) {
	Ble ble = new Ble ();
	Bli bli = new Bli ();
	Blo blo = new Blo ();
	Blu blu = new Blu ();

	blas = new Bla [] { ble, bli, blo, blu };

	double noCallsTime = timeBench (new BenchDelegate (benchNoCalls));
	double nonGenericCallsTime = timeBench (new BenchDelegate (benchNonGenericCalls));
	double genericCallsTime = timeBench (new BenchDelegate (benchGenericCalls));

	Console.WriteLine ("no calls: " + noCallsTime);
	Console.WriteLine ("non-generic calls: " + nonGenericCallsTime);
	Console.WriteLine ("generic calls: " + genericCallsTime);

	Console.WriteLine ("non-generic call cost: " + (nonGenericCallsTime - noCallsTime));
	Console.WriteLine ("generic call cost: " + (genericCallsTime - noCallsTime));

	Console.WriteLine ("ble:" + ble.count + "  bli:" + bli.count +
			   "  blo:" + blo.count + "  blu:" + blu.count);

	return 0;
    }
}