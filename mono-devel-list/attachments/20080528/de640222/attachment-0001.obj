Index: Mono.Globalization.Unicode/SimpleCollator.cs
===================================================================
--- Mono.Globalization.Unicode/SimpleCollator.cs	(revision 104012)
+++ Mono.Globalization.Unicode/SimpleCollator.cs	(working copy)
@@ -691,22 +691,6 @@
 			return Compare (s1, 0, s1.Length, s2, 0, s2.Length, options);
 		}
 
-		private int CompareOrdinal (string s1, int idx1, int len1,
-			string s2, int idx2, int len2)
-		{
-			int min = len1 < len2 ? len1 : len2;
-			int end1 = idx1 + min;
-			int end2 = idx2 + min;
-			if (idx1 < 0 || idx2 < 0 || end1 > s1.Length || end2 > s2.Length)
-				throw new SystemException (String.Format ("CompareInfo Internal Error: Should not happen. {0} {1} {2} {3} {4} {5}", idx1, idx2, len1, len2, s1.Length, s2.Length));
-			for (int i1 = idx1, i2 = idx2;
-				i1 < end1 && i2 < end2; i1++, i2++)
-				if (s1 [i1] != s2 [i2])
-					return s1 [i1] - s2 [i2];
-			return len1 == len2 ? 0 :
-				len1 == min ? - 1 : 1;
-		}
-
 		// mostly equivalent to CompareOrdinal, but the return value is
 		// not based on codepoints.
 		private int CompareQuick (string s1, int idx1, int len1,
@@ -741,23 +725,6 @@
 				len1 == min ? - 1 : 1;
 		}
 
-		private int CompareOrdinalIgnoreCase (string s1, int idx1, int len1,
-			string s2, int idx2, int len2)
-		{
-			int min = len1 < len2 ? len1 : len2;
-			int end1 = idx1 + min;
-			int end2 = idx2 + min;
-			if (idx1 < 0 || idx2 < 0 || end1 > s1.Length || end2 > s2.Length)
-				throw new SystemException (String.Format ("CompareInfo Internal Error: Should not happen. {0} {1} {2} {3} {4} {5}", idx1, idx2, len1, len2, s1.Length, s2.Length));
-			TextInfo ti = invariant.textInfo;
-			for (int i1 = idx1, i2 = idx2;
-				i1 < end1 && i2 < end2; i1++, i2++)
-				if (ti.ToLower (s1 [i1]) != ti.ToLower (s2 [i2]))
-					return ti.ToLower (s1 [i1]) - ti.ToLower (s2 [i2]);
-			return len1 == len2 ? 0 :
-				len1 == min ? - 1 : 1;
-		}
-
 		public unsafe int Compare (string s1, int idx1, int len1,
 			string s2, int idx2, int len2, CompareOptions options)
 		{
@@ -765,11 +732,13 @@
 			if (idx1 == idx2 && len1 == len2 &&
 				Object.ReferenceEquals (s1, s2))
 				return 0;
-			if (options == CompareOptions.Ordinal)
-				return CompareOrdinal (s1, idx1, len1, s2, idx2, len2);
+			if (options == CompareOptions.Ordinal) {
+				return String.CompareOrdinalCaseInsensitive (s1, idx1, s2, idx2, System.Math.Min (len1, len2));
+			}
 #if NET_2_0
-			if (options == CompareOptions.OrdinalIgnoreCase)
-				return CompareOrdinalIgnoreCase (s1, idx1, len1, s2, idx2, len2);
+			if (options == CompareOptions.OrdinalIgnoreCase) {
+				return String.CompareOrdinal (s1, idx1, s2, idx2, System.Math.Min (len1, len2));
+			}
 #endif
 
 #if false // stable easy version, depends on GetSortKey().
@@ -1463,10 +1432,10 @@
 		public unsafe int IndexOf (string s, string target, int start, int length, CompareOptions opt)
 		{
 			if (opt == CompareOptions.Ordinal)
-				return IndexOfOrdinal (s, target, start, length);
+				return s.IndexOfOrdinalUnchecked (target, start, length);
 #if NET_2_0
 			if (opt == CompareOptions.OrdinalIgnoreCase)
-				return IndexOfOrdinalIgnoreCase (s, target, start, length);
+				return s.IndexOfOrdinalIgnoreCaseUnchecked (target, start, length);
 #endif
 			if (opt == CompareOptions.None) {
 				bool testWasUnable;
@@ -1491,55 +1460,6 @@
 				targetSortKey, ref ctx);
 		}
 
-		// note that it wouldn't be used since ordinal IndexOf()
-		// should be directed to icall.
-		int IndexOfOrdinal (string s, string target, int start, int length)
-		{
-			if (target.Length == 0)
-				return 0;
-			else if (target.Length > length)
-				return -1;
-
-			int end = start + length - target.Length + 1;
-			for (int i = start; i < end; i++) {
-				bool no = false;
-				for (int j = 0; j < target.Length; j++) {
-					if (s [i + j] != target [j]) {
-						no = true;
-						break;
-					}
-				}
-				if (no)
-					continue;
-				return i;
-			}
-			return -1;
-		}
-
-		int IndexOfOrdinalIgnoreCase (string s, string target, int start, int length)
-		{
-			if (target.Length == 0)
-				return 0;
-			else if (target.Length > length)
-				return -1;
-
-			int end = start + length - target.Length + 1;
-			for (int i = start; i < end; i++) {
-				bool no = false;
-				for (int j = 0; j < target.Length; j++) {
-					// I think almost all text has more lower letters than upper ones. Thus with this invariant comparison ToLower() should be faster since it costs less operations.
-					if (textInfo.ToLower (s [i + j]) != textInfo.ToLower (target [j])) {
-						no = true;
-						break;
-					}
-				}
-				if (no)
-					continue;
-				return i;
-			}
-			return -1;
-		}
-
 		// char
 
 		public int IndexOf (string s, char target, CompareOptions opt)
@@ -1550,10 +1470,10 @@
 		public unsafe int IndexOf (string s, char target, int start, int length, CompareOptions opt)
 		{
 			if (opt == CompareOptions.Ordinal)
-				return IndexOfOrdinal (s, target, start, length);
+				return s.IndexOfUnchecked (target, start, length);
 #if NET_2_0
 			if (opt == CompareOptions.OrdinalIgnoreCase)
-				return IndexOfOrdinalIgnoreCase (s, target, start, length);
+				return s.IndexOfOrdinalIgnoreCase (target, start, length);
 #endif
 			byte* alwaysMatchFlags = stackalloc byte [16];
 			byte* neverMatchFlags = stackalloc byte [16];
@@ -1592,27 +1512,6 @@
 			}
 		}
 
-		// note that it wouldn't be used since ordinal IndexOf()
-		// should be directed to icall.
-		int IndexOfOrdinal (string s, char target, int start, int length)
-		{
-			int end = start + length;
-			for (int i = start; i < end; i++)
-				if (s [i] == target)
-					return i;
-			return -1;
-		}
-
-		int IndexOfOrdinalIgnoreCase (string s, char target, int start, int length)
-		{
-			int end = start + length;
-			target = textInfo.ToLower (target);
-			for (int i = start; i < end; i++)
-				if (textInfo.ToLower (s [i]) == target)
-					return i;
-			return -1;
-		}
-
 		// Searches target byte[] keydata
 		unsafe int IndexOfSortKey (string s, int start, int length, byte* sortkey, char target, int ti, bool noLv4, ref Context ctx)
 		{
@@ -1707,10 +1606,10 @@
 		public unsafe int LastIndexOf (string s, string target, int start, int length, CompareOptions opt)
 		{
 			if (opt == CompareOptions.Ordinal)
-				return LastIndexOfOrdinal (s, target, start, length);
+				return s.LastIndexOfOrdinalUnchecked (target, start, length);
 #if NET_2_0
 			if (opt == CompareOptions.OrdinalIgnoreCase)
-				return LastIndexOfOrdinalIgnoreCase (s, target, start, length);
+				return s.LastIndexOfOrdinalIgnoreCaseUnchecked (target, start, length);
 #endif
 			byte* alwaysMatchFlags = stackalloc byte [16];
 			byte* neverMatchFlags = stackalloc byte [16];
@@ -1728,62 +1627,6 @@
 				targetSortKey, ref ctx);
 		}
 
-		int LastIndexOfOrdinal (string s, string target, int start, int length)
-		{
-			if (target.Length == 0)
-				return 0;
-			if (s.Length < target.Length || target.Length > length)
-				return -1;
-			int end = start - length + target.Length -1;
-			char tail = target [target.Length - 1];
-			for (int i = start; i > end;) {
-				if (s [i] != tail) {
-					i--;
-					continue;
-				}
-				int x = i - target.Length + 1;
-				i--;
-				bool mismatch = false;
-				for (int j = target.Length - 2; j >= 0; j--)
-					if (s [x + j] != target [j]) {
-						mismatch = true;
-						break;
-					}
-				if (mismatch)
-					continue;
-				return x;
-			}
-			return -1;
-		}
-
-		int LastIndexOfOrdinalIgnoreCase (string s, string target, int start, int length)
-		{
-			if (target.Length == 0)
-				return 0;
-			if (s.Length < length || target.Length > length)
-				return -1;
-			int end = start - length + target.Length - 1;
-			char tail = textInfo.ToLower (target [target.Length - 1]);
-			for (int i = start; i > end;) {
-				if (textInfo.ToLower (s [i]) != tail) {
-					i--;
-					continue;
-				}
-				int x = i - target.Length + 1;
-				i--;
-				bool mismatch = false;
-				for (int j = target.Length - 2; j >= 0; j--)
-					if (textInfo.ToLower (s [x + j]) != textInfo.ToLower (target [j])) {
-						mismatch = true;
-						break;
-					}
-				if (mismatch)
-					continue;
-				return x;
-			}
-			return -1;
-		}
-
 		// char
 
 		public int LastIndexOf (string s, char target, CompareOptions opt)
@@ -1794,10 +1637,10 @@
 		public unsafe int LastIndexOf (string s, char target, int start, int length, CompareOptions opt)
 		{
 			if (opt == CompareOptions.Ordinal)
-				return LastIndexOfOrdinal (s, target, start, length);
+				return s.LastIndexOfUnchecked (target, start, length);
 #if NET_2_0
 			if (opt == CompareOptions.OrdinalIgnoreCase)
-				return LastIndexOfOrdinalIgnoreCase (s, target, start, length);
+				return s.LastIndexOfOrdinalIgnoreCase (target, start, length);
 #endif
 			byte* alwaysMatchFlags = stackalloc byte [16];
 			byte* neverMatchFlags = stackalloc byte [16];
@@ -1841,29 +1684,6 @@
 			}
 		}
 
-		int LastIndexOfOrdinal (string s, char target, int start, int length)
-		{
-			if (s.Length == 0)
-				return -1;
-			int end = start - length;
-			for (int i = start; i > end; i--)
-				if (s [i] == target)
-					return i;
-			return -1;
-		}
-
-		int LastIndexOfOrdinalIgnoreCase (string s, char target, int start, int length)
-		{
-			if (s.Length == 0)
-				return -1;
-			int end = start - length;
-			char c = textInfo.ToUpper (target);
-			for (int i = start; i > end; i--)
-				if (textInfo.ToUpper (s [i]) == c)
-					return i;
-			return -1;
-		}
-
 		// Searches target byte[] keydata
 		unsafe int LastIndexOfSortKey (string s, int start, int orgStart, int length, byte* sortkey, int ti, bool noLv4, ref Context ctx)
 		{
Index: System/String.cs
===================================================================
--- System/String.cs	(revision 104012)
+++ System/String.cs	(working copy)
@@ -773,7 +773,7 @@
 			if (this.length == 0)
 				return -1;
 
-			return InternalIndexOfAny (anyOf, 0, this.length);
+			return IndexOfAnyUnchecked (anyOf, 0, this.length);
 		}
 
 		public int IndexOfAny (char [] anyOf, int startIndex)
@@ -783,7 +783,7 @@
 			if (startIndex < 0 || startIndex > this.length)
 				throw new ArgumentOutOfRangeException ();
 
-			return InternalIndexOfAny (anyOf, startIndex, this.length - startIndex);
+			return IndexOfAnyUnchecked (anyOf, startIndex, this.length - startIndex);
 		}
 
 		public int IndexOfAny (char [] anyOf, int startIndex, int count)
@@ -792,20 +792,19 @@
 				throw new ArgumentNullException ();
 			if (startIndex < 0 || startIndex > this.length)
 				throw new ArgumentOutOfRangeException ();
-			// re-ordered to avoid possible integer overflow
 			if (count < 0 || startIndex > this.length - count)
 				throw new ArgumentOutOfRangeException ("count", "Count cannot be negative, and startIndex + count must be less than length of the string.");
 
-			return InternalIndexOfAny (anyOf, startIndex, count);
+			return IndexOfAnyUnchecked (anyOf, startIndex, count);
 		}
 
-		unsafe int InternalIndexOfAny (char[] anyOf, int startIndex, int count)
+		private unsafe int IndexOfAnyUnchecked (char[] anyOf, int startIndex, int count)
 		{
 			if (anyOf.Length == 0)
 				return -1;
 
 			if (anyOf.Length == 1)
-				return IndexOfImpl(anyOf[0], startIndex, count);
+				return IndexOfUnchecked (anyOf[0], startIndex, count);
 
 			fixed (char* any = anyOf) {
 				int highest = *any;
@@ -851,19 +850,19 @@
 
 
 #if NET_2_0
-		public int IndexOf (string value, StringComparison comparison)
+		public int IndexOf (string value, StringComparison comparisonType)
 		{
-			return IndexOf (value, 0, this.Length, comparison);
+			return IndexOf (value, 0, this.Length, comparisonType);
 		}
 
-		public int IndexOf (string value, int startIndex, StringComparison comparison)
+		public int IndexOf (string value, int startIndex, StringComparison comparisonType)
 		{
-			return IndexOf (value, startIndex, this.Length - startIndex, comparison);
+			return IndexOf (value, startIndex, this.Length - startIndex, comparisonType);
 		}
 
-		public int IndexOf (string value, int startIndex, int count, StringComparison comparison)
+		public int IndexOf (string value, int startIndex, int count, StringComparison comparisonType)
 		{
-			switch (comparison) {
+			switch (comparisonType) {
 			case StringComparison.CurrentCulture:
 				return CultureInfo.CurrentCulture.CompareInfo.IndexOf (this, value, startIndex, count, CompareOptions.None);
 			case StringComparison.CurrentCultureIgnoreCase:
@@ -873,28 +872,100 @@
 			case StringComparison.InvariantCultureIgnoreCase:
 				return CultureInfo.InvariantCulture.CompareInfo.IndexOf (this, value, startIndex, count, CompareOptions.IgnoreCase);
 			case StringComparison.Ordinal:
-				return CultureInfo.InvariantCulture.CompareInfo.IndexOf (this, value, startIndex, count, CompareOptions.Ordinal);
+				return IndexOfOrdinal (value, startIndex, count, CompareOptions.Ordinal);
 			case StringComparison.OrdinalIgnoreCase:
-				return CultureInfo.InvariantCulture.CompareInfo.IndexOf (this, value, startIndex, count, CompareOptions.OrdinalIgnoreCase);
+				return IndexOfOrdinal (value, startIndex, count, CompareOptions.OrdinalIgnoreCase);
+			default:
+				string msg = Locale.GetText ("Invalid value '{0}' for StringComparison", comparisonType);
+				throw new ArgumentException (msg, "comparisonType");
 			}
+		}
+#endif
 
-			string msg = Locale.GetText ("Invalid value '{0}' for StringComparison", comparison);
-			throw new ArgumentException  (msg, "comparisonType");
+		internal int IndexOfOrdinal (string value, int startIndex, int count, CompareOptions options)
+		{
+			if (value == null)
+				throw new ArgumentNullException ("value");
+			if (startIndex < 0)
+				throw new ArgumentOutOfRangeException ("startIndex");
+			if (count < 0 || (this.length - startIndex) < count)
+				throw new ArgumentOutOfRangeException ("count");
+
+			if (options == CompareOptions.Ordinal)
+				return IndexOfOrdinalUnchecked (value, startIndex, count);
+			return IndexOfOrdinalIgnoreCaseUnchecked (value, startIndex, count);
 		}
 
-		public int LastIndexOf (string value, StringComparison comparison)
+		internal unsafe int IndexOfOrdinalUnchecked (string value, int startIndex, int count)
 		{
-			return LastIndexOf (value, value.Length - 1, value.Length, comparison);
+			int valueLen = value.Length;
+			if (count < valueLen)
+				return -1;
+
+			if (valueLen <= 1) {
+				if (valueLen == 1)
+					return IndexOfUnchecked (value[0], startIndex, count);
+				return 0;
+			}
+
+			fixed (char* thisptr = this, valueptr = value) {
+				char* ap = thisptr + startIndex;
+				char* thisEnd = ap + count - valueLen + 1;
+				while (ap != thisEnd) {
+					if (*ap == *valueptr) {
+						for (int i = 1; i < valueLen; i++) {
+							if (ap[i] != valueptr[i])
+								goto NextVal;
+						}
+						return (int)(ap - thisptr);
+					}
+					NextVal:
+					ap++;
+				}
+			}
+			return -1;
 		}
 
-		public int LastIndexOf (string value, int startIndex, StringComparison comparison)
+		internal unsafe int IndexOfOrdinalIgnoreCaseUnchecked (string value, int startIndex, int count)
 		{
-			return LastIndexOf (value, startIndex, startIndex + 1, comparison);
+			int valueLen = value.Length;
+			if (count < valueLen)
+				return -1;
+
+			if (valueLen == 0)
+				return 0;
+
+			fixed (char* thisptr = this, valueptr = value) {
+				char* ap = thisptr + startIndex;
+				char* thisEnd = ap + count - valueLen + 1;
+				while (ap != thisEnd) {
+					for (int i = 0; i < valueLen; i++) {
+						if (Char.ToUpperInvariant (ap[i]) != Char.ToUpperInvariant (valueptr[i]))
+							goto NextVal;
+					}
+					return (int)(ap - thisptr);
+					NextVal:
+					ap++;
+				}
+			}
+			return -1;
 		}
 
-		public int LastIndexOf (string value, int startIndex, int count, StringComparison comparison)
+#if NET_2_0
+
+		public int LastIndexOf (string value, StringComparison comparisonType)
 		{
-			switch (comparison) {
+			return LastIndexOf (value, this.Length - 1, this.Length, comparisonType);
+		}
+
+		public int LastIndexOf (string value, int startIndex, StringComparison comparisonType)
+		{
+			return LastIndexOf (value, startIndex, startIndex + 1, comparisonType);
+		}
+
+		public int LastIndexOf (string value, int startIndex, int count, StringComparison comparisonType)
+		{
+			switch (comparisonType) {
 			case StringComparison.CurrentCulture:
 				return CultureInfo.CurrentCulture.CompareInfo.LastIndexOf (this, value, startIndex, count, CompareOptions.None);
 			case StringComparison.CurrentCultureIgnoreCase:
@@ -904,57 +975,123 @@
 			case StringComparison.InvariantCultureIgnoreCase:
 				return CultureInfo.InvariantCulture.CompareInfo.LastIndexOf (this, value, startIndex, count, CompareOptions.IgnoreCase);
 			case StringComparison.Ordinal:
-				return CultureInfo.InvariantCulture.CompareInfo.LastIndexOf (this, value, startIndex, count, CompareOptions.Ordinal);
+				return LastIndexOfOrdinal (value, startIndex, count, CompareOptions.Ordinal);
 			case StringComparison.OrdinalIgnoreCase:
-				return CultureInfo.InvariantCulture.CompareInfo.LastIndexOf (this, value, startIndex, count, CompareOptions.OrdinalIgnoreCase);
+				return LastIndexOfOrdinal (value, startIndex, count, CompareOptions.OrdinalIgnoreCase);
+			default:
+				string msg = Locale.GetText ("Invalid value '{0}' for StringComparison", comparisonType);
+				throw new ArgumentException (msg, "comparisonType");
 			}
-
-			string msg = Locale.GetText ("Invalid value '{0}' for StringComparison", comparison);
-			throw new ArgumentException  (msg, "comparison");
 		}
 #endif
 
-		public int IndexOf (char value)
+		internal int LastIndexOfOrdinal (string value, int startIndex, int count, CompareOptions options)
 		{
-			if (this.length == 0)
+			if (value == null)
+				throw new ArgumentNullException ("value");
+			if (startIndex < 0 || startIndex > length)
+				throw new ArgumentOutOfRangeException ("startIndex");
+			if (count < 0 || (startIndex < count - 1))
+				throw new ArgumentOutOfRangeException ("count");
+
+			if (options == CompareOptions.Ordinal)
+				return LastIndexOfOrdinalUnchecked (value, startIndex, count);
+			return LastIndexOfOrdinalIgnoreCaseUnchecked (value, startIndex, count);
+		}
+
+		internal unsafe int LastIndexOfOrdinalUnchecked (string value, int startIndex, int count)
+		{
+			int valueLen = value.Length;
+			if (count < valueLen)
 				return -1;
 
-			return IndexOfImpl (value, 0, this.length);
+			if (valueLen <= 1) {
+				if (valueLen == 1)
+					return LastIndexOfUnchecked (value[0], startIndex, count);
+				return 0;
+			}
+
+			fixed (char* thisptr = this, valueptr = value) {
+				char* ap = thisptr + startIndex - valueLen + 1;
+				char* thisEnd = ap - count + valueLen - 1;
+				while (ap != thisEnd) {
+					if (*ap == *valueptr) {
+						for (int i = 1; i < valueLen; i++) {
+							if (ap[i] != valueptr[i])
+								goto NextVal;
+						}
+						return (int)(ap - thisptr);
+					}
+					NextVal:
+					ap--;
+				}
+			}
+			return -1;
 		}
 
-		public int IndexOf (String value)
+		internal unsafe int LastIndexOfOrdinalIgnoreCaseUnchecked (string value, int startIndex, int count)
 		{
-			return IndexOf (value, 0, this.length);
+			int valueLen = value.Length;
+			if (count < valueLen)
+				return -1;
+
+			if (valueLen == 0)
+				return 0;
+
+			fixed (char* thisptr = this, valueptr = value) {
+				char* ap = thisptr + startIndex - valueLen + 1;
+				char* thisEnd = ap - count + valueLen - 1;
+				while (ap != thisEnd) {
+					for (int i = 0; i < valueLen; i++) {
+						if (Char.ToUpperInvariant (ap[i]) != Char.ToUpperInvariant (valueptr[i]))
+							goto NextVal;
+					}
+					return (int)(ap - thisptr);
+					NextVal:
+					ap--;
+				}
+			}
+			return -1;
 		}
 
-		public int IndexOf (char value, int startIndex)
+		// Following methods are culture-insensitive
+		public int IndexOf (char value)
 		{
-			return IndexOf (value, startIndex, this.length - startIndex);
+			if (this.length == 0)
+				return -1;
+
+			return IndexOfUnchecked (value, 0, this.length);
 		}
 
-		public int IndexOf (String value, int startIndex)
+		public int IndexOf (char value, int startIndex)
 		{
-			return IndexOf (value, startIndex, this.length - startIndex);
+			if (startIndex < 0)
+				throw new ArgumentOutOfRangeException ("startIndex", "< 0");
+			if (startIndex > this.length)
+				throw new ArgumentOutOfRangeException ("startIndex", "startIndex > this.length");
+
+			if ((startIndex == 0 && this.length == 0) || (startIndex == this.length))
+				return -1;
+
+			return IndexOfUnchecked (value, startIndex, this.length - startIndex);
 		}
 
-		/* This method is culture-insensitive */
 		public int IndexOf (char value, int startIndex, int count)
 		{
 			if (startIndex < 0 || startIndex > this.length)
 				throw new ArgumentOutOfRangeException ("startIndex", "Cannot be negative and must be< 0");
 			if (count < 0)
 				throw new ArgumentOutOfRangeException ("count", "< 0");
-			// re-ordered to avoid possible integer overflow
 			if (startIndex > this.length - count)
 				throw new ArgumentOutOfRangeException ("count", "startIndex + count > this.length");
 
 			if ((startIndex == 0 && this.length == 0) || (startIndex == this.length) || (count == 0))
 				return -1;
 
-			return IndexOfImpl (value, startIndex, count);
+			return IndexOfUnchecked (value, startIndex, count);
 		}
 
-		unsafe int IndexOfImpl (char value, int startIndex, int count)
+		internal unsafe int IndexOfUnchecked (char value, int startIndex, int count)
 		{
 			// It helps JIT compiler to optimize comparison
 			int value_32 = (int)value;
@@ -995,7 +1132,37 @@
 			}
 		}
 
-		/* But this one is culture-sensitive */
+		internal unsafe int IndexOfOrdinalIgnoreCase (char value, int startIndex, int count)
+		{
+			if (length == 0)
+				return -1;
+			int end = startIndex + count;
+			char c = Char.ToUpperInvariant (value);
+			fixed (char* s = &start_char) {
+				for (int i = startIndex; i < end; i++)
+					if (Char.ToUpperInvariant (s [i]) == c)
+						return i;
+			}
+			return -1;
+		}
+
+		// Following methods are culture-sensitive
+		public int IndexOf (String value)
+		{
+			if (value == null)
+				throw new ArgumentNullException ("value");
+			if (value.length == 0)
+				return 0;
+			if (this.length == 0)
+				return -1;
+			return CultureInfo.CurrentCulture.CompareInfo.IndexOf (this, value, 0, length);
+		}
+
+		public int IndexOf (String value, int startIndex)
+		{
+			return IndexOf (value, startIndex, this.length - startIndex);
+		}
+
 		public int IndexOf (String value, int startIndex, int count)
 		{
 			if (value == null)
@@ -1021,12 +1188,13 @@
 			return CultureInfo.CurrentCulture.CompareInfo.IndexOf (this, value, startIndex, count);
 		}
 
+		// Following methods are culture-insensitive
 		public int LastIndexOfAny (char [] anyOf)
 		{
 			if (anyOf == null)
 				throw new ArgumentNullException ();
 
-			return InternalLastIndexOfAny (anyOf, this.length - 1, this.length);
+			return LastIndexOfAnyUnchecked (anyOf, this.length - 1, this.length);
 		}
 
 		public int LastIndexOfAny (char [] anyOf, int startIndex)
@@ -1040,7 +1208,7 @@
 			if (this.length == 0)
 				return -1;
 
-			return InternalLastIndexOfAny (anyOf, startIndex, startIndex + 1);
+			return LastIndexOfAnyUnchecked (anyOf, startIndex, startIndex + 1);
 		}
 
 		public int LastIndexOfAny (char [] anyOf, int startIndex, int count)
@@ -1058,24 +1226,40 @@
 			if (this.length == 0)
 				return -1;
 
-			return InternalLastIndexOfAny (anyOf, startIndex, count);
+			return LastIndexOfAnyUnchecked (anyOf, startIndex, count);
 		}
 
-		public int LastIndexOf (char value)
+		private unsafe int LastIndexOfAnyUnchecked (char [] anyOf, int startIndex, int count)
 		{
-			if (this.length == 0)
+			if (anyOf.Length == 1)
+				return LastIndexOfUnchecked (anyOf[0], startIndex, count);
+
+			fixed (char* start = this, testStart = anyOf) {
+				char* ptr = start + startIndex;
+				char* ptrEnd = ptr - count;
+				char* test;
+				char* testEnd = testStart + anyOf.Length;
+
+				while (ptr != ptrEnd) {
+					test = testStart;
+					while (test != testEnd) {
+						if (*test == *ptr)
+							return (int)(ptr - start);
+						test++;
+					}
+					ptr--;
+				}
 				return -1;
-			
-			return LastIndexOfImpl (value, this.length - 1, this.length);
+			}
 		}
 
-		public int LastIndexOf (String value)
+		// Following methods are culture-insensitive
+		public int LastIndexOf (char value)
 		{
 			if (this.length == 0)
-				/* This overload does additional checking */
-				return LastIndexOf (value, 0, 0);
-			else
-				return LastIndexOf (value, this.length - 1, this.length);
+				return -1;
+			
+			return LastIndexOfUnchecked (value, this.length - 1, this.length);
 		}
 
 		public int LastIndexOf (char value, int startIndex)
@@ -1083,15 +1267,6 @@
 			return LastIndexOf (value, startIndex, startIndex + 1);
 		}
 
-		public int LastIndexOf (String value, int startIndex)
-		{
-			int max = startIndex;
-			if (max < this.Length)
-				max++;
-			return LastIndexOf (value, startIndex, max);
-		}
-
-		/* This method is culture-insensitive */
 		public int LastIndexOf (char value, int startIndex, int count)
 		{
 			if (startIndex == 0 && this.length == 0)
@@ -1105,11 +1280,10 @@
 			if (startIndex - count + 1 < 0)
 				throw new ArgumentOutOfRangeException ("startIndex - count + 1 < 0");
 
-			return LastIndexOfImpl (value, startIndex, count);
+			return LastIndexOfUnchecked (value, startIndex, count);
 		}
 
-		/* This method is culture-insensitive */
-		unsafe int LastIndexOfImpl (char value, int startIndex, int count)
+		internal unsafe int LastIndexOfUnchecked (char value, int startIndex, int count)
 		{
 			// It helps JIT compiler to optimize comparison
 			int value_32 = (int)value;
@@ -1150,7 +1324,38 @@
 			}
 		}
 
-		/* But this one is culture-sensitive */
+		internal unsafe int LastIndexOfOrdinalIgnoreCase (char value, int startIndex, int count)
+		{
+			if (length == 0)
+				return -1;
+			int end = startIndex - count;
+			char c = Char.ToUpperInvariant (value);
+			fixed (char* s = &start_char) {
+				for (int i = startIndex; i > end; i--)
+					if (Char.ToUpperInvariant (s [i]) == c)
+						return i;
+			}
+			return -1;
+		}
+
+		// Following methods are culture-sensitive
+		public int LastIndexOf (String value)
+		{
+			if (this.length == 0)
+				// This overload does additional checking
+				return LastIndexOf (value, 0, 0);
+			else
+				return LastIndexOf (value, this.length - 1, this.length);
+		}
+
+		public int LastIndexOf (String value, int startIndex)
+		{
+			int max = startIndex;
+			if (max < this.Length)
+				max++;
+			return LastIndexOf (value, startIndex, max);
+		}
+
 		public int LastIndexOf (String value, int startIndex, int count)
 		{
 			if (value == null)
@@ -1381,7 +1586,7 @@
 			if (this.length == 0 || oldChar == newChar)
 				return this;
 
-			int start_pos = IndexOfImpl (oldChar, 0, this.length);
+			int start_pos = IndexOfUnchecked (oldChar, 0, this.length);
 			if (start_pos == -1)
 				return this;
 
Index: System/StringComparer.cs
===================================================================
--- System/StringComparer.cs	(revision 104012)
+++ System/StringComparer.cs	(working copy)
@@ -85,6 +85,9 @@
 		// Methods
 		public static StringComparer Create (CultureInfo culture, bool ignoreCase)
 		{
+			if (culture == null)
+				throw new ArgumentNullException ("culture");
+
 			return new CultureAwareComparer (culture, ignoreCase);
 		}
 
@@ -179,6 +182,8 @@
 	[Serializable]
 	internal class OrdinalComparer : StringComparer
 	{
+		readonly bool _ignoreCase;
+
 		public OrdinalComparer (bool ignoreCase)
 		{
 			_ignoreCase = ignoreCase;
@@ -186,49 +191,27 @@
 
 		public override int Compare (string x, string y)
 		{
-			if (!_ignoreCase)
-				return String.CompareOrdinal (x, y);
-
-			// copied from String.CompareOrdinal()
-			if (x == null) {
-				if (y == null)
-					return 0;
-				else
-					return -1;
-			}
-			else if (y == null) {
-				return 1;
-			}
-
-			int max = x.Length > y.Length ? y.Length : x.Length;
-			for (int i = 0; i < max; i++) {
-				if (x [i] == y [i])
-					continue;
-				char xc = Char.ToUpperInvariant (x [i]);
-				char yc = Char.ToUpperInvariant (y [i]);
-				if (xc != yc)
-					return xc - yc;
-			}
-			return max < x.Length ? -1 :
-				max == y.Length ? 0 : 1;
+			if (_ignoreCase)
+				return String.CompareOrdinalCaseInsensitiveUnchecked (x, 0, Int32.MaxValue, y, 0, Int32.MaxValue);
+			else
+				return String.CompareOrdinalUnchecked (x, 0, Int32.MaxValue, y, 0, Int32.MaxValue);
 		}
 
 		public override bool Equals (string x, string y)
 		{
-			if (!_ignoreCase)
-				return x == y;
-			return Compare (x, y) == 0;
+			if (_ignoreCase)
+				return Compare (x, y) == 0;
+
+			return x == y;
 		}
 
 		public override int GetHashCode (string s)
 		{
-			if (!_ignoreCase)
+			if (_ignoreCase)
+				return s.GetCaseInsensitiveHashCode ();
+			else
 				return s.GetHashCode ();
-
-			return s.GetCaseInsensitiveHashCode ();
 		}
-
-		readonly bool _ignoreCase;
 	}
 }
 
