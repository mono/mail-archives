using System;
using Glade;
using Gtk;
using System.Reflection;
using System.Collections.Generic;

namespace Sunfire.Core.Util.Gtk
{

    public class WidgetCreationFunctionAttribute : Attribute
    {
        public WidgetCreationFunctionAttribute(string func_name)
        {
            this.Name = func_name;
        }

        public string Name;
    }
    
    public class WidgetCreationException : Exception
    {
        public WidgetCreationException() : base() {}
        public WidgetCreationException(string msg) : base(msg) {}
        public WidgetCreationException(string msg, Exception inner) : base(msg, inner) {}
        
    }
    
    public class CustomWidgetCreator : IDisposable
    {
        Dictionary<string, MethodInfo> methodDict = new Dictionary<string, MethodInfo>();
        
        object creator;
        
        public CustomWidgetCreator(object creator)
        {
            MethodInfo[] all_methods = creator.GetType().GetMethods();

            this.creator = creator;
            
            foreach (MethodInfo info in all_methods)
            {
                object[] attributes = info.GetCustomAttributes(true);
                foreach (object obj in attributes)
                {
                    WidgetCreationFunctionAttribute attr = obj as WidgetCreationFunctionAttribute;
                    if (attr != null)
                    {
                        methodDict[attr.Name] = info;
                    }
                }
            }

            Glade.XML.CustomHandler = this.Create;
        }

        public Widget Create(XML xml, string func_name, string name, string string1, string string2, int int1, int int2)
        {
            if (disposed)
            {
                throw new ObjectDisposedException("CustomWidgetCreator already disposed.");
            }
            
            MethodInfo info = (MethodInfo) methodDict[func_name];
            if (info != null)
            {
                return (Widget) info.Invoke(this.creator, new object[] {name, string1, string2, int1, int2});
            }
        
            throw new WidgetCreationException("Widget creation function is unknown: " + func_name);
        }

        #region IDisposable Interface

        bool disposed = false;
        
        public void Dispose()
        {
           Dispose(true);
           GC.SuppressFinalize(this);
        }

        protected void Dispose(bool disposing)
        {
            if (!disposed)
            {
                Glade.XML.CustomHandler = null;
                disposed = true;
            }
        }

        ~CustomWidgetCreator()
        {
            Dispose(false);
        }
        
        #endregion
        
    }
}



