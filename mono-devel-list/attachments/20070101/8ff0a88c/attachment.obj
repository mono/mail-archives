Index: SettingsPropertyValue.cs
===================================================================
--- SettingsPropertyValue.cs	(revision 70279)
+++ SettingsPropertyValue.cs	(working copy)
@@ -80,15 +80,9 @@
 		public object PropertyValue {
 			get {
 				if (needPropertyValue) {
-					propertyValue = GetDeserializedValue ();
-					if (propertyValue == null) {
-						if (!property.PropertyType.IsAssignableFrom (property.DefaultValue.GetType ())) {
-							TypeConverter converter = TypeDescriptor.GetConverter (property.PropertyType);
-							propertyValue = converter.ConvertFrom (property.DefaultValue);
-						}
-						else {
-							propertyValue = property.DefaultValue;
-						}
+					propertyValue = GetDeserializedValue (serializedValue);
+					if (propertyValue == null) {
+						propertyValue = GetDeserializedDefaultValue ();
 						defaulted = true;
 					}
 					needPropertyValue = false;
@@ -163,8 +157,24 @@
 			}
 		}
 
-		private object GetDeserializedValue ()
+		private object GetDeserializedDefaultValue ()
 		{
+			if (property.DefaultValue == null ||
+				(property.DefaultValue is string && ((string) property.DefaultValue).Length == 0))
+				return Activator.CreateInstance (property.PropertyType);
+
+			if (property.DefaultValue is string && ((string) property.DefaultValue).Length > 0)
+				return GetDeserializedValue (property.DefaultValue);
+
+			if (!property.PropertyType.IsAssignableFrom (property.DefaultValue.GetType ())) {
+				TypeConverter converter = TypeDescriptor.GetConverter (property.PropertyType);
+				return converter.ConvertFrom (property.DefaultValue);
+			}
+			return property.DefaultValue;
+		}
+
+		private object GetDeserializedValue (object serializedValue)
+		{
 			if (serializedValue == null)
 				return null;
 
@@ -173,7 +183,7 @@
 			try {
 				switch (property.SerializeAs) {
 					case SettingsSerializeAs.String:
-						if (((string) serializedValue).Length > 0)
+						if (serializedValue is string && ((string) serializedValue).Length > 0)
 							deserializedObject = TypeDescriptor.GetConverter (property.PropertyType).ConvertFromString ((string) serializedValue);
 						break;
 #if (XML_DEP)
@@ -198,7 +208,7 @@
 			return deserializedObject;
 		}
 
-		SettingsProperty property;
+		readonly SettingsProperty property;
 		object propertyValue;
 		object serializedValue;
 		bool needSerializedValue;
