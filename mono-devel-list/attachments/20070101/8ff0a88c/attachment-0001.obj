Index: SettingsPropertyValueTest.cs
===================================================================
--- SettingsPropertyValueTest.cs	(revision 69387)
+++ SettingsPropertyValueTest.cs	(working copy)
@@ -39,7 +39,8 @@
 namespace MonoTests.System.Configuration {
 
 	[TestFixture]
-	public class SettingsPropertyValueTest {
+	public class SettingsPropertyValueTest
+	{
 
 		[Test]
 		public void Properties ()
@@ -60,14 +61,14 @@
 			Assert.IsFalse (v.IsDirty, "A2");
 			Assert.AreEqual ("property", v.Name, "A3");
 			Assert.AreEqual (p, v.Property, "A4");
-			Assert.AreEqual ((object)10, v.PropertyValue, "A5");
+			Assert.AreEqual ((object) 10, v.PropertyValue, "A5");
 			Assert.AreEqual (null, v.SerializedValue, "A6");
 			Assert.IsTrue (v.UsingDefaultValue, "A7");
 
 			/* test that setting v.PropertyValue to
 			 * something else causes SerializedValue to
 			 * become not-null */
-			v.PropertyValue = (object)5;
+			v.PropertyValue = (object) 5;
 			Assert.AreEqual ("5", v.SerializedValue, "A9");
 
 			/* test to see whether or not changing
@@ -77,8 +78,8 @@
 			Assert.AreEqual ("5", v.SerializedValue, "A11"); /* nope.. */
 
 			/* only changing PropertyValue does */
-			v.PropertyValue = (object)7;
-			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"?>\n<int>7</int>", ((string)v.SerializedValue).Replace ("\r\n", "\n"), "A13");
+			v.PropertyValue = (object) 7;
+			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"?>\n<int>7</int>", ((string) v.SerializedValue).Replace ("\r\n", "\n"), "A13");
 		}
 
 		[Test]
@@ -178,7 +179,7 @@
 			v.SerializedValue = "123";
 
 			Assert.AreEqual (123, v.PropertyValue, "A1");
-			Assert.AreEqual (typeof(int), v.PropertyValue.GetType (), "A2");
+			Assert.AreEqual (typeof (int), v.PropertyValue.GetType (), "A2");
 			Assert.AreEqual (false, v.UsingDefaultValue, "A3");
 		}
 
@@ -199,7 +200,7 @@
 			v.SerializedValue = "<?xml version=\"1.0\" encoding=\"utf-16\"?>\n<int>123</int>";
 
 			Assert.AreEqual (123, v.PropertyValue, "A1");
-			Assert.AreEqual (typeof(int), v.PropertyValue.GetType (), "A2");
+			Assert.AreEqual (typeof (int), v.PropertyValue.GetType (), "A2");
 			Assert.AreEqual (false, v.UsingDefaultValue, "A3");
 		}
 
@@ -224,9 +225,9 @@
 
 			v.PropertyValue = 10;
 			p.SerializeAs = SettingsSerializeAs.Xml;
-			
-			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"?>\n<int>10</int>", ((string)v.SerializedValue).Replace ("\r\n", "\n"), "A3");
 
+			Assert.AreEqual ("<?xml version=\"1.0\" encoding=\"utf-16\"?>\n<int>10</int>", ((string) v.SerializedValue).Replace ("\r\n", "\n"), "A3");
+
 		}
 
 		[Test]
@@ -243,12 +244,12 @@
 								   false);
 
 			SettingsPropertyValue v = new SettingsPropertyValue (p);
-			byte[] foo;
+			byte [] foo;
 
 			v.PropertyValue = 10;
 
-			Assert.AreEqual (typeof (byte[]), v.SerializedValue.GetType(), "A1");
-			foo = (byte[])v.SerializedValue;
+			Assert.AreEqual (typeof (byte []), v.SerializedValue.GetType (), "A1");
+			foo = (byte []) v.SerializedValue;
 
 			v.PropertyValue = 5;
 			Assert.AreEqual (5, v.PropertyValue, "A2");
@@ -257,7 +258,7 @@
 			BinaryFormatter bf = new BinaryFormatter ();
 			MemoryStream ms = new MemoryStream (foo);
 			Assert.AreEqual (10, bf.Deserialize (ms), "A3");
-			
+
 #if notyet
 			v.Deserialized = false;
 			v.SerializedValue = foo;
@@ -265,8 +266,86 @@
 			Assert.AreEqual (10, v.PropertyValue, "A4");
 #endif
 		}
+
+		[Test]
+		public void DefaultValueType ()
+		{
+			SettingsProperty p1 = new SettingsProperty ("property",
+								   typeof (int),
+								   null,
+								   true,
+								   (int) 10,
+								   SettingsSerializeAs.String,
+								   null,
+								   true,
+								   false);
+			SettingsPropertyValue v1 = new SettingsPropertyValue (p1);
+			Assert.AreEqual (typeof (int), v1.PropertyValue.GetType (), "A1");
+			Assert.AreEqual (10, v1.PropertyValue, "A2");
+
+			SettingsProperty p2 = new SettingsProperty ("property",
+					   typeof (int),
+					   null,
+					   true,
+					   "10",
+					   SettingsSerializeAs.String,
+					   null,
+					   true,
+					   false);
+			SettingsPropertyValue v2 = new SettingsPropertyValue (p2);
+			Assert.AreEqual (typeof (int), v2.PropertyValue.GetType (), "A3");
+			Assert.AreEqual (10, v2.PropertyValue, "A4");
+		}
+
+		[Serializable]
+		public class MyData
+		{
+			private int intProp = 777;
+			public int IntProp
+			{
+				get { return intProp; }
+				set { intProp = value; }
+			}
+		}
+
+		[Test]
+		public void DefaultValueCompexTypeEmpty ()
+		{
+			SettingsProperty p1 = new SettingsProperty ("property",
+								   typeof (MyData),
+								   null,
+								   true,
+								   "",
+								   SettingsSerializeAs.String,
+								   null,
+								   true,
+								   false);
+			SettingsPropertyValue v1 = new SettingsPropertyValue (p1);
+			Assert.IsNotNull (v1.PropertyValue, "A1");
+			Assert.AreEqual (typeof (MyData), v1.PropertyValue.GetType (), "A2");
+			MyData h = (MyData) v1.PropertyValue;
+			Assert.AreEqual (777, h.IntProp, "A3");
+		}
+
+		[Test]
+		public void DefaultValueCompexType ()
+		{
+			SettingsProperty p2 = new SettingsProperty ("property",
+								   typeof (MyData),
+								   null,
+								   true,
+								   @"<?xml version=""1.0"" encoding=""utf-16""?><MyData xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema""><IntProp>5</IntProp></MyData>",
+								   SettingsSerializeAs.Xml,
+								   null,
+								   true,
+								   false);
+			SettingsPropertyValue v2 = new SettingsPropertyValue (p2);
+			Assert.IsNotNull (v2.PropertyValue, "A1");
+			Assert.AreEqual (typeof (MyData), v2.PropertyValue.GetType (), "A2");
+			MyData h = (MyData) v2.PropertyValue;
+			Assert.AreEqual (5, h.IntProp, "A3");
+		}
 	}
-
 }
 
 #endif
