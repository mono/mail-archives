Index: mcs/class/corlib/System/Type.cs
===================================================================
--- mcs/class/corlib/System/Type.cs	(revision 118112)
+++ mcs/class/corlib/System/Type.cs	(working copy)
@@ -1105,7 +1105,31 @@
 					l.AddRange (c);
 				}
 			}
-			result = new MemberInfo [l.Count];
+
+			switch (memberType) {
+			case MemberTypes.Constructor :
+				result = new ConstructorInfo [l.Count];
+				break;
+			case MemberTypes.Event :
+				result = new EventInfo [l.Count];
+				break;
+			case MemberTypes.Field :
+				result = new FieldInfo [l.Count];
+				break;
+			case MemberTypes.Method :
+				result = new MethodInfo [l.Count];
+				break;
+			case MemberTypes.NestedType :
+			case MemberTypes.TypeInfo :
+				result = new Type [l.Count];
+				break;
+			case MemberTypes.Property :
+				result = new PropertyInfo [l.Count];
+				break;
+			default :
+				result = new MemberInfo [l.Count];
+				break;
+			}
 			l.CopyTo (result);
 			return result;
 		}
Index: mcs/class/corlib/System/ChangeLog
===================================================================
--- mcs/class/corlib/System/ChangeLog	(revision 118112)
+++ mcs/class/corlib/System/ChangeLog	(working copy)
@@ -1,4 +1,12 @@
 
+2008-11-06  Bill Holmes  <billholmes54@gmail.com>
+
+	* Type.cs (FindMembers):  Changing the instantiated type of the 
+	  returned MemberInfo array to match the MemberTypes flag
+	  passed in argument 1.
+
+	Contributed under MIT/X11 license.
+
 Mon Nov 3 16:39:37 CET 2008 Paolo Molaro <lupus@ximian.com>
 
 	* Array.cs: in the IList set_Item, ensure the array
Index: mcs/class/corlib/Test/System/ChangeLog
===================================================================
--- mcs/class/corlib/Test/System/ChangeLog	(revision 118112)
+++ mcs/class/corlib/Test/System/ChangeLog	(working copy)
@@ -1,3 +1,11 @@
+2008-11-06  Bill Holmes  <billholmes54@gmail.com>
+
+	* TypeTest.cs: TypeGetMemberReturnTypeTest added to check that the
+	  instantiated type of the returned MemberInfo array matches the
+	  MemberTypes flag passed in.
+
+	Contributed under MIT/X11 license.
+
 2008-10-07  Marek Habersack  <mhabersack@novell.com>
 
 	* MathTest.cs: added tests for rounding doubles with truncation in
Index: mcs/class/corlib/Test/System/TypeTest.cs
===================================================================
--- mcs/class/corlib/Test/System/TypeTest.cs	(revision 118112)
+++ mcs/class/corlib/Test/System/TypeTest.cs	(working copy)
@@ -3064,6 +3064,34 @@
 		}
 #endif
 
+		[Test]
+		public void TypeGetMemberReturnTypeTest ()
+		{
+			object obj;
+			MemberTypes memtype;
+			Type testtype;
+			object [] flagsandtypes = new object [] {
+				MemberTypes.All, typeof (MemberInfo []),
+				MemberTypes.Constructor, typeof (ConstructorInfo []),
+				MemberTypes.Custom, typeof (MemberInfo []),
+				MemberTypes.Event, typeof (EventInfo []),
+				MemberTypes.Field, typeof (FieldInfo []),
+				MemberTypes.Method, typeof (MethodInfo []),
+				MemberTypes.NestedType, typeof (Type []),
+				MemberTypes.Property, typeof (PropertyInfo []),
+				MemberTypes.TypeInfo, typeof (Type [])};
+
+			for (int i=0; i < flagsandtypes.Length; i+=2) {
+				memtype = (MemberTypes)flagsandtypes [i];
+				testtype = (Type)flagsandtypes [i+1];
+				obj = GetType ().GetMember ("DummyMember", memtype,
+						BindingFlags.Public | BindingFlags.Instance);
+				Assert.AreEqual (testtype.GetHashCode (), obj.GetType ().GetHashCode (),
+						"Expected " + testtype.FullName);
+			}
+
+		}
+
 		static bool ContainsProperty (PropertyInfo [] props, string name)
 		{
 			foreach (PropertyInfo p in props)