--- mono-142439.old/mcs/class/corlib/System/DateTime.cs	2009-07-27 09:59:46.000000000 -0500
+++ mono-142439/mcs/class/corlib/System/DateTime.cs	2009-11-06 08:16:29.000000000 -0600
@@ -43,17 +43,67 @@
 	/// </summary>
 	/// 
 	[Serializable]
-	[StructLayout (LayoutKind.Auto)]
+	[StructLayout (LayoutKind.Explicit)]
 	public struct DateTime : IFormattable, IConvertible, IComparable
 #if NET_2_0
 		, IComparable<DateTime>, IEquatable <DateTime>
 #endif
 	{
-		private TimeSpan ticks;
+        [System.Runtime.InteropServices.FieldOffset(0)]
+        private long ticks;
 
-#if NET_2_0
-		DateTimeKind kind;
+        // dateData exists for .NET BinaryFormatter compatibility
+        [System.Runtime.InteropServices.FieldOffset(0)]
+        private ulong dateData;
+
+#if NET_2_0
+		public DateTimeKind Kind
+        {
+			get
+            {
+                if ((dateData & 0xc000000000000000) == 0x0000000000000000)
+                    return DateTimeKind.Unspecified;
+                else if ((dateData & 0x8000000000000000) == 0x8000000000000000)
+                    return DateTimeKind.Local;
+                else
+                    return DateTimeKind.Utc;
+			}
+        
+            private set
+            {
+                if (value == DateTimeKind.Local)
+                    dateData = dateData & 0x3fffffffffffffff | 0x8000000000000000;
+                else if (value == DateTimeKind.Utc)
+                    dateData = dateData & 0x3fffffffffffffff | 0x4000000000000000;
+                else
+                    dateData = dateData & 0x3fffffffffffffff;
+            }
+		}
 #endif
+
+        private TimeSpan RawTicks
+        {
+            get
+            {
+#if !NET_2_0
+                return new TimeSpan(ticks);
+#else
+                return new TimeSpan(ticks & (long)0x3fffffffffffffff);
+#endif
+            }
+
+            set
+            {
+#if !NET_2_0
+                ticks = value.Ticks;
+#else
+                DateTimeKind kind = this.Kind;
+                ticks = value.Ticks;
+                this.Kind = kind;
+#endif
+            }
+        }
+
 #if !NET_2_0
 		internal struct DateTimeOffset {
 			public DateTime DateTime;
@@ -248,7 +298,7 @@
 			int M =1;
 
 			int[] days = daysmonth;
-			int totaldays = this.ticks.Days;
+			int totaldays = this.RawTicks.Days;
 
 			num400 = (totaldays / dp400);
 			totaldays -=  num400 * dp400;
@@ -293,14 +343,14 @@
 		/// 
 		public DateTime (long ticks)
 		{
-			this.ticks = new TimeSpan (ticks);
+			this.RawTicks = new TimeSpan(ticks);
 			if (ticks < MinValue.Ticks || ticks > MaxValue.Ticks) {
 				string msg = Locale.GetText ("Value {0} is outside the valid range [{1},{2}].", 
 					ticks, MinValue.Ticks, MaxValue.Ticks);
 				throw new ArgumentOutOfRangeException ("ticks", msg);
 			}
 #if NET_2_0
-			kind = DateTimeKind.Unspecified;
+			Kind = DateTimeKind.Unspecified;
 #endif
 		}
 
@@ -322,10 +372,10 @@
 				throw new ArgumentOutOfRangeException ("Parameters describe an " +
 									"unrepresentable DateTime.");
 
-			ticks = new TimeSpan (AbsoluteDays(year,month,day), hour, minute, second, millisecond);
+			RawTicks = new TimeSpan (AbsoluteDays(year,month,day), hour, minute, second, millisecond);
 
 #if NET_2_0
-			kind = DateTimeKind.Unspecified;
+			Kind = DateTimeKind.Unspecified;
 #endif
 		}
 
@@ -343,9 +393,9 @@
 		{
 			if (calendar == null)
 				throw new ArgumentNullException ("calendar");
-			ticks = calendar.ToDateTime (year, month, day, hour, minute, second, millisecond).ticks;
+			RawTicks = calendar.ToDateTime (year, month, day, hour, minute, second, millisecond).RawTicks;
 #if NET_2_0
-			kind = DateTimeKind.Unspecified;
+			Kind = DateTimeKind.Unspecified;
 #endif
 		}
 
@@ -354,10 +404,10 @@
 			if (check && (value.Ticks < MinValue.Ticks || value.Ticks > MaxValue.Ticks))
 				throw new ArgumentOutOfRangeException ();
 
-			ticks = value;
+			RawTicks = value;
 
 #if NET_2_0
-			kind = DateTimeKind.Unspecified;
+			Kind = DateTimeKind.Unspecified;
 #endif
 		}
 
@@ -365,28 +415,28 @@
 		public DateTime (long ticks, DateTimeKind kind) : this (ticks)
 		{
 			CheckDateTimeKind (kind);
-			this.kind = kind;
+			this.Kind = kind;
 		}
 
 		public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind)
 			: this (year, month, day, hour, minute, second)
 		{
 			CheckDateTimeKind (kind);
-			this.kind = kind;
+			this.Kind = kind;
 		}
 
 		public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind)
 			: this (year, month, day, hour, minute, second, millisecond)
 		{
 			CheckDateTimeKind (kind);
-			this.kind = kind;
+			this.Kind = kind;
 		}
 
 		public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, Calendar calendar, DateTimeKind kind)
 			: this (year, month, day, hour, minute, second, millisecond, calendar)
 		{
 			CheckDateTimeKind (kind);
-			this.kind = kind;
+			this.Kind = kind;
 		}			
 #endif
 
@@ -398,7 +448,7 @@
 			{ 
 				DateTime ret = new DateTime (Year, Month, Day);
 #if NET_2_0
-				ret.kind = kind;
+				ret.Kind = Kind;
 #endif
 				return ret;
 			}
@@ -424,7 +474,7 @@
 		{
 			get 
 			{ 
-				return ( (DayOfWeek) ((ticks.Days+1) % 7) ); 
+				return ( (DayOfWeek) ((RawTicks.Days+1) % 7) ); 
 			}
 		}
 
@@ -440,7 +490,7 @@
 		{
 			get	
 			{ 
-				return new TimeSpan(ticks.Ticks % TimeSpan.TicksPerDay );
+				return new TimeSpan(RawTicks.Ticks % TimeSpan.TicksPerDay );
 			}
 			
 		}
@@ -449,7 +499,7 @@
 		{
 			get 
 			{ 
-				return ticks.Hours;
+				return RawTicks.Hours;
 			}
 		}
 
@@ -457,7 +507,7 @@
 		{
 			get 
 			{ 
-				return ticks.Minutes;
+				return RawTicks.Minutes;
 			}
 		}
 
@@ -465,7 +515,7 @@
 		{
 			get	
 			{ 
-				return ticks.Seconds;
+				return RawTicks.Seconds;
 			}
 		}
 
@@ -473,7 +523,7 @@
 		{
 			get 
 			{ 
-				return ticks.Milliseconds;
+				return RawTicks.Milliseconds;
 			}
 		}
 		
@@ -508,7 +558,7 @@
 				// This is boxed, so we avoid locking.
 				DateTime ret = dt + (TimeSpan) to_local_time_span_object;
 #if NET_2_0
-				ret.kind = DateTimeKind.Local;
+				ret.Kind = DateTimeKind.Local;
 #endif
 				return ret;
 			}
@@ -518,7 +568,7 @@
 		{ 
 			get	
 			{ 
-				return ticks.Ticks;
+				return RawTicks.Ticks;
 			}
 		}
 	
@@ -528,7 +578,7 @@
 				DateTime now = Now;
 				DateTime today = new DateTime (now.Year, now.Month, now.Day);
 #if NET_2_0
-				today.kind = now.kind;
+				today.Kind = now.Kind;
 #endif
 				return today;
 			}
@@ -553,21 +603,13 @@
 			}
 		}
 
-#if NET_2_0
-		public DateTimeKind Kind {
-			get {
-				return kind;
-			}
-		}
-#endif
-
 		/* methods */
 
 		public DateTime Add (TimeSpan value)
 		{
 			DateTime ret = AddTicks (value.Ticks);
 #if NET_2_0
-			ret.kind = kind;
+			ret.Kind = Kind;
 #endif
 			return ret;
 		}
@@ -579,12 +621,12 @@
 		
 		public DateTime AddTicks (long value)
 		{
-			if ((value + ticks.Ticks) > MAX_VALUE_TICKS || (value + ticks.Ticks) < 0) {
+			if ((value + RawTicks.Ticks) > MAX_VALUE_TICKS || (value + RawTicks.Ticks) < 0) {
 				throw new ArgumentOutOfRangeException();
 			}
-			DateTime ret = new DateTime (value + ticks.Ticks);
+			DateTime ret = new DateTime (value + RawTicks.Ticks);
 #if NET_2_0
-			ret.kind = kind;
+			ret.Kind = Kind;
 #endif
 			return ret;
 		}
@@ -647,7 +689,7 @@
 
 			temp = new DateTime (year, month, day);
 #if NET_2_0
-			temp.kind = kind;
+			temp.Kind = Kind;
 #endif
 			return  temp.Add (this.TimeOfDay);
 		}
@@ -664,9 +706,9 @@
 
 		public static int Compare (DateTime t1,	DateTime t2)
 		{
-			if (t1.ticks < t2.ticks) 
+			if (t1.RawTicks < t2.RawTicks) 
 				return -1;
-			else if (t1.ticks > t2.ticks) 
+			else if (t1.RawTicks > t2.RawTicks) 
 				return 1;
 			else
 				return 0;
@@ -687,7 +729,7 @@
 #if NET_2_0
 		public bool IsDaylightSavingTime ()
 		{
-			if (kind == DateTimeKind.Utc)
+			if (Kind == DateTimeKind.Utc)
 				return false;
 			return TimeZone.CurrentTimeZone.IsDaylightSavingTime (this);
 		}
@@ -699,12 +741,12 @@
 
 		public bool Equals (DateTime value)
 		{
-			return value.ticks == ticks;
+			return value.RawTicks == RawTicks;
 		}
 
 		public long ToBinary ()
 		{
-			switch (kind) {
+			switch (Kind) {
 			case DateTimeKind.Utc:
 				return Ticks | 0x4000000000000000;
 			case DateTimeKind.Local:
@@ -763,12 +805,12 @@
 			if (!(value is System.DateTime))
 				return false;
 
-			return ((DateTime) value).ticks == ticks;
+			return ((DateTime) value).RawTicks == RawTicks;
 		}
 
 		public static bool Equals (DateTime t1, DateTime t2 )
 		{
-			return (t1.ticks == t2.ticks );
+			return (t1.RawTicks == t2.RawTicks );
 		}
 
 		public static DateTime FromFileTime (long fileTime) 
@@ -879,7 +921,7 @@
 
 		public override int GetHashCode ()
 		{
-			return (int) ticks.Ticks;
+			return (int) RawTicks.Ticks;
 		}
 
 		public TypeCode GetTypeCode ()
@@ -1816,24 +1858,24 @@
 			bool adjustToUniversal = (style & DateTimeStyles.AdjustToUniversal) != 0;
 			
 			if (tzsign != -1) {
-				long newticks = (result.ticks - dto.Offset).Ticks;
+				long newticks = (result.RawTicks - dto.Offset).Ticks;
 				if (newticks < 0)
 					newticks += TimeSpan.TicksPerDay;
 				result = new DateTime (false, new TimeSpan (newticks));
 #if NET_2_0
-				result.kind = DateTimeKind.Utc;
+				result.Kind = DateTimeKind.Utc;
 				if ((style & DateTimeStyles.RoundtripKind) != 0)
 					result = result.ToLocalTime ();
 #endif
 			}
 #if NET_2_0							
 			else if (useutc || ((style & DateTimeStyles.AssumeUniversal) != 0))
-				result.kind = DateTimeKind.Utc;
+				result.Kind = DateTimeKind.Utc;
 			else if ((style & DateTimeStyles.AssumeLocal) != 0)
-				result.kind = DateTimeKind.Local;						
+				result.Kind = DateTimeKind.Local;						
 
 			bool adjustToLocal = !adjustToUniversal && (style & DateTimeStyles.RoundtripKind) == 0;
-			if (result.kind != DateTimeKind.Unspecified)
+			if (result.Kind != DateTimeKind.Unspecified)
 			{				
 				if (adjustToUniversal)
 					result = result.ToUniversalTime ();
@@ -1977,17 +2019,17 @@
 		
 		public TimeSpan Subtract (DateTime value)
 		{
-			return new TimeSpan (ticks.Ticks) - value.ticks;
+			return new TimeSpan (RawTicks.Ticks) - value.RawTicks;
 		}
 
 		public DateTime Subtract(TimeSpan value)
 		{
 			TimeSpan newticks;
 
-			newticks = (new TimeSpan (ticks.Ticks)) - value;
+			newticks = (new TimeSpan (RawTicks.Ticks)) - value;
 			DateTime ret = new DateTime (true,newticks);
 #if NET_2_0
-			ret.kind = kind;
+			ret.Kind = Kind;
 #endif
 			return ret;
 		}
@@ -2114,53 +2156,53 @@
 
 		public static DateTime operator +(DateTime d, TimeSpan t)
 		{
-			DateTime ret = new DateTime (true, d.ticks + t);
+			DateTime ret = new DateTime (true, d.RawTicks + t);
 #if NET_2_0
-			ret.kind = d.kind;
+			ret.Kind = d.Kind;
 #endif
 			return ret;
 		}
 
 		public static bool operator ==(DateTime d1, DateTime d2)
 		{
-			return (d1.ticks == d2.ticks);
+			return (d1.RawTicks == d2.RawTicks);
 		}
 
 		public static bool operator >(DateTime t1,DateTime t2)
 		{
-			return (t1.ticks > t2.ticks);
+			return (t1.RawTicks > t2.RawTicks);
 		}
 
 		public static bool operator >=(DateTime t1,DateTime t2)
 		{
-			return (t1.ticks >= t2.ticks);
+			return (t1.RawTicks >= t2.RawTicks);
 		}
 
 		public static bool operator !=(DateTime d1, DateTime d2)
 		{
-			return (d1.ticks != d2.ticks);
+			return (d1.RawTicks != d2.RawTicks);
 		}
 
 		public static bool operator <(DateTime t1,	DateTime t2)
 		{
-			return (t1.ticks < t2.ticks );
+			return (t1.RawTicks < t2.RawTicks );
 		}
 
 		public static bool operator <=(DateTime t1,DateTime t2)
 		{
-			return (t1.ticks <= t2.ticks);
+			return (t1.RawTicks <= t2.RawTicks);
 		}
 
 		public static TimeSpan operator -(DateTime d1,DateTime d2)
 		{
-			return new TimeSpan((d1.ticks - d2.ticks).Ticks);
+			return new TimeSpan((d1.RawTicks - d2.RawTicks).Ticks);
 		}
 
 		public static DateTime operator -(DateTime d,TimeSpan t)
 		{
-			DateTime ret = new DateTime (true, d.ticks - t);
+			DateTime ret = new DateTime (true, d.RawTicks - t);
 #if NET_2_0
-			ret.kind = d.kind;
+			ret.Kind = d.Kind;
 #endif
 			return ret;
 		}