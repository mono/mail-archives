Index: System.IO/Path.cs
===================================================================
--- System.IO/Path.cs	(revision 72268)
+++ System.IO/Path.cs	(working copy)
@@ -71,6 +71,8 @@
 
 		private static readonly char[] PathSeparatorChars;
 		private static readonly bool dirEqualsVolume;
+        internal static char[] WildcardChars;
+        internal static char[] SpaceChars;
 
 		// class methods
 		public static string ChangeExtension (string path, string extension)
@@ -206,7 +208,18 @@
 
 		public static string GetFullPath (string path)
 		{
-			string fullpath = InsecureGetFullPath (path);
+			if (path == null)
+				throw new ArgumentNullException("path");
+
+			if (path.Length > 256)
+				throw new PathTooLongException(
+					"The specified path, file name, or both are too long.After full qualification, ea"
+					+ "ch must be less than 260 characters.");
+            
+            if (path.IndexOfAny(WildcardChars) != -1)
+                throw new ArgumentException(Environment.GetResourceString("Argument_InvalidPathChars"));
+
+			string fullpath = InsecureGetFullPath (path.TrimEnd());
 			if (SecurityManager.SecurityEnabled) {
 				new FileIOPermission (FileIOPermissionAccess.PathDiscovery, fullpath).Demand ();
 			}
@@ -254,6 +267,19 @@
 				throw new ArgumentException (msg, "path");
 			}
 
+            if (path.StartsWith(":"))
+                throw new ArgumentException("The path is not in legal form");
+
+            if (IsPathRooted(path)) {
+                int rootLength = GetPathRoot(path).Length;
+                if ((path.Length > rootLength) && (path.Substring(rootLength).IndexOf(':') != -1))
+                    throw new ArgumentException("The path is not in legal form");
+            }
+            else {
+                if (path.IndexOf(':') != -1)
+                    throw new NotSupportedException("The given path's format is not supported.");
+            }
+                 
 			// adjust for drives, i.e. a special case for windows
 			if (Environment.IsRunningOnWindows)
 				path = WindowsDriveAdjustment (path);
@@ -399,9 +425,14 @@
 
 		public static bool IsPathRooted (string path)
 		{
-			if (path == null || path.Length == 0)
+			if (path == null)
 				return false;
 
+            path = path.Trim(SpaceChars);
+
+            if (path.Length == 0)
+                return false;
+
 			if (path.IndexOfAny (InvalidPathChars) != -1)
 				throw new ArgumentException ("Illegal characters in path", "path");
 
@@ -429,10 +460,10 @@
 		{
 			// return a new array as we do not want anyone to be able to change the values
 			if (Environment.IsRunningOnWindows) {
-				return new char [36] { '\x00', '\x01', '\x02', '\x03', '\x04', '\x05', '\x06', '\x07',
+				return new char [36] { '\x22', '\x3C', '\x3E', '\x7C', '\x00', '\x01', '\x02', '\x03', '\x04', '\x05', '\x06', '\x07',
 					'\x08', '\x09', '\x0A', '\x0B', '\x0C', '\x0D', '\x0E', '\x0F', '\x10', '\x11', '\x12', 
 					'\x13', '\x14', '\x15', '\x16', '\x17', '\x18', '\x19', '\x1A', '\x1B', '\x1C', '\x1D', 
-					'\x1E', '\x1F', '\x22', '\x3C', '\x3E', '\x7C' };
+					'\x1E', '\x1F' };
 			} else {
 				return new char [1] { '\x00' };
 			}
@@ -496,6 +527,8 @@
 			}
 #endif
 			// internal fields
+            WildcardChars = new char[] { '*', '?' };
+            SpaceChars = new char[] { ' ' };
 
 			DirectorySeparatorStr = DirectorySeparatorChar.ToString ();
 			PathSeparatorChars = new char [] {
Index: Test/System.IO/PathTest.cs
===================================================================
--- Test/System.IO/PathTest.cs	(revision 72268)
+++ Test/System.IO/PathTest.cs	(working copy)
@@ -834,6 +834,24 @@
 			}
 		}
 
+        [Test]
+        public void GetInvalidPathChars_Order()
+        {
+            char[] invalid = Path.GetInvalidPathChars();
+            char[] expected = new char[36] { '\x22', '\x3C', '\x3E', '\x7C', '\x00', '\x01', '\x02', '\x03', '\x04', '\x05', '\x06', '\x07',
+					'\x08', '\x09', '\x0A', '\x0B', '\x0C', '\x0D', '\x0E', '\x0F', '\x10', '\x11', '\x12', 
+					'\x13', '\x14', '\x15', '\x16', '\x17', '\x18', '\x19', '\x1A', '\x1B', '\x1C', '\x1D', 
+					'\x1E', '\x1F' };
+            if (Windows)
+            {
+                AssertEquals(expected.Length, invalid.Length);
+                for (int i = 0; i < expected.Length; i++ )
+                {
+                    AssertEquals("Character at position " + i,expected[i], invalid[i]);
+                }
+            }
+        }
+
 		[Test]
 		public void GetInvalidPathChars_Modify ()
 		{
@@ -857,6 +875,72 @@
 					Assert (i.ToString (), Array.IndexOf (invalid, s[i]) == -1);
 			}
 		}
+
+        [Test]
+        [ExpectedException(typeof(ArgumentException))]
+        public void GetFullPath_ArgumentException1()
+        {
+            Path.GetFullPath("aa*");
+        }
+
+        [Test]
+        [ExpectedException(typeof(ArgumentException))]
+        public void GetFullPath_ArgumentException2()
+        {
+            Path.GetFullPath("aa?");
+        }
+
+        [Test]
+        [ExpectedException(typeof(ArgumentException))]
+        public void GetFullPath_ArgumentException3()
+        {
+            Path.GetFullPath(":aa");
+        }
+
+        [Test]
+        [ExpectedException(typeof(ArgumentException))]
+        public void GetFullPath_ArgumentException4()
+        {
+            Path.GetFullPath("C:\\Temp\aa:");
+        }
+
+        [Test]
+        [ExpectedException(typeof(ArgumentException))]
+        public void GetFullPath_ArgumentException5()
+        {
+            try {
+                Path.GetFullPath(" aa \t \n");
+            }
+            catch (Exception e) {
+                Fail("Path should be trimmed from the end.");
+            }
+            Path.GetFullPath(" \t aa ");
+        }
+
+        [Test]
+        [ExpectedException(typeof(NotSupportedException))]
+        public void GetFullPath_NotSupportedException()
+        {
+            Path.GetFullPath("aa:");
+        }
+
+        [Test]
+        [ExpectedException(typeof(ArgumentNullException))]
+        public void GetFullPath_ArgumentNullException()
+        {
+            Path.GetFullPath(null);
+        }
+
+        [Test]
+        [ExpectedException(typeof(PathTooLongException))]
+        public void GetFullPath_PathTooLongException()
+        {
+            string path = "";
+            for (int i = 0; i < 280; i++)
+                path = path + "a";
+
+            Path.GetFullPath(path);
+        }
 #endif
 	}
 }
