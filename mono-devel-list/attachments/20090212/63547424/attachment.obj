Index: Test/Mono.Unix/UnixSignalTest.cs
===================================================================
--- Test/Mono.Unix/UnixSignalTest.cs	(revision 123183)
+++ Test/Mono.Unix/UnixSignalTest.cs	(working copy)
@@ -47,6 +47,72 @@
 		}
 
 		[Test]
+		public void TestNestedInvocation()
+		{
+			UnixSignal s = new UnixSignal(Signum.SIGINT);
+			Thread a = new Thread(delegate() {
+                                                bool r = s.WaitOne (1000, false);
+                                        });
+			Thread b = new Thread(delegate() {
+                                                bool r = s.WaitOne (500, false);
+                                        });
+			a.Start();
+			b.Start();
+			a.Join();
+			b.Join();
+		}
+
+		[Test]
+		public void TestWaitAnyFailsWithMore64Signals()
+		{
+			UnixSignal s1 = new UnixSignal(Signum.SIGINT);
+			UnixSignal[] signals = new UnixSignal[65];
+			for (int i=0; i<65; ++i)
+				signals[i] = s1;
+			
+			Assert.That(UnixSignal.WaitAny(signals, new TimeSpan(0,0,1)), Is.EqualTo(-1));
+		}
+
+		[Test]
+		public void TestConcurrentWaitOne()
+		{
+			UnixSignal s1 = new UnixSignal(Signum.SIGINT);
+			UnixSignal s2 = new UnixSignal(Signum.SIGINT);
+			Thread a = CreateWaitSignalThread(s1, 10000);
+			Thread b = CreateWaitSignalThread(s2, 5000);
+			Thread c = new Thread (delegate () {
+					Thread.Sleep (1000);
+					Stdlib.raise (Signum.SIGINT);
+			});
+			a.Start();
+			b.Start();
+			c.Start();
+			a.Join();
+			b.Join();
+			c.Join();
+			Assert.That(s1.Count, Is.EqualTo(1), "Expected 1 signal raised");
+			Assert.That(s2.Count, Is.EqualTo(1), "Expected 1 signal raised");
+		}
+
+		[Test]
+		public void TestConcurrentWaitOneSameInstance()
+		{
+			UnixSignal s1 = new UnixSignal(Signum.SIGINT);
+			Thread a = CreateWaitSignalThread(s1, 10000);
+			Thread b = CreateWaitSignalThread(s1, 10000);
+			Thread c = new Thread (delegate () {
+					Thread.Sleep (500);
+					Stdlib.raise (Signum.SIGINT);
+			});
+			a.Start();
+			b.Start();
+			c.Start();
+			a.Join();
+			b.Join();
+			c.Join();
+		}
+
+		[Test]
 		public void TestSignumProperty ()
 		{
 			UnixSignal signal1 = new UnixSignal (Signum.SIGSEGV);
Index: Mono.Unix/UnixSignal.cs
===================================================================
--- Mono.Unix/UnixSignal.cs	(revision 123183)
+++ Mono.Unix/UnixSignal.cs	(working copy)
@@ -138,7 +138,7 @@
 
 		[Map]
 		struct SignalInfo {
-			public int signum, count, read_fd, write_fd, have_handler;
+			public int signum, count, read_fd, write_fd, have_handler, pipecnt;
 			public IntPtr handler;
 		}
 
