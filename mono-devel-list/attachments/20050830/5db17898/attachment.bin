Index: Mono.Cairo/Cairo.cs
===================================================================
--- Mono.Cairo/Cairo.cs	(revision 49138)
+++ Mono.Cairo/Cairo.cs	(working copy)
@@ -33,12 +33,11 @@
 //
 
 using System;
-using System.Drawing;
 using System.Runtime.InteropServices;
 
 namespace Cairo {
 
-	public class CairoAPI
+	internal class CairoAPI
         {
                 internal const string CairoImp = "cairo";
 		
@@ -142,21 +141,17 @@
 		[DllImport (CairoImp)]
 		public static extern void cairo_new_path (IntPtr cr);
 		
-		public  delegate void MoveToCallback (object closure, PointD p);
 		internal delegate void MoveToCallbackPriv (IntPtr closure, 
 							  double x, double y);
 
-		public  delegate void LineToCallback (object closure, PointD p);
 		internal delegate void LineToCallbackPriv (IntPtr closure, 
 							  double x, double y);
 		
-		public  delegate void CurveToCallback (object closure, PointD p1, PointD p2, PointD p3);
 		internal delegate void CurveToCallbaclPriv (IntPtr closure, 
 							   double x1, double y1,
 							   double x2, double y2,
 							   double x3, double y3);
 		
-		public  delegate void ClosePathCallback (object closure);
 		internal delegate void ClosePathCallbackPriv (IntPtr closure);		
 		
 		[DllImport (CairoImp)]
@@ -641,5 +636,12 @@
                 public  double y;
         }
 
+		public  delegate void ClosePathCallback (object closure);
 
+		public  delegate void CurveToCallback (object closure, PointD p1, PointD p2, PointD p3);
+
+		public  delegate void MoveToCallback (object closure, PointD p);
+
+		public  delegate void LineToCallback (object closure, PointD p);
+
 }
Index: Mono.Cairo/Graphics.cs
===================================================================
--- Mono.Cairo/Graphics.cs	(revision 49138)
+++ Mono.Cairo/Graphics.cs	(working copy)
@@ -34,7 +34,6 @@
 //
 
 using System;
-using System.Drawing;
 using System.Runtime.InteropServices;
 using Cairo;
 
@@ -110,7 +109,7 @@
 		
 		~Graphics ()
 		{
-			Console.WriteLine ("Cairo not thread safe, you might want to call IDisposable.Dispose on Cairo.Surface");
+			Dispose (false);
 		}
 
 		void IDisposable.Dispose ()
@@ -122,7 +121,7 @@
                 protected virtual void Dispose (bool disposing)
                 {
 			if (!disposing){
-				Console.WriteLine ("Cairo.Graphics: called from thread");
+				//Console.WriteLine ("Cairo.Graphics: called from thread");
 				return;
 			}
 			
@@ -302,10 +301,10 @@
                         CairoAPI.cairo_new_path (state);
                 }
         
-		public void CurrentPath (CairoAPI.MoveToCallback move_to, 
-					 CairoAPI.LineToCallback line_to,
-					 CairoAPI.CurveToCallback curve_to,
-					 CairoAPI.ClosePathCallback close_path,
+		public void CurrentPath (MoveToCallback move_to, 
+					 LineToCallback line_to,
+					 CurveToCallback curve_to,
+					 ClosePathCallback close_path,
 					 object closure)
 		{
 			
@@ -313,29 +312,54 @@
 		
                 public void MoveTo (PointD p)
                 {
-                        CairoAPI.cairo_move_to (state, p.X, p.Y);
+						MoveTo (p.X, p.Y);
                 }
+
+				public void MoveTo (double x, double y)
+				{
+                        CairoAPI.cairo_move_to (state, x, y);
+				}
                 
                 public void LineTo (PointD p)
+				{
+						LineTo (p.X, p.Y);
+				}
+
+				public void LineTo (double x, double y)
                 {
-                        CairoAPI.cairo_line_to (state, p.X, p.Y);
+                        CairoAPI.cairo_line_to (state, x, y);
                 }
 
                 public void CurveTo (PointD p1, PointD p2, PointD p3)
+				{
+						CurveTo (p1.X, p1.Y, p2.X, p2.Y, p3.X, p3.Y);
+				}
+				
+                public void CurveTo (double x1, double y1, double x2, double y2, double x3, double y3)
                 {
-                        CairoAPI.cairo_curve_to (state, p1.X, p1.Y, p2.X, p2.Y, p3.X, p3.Y);
+                        CairoAPI.cairo_curve_to (state, x1, y1, x2, y2, x3, y3);
                 }
 
                 public void RelMoveTo (PointD p)
+				{
+						RelMoveTo (p.X, p.Y);
+				}
+				
+                public void RelMoveTo (double x, double y)
                 {
-                        CairoAPI.cairo_rel_move_to (state, p.X, p.Y);
+                        CairoAPI.cairo_rel_move_to (state, x, y);
                 }
 
                 public void RelLineTo (PointD p)
                 {
-                        CairoAPI.cairo_rel_line_to (state, p.X, p.Y);
+						RelLineTo (p.X, p.Y);
                 }
 
+                public void RelLineTo (double x, double y)
+				{
+                        CairoAPI.cairo_rel_line_to (state, x, y);
+				}
+
                 public void RelCurveTo (double dx1, double dy1, double dx2, double dy2, double dx3, double dy3)
                 {
                         CairoAPI.cairo_rel_curve_to (state, dx1, dy1, dx2, dy2, dx3, dy3); 
@@ -353,12 +377,22 @@
 		
 		public void ArcTo (PointD p1, PointD p2, double radius)
 		{
-			CairoAPI.cairo_arc_to (state, p1.X, p1.Y, p2.X, p2.Y, radius);
+				ArcTo (p1.X, p1.Y, p2.X, p2.Y, radius);
 		}
+		
+		public void ArcTo (double x1, double y1, double x2, double y2, double radius)
+		{
+			CairoAPI.cairo_arc_to (state, x1, y1, x2, y2, radius);
+		}
                 
                 public void Rectangle (PointD p, double width, double height)
+				{
+						Rectangle (p.X, p.Y, width, height);
+				}
+
+                public void Rectangle (double x, double y, double width, double height)
                 {
-                        CairoAPI.cairo_rectangle (state, p.X, p.Y, width, height);
+                        CairoAPI.cairo_rectangle (state, x, y, width, height);
                 }
                 
                 public void ClosePath ()
Index: Mono.Cairo/Matrix.cs
===================================================================
--- Mono.Cairo/Matrix.cs	(revision 49138)
+++ Mono.Cairo/Matrix.cs	(working copy)
@@ -30,15 +30,13 @@
 //
 
 using System;
-using System.Drawing;
 using System.Runtime.InteropServices;
-using Cairo;
 
 namespace Cairo {
    
                   
    [StructLayout(LayoutKind.Sequential)]
-   public struct Matrix_T
+   internal struct Matrix_T
    {
 	   public double xx; 
 	   public double yx;
@@ -136,7 +134,7 @@
                         CairoAPI.cairo_matrix_transform_point (ref matrix, ref x, ref y);
 		}
 		
-                public Matrix_T Pointer {
+                internal Matrix_T Pointer {
                         get { return matrix; }
 			set { matrix = value; }
                 }
Index: Mono.Cairo/Surface.cs
===================================================================
--- Mono.Cairo/Surface.cs	(revision 49138)
+++ Mono.Cairo/Surface.cs	(working copy)
@@ -33,10 +33,7 @@
 //
 
 using System;
-using System.Drawing;
-using System.Runtime.InteropServices;
 using System.Collections;
-using Cairo;
 
 namespace Cairo {
 
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 49138)
+++ ChangeLog	(working copy)
@@ -1,3 +1,14 @@
+2005-08-30  John Luke  <john.luke@gmail.com>
+
+	* Mono.Cairo/Cairo.cs: mark CairoAPI internal, and move
+	some callback delegates outside the CairoAPI class
+	* Mono.Cairo.Matrix.cs: mark Matrix_T internal
+	* Mono.Cairo/*.cs: remove using System.Drawing;
+	* Mono.Cairo.Graphics.cs: fix IDisposable implementation
+	add overloads to MoveTo () and similar functions
+	for passing the parameters individually
+	* Makefile: remove -r:System.Drawing
+	
 2005-08-12 Hisham Mardam Bey <hisham.mardambey@gmail.com>
         * Added xlib surface size / font size functions
         * Added font matrix setting
Index: Makefile
===================================================================
--- Makefile	(revision 49138)
+++ Makefile	(working copy)
@@ -3,7 +3,7 @@
 include ../../build/rules.make
 
 LIBRARY = Mono.Cairo.dll
-LIB_MCS_FLAGS = /r:System.Drawing.dll
+LIB_MCS_FLAGS = 
 NO_TEST = yes
 
 EXTRA_DISTFILES =
