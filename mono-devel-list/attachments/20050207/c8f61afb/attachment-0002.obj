--- MonoWSDL.cs.orig	Sun Feb  6 16:00:37 2005
+++ MonoWSDL.cs	Sun Feb  6 18:20:30 2005
@@ -17,9 +17,7 @@
 using System.Net;
 using System.Web.Services.Description;
 using System.Web.Services.Discovery;
-using System.Reflection;
-
-using Microsoft.CSharp;
+using System.Reflection;
 
 namespace Mono.WebServices
 {
@@ -217,24 +215,30 @@
 		///
 		private CodeDomProvider GetProvider()
 		{
-			// FIXME these should be loaded dynamically using reflection
-			CodeDomProvider provider;
-			
-			switch (language.ToUpper())
-			{
-			    case "CS":
-				    provider = new CSharpCodeProvider();
-				    break;
-			    
-				case "VB":
-					provider = new Microsoft.VisualBasic.VBCodeProvider();
-					break;
-					
-			    default:
-				    throw new Exception("Unknow language");
-			}
-
-			return provider;
+			bool providerExists = false;
+			string machineConfig = System.Web.HttpRuntime.MachineConfigurationDirectory + Path.DirectorySeparatorChar + "machine.config";
+                        XmlDocument xml = new XmlDocument();
+                        xml.Load(machineConfig);
+                        XmlNodeList nodeList = xml.GetElementsByTagName("compiler");
+                        foreach(XmlNode node in nodeList) {
+                    		if(node.Attributes["language"].Value.IndexOf(language.ToLower()) != -1) {
+                            		string[] info    = node.Attributes["type"].Value.Split(',');
+                            		Type     type    = null;
+                            		string   asmName = info[1];
+                            		string   version = info[2];
+                            		string   culture = info[3];
+                            		string   token   = info[4];
+                            		
+					Assembly asm = Assembly.Load(asmName + "," + version + "," + culture + "," + token);
+                            		if(asm != null)
+                                		type = asm.GetType(info[0]);
+                            		return (CodeDomProvider) Activator.CreateInstance(type);
+                        	}
+                        }
+			if(! providerExists)
+			    throw new Exception("Unknown language: " + language);
+			return null;
+			
 		}
 	}
 	