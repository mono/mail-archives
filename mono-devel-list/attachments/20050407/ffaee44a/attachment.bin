Index: ilasm/codegen/TypeDef.cs
===================================================================
--- ilasm/codegen/TypeDef.cs	(revision 42498)
+++ ilasm/codegen/TypeDef.cs	(working copy)
@@ -69,7 +69,7 @@
                         is_intransit = false;
 
                         is_value_class = false;
-                        is_value_class = false;
+                        is_enum_class = false;
                 }
 
                 public string Name {
@@ -250,16 +250,27 @@
                                         throw new Exception ("this type can not be a base type: "
                                                         + parent);
                                 }
+
+                                if (parent.PeapiClass.nameSpace != null && 
+                                        parent.PeapiClass.nameSpace.CompareTo ("System") == 0) {
+                                        
+                                        if (parent.PeapiClass.name.CompareTo ("ValueType") == 0)
+                                                is_value_class = true;
+                                        else
+                                        if (parent.PeapiClass.name.CompareTo ("Enum") == 0 )
+                                                is_enum_class = true;          
+                                } 
+
                                 if (outer != null) {
                                         if (!outer.IsDefined)
                                                 outer.Define (code_gen);
                                         classdef = outer.PeapiType.AddNestedClass (attr,
                                                         name_space, name, parent.PeapiClass);
                                 } else {
-                                        if (is_value_class) {
+                                        if (is_value_class || is_enum_class) {
                                                 // Should probably confirm that the parent is System.ValueType
                                                 classdef = code_gen.PEFile.AddValueClass (attr,
-                                                        name_space, name);
+                                                        name_space, name, is_value_class ? PEAPI.ValueClass.ValueType : PEAPI.ValueClass.Enum);
                                         } else {
                                                 classdef = code_gen.PEFile.AddClass (attr,
                                                         name_space, name, parent.PeapiClass);
@@ -272,9 +283,9 @@
                                         classdef = outer.PeapiType.AddNestedClass (attr,
                                                 name_space, name);
                                 } else {
-                                        if (is_value_class) {
+                                        if (is_value_class || is_enum_class) {
                                                 classdef = code_gen.PEFile.AddValueClass (attr,
-                                                        name_space, name);
+                                                        name_space, name, is_value_class ? PEAPI.ValueClass.ValueType : PEAPI.ValueClass.Enum);
                                         } else {
                                                 classdef = code_gen.PEFile.AddClass (attr,
                                                         name_space, name);
Index: ilasm/codegen/MethodDef.cs
===================================================================
--- ilasm/codegen/MethodDef.cs	(revision 42498)
+++ ilasm/codegen/MethodDef.cs	(working copy)
@@ -31,7 +31,6 @@
                 private ITypeRef ret_type;
                 private ArrayList typar_list;
                 private ArrayList param_list;
-                private Hashtable named_param_table;
                 private ArrayList inst_list;
                 private ArrayList customattr_list;
                 private Hashtable label_table;
@@ -71,7 +70,6 @@
                         label_list = new ArrayList ();
                         local_list = new ArrayList ();
                         named_local_table = new Hashtable ();
-                        named_param_table = new Hashtable ();
 
                         entry_point = false;
                         zero_init = false;
@@ -82,7 +80,6 @@
                         is_defined = false;
                         is_resolved = false;
                         CreateSignature ();
-                        CreateNamedParamTable ();
 
 			codegen.BeginMethodDef (this);
 
@@ -211,7 +208,12 @@
 
                 public int GetNamedParamPos (string name)
                 {
-                        int pos = (int) named_param_table[name];
+                        int pos = -1;
+                        foreach (ParamDef param in param_list) {
+                                pos ++;
+                                if (param.Name.CompareTo (name) == 0)
+                                        return pos;
+                        }
 
                         return pos;
                 }
@@ -664,20 +666,6 @@
                         return builder.ToString ();
                 }
 
-                private void CreateNamedParamTable ()
-                {
-                        if (param_list == null)
-                                return;
-
-                        int count = (IsStatic ? 0 : 1);
-                        
-                        foreach (ParamDef param in param_list) {
-                                if (param.Name != null)
-                                        named_param_table.Add (param.Name, count);
-                                count++;
-                        }
-                }
-
                 private void FixAttributes ()
                 {
                         if (name == ".ctor" || name == ".cctor")
Index: ilasm/parser/ILParser.jay
===================================================================
--- ilasm/parser/ILParser.jay	(revision 42498)
+++ ilasm/parser/ILParser.jay	(working copy)
@@ -720,7 +720,7 @@
                           }
 			| K_VALUETYPE OPEN_BRACKET slashed_name CLOSE_BRACKET slashed_name
                           {
-                                ExternTypeRef ext_ref = codegen.ExternTable.GetTypeRef ((string) $3, (string) $5, false);
+                                ExternTypeRef ext_ref = codegen.ExternTable.GetTypeRef ((string) $3, (string) $5, true);
                                 ExternTypeRefInst inst = new ExternTypeRefInst (ext_ref, true);
                                 $$ = inst;
                           }
@@ -1254,11 +1254,11 @@
                           }
 			| K_FLOAT32 OPEN_PARENS int64 CLOSE_PARENS
                           {
-                                $$ = new FloatConst (Convert.ToSingle ($3));
+                                $$ = new FloatConst (BitConverter.ToSingle (BitConverter.GetBytes ((long)$3), BitConverter.IsLittleEndian ? 0 : 4));
                           }
 			| K_FLOAT64 OPEN_PARENS int64 CLOSE_PARENS
                           {
-                                $$ = new DoubleConst (Convert.ToDouble ($3));
+                                $$ = new DoubleConst (BitConverter.Int64BitsToDouble ((long)$3));
                           }
 			| K_INT64 OPEN_PARENS int64 CLOSE_PARENS
                           {
Index: class/PEAPI/PEAPI.cs
===================================================================
--- class/PEAPI/PEAPI.cs	(revision 42498)
+++ class/PEAPI/PEAPI.cs	(working copy)
@@ -100,11 +100,11 @@
                           private Type type;
                           private bool is_value;
 
-            public ClassRefInst (Type type, bool is_value) : base (0x12) {
+            public ClassRefInst (Type type, bool is_value) : base (PrimitiveType.Class.GetTypeIndex ()) {
                     this.type = type;
                     this.is_value = is_value;
                     if (is_value)
-                            type.SetTypeIndex (0x11);
+                          typeIndex = PrimitiveType.ValueType.GetTypeIndex ();
                     tabIx = MDTable.TypeSpec;
             }
 
@@ -227,7 +227,7 @@
     /// Create a new array  -   elementType[]
     /// </summary>
     /// <param name="elementType">the type of the array elements</param>
-    public ZeroBasedArray(Type elementType) : base (elementType,0x1D) { }
+    public ZeroBasedArray(Type elementType) : base (elementType, PrimitiveType.SZArray.GetTypeIndex ()) { }
 
     internal sealed override void TypeSig(MemoryStream str) {
       str.WriteByte(typeIndex);
@@ -481,7 +481,7 @@
       ClassRef aClass = new ClassRef(nsName,name,metaData);
       metaData.AddToTable(MDTable.TypeRef,aClass);
       aClass.SetParent(this);
-      aClass.MakeValueClass();
+      aClass.MakeValueClass(ValueClass.ValueType);
       return aClass;
     }
 
@@ -735,7 +735,7 @@
       PrimitiveType.IntPtr.GetName().GetHashCode(),
       PrimitiveType.UIntPtr.GetName().GetHashCode(),
       PrimitiveType.Object.GetName().GetHashCode(),
-      "ValueType".GetHashCode(),
+      PrimitiveType.ValueType.GetName ().GetHashCode(),
       "Enum".GetHashCode()
     };
 
@@ -787,12 +787,13 @@
               systemClasses[i] = new SystemClass(systemTypes[i],this,metaData);
               if ((systemTypes[i] != PrimitiveType.Object) &&
                 (systemTypes[i] != PrimitiveType.String)) {
-                systemClasses[i].MakeValueClass();
+                systemClasses[i].MakeValueClass(ValueClass.ValueType);
               }
             } else {
               systemClasses[i] = new ClassRef(nsName,name,metaData);
               systemClasses[i].SetParent(this);
-              systemClasses[i].MakeValueClass();
+              if (!ClassDef.IsValueType (nsName, name) && !ClassDef.IsEnum (nsName, name))
+                systemClasses[i].MakeValueClass(ValueClass.ValueType);
             }
             metaData.AddToTable(MDTable.TypeRef,systemClasses[i]);
           }
@@ -817,7 +818,7 @@
       if (systemClasses[ix] == null) {
         systemClasses[ix] = new ClassRef(systemName,name,metaData);
         systemClasses[ix].SetParent(this);
-        systemClasses[ix].MakeValueClass();
+        systemClasses[ix].MakeValueClass(ValueClass.ValueType);
         metaData.AddToTable(MDTable.TypeRef,systemClasses[ix]);
       }
       return systemClasses[ix];
@@ -827,13 +828,25 @@
       if (systemClasses[valueTypeIx] == null) {
         ClassRef valType = new ClassRef("System","ValueType",metaData);
         valType.SetParent(this);
-        valType.MakeValueClass();
+        valType.MakeValueClass(ValueClass.ValueType);
         metaData.AddToTable(MDTable.TypeRef,valType);
         systemClasses[valueTypeIx] = valType;
       }
       return systemClasses[valueTypeIx];
     }
 
+    internal ClassRef EnumType() {
+      //systemClasses [ valueTypeIx + 1] -> System.Enum
+      if (systemClasses[valueTypeIx + 1] == null) {
+        ClassRef valType = new ClassRef("System","Enum",metaData);
+        valType.SetParent(this);
+        valType.MakeValueClass(ValueClass.Enum);
+        metaData.AddToTable(MDTable.TypeRef,valType);
+        systemClasses[valueTypeIx + 1] = valType;
+      }
+      return systemClasses[valueTypeIx + 1];
+    }
+
     /// <summary>
     /// Add a value class to this external assembly
     /// </summary>
@@ -851,11 +864,17 @@
       ClassRef aClass = new ClassRef(nsName,name,metaData);
       metaData.AddToTable(MDTable.TypeRef,aClass);
       aClass.SetParent(this);
-      aClass.MakeValueClass();
+      aClass.MakeValueClass(ValueClass.ValueType);
       return aClass;
     }
 
         }
+        public enum ValueClass
+        {
+                ValueType,
+                Enum
+        }
+
   /**************************************************************************/  
         /// <summary>
         /// Signature for calli instruction
@@ -1695,11 +1714,11 @@
         public abstract class Class : Type
         {
     protected int row = 0;
-    protected string name, nameSpace;
+    public string name, nameSpace;
     protected uint nameIx, nameSpaceIx;
                 protected MetaData _metaData;
                 internal Class(string nameSpaceName, string className, MetaData md)
-                                                              : base(0x12) {
+                                                              : base(PrimitiveType.Class.GetTypeIndex ()) {
       nameSpace = nameSpaceName;
       name = className;
       nameIx = md.AddToStringsHeap(name);
@@ -1707,15 +1726,15 @@
       _metaData = md;
     }
 
-    internal Class(uint nsIx, uint nIx) : base(0x12) {
+    internal Class(uint nsIx, uint nIx) : base(PrimitiveType.Class.GetTypeIndex ()) {
       nameSpaceIx = nsIx;
       nameIx = nIx;
     }
 
     internal virtual uint TypeDefOrRefToken() { return 0; }
 
-    internal virtual void MakeValueClass() {
-      typeIndex = 0x11;
+    internal virtual void MakeValueClass(ValueClass vClass) {
+      typeIndex = PrimitiveType.ValueType.GetTypeIndex ();
     }
         
     internal virtual string TypeName() {
@@ -1771,8 +1790,12 @@
         typeIndexChecked = false;
     }
 
-    internal override void MakeValueClass() {
-      superType = metaData.mscorlib.ValueType();
+    internal override void MakeValueClass(ValueClass vClass) {
+      if (vClass == ValueClass.Enum)  
+        superType = metaData.mscorlib.EnumType();
+      else  
+        superType = metaData.mscorlib.ValueType();
+
       typeIndex = superType.GetTypeIndex();
     }
 
@@ -1902,13 +1925,34 @@
     /// <returns>a descriptor for this new nested class</returns>
     public ClassDef AddNestedClass(TypeAttr attrSet, string nsName, 
                                    string name) {
-      ClassDef nClass = new ClassDef(attrSet,nsName,name,metaData);
+      ClassDef nClass = new ClassDef(attrSet,"",name,metaData);
       metaData.AddToTable(MDTable.TypeDef,nClass);
       metaData.AddToTable(MDTable.NestedClass,new MapElem(nClass,Row,MDTable.TypeDef));
       nClass.parentClass = this;
       return (nClass);
      }
+    public static bool IsValueType (Class type)
+    {
+        return IsValueType (type.nameSpace, type.name);
+    }
 
+    public static bool IsEnum (Class type)
+    {
+        return IsEnum (type.nameSpace, type.name);
+    }
+    
+    public static bool IsValueType (string nsName, string name)
+    {
+      return ((nsName.CompareTo ("System") == 0) && 
+        (name.CompareTo ("ValueType") == 0));
+    }
+
+    public static bool IsEnum (string nsName, string name)
+    {
+      return ((nsName.CompareTo ("System") == 0) && 
+        (name.CompareTo ("Enum") == 0));
+    }
+
     /// <summary>
     /// Add a nested class to this class
     /// </summary>
@@ -1919,12 +1963,17 @@
     /// <returns>a descriptor for this new nested class</returns>
     public ClassDef AddNestedClass(TypeAttr attrSet, string nsName, 
                                    string name, Class sType) {
-      ClassDef nClass = new ClassDef(attrSet,nsName,name,metaData);
+      ClassDef nClass = AddNestedClass (attrSet, nsName, name);
       nClass.SetSuper(sType);
-      metaData.AddToTable(MDTable.TypeDef,nClass);
-      metaData.AddToTable(MDTable.NestedClass,
-                          new MapElem(nClass,Row,MDTable.TypeDef));
-      nClass.parentClass = this;
+      if (ClassDef.IsValueType (sType))
+        nClass.MakeValueClass (ValueClass.ValueType);
+      else
+      if (ClassDef.IsEnum (sType))
+        nClass.MakeValueClass (ValueClass.Enum);
+      
+      if (ClassDef.IsValueType (sType) || ClassDef.IsEnum (sType))
+        nClass.SetTypeIndex (PrimitiveType.ValueType.GetTypeIndex ());
+
       return (nClass);
     }
 
@@ -2268,6 +2317,7 @@
     byte[] val;
 
     public ByteArrConst(byte[] val) {
+      type = PrimitiveType.String;
       this.val = val;
       size = (uint)val.Length;
     }
@@ -5840,7 +5890,7 @@
       ClassRef aClass = new ClassRef(nsName,name,metaData);
       metaData.AddToTable(MDTable.TypeRef,aClass);
       aClass.SetParent(this);
-      aClass.MakeValueClass();
+      aClass.MakeValueClass(ValueClass.ValueType);
       return aClass;
     }
 
@@ -5861,7 +5911,7 @@
       ExternClassRef cRef = new ExternClassRef(attrSet,nsName,name,declFile,metaData);
       metaData.AddToTable(MDTable.TypeRef,cRef);
       cRef.SetParent(this);
-      if (isValueClass) cRef.MakeValueClass();
+      if (isValueClass) cRef.MakeValueClass(ValueClass.ValueType);
       return cRef;
     }
 
@@ -6392,9 +6442,10 @@
     /// <param name="nsName">name space name</param>
     /// <param name="name">class name</param>
     /// <returns>a descriptor for this new class</returns>
-    public ClassDef AddValueClass(TypeAttr attrSet, string nsName, string name) {
+    public ClassDef AddValueClass(TypeAttr attrSet, string nsName, string name, ValueClass vClass) {
       ClassDef aClass = new ClassDef(attrSet,nsName,name,metaData);
-      aClass.MakeValueClass();
+      aClass.MakeValueClass(vClass);
+      aClass.SetTypeIndex (PrimitiveType.ValueType.GetTypeIndex ());
       metaData.AddToTable(MDTable.TypeDef,aClass);
       return aClass;
     }
@@ -6491,6 +6542,8 @@
     public static readonly PrimitiveType UIntPtr = new PrimitiveType(0x19,"UIntPtr",16);
     public static readonly PrimitiveType Object = new PrimitiveType(0x1C,"Object",17);
     internal static readonly PrimitiveType ClassType = new PrimitiveType(0x50);
+    internal static readonly PrimitiveType SZArray = new PrimitiveType(0x1D);
+    internal static readonly PrimitiveType ValueType = new PrimitiveType(0x11, "ValueType", 18);
     public static readonly PrimitiveType NativeInt = IntPtr;
     public static readonly PrimitiveType NativeUInt = UIntPtr;
 