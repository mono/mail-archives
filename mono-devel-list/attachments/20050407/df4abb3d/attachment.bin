Index: AssemblyTest.cs
===================================================================
--- AssemblyTest.cs	(revisi贸n: 42636)
+++ AssemblyTest.cs	(copia de trabajo)
@@ -188,6 +188,36 @@
 			Assembly corlib2 = Assembly.LoadWithPartialName ("corlib_plattest");
 			Assert.IsTrue (corlib != null || corlib2 != null);
 		}
+
+#if NET_2_0
+		[Test]
+		public void ReflectionOnlyLoad ()
+		{
+			Assembly assembly = Assembly.ReflectionOnlyLoad (typeof (AssemblyTest).Assembly.FullName);
+			
+			Assert.IsNotNull (assembly);
+			Assert.IsTrue (assembly.ReflectionOnly);
+		}
+
+		[Test]
+		public void ReflectionOnlyLoadFrom ()
+		{
+			string loc = typeof (AssemblyTest).Assembly.Location;
+			string filename = Path.GetFileName (loc);
+			Assembly assembly = Assembly.ReflectionOnlyLoadFrom (filename);
+
+			Assert.IsNotNull (assembly);
+			Assert.IsTrue (assembly.ReflectionOnly);
+		}
+
+		[Test]
+		[ExpectedException (typeof (ArgumentException))]
+		public void CreateInstanceOnRefOnly ()
+		{
+			Assembly assembly = Assembly.ReflectionOnlyLoad (typeof (AssemblyTest).Assembly.FullName);
+			assembly.CreateInstance ("MonoTests.System.Reflection.AssemblyTest");
+		}
+#endif
 	}
 }
 
Index: MethodInfoTest.cs
===================================================================
--- MethodInfoTest.cs	(revisi贸n: 42636)
+++ MethodInfoTest.cs	(copia de trabajo)
@@ -153,7 +153,30 @@
 			else
 				AssertEquals (false, locals [1].IsPinned);
 		}
+
+		[Test]
+		[ExpectedException (typeof (InvalidOperationException))]
+		public void InvokeOnRefOnlyAssembly ()
+		{
+			Assembly a = Assembly.ReflectionOnlyLoad (typeof (MethodInfoTest).Assembly.FullName);
+			Type t = a.GetType (typeof (RefOnlyClass).FullName);
+			MethodInfo m = t.GetMethod ("RefOnlyMethod", BindingFlags.Static | BindingFlags.NonPublic);
+			
+			m.Invoke (null, new object [0]);
+		}
+
 #endif
 	}
+	
+#if NET_2_0
+	// Helper class
+	class RefOnlyClass 
+	{
+		// Helper static method
+		static void RefOnlyMethod ()
+		{
+		}
+	}
+#endif
 }
 
Index: FieldInfoTest.cs
===================================================================
--- FieldInfoTest.cs	(revisi贸n: 42636)
+++ FieldInfoTest.cs	(copia de trabajo)
@@ -95,6 +95,37 @@
 		AssertEquals (typeof (Marshal1), Type.GetType (attr.MarshalType));
 		*/
 	}
+
+	[Test]
+	[ExpectedException (typeof (InvalidOperationException))]
+	public void GetValueOnRefOnlyAssembly ()
+	{
+		Assembly assembly = Assembly.ReflectionOnlyLoad (typeof (FieldInfoTest).Assembly.FullName);
+		Type t = assembly.GetType (typeof (RefOnlyClass).FullName);
+		FieldInfo f = t.GetField ("RefOnlyField", BindingFlags.Static | BindingFlags.NonPublic);
+
+		f.GetValue (null);
+	}
+	
+	[Test]
+	[ExpectedException (typeof (InvalidOperationException))]
+	public void SetValueOnRefOnlyAssembly ()
+	{
+		Assembly assembly = Assembly.ReflectionOnlyLoad (typeof (FieldInfoTest).Assembly.FullName);
+		Type t = assembly.GetType (typeof (RefOnlyClass).FullName);
+		FieldInfo f = t.GetField ("RefOnlyField", BindingFlags.Static | BindingFlags.NonPublic);
+
+		f.SetValue (null, 8);
+	}
+	
 #endif
 }		
+#if NET_2_0
+// Helper class
+class RefOnlyClass 
+{
+	// Helper property
+	static int RefOnlyField;
 }
+#endif
+}
Index: PropertyInfoTest.cs
===================================================================
--- PropertyInfoTest.cs	(revisi贸n: 42636)
+++ PropertyInfoTest.cs	(copia de trabajo)
@@ -29,7 +29,6 @@
 						
 		}
 
-
 		private class TestClass 
 		{
 			public string ReadOnlyProperty 
