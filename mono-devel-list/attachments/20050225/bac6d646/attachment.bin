Index: System/ActivatorTest.cs
===================================================================
--- System/ActivatorTest.cs	(revisión: 41118)
+++ System/ActivatorTest.cs	(copia de trabajo)
@@ -91,6 +91,20 @@
        // all the overriden functions using activationAttribute
       }
 
+#if NET_2_0
+      [Test]
+      [ExpectedException (typeof (InvalidOperationException))]
+      public void CreateInstanceOnRefOnlyAssembly ()
+      {
+      // Load assembly itself
+      Assembly a = Assembly.ReflectionOnlyLoad (typeof (ActivatorTest).Assembly);
+      Type t = a.GetType (typeof (ActivatorTest).FullName);
+      
+      Activator.CreateInstance (t);
+      }
+
+#endif
+
     // This method tests GetObject from the Activator class
     [Test]
       public void GetObject()
Index: System.Reflection/MethodInfoTest.cs
===================================================================
--- System.Reflection/MethodInfoTest.cs	(revisión: 41118)
+++ System.Reflection/MethodInfoTest.cs	(copia de trabajo)
@@ -151,6 +151,23 @@
 			else
 				AssertEquals (false, locals [1].IsPinned);
 		}
+
+		// Helper static method
+		static void RefOnlyMethod ()
+		{
+		}
+
+		[Test]
+		[ExpectedException (typeof (InvalidOperationException))]
+		public void InvokeOnRefOnlyAssembly ()
+		{
+			// Load the assembly itself
+			Assembly a = Assembly.ReflectionOnlyLoad (typeof (MethodInfoTest).Assembly.FullName);
+			Type t = a.GetType (typeof (MethodInfoTest).FullName);
+			MethodInfo m = t.GetMethod ("RefOnlyMethod", BindingFlags.Static | BindingFlags.NonPublic);
+
+			m.Invoke (null, new object [0]);
+		}
 #endif
 	}
 }
Index: System.Reflection/FieldInfoTest.cs
===================================================================
--- System.Reflection/FieldInfoTest.cs	(revisión: 41118)
+++ System.Reflection/FieldInfoTest.cs	(copia de trabajo)
@@ -95,6 +95,34 @@
 		AssertEquals (typeof (Marshal1), Type.GetType (attr.MarshalType));
 		*/
 	}
+
+	// Helper property
+	static int RefOnlyField;
+
+	[Test]
+	[ExpectedException (typeof (InvalidOperationException))]
+	public void GetValueOnRefOnlyAssembly ()
+	{
+		// Load the assembly itself
+		Assembly a = Assembly.ReflectionOnlyLoad (typeof (FieldInfoTest).Assembly.FullName);
+		Type t = a.GetType (typeof (FieldInfoTest).FullName);
+		FieldInfo f = t.GetField ("RefOnlyField", BindingFlags.Static | BindingFlags.NonPublic);
+
+		f.GetValue (null);
+	}
+	
+	[Test]
+	[ExpectedException (typeof (InvalidOperationException))]
+	public void SetValueOnRefOnlyAssembly ()
+	{
+		// Load the assembly itself
+		Assembly a = Assembly.ReflectionOnlyLoad (typeof (FieldInfoTest).Assembly.FullName);
+		Type t = a.GetType (typeof (FieldInfoTest).FullName);
+		FieldInfo f = t.GetField ("RefOnlyField", BindingFlags.Static | BindingFlags.NonPublic);
+
+		f.SetValue (null, 8);
+	}
+	
 #endif
 }		
 }
