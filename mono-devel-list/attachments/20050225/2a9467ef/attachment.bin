Index: mono/metadata/domain.c
===================================================================
--- mono/metadata/domain.c	(revision 41202)
+++ mono/metadata/domain.c	(working copy)
@@ -105,10 +105,8 @@
 gint32
 mono_domain_get_tls_offset (void)
 {
-	int offset = -1;
+	gint32 offset;
 	MONO_THREAD_VAR_OFFSET (tls_appdomain, offset);
-/*	__asm ("jmp 1f; .section writetext, \"awx\"; 1: movl $tls_appdomain@ntpoff, %0; jmp 2f; .previous; 2:"
-		: "=r" (offset));*/
 	return offset;
 }

Index: mono/metadata/threads.c
===================================================================
--- mono/metadata/threads.c	(revision 41202)
+++ mono/metadata/threads.c	(working copy)
@@ -148,7 +148,7 @@
 gint32
 mono_thread_get_tls_offset (void)
 {
-	int offset;
+	gint32 offset;
 	MONO_THREAD_VAR_OFFSET (tls_current_object,offset);
 	return offset;
 }
 typedef struct {
Index: mono/mini/mini.c
===================================================================
--- mono/mini/mini.c	(revision 41202)
+++ mono/mini/mini.c	(working copy)
@@ -7264,7 +7280,7 @@
 gint32
 mono_get_lmf_tls_offset (void)
 {
-	int offset;
+	gint32 offset;
 	MONO_THREAD_VAR_OFFSET(mono_lmf_addr,offset);
 	return offset;
 }
Index: mono/mini/mini-amd64.c
===================================================================
--- mono/mini/mini-amd64.c	(revision 41202)
+++ mono/mini/mini-amd64.c	(working copy)
@@ -5621,55 +5621,11 @@
 }

 /*
- * Support for fast access to the thread-local lmf structure using the GS
- * segment register on NPTL + kernel 2.6.x.
+ * Support for fast access to the thread-local data using the FS
+ * segment register
  */
-
 static gboolean tls_offset_inited = FALSE;

-/* code should be simply return <tls var>; */
-static int
-read_tls_offset_from_method (void* method)
-{
-	guint8 *code = (guint8*)method;
-
-	/*
-	 * Determine the offset of mono_lfm_addr inside the TLS structures
-	 * by disassembling the function above.
-	 */
-	/* This is generated by gcc 3.3.2 */
-	if ((code [0] == 0x55) && (code [1] == 0x48) && (code [2] == 0x89) &&
-		(code [3] == 0xe5) && (code [4] == 0x64) && (code [5] == 0x48) &&
-		(code [6] == 0x8b) && (code [7] == 0x04) && (code [8] == 0x25) &&
-		(code [9] == 0x00) && (code [10] == 0x00) && (code [11] == 0x00) &&
-		(code [12] == 0x0) && (code [13] == 0x48) && (code [14] == 0x8b) &&
-		(code [15] == 0x80)) {
-		return *(gint32*)&(code [16]);
-	} else if
-		/* This is generated by gcc-3.3.2 with -O=2 */
-		/* mov fs:0, %rax ; mov <offset>(%rax), %rax ; retq */
-		((code [0] == 0x64) && (code [1] == 0x48) && (code [2] == 0x8b) &&
-		 (code [3] == 0x04) && (code [4] == 0x25) &&
-		 (code [9] == 0x48) && (code [10] == 0x8b) && (code [11] == 0x80) &&
-		 (code [16] == 0xc3)) {
-			return *(gint32*)&(code [12]);
-	} else if
-		/* This is generated by gcc-3.4.1 */
-		((code [0] == 0x55) && (code [1] == 0x48) && (code [2] == 0x89) &&
-		 (code [3] == 0xe5) && (code [4] == 0x64) && (code [5] == 0x48) &&
-		 (code [6] == 0x8b) && (code [7] == 0x04) && (code [8] == 0x25) &&
-		 (code [13] == 0xc9) && (code [14] == 0xc3)) {
-			return *(gint32*)&(code [9]);
-	} else if
-		/* This is generated by gcc-3.4.1 with -O=2 */
-		((code [0] == 0x64) && (code [1] == 0x48) && (code [2] == 0x8b) &&
-		 (code [3] == 0x04) && (code [4] == 0x25)) {
-		return *(gint32*)&(code [5]);
-	}
-
-	return -1;
-}
-
 void
 mono_arch_setup_jit_tls_data (MonoJitTlsData *tls)
 {
@@ -5683,12 +5639,11 @@

 	if (!tls_offset_inited) {
 		tls_offset_inited = TRUE;
+		appdomain_tls_offset = mono_domain_get_tls_offset ();
+		lmf_tls_offset = mono_get_lmf_tls_offset ();
+		thread_tls_offset = mono_thread_get_tls_offset ();
+	}

-		lmf_tls_offset = read_tls_offset_from_method (mono_get_lmf_addr);
-		appdomain_tls_offset = read_tls_offset_from_method (mono_domain_get);
-		//thread_tls_offset = read_tls_offset_from_method (mono_thread_current);
-	}
-
 #ifdef MONO_ARCH_SIGSEGV_ON_ALTSTACK

 	/* Determine stack boundaries */
Index: mono/mini/mini-amd64.h
===================================================================
--- mono/mini/mini-amd64.h	(revision 41202)
+++ mono/mini/mini-amd64.h	(working copy)
@@ -124,7 +124,7 @@
 	guint64 rdx;
 	guint64 rbp;
 	guint64 rsp;
-    guint64 rsi;
+	guint64 rsi;
 	guint64 rdi;
 	guint64 rip;
 	guint64 r12;
Index: mono/utils/mono-compiler.h
===================================================================
--- mono/utils/mono-compiler.h	(revision 41202)
+++ mono/utils/mono-compiler.h	(working copy)
@@ -10,17 +10,19 @@
 #if HAVE_TLS_MODEL_ATTR

 #if defined(PIC) && defined(__x86_64__)
-#define MONO_TLS_FAST
+#define MONO_TLS_FAST
 #else
 #define MONO_TLS_FAST __attribute__((tls_model("local-exec")))
 #endif

 #else
-#define MONO_TLS_FAST
+#define MONO_TLS_FAST
 #endif

 #if defined(__GNUC__) && defined(__i386__)
 #define MONO_THREAD_VAR_OFFSET(var,offset) __asm ("jmp 1f; .section writetext, \"awx\"; 1: movl $" #var "@ntpoff, %0; jmp 2f; .previous; 2:" : "=r" (offset));
+#elif defined(__GNUC__) && defined(__x86_64__) && !defined(PIC)
+#define MONO_THREAD_VAR_OFFSET(var,offset) ({gint64 _offset; __asm ("jmp 1f; .section writetext, \"awx\"; 1: movq $" #var "@tpoff, %0; jmp 2f; .previous; 2:" : "=r" (_offset)); (offset) = (gint32)_offset;})
 #else
 #define MONO_THREAD_VAR_OFFSET(var,offset) (offset) = -1
 #endif
