diff --git a/class/System.Workflow.Runtime/Makefile b/class/System.Workflow.Runtime/Makefile
index 5f0e7cd..3058ab2 100644
--- a/class/System.Workflow.Runtime/Makefile
+++ b/class/System.Workflow.Runtime/Makefile
@@ -7,7 +7,7 @@ LIBRARY = System.Workflow.Runtime.dll
 LIBRARY_USE_INTERMEDIATE_FILE = yes
 
 # this c:/tmp no /cygdrive/tmp /r:/tmp/System.Workflow.ComponentModel.dll
-LIB_MCS_FLAGS = /r:$(corlib) /r:System.dll /r:System.Workflow.ComponentModel.dll /r:System.Workflow.Activities /r:System.Xml /r:System.Transactions.dll
+LIB_MCS_FLAGS = /r:$(corlib) /r:System.dll /r:System.Workflow.ComponentModel.dll /r:System.Workflow.Activities /r:System.Xml /r:System.Transactions.dll /r:System.Configuration.dll
 TEST_MCS_FLAGS =  $(LIB_MCS_FLAGS)
 
 include ../../build/library.make
diff --git a/class/System.Workflow.Runtime/System.Workflow.Runtime.dll.sources b/class/System.Workflow.Runtime/System.Workflow.Runtime.dll.sources
index 362e876..104341c 100644
--- a/class/System.Workflow.Runtime/System.Workflow.Runtime.dll.sources
+++ b/class/System.Workflow.Runtime/System.Workflow.Runtime.dll.sources
@@ -5,6 +5,9 @@ Assembly/AssemblyInfo.cs
 System.Workflow.Runtime/WorkflowQueuingService.cs
 System.Workflow.Runtime/WorkflowQueue.cs
 System.Workflow.Runtime/WorkflowRuntime.cs
+System.Workflow.Runtime/WorkflowRuntimeSection.cs
+System.Workflow.Runtime/WorkflowRuntimeServiceElement.cs
+System.Workflow.Runtime/WorkflowRuntimeServiceElementCollection.cs
 System.Workflow.Runtime/WorkflowInstance.cs
 System.Workflow.Hosting/WorkflowRuntimeService.cs
 System.Workflow.Hosting/WorkflowRuntimeServiceState.cs
diff --git a/class/System.Workflow.Runtime/System.Workflow.Runtime/WorkflowRuntimeSection.cs b/class/System.Workflow.Runtime/System.Workflow.Runtime/WorkflowRuntimeSection.cs
new file mode 100644
index 0000000..8846061
--- /dev/null
+++ b/class/System.Workflow.Runtime/System.Workflow.Runtime/WorkflowRuntimeSection.cs
@@ -0,0 +1,94 @@
+//
+// System.Workflow.Runtime.Configuration.WorkflowRuntimeSettings
+//
+// Authors:
+//	Joel Reed (joelwreed@gmail.com)
+//
+
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Configuration;
+using System.Collections.Specialized;
+using System.Xml;
+
+#if NET_2_0
+
+namespace System.Workflow.Runtime.Configuration {
+
+	public sealed class WorkflowRuntimeSection : ConfigurationSection
+	{
+		static ConfigurationProperty commonParametersProp;
+		static ConfigurationProperty nameProp;
+		static ConfigurationProperty servicesProp;
+		static ConfigurationProperty validateOnCreateProp;
+		static ConfigurationPropertyCollection properties;
+
+		static WorkflowRuntimeSection ()
+		{
+			commonParametersProp = new ConfigurationProperty ("commonParameters", typeof (NameValueConfigurationCollection), null,
+																								null, null, ConfigurationPropertyOptions.None);
+			nameProp = new ConfigurationProperty ("name", typeof (string), "");
+			servicesProp = new ConfigurationProperty ("services", typeof (WorkflowRuntimeServiceElementCollection), null,
+																								null, null, ConfigurationPropertyOptions.None);
+			validateOnCreateProp = new ConfigurationProperty ("validateOnCreate", typeof (bool), true);
+
+			properties = new ConfigurationPropertyCollection ();
+
+			properties.Add (commonParametersProp);
+			properties.Add (nameProp);
+			properties.Add (servicesProp);
+			properties.Add (validateOnCreateProp);
+		}
+
+		[ConfigurationProperty ("name")]
+		public string Name {
+			get { return (string) base [nameProp]; }
+			set { base [nameProp] = value; }
+		}
+
+		[ConfigurationProperty ("servicesProp")]
+		public WorkflowRuntimeServiceElementCollection Services {
+			get { return (WorkflowRuntimeServiceElementCollection) base [servicesProp]; }
+		}
+
+		[ConfigurationProperty ("validateOnCreate")]
+		public bool ValidateOnCreate {
+			get { return (bool) base [validateOnCreateProp];}
+			set { base [validateOnCreateProp] = value;}
+		}
+
+		[ConfigurationProperty ("commonParameters")]
+		public NameValueConfigurationCollection CommonParameters {
+			get { return (NameValueConfigurationCollection) base [commonParametersProp];}
+		}
+
+		protected override ConfigurationPropertyCollection Properties {
+			get { return properties; }
+		}
+
+	}
+
+}
+
+#endif
+
diff --git a/class/System.Workflow.Runtime/System.Workflow.Runtime/WorkflowRuntimeServiceElement.cs b/class/System.Workflow.Runtime/System.Workflow.Runtime/WorkflowRuntimeServiceElement.cs
new file mode 100644
index 0000000..13a12ba
--- /dev/null
+++ b/class/System.Workflow.Runtime/System.Workflow.Runtime/WorkflowRuntimeServiceElement.cs
@@ -0,0 +1,82 @@
+//
+// System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement
+//
+// Authors:
+//	Joel Reed (joelwreed@gmail.com)
+//
+
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+#if NET_2_0
+
+using System;
+using System.Configuration;
+using System.Collections.Specialized;
+
+namespace System.Workflow.Runtime.Configuration {
+
+	public sealed class WorkflowRuntimeServiceElement : ConfigurationElement
+	{
+		NameValueCollection parameters;
+		static ConfigurationProperty typeProp;
+		static ConfigurationPropertyCollection properties;
+
+		static WorkflowRuntimeServiceElement ()
+			{
+				typeProp = new ConfigurationProperty ("type", typeof (string), "");
+				properties = new ConfigurationPropertyCollection ();
+
+				properties.Add (typeProp);
+			}
+
+		protected override bool OnDeserializeUnrecognizedAttribute (string name, string value)
+		{
+			if (parameters == null)
+				parameters = new NameValueCollection ();
+
+			parameters [name] = value;
+			return true;
+		}
+
+		[ConfigurationProperty ("type")]
+			public string Type {
+			get { return (string) base [typeProp];}
+			set { base[typeProp] = value; }
+		}
+
+		public NameValueCollection Parameters {
+			get {
+				if (parameters == null)
+					parameters = new NameValueCollection ();
+				return parameters;
+			}
+		}
+
+		protected override ConfigurationPropertyCollection Properties {
+			get { return properties; }
+		}
+
+	}
+
+}
+
+#endif
diff --git a/class/System.Workflow.Runtime/System.Workflow.Runtime/WorkflowRuntimeServiceElementCollection.cs b/class/System.Workflow.Runtime/System.Workflow.Runtime/WorkflowRuntimeServiceElementCollection.cs
new file mode 100644
index 0000000..20dd9e5
--- /dev/null
+++ b/class/System.Workflow.Runtime/System.Workflow.Runtime/WorkflowRuntimeServiceElementCollection.cs
@@ -0,0 +1,115 @@
+//
+// System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElementCollection
+//
+// Authors:
+//	Joel Reed (joelwreed@gmail.com)
+//
+
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+using System;
+using System.Collections;
+using System.Configuration;
+
+#if NET_2_0
+
+namespace System.Workflow.Runtime.Configuration {
+
+	[ConfigurationCollection (typeof (WorkflowRuntimeServiceElement), CollectionType = ConfigurationElementCollectionType.AddRemoveClearMap)]
+	public sealed class WorkflowRuntimeServiceElementCollection : ConfigurationElementCollection
+	{
+		public void Add (WorkflowRuntimeServiceElement element)
+		{
+			BaseAdd (element);
+		}
+
+		public void Clear ()
+		{
+			BaseClear ();
+		}
+
+		public bool ContainsKey (object key)
+		{
+			return (BaseGet (key) != null);
+		}
+
+		public void CopyTo (WorkflowRuntimeServiceElement[] array, int index)
+		{
+			((ICollection)this).CopyTo (array, index);
+		}
+
+		protected override ConfigurationElement CreateNewElement ()
+		{
+			return new WorkflowRuntimeServiceElement ();
+		}
+
+		protected override object GetElementKey (ConfigurationElement element)
+		{
+			return ((WorkflowRuntimeServiceElement)element).Type;
+		}
+
+		public int IndexOf (WorkflowRuntimeServiceElement element)
+		{
+			return BaseIndexOf (element);
+		}
+
+		public void Remove (WorkflowRuntimeServiceElement element)
+		{
+			BaseRemove (element.Type);
+		}
+
+		public void RemoveAt (int index)
+		{
+			BaseRemoveAt (index);
+		}
+
+		[MonoTODO ("is this right?")]
+		public void RemoveAt (object key)
+		{
+			BaseRemove (key);
+		}
+
+		public WorkflowRuntimeServiceElement this [int index] {
+			get { return (WorkflowRuntimeServiceElement)BaseGet (index); }
+			set { if (BaseGet (index) != null) BaseRemoveAt (index); BaseAdd (index, value); }
+		}
+
+		public WorkflowRuntimeServiceElement this [object key] {
+			get { return (WorkflowRuntimeServiceElement)BaseGet (key); }
+			set {
+				WorkflowRuntimeServiceElement el = (WorkflowRuntimeServiceElement)BaseGet (key);
+				if (el == null) {
+					BaseAdd (value);
+					return;
+				}
+				int index = IndexOf (el);
+				BaseRemoveAt (index);
+				BaseAdd (index, value);
+			}
+		}
+
+	}
+
+}
+
+#endif
+
diff --git a/class/System.Workflow.Runtime/System.Workflow.Runtime_test.dll.sources b/class/System.Workflow.Runtime/System.Workflow.Runtime_test.dll.sources
index 85dd3fa..67fbf39 100644
--- a/class/System.Workflow.Runtime/System.Workflow.Runtime_test.dll.sources
+++ b/class/System.Workflow.Runtime/System.Workflow.Runtime_test.dll.sources
@@ -6,4 +6,6 @@ System.Workflow.Runtime/TimerEventSubscr
 Workflows/WorkFlowParallelTest.cs
 Workflows/WorkFlowMachineStatusTest.cs
 System.Workflow.Runtime/TimerEventSubscriptionCollectionTest.cs
-System.Workflow.Runtime/CorrelationTokenTest.cs
\ No newline at end of file
+System.Workflow.Runtime/CorrelationTokenTest.cs
+System.Workflow.Runtime/WorkflowRuntimeSectionTest.cs
+System.Workflow.Runtime/WorkflowRuntimeServiceElementTest.cs
diff --git a/class/System.Workflow.Runtime/Test/System.Workflow.Runtime/WorkflowRuntimeSectionTest.cs b/class/System.Workflow.Runtime/Test/System.Workflow.Runtime/WorkflowRuntimeSectionTest.cs
new file mode 100644
index 0000000..e79ba17
--- /dev/null
+++ b/class/System.Workflow.Runtime/Test/System.Workflow.Runtime/WorkflowRuntimeSectionTest.cs
@@ -0,0 +1,53 @@
+//
+// WorkflowRuntimeSectionTest.cs 
+//	- unit tests for System.Workflow.Runtime.Configuration.WorkflowRuntimeSection
+//
+// Author:
+//	Joel Reed <joelwreed@gmail.com>
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+#if NET_2_0
+
+using NUnit.Framework;
+
+using System;
+using System.Configuration;
+using System.Workflow.Runtime;
+
+namespace System.Workflow.Runtime.Configuration {
+
+	[TestFixture]
+	public class WorkflowRuntimeSectionTest  {
+
+		[Test]
+		public void Defaults ()
+		{
+			WorkflowRuntimeSection s = new WorkflowRuntimeSection ();
+			Assert.AreEqual ("", s.Name, "A1");
+			Assert.AreEqual (true, s.ValidateOnCreate, "A2");
+			Assert.AreEqual (new NameValueConfigurationCollection(), s.CommonParameters, "A3");
+			Assert.AreEqual (new WorkflowRuntimeServiceElementCollection(), s.Services, "A4");
+		}
+	}
+}
+
+#endif
diff --git a/class/System.Workflow.Runtime/Test/System.Workflow.Runtime/WorkflowRuntimeServiceElementTest.cs b/class/System.Workflow.Runtime/Test/System.Workflow.Runtime/WorkflowRuntimeServiceElementTest.cs
new file mode 100644
index 0000000..a44470e
--- /dev/null
+++ b/class/System.Workflow.Runtime/Test/System.Workflow.Runtime/WorkflowRuntimeServiceElementTest.cs
@@ -0,0 +1,50 @@
+//
+// WorkflowRuntimeSectionTest.cs 
+//	- unit tests for System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement
+//
+// Author:
+//	Joel Reed <joelwreed@gmail.com>
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+
+#if NET_2_0
+
+using NUnit.Framework;
+
+using System;
+using System.Configuration;
+using System.Workflow.Runtime;
+
+namespace System.Workflow.Runtime.Configuration {
+
+	[TestFixture]
+	public class WorkflowRuntimeServiceElementTest  {
+
+		[Test]
+		public void Defaults ()
+		{
+			WorkflowRuntimeServiceElement s = new WorkflowRuntimeServiceElement ();
+			Assert.AreEqual ("", s.Type, "A1");
+		}
+	}
+}
+
+#endif
