using System;

class T {
	static void Main ()
	{
		Console.Write ("{0,20}: ", "Test");
		Console.Write ("{0,10}   | ", "Current");
		Console.Write ("{0,10}   | ", "Andreas");
		Console.WriteLine ("{0,8} ", "Change");
		
		Test ("ptr eq", "", "");
		Test ("length neq", new string ('a', 10), new string ('a', 10));
		Test ("10, neq, first char", new string ('a', 10), "b" + new string ('a', 9));
		Test ("10, neq, last char", new string ('a', 10), new string ('a', 9) + "b");
		
		for (int i = 0; i < 20; i ++)
			Test (String.Format ("{0} char, eq", i), new string ('a', i), new string ('a', i));
		
		for (int i = 20; i < 100; i += 20)
			Test (String.Format ("{0} char, eq", i), new string ('a', i), new string ('a', i));
		
		for (int i = 100; i < 500; i += 50)
			Test (String.Format ("{0} char, eq", i), new string ('a', i), new string ('a', i));
		
		for (int i = 500; i < 1000; i += 100)
			Test (String.Format ("{0} char, eq", i), new string ('a', i), new string ('a', i));
	}
	
	static void Test (string nm, string a, string b)
	{
		const int count = 10000000;
		int t0, i;
		
		int c, n;
		
		Console.Write ("{0,20}: ", nm);
		
		t0 = Environment.TickCount;
		
		for (i = 0; i < count; i ++)
			CurrentEquals (a, b);
		
		Console.Write ("{0,10}   | ", (c = Environment.TickCount - t0));
		
		t0 = Environment.TickCount;
		
		for (i = 0; i < count; i ++)
			AEquals (a, b);
		
		Console.Write ("{0,10}   | ", n = (Environment.TickCount - t0));
		
		Console.WriteLine ("{0,8:p}", ((double)(c - n)) / ((double)c));
		
	}
	
	public static unsafe bool CurrentEquals (string a, string b)
	{
		if ((a as object) == (b as object))
			return true;

		if (a == null || b == null)
			return false;

		int len = a.Length;

		if (len != b.Length)
			return false;

		if (len == 0)
			return true;

		fixed (char * s1 = a, s2 = b) {
			// it must be one char, because 0 len is done above
			if (len < 2)
				return *s1 == *s2;

			// check by twos
			int * sint1 = (int *) s1, sint2 = (int *) s2;
			int n2 = len >> 1;
			do {
				if (*sint1++ != *sint2++)
					return false;
			} while (--n2 != 0);

			// nothing left
			if ((len & 1) == 0)
				return true;

			// check the last one
			return *(char *) sint1 == *(char *) sint2;
		}
	}

	public static unsafe bool AEquals (string a, string b)
	{
		if ((a as object) == (b as object))
			return true;

		if (a == null || b == null)
			return false;

		int count = a.Length;

		if (count != b.Length)
			return false;

		fixed (char * sa= a, sb = a) {
			char* stringA = sa, stringB = sb;
			while (count >= 16) {
				if (
				((int*) stringA)[0] != ((int*) stringB)[0] ||
				((int*) stringA)[1] != ((int*) stringB)[1] ||
				((int*) stringA)[2] != ((int*) stringB)[2] ||
				((int*) stringA)[3] != ((int*) stringB)[3] ||
				((int*) stringA)[4] != ((int*) stringB)[4] ||
				((int*) stringA)[5] != ((int*) stringB)[5] ||
				((int*) stringA)[6] != ((int*) stringB)[6] ||
				((int*) stringA)[7] != ((int*) stringB)[7] )
					return false;
				stringA += 16;
				stringB += 16;
				count -= 16;
			}

			while (count >= 4) {
				if (
				((int*) stringA)[0] != ((int*) stringB)[0] ||
				((int*) stringA)[1] != ((int*) stringB)[1] )
					return false;
				stringA += 4;
				stringB += 4;
				count -= 4;
			}

			if (count >= 2) {
				if (((int*) stringA)[0] != ((int*) stringB)[0])
					return false;
				stringA += 2;
				stringB += 2;
				count -= 2;
			}

			if (count == 1) {
				if (*stringA != *stringB)
					return false;
				//dest += 1;
				//src += 1;
			}
		}
		return true;
	}
}