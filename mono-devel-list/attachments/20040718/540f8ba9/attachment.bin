Index: mcs/class//corlib/System/Boolean.cs
===================================================================
RCS file: /mono/mcs/class/corlib/System/Boolean.cs,v
retrieving revision 1.16
diff -u -w -r1.16 Boolean.cs
--- mcs/class//corlib/System/Boolean.cs	11 Jun 2004 01:59:23 -0000	1.16
+++ mcs/class//corlib/System/Boolean.cs	18 Jul 2004 22:35:50 -0000
@@ -48,7 +48,12 @@
 	/// Represents the boolean values of logical true and false.
 	/// </summary>
 	[Serializable]
-	public struct Boolean : IComparable, IConvertible
+	public struct Boolean : IComparable,
+#if NET_2_0
+		IConvertible, IComparable<bool>
+#else
+		IConvertible
+#endif
 	{
 		/// <value>
 		/// The String representation of Boolean False
@@ -96,7 +101,17 @@
 			// for case #2, else it's #1
 			return (m_value == (bool) obj) ? 0 : -1;
 		}
+#if NET_2_0
+		public int CompareTo (bool obj)
+		{
+			if (m_value == true && obj == false)
+				return 1;
+			else if (m_value == false && obj == true)
+				return -1;
 
+			return 0;
+		}
+#endif
 		/// <summary>
 		/// Determines whether this instance and another object represent the
 		/// same type and value.
@@ -116,6 +131,12 @@
 			return ((m_value) ? ((bool) obj) : !((bool) obj));
 		}
 
+#if NET_2_0
+		public bool Equals (bool obj)
+		{
+			return ((m_value) ? obj : !obj);
+		}
+#endif
 		/// <summary>
 		/// Generates a hashcode for this object.
 		/// </summary>
Index: mcs/class//corlib/System/DateTime.cs
===================================================================
RCS file: /mono/mcs/class/corlib/System/DateTime.cs,v
retrieving revision 1.94
diff -u -w -r1.94 DateTime.cs
--- mcs/class//corlib/System/DateTime.cs	12 Jul 2004 13:11:52 -0000	1.94
+++ mcs/class//corlib/System/DateTime.cs	18 Jul 2004 22:35:51 -0000
@@ -47,7 +47,12 @@
 	/// 
 	[Serializable]
 	[StructLayout (LayoutKind.Auto)]
-	public struct DateTime : IComparable, IFormattable, IConvertible
+	public struct DateTime : IComparable, IFormattable, 
+#if NET_2_0
+		IConvertible, IComparable<DateTime>
+#else
+		IConvertible
+#endif
 	{
 		private TimeSpan ticks;
 
@@ -511,6 +516,12 @@
 			return Compare (this, (DateTime) v);
 		}
 
+#if NET_2_0
+		public int CompareTo (DateTime v)
+		{
+			return Compare (this, v);
+		}
+#endif
 		public static int DaysInMonth (int year, int month)
 		{
 			int[] days ;
@@ -530,6 +541,12 @@
 			return ((DateTime) o).ticks == ticks;
 		}
 
+#if NET_2_0
+		public bool Equals (DateTime o)
+		{
+			return o.ticks == ticks;
+		}
+#endif
 		public static bool Equals (DateTime t1, DateTime t2 )
 		{
 			return (t1.ticks == t2.ticks );
Index: mcs/class//corlib/System/Double.cs
===================================================================
RCS file: /mono/mcs/class/corlib/System/Double.cs,v
retrieving revision 1.37
diff -u -w -r1.37 Double.cs
--- mcs/class//corlib/System/Double.cs	7 Jul 2004 20:02:28 -0000	1.37
+++ mcs/class//corlib/System/Double.cs	18 Jul 2004 22:35:51 -0000
@@ -38,7 +38,13 @@
 namespace System {
 	
 	[Serializable]
-	public struct Double : IComparable, IFormattable, IConvertible {
+	public struct Double : IComparable, IFormattable,
+#if NET_2_0
+		IConvertible, IComparable<double>
+#else
+		IConvertible
+#endif
+	{
 		public const double Epsilon = 4.9406564584124650e-324;
 		public const double MaxValue =  1.7976931348623157e308;
 		public const double MinValue = -1.7976931348623157e308;
@@ -51,16 +57,8 @@
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		extern internal static void AssertEndianity (out double value);
 
-		public int CompareTo (object v)
+		internal int DoComparison (double dv)
 		{
-			if (v == null)
-				return 1;
-			
-			if (!(v is System.Double))
-				throw new ArgumentException (Locale.GetText ("Value is not a System.Double"));
-
-			double dv = (double)v;
-
 			if (IsPositiveInfinity(m_value) && IsPositiveInfinity(dv))
 				return 0;
 
@@ -84,19 +82,49 @@
 			else return 0;
 		}
 
-		public override bool Equals (object o)
+#if NET_2_0
+		public int CompareTo (double value)
 		{
-			if (!(o is System.Double))
-				return false;
+			return DoComparison(value);
+		}
+#endif
+		public int CompareTo (object v)
+		{
+			if (v == null)
+				return 1;
 
-			if (IsNaN ((double)o)) {
+			if (!(v is System.Double))
+				throw new ArgumentException (Locale.GetText ("Value is not a System.Double"));
+
+			double dv = (double)v;
+
+			return DoComparison(dv);
+		}
+
+		internal bool CheckEquals (double o)
+		{
+			if (IsNaN (o)) {
 				if (IsNaN(m_value))
 					return true;
 				else
 					return false;
 			}
 
-			return ((double) o) == m_value;
+			return (o == m_value);
+		}
+
+#if NET_2_0
+		public bool Equals (double o)
+		{
+			return CheckEquals(o);
+		}
+#endif
+		public override bool Equals (object o)
+		{
+			if (!(o is System.Double))
+				return false;
+
+			return CheckEquals((double) o);
 		}
 
 		public override int GetHashCode ()
Index: mcs/class//corlib/System/Single.cs
===================================================================
RCS file: /mono/mcs/class/corlib/System/Single.cs,v
retrieving revision 1.25
diff -u -w -r1.25 Single.cs
--- mcs/class//corlib/System/Single.cs	11 Jun 2004 01:59:23 -0000	1.25
+++ mcs/class//corlib/System/Single.cs	18 Jul 2004 22:35:51 -0000
@@ -35,7 +35,12 @@
 namespace System
 {
 	[Serializable]
-	public struct Single : IComparable, IFormattable, IConvertible
+	public struct Single : IComparable, IFormattable,
+#if NET_2_0
+		IConvertible, IComparable<float>
+#else
+		IConvertible
+#endif
 	{
 		public const float Epsilon = 1.4e-45f;
 		public const float MaxValue =  3.40282346638528859e38f;
@@ -46,16 +51,8 @@
 
 		internal float m_value;
 
-		public int CompareTo (object v)
+		internal int DoComparison (float fv)
 		{
-			if (v == null)
-				return 1;
-
-			if (!(v is System.Single))
-				throw new ArgumentException (Locale.GetText ("Value is not a System.Single."));
-
-			float fv = (float)v;
-
 			if (IsPositiveInfinity (m_value) && IsPositiveInfinity (fv))
 				return 0;
 
@@ -82,17 +79,49 @@
 				return -1;
 		}
 
+		public int CompareTo (object v)
+		{
+			if (v == null)
+				return 1;
+
+			if (!(v is System.Single))
+				throw new ArgumentException (Locale.GetText ("Value is not a System.Single."));
+
+			float fv = (float)v;
+
+			return DoComparison(fv);
+		}
+
+#if NET_2_0
+		public int CompareTo (float v)
+		{
+			return DoComparison(v);
+		}
+#endif
+
+		internal bool CheckEquals (float o)
+		{
+			if (IsNaN (o)) {
+				return IsNaN (m_value);
+			}
+
+			return o == m_value;
+		}
+
 		public override bool Equals (object o)
 		{
 			if (!(o is System.Single))
 				return false;
 
-			if (IsNaN ((float) o)) {
-				return IsNaN (m_value);
+			return CheckEquals((float) o);			
 			}
 
-			return ((float) o) == m_value;
+#if NET_2_0
+		public bool Equals (float o)
+		{
+			return CheckEquals(o);
 		}
+#endif
 
 		public override int GetHashCode ()
 		{
Index: mcs/class//corlib/System/TimeSpan.cs
===================================================================
RCS file: /mono/mcs/class/corlib/System/TimeSpan.cs,v
retrieving revision 1.19
diff -u -w -r1.19 TimeSpan.cs
--- mcs/class//corlib/System/TimeSpan.cs	14 Jun 2004 16:31:18 -0000	1.19
+++ mcs/class//corlib/System/TimeSpan.cs	18 Jul 2004 22:35:52 -0000
@@ -36,6 +36,9 @@
 {
 	[Serializable]
 	public struct TimeSpan : IComparable
+#if NET_2_0
+		, IComparable<TimeSpan>
+#endif
 	{
 		public static readonly TimeSpan MaxValue = new TimeSpan (long.MaxValue);
 		public static readonly TimeSpan MinValue = new TimeSpan (long.MinValue);
@@ -216,6 +219,13 @@
 			return Compare (this, (TimeSpan) value);
 		}
 
+#if NET_2_0
+		public int CompareTo (TimeSpan value)
+		{
+			return Compare(this, value);
+		}
+#endif
+
 		public TimeSpan Duration ()
 		{
 			try {
@@ -236,6 +246,13 @@
 
 			return _ticks == ((TimeSpan) value)._ticks;
 		}
+
+#if NET_2_0
+		public bool Equals (TimeSpan value)
+		{
+			return _ticks == value._ticks;
+		}
+#endif
 
 		public static bool Equals (TimeSpan t1, TimeSpan t2)
 		{
Index: mcs/class//corlib/System/Version.cs
===================================================================
RCS file: /mono/mcs/class/corlib/System/Version.cs,v
retrieving revision 1.16
diff -u -w -r1.16 Version.cs
--- mcs/class//corlib/System/Version.cs	11 Jun 2004 01:59:23 -0000	1.16
+++ mcs/class//corlib/System/Version.cs	18 Jul 2004 22:35:52 -0000
@@ -33,7 +33,12 @@
 namespace System
 {
 	[Serializable]
-	public sealed class Version : ICloneable, IComparable
+	public sealed class Version : ICloneable,
+#if NET_2_0
+		IComparable, IComparable<Version>
+#else
+		IComparable
+#endif
 	{
 
 		int _Major, _Minor, _Build, _Revision;
@@ -155,18 +160,11 @@
 			return new Version (_Major, _Minor, _Build, _Revision);
 		}
 
-		public int CompareTo (object version)
+		internal int DoComparison (Version v)
 		{
-			Version v;
-
-			if (version == null)
+			if (v == null)
 				return 1;
 
-			if (! (version is Version))
-				throw new ArgumentException (Locale.GetText ("Argument to Version.CompareTo must be a Version."));
-
-			v = version as Version;
-
 			if (this._Major > v._Major)
 				return 1;
 			else if (this._Major < v._Major)
@@ -189,7 +187,42 @@
 
 			return 0;
 		}
+#if NET_2_0
+		public int CompareTo (Version value)
+		{
+			return DoComparison(value);
+		}
+#endif
+		public int CompareTo (object version)
+		{
+			Version v;
+
+			if ((version != null) && ! (version is Version))
+				throw new ArgumentException (Locale.GetText ("Argument to Version.CompareTo must be a Version."));
+
+			v = version as Version;
+
+			return DoComparison(v);
+		}
+
+		internal bool CheckEquals (Version version)
+		{
+			if (version == null)
+				return false;
 
+			if ((version._Major == _Major) &&
+			    (version._Minor == _Minor) &&
+			    (version._Build == _Build) &&
+			    (version._Revision == _Revision))
+				return true;
+			return false;
+		}
+#if NET_2_0
+		public bool Equals (Version obj)
+		{
+			return CheckEquals(obj);
+		}
+#endif
 		public override bool Equals (object obj)
 		{
 			Version x;
@@ -199,12 +232,7 @@
 
 			x = (Version) obj;
 			
-			if ((x._Major == _Major) &&
-			    (x._Minor == _Minor) &&
-			    (x._Build == _Build) &&
-			    (x._Revision == _Revision))
-				return true;
-			return false;
+			return CheckEquals(x);
 		}
 
 		public override int GetHashCode ()
