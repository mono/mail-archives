Index: Mono.Cairo/Cairo.cs
===================================================================
--- Mono.Cairo/Cairo.cs	(revision 49559)
+++ Mono.Cairo/Cairo.cs	(working copy)
@@ -182,8 +182,14 @@
                 public static extern void cairo_stroke_preserve (IntPtr cr);
 
                 [DllImport (CairoImp)]
+                public static extern void cairo_stroke_extents (IntPtr cr, double x1, double y1, double x2, double y2);
+
+                [DllImport (CairoImp)]
                 public static extern void cairo_fill (IntPtr cr);
 
+                [DllImport (CairoImp)]
+                public static extern void cairo_fill_extents (IntPtr cr, double x1, double y1, double x2, double y2);
+
 		[DllImport (CairoImp)]
                 public static extern void cairo_fill_preserve (IntPtr cr);
 		
@@ -195,6 +201,9 @@
 
                 [DllImport (CairoImp)]
                 public static extern void cairo_clip (IntPtr cr);
+
+                [DllImport (CairoImp)]
+                public static extern void cairo_clip_preserve (IntPtr cr);
 		
                 [DllImport (CairoImp)]
                 public static extern void cairo_reset_clip (IntPtr cr);
@@ -241,7 +250,16 @@
                 public static extern void cairo_set_source_surface (IntPtr cr, IntPtr surface, int width, int height);
 		
                 [DllImport (CairoImp)]
+                internal static extern void cairo_mask (IntPtr cr, IntPtr pattern);
+                
+				[DllImport (CairoImp)]
+                internal static extern void cairo_mask_surface (IntPtr cr, IntPtr surface, double x, double y);
+				
+                [DllImport (CairoImp)]
                 public static extern void cairo_paint (IntPtr cr);
+
+                [DllImport (CairoImp)]
+                public static extern void cairo_paint_with_alpha (IntPtr cr, double alpha);
 		
 		[DllImport (CairoImp)]
                 public static extern IntPtr cairo_image_surface_create_from_png  (string filename);
@@ -316,6 +334,9 @@
                 public static extern Cairo.Status cairo_surface_finish (IntPtr surface);
 		
 		[DllImport (CairoImp)]                
+                internal static extern Cairo.Status cairo_surface_status (IntPtr surface);
+		
+		[DllImport (CairoImp)]                
                 public static extern void cairo_surface_set_device_offset (IntPtr surface,
 								       double x, double y);
 
@@ -330,7 +351,7 @@
 
                 [DllImport (CairoImp)]
                 public static extern IntPtr cairo_surface_create_similar (
-                        IntPtr surface, Cairo.Format format, int width, int height);
+                        IntPtr surface, Cairo.Content content, int width, int height);
 
                 [DllImport (CairoImp)]
                 public static extern void cairo_surface_reference (IntPtr surface);
@@ -486,6 +507,12 @@
 				Gray,
 				Subpixel,
 		}
+
+		public enum Content {
+			Color,
+			Alpha,
+			ColorAlpha,
+		}
 		
         public enum Format {
                 ARGB32 = 0,
Index: Mono.Cairo/Graphics.cs
===================================================================
--- Mono.Cairo/Graphics.cs	(revision 49559)
+++ Mono.Cairo/Graphics.cs	(working copy)
@@ -83,6 +83,10 @@
 		public double B;
 		public double A;
 		
+		public Color(double r, double g, double b) : this (r, g, b, 1.0)
+		{
+		}
+
 		public Color(double r, double g, double b, double a)
 		{
 			R = r;
@@ -153,13 +157,6 @@
                         }
                 }
 		
-		/*
-                public string StatusString {
-		 get {
-                                return CairoAPI.cairo_status_to_string (state);
-                        }
-		 }
-		 */ 
                 public IntPtr Handle {
                         get {
                                 return state;
@@ -192,6 +189,7 @@
                 }		
 
                 public double Tolerance {
+						get { return CairoAPI.cairo_get_tolerance (state); }
                         set {
                                 CairoAPI.cairo_set_tolerance (state, value);
                         }
@@ -237,9 +235,9 @@
                         }
                 }
 
-                public void SetDash (double [] dashes, int ndash, double offset)
+                public void SetDash (double [] dashes, double offset)
                 {
-                        CairoAPI.cairo_set_dash (state, dashes, ndash, offset);
+                        CairoAPI.cairo_set_dash (state, dashes, dashes.Length, offset);
                 }
 		
                 public Pattern Pattern {
@@ -280,7 +278,7 @@
                         }
                 }
 
-                public Cairo.Surface TargetSurface {
+                public Cairo.Surface Target {
                         set {
 				state = CairoAPI.cairo_create (value.Pointer);				
                                 //CairoAPI.cairo_set_target_surface (state, value.Handle);
@@ -292,6 +290,21 @@
                         }
                 }
 
+				public void SetSourceRGB (double r, double g, double b)
+				{
+					CairoAPI.cairo_set_source_rgb (state, r, g, b);
+				}
+
+				public void SetSourceRGBA (double r, double g, double b, double a)
+				{
+					CairoAPI.cairo_set_source_rgba (state, r, g, b, a);
+				}
+
+				public void SetSourceSurface (Surface source, int x, int y)
+				{
+					CairoAPI.cairo_set_source_surface (state, source.Handle, x, y);
+				}
+
 #region Path methods
                 
                 public void NewPath ()
@@ -381,7 +394,26 @@
 #endregion
 
 #region Painting Methods
+				public void Paint ()
+				{
+					CairoAPI.cairo_paint (state);
+				}
 
+				public void PaintWithAlpha (double alpha)
+				{
+					CairoAPI.cairo_paint_with_alpha (state, alpha);
+				}
+
+				public void Mask (Pattern pattern)
+				{
+					CairoAPI.cairo_mask (state, pattern.Pointer);
+				}
+
+				public void MaskSurface (Surface surface, double x, double y)
+				{
+					CairoAPI.cairo_mask_surface (state, surface.Handle, x, y);
+				}
+
                 public void Stroke ()
                 {
                         CairoAPI.cairo_stroke (state);
@@ -392,11 +424,21 @@
                         CairoAPI.cairo_stroke_preserve (state);
                 }		
 
+				public void StrokeExtents (double x1, double y1, double x2, double y2)
+				{
+                        CairoAPI.cairo_stroke_extents (state, x1, y1, x2, y2);
+				}
+
                 public void Fill ()
                 {
                         CairoAPI.cairo_fill (state);
                 }
-		
+
+                public void FillExtents (double x1, double y1, double x2, double y2)
+				{
+					CairoAPI.cairo_fill_extents (state, x1, y1, x2, y2);
+				}
+
 		public void FillPreserve ()
 		{
 			CairoAPI.cairo_fill_preserve (state);
@@ -409,7 +451,12 @@
                         CairoAPI.cairo_clip (state);
                 }
 
-		public void ClipReset ()
+				public void ClipPreserve ()
+				{
+					CairoAPI.cairo_clip_preserve (state);
+				}
+
+		public void ResetClip ()
 		{
 			CairoAPI.cairo_reset_clip (state);
 		}
@@ -593,6 +640,11 @@
 			set { CairoAPI.cairo_set_font_size (state, value); }
 		}
 
+		public void CopyPage ()
+		{
+			CairoAPI.cairo_copy_page (state);
+		}
+
 		public void ShowPage ()
 		{
 			CairoAPI.cairo_show_page (state);
Index: Mono.Cairo/Surface.cs
===================================================================
--- Mono.Cairo/Surface.cs	(revision 49559)
+++ Mono.Cairo/Surface.cs	(working copy)
@@ -179,11 +179,11 @@
                 }
 
 
-                public static Cairo.Surface CreateSimilar (
-                        Cairo.Surface surface, Cairo.Format format, int width, int height)
+                public Cairo.Surface CreateSimilar (
+                        Cairo.Content content, int width, int height)
                 {
                         IntPtr p = CairoAPI.cairo_surface_create_similar (
-                                surface.Handle, format, width, height);
+                                this.Handle, content, width, height);
 
                         return new Cairo.Surface (p, true);
                 }
@@ -246,5 +246,9 @@
                         get { return surface; }
                 }
 
+				public Status Status {
+					get { return CairoAPI.cairo_surface_status (surface); }
+				}
+
         }
 }
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 49559)
+++ ChangeLog	(working copy)
@@ -1,3 +1,21 @@
+2005-09-06  John Luke  <john.luke@gmail.com>
+
+	* Mono.Cairo/Surface.cs: make CreateSimilar non-static
+	and use Content instead of Format, add Surface.Status
+	* Mono.Cairo/Graphics.cs: add convenience
+	ctor to Color with an alpha of 1.0
+	add Tolerance getter, Change SetDash to compute
+	the length automatically, rename TargetSurface to Target,
+	add SetSourceRGB, SetSourceRGBA, and SetSourceSurface (),
+	add Paint, PaintWithAlpha, Mask, and MaskSurface (),
+	add StrokeExtents, FillExtents, ClipPreserve (), and CopyPage ()
+	* Mono.Cairo/Cairo.cs: add new imports:
+	cairo_stroke_extents, cairo_fill_extents,
+	cairo_clip_preserve, cairo_mask, cairo_mask_surface,
+	cairo_paint_with_alpha, cairo_surface_status
+	add Content enum and fix cairo_surface_create_similar to use
+	Content not Format
+	
 2005-09-05  John Luke  <john.luke@gmail.com>
 
 	* Mono.Cairo/Samples/gtk/Graphics.cs:
