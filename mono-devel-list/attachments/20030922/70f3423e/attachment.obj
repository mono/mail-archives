--- c:\diff\old\System.Data\System.Data\DataTableCollection.cs	2003-09-17 14:48:59.801451600 +0300
+++ c:\diff\new\System.Data\System.Data\DataTableCollection.cs	2003-09-17 14:30:58.190202000 +0300
@@ -105,7 +105,7 @@
 		[MonoTODO]
 		public bool CanRemove (DataTable table) 
 		{
-			throw new NotImplementedException ();
+			return CanRemove(table, false);
 		}
 
 		public void Clear () 
@@ -130,18 +130,22 @@
 
 		public void Remove (DataTable table) 
 		{
-			this.Remove (table.TableName);
+			CanRemove(table, true);
+			list.Remove(table);
 			OnCollectionChanged (new CollectionChangeEventArgs (CollectionChangeAction.Remove, table));
 		}
 
 		public void Remove (string name) 
 		{
-			list.Remove (this [name]);
+			Remove (this [name]);
 		}
 
 		public void RemoveAt (int index) 
 		{
+			DataTable t = this[index];
+			CanRemove(t, true);
 			list.RemoveAt (index);
+			OnCollectionChanged (new CollectionChangeEventArgs (CollectionChangeAction.Remove, t));
 		}
 
 		#endregion
@@ -197,6 +201,64 @@
 
 			Table.TableName = Name + i;			       
 		}
+		
+		// check if a table can be removed from this collectiuon.
+		// if the table can not be remved act according to throwException parameter.
+		// if it is true throws an Exception, else return false.
+		private bool CanRemove(DataTable table, bool throwException)
+		{
+			// check if table is null reference
+			if (table == null)
+			{
+				if(throwException)
+					throw new ArgumentNullException("table");
+				return false;
+			}
+			
+			// check if the table has the same DataSet as this collection.
+			if(table.DataSet != this.dataSet)
+			{
+				if(throwException)
+					throw new ArgumentException("Table " + table.TableName + " does not belong to this DataSet.");
+				return false;
+			}
+			
+			// check the table has a relation attached to it.
+			if (table.ParentRelations.Count > 0 || table.ChildRelations.Count > 0)
+			{
+				if(throwException)
+					throw new ArgumentException("Cannot remove a table that has existing relations. Remove relations first.");
+				return false;
+			}
+			
+
+			// now we check if any ForeignKeyConstraint is referncing 'table'.
+			IEnumerator tableEnumerator = this.dataSet.Tables.GetEnumerator();
+			
+			// loop on all tables in dataset
+			while (tableEnumerator.MoveNext())
+			{
+				IEnumerator constraintEnumerator = ((DataTable) tableEnumerator.Current).Constraints.GetEnumerator();
+				// loop on all constrains in the current table
+				while (constraintEnumerator.MoveNext())
+				{
+					Object o = (Constraint) constraintEnumerator.Current;
+					// we only check ForeignKeyConstraint
+					if (o is ForeignKeyConstraint)
+					{
+						ForeignKeyConstraint fc = (ForeignKeyConstraint) o;
+						if(fc.Table == table || fc.RelatedTable == table)
+						{
+							if(throwException)
+								throw new ArgumentException("Cannot remove table " + table.TableName + ", because it referenced in ForeignKeyConstraint " + fc.ConstraintName + ". Remove the constraint first.");
+							return false;
+						}
+					}
+				}
+			}
+
+			return true;
+		}
 
 		#endregion // Private methods
 
