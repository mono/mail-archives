diff --git a/ChangeLog b/ChangeLog
index f784aef..0ca6262 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2008-10-17  Cedric Vivier  <cedricv@neonux.com>
+
+	* backend/SingleSteppingEngine.cs
+	Enable StepInto for RemotingInvoke-wrapped methods.
+	* classes/Method.cs
+	(Method.IsInvokeWrapper): New public property.
+
 2008-10-13  Martin Baulig  <martin@ximian.com>
 
 	* classes/StackFrame.cs
diff --git a/backend/SingleSteppingEngine.cs b/backend/SingleSteppingEngine.cs
index 0e9733b..5f363d7 100644
--- a/backend/SingleSteppingEngine.cs
+++ b/backend/SingleSteppingEngine.cs
@@ -2823,7 +2823,7 @@ namespace Mono.Debugger.Backend
 			if (method == null)
 				return false;
 
-			if (method.WrapperType == WrapperType.DelegateInvoke)
+			if (method.IsInvokeWrapper)
 				return true;
 			else if (method.WrapperType == WrapperType.Alloc)
 				return false;
@@ -2932,11 +2932,11 @@ namespace Mono.Debugger.Backend
 			Method method = sse.Lookup (call_target);
 
 			/*
-			 * If this is a PInvoke/icall wrapper, check whether we want to step into
-			 * the wrapped function.
+			 * If this is a PInvoke/icall/remoting wrapper, check whether we want
+			 * to step into the wrapped function.
 			 */
 			if ((method != null) && (method.WrapperType != WrapperType.None)) {
-				if (method.WrapperType == WrapperType.DelegateInvoke) {
+				if (method.IsInvokeWrapper) {
 					sse.do_step_native ();
 					return false;
 				}
@@ -3986,7 +3986,7 @@ namespace Mono.Debugger.Backend
 			if (method == null)
 				return false;
 
-			if (method.WrapperType == WrapperType.DelegateInvoke)
+			if (method.IsInvokeWrapper)
 				return true;
 
 			return sse.MethodHasSource (method);
@@ -4091,7 +4091,7 @@ namespace Mono.Debugger.Backend
 			if (method == null)
 				return false;
 
-			if (method.WrapperType == WrapperType.DelegateInvoke)
+			if (method.IsInvokeWrapper)
 				return true;
 
 			return sse.MethodHasSource (method);
@@ -4139,7 +4139,7 @@ namespace Mono.Debugger.Backend
 			if (method == null)
 				return false;
 
-			if (method.WrapperType == WrapperType.DelegateInvoke)
+			if (method.IsInvokeWrapper)
 				return true;
 
 			return sse.MethodHasSource (method);
diff --git a/classes/Method.cs b/classes/Method.cs
index 55eb18a..dfb82e8 100644
--- a/classes/Method.cs
+++ b/classes/Method.cs
@@ -188,6 +188,14 @@ namespace Mono.Debugger
 			get;
 		}
 
+		internal bool IsInvokeWrapper {
+			get {
+				return (WrapperType == WrapperType.DelegateInvoke ||
+				        WrapperType == WrapperType.RemotingInvoke ||
+				        WrapperType == WrapperType.RemotingInvokeWithCheck);
+			}
+		}
+
 		public abstract bool IsCompilerGenerated {
 			get;
 		}