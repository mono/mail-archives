Index: mono/metadata/object.c
===================================================================
--- mono/metadata/object.c	(revision 159550)
+++ mono/metadata/object.c	(working copy)
@@ -5698,20 +5698,19 @@
 }
 
 /**
- * mono_print_unhandled_exception:
+ * mono_exception_get_message_string:
  * @exc: The exception
  *
- * Prints the unhandled exception.
+ * Returns: the exception message string. If non-null, caller should free it.
  */
-void
-mono_print_unhandled_exception (MonoObject *exc)
+char *
+mono_exception_get_message_string (MonoObject *exc)
 {
 	MonoError error;
-	char *message = (char *) "";
+	char *message;
 	MonoString *str; 
 	MonoMethod *method;
 	MonoClass *klass;
-	gboolean free_message = FALSE;
 
 	if (mono_object_isinst (exc, mono_defaults.exception_class)) {
 		klass = exc->vtable->klass;
@@ -5729,19 +5728,39 @@
 			message = mono_string_to_utf8_checked (str, &error);
 			if (!mono_error_ok (&error)) {
 				mono_error_cleanup (&error);
-				message = (char *)"";
-			} else {
-				free_message = TRUE;
+				return NULL;
 			}
+			return message;
 		}
-	}				
+	}
+	return NULL;
+}
 
+/**
+ * mono_print_unhandled_exception:
+ * @exc: The exception
+ *
+ * Prints the unhandled exception.
+ */
+void
+mono_print_unhandled_exception (MonoObject *exc)
+{
+	char *message;
+	gboolean free_message = FALSE;
+
+	message = mono_exception_get_message_string (exc);
+	if (message)
+		free_message = TRUE;
+	else
+		message = (char *) "";
+
 	/*
 	 * g_printerr ("\nUnhandled Exception: %s.%s: %s\n", exc->vtable->klass->name_space, 
 	 *	   exc->vtable->klass->name, message);
 	 */
+	
 	g_printerr ("\nUnhandled Exception: %s\n", message);
-	
+
 	if (free_message)
 		g_free (message);
 }
Index: mono/metadata/object.h
===================================================================
--- mono/metadata/object.h	(revision 159550)
+++ mono/metadata/object.h	(working copy)
@@ -250,6 +250,9 @@
 void
 mono_print_unhandled_exception (MonoObject *exc);
 
+char *
+mono_exception_get_string (MonoObject *exc);
+
 void* 
 mono_compile_method	   (MonoMethod *method);
 