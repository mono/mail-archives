Index: corlib.dll.sources
===================================================================
--- corlib.dll.sources	(revision 52301)
+++ corlib.dll.sources	(working copy)
@@ -299,6 +299,7 @@
 System.Globalization/CultureInfo.cs
 System.Globalization/CultureTypes.cs
 System.Globalization/DateTimeFormatInfo.cs
+System.Globalization/DateTimeFormatFlags.cs
 System.Globalization/DateTimeStyles.cs
 System.Globalization/DaylightTime.cs
 System.Globalization/GregorianCalendar.cs
Index: System.Globalization/JulianCalendar.cs
===================================================================
--- System.Globalization/JulianCalendar.cs	(revision 52301)
+++ System.Globalization/JulianCalendar.cs	(working copy)
@@ -50,8 +50,6 @@
 	public JulianCalendar() {
 		M_AbbrEraNames = new string[] {"C.E."};
 		M_EraNames = new string[] {"Common Era"};
-		if (M_TwoDigitYearMax == 99)
-			M_TwoDigitYearMax = 2029;
 	}
 		
 	/// <summary>
@@ -69,8 +68,6 @@
 		}
 	}
 
-	int twoDigitYearMax = 2029;
-	
 	public override int TwoDigitYearMax 
 	{
 		get {
Index: System.Globalization/TaiwanCalendar.cs
===================================================================
--- System.Globalization/TaiwanCalendar.cs	(revision 52301)
+++ System.Globalization/TaiwanCalendar.cs	(working copy)
@@ -77,8 +77,6 @@
 		}
 	}
 
-	int twoDigitYearMax = 99;
-	
 	public override int TwoDigitYearMax 
 	{
 		get {
Index: System.Globalization/JapaneseCalendar.cs
===================================================================
--- System.Globalization/JapaneseCalendar.cs	(revision 52301)
+++ System.Globalization/JapaneseCalendar.cs	(working copy)
@@ -114,8 +114,6 @@
 		}
 	}
 
-	int twoDigitYearMax = 99;
-	
 	public override int TwoDigitYearMax 
 	{
 		get {
Index: System.Globalization/DateTimeFormatInfo.cs
===================================================================
--- System.Globalization/DateTimeFormatInfo.cs	(revision 52301)
+++ System.Globalization/DateTimeFormatInfo.cs	(working copy)
@@ -54,6 +54,46 @@
 
 		private static DateTimeFormatInfo theInvariantDateTimeFormatInfo;
 
+		// Fields for binary serialization compatibility with .NET:
+		internal int nDataItem;
+		internal bool m_useUserOverride;
+		internal bool m_isDefaultCalendar;
+		internal int CultureID;
+		internal bool bUseCalendarInfo;
+		internal String amDesignator;
+		internal String pmDesignator;
+		internal String dateSeparator;
+		internal String longTimePattern;
+		internal String shortTimePattern;
+		internal String generalShortTimePattern;
+		internal String generalLongTimePattern;
+		internal String timeSeparator;
+		internal String monthDayPattern;
+		internal String[] allShortTimePatterns;
+		internal String[] allLongTimePatterns;
+		internal Calendar calendar;
+		internal int firstDayOfWeek;
+		internal int calendarWeekRule;
+		internal String fullDateTimePattern;
+		internal String longDatePattern;
+		internal String shortDatePattern;
+		internal String yearMonthPattern;
+		internal String[] abbreviatedDayNames;
+		internal String[] dayNames;
+		internal String[] abbreviatedMonthNames;
+		internal String[] monthNames;
+		internal String[] allShortDatePatterns;
+		internal String[] allLongDatePatterns;
+		internal String[] m_eraNames;
+		internal String[] m_abbrevEraNames;
+		internal String[] m_abbrevEnglishEraNames;
+		internal String[] m_dateWords;
+		internal int[] optionalCalendars;
+		internal bool m_isReadOnly;
+		internal String[] genitiveMonthNames;
+		internal String[] leapYearMonthNames;
+		internal DateTimeFormatFlags formatFlags;
+
 		private bool readOnly;
 		private string _AMDesignator;
 		private string _PMDesignator;
Index: System.Globalization/DateTimeFormatFlags.cs
===================================================================
--- System.Globalization/DateTimeFormatFlags.cs	(revision 0)
+++ System.Globalization/DateTimeFormatFlags.cs	(revision 0)
@@ -0,0 +1,34 @@
+//
+// Copyright (C) 2004 Novell, Inc (http://www.novell.com)
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+//
+// Author:
+//
+//  Jonathan Gilbert <logic@deltaq.org>
+
+namespace System.Globalization
+{
+	// This type is required to exist for resource files
+	// containing CultureInfo generated by Microsoft's
+	// ResGen utility to deserialize under mono.
+
+	enum DateTimeFormatFlags { }
+}
Index: System.Globalization/HijriCalendar.cs
===================================================================
--- System.Globalization/HijriCalendar.cs	(revision 52301)
+++ System.Globalization/HijriCalendar.cs	(working copy)
@@ -61,8 +61,7 @@
 	public HijriCalendar() {
 		M_AbbrEraNames = new string[] {"A.H."};
 		M_EraNames = new string[] {"Anno Hegirae"};
-		if (M_TwoDigitYearMax == 99)
-			M_TwoDigitYearMax = 1451;
+		twoDigitYearMax = 1451;
 	}
 
 	/// <summary>
@@ -102,8 +101,6 @@
 	}
 #endif
 
-	int twoDigitYearMax = 1451;
-	
 	[MonoTODO ("Add call into operating system")]
 	public override int TwoDigitYearMax 
 	{
Index: System.Globalization/HebrewCalendar.cs
===================================================================
--- System.Globalization/HebrewCalendar.cs	(revision 52301)
+++ System.Globalization/HebrewCalendar.cs	(working copy)
@@ -51,8 +51,7 @@
 	public HebrewCalendar() {
 		M_AbbrEraNames = new string[] {"A.M."};
 		M_EraNames = new string[] {"Anno Mundi"};
-		if (M_TwoDigitYearMax == 99)
-			M_TwoDigitYearMax = 5790;
+		twoDigitYearMax = 5790;
 	}
 
 	/// <summary>
@@ -93,8 +92,6 @@
 		}
 	}
 
-	int twoDigitYearMax = 5790;
-	
 	public override int TwoDigitYearMax 
 	{
 		get {
Index: System.Globalization/ThaiBuddhistCalendar.cs
===================================================================
--- System.Globalization/ThaiBuddhistCalendar.cs	(revision 52301)
+++ System.Globalization/ThaiBuddhistCalendar.cs	(working copy)
@@ -69,8 +69,7 @@
 	public ThaiBuddhistCalendar() {
 		M_AbbrEraNames = new string[] {"T.B.C.E."};
 		M_EraNames = new string[] {"ThaiBuddhist current era"};
-		if (M_TwoDigitYearMax == 99)
-			M_TwoDigitYearMax = 2572;
+		twoDigitYearMax = 2572;
 	}
 
 	/// <value>Overridden. Gives the eras supported by the
@@ -82,8 +81,6 @@
 		}
 	}
 
-	int twoDigitYearMax = 2572;
-	
 	public override int TwoDigitYearMax 
 	{
 		get {
Index: System.Globalization/GregorianCalendar.cs
===================================================================
--- System.Globalization/GregorianCalendar.cs	(revision 52301)
+++ System.Globalization/GregorianCalendar.cs	(working copy)
@@ -59,8 +59,6 @@
 		}
 	}
 
-	int twoDigitYearMax = 2029;
-
 	public override int TwoDigitYearMax 
 	{
 		get {
@@ -77,17 +75,17 @@
 	/// A protected member storing the
 	/// <see cref="T:System.Globalization.GregorianCalendarTypes"/>.
 	/// </summary>
-	internal GregorianCalendarTypes M_CalendarType;
+	internal GregorianCalendarTypes m_type;
 
 	/// <value>
 	/// The property stores the 
 	/// <see cref="T:System.Globalization.GregorianCalendarTypes"/>.
 	/// </value>
 	public virtual GregorianCalendarTypes CalendarType {
-		get { return M_CalendarType; }
+		get { return m_type; }
 		set { 
 			// mscorlib 1:0:3300:0 doesn't check anything here
-			M_CalendarType = value;
+			m_type = value;
 		}
 	}
 
@@ -483,8 +481,6 @@
 		CalendarType = type;
 		M_AbbrEraNames = new string[] {"C.E."};
 		M_EraNames = new string[] {"Common Era"};
-		if (M_TwoDigitYearMax == 99)
-			M_TwoDigitYearMax = 2029;
 	}
 	
 	/// <summary>
Index: System.Globalization/Calendar.cs
===================================================================
--- System.Globalization/Calendar.cs	(revision 52301)
+++ System.Globalization/Calendar.cs	(working copy)
@@ -117,6 +117,11 @@
 	/// </value>
 	public const int CurrentEra = 0;
 
+	/// <value>
+	/// Needed for serialization compatibility with MS .NET.
+	/// </value>
+	internal int m_currentEraValue;
+
 	/// <value>When overridden gives the eras supported by the
 	/// calendar as an array of integers.
 	/// </value>
@@ -127,7 +132,7 @@
 	/// <see cref="P:TwoDigitYearMax"/>
 	/// property.
 	/// </summary>
-	internal int M_TwoDigitYearMax;
+	internal int twoDigitYearMax = 2029;
 	
 
 	/// <summary>
@@ -167,12 +172,12 @@
 	/// <para>It might be overridden.</para>
 	/// </value>
 	public virtual int TwoDigitYearMax {
-		get { return M_TwoDigitYearMax; }
+		get { return twoDigitYearMax; }
 		set {
 			M_ArgumentInRange("year", value, 100, M_MaxYear);
 			int era = CurrentEra;
 			M_CheckYE(value, ref era);
-			M_TwoDigitYearMax = value;
+			twoDigitYearMax = value;
 		}
 	}
 
@@ -873,10 +878,9 @@
 	/// <remarks>
 	/// The .NET framework reads the value from the registry.
 	/// We should implement it here. Currently I set the default values
-	/// in the ctors of the derived classes, if it is 99.
+	/// in the ctors of the derived classes.
 	/// </remarks>
 	protected Calendar() {
-		M_TwoDigitYearMax = 99;
 	}
 
 	/// <summary>Protected field storing the abbreviated era names.
Index: System.Globalization/KoreanCalendar.cs
===================================================================
--- System.Globalization/KoreanCalendar.cs	(revision 52301)
+++ System.Globalization/KoreanCalendar.cs	(working copy)
@@ -69,8 +69,7 @@
 	public KoreanCalendar() {
 		M_AbbrEraNames = new string[] {"K.C.E."};
 		M_EraNames = new string[] {"Korean Current Era"};
-		if (M_TwoDigitYearMax == 99)
-			M_TwoDigitYearMax = 4362;
+		twoDigitYearMax = 4362;
 	}
 
 	/// <value>Overridden. Gives the eras supported by the
@@ -82,8 +81,6 @@
 		}
 	}
 
-	int twoDigitYearMax = 4362;
-
 	public override int TwoDigitYearMax 
 	{
 		get {

