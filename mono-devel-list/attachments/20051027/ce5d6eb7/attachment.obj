Index: System.Runtime.Remoting.Channels/SoapMessageFormatter.cs
===================================================================
--- System.Runtime.Remoting.Channels/SoapMessageFormatter.cs	(revision 52268)
+++ System.Runtime.Remoting.Channels/SoapMessageFormatter.cs	(working copy)
@@ -74,6 +74,34 @@
 			if (sf != null) {
 				if(_serverFaultExceptionField != null)
 					e = (Exception) _serverFaultExceptionField.GetValue(sf);
+#if TARGET_JVM				
+				if (e == null && sf.ExceptionType != null)
+				{
+					try
+					{
+						Type te = Type.GetType(sf.ExceptionType);
+						if (te != null)
+						{
+							ConstructorInfo ce = te.GetConstructor(
+								BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance,
+								null, new Type[] {typeof(string)}, null);
+
+							if (ce != null)
+							{
+								e = (Exception) ce.Invoke(new object[] {sf.ExceptionMessage});
+							}
+							else
+							{
+								e = (Exception) Activator.CreateInstance(te);
+							}
+						}
+					}
+					catch
+					{
+						e = null;
+					}
+				}
+#endif
 			}
 			if (e == null)
 				e = new RemotingException (fault.FaultString);
@@ -292,7 +320,11 @@
 			}
 			else {
 				// an Exception was thrown while executing the function
+#if !TARGET_JVM
 				responseHeaders["__HttpStatusCode"] = "400";
+#else
+				responseHeaders["__HttpStatusCode"] = "500";
+#endif
 				responseHeaders["__HttpReasonPhrase"] = "Bad Request";
 				// fill the transport headers
 				responseHeaders["Content-Type"] = "text/xml; charset=\"utf-8\"";
@@ -399,6 +431,11 @@
 		
 		object GetNullValue (Type paramType)
 		{
+			if (paramType.IsEnum)
+			{
+				return Activator.CreateInstance(paramType);
+			}
+
 			switch (Type.GetTypeCode (paramType))
 			{
 				case TypeCode.Boolean: return false;
@@ -414,7 +451,12 @@
 				case TypeCode.UInt16: return (ushort)0;
 				case TypeCode.UInt32: return (uint)0;
 				case TypeCode.UInt64: return (ulong)0;
-				default: return null;
+				default: 
+					if (paramType.IsValueType)
+					{
+						return Activator.CreateInstance(paramType);
+					}
+					return null;
 			}
 		}
 	}
