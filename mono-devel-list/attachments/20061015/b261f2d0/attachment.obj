Index: mcs/class/corlib/System/Type.cs
===================================================================
--- mcs/class/corlib/System/Type.cs	(revision 66698)
+++ mcs/class/corlib/System/Type.cs	(working copy)
@@ -216,7 +216,7 @@
 					return true;
 				if (IsInterface)
 					return false;
-				return !is_subtype_of (this, typeof (System.ValueType), false);
+				return !IsSubclassOf (typeof (System.ValueType));
 			}
 		}
 
@@ -238,7 +238,7 @@
 				if (this is EnumBuilder)
 					return true;
 
-				return is_subtype_of (this, typeof (System.Enum), false) &&
+				return IsSubclassOf (typeof (System.Enum)) &&
 					this != typeof (System.Enum);
 			}
 		}
@@ -343,7 +343,7 @@
 			get {
 				// Enums and delegates are always serializable
 				return (Attributes & TypeAttributes.Serializable) != 0 || IsEnum || 
-					is_subtype_of (this, typeof (System.Delegate), false);
+					IsSubclassOf (typeof (System.Delegate));
 			}
 		}
 
@@ -565,10 +565,14 @@
 #endif
 		public virtual bool IsSubclassOf (Type c)
 		{
-			if (c == null)
+			if (c == null || c == this)
 				return false;
 
-			return (this != c) && is_subtype_of (this, c, false);
+			for (Type type = this.BaseType; type != null; type = type.BaseType)
+					if (type == c)
+						return true;
+
+			return false;
 		}
 
 		public virtual Type[] FindInterfaces (TypeFilter filter, object filterCriteria)
Index: mcs/class/corlib/System/MonoType.cs
===================================================================
--- mcs/class/corlib/System/MonoType.cs	(revision 66698)
+++ mcs/class/corlib/System/MonoType.cs	(working copy)
@@ -299,13 +299,14 @@
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		protected extern override bool IsPrimitiveImpl ();
 
-		protected override bool IsValueTypeImpl ()
+		public override bool IsSubclassOf (Type type)
 		{
-			return type_is_subtype_of (this, typeof (System.ValueType), false) &&
-				this != typeof (System.ValueType) &&
-				this != typeof (System.Enum);
+			if (type == null)
+				throw new ArgumentNullException ("type");
+
+			return base.IsSubclassOf (type);
 		}
-		
+
 		public override object InvokeMember (string name, BindingFlags invokeAttr,
 						     Binder binder, object target, object[] args,
 						     ParameterModifier[] modifiers,
Index: mcs/class/corlib/System.Reflection/ParameterInfo.cs
===================================================================
--- mcs/class/corlib/System.Reflection/ParameterInfo.cs	(revision 66698)
+++ mcs/class/corlib/System.Reflection/ParameterInfo.cs	(working copy)
@@ -103,23 +103,53 @@
 		}
 
 		public bool IsIn {
-			get {return (AttrsImpl & ParameterAttributes.In) != 0;}
+			get {
+#if NET_2_0
+				return (Attributes & ParameterAttributes.In) != 0;
+#else
+				return (AttrsImpl & ParameterAttributes.In) != 0;
+#endif
+			}
 		}
 
 		public bool IsLcid {
-			get {return (AttrsImpl & ParameterAttributes.Lcid) != 0;}
+			get {
+#if NET_2_0
+				return (Attributes & ParameterAttributes.Lcid) != 0;
+#else
+				return (AttrsImpl & ParameterAttributes.Lcid) != 0;
+#endif
+			}
 		}
 
 		public bool IsOptional {
-			get {return (AttrsImpl & ParameterAttributes.Optional) != 0;}
+			get {
+#if NET_2_0
+				return (Attributes & ParameterAttributes.Optional) != 0;
+#else
+				return (AttrsImpl & ParameterAttributes.Optional) != 0;
+#endif
+			}
 		}
 
 		public bool IsOut {
-			get {return (AttrsImpl & ParameterAttributes.Out) != 0;}
+			get {
+#if NET_2_0
+				return (Attributes & ParameterAttributes.Out) != 0;
+#else
+				return (AttrsImpl & ParameterAttributes.Out) != 0;
+#endif
+			}
 		}
 
 		public bool IsRetval {
-			get {return (AttrsImpl & ParameterAttributes.Retval) != 0;}
+			get {
+#if NET_2_0
+				return (Attributes & ParameterAttributes.Retval) != 0;
+#else
+				return (AttrsImpl & ParameterAttributes.Retval) != 0;
+#endif
+			}
 		}
 
 		public virtual MemberInfo Member {
Index: mcs/class/corlib/System.Reflection/FieldInfo.cs
===================================================================
--- mcs/class/corlib/System.Reflection/FieldInfo.cs	(revision 66698)
+++ mcs/class/corlib/System.Reflection/FieldInfo.cs	(working copy)
@@ -233,6 +233,11 @@
 		public virtual Type[] GetRequiredCustomModifiers () {
 			throw new NotImplementedException ();
 		}
+
+		public virtual object GetRawConstantValue ()
+		{
+			throw new NotSupportedException ();
+		}
 #endif
 
 		void _FieldInfo.GetIDsOfNames ([In] ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId)
