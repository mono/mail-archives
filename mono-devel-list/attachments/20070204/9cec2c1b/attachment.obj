Index: Assembly/AssemblyInfo.cs
===================================================================
--- Assembly/AssemblyInfo.cs	(revision 72265)
+++ Assembly/AssemblyInfo.cs	(working copy)
@@ -108,10 +108,7 @@
 [assembly: WebResource ("TreeView.js", "text/javascript")]
 [assembly: WebResource ("Menu.js", "text/javascript")]
 [assembly: WebResource ("GridView.js", "text/javascript")]
-[assembly: WebResource ("callback.js", "text/javascript")]
 [assembly: WebResource ("webform.js", "text/javascript")]
-
-[assembly: WebResource ("MaintainScrollPositionOnPostBack.js", "text/javascript")]
 #endif
 
 #if NET_2_0
Index: Makefile
===================================================================
--- Makefile	(revision 72265)
+++ Makefile	(working copy)
@@ -57,10 +57,8 @@
 	resources/TreeView_tminus.gif \
 	resources/TreeView_tplus.gif \
 	resources/transparent.gif \
-	resources/callback.js \
 	resources/webform.js \
 	resources/WebUIValidation_2.0.js \
-	resources/MaintainScrollPositionOnPostBack.js \
 	System.Web.UI.WebControls/GridView.js \
 	System.Web.UI.WebControls/DetailsView.js \
 	System.Web.UI.WebControls/TreeView.js \
Index: resources/callback.js
===================================================================
--- resources/callback.js	(revision 72265)
+++ resources/callback.js	(working copy)
@@ -1,79 +0,0 @@
-function WebForm_DoCallback (id, arg, callback, ctx, errorCallback)
-{
-	var myForm = WebForm_GetFormFromCtrl (id);
-	var qs = WebForm_getFormData (myForm) + "&__CALLBACKTARGET=" + id + "&&__CALLBACKARGUMENT=" + escape(arg);
-	// WebForm_httpPost (myForm.serverURL, qs, function (httpPost) { WebForm_ClientCallback (httpPost, ctx, callback, errorCallback); });
-	WebForm_httpPost (document.URL, qs, function (httpPost) { WebForm_ClientCallback (httpPost, ctx, callback, errorCallback); });
-}
-
-function WebForm_ClientCallback (httpPost, ctx, callback, errorCallback)
-{
-	try {
-		var doc = httpPost.responseText;
-		var separatorIndex = doc.indexOf("|");
-		if (separatorIndex != -1) {
-			var validationFieldLength = parseInt(doc.substring(0, separatorIndex));
-			if (!isNaN(validationFieldLength)) {
-				var validationField = doc.substring(separatorIndex + 1, separatorIndex + validationFieldLength + 1);
-				if (validationField != "") {
-					var validationFieldElement = theForm["__EVENTVALIDATION"];
-					if (!validationFieldElement) {
-						validationFieldElement = document.createElement("INPUT");
-						validationFieldElement.type = "hidden";
-						validationFieldElement.name = "__EVENTVALIDATION";
-						theForm.appendChild(validationFieldElement);
-					}
-					validationFieldElement.value = validationField;
-				}
-				callback (doc.substring(separatorIndex + validationFieldLength + 1), ctx);
-				return;
-			}
-		}
-	} catch (e) {
-		if (errorCallback != null)
-			errorCallback (httpPost.responseText, ctx);
-		return;
-	}
-	callback (httpPost.responseText, ctx);
-}
-
-function WebForm_getFormData (theForm)
-{
-	var qs = "";
-	var len = theForm.elements.length;
-	for (n=0; n<len; n++) {
-		var elem = theForm.elements [n];
-		if (qs.length > 0) qs += "&";
-		qs += elem.name + "=" + encodeURIComponent (elem.value);
-	}
-	return qs;
-}
-
-var axName = null;
-function WebForm_httpPost (url, data, callback)
-{
-	var httpPost = null;
-	
-	if (typeof XMLHttpRequest != "undefined") {
-		httpPost = new XMLHttpRequest ();
-	} else {
-		if (axName != null)
-			httpPost = new ActiveXObject (axName);
-		else {
-			var clsnames = new Array ("MSXML", "MSXML2", "MSXML3", "Microsoft");
-			for (n = 0; n < clsnames.length && httpPost == null; n++) {
-				axName = clsnames [n] + ".XMLHTTP";
-				try {
-					httpPost = new ActiveXObject (axName);
-				} catch (e) { axName = null; }
-			}
-			if (httpPost == null)
-				throw new Error ("XMLHTTP object could not be created.");
-		}
-	}
-	httpPost.onreadystatechange = function () { if (httpPost.readyState == 4) callback (httpPost); };
-	
-	httpPost.open ("POST", url, true);	// async
-	httpPost.setRequestHeader ("Content-Type", "application/x-www-form-urlencoded");
-	setTimeout (function () { httpPost.send (data); }, 10);
-}
Index: resources/MaintainScrollPositionOnPostBack.js
===================================================================
--- resources/MaintainScrollPositionOnPostBack.js	(revision 72265)
+++ resources/MaintainScrollPositionOnPostBack.js	(working copy)
@@ -1,51 +0,0 @@
-function WebForm_SaveScrollPositionSubmit() {
-    this.elements['__SCROLLPOSITIONX'].value = WebForm_GetScrollX();
-    this.elements['__SCROLLPOSITIONY'].value = WebForm_GetScrollY();
-    if ((typeof(this.oldSubmit) != "undefined") && (this.oldSubmit != null)) {
-        return this.oldSubmit();
-    }
-    return true;
-}
-function WebForm_SaveScrollPositionOnSubmit() {
-    this.elements['__SCROLLPOSITIONX'].value = WebForm_GetScrollX();
-    this.elements['__SCROLLPOSITIONY'].value = WebForm_GetScrollY();
-    if ((typeof(this.oldOnSubmit) != "undefined") && (this.oldOnSubmit != null)) {
-        return this.oldOnSubmit();
-    }
-    return true;
-}
-function WebForm_RestoreScrollPosition(currForm) {
-	currForm = currForm || theForm;
-	var ScrollX = currForm.elements['__SCROLLPOSITIONX'].value;
-	var ScrollY = currForm.elements['__SCROLLPOSITIONY'].value;
-	if (ScrollX != "" || ScrollY != "")
-    	window.scrollTo(ScrollX, ScrollY);
-    if ((typeof(this.oldOnLoad) != "undefined") && (this.oldOnLoad != null)) {
-        return this.oldOnLoad();
-    }
-    return true;
-}
-function WebForm_GetScrollX() {
-    if (window.pageXOffset) {
-        return window.pageXOffset;
-    }
-    else if (document.documentElement && document.documentElement.scrollLeft) {
-        return document.documentElement.scrollLeft;
-    }
-    else if (document.body) {
-        return document.body.scrollLeft;
-    }
-    return 0;
-}
-function WebForm_GetScrollY() {
-    if (window.pageYOffset) {
-        return window.pageYOffset;
-    }
-    else if (document.documentElement && document.documentElement.scrollTop) {
-        return document.documentElement.scrollTop;
-    }
-    else if (document.body) {
-        return document.body.scrollTop;
-    }
-    return 0;
-}
Index: resources/webform.js
===================================================================
--- resources/webform.js	(revision 72265)
+++ resources/webform.js	(working copy)
@@ -4,6 +4,7 @@
  * Authors:
  *   Chris Toshok (toshok@ximian.com)
  *   Lluis Sanchez Gual (lluis@novell.com)
+ *   Igor Zelmanovich (igorz@mainsoft.com)
  *
  * (c) 2005 Novell, Inc. (http://www.novell.com)
  *
@@ -119,6 +120,86 @@
 		__doPostBack (ctrl, par);
 }
 
+function WebForm_DoCallback (id, arg, callback, ctx, errorCallback)
+{
+	var myForm = WebForm_GetFormFromCtrl (id);
+	var qs = WebForm_getFormData (myForm) + "&__CALLBACKTARGET=" + id + "&&__CALLBACKARGUMENT=" + escape(arg);
+	// WebForm_httpPost (myForm.serverURL, qs, function (httpPost) { WebForm_ClientCallback (httpPost, ctx, callback, errorCallback); });
+	WebForm_httpPost (document.URL, qs, function (httpPost) { WebForm_ClientCallback (httpPost, ctx, callback, errorCallback); });
+}
+
+function WebForm_ClientCallback (httpPost, ctx, callback, errorCallback)
+{
+	try {
+		var doc = httpPost.responseText;
+		var separatorIndex = doc.indexOf("|");
+		if (separatorIndex != -1) {
+			var validationFieldLength = parseInt(doc.substring(0, separatorIndex));
+			if (!isNaN(validationFieldLength)) {
+				var validationField = doc.substring(separatorIndex + 1, separatorIndex + validationFieldLength + 1);
+				if (validationField != "") {
+					var validationFieldElement = theForm["__EVENTVALIDATION"];
+					if (!validationFieldElement) {
+						validationFieldElement = document.createElement("INPUT");
+						validationFieldElement.type = "hidden";
+						validationFieldElement.name = "__EVENTVALIDATION";
+						theForm.appendChild(validationFieldElement);
+					}
+					validationFieldElement.value = validationField;
+				}
+				callback (doc.substring(separatorIndex + validationFieldLength + 1), ctx);
+				return;
+			}
+		}
+	} catch (e) {
+		if (errorCallback != null)
+			errorCallback (httpPost.responseText, ctx);
+		return;
+	}
+	callback (httpPost.responseText, ctx);
+}
+
+function WebForm_getFormData (theForm)
+{
+	var qs = "";
+	var len = theForm.elements.length;
+	for (n=0; n<len; n++) {
+		var elem = theForm.elements [n];
+		if (qs.length > 0) qs += "&";
+		qs += elem.name + "=" + encodeURIComponent (elem.value);
+	}
+	return qs;
+}
+
+var axName = null;
+function WebForm_httpPost (url, data, callback)
+{
+	var httpPost = null;
+	
+	if (typeof XMLHttpRequest != "undefined") {
+		httpPost = new XMLHttpRequest ();
+	} else {
+		if (axName != null)
+			httpPost = new ActiveXObject (axName);
+		else {
+			var clsnames = new Array ("MSXML", "MSXML2", "MSXML3", "Microsoft");
+			for (n = 0; n < clsnames.length && httpPost == null; n++) {
+				axName = clsnames [n] + ".XMLHTTP";
+				try {
+					httpPost = new ActiveXObject (axName);
+				} catch (e) { axName = null; }
+			}
+			if (httpPost == null)
+				throw new Error ("XMLHTTP object could not be created.");
+		}
+	}
+	httpPost.onreadystatechange = function () { if (httpPost.readyState == 4) callback (httpPost); };
+	
+	httpPost.open ("POST", url, true);	// async
+	httpPost.setRequestHeader ("Content-Type", "application/x-www-form-urlencoded");
+	setTimeout (function () { httpPost.send (data); }, 10);
+}
+
 function WebForm_GetFormFromCtrl (id)
 {
 	// We need to translate the id from ASPX UniqueID to its ClientID.
@@ -155,5 +236,59 @@
 	return true;
 }
 
+function WebForm_SaveScrollPositionSubmit() {
+    this.elements['__SCROLLPOSITIONX'].value = WebForm_GetScrollX();
+    this.elements['__SCROLLPOSITIONY'].value = WebForm_GetScrollY();
+    if ((typeof(this.oldSubmit) != "undefined") && (this.oldSubmit != null)) {
+        return this.oldSubmit();
+    }
+    return true;
+}
 
+function WebForm_SaveScrollPositionOnSubmit() {
+    this.elements['__SCROLLPOSITIONX'].value = WebForm_GetScrollX();
+    this.elements['__SCROLLPOSITIONY'].value = WebForm_GetScrollY();
+    if ((typeof(this.oldOnSubmit) != "undefined") && (this.oldOnSubmit != null)) {
+        return this.oldOnSubmit();
+    }
+    return true;
+}
 
+function WebForm_RestoreScrollPosition(currForm) {
+	currForm = currForm || theForm;
+	var ScrollX = currForm.elements['__SCROLLPOSITIONX'].value;
+	var ScrollY = currForm.elements['__SCROLLPOSITIONY'].value;
+	if (ScrollX != "" || ScrollY != "")
+    	window.scrollTo(ScrollX, ScrollY);
+    if ((typeof(this.oldOnLoad) != "undefined") && (this.oldOnLoad != null)) {
+        return this.oldOnLoad();
+    }
+    return true;
+}
+
+function WebForm_GetScrollX() {
+    if (window.pageXOffset) {
+        return window.pageXOffset;
+    }
+    else if (document.documentElement && document.documentElement.scrollLeft) {
+        return document.documentElement.scrollLeft;
+    }
+    else if (document.body) {
+        return document.body.scrollLeft;
+    }
+    return 0;
+}
+
+function WebForm_GetScrollY() {
+    if (window.pageYOffset) {
+        return window.pageYOffset;
+    }
+    else if (document.documentElement && document.documentElement.scrollTop) {
+        return document.documentElement.scrollTop;
+    }
+    else if (document.body) {
+        return document.body.scrollTop;
+    }
+    return 0;
+}
+
Index: System.Web.UI/ClientScriptManager.cs
===================================================================
--- System.Web.UI/ClientScriptManager.cs	(revision 72265)
+++ System.Web.UI/ClientScriptManager.cs	(working copy)
@@ -164,9 +164,6 @@
 		{
 			if (!IsClientScriptIncludeRegistered (typeof (Page), "webform"))
 				RegisterClientScriptInclude (typeof (Page), "webform", GetWebResourceUrl (typeof (Page), "webform.js"));
-
-			if (!IsClientScriptIncludeRegistered (typeof (Page), "callback"))
-				RegisterClientScriptInclude (typeof (Page), "callback", GetWebResourceUrl (typeof (Page), "callback.js"));
 		}
 		
 		public string GetCallbackEventReference (Control control, string argument, string clientCallback, string context)
Index: System.Web.UI/Page.cs
===================================================================
--- System.Web.UI/Page.cs	(revision 72265)
+++ System.Web.UI/Page.cs	(working copy)
@@ -943,11 +943,8 @@
 	protected internal override void Render (HtmlTextWriter writer) {
 		if (MaintainScrollPositionOnPostBack) {
 			RequiresPostBackScript ();
+			ClientScript.RegisterWebFormClientScript ();
 
-			string scriptUrl = ClientScript.GetWebResourceUrl (typeof (Page), "MaintainScrollPositionOnPostBack.js");
-
-			ClientScript.RegisterClientScriptInclude (typeof (Page), "MaintainScrollPositionOnPostBack.js", scriptUrl);
-
 			ClientScript.RegisterHiddenField (ScrollPositionXID, Request [ScrollPositionXID]);
 			ClientScript.RegisterHiddenField (ScrollPositionYID, Request [ScrollPositionYID]);
 			
