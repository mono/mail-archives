Index: mono/configure.in
===================================================================
--- mono/configure.in	(revision 60118)
+++ mono/configure.in	(working copy)
@@ -1334,6 +1334,7 @@
 	AC_CHECK_LIB(ws2_32, main, LIBS="$LIBS -lws2_32", AC_ERROR(bad mingw install?))
 	AC_CHECK_LIB(psapi, main, LIBS="$LIBS -lpsapi", AC_ERROR(bad mingw install?))
 	AC_CHECK_LIB(ole32, main, LIBS="$LIBS -lole32", AC_ERROR(bad mingw install?))
+	AC_CHECK_LIB(oleaut32, main, LIBS="$LIBS -loleaut32", AC_ERROR(bad mingw install?))
 
 	dnl *********************************
 	dnl *** Check for struct ip_mreqn ***
Index: mcs/class/corlib/System.Runtime.InteropServices/Marshal.cs
===================================================================
--- mcs/class/corlib/System.Runtime.InteropServices/Marshal.cs	(revision 60118)
+++ mcs/class/corlib/System.Runtime.InteropServices/Marshal.cs	(working copy)
@@ -161,10 +161,8 @@
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		public extern static void DestroyStructure (IntPtr ptr, Type structuretype);
 
-		[MonoTODO]
-		public static void FreeBSTR (IntPtr ptr) {
-			throw new NotImplementedException ();
-		}
+        [MethodImplAttribute(MethodImplOptions.InternalCall)]
+        public extern static void FreeBSTR (IntPtr ptr);
 
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		public extern static void FreeCoTaskMem (IntPtr ptr);
@@ -592,10 +590,8 @@
 		[MethodImplAttribute(MethodImplOptions.InternalCall)]
 		public extern static int SizeOf (Type t);
 
-		[MonoTODO]
-		public static IntPtr StringToBSTR (string s) {
-			throw new NotImplementedException ();
-		}
+		[MethodImplAttribute(MethodImplOptions.InternalCall)]
+		public extern static IntPtr StringToBSTR (string s);
 
 		public static IntPtr StringToCoTaskMemAnsi (string s) {
 			int length = s.Length + 1;
Index: mono/mono/metadata/icall.c
===================================================================
--- mono/mono/metadata/icall.c	(revision 60118)
+++ mono/mono/metadata/icall.c	(working copy)
@@ -6913,6 +6913,7 @@
 	{"AllocCoTaskMem", ves_icall_System_Runtime_InteropServices_Marshal_AllocCoTaskMem},
 	{"AllocHGlobal", ves_icall_System_Runtime_InteropServices_Marshal_AllocHGlobal},
 	{"DestroyStructure", ves_icall_System_Runtime_InteropServices_Marshal_DestroyStructure},
+	{"FreeBSTR", ves_icall_System_Runtime_InteropServices_Marshal_FreeBSTR},
 	{"FreeCoTaskMem", ves_icall_System_Runtime_InteropServices_Marshal_FreeCoTaskMem},
 	{"FreeHGlobal", ves_icall_System_Runtime_InteropServices_Marshal_FreeHGlobal},
 	{"GetDelegateForFunctionPointerInternal", ves_icall_System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointerInternal},
@@ -6937,6 +6938,7 @@
 	{"ReadInt64", ves_icall_System_Runtime_InteropServices_Marshal_ReadInt64},
 	{"ReadIntPtr", ves_icall_System_Runtime_InteropServices_Marshal_ReadIntPtr},
 	{"SizeOf", ves_icall_System_Runtime_InteropServices_Marshal_SizeOf},
+	{"StringToBSTR", ves_icall_System_Runtime_InteropServices_Marshal_StringToBSTR},
 	{"StringToHGlobalAnsi", ves_icall_System_Runtime_InteropServices_Marshal_StringToHGlobalAnsi},
 	{"StringToHGlobalAuto", ves_icall_System_Runtime_InteropServices_Marshal_StringToHGlobalAnsi},
 	{"StringToHGlobalUni", ves_icall_System_Runtime_InteropServices_Marshal_StringToHGlobalUni},
Index: mono/mono/metadata/marshal.h
===================================================================
--- mono/mono/metadata/marshal.h	(revision 60118)
+++ mono/mono/metadata/marshal.h	(working copy)
@@ -330,6 +330,9 @@
 ves_icall_System_Runtime_InteropServices_Marshal_OffsetOf (MonoReflectionType *type, MonoString *field_name);
 
 gpointer
+ves_icall_System_Runtime_InteropServices_Marshal_StringToBSTR (MonoString *string);
+
+gpointer
 ves_icall_System_Runtime_InteropServices_Marshal_StringToHGlobalAnsi (MonoString *string);
 
 gpointer
@@ -350,6 +353,9 @@
 void
 ves_icall_System_Runtime_InteropServices_Marshal_FreeHGlobal (void *ptr);
 
+void
+ves_icall_System_Runtime_InteropServices_Marshal_FreeBSTR (void *ptr);
+
 void*
 ves_icall_System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement (MonoArray *arrayobj, int index);
 
Index: mono/mono/metadata/marshal.c
===================================================================
--- mono/mono/metadata/marshal.c	(revision 60118)
+++ mono/mono/metadata/marshal.c	(working copy)
@@ -104,6 +104,12 @@
 static gpointer
 mono_string_to_lpstr (MonoString *string_obj);
 
+static MonoString * 
+mono_string_from_bstr (gpointer bstr);
+
+static void 
+mono_free_bstr (gpointer bstr);
+
 static void
 mono_byvalarray_to_array (MonoArray *arr, gpointer native_arr, MonoClass *eltype, guint32 elnum);
 
@@ -171,6 +177,8 @@
 		register_icall (mono_string_to_utf8, "mono_string_to_utf8", "ptr obj", FALSE);
 		register_icall (mono_string_to_lpstr, "mono_string_to_lpstr", "ptr obj", FALSE);
 		register_icall (mono_string_to_bstr, "mono_string_to_bstr", "ptr obj", FALSE);
+		register_icall (mono_string_from_bstr, "mono_string_from_bstr", "obj ptr", FALSE);
+		register_icall (mono_free_bstr, "mono_free_bstr", "void ptr", FALSE);
 		register_icall (mono_string_to_ansibstr, "mono_string_to_ansibstr", "ptr object", FALSE);
 		register_icall (mono_string_builder_to_utf8, "mono_string_builder_to_utf8", "ptr object", FALSE);
 		register_icall (mono_string_builder_to_utf16, "mono_string_builder_to_utf16", "ptr object", FALSE);
@@ -603,11 +611,38 @@
 gpointer
 mono_string_to_bstr (MonoString *string_obj)
 {
-	g_error ("UnmanagedMarshal.AnsiBStr is not implemented.");
+#ifdef PLATFORM_WIN32
+	return SysAllocStringLen (mono_string_chars (string_obj), mono_string_length (string_obj));
+#else
+	g_error ("UnmanagedMarshal.BStr is not implemented.");
 	return NULL;
+#endif
 }
 
+MonoString *
+mono_string_from_bstr (gpointer bstr)
+{
+#ifdef PLATFORM_WIN32
+	MonoDomain *domain = mono_domain_get ();
+	return mono_string_new_utf16 (domain, bstr, SysStringLen (bstr));
+#else
+	g_error ("UnmanagedMarshal.BStr is not implemented.");
+	return NULL;
+#endif
+}
+
 void
+mono_free_bstr (gpointer bstr)
+{
+#ifdef PLATFORM_WIN32
+	SysFreeString ((BSTR)bstr);
+#else
+	g_error ("Free BSTR is not implemented.");
+	return NULL;
+#endif
+}
+
+void
 mono_string_to_byvalstr (gpointer dst, MonoString *src, int size)
 {
 	char *s;
@@ -1347,6 +1382,8 @@
 		return mono_string_to_lpstr;
 	case MONO_MARSHAL_CONV_STR_BSTR:
 		return mono_string_to_bstr;
+	case MONO_MARSHAL_CONV_BSTR_STR:
+		return mono_string_from_bstr;
 	case MONO_MARSHAL_CONV_STR_TBSTR:
 	case MONO_MARSHAL_CONV_STR_ANSIBSTR:
 		return mono_string_to_ansibstr;
@@ -1924,6 +1961,8 @@
 		return MONO_MARSHAL_CONV_STR_LPSTR;
 	case MONO_NATIVE_LPTSTR:
 		return MONO_MARSHAL_CONV_STR_LPTSTR;
+	case MONO_NATIVE_BSTR:
+		return MONO_MARSHAL_CONV_STR_BSTR;
 	default:
 		return -1;
 	}
@@ -1963,6 +2002,8 @@
 		return MONO_MARSHAL_CONV_LPSTR_STR;
 	case MONO_NATIVE_LPTSTR:
 		return MONO_MARSHAL_CONV_LPTSTR_STR;
+	case MONO_NATIVE_BSTR:
+		return MONO_MARSHAL_CONV_BSTR_STR;
 	default:
 		return -1;
 	}
@@ -4932,12 +4973,22 @@
 		if (t->byref && (t->attrs & PARAM_ATTRIBUTE_OUT)) {
 			mono_mb_emit_ldarg (mb, argnum);
 			mono_mb_emit_ldloc (mb, conv_arg);
-			mono_mb_emit_icall (mb, conv_to_icall (MONO_MARSHAL_CONV_LPSTR_STR));
+			if (conv == MONO_MARSHAL_CONV_STR_BSTR) {
+				mono_mb_emit_icall (mb, conv_to_icall (MONO_MARSHAL_CONV_BSTR_STR));
+				// BSTRs always need freed
+				mono_mb_emit_ldloc (mb, conv_arg);
+				mono_mb_emit_icall (mb, mono_free_bstr);
+			}
+			else
+				mono_mb_emit_icall (mb, conv_to_icall (MONO_MARSHAL_CONV_LPSTR_STR));
 			mono_mb_emit_byte (mb, CEE_STIND_I);		
 		} else {
 			if (mono_marshal_need_free (t, m->piinfo, spec)) {
 				mono_mb_emit_ldloc (mb, conv_arg);
-				mono_mb_emit_icall (mb, mono_marshal_free);
+				if (conv == MONO_MARSHAL_CONV_STR_BSTR)
+					mono_mb_emit_icall (mb, mono_free_bstr);
+				else
+					mono_mb_emit_icall (mb, mono_marshal_free);
 			}
 		}
 		break;
@@ -4958,7 +5009,10 @@
 
 		/* free the string */
 		mono_mb_emit_ldloc (mb, 0);
-		mono_mb_emit_icall (mb, g_free);
+		if (conv == MONO_MARSHAL_CONV_BSTR_STR)
+			mono_mb_emit_icall (mb, mono_free_bstr);
+		else
+			mono_mb_emit_icall (mb, g_free);
 		break;
 
 	case MARSHAL_ACTION_MANAGED_CONV_IN:
@@ -7840,12 +7894,25 @@
 {
 	MONO_ARCH_SAVE_REGS;
 
-	g_warning ("PtrToStringBSTR not implemented");
-	g_assert_not_reached ();
+	return mono_string_from_bstr(ptr);
+}
 
-	return NULL;
+gpointer
+ves_icall_System_Runtime_InteropServices_Marshal_StringToBSTR (MonoString* ptr)
+{
+	MONO_ARCH_SAVE_REGS;
+
+	return mono_string_to_bstr(ptr);
 }
 
+void
+ves_icall_System_Runtime_InteropServices_Marshal_FreeBSTR (gpointer ptr)
+{
+	MONO_ARCH_SAVE_REGS;
+
+	mono_free_bstr (ptr);
+}
+
 guint32 
 ves_icall_System_Runtime_InteropServices_Marshal_GetLastWin32Error (void)
 {
Index: mono/mono/metadata/metadata.h
===================================================================
--- mono/mono/metadata/metadata.h	(revision 60118)
+++ mono/mono/metadata/metadata.h	(working copy)
@@ -170,7 +170,8 @@
 	MONO_MARSHAL_CONV_OBJECT_STRUCT,
 	MONO_MARSHAL_CONV_DEL_FTN,
 	MONO_MARSHAL_CONV_FTN_DEL,
-	MONO_MARSHAL_FREE_ARRAY
+	MONO_MARSHAL_FREE_ARRAY,
+	MONO_MARSHAL_CONV_BSTR_STR
 } MonoMarshalConv;
 
 typedef struct {
