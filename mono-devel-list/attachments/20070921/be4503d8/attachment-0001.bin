using System;
using System.Threading;
using System.Reflection;
using System.Reflection.Emit;
using System.IO;
using System.Security;
using System.Security.Permissions;
using System.Runtime.InteropServices;
using System.Collections.Generic;

using NUnit.Framework;

namespace MonoTests.Generics
{
	public class GenericType<T,K>
	{
	}

	[TestFixture]
	public class GenericsTests
	{
		private AssemblyBuilder assembly;
		private ModuleBuilder module;
		private String assemblyPath;
		static string ASSEMBLY_NAME = "MonoTests.System.Reflection.Emit.TypeBuilderGenericInstantiationTest";
		static int typeIndexer = 0;


		// Return a unique type name
		private static string genTypeName ()
        {
			return "t" + (typeIndexer++) + "d";
        }


		[SetUp]
		protected void SetUp ()
		{
			AssemblyName assemblyName = new AssemblyName ();
			assemblyName.Name = genTypeName ();
			assemblyPath = "";
			assembly = 
				Thread.GetDomain ().DefineDynamicAssembly (
					assemblyName, AssemblyBuilderAccess.RunAndSave, ".");
			module = assembly.DefineDynamicModule ("module1", "TestModule"+ genTypeName () + ".dll");

        }

		[Test]
		public void EncodeGenericTypeWithoutGenericSuperType () {
			String name =  genTypeName ()  + "`1";
			TypeBuilder tb = module.DefineType (name, TypeAttributes.Public);
			tb.DefineGenericParameters ("T");
			ConstructorBuilder cb = tb.DefineConstructor (MethodAttributes.Public, CallingConventions.Standard, new Type[] {});
			cb.GetILGenerator().Emit(OpCodes.Ret);

			tb.CreateType ();

			assembly.Save ("TestAsm1.dll");			

			Assembly asm = Assembly.LoadFrom (assemblyPath + "TestAsm1.dll");
			Type t = asm.GetType (name);
			Assert.IsNotNull (t, "#1");
			Assert.AreEqual (typeof (object), t.BaseType);

		}

		[Test]
		public void EncodeGenericSuperTypeCorrectly () {
			String name =  genTypeName ()  + "`1";
			TypeBuilder tb = module.DefineType (name, TypeAttributes.Public, typeof (List<int>));
			tb.DefineGenericParameters ("T");
			ConstructorBuilder cb = tb.DefineConstructor (MethodAttributes.Public, CallingConventions.Standard, new Type[] {});
			cb.GetILGenerator().Emit(OpCodes.Ret);

			tb.CreateType ();

			assembly.Save ("TestAsm2.dll");			

			Assembly asm = Assembly.LoadFrom (assemblyPath + "TestAsm2.dll");
			Type t = asm.GetType (name);
			Assert.IsNotNull (t, "#1");
			Assert.AreEqual (typeof (List<int>), t.BaseType);

		}


		[Test]
		public void GenericTypeDefinitionSharesInstanceWithOpenInstantiation () {
			Type gtd = typeof (GenericType<,>);
			Type openInst = gtd.MakeGenericType (gtd.GetGenericArguments ());
			Assert.AreSame (gtd, openInst, "#1");
			Assert.AreSame (gtd, openInst.GetGenericTypeDefinition (), "#2");
			Assert.IsTrue (gtd.IsGenericTypeDefinition, "#3");
			Assert.IsTrue (openInst.IsGenericTypeDefinition, "#4");
		}

		[Test]
		public void DynamicCaseWorksWhenTypeBuilderInstantiatesTheGenericTypeDefinition () {
			String name =  genTypeName ()  + "`1";
			TypeBuilder tb = module.DefineType (name, TypeAttributes.Public);
			Type[] args = tb.DefineGenericParameters ("T");
			tb.MakeGenericType (args);
		
			Type gtd = tb.CreateType ();
			Type openInst = gtd.MakeGenericType (gtd.GetGenericArguments ());
			Assert.AreSame (gtd, openInst, "#1");
			Assert.AreSame (gtd, openInst.GetGenericTypeDefinition (), "#2");
			Assert.IsTrue (gtd.IsGenericTypeDefinition, "#3");
			Assert.IsTrue (openInst.IsGenericTypeDefinition, "#4");
		}


		[Test]
		public void DynamicGenericTypeDefinitionSharesInstanceWithOpenInstantiation () {
			String name =  genTypeName ()  + "`1";
			TypeBuilder tb = module.DefineType (name, TypeAttributes.Public);
			tb.DefineGenericParameters ("T");
		
			Type gtd = tb.CreateType ();
			Type openInst = gtd.MakeGenericType (gtd.GetGenericArguments ());
			Assert.AreSame (gtd, openInst, "#1");
			Assert.AreSame (gtd, openInst.GetGenericTypeDefinition (), "#2");
			Assert.IsTrue (gtd.IsGenericTypeDefinition, "#3");
			Assert.IsTrue (openInst.IsGenericTypeDefinition, "#4");
		}
	}
}	
