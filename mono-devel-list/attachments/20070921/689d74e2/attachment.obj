diff --git a/class/System.Data.Linq/System.Data.Linq/DataQuery.cs b/class/System.Data.Linq/System.Data.Linq/DataQuery.cs
new file mode 100755
index 0000000..7096d3d
--- /dev/null
+++ b/class/System.Data.Linq/System.Data.Linq/DataQuery.cs
@@ -0,0 +1,155 @@
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+//
+// Authors:
+//        Kevin Kubasik <kevin@kubasik.net>
+//
+
+using System.Collections;
+using System.Collections.Generic;
+using System.ComponentModel;
+using System.Data.Linq.Mapping;
+using System.Linq;
+using System.Linq.Expressions;
+using System.Reflection;
+
+namespace System.Data.Linq
+{
+    public class DataQuery<T> : IOrderedQueryable<T>, IQueryable<T>, IQueryProvider, IEnumerable<T>, IOrderedQueryable, IQueryable, IEnumerable, IListSource
+    {
+      
+        private IBindingList cachedList;
+        private DataContext context;
+        private Expression queryExpression;
+
+       
+        public DataQuery(DataContext context, Expression expression)
+        {
+            this.context = context;
+            this.queryExpression = expression;
+        }
+
+        public IBindingList GetNewBindingList()
+        {
+            MetaTable table = this.context.Services.Model.GetTable(typeof(T));
+            if (table != null)
+            {
+                ITable table2 = this.context.GetTable(table.RowType.Type);
+                return (BindingList<T>)((IList)Activator.CreateInstance(typeof(DataBindingList<>).MakeGenericType(new Type[] { table.RowType.Type }), BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance, null, new object[] { this.ToList<T>(), table2 }, null));
+            }
+            return new SortableBindingList<T>(this.ToList<T>());
+        }
+
+        IEnumerator<T> IEnumerable<T>.GetEnumerator()
+        {
+            return ((IEnumerable<T>)this.context.Provider.Execute(this.queryExpression).ReturnValue).GetEnumerator();
+        }
+
+        IEnumerator IEnumerable.GetEnumerator()
+        {
+            return ((IEnumerable)this.context.Provider.Execute(this.queryExpression).ReturnValue).GetEnumerator();
+        }
+
+        IList IListSource.GetList()
+        {
+            if (this.cachedList == null)
+            {
+                this.cachedList = this.GetNewBindingList();
+            }
+            return this.cachedList;
+        }
+
+        IQueryable<S> IQueryProvider.CreateQuery<S>(Expression expression)
+        {
+            if (expression == null)
+            {
+                throw new ArgumentNullException("expression");
+            }
+            if (!typeof(IQueryable<S>).IsAssignableFrom(expression.Type))
+            {
+                throw new ArgumentException("expression");
+            }
+            return new DataQuery<S>(this.context, expression);
+        }
+
+        IQueryable IQueryProvider.CreateQuery(Expression expression)
+        {
+            if (expression == null)
+            {
+                throw new ArgumentNullException("expression");
+            }
+            Type elementType = TypeSystem.GetElementType(expression.Type);
+            Type type2 = typeof(IQueryable<>).MakeGenericType(new Type[] { elementType });
+            if (!type2.IsAssignableFrom(expression.Type))
+            {
+                throw new ArgumentException("expression");
+            }
+            return (IQueryable)Activator.CreateInstance(typeof(DataQuery<>).MakeGenericType(new Type[] { elementType }), new object[] { this.context, expression });
+        }
+
+        object IQueryProvider.Execute(Expression expression)
+        {
+            return this.context.Provider.Execute(expression).ReturnValue;
+        }
+
+        S IQueryProvider.Execute<S>(Expression expression)
+        {
+            return (S)this.context.Provider.Execute(expression).ReturnValue;
+        }
+
+        public override string ToString()
+        {
+            return this.context.Provider.GetQueryText(this.queryExpression);
+        }
+
+        
+        bool IListSource.ContainsListCollection
+        {
+            get
+            {
+                return false;
+            }
+        }
+
+        Type IQueryable.ElementType
+        {
+            get
+            {
+                return typeof(T);
+            }
+        }
+
+        Expression IQueryable.Expression
+        {
+            get
+            {
+                return this.queryExpression;
+            }
+        }
+
+        IQueryProvider IQueryable.Provider
+        {
+            get
+            {
+                return this;
+            }
+        }
+    }
+
+
+}
\ No newline at end of file