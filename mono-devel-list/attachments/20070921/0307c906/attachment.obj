Index: System.Data.Linq/System.Data.Linq.dll.sources
===================================================================
--- System.Data.Linq/System.Data.Linq.dll.sources	(revision 86119)
+++ System.Data.Linq/System.Data.Linq.dll.sources	(working copy)
@@ -4,6 +4,7 @@
 System.Data.Linq/Binary.cs
 System.Data.Linq/ChangeConflictCollection.cs
 System.Data.Linq/ChangeConflictException.cs
+System.Data.Linq/ChangeSet.cs
 System.Data.Linq/ConflictMode.cs
 System.Data.Linq/DataContext.cs
 System.Data.Linq/DataShape.cs
Index: System.Data.Linq/System.Data.Linq/ChangeLog
===================================================================
--- System.Data.Linq/System.Data.Linq/ChangeLog	(revision 86119)
+++ System.Data.Linq/System.Data.Linq/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2007-09-20 Kevin Kubasik <kevin@kubasik.net>
+	* ChangeSet.cs
+		* Inital implementation of ChangeSet object - API complete
+	* CompiledQuery.cs
+		* Provides for compiling and caching queries for reuse.
+		* Should note that queries are not compiled until their first execution.
+		
 2007-08-24  Marek Safar  <marek.safar@gmail.com>
 
 	* *.cs: Some Beta 2 updates.
Index: System.Data.Linq/System.Data.Linq/ChangeSet.cs
===================================================================
--- System.Data.Linq/System.Data.Linq/ChangeSet.cs	(revision 0)
+++ System.Data.Linq/System.Data.Linq/ChangeSet.cs	(revision 0)
@@ -0,0 +1,73 @@
+ï»¿// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+// 
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+// 
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+//
+// Authors:
+//        Kevin Kubasik         <kevin@kubasik.net>
+//
+
+
+using System.Collections.Generic;
+using System.Collections.ObjectModel;
+using System.Globalization;
+
+namespace System.Data.Linq
+{
+    public sealed class ChangeSet
+    {
+
+        private Collection<object> added;
+        private Collection<object> modified;
+        private Collection<object> removed;
+
+
+        private ChangeSet(Collection<object> added, Collection<object> removed, Collection<object> modified)
+        {
+            this.added = added;
+            this.removed = removed;
+            this.modified = modified;
+        }
+
+        public override string ToString()
+        {
+            return
+                (
+                    string.Format("Added: {0}, Removed: {1}, Modified: {2}",
+                                  new object[]
+                                      {
+                                          added.Count,
+                                          modified.Count,
+                                          removed.Count
+                                      }));
+        }
+
+        public IList<object> AddedEntities
+        {
+            get { return added; }
+        }
+
+        public IList<object> ModifiedEntities
+        {
+            get { return modified; }
+        }
+
+        public IList<object> RemovedEntities
+        {
+            get { return removed; }
+        }
+    }
+}
\ No newline at end of file
Index: System.Data.Linq/System.Data.Linq/CompiledQuery.cs
===================================================================
--- System.Data.Linq/System.Data.Linq/CompiledQuery.cs	(revision 86119)
+++ System.Data.Linq/System.Data.Linq/CompiledQuery.cs	(working copy)
@@ -18,8 +18,11 @@
 //
 // Authors:
 //        Antonello Provenzano  <antonello@deveel.com>
+//        Kevin Kubasik         <kevin@kubasik.net>
 //
 
+
+using System.Data.Linq.Provider;
 using System.Linq;
 using System.Linq.Expressions;
 
@@ -27,35 +30,95 @@
 {
     public sealed class CompiledQuery
     {
-        #region Fields
+
         private LambdaExpression expression;
-        #endregion
+        private ICompiledQuery compquery;
 
-        #region Properties
         public LambdaExpression Expression
         {
             get { return expression; }
         }
-        #endregion
 
-        public static Func<TArg0, TResult> Compile<TArg0, TResult>(Expression<Func<TArg0, TResult>> query) where TArg0 : DataContext
+        private CompiledQuery(LambdaExpression expression)
         {
-            throw new NotImplementedException();
+            this.expression = expression;
         }
 
-        public static Func<TArg0, TArg1, TResult> Compile<TArg0, TArg1, TResult>(Expression<Func<TArg0, TArg1, TResult>> query) where TArg0 : DataContext
+        public static Func<TArg0, TResult> Compile<TArg0, TResult>(Expression<Func<TArg0, TResult>> query)
+            where TArg0 : DataContext
         {
-            throw new NotImplementedException();
+            if (typeof(ITable).IsAssignableFrom(query.Body.GetType()))
+            {
+                return query.Compile();
+            }
+            return (new CompiledQuery(query).DoExec<TArg0, TResult>);
         }
 
-        public static Func<TArg0, TArg1, TArg2, TResult> Compile<TArg0, TArg1, TArg2, TResult>(Expression<Func<TArg0, TArg1, TArg2, TResult>> query) where TArg0 : DataContext
+        public static Func<TArg0, TArg1, TResult> Compile<TArg0, TArg1, TResult>(
+            Expression<Func<TArg0, TArg1, TResult>> query) where TArg0 : DataContext
         {
-            throw new NotImplementedException();
+            if (typeof(ITable).IsAssignableFrom(query.Body.GetType()))
+            {
+                return query.Compile();
+            }
+            return (new CompiledQuery(query).DoExec<TArg0, TArg1, TResult>);
         }
 
-        public static Func<TArg0, TArg1, TArg2, TArg3, TResult> Compile<TArg0, TArg1, TArg2, TArg3, TResult>(Expression<Func<TArg0, TArg1, TArg2, TArg3, TResult>> query) where TArg0 : DataContext
+        public static Func<TArg0, TArg1, TArg2, TResult> Compile<TArg0, TArg1, TArg2, TResult>(
+            Expression<Func<TArg0, TArg1, TArg2, TResult>> query) where TArg0 : DataContext
         {
-            throw new NotImplementedException();
+            if (typeof(ITable).IsAssignableFrom(query.Body.GetType()))
+            {
+                return query.Compile();
+            }
+            return (new CompiledQuery(query).DoExec<TArg0, TArg1, TArg2, TResult>);
         }
+
+        public static Func<TArg0, TArg1, TArg2, TArg3, TResult> Compile<TArg0, TArg1, TArg2, TArg3, TResult>(
+            Expression<Func<TArg0, TArg1, TArg2, TArg3, TResult>> query) where TArg0 : DataContext
+        {
+            if (Type.GetType("System.Data.Linq.ITable").IsAssignableFrom(query.Body.GetType()))
+            {
+                return query.Compile();
+            }
+            return (new CompiledQuery(query).DoExec<TArg0, TArg1, TArg2, TArg3, TResult>);
+        }
+
+        private TResult DoExec<TArg0, TResult>(TArg0 arg0) where TArg0 : DataContext
+        {
+            return (TResult)ReallyDo(arg0, new object[] { arg0 });
+        }
+
+        private TResult DoExec<TArg0, TArg1, TResult>(TArg0 arg0, TArg1 arg1) where TArg0 : DataContext
+        {
+            return (TResult)ReallyDo(arg0, new object[] { arg0, arg1 });
+        }
+
+        private TResult DoExec<TArg0, TArg1, TArg2, TResult>(TArg0 arg0, TArg1 arg1, TArg2 arg2)
+            where TArg0 : DataContext
+        {
+            return (TResult)ReallyDo(arg0, new object[] { arg0, arg1, arg2 });
+        }
+
+        private TResult DoExec<TArg0, TArg1, TArg2, TArg3, TResult>(TArg0 arg0, TArg1 arg1, TArg2 arg2, TArg3 arg3)
+            where TArg0 : DataContext
+        {
+            return (TResult)ReallyDo(arg0, new object[] { arg0, arg1, arg2, arg3 });
+        }
+
+        private object ReallyDo(DataContext context, object[] args)
+        {
+            if (compquery == null)
+            {
+                lock (this)
+                {
+                    if (compquery == null)
+                    {
+                        compquery = context.Provider.Compile(expression);
+                    }
+                }
+            }
+            return compquery.Execute(context.Provider, args);
+        }
     }
 }
\ No newline at end of file