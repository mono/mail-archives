Index: System.Globalization/NumberFormatInfo.cs
===================================================================
--- System.Globalization/NumberFormatInfo.cs	(revision 71617)
+++ System.Globalization/NumberFormatInfo.cs	(working copy)
@@ -98,6 +98,10 @@
 		bool m_useUserOverride; // Unused, but MS.NET serializes this.
 		bool validForParseAsNumber; // Unused, but MS.NET serializes this.
 		bool validForParseAsCurrency; // Unused, but MS.NET serializes this.
+#if NET_2_0
+		string[] nativeDigits; // Unused, but MS.NET serializes this.
+		int digitSubstitution; // Unused, but MS.NET serializes this.
+#endif
 
 		internal NumberFormatInfo (int lcid)
 		{
Index: System.Globalization/DateTimeFormatInfo.cs
===================================================================
--- System.Globalization/DateTimeFormatInfo.cs	(revision 71617)
+++ System.Globalization/DateTimeFormatInfo.cs	(working copy)
@@ -36,6 +36,17 @@
 
 namespace System.Globalization
 {
+#if NET_2_0
+	[Flags]
+	enum DateTimeFormatFlags {
+		Unused,
+		But,
+		Serialized,
+		By,
+		Microsoft
+	}
+#endif
+
 	[Serializable]
 	public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider {
 		private static readonly string MSG_READONLY = "This instance is read only";
@@ -79,9 +90,9 @@
 		private string _RFC1123Pattern;
 		private string _SortableDateTimePattern;
 		private string _UniversalSortableDateTimePattern;
-		private DayOfWeek firstDayOfWeek;
+		private int firstDayOfWeek;
 		private Calendar calendar;
-		private CalendarWeekRule calendarWeekRule;
+		private int calendarWeekRule;
 		private string[] abbreviatedDayNames;
 		private string[] dayNames;
 		private string[] monthNames;
@@ -113,6 +124,14 @@
 		private string[] m_abbrevEnglishEraNames;
 		private string[] m_dateWords;
 		private int[] optionalCalendars;
+#if NET_2_0
+		private string[] m_superShortDayNames;
+		private string[] genitiveMonthNames;
+		private string[] m_genitiveAbbreviatedMonthNames;
+		private string[] leapYearMonthNames;
+		private DateTimeFormatFlags formatFlags;
+		private string m_name; // Unused, but MS.NET serializes this
+#endif
 
 		public DateTimeFormatInfo()
 		{
@@ -142,9 +161,9 @@
 			_SortableDateTimePattern = "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
 			_UniversalSortableDateTimePattern = "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
 
-			firstDayOfWeek = DayOfWeek.Sunday;
+			firstDayOfWeek = (int)DayOfWeek.Sunday;
 			calendar = new GregorianCalendar();
-			calendarWeekRule = CalendarWeekRule.FirstDay;
+			calendarWeekRule = (int)CalendarWeekRule.FirstDay;
 
 			abbreviatedDayNames = INVARIANT_ABBREVIATED_DAY_NAMES;
 			dayNames = INVARIANT_DAY_NAMES;
@@ -498,13 +517,13 @@
 		{
 			get
 			{
-				return firstDayOfWeek;
+				return (DayOfWeek)firstDayOfWeek;
 			}
 			set
 			{
 				if (IsReadOnly) throw new InvalidOperationException(MSG_READONLY);
 				if ((int) value < 0 || (int) value > 6) throw new ArgumentOutOfRangeException();
-				firstDayOfWeek = value;
+				firstDayOfWeek = (int)value;
 			}
 		}
 
@@ -526,12 +545,12 @@
 		{
 			get
 			{
-				return calendarWeekRule;
+				return (CalendarWeekRule)calendarWeekRule;
 			}
 			set
 			{
 				if (IsReadOnly) throw new InvalidOperationException(MSG_READONLY);
-				calendarWeekRule = value;
+				calendarWeekRule = (int)value;
 			}
 		}
 
Index: System.Globalization/CompareInfo.cs
===================================================================
--- System.Globalization/CompareInfo.cs	(revision 71617)
+++ System.Globalization/CompareInfo.cs	(working copy)
@@ -56,6 +56,9 @@
 		[NonSerialized]
 		private IntPtr ICU_collator;
 		private int win32LCID;	// Unused, but MS.NET serializes this
+#if NET_2_0
+		private string m_name; // Unused, but MS.NET serializes this
+#endif
 
 		[NonSerialized]
 		SimpleCollator collator;
Index: System.Globalization/GregorianCalendar.cs
===================================================================
--- System.Globalization/GregorianCalendar.cs	(revision 71617)
+++ System.Globalization/GregorianCalendar.cs	(working copy)
@@ -44,6 +44,7 @@
 [Serializable]
 [MonoTODO ("Serialization format not compatible with .NET")]
 public class GregorianCalendar : Calendar {
+
 	/// <summary>
 	/// The era number for the Common Era (C.E.) or Anno Domini (A.D.)
 	/// respective.
@@ -506,6 +507,9 @@
 			return Max;
 		}
 	}
+
+	private int m_type; // Unused, by MS serializes this
+	private int m_currentEraValue; // Unused, by MS serializes this
 #endif
 	
 	/// <summary>
Index: System.Globalization/ChangeLog
===================================================================
--- System.Globalization/ChangeLog	(revision 71617)
+++ System.Globalization/ChangeLog	(working copy)
@@ -1,3 +1,19 @@
+2006-01-24  Chris Toshok  <toshok@ximian.com>
+
+	[ these fix nunit built with MS .net 2.0, running on mono.  nunit
+	apparently stores all manner of things in its resources ]
+	
+	* NumberFormatInfo.cs: add unused nativeDigits and
+	digitSubstitution fields that MS serializes.
+
+	* DateTimeFormatInfo.cs: serialization fixes.  MS apparently
+	stores (and serializes) a couple of fields as ints, but exposes
+	them to programmers as Enum's.
+	
+	* CompareInfo.cs: add unused m_name field that MS serializes.
+
+	* GregorianCalendar.cs: add a couple of unused fields that MS serializes.
+
 2007-01-22  Atsushi Enomoto  <atsushi@ximian.com>
 
 	* CompareInfo.cs : there was a test which raises assertion failure
