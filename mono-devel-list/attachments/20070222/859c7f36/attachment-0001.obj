Index: AppDomainSetupTest.cs
===================================================================
--- AppDomainSetupTest.cs	(revision 73059)
+++ AppDomainSetupTest.cs	(working copy)
@@ -32,7 +32,48 @@
 			}
 		}
 
+		// LAMESPEC:
+		// The docs don't mention that ConfigurationFile is relative to
+		// the ApplicationBase.
 		[Test]
+		public void ConfigurationFile_RelativeToApplicationBase()
+		{
+			string fileName = "blar.config";
+			AppDomainSetup setup = new AppDomainSetup();
+			string dir = "app_base";
+			setup.ApplicationBase = dir;
+			setup.ConfigurationFile = fileName;
+			string baseDir = Path.GetFullPath(dir);
+			string configFile = Path.Combine(baseDir, fileName);
+			Assert.AreEqual(configFile, setup.ConfigurationFile, "Check relative to ApplicationBase");
+		}
+
+		[Test]
+		public void ConfigurationFile_Null()
+		{
+			AppDomainSetup setup = new AppDomainSetup();
+			Assert.IsNull(setup.ConfigurationFile, "Check that ConfigurationFile defaults to null.");
+		}
+
+		[Test, ExpectedException(typeof(MemberAccessException),
+			"The ApplicationBase must be set before retrieving this property.")]
+		public void ConfigurationFile_MustSetApplicationBase()
+		{
+			AppDomainSetup setup = new AppDomainSetup();
+			setup.ConfigurationFile = "blar.config";
+			string configFile = setup.ConfigurationFile;
+		}
+
+		[Test]
+		public void ConfigurationFile_FullPathDontNeedApplicationBase()
+		{
+			AppDomainSetup setup = new AppDomainSetup();
+			string configFile = Path.GetFullPath("blar.config");
+			setup.ConfigurationFile = configFile;
+			Assert.AreEqual(configFile, setup.ConfigurationFile);
+		}
+
+		[Test]
 		public void ApplicationBase1 ()
 		{
 			string expected_path = tmpPath.Replace(@"\", @"/");
Index: AppDomainTest.cs
===================================================================
--- AppDomainTest.cs	(revision 73059)
+++ AppDomainTest.cs	(working copy)
@@ -37,6 +37,7 @@
 using System.Security.Permissions;
 using System.Security.Policy;
 using System.Security.Principal;
+using System.Configuration;
 
 namespace MonoTests.System
 {
@@ -70,7 +71,34 @@
 			files.Clear ();
 		}
 
+		// LAMESPEC:
+		// The docs don't mention that ConfigurationFile is relative to
+		// the ApplicationBase.
 		[Test]
+		public void ConfigurationFile_RelativeToApplicationBase()
+		{
+			string exePath = Environment.GetCommandLineArgs()[0];
+			string appBase = Path.GetDirectoryName(exePath);
+			string file = "test.config";
+			string expectedConfigurationFile = Path.Combine(appBase, file);
+
+			AppDomainSetup setup = new AppDomainSetup();	
+			setup.ConfigurationFile = file;	
+			ad = AppDomain.CreateDomain("ConfigurationFileDomain", null, setup);
+			RemoteConfigurationFile remote = (RemoteConfigurationFile)ad.CreateInstanceFromAndUnwrap(
+			typeof(RemoteConfigurationFile).Assembly.CodeBase, typeof(RemoteConfigurationFile).FullName);
+			Assert.AreEqual(expectedConfigurationFile, remote.GetConfigurationFile(), "Check for expected ConfigurationFile path.");
+		}
+
+		class RemoteConfigurationFile : MarshalByRefObject
+		{
+			public string GetConfigurationFile()
+			{
+				return AppDomain.CurrentDomain.SetupInformation.ConfigurationFile;
+			}
+		}
+
+		[Test]
 		public void SetThreadPrincipal ()
 		{
 			IIdentity i = new GenericIdentity ("sebastien@ximian.com", "rfc822");