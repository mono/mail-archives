Index: mcs/class/corlib/System/Variant.cs
===================================================================
--- mcs/class/corlib/System/Variant.cs	(revision 66817)
+++ mcs/class/corlib/System/Variant.cs	(working copy)
@@ -88,6 +88,9 @@
 		[FieldOffset(8)]
 		public uint uintVal;
 
+        [FieldOffset(8)]
+        public IntPtr pdispVal;
+
 		public void SetValue(object obj) {
 			vt = (short)VarEnum.VT_EMPTY;
 			if (obj == null)
@@ -148,11 +151,24 @@
 			{
 				vt = (short)VarEnum.VT_BSTR;
 				bstrVal = Marshal.StringToBSTR((string)obj);
+            }
+            else if (t == typeof(bool))
+            {
+                vt = (short)VarEnum.VT_BOOL;
+                lVal = ((bool)obj) ? -1 : 0;
+            }
+            else
+            {
+                try 
+                {
+                    vt = (short)VarEnum.VT_DISPATCH;
+                    pdispVal = Marshal.GetIUnknownForObject(obj);
+                }
+                catch (Exception ex)
+                {
+                    throw new NotImplementedException(string.Format("Variant couldn't handle object of type {0}", obj.GetType()), ex);
+                }
 			}
-			else
-			{
-				throw new NotImplementedException(string.Format("Variant couldn't handle object of type {0}", obj.GetType()));
-			}
 		}
 
 		public object GetValue() {
@@ -189,18 +205,29 @@
 			case VarEnum.VT_R8:
 				obj = dblVal;
 				break;
+			case VarEnum.VT_BOOL:
+				obj = !(lVal == 0);
+				break;
 			case VarEnum.VT_BSTR:
 				obj = Marshal.PtrToStringBSTR(bstrVal);
 				break;
+            case VarEnum.VT_UNKNOWN:
+            case VarEnum.VT_DISPATCH:
+                obj = Marshal.GetObjectForIUnknown(pdispVal);
+                break;
 			}
 			return obj;
+		}
+
+		public void Clear ()
+		{
+			if ((VarEnum)vt == VarEnum.VT_BSTR) {
+				Marshal.FreeBSTR (bstrVal);
+			}
+			else if ((VarEnum)vt == VarEnum.VT_DISPATCH || (VarEnum)vt == VarEnum.VT_UNKNOWN) {
+				if (pdispVal != IntPtr.Zero)
+					Marshal.Release (pdispVal);
+            }
 		}
-
-		public void Clear() {
-			if ((VarEnum)vt == VarEnum.VT_BSTR)
-			{
-				Marshal.FreeBSTR(bstrVal);
-			}
-		}
 	}
 }
Index: mcs/class/corlib/System/ChangeLog
===================================================================
--- mcs/class/corlib/System/ChangeLog	(revision 66817)
+++ mcs/class/corlib/System/ChangeLog	(working copy)
@@ -1,3 +1,7 @@
+2006-10-20  Jonathan Chambers  <joncham@gmail.com>
+
+	* Variant.cs: Add support for bool and interfaces.
+	
 2006-10-18  Kornél Pál  <kornelpal@gmail.com>
 
 	* Type.cs: Removed is_subtype_of because IsSubclassOf should be used
Index: mono/mono/tests/cominterop.cs
===================================================================
--- mono/mono/tests/cominterop.cs	(revision 66817)
+++ mono/mono/tests/cominterop.cs	(working copy)
@@ -54,8 +54,14 @@
 	public static extern int mono_test_marshal_variant_in_double([MarshalAs(UnmanagedType.Struct)]object obj);
 
 	[DllImport("libtest")]
-	public static extern int mono_test_marshal_variant_in_bstr([MarshalAs(UnmanagedType.Struct)]object obj);
+	public static extern int mono_test_marshal_variant_in_bstr ([MarshalAs (UnmanagedType.Struct)]object obj);
 
+	[DllImport ("libtest")]
+	public static extern int mono_test_marshal_variant_in_bool_true ([MarshalAs (UnmanagedType.Struct)]object obj);
+
+	[DllImport ("libtest")]
+	public static extern int mono_test_marshal_variant_in_bool_false ([MarshalAs (UnmanagedType.Struct)]object obj);
+
 	[DllImport("libtest")]
 	public static extern int mono_test_marshal_variant_out_sbyte([MarshalAs(UnmanagedType.Struct)]out object obj);
 
@@ -87,16 +93,25 @@
 	public static extern int mono_test_marshal_variant_out_double([MarshalAs(UnmanagedType.Struct)]out object obj);
 
 	[DllImport("libtest")]
-	public static extern int mono_test_marshal_variant_out_bstr([MarshalAs(UnmanagedType.Struct)]out object obj);
+	public static extern int mono_test_marshal_variant_out_bstr ([MarshalAs (UnmanagedType.Struct)]out object obj);
 
+	[DllImport ("libtest")]
+	public static extern int mono_test_marshal_variant_out_bstr ([MarshalAs (UnmanagedType.Struct)]out object obj);
+
+	[DllImport("libtest")]
+	public static extern int mono_test_marshal_variant_out_bool_true ([MarshalAs (UnmanagedType.Struct)]out object obj);
+
+	[DllImport ("libtest")]
+	public static extern int mono_test_marshal_variant_out_bool_false ([MarshalAs (UnmanagedType.Struct)]out object obj);
+
     [DllImport ("libtest")]
     public static extern int mono_test_marshal_com_object_create (out IntPtr pUnk);
 
     [DllImport ("libtest")]
     public static extern int mono_test_marshal_com_object_destroy (IntPtr pUnk);
 
-    [DllImport ("libtest")]
-    public static extern int mono_test_marshal_com_object_ref_count (IntPtr pUnk);
+	[DllImport ("libtest")]
+	public static extern int mono_test_marshal_com_object_ref_count (IntPtr pUnk);
 
 	public static int Main() {
 
Index: mono/mono/tests/ChangeLog
===================================================================
--- mono/mono/tests/ChangeLog	(revision 66817)
+++ mono/mono/tests/ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2006-10-18  Jonathan Chambers  <joncham@gmail.com>
+
+	* cominterop.cs: Added more tests for Variant.
+	* libtest.c: Added more tests for Variant.
+	
 2006-10-02  Zoltan Varga  <vargaz@gmail.com>
 
 	* static-constructor.cs: Add a new test.
Index: mono/mono/tests/libtest.c
===================================================================
--- mono/mono/tests/libtest.c	(revision 66817)
+++ mono/mono/tests/libtest.c	(working copy)
@@ -2013,6 +2013,22 @@
 }
 
 STDCALL int
+mono_test_marshal_variant_in_bool_true (VARIANT variant)
+{
+	if (variant.vt == VT_BOOL && variant.ullVal == VARIANT_TRUE)
+		return 0;
+	return 1;
+}
+
+STDCALL int
+mono_test_marshal_variant_in_bool_false (VARIANT variant)
+{
+	if (variant.vt == VT_BOOL && variant.ullVal == VARIANT_FALSE)
+		return 0;
+	return 1;
+}
+
+STDCALL int
 mono_test_marshal_variant_out_sbyte(VARIANT* variant)
 {
 	variant->vt = VT_I1;
@@ -2111,6 +2127,24 @@
 	return 0;
 }
 
+STDCALL int
+mono_test_marshal_variant_out_bool_true (VARIANT* variant)
+{
+	variant->vt = VT_BOOL;
+	variant->bstrVal = VARIANT_TRUE;
+
+	return 0;
+}
+
+STDCALL int
+mono_test_marshal_variant_out_bool_false (VARIANT* variant)
+{
+	variant->vt = VT_BOOL;
+	variant->bstrVal = VARIANT_FALSE;
+
+	return 0;
+}
+
 #ifdef _MSC_VER
 #define COM_STDCALL __stdcall
 #else