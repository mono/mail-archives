Index: class/corlib/System.Threading/WaitHandle.cs
===================================================================
--- class/corlib/System.Threading/WaitHandle.cs	(révision 82236)
+++ class/corlib/System.Threading/WaitHandle.cs	(copie de travail)
@@ -221,12 +221,7 @@
 			[SecurityPermission (SecurityAction.LinkDemand, UnmanagedCode = true)]
 			[SecurityPermission (SecurityAction.InheritanceDemand, UnmanagedCode = true)]
 			set {
-				//
-				// Notice, from the 2.x documentation:
-				//    Assigning a new value to the Handle property, will not release
-				//    the previous handle, this could lead to a leak
-				//
-				safe_wait_handle = new SafeWaitHandle (value, false);
+				safe_wait_handle = new SafeWaitHandle (value, true);
 			}
 		}
 		
Index: class/corlib/System.Runtime.InteropServices/SafeHandle.cs
===================================================================
--- class/corlib/System.Runtime.InteropServices/SafeHandle.cs	(révision 82236)
+++ class/corlib/System.Runtime.InteropServices/SafeHandle.cs	(copie de travail)
@@ -124,7 +124,7 @@
 		[ReliabilityContract (Consistency.WillNotCorruptState, Cer.Success)]
 		public IntPtr DangerousGetHandle ()
 		{
-			if (refcount == 0){
+			if (refcount == 0 && handle == invalid_handle_value) {
 				throw new ObjectDisposedException (GetType ().FullName);
 			}
 