Index: Cairo.cs
===================================================================
--- Cairo.cs	(revision 52380)
+++ Cairo.cs	(working copy)
@@ -110,27 +110,27 @@
 
                 [DllImport (CairoImp)]                
                 public static extern void cairo_rotate (IntPtr cr, double angle);
-
-                [DllImport (CairoImp)]
-                public static extern void cairo_transform (IntPtr cr, out Matrix_T matrix);
+		
+		[DllImport (CairoImp)]
+		public static extern void cairo_transform (IntPtr cr, Matrix matrix);
                 
                 [DllImport (CairoImp)]
-                public static extern void cairo_set_matrix (IntPtr cr, Matrix_T matrix);
+                public static extern void cairo_set_matrix (IntPtr cr, Matrix matrix);
                 
                 [DllImport (CairoImp)]
                 public static extern void cairo_identity_matrix (IntPtr cr);
 
                 [DllImport (CairoImp)]
-                public static extern void cairo_user_to_device (IntPtr cr, out double x, out double y);
+                public static extern void cairo_user_to_device (IntPtr cr, ref double x, ref double y);
 
                 [DllImport (CairoImp)]
-                public static extern void cairo_user_to_device_distance (IntPtr cr, out double dx, out double dy);
+                public static extern void cairo_user_to_device_distance (IntPtr cr, ref double dx, ref double dy);
 
                 [DllImport (CairoImp)]
-                public static extern void cairo_device_to_user (IntPtr cr, out double x, out double y);
+                public static extern void cairo_device_to_user (IntPtr cr, ref double x, ref double y);
 
                 [DllImport (CairoImp)]
-                public static extern void cairo_device_to_user_distance (IntPtr cr, out double dx, out double dy);
+                public static extern void cairo_device_to_user_distance (IntPtr cr, ref double dx, ref double dy);
 		
                 //
                 // Path creation
@@ -222,8 +222,7 @@
 							     double size);
 		
 		[DllImport (CairoImp)]
-                public static extern void cairo_set_font_matrix (IntPtr cr,
-							     Matrix_T matrix);
+                public static extern void cairo_set_font_matrix (IntPtr cr, Matrix matrix);
 		
                 [DllImport (CairoImp)]
                 public static extern void cairo_show_text (IntPtr cr, string utf8);
@@ -305,7 +304,7 @@
 		public static extern double cairo_get_miter_limit (IntPtr cr);
 
                 [DllImport (CairoImp)]
-                public static extern void cairo_get_matrix (IntPtr cr, Matrix_T matrix);
+                public static extern void cairo_get_matrix (IntPtr cr, Matrix matrix);
 
                 [DllImport (CairoImp)]
                 public static extern IntPtr cairo_get_target (IntPtr cr);
@@ -380,54 +379,39 @@
                 //
                 // Matrix
                 //
-
-                [DllImport (CairoImp)]                
-                public static extern void cairo_matrix_init (ref Matrix_T matrix,
-		 double xx, double yx, double xy, double yy, double x0, double y0);
 		
 		[DllImport (CairoImp)]                
-                public static extern void cairo_matrix_init_translate (ref Matrix_T matrix,
-							 double tx, double ty);
+		public static extern void cairo_matrix_init_translate (Matrix matrix, double tx, double ty);
 		
 		[DllImport (CairoImp)]                
-                public static extern void cairo_matrix_translate (ref Matrix_T matrix,
-							 double tx, double ty);
+		public static extern void cairo_matrix_translate (Matrix matrix, double tx, double ty);
 		
-                [DllImport (CairoImp)]
-                public static extern void cairo_matrix_init_identity (ref Matrix_T matrix);
+		[DllImport (CairoImp)]
+		public static extern void cairo_matrix_init_identity (Matrix matrix);
 
-                [DllImport (CairoImp)]                
-                public static extern void cairo_matrix_init_scale (ref Matrix_T matrix,
-								   double sx, 
-								   double sy);
+		[DllImport (CairoImp)]                
+		public static extern void cairo_matrix_init_scale (Matrix matrix, double sx, double sy);
 		
-                [DllImport (CairoImp)]                
-                public static extern void cairo_matrix_scale (ref Matrix_T matrix,
-								   double sx, 
-								   double sy);
+		[DllImport (CairoImp)]                
+		public static extern void cairo_matrix_scale (Matrix matrix, double sx, double sy);
 
-                [DllImport (CairoImp)]
-                public static extern void cairo_matrix_init_rotate (
-                        ref Matrix_T matrix, double radians);		
+		[DllImport (CairoImp)]
+		public static extern void cairo_matrix_init_rotate (Matrix matrix, double radians);		
 		
-                [DllImport (CairoImp)]                                
-                public static extern void cairo_matrix_rotate (
-                        ref Matrix_T matrix, double radians);
+		[DllImport (CairoImp)]                                
+		public static extern void cairo_matrix_rotate (Matrix matrix, double radians);
 
-                [DllImport (CairoImp)]                                
-                public static extern Cairo.Status cairo_matrix_invert (ref Matrix_T matrix);
+		[DllImport (CairoImp)]                                
+		public static extern Cairo.Status cairo_matrix_invert (Matrix matrix);
 
-                [DllImport (CairoImp)]                                
-                public static extern void cairo_matrix_multiply (
-                        ref Matrix_T result, ref Matrix_T a, ref Matrix_T b);
+		[DllImport (CairoImp)]                                
+		public static extern void cairo_matrix_multiply (Matrix result, Matrix a, Matrix b);
 
-                [DllImport (CairoImp)]                                
-                public static extern void cairo_matrix_transform_distance (
-                        ref Matrix_T matrix, ref double dx, ref double dy);
+		[DllImport (CairoImp)]                                
+		public static extern void cairo_matrix_transform_distance (Matrix matrix, ref double dx, ref double dy);
 
-                [DllImport (CairoImp)]                                
-                public static extern void cairo_matrix_transform_point (
-                        ref Matrix_T matrix, ref double x, ref double y);
+		[DllImport (CairoImp)]                                
+		public static extern void cairo_matrix_transform_point (Matrix matrix, ref double x, ref double y);
 
                 //
                 // Pattern functions
@@ -469,10 +453,10 @@
 		        double offset, double red, double green, double blue);
 
                 [DllImport (CairoImp)]
-                public static extern Status cairo_pattern_set_matrix (IntPtr pattern, IntPtr matrix);
+                public static extern Status cairo_pattern_set_matrix (IntPtr pattern, Matrix matrix);
 
                 [DllImport (CairoImp)]
-                public static extern Status cairo_pattern_get_matrix (IntPtr pattern, IntPtr matrix);
+                public static extern Status cairo_pattern_get_matrix (IntPtr pattern, Matrix matrix);
 
                 [DllImport (CairoImp)]
                 public static extern Status cairo_pattern_set_extend (IntPtr pattern, Extend extend);
Index: Graphics.cs
===================================================================
--- Graphics.cs	(revision 52380)
+++ Graphics.cs	(working copy)
@@ -488,52 +488,42 @@
                 {
                         CairoAPI.cairo_translate (state, tx, ty);
                 }
+                
+		public void Transform (Matrix m)
+		{
+			CairoAPI.cairo_transform (state, m);
+		}
+                	
 
-                public PointD TransformPoint
-                {
-			get {
-				double x; double y;				
-				CairoAPI.cairo_user_to_device (state, out x, out y);
-				return new PointD(x, y);
-			}
-                }
+		public void TransformPoint (ref double x, ref double y)
+		{
+                	CairoAPI.cairo_user_to_device (state, ref x, ref y);
+		}
 		
-                public Distance TransformDistance 
-                {
-			get {
-				double dx; double dy;
-				CairoAPI.cairo_user_to_device_distance (state, out dx, out dy);
-				return new Distance(dx, dy);
-			}
-                }
+                public void TransformDistance (ref double dx, ref double dy) 
+		{
+			CairoAPI.cairo_user_to_device_distance (state, ref dx, ref dy);
+		}
+			
+		public void InverseTransformPoint (ref double x, ref double y)
+		{
+			CairoAPI.cairo_device_to_user (state, ref x, ref y);
+		}
 
-                public PointD InverseTransformPoint
-                {
-			get {
-				double x; double y;
-				CairoAPI.cairo_device_to_user (state, out x, out y);
-				return new PointD (x, y);
-			}
-                }
-
-                public Distance InverseTransformDistance
-                {
-			get {
-				double dx; double dy;
-				CairoAPI.cairo_device_to_user_distance (state, out dx, out dy);
-				return new Distance (dx, dy);
-			}
-                }
+		public void InverseTransformDistance (ref double dx, ref double dy)
+		{
+			CairoAPI.cairo_device_to_user_distance (state, ref dx, ref dy);
+		}
 		
                 public Cairo.Matrix Matrix {
                         set {
-                                CairoAPI.cairo_set_matrix (state, value.Pointer);
+                                CairoAPI.cairo_set_matrix (state, value);
                         }
 
                         get {
-				Matrix_T m = new Matrix_T ();
+				Matrix m = new Matrix();
 				CairoAPI.cairo_get_matrix (state, m);
-                                return new Matrix (m);
+                                return m;
                         }
                 }
 		/*
@@ -553,14 +543,16 @@
                 }
 		 */ 
 
+		// FIXME should be made into a property
                 public void FontSetSize (double size)
                 {
                         CairoAPI.cairo_set_font_size (state, size);
                 }
 		
+		// FIXME should be made into a property
 		public void FontSetMatrix (Matrix m)
 		{
-			CairoAPI.cairo_set_font_matrix (state, m.Pointer);
+			CairoAPI.cairo_set_font_matrix (state, m);
 		}
                 
 		/*
Index: Matrix.cs
===================================================================
--- Matrix.cs	(revision 52380)
+++ Matrix.cs	(working copy)
@@ -3,6 +3,8 @@
 //
 // Author: Duncan Mak
 //         Hisham Mardam Bey (hisham.mardambey@gmail.com)
+//         Idan Gazit (idan@fastmail.fm)
+//
 // (C) Ximian Inc, 2003 - 2005.
 //
 // This is an OO wrapper API for the Cairo API
@@ -33,119 +35,159 @@
 using System.Runtime.InteropServices;
 
 namespace Cairo {
-   
-                  
-   [StructLayout(LayoutKind.Sequential)]
-   internal struct Matrix_T
-   {
-	   public double xx; 
-	   public double yx;
-	   public double xy; 
-	   public double yy;
-	   public double x0; 
-	   public double y0;	   
-   }
-   
-   
-   
-        public class Matrix
+
+   	[StructLayout(LayoutKind.Sequential)]
+        public class Matrix : ICloneable
         {		
-		internal Matrix_T matrix;
+		public double Xx;
+		public double Yx;
+		public double Xy; 
+		public double Yy;
+		public double X0; 
+		public double Y0;
+
+		public Matrix (double xx, double yx, double xy, double yy,
+				double x0, double y0)
+		{               
+			this.Xx = xx; this.Yx = yx; this.Xy = xy;
+			this.Yy = yy; this.X0 = x0; this.Y0 = y0;
+		}
+                
+                public Matrix ()
+		{
+			this.InitIdentity ();
+		}
 		
-                public Matrix ()       
-                {               
-			//CreateIdentify();
-                }
-		
-                internal Matrix (Matrix_T ptr)
+		public bool IsIdentity ()
+		{
+			return (this == new Matrix ());
+		}
+			
+                public void InitIdentity ()
                 {
-                        //if (ptr == null)
-			//  CreateIdentify ();
-			
-                        matrix = ptr;
+                	// this.Init(1,0,0,1,0,0);
+                	CairoAPI.cairo_matrix_init_identity (this);
                 }
 		
-                public void CreateIdentify ()
-                {			
-			CairoAPI.cairo_matrix_init_identity (ref matrix);
-                }
-		
 		public void Init (double xx, double yx, double xy, double yy,
 				  double x0, double y0)
 		{
-			matrix.xx = xx; matrix.yx = yx; matrix.xy = xy;
-			matrix.yy = yy; matrix.x0 = x0; matrix.y0 = y0;
+			this.Xx = xx; this.Yx = yx; this.Xy = xy;
+			this.Yy = yy; this.X0 = x0; this.Y0 = y0;
 		}
 		
 		public void InitTranslate (double tx, double ty)
 		{		
-			CairoAPI.cairo_matrix_init_translate (ref matrix, tx, ty);
+			//this.Init (1, 0, 0, 1, tx, ty);
+			CairoAPI.cairo_matrix_init_translate (this, tx, ty);
 		}		
 		  			       
 		public void Translate (double tx, double ty)
 		{
-			CairoAPI.cairo_matrix_translate (ref matrix, tx, ty);
+			CairoAPI.cairo_matrix_translate (this, tx, ty);
 		}
 		
                 public void InitScale (double sx, double sy)
                 {
-			CairoAPI.cairo_matrix_init_scale (ref matrix, sx, sy);
+			//this.Init (sx, 0, 0, sy, 0, 0);
+                	CairoAPI.cairo_matrix_init_scale (this, sx, sy);
                 }		
 		
                 public void Scale (double sx, double sy)
                 {
-			CairoAPI.cairo_matrix_scale (ref matrix, sx, sy);
+			CairoAPI.cairo_matrix_scale (this, sx, sy);
                 }
 
                 public void InitRotate (double radians)
                 {
-			CairoAPI.cairo_matrix_init_rotate (ref matrix, radians);
+                	/*
+                	double s, c;
+                	s = Math.Sin (radians);
+                	c = Math.Cos (radians);
+                	this.Init (c, s, -s, c, 0, 0);
+                	*/
+                	CairoAPI.cairo_matrix_init_rotate (this, radians);
                 }		
 		
                 public void Rotate (double radians)
                 {
-			CairoAPI.cairo_matrix_rotate (ref matrix, radians);
+			CairoAPI.cairo_matrix_rotate (this, radians);
                 }
 
                 public Cairo.Status Invert ()
                 {
-			return  CairoAPI.cairo_matrix_invert (ref matrix);
+			return CairoAPI.cairo_matrix_invert (this);
                 }
 
-
-                public static void Multiply (ref Cairo.Matrix res, 
-					 ref Cairo.Matrix a, ref Cairo.Matrix b)
-                {	
-			if (res == null)
-			  res = new Matrix ();
-						
-                        CairoAPI.cairo_matrix_multiply (ref res.matrix, 
-							ref a.matrix, 
-							ref b.matrix);
-                }
+		public void Multiply (Matrix b)
+		{
+			Matrix a = (Matrix) this.Clone ();
+			CairoAPI.cairo_matrix_multiply (this, a, b);
+		}
 		
+		public static Matrix Multiply (Matrix a, Matrix b) {
+			Matrix result = new Matrix ();
+			CairoAPI.cairo_matrix_multiply (result, a, b);
+			return result;
+		}
+			
+		
                 public void TransformDistance (ref double dx, ref double dy)
-                {
-                        CairoAPI.cairo_matrix_transform_distance (ref matrix, ref dx, ref dy);
+		{
+                        CairoAPI.cairo_matrix_transform_distance (this, ref dx, ref dy);
                 }
 
                 public void TransformPoint (ref double x, ref double y)
                 {
-                        CairoAPI.cairo_matrix_transform_point (ref matrix, ref x, ref y);
+                        CairoAPI.cairo_matrix_transform_point (this, ref x, ref y);
 		}
+
+		public override String ToString ()
+		{
+			String s = String.Format ("xx:{0:##0.0#} yx:{1:##0.0#} xy:{2:##0.0#} yy:{3:##0.0#} x0:{4:##0.0#} y0:{5:##0.0#}",
+				this.Xx, this.Yx, this.Xy, this.Yy, this.X0, this.Y0);
+			return s;
+		}
 		
-                internal Matrix_T Pointer {
-                        get { return matrix; }
-			set { matrix = value; }
-                }
+		public static bool operator == (Matrix lhs, Matrix rhs)
+		{
+			return (lhs.Xx == rhs.Xx &&
+				lhs.Xy == rhs.Xy &&
+				lhs.Yx == rhs.Yx &&
+				lhs.Yy == rhs.Yy &&
+				lhs.X0 == rhs.X0 &&
+				lhs.Y0 == rhs.Y0 );
+		}
 		
-		public IntPtr Raw {
-			get {
-				IntPtr p = Marshal.AllocCoTaskMem ( Marshal.SizeOf (matrix));
-				Marshal.StructureToPtr (matrix, p, true);
-				return p;
-			}
+		public static bool operator != (Matrix lhs, Matrix rhs)
+		{
+			return !(lhs==rhs);	
 		}
-				
+		
+		
+		
+		public override bool Equals(object o)
+		{
+			if (! (o is Matrix))
+				return false;
+			else
+				return (this == (Matrix) o);
+		}
+		
+		public override int GetHashCode()
+		{
+			return  (int)this.Xx ^ (int)this.Xx>>32 ^
+				(int)this.Xy ^ (int)this.Xy>>32 ^
+				(int)this.Yx ^ (int)this.Yx>>32 ^
+				(int)this.Yy ^ (int)this.Yy>>32 ^
+				(int)this.X0 ^ (int)this.X0>>32 ^
+				(int)this.Y0 ^ (int)this.Y0>>32;
+		}
+		
+		public object Clone()
+		{
+			return this.MemberwiseClone ();
+		}
+		
         }
 }
Index: Pattern.cs
===================================================================
--- Pattern.cs	(revision 52380)
+++ Pattern.cs	(working copy)
@@ -131,18 +131,13 @@
 		
                 public Matrix Matrix {
                         set { 
-				CairoAPI.cairo_pattern_set_matrix (pattern,
-								   value.Raw);
+				CairoAPI.cairo_pattern_set_matrix (pattern, value);
 			}
 
                         get {
-				Matrix_T matrix = new Matrix_T ();				
-				IntPtr p = Marshal.AllocCoTaskMem ( Marshal.SizeOf (matrix));
-				Marshal.StructureToPtr (matrix, p, true);
-				CairoAPI.cairo_pattern_get_matrix (pattern, p);
-				matrix = (Matrix_T)Marshal.PtrToStructure(p, typeof(Matrix_T));
-				Marshal.FreeCoTaskMem (p);
-				return new Cairo.Matrix (matrix);
+				Matrix m = new Matrix ();
+				CairoAPI.cairo_pattern_get_matrix (pattern, m);
+				return m;
                         }
                 }
 
