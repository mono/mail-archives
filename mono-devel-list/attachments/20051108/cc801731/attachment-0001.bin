Index: Mono.Cairo/en/Cairo/Matrix.xml
===================================================================
--- Mono.Cairo/en/Cairo/Matrix.xml	(revision 52671)
+++ Mono.Cairo/en/Cairo/Matrix.xml	(working copy)
@@ -1,5 +1,5 @@
 <Type Name="Matrix" FullName="Cairo.Matrix">
-  <TypeSignature Language="C#" Value="public class Matrix" />
+  <TypeSignature Language="C#" Value="public class Matrix : System.ICloneable" />
   <AssemblyInfo>
     <AssemblyName>Mono.Cairo</AssemblyName>
     <AssemblyVersion>1.0.5000.0</AssemblyVersion>
@@ -7,29 +7,21 @@
   <Base>
     <BaseTypeName>System.Object</BaseTypeName>
   </Base>
-  <Interfaces />
+  <Interfaces>
+    <Interface>
+      <InterfaceName>System.ICloneable</InterfaceName>
+    </Interface>
+  </Interfaces>
   <Members>
     <Member MemberName=".ctor">
       <MemberSignature Language="C#" Value="public Matrix ();" />
       <MemberType>Constructor</MemberType>
       <Parameters />
       <Docs>
-        <summary>Default public constructor to create a Matrix object.</summary>
+        <summary>Create a new Matrix, initialized to the identity.</summary>
         <remarks />
       </Docs>
     </Member>
-    <Member MemberName="CreateIdentify">
-      <MemberSignature Language="C#" Value="public void CreateIdentify ();" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Void</ReturnType>
-      </ReturnValue>
-      <Parameters />
-      <Docs>
-        <summary>Modifies the matrix to be an identity transformation.</summary>
-        <remarks />
-      </Docs>
-    </Member>
     <Member MemberName="Init">
       <MemberSignature Language="C#" Value="public void Init (double xx, double yx, double xy, double yy, double x0, double y0);" />
       <MemberType>Method</MemberType>
@@ -112,9 +104,9 @@
         <Parameter Name="sy" Type="System.Double" />
       </Parameters>
       <Docs>
-        <param name="sx">scale factor in the X direction</param>
-        <param name="sy">scale factor in the Y direction</param>
-        <summary>Initializes the matrix to a transformation that scales by @x and sy in the X and Y dimensions, respectively.</summary>
+        <param name="sx">scale factor in the X dimension.</param>
+        <param name="sy">scale factor in the Y dimension.</param>
+        <summary>Initializes the matrix to a transformation that scales by sx and sy in the X and Y dimensions, respectively.</summary>
         <remarks />
       </Docs>
     </Member>
@@ -145,9 +137,9 @@
         <Parameter Name="radians" Type="System.Double" />
       </Parameters>
       <Docs>
-        <param name="radians">angle of rotation, in radians. The direction of rotation is defined such that positive angles rotate in the direction from the positive X axis toward the positive Y axis. With the default axis orientation of cairo, positive angles rotate in a clockwise direction.
+        <param name="radians">Angle of rotation, in radians. The direction of rotation is defined such that positive angles rotate in the direction from the positive X axis toward the positive Y axis. With the default axis orientation of cairo, positive angles rotate in a clockwise direction.
 </param>
-        <summary>Initialize the matrix to a transformation that rotates by radians.</summary>
+        <summary>Initialize the matrix to a transformation that rotates by the specified radians value.</summary>
         <remarks />
       </Docs>
     </Member>
@@ -175,32 +167,12 @@
       </ReturnValue>
       <Parameters />
       <Docs>
-        <summary>Changes matrix to be the inverse of it's original value. Not all transformation matrices have inverses; if the matrix collapses points together (it is degenerate, then it has no inverse and this function will fail.
+        <summary>Changes matrix to be the inverse of its original value. Not all transformation matrices have inverses; if the matrix collapses points together (it is degenerate), then it has no inverse and this function will fail.
 </summary>
-        <returns>If the matrix has an inverse, modifies the matrix to be the inverse matrix and returns a success <see cref="T:Cairo.Status" /> if the operation succeeds and invalid / non-invertable otherwise.</returns>
+        <returns>If the matrix has an inverse, modifies the matrix to be the inverse matrix and returns <see cref="T:Cairo.Status " />.Success. Otherwise, return <see cref="T:Cairo.Status" />.InvalidMatrix if the matrix is invalid.</returns>
         <remarks>None.</remarks>
       </Docs>
     </Member>
-    <Member MemberName="Multiply">
-      <MemberSignature Language="C#" Value="public static void Multiply (ref Cairo.Matrix res, ref Cairo.Matrix a, ref Cairo.Matrix b);" />
-      <MemberType>Method</MemberType>
-      <ReturnValue>
-        <ReturnType>System.Void</ReturnType>
-      </ReturnValue>
-      <Parameters>
-        <Parameter Name="res" Type="Cairo.Matrix&amp;" RefType="ref" />
-        <Parameter Name="a" Type="Cairo.Matrix&amp;" RefType="ref" />
-        <Parameter Name="b" Type="Cairo.Matrix&amp;" RefType="ref" />
-      </Parameters>
-      <Docs>
-        <param name="res">Result matrix (product).</param>
-        <param name="a">First matrix to be multipled.</param>
-        <param name="b">Second matrix to be multiplied.</param>
-        <summary>Multiplies the affine transformations in a and b together and stores the result in @result. The effect of the resulting transformation is to first apply the transformation in a to the coordinates and then apply the transformation in b to the coordinates.
-</summary>
-        <remarks>None.</remarks>
-      </Docs>
-    </Member>
     <Member MemberName="TransformDistance">
       <MemberSignature Language="C#" Value="public void TransformDistance (ref double dx, ref double dy);" />
       <MemberType>Method</MemberType>
@@ -247,42 +219,255 @@
         <remarks>None.</remarks>
       </Docs>
     </Member>
-    <Member MemberName="Raw">
-      <MemberSignature Language="C#" Value="public IntPtr Raw { get; };" />
-      <MemberType>Property</MemberType>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public Matrix (double xx, double yx, double xy, double yy, double x0, double y0);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="xx" Type="System.Double" />
+        <Parameter Name="yx" Type="System.Double" />
+        <Parameter Name="xy" Type="System.Double" />
+        <Parameter Name="yy" Type="System.Double" />
+        <Parameter Name="x0" Type="System.Double" />
+        <Parameter Name="y0" Type="System.Double" />
+      </Parameters>
+      <Docs>
+        <param name="xx">xx component of the affine transformation.</param>
+        <param name="yx">yx component of the affine transformation.</param>
+        <param name="xy">xy component of the affine transformation.</param>
+        <param name="yy">yy component of the affine transformation.</param>
+        <param name="x0">x0 component of the affine transformation.</param>
+        <param name="y0">y0 component of the affine transformation.</param>
+        <summary>Create a new matrix, initialized with the specified values.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Xx">
+      <MemberSignature Language="C#" Value="public double Xx;" />
+      <MemberType>Field</MemberType>
       <ReturnValue>
-        <ReturnType>System.IntPtr</ReturnType>
+        <ReturnType>System.Double</ReturnType>
       </ReturnValue>
       <Docs>
+        <summary>Xx component of the affine transformation.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Yx">
+      <MemberSignature Language="C#" Value="public double Yx;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Double</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Yx component of the affine transformation.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Xy">
+      <MemberSignature Language="C#" Value="public double Xy;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Double</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Xy component of the affine transformation.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Yy">
+      <MemberSignature Language="C#" Value="public double Yy;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Double</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Yy component of the affine transformation.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="X0">
+      <MemberSignature Language="C#" Value="public double X0;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Double</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>X0 component of the affine transformation.</summary>
+        <remarks>Represents the x-component of translation.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Y0">
+      <MemberSignature Language="C#" Value="public double Y0;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Double</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Y0 component of the affine transformation.</summary>
+        <remarks>Represents the y-component of translation.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="IsIdentity">
+      <MemberSignature Language="C#" Value="public bool IsIdentity ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Determine if a given matrix is the Identity.</summary>
+        <returns>Returns true if this matrix is equivalent to the identity.</returns>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="InitIdentity">
+      <MemberSignature Language="C#" Value="public void InitIdentity ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Initializes the matrix to the identity.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Multiply">
+      <MemberSignature Language="C#" Value="public void Multiply (Cairo.Matrix b);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="b" Type="Cairo.Matrix" />
+      </Parameters>
+      <Docs>
+        <param name="b">The affine transformation matrix to multiply by.</param>
+        <summary>Multiplies this Matrix by b. The effect is to apply b's transformation to this matrix, or in other words, to transform this matrix by b.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Multiply">
+      <MemberSignature Language="C#" Value="public static Cairo.Matrix Multiply (Cairo.Matrix a, Cairo.Matrix b);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>Cairo.Matrix</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="a" Type="Cairo.Matrix" />
+        <Parameter Name="b" Type="Cairo.Matrix" />
+      </Parameters>
+      <Docs>
+        <param name="a">The matrix to be multiplied.</param>
+        <param name="b">The matrix to multiply by.</param>
+        <summary>Multiplies the affine transformations in a and b together and returns the result in result. The result is an affine transformation which is equivalent to separately applying the transformations a and b in order.</summary>
+        <returns>The result of multiplying a and b.</returns>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Clone">
+      <MemberSignature Language="C#" Value="public object Clone ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Object</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
         <summary>To be added.</summary>
-        <value>To be added.</value>
+        <returns>To be added.</returns>
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
+    <Member MemberName="op_Equality">
+      <MemberSignature Language="C#" Value="public static bool op_Equality (Cairo.Matrix lhs, Cairo.Matrix rhs);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="lhs" Type="Cairo.Matrix" />
+        <Parameter Name="rhs" Type="Cairo.Matrix" />
+      </Parameters>
+      <Docs>
+        <param name="lhs">The first matrix to compare.</param>
+        <param name="rhs">The second Matrix to compare.</param>
+        <summary>Determines whether two matrices have the same value.</summary>
+        <returns>Returns true if all members are equal.</returns>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="op_Inequality">
+      <MemberSignature Language="C#" Value="public static bool op_Inequality (Cairo.Matrix lhs, Cairo.Matrix rhs);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="lhs" Type="Cairo.Matrix" />
+        <Parameter Name="rhs" Type="Cairo.Matrix" />
+      </Parameters>
+      <Docs>
+        <param name="lhs">The first Matrix to compare.</param>
+        <param name="rhs">The second Matrix to compare.</param>
+        <summary>Determines whether two matrices do not share the same value.</summary>
+        <returns>Returns true if any members are not equal.</returns>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
   </Members>
   <Docs>
-    <summary>Defines the Matrix object for transformations and translations.</summary>
+    <summary>
+      <para>Defines the Matrix object for transformations and translations.</para>
+      <para>
+2D affine transform matrices are 3x3 of the form:
+</para>
+      <example>
+        <code>
+[ xx yx tx ]
+[ xy yy ty ]
+[  0  0   1 ]
+  </code>
+      </example>
+      <para>
+As you can see, the bottom row is always [0 0 1]. The Cairo.Matrix implementation deals with the top 6 values only.
+</para>
+    </summary>
     <remarks>
       <example>
         <code lang="C#">
-
+Cairo.Graphics g;
 Matrix matrix;
-Pattern pattern;
-ImageSurface image;
-int w, h;
 
-/* we assume that the Graphics object (gr) and the surface (image) are already set up */
+// Assume we initialize the Graphics obj here...
 
-pattern = new Pattern (image);
-pattern.Extend = Cairo.Extend.Repeat;
+// Get the CTM (Current Transformation Matrix)
+Matrix m = g.Matrix;
 
-matrix = new Matrix ();
-matrix.InitScale (w * 5.0, h * 5.0);
-pattern.Matrix = matrix;
-gr.Pattern = pattern;
+// Make some changes
+m.Translate (translateX, translateY)
+m.Scale (scaleX, scaleY);
 
-  </code>
+// set the CTM to the modified matrix
+g.Matrix = m;
+
+// do some drawing operations here... 
+
+// Perhaps we now want to compute a few device-to-user point translations...
+// If we use Graphics.
+// first, get the CTM.
+m = g.Matrix;
+
+// invert it
+Cairo.Status cs = m.Invert();
+
+if (cs == Cairo.Status.Success) {
+	// TIP: Transform as many points as you like...
+	m.TransformPoint (ref point1X, ref point1Y);
+	m.TransformPoint (ref point2x, ref point2Y);
+	// ...
+} 
+ </code>
       </example>
     </remarks>
   </Docs>
-</Type>
+</Type>
\ No newline at end of file
Index: Mono.Cairo/en/Cairo/Distance.xml
===================================================================
--- Mono.Cairo/en/Cairo/Distance.xml	(revision 52671)
+++ Mono.Cairo/en/Cairo/Distance.xml	(working copy)
@@ -47,7 +47,7 @@
     </Member>
   </Members>
   <Docs>
-    <summary>Defines a distance between to points.</summary>
+    <summary>Defines a distance between two points.</summary>
     <remarks />
   </Docs>
-</Type>
+</Type>
\ No newline at end of file
Index: Mono.Cairo/en/Cairo/Graphics.xml
===================================================================
--- Mono.Cairo/en/Cairo/Graphics.xml	(revision 52671)
+++ Mono.Cairo/en/Cairo/Graphics.xml	(working copy)
@@ -683,8 +683,8 @@
         <ReturnType>Cairo.FillRule</ReturnType>
       </ReturnValue>
       <Docs>
-        <summary>To be added.</summary>
-        <value>To be added.</value>
+        <summary>Get or set the fill rule.</summary>
+        <value>See <see cref="T:Cairo.FillRule" /></value>
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
@@ -695,8 +695,8 @@
         <ReturnType>System.Double</ReturnType>
       </ReturnValue>
       <Docs>
-        <summary>To be added.</summary>
-        <value>To be added.</value>
+        <summary>Get or set the width of the stroke.</summary>
+        <value>The width of the stroke.</value>
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
@@ -707,8 +707,8 @@
         <ReturnType>Cairo.LineCap</ReturnType>
       </ReturnValue>
       <Docs>
-        <summary>To be added.</summary>
-        <value>To be added.</value>
+        <summary>Get or set the line cap style.</summary>
+        <value>See <see cref="T:Cairo.LineCap" />.</value>
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
@@ -719,8 +719,8 @@
         <ReturnType>Cairo.LineJoin</ReturnType>
       </ReturnValue>
       <Docs>
-        <summary>To be added.</summary>
-        <value>To be added.</value>
+        <summary>Get or set the line join style.</summary>
+        <value>See <see cref="T:Cairo.LineJoin" />.</value>
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
@@ -756,7 +756,7 @@
         <ReturnType>System.Double</ReturnType>
       </ReturnValue>
       <Docs>
-        <summary>To be added.</summary>
+        <summary>Get or set the miter limit (the value beyond which joins are no longer mitered).</summary>
         <value>To be added.</value>
         <remarks>To be added.</remarks>
       </Docs>
@@ -773,54 +773,6 @@
         <remarks>The current point is returned in the user-space coordinate system. If there is no defined current point then x and y will both be set to 0.0.</remarks>
       </Docs>
     </Member>
-    <Member MemberName="TransformPoint">
-      <MemberSignature Language="C#" Value="public Cairo.PointD TransformPoint { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>Cairo.PointD</ReturnType>
-      </ReturnValue>
-      <Docs>
-        <summary>To be added.</summary>
-        <value>To be added.</value>
-        <remarks>To be added.</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="TransformDistance">
-      <MemberSignature Language="C#" Value="public Cairo.Distance TransformDistance { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>Cairo.Distance</ReturnType>
-      </ReturnValue>
-      <Docs>
-        <summary>To be added.</summary>
-        <value>To be added.</value>
-        <remarks>To be added.</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="InverseTransformPoint">
-      <MemberSignature Language="C#" Value="public Cairo.PointD InverseTransformPoint { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>Cairo.PointD</ReturnType>
-      </ReturnValue>
-      <Docs>
-        <summary>To be added.</summary>
-        <value>To be added.</value>
-        <remarks>To be added.</remarks>
-      </Docs>
-    </Member>
-    <Member MemberName="InverseTransformDistance">
-      <MemberSignature Language="C#" Value="public Cairo.Distance InverseTransformDistance { get; };" />
-      <MemberType>Property</MemberType>
-      <ReturnValue>
-        <ReturnType>Cairo.Distance</ReturnType>
-      </ReturnValue>
-      <Docs>
-        <summary>To be added.</summary>
-        <value>To be added.</value>
-        <remarks>To be added.</remarks>
-      </Docs>
-    </Member>
     <Member MemberName="Matrix">
       <MemberSignature Language="C#" Value="public Cairo.Matrix Matrix { set; get; };" />
       <MemberType>Property</MemberType>
@@ -828,7 +780,7 @@
         <ReturnType>Cairo.Matrix</ReturnType>
       </ReturnValue>
       <Docs>
-        <summary>To be added.</summary>
+        <summary>Get or set the current transformation matrix (CTM).</summary>
         <value>To be added.</value>
         <remarks>To be added.</remarks>
       </Docs>
@@ -1345,10 +1297,105 @@
       </Parameters>
       <Docs>
         <param name="scale">the new font size, in user space units</param>
-        <summary>Sets the current font matrix to a scale by a factor of <paramref name="scale"/>, replacing any font matrix previously set with <see cref="M:Cairo.Graphics.SetFontSize()" /> or <see cref="M:Cairo.Graphics.SetFontMatrix()" />.</summary>
-        <remarks>This results in a font size of <paramref name="scale"/> user space units. (More precisely, this matrix will result in the font's em-square being a scale by scale square in user space.)</remarks>
+        <summary>Sets the current font matrix to a scale by a factor of <paramref name="scale" />, replacing any font matrix previously set with <see cref="M:Cairo.Graphics.SetFontSize()" /> or <see cref="M:Cairo.Graphics.SetFontMatrix()" />.</summary>
+        <remarks>This results in a font size of <paramref name="scale" /> user space units. (More precisely, this matrix will result in the font's em-square being a scale by scale square in user space.)</remarks>
       </Docs>
     </Member>
+    <Member MemberName="Transform">
+      <MemberSignature Language="C#" Value="public void Transform (Cairo.Matrix m);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="m" Type="Cairo.Matrix" />
+      </Parameters>
+      <Docs>
+        <param name="m">The affine transformation to tranform by.</param>
+        <summary>Transform the CTM (Current Transformation Matrix) by the specified affine transformation matrix.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="TransformPoint">
+      <MemberSignature Language="C#" Value="public void TransformPoint (ref double x, ref double y);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="x" Type="System.Double&amp;" RefType="ref" />
+        <Parameter Name="y" Type="System.Double&amp;" RefType="ref" />
+      </Parameters>
+      <Docs>
+        <param name="x">X value of point to be transformed.</param>
+        <param name="y">Y value of point to be transformed.</param>
+        <summary>Transform the specified point by the current transformation matrix (CTM).</summary>
+        <remarks>
+          <para>This is accomplished by multiplying the given point by the CTM</para>
+          <para>Equivalent to cairo_user_to_device().</para>
+        </remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="TransformDistance">
+      <MemberSignature Language="C#" Value="public void TransformDistance (ref double dx, ref double dy);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="dx" Type="System.Double&amp;" RefType="ref" />
+        <Parameter Name="dy" Type="System.Double&amp;" RefType="ref" />
+      </Parameters>
+      <Docs>
+        <param name="dx">X component of distance vector to be transformed.</param>
+        <param name="dy">Y component of distance vector to be transformed.</param>
+        <summary>Transform the specified distance vector by the current transformation matrix (CTM).</summary>
+        <remarks>
+          <para>This is accomplished by multiplying the specified point by the CTM, while ignoring the translation components of the CTM</para>
+          <para>Equivalent to cairo_user_to_device_distance().</para>
+        </remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="InverseTransformPoint">
+      <MemberSignature Language="C#" Value="public void InverseTransformPoint (ref double x, ref double y);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="x" Type="System.Double&amp;" RefType="ref" />
+        <Parameter Name="y" Type="System.Double&amp;" RefType="ref" />
+      </Parameters>
+      <Docs>
+        <param name="x">X value of the point to be transformed.</param>
+        <param name="y">Y value of the point to be transformed.</param>
+        <summary>Transform the specified point by the inverse of the current transformation matrix (CTM).</summary>
+        <remarks>
+          <para>This is accomplished by multiplying the given point by the inverse of the CTM</para>
+          <para>Equivalent to cairo_device_to_user().</para>
+        </remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="InverseTransformDistance">
+      <MemberSignature Language="C#" Value="public void InverseTransformDistance (ref double dx, ref double dy);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="dx" Type="System.Double&amp;" RefType="ref" />
+        <Parameter Name="dy" Type="System.Double&amp;" RefType="ref" />
+      </Parameters>
+      <Docs>
+        <param name="dx">X component of distance vector to be transformed.</param>
+        <param name="dy">Y component of distance vector to be transformed.</param>
+        <summary>Transform the specified distance vector by the inverse of the current transformation matrix (CTM).</summary>
+        <remarks>
+          <para>This is accomplished by multiplying the specified point by the inverse of the CTM, while ignoring the translation components of the CTM</para>
+          <para>Equivalent to cairo_device_to_user_distance().</para>
+        </remarks>
+      </Docs>
+    </Member>
   </Members>
   <Docs>
     <summary>This is the main class used to create and display arcs, clips, paths, curves, text, etc... This class usually required a drawing <see cref="T:Cairo.Surface" /> to be already set-up so it can draw and render to it.</summary>
@@ -1490,4 +1537,4 @@
       </example>
     </remarks>
   </Docs>
-</Type>
+</Type>
\ No newline at end of file
