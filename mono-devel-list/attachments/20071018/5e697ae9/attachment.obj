Index: utils/mono-membar.h
===================================================================
--- utils/mono-membar.h	(revision 87368)
+++ utils/mono-membar.h	(working copy)
@@ -135,6 +135,21 @@
 {
 	mono_memory_barrier ();
 }
+#elif defined(__mips__)
+static inline void mono_memory_barrier (void)
+{
+        __asm__ __volatile__ ("" : : : "memory");
+}
+
+static inline void mono_memory_read_barrier (void)
+{
+        mono_memory_barrier ();
+}
+
+static inline void mono_memory_write_barrier (void)
+{
+        mono_memory_barrier ();
+}
 #endif
 
 #endif	/* _MONO_UTILS_MONO_MEMBAR_H_ */
Index: mini/mini-codegen.c
===================================================================
--- mini/mini-codegen.c	(revision 87368)
+++ mini/mini-codegen.c	(working copy)
@@ -220,9 +220,6 @@
 {
 	MonoSpillInfo *info;
 
-#if defined (__mips__)
-	g_assert_not_reached();
-#endif
 	if (G_UNLIKELY (spillvar >= cfg->spill_info_len)) {
 		resize_spill_info (cfg, FALSE);
 		g_assert (spillvar < cfg->spill_info_len);
@@ -255,9 +252,6 @@
 {
 	MonoSpillInfo *info;
 
-#if defined (__mips__)
-	g_assert_not_reached();
-#endif
 	if (G_UNLIKELY (spillvar >= cfg->spill_info_float_len)) {
 		resize_spill_info (cfg, TRUE);
 		g_assert (spillvar < cfg->spill_info_float_len);
Index: mini/mini-mips.c
===================================================================
--- mini/mini-mips.c	(revision 87368)
+++ mini/mini-mips.c	(working copy)
@@ -3186,9 +3186,6 @@
 	cfg->code_size = 768 + sig->param_count * 20;
 	code = cfg->native_code = g_malloc (cfg->code_size);
 
-	alloc_size = cfg->stack_offset;
-	g_assert ((alloc_size & (MIPS_STACK_ALIGNMENT-1)) == 0);
-
 	/* re-align cfg->stack_offset if needed (due to var spilling in mini-codegen.c) */
 	cfg->stack_offset = (cfg->stack_offset + MIPS_STACK_ALIGNMENT - 1) & ~(MIPS_STACK_ALIGNMENT - 1);
 
Index: mini/inssel-long32-mips.brg
===================================================================
--- mini/inssel-long32-mips.brg	(revision 87368)
+++ mini/inssel-long32-mips.brg	(working copy)
@@ -695,11 +695,11 @@
 	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLT, mips_at, lreg2, rreg2);
 	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_false_bb);
 
-	/* if (rreg2 != lreg2) -> false */
-	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, rreg2, lreg2, tree->inst_false_bb);
+	/* if (rreg2 != lreg2) -> true */
+	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, rreg2, lreg2, tree->inst_true_bb);
 
 	/* (rreg2 == lreg2), so if (lreg1 < rreg1) -> false */
-	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLT, mips_at, lreg1, rreg1);
+	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLTU, mips_at, lreg1, rreg1);
 	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_false_bb);
 	MONO_EMIT_NEW_BRANCH_BLOCK (s, OP_BR, tree->inst_true_bb);
 }
@@ -716,13 +716,13 @@
 	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLT, mips_at, lreg2, rreg2);
 	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_false_bb);
 
-	/* if (rreg2 != lreg2) -> false */
-	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, rreg2, lreg2, tree->inst_false_bb);
+	/* if (rreg2 != lreg2) -> true */
+	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, rreg2, lreg2, tree->inst_true_bb);
 
      	MONO_EMIT_NEW_ICONST (s, rreg1, state->left->right->tree->inst_ls_word);
 
 	/* (rreg2 == lreg2), so if (lreg1 < rreg1) -> false */
-	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLT, mips_at, lreg1, rreg1);
+	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLTU, mips_at, lreg1, rreg1);
 	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_false_bb);
 	MONO_EMIT_NEW_BRANCH_BLOCK (s, OP_BR, tree->inst_true_bb);
 }
@@ -737,11 +737,11 @@
 	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLTU, mips_at, lreg2, rreg2);
 	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_false_bb);
 
-	/* if (rreg2 != lreg2) -> false */
-	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, rreg2, lreg2, tree->inst_false_bb);
+	/* if (rreg2 != lreg2) -> true */
+	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, rreg2, lreg2, tree->inst_true_bb);
 
 	/* (rreg2 == lreg2), so if (lreg1 < rreg1) -> false */
-	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLT, mips_at, lreg1, rreg1);
+	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLTU, mips_at, lreg1, rreg1);
 	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_false_bb);
 	MONO_EMIT_NEW_BRANCH_BLOCK (s, OP_BR, tree->inst_true_bb);
 }
@@ -758,13 +758,13 @@
 	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLTU, mips_at, lreg2, rreg2);
 	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_false_bb);
 
-	/* if (rreg2 != lreg2) -> false */
-	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, rreg2, lreg2, tree->inst_false_bb);
+	/* if (rreg2 != lreg2) -> true */
+	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, rreg2, lreg2, tree->inst_true_bb);
 
      	MONO_EMIT_NEW_ICONST (s, rreg1, state->left->right->tree->inst_ls_word);
 
 	/* (rreg2 == lreg2), so if (lreg1 < rreg1) -> false */
-	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLT, mips_at, lreg1, rreg1);
+	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLTU, mips_at, lreg1, rreg1);
 	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_false_bb);
 	MONO_EMIT_NEW_BRANCH_BLOCK (s, OP_BR, tree->inst_true_bb);
 }
@@ -869,7 +869,7 @@
 
 	/* if (rreg2 < lreg2) -> true */
 	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLT, mips_at, rreg2, lreg2);
-	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_false_bb);
+	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_true_bb);
 
 	/* (rreg2 == lreg2), so if (lreg1 > rreg1) -> true */
 	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLTU, mips_at, rreg1, lreg1);
@@ -891,7 +891,7 @@
 
 	/* if (rreg2 < lreg2) -> true */
 	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLT, mips_at, rreg2, lreg2);
-	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_false_bb);
+	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_true_bb);
 
      	MONO_EMIT_NEW_ICONST (s, rreg1, state->left->right->tree->inst_ls_word);
 
@@ -913,7 +913,7 @@
 
 	/* if (rreg2 < lreg2) -> true */
 	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLTU, mips_at, rreg2, lreg2);
-	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_false_bb);
+	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_true_bb);
 
 	/* (rreg2 == lreg2), so if (lreg1 > rreg1) -> true */
 	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLTU, mips_at, rreg1, lreg1);
@@ -935,7 +935,7 @@
 
 	/* if (rreg2 < lreg2) -> true */
 	MONO_EMIT_NEW_BIALU (s, OP_MIPS_SLTU, mips_at, rreg2, lreg2);
-	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_false_bb);
+	MONO_EMIT_NEW_COMPARE_BRANCH_BLOCK (s, OP_MIPS_BNE, mips_at, mips_zero, tree->inst_true_bb);
 
      	MONO_EMIT_NEW_ICONST (s, rreg1, state->left->right->tree->inst_ls_word);
 
Index: mini/basic-long.cs
===================================================================
--- mini/basic-long.cs	(revision 87368)
+++ mini/basic-long.cs	(working copy)
@@ -103,6 +103,8 @@
 		long a = 0xffffffffff;
 		if (a == 0xfffffffffe)
 			return 1;
+		if (a == 0xfeffffffff)
+			return 2;
 		return 0;
 	}
 
@@ -110,6 +112,20 @@
 		long a = 0xffffffffff;
 		if (a > 0xffffffffff)
 			return 1;
+
+		if (a > 0x1ffffffffff)
+			return 2;
+
+		if (a > 0xff00000000) {} else
+			return 3;
+
+		if (a > 0xfeffffffff) {} else
+			return 4;
+
+		a = 0xff00000000;
+		if (a > 0xffffffffff)
+			return 5;
+
 		return 0;
 	}
 
@@ -117,6 +133,20 @@
 		ulong a = 0xffffffffff;
 		if (a > 0xffffffffff)
 			return 1;
+
+		if (a > 0x1ffffffffff)
+			return 2;
+
+		if (a > 0xff00000000) {} else
+			return 3;
+
+		if (a > 0xfeffffffff) {} else
+			return 4;
+
+		a = 0xff00000000;
+		if (a > 0xffffffffff)
+			return 5;
+
 		return 0;
 	}
 
@@ -124,6 +154,20 @@
 		long a = 0xffffffffff;
 		if (a < 0xffffffffff)
 			return 1;
+
+		if (a < 0x1ffffffffff) {} else
+			return 2;
+
+		if (a < 0xff00000000)
+			return 3;
+
+		if (a < 0xfeffffffff)
+			return 4;
+
+		a = 0xff00000000;
+		if (a < 0xffffffffff) {} else
+			return 5;
+
 		return 0;
 	}
 
@@ -131,6 +175,20 @@
 		ulong a = 0xffffffffff;
 		if (a < 0xffffffffff)
 			return 1;
+
+		if (a < 0x1ffffffffff) {} else
+			return 2;
+
+		if (a < 0xff00000000)
+			return 3;
+
+		if (a < 0xfeffffffff)
+			return 4;
+
+		a = 0xff00000000;
+		if (a < 0xffffffffff) {} else
+			return 5;
+
 		return 0;
 	}
 
@@ -138,6 +196,20 @@
 		long a = 0xfffffffffe;
 		if (a >= 0xffffffffff)
 			return 1;
+
+		if (a >= 0x1fffffffffe)
+			return 2;
+
+		if (a >= 0xff00000000) {} else
+			return 3;
+
+		if (a >= 0xfefffffffe) {} else
+			return 4;
+
+		a = 0xff00000000;
+		if (a >= 0xffffffffff)
+			return 5;
+
 		return 0;
 	}
 
@@ -145,6 +217,20 @@
 		ulong a = 0xfffffffffe;
 		if (a >= 0xffffffffff)
 			return 1;
+
+		if (a >= 0x1fffffffffe)
+			return 2;
+
+		if (a >= 0xff00000000) {} else
+			return 3;
+
+		if (a >= 0xfefffffffe) {} else
+			return 4;
+
+		a = 0xff00000000;
+		if (a >= 0xffffffffff)
+			return 5;
+
 		return 0;
 	}
 
@@ -152,9 +238,44 @@
 		long a = 0xffffffffff;
 		if (a <= 0xfffffffffe)
 			return 1;
+
+		if (a <= 0x1ffffffffff) {} else
+			return 2;
+
+		if (a <= 0xff00000000)
+			return 3;
+
+		if (a <= 0xfeffffffff)
+			return 4;
+
+		a = 0xff00000000;
+		if (a <= 0xffffffffff) {} else
+			return 5;
+
 		return 0;
 	}
 
+	public static int test_0_bgt_un () {
+		ulong a = 0xffffffffff;
+		if (a <= 0xfffffffffe)
+			return 1;
+
+		if (a <= 0x1ffffffffff) {} else
+			return 2;
+
+		if (a <= 0xff00000000)
+			return 3;
+
+		if (a <= 0xfeffffffff)
+			return 4;
+
+		a = 0xff00000000;
+		if (a <= 0xffffffffff) {} else
+			return 5;
+
+		return 0;
+	}
+
 	public static int test_0_conv_to_i4 () {
 		long a = 0;
 
