using System;

class T {
	static unsafe void Main ()
	{
		int [] a = new int [50000];
		int [] b = new int [50000];
		
		for (int i = 0; i < a.Length; i ++)
			a [i] = i;
		
		int t1 = Environment.TickCount;
		
		fixed (int* aa = a, bb = b) {
			for (int i = 0; i < 1000; i ++) {
				memcpy (aa, bb, a.Length * sizeof (int));
				memmove (bb, bb + 3, (b.Length - 3) * sizeof (int));
			}
		}
		
		int t2 = Environment.TickCount;
		
		Console.WriteLine ("{0:#.000} s", (t2 - t1) / 1000.0);
	}
	
	internal static unsafe void memcpy (void* src, void* dest, int cb)
	{
		byte* s = (byte*) src;
		byte* d = (byte*) dest;
		
		// Align dest to 32 bits
		while ((((int) d ) & 3) != 0 && cb >= 3) {
			*d++ = *s++;
			cb --;
		}
		
		// By 16
		while (cb >= 16) {
			
			((int *) d) [0] = ((int *) s) [0];
			((int *) d) [1] = ((int *) s) [1];
			((int *) d) [2] = ((int *) s) [2];
			((int *) d) [3] = ((int *) s) [3];
			
			d += 16; s += 16; cb -= 16;
		}
	
		// Got 8?
		if ((cb & 8) != 0) {
			((int *) d) [0] = ((int *) s) [0];
			((int *) d) [1] = ((int *) s) [1];
			
			d += 8; s += 8;
		}
		
		// 4?
		if ((cb & 4) != 0) {
			((int *) d) [0] = ((int *) s) [0];
			
			d += 4; s += 4;
		}
		
		// 2?
		if ((cb & 2) != 0) {
			((short *) d) [0] = ((short *) s) [0];
			s += 2;
			d += 2;
		}
	
		// 1?
		if ((cb & 1) != 0)
			d [0] = s [0];
	}
	
	internal static unsafe void memmove (void* src, void* dest, int cb)
	{
		if (dest <= src) {
			memcpy (src, dest, cb);
			return;
		}
		
		byte* s = (byte*) src + cb;
		byte* d = (byte*) dest + cb;
	
		// Align dest to 32 bits
		while ((((int) d ) & 3) != 0 && cb >= 3) {
			*--d = *--s;
			cb --;
		}
	
		// By 16
		
		while (cb >= 16) {
			d -= 16; s -= 16; cb -= 16;
			
			((int *) d) [3] = ((int *) s) [3];
			((int *) d) [2] = ((int *) s) [2];
			((int *) d) [1] = ((int *) s) [1];
			((int *) d) [0] = ((int *) s) [0];
		}
	
		// Got 8?
		if ((cb & 8) != 0) {
			d -= 8; s -= 8;
			((int *) d) [1] = ((int *) s) [1];
			((int *) d) [0] = ((int *) s) [0];
		}
	
		// 4?
		if ((cb & 4) != 0) {
			d -= 4; s -= 4;
			((int *) d) [0] = ((int *) s) [0];
		}
	
		// 2?
		if ((cb & 2) != 0) {
			d -= 2; s -= 2;
			((short *) d) [0] = ((short *) s) [0];
		}
		
		// 1?
		if ((cb & 1) != 0) {
			d --; s --;
			d [0] = s [0];
		}
	}
}