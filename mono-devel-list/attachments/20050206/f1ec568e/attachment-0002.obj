--- SoapDocumentationHandler.cs.orig	Sun Feb  6 15:36:28 2005
+++ SoapDocumentationHandler.cs	Sun Feb  6 18:19:15 2005
@@ -31,6 +31,7 @@
 using System;
 using System.Web;
 using System.IO;
+using System.Xml;
 using System.Xml.Serialization;
 using System.Xml.Schema;
 using System.Web.Services.Description;
@@ -38,8 +39,8 @@
 using System.Web.Services.Configuration;
 using System.CodeDom;
 using System.CodeDom.Compiler;
-using Microsoft.CSharp;
 using System.Web.UI;
+using System.Reflection;
 
 namespace System.Web.Services.Protocols
 {
@@ -195,20 +196,28 @@
 		
 		private CodeDomProvider GetProvider(string langId)
 		{
-			// FIXME these should be loaded dynamically using reflection
-			CodeDomProvider provider;
-			
-			switch (langId.ToUpper())
-			{
-			    case "CS":
-				    provider = new CSharpCodeProvider();
-				    break;
-			    
-			    default:
-				    throw new Exception("Unknown language: " + langId);
+    			bool providerExists = false;
+			string machineConfig = System.Web.HttpRuntime.MachineConfigurationDirectory + Path.DirectorySeparatorChar + "machine.config";
+            		XmlDocument xml = new XmlDocument();
+	                xml.Load(machineConfig);
+		        XmlNodeList nodeList = xml.GetElementsByTagName("compiler");
+			foreach(XmlNode node in nodeList) {
+			    if(node.Attributes["language"].Value.IndexOf(langId.ToLower()) != -1) {
+				string[] info    = node.Attributes["type"].Value.Split(',');
+			    	Type     type    = null;
+			        string   asmName = info[1];
+				string   version = info[2];
+				string   culture = info[3];
+				string   token   = info[4];
+				Assembly asm = Assembly.Load(asmName + "," + version + "," + culture + "," + token);
+				if(asm != null)
+				    type = asm.GetType(info[0]);
+				return (CodeDomProvider) Activator.CreateInstance(type);
+			    }	
 			}
-
-			return provider;
+			if(! providerExists)
+			    throw new Exception("Unknown language: " + langId);
+			return null;	
 		}
 		
 		internal ServiceDescriptionCollection GetDescriptions ()