using System;
using System.IO;
using System.Reflection;
using System.Reflection.Emit;
using NUnit.Framework;

[TestFixture]
public class SRETestCase
{
	AssemblyBuilder _asmBuilder;
	
	[SetUp]
	public void SetUpAssembly()
	{
		AssemblyName asmName = new AssemblyName();
		asmName.Name = "Test";
		
		_asmBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(
		                                                            asmName,
		                                                            AssemblyBuilderAccess.RunAndSave,
		                                                            Path.GetTempPath());
		ModuleBuilder builder = _asmBuilder.DefineDynamicModule(asmName.Name, "Test.exe");
		TypeBuilder type = builder.DefineType("Test.App");
		
		MethodAttributes methodAttributes = MethodAttributes.Static|MethodAttributes.Public;
		MethodBuilder methodBuilder = type.DefineMethod("Main", methodAttributes, typeof(void), new Type[0]);
		ILGenerator il = methodBuilder.GetILGenerator();
		il.EmitWriteLine("Hello, world!");
		il.Emit(OpCodes.Ret);
		
		Type app = type.CreateType();
		_asmBuilder.SetEntryPoint(app.GetMethod("Main"));
		
		_asmBuilder.Save("Test.exe");
	}
	
	[Test]
	public void TestRun()
	{
		StringWriter writer = new StringWriter();
		TextWriter savedOut = Console.Out;
		
		Console.SetOut(writer);
		try
		{
			_asmBuilder.GetType("Test.App").GetMethod("Main").Invoke(null, new object[0]);
			
			Assert.AreEqual("Hello, world!" + Environment.NewLine, writer.ToString());
		}
		finally
		{
			Console.SetOut(savedOut);
		}
	}
	
	[Test]
	public void TestExecuteSavedAssembly()
	{
		AppDomainSetup domainSetup = new AppDomainSetup();
		domainSetup.ApplicationBase = "file:///" + new Uri(Path.GetTempPath()).ToString();
		domainSetup.ApplicationName = "TestApp";		
        
        System.Security.Policy.Evidence evidence = AppDomain.CurrentDomain.Evidence;

        // Create appdomain.
        AppDomain newDomain = AppDomain.CreateDomain("TestDomain", evidence, domainSetup);        
        
        try
        {
			Assert.AreEqual(0, newDomain.ExecuteAssembly(Path.Combine(Path.GetTempPath(), "Test.exe")));
        }
        finally
        {        	
        	AppDomain.Unload(newDomain);
        }
	}
}
