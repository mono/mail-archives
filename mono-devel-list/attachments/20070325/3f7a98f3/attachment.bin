using System;namespace MonoTorrent.Clienta{    class Program    {        static void Main(string[] args)        {            Program p = new Program();            long a = 0;            long b = 0;            long c = 0;            long runs = 0;            while (true)            {                runs++;                long ticks = Environment.TickCount;                for (short j = 0; j < 1; j++)                    for (long i = long.MaxValue - 10000000; i < long.MaxValue; i++)                        p.SwapShortOriginal(i);                ticks = Environment.TickCount - ticks;                a += ticks;                Console.WriteLine("Original:  " + ticks);                ticks = Environment.TickCount;                for (short j = 0; j < 1; j++)                    for (long i = long.MaxValue - 10000000; i < long.MaxValue; i++)                        p.SwapShortBinaryOR(i);                ticks = Environment.TickCount - ticks;                b += ticks;                Console.WriteLine("BinaryOr:  " + ticks);                ticks = Environment.TickCount;                for (short j = 0; j < 1; j++)                    for (long i = long.MaxValue - 10000000; i < long.MaxValue; i++)                        p.SwapShortFast(i);                ticks = Environment.TickCount - ticks;                c += ticks;                Console.WriteLine("Fast:     " + ticks);                Console.WriteLine("Iteration: " + runs);                Console.WriteLine("Total Time Method 1: " + a.ToString());                Console.WriteLine("Total Time Method 2: " + b.ToString());                Console.WriteLine("Total Time Method 3: " + c.ToString());            }        }        private long SwapShortOriginal(long number)        {            byte b0 = (byte)((number >> 56) & 0xFF);            byte b1 = (byte)((number >> 48) & 0xFF);            byte b2 = (byte)((number >> 40) & 0xFF);            byte b3 = (byte)((number >> 32) & 0xFF);            byte b4 = (byte)((number >> 24) & 0xFF);            byte b5 = (byte)((number >> 16) & 0xFF);            byte b6 = (byte)((number >> 8) & 0xFF);            byte b7 = (byte)(number & 0xFF);            return (long)b0 + ((long)b1 << 8) + ((long)b2 << 16) + ((long)b3 << 24) + ((long)b4 << 32) + ((long)b5 << 40) + ((long)b6 << 48) + ((long)b7 << 56);        }        private long SwapShortBinaryOR(long number)        {            byte b0 = (byte)((number >> 56) & 0xFF);            byte b1 = (byte)((number >> 48) & 0xFF);            byte b2 = (byte)((number >> 40) & 0xFF);            byte b3 = (byte)((number >> 32) & 0xFF);            byte b4 = (byte)((number >> 24) & 0xFF);            byte b5 = (byte)((number >> 16) & 0xFF);            byte b6 = (byte)((number >> 8) & 0xFF);            byte b7 = (byte)(number & 0xFF);            return (long)b0                | ((long)b1 << 8)                | ((long)b2 << 16)                | ((long)b3 << 24)                | ((long)b4 << 32)                | ((long)b5 << 40)                | ((long)b6 << 48)                | ((long)b7 << 56);        }        private long SwapShortFast(long number)        {            return (((number >> 56) & 0xFF)                + (((number >> 48) & 0xFF) << 8)                + (((number >> 40) & 0xFF) << 16)                + (((number >> 32) & 0xFF) << 24)                + (((number >> 24) & 0xFF) << 32)                + (((number >> 16) & 0xFF) << 40)                + (((number >> 8) & 0xFF) << 48)                + ((number & 0xFF) << 56));        }    }}