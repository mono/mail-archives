using System;
using System.Collections;
using System.IO;
using System.Timers;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.Text;

public class StateObject
{
    public Socket workSocket = null;
    public const int BufferSize = 256;
	public string ip = null;
    public byte[] buffer = new byte[BufferSize];
    public StringBuilder sb = new StringBuilder();
}

public class Client
{
    static ArrayList clients = new ArrayList();
	static System.Timers.Timer timer;
	static Random srandom = new Random((int)DateTime.Now.Ticks);

	string ip;
	int port;
	StateObject state;
	Random random = new Random((int)DateTime.Now.Ticks);

	public Client(string ip, int port)
	{
		this.ip = ip;
		this.port = port;

        IPAddress ipAddress = IPAddress.Parse(this.ip);
        IPEndPoint remoteEP = new IPEndPoint(ipAddress, this.port);
        Socket sock = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
        sock.BeginConnect(remoteEP, new AsyncCallback(ConnectCallback), sock);
	}

    private void ConnectCallback(IAsyncResult ar)
    {
    	try
    	{
            Socket handler = (Socket)ar.AsyncState;
            handler.EndConnect(ar);

            state = new StateObject();
            state.workSocket = handler;
            handler.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0, new AsyncCallback(ReadCallback), state);
    	}
    	catch (Exception e)
    	{
    		Console.WriteLine(Thread.CurrentThread.GetHashCode() + " Error in ConnectCallback" + e);
    	}
    }

    private void Send(String data)
    {
    	state.ip = state.workSocket.LocalEndPoint.ToString();
        Console.WriteLine(Thread.CurrentThread.GetHashCode() + " " + state.ip + "> [" + data + "]");
        byte[] byteData = Encoding.UTF8.GetBytes(data + '\0');
        try
        {
        	state.workSocket.BeginSend(byteData, 0, byteData.Length, 0, new AsyncCallback(SendCallback), state.workSocket);
        }
        catch (Exception e)
        {
            Console.WriteLine(Thread.CurrentThread.GetHashCode() + " Error in Send " + state.ip, e);
    		Disconnect();
        }
    }

    private void SendCallback(IAsyncResult ar)
    {
        try
        {
            Socket client = (Socket)ar.AsyncState;
            int bytesSent = client.EndSend(ar);
            //Console.WriteLine(Thread.CurrentThread.GetHashCode() + " Sent {0} bytes to server.", bytesSent);
        }
        catch (Exception e)
        {
            Console.WriteLine(Thread.CurrentThread.GetHashCode() + " Error in SendCallback", e);
    		Disconnect();
        }
    }

    public void ReadCallback(IAsyncResult ar)
    {
        String content = String.Empty;

        StateObject state = (StateObject)ar.AsyncState;
        Socket handler = state.workSocket;

        int bytesRead = 0;
        try
        {
        	bytesRead = handler.EndReceive(ar);
    	}
    	catch (Exception e)
    	{
    		Console.WriteLine(Thread.CurrentThread.GetHashCode() + " Error in ReadCallback " + state.ip, e);
    		Disconnect();
    		return;
    	}

        if (bytesRead > 0)
        {
            state.sb.Append(Encoding.UTF8.GetString(state.buffer, 0, bytesRead));

            content = state.sb.ToString();
            if (content.IndexOf("\0") > -1)
            {
                int count = 0;
                int pos = -1;
                int oldpos = 0;
                do
                {
                	pos = content.IndexOf('\0', pos+1);
                	if (pos != -1)
                	{
                		string message = content.Substring(oldpos, pos-oldpos);
	                    if (message.Length > 0)
	                    {
                    		if (HandleMessage(state, message) == false)
		                    {
		                    	return;
		                	}
	                	}
                		oldpos = pos+1;
                	}
                	count++;
                } while (pos != -1);
                state.sb = new StringBuilder(content.Substring(oldpos, content.Length-oldpos));
            }

            try
            {
                handler.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,
	                new AsyncCallback(ReadCallback), state);
            }
            catch (Exception e)
            {
        		Console.WriteLine(Thread.CurrentThread.GetHashCode() + " Error 2 in ReadCallback", e);
        		Disconnect();
            }	
        }
    }

	private bool HandleMessage(StateObject state, string message)
	{
		Console.WriteLine(Thread.CurrentThread.GetHashCode() + " Received: " + message + " " + state.ip);
		return true;
	}

	private void Disconnect()
	{
    	Console.WriteLine(Thread.CurrentThread.GetHashCode() + " Disconnect: " + state.ip);
		lock (clients.SyncRoot)
		{
            clients.Remove(this);
        }
        try
        {
	        state.workSocket.Shutdown(SocketShutdown.Both);
            state.workSocket.Close();
    	}
    	catch (Exception e)
    	{
    		Console.WriteLine(Thread.CurrentThread.GetHashCode() + " Error in Disconnect " + state.ip, e);
    	}
	}

	public void DoSomething()
	{
		if (random.NextDouble() > 0.9)
			Send("Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.");
		else if (random.NextDouble() > 0.95)
			Send("The quick brown fox jumps over the lazy dog.");
	}

	private static void OnTimedEvent(object source, ElapsedEventArgs e)
    {
    	lock (clients.SyncRoot)
    	{
    		for (int i = 0; i < 5; i++)
    		{
				Client client = (Client) clients[(int) Math.Round((clients.Count-1) * srandom.NextDouble())];
				if (client.state != null)
					client.DoSomething();
			}
    	}
    }

	static int tport = 4444;
	static string sip = "127.0.0.1";

    public static int Main(String[] args)
    {
		Random rand = new Random((int)DateTime.Now.Ticks);
    	timer = new System.Timers.Timer();
    	timer.Elapsed += new ElapsedEventHandler(OnTimedEvent);
    	timer.Interval = 200;
    	timer.Enabled = true;

		for (int i = 0; i < 360; i++)
		{
			Client client = new Client(sip, tport);
			clients.Add(client);
			Thread.Sleep(rand.Next() % 200);
		}
        Console.WriteLine(Thread.CurrentThread.GetHashCode() + " ==== Hit Return to stop the clients. ========");
        Console.ReadLine();
        return 0;
    }
}
