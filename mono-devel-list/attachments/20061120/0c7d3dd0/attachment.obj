Index: System.Web.UI.WebControls/CheckBox.cs
===================================================================
--- System.Web.UI.WebControls/CheckBox.cs	(revision 68198)
+++ System.Web.UI.WebControls/CheckBox.cs	(working copy)
@@ -382,7 +382,6 @@
 
 			if (Attributes.Count > 0){
 				AddAttributesForSpan (w);
-				Attributes.AddAttributes (w);
 				need_span = true;
 			}
 
@@ -391,90 +390,69 @@
 
 			TextAlign align = TextAlign;
 			if (align == TextAlign.Right) {
-				w.AddAttribute (HtmlTextWriterAttribute.Id, ClientID);
-				w.AddAttribute (HtmlTextWriterAttribute.Type, render_type);
-				w.AddAttribute (HtmlTextWriterAttribute.Name, NameAttribute);
-				InternalAddAttributesToRender (w);
-				if (Checked)
-					w.AddAttribute (HtmlTextWriterAttribute.Checked, "checked");
+				RenderInput (w);
+				RenderLabel (w);
+			} else {
+				RenderLabel (w);
+				RenderInput (w);
+			}
 
-				if (AutoPostBack){
-#if NET_2_0
-					w.AddAttribute (HtmlTextWriterAttribute.Onclick, Page.ClientScript.GetPostBackEventReference (GetPostBackOptions (), true));
-#else
-					w.AddAttribute (HtmlTextWriterAttribute.Onclick,
-							Page.ClientScript.GetPostBackEventReference (this, String.Empty));
-#endif
-					w.AddAttribute ("language", "javascript");
-				}
+			if (need_span)
+				w.RenderEndTag ();
+		}
 
-				if (AccessKey.Length > 0)
-					w.AddAttribute (HtmlTextWriterAttribute.Accesskey, AccessKey);
+		private void RenderInput (HtmlTextWriter w) {
 
-				if (TabIndex != 0)
-					w.AddAttribute (HtmlTextWriterAttribute.Tabindex,
-							     TabIndex.ToString (CultureInfo.InvariantCulture));
-
-				if (common_attrs != null)
-					common_attrs.AddAttributes (w);
-				w.RenderBeginTag (HtmlTextWriterTag.Input);
-				w.RenderEndTag ();
-				string text = Text;
-				if (text != "") {
+			if (ClientID != null && ClientID.Length > 0)
+				w.AddAttribute (HtmlTextWriterAttribute.Id, ClientID);
+			w.AddAttribute (HtmlTextWriterAttribute.Type, render_type);
+			string nameAttr = NameAttribute;
+			if (nameAttr != null && nameAttr.Length > 0)
+				w.AddAttribute (HtmlTextWriterAttribute.Name, nameAttr);
+			InternalAddAttributesToRender (w);
 #if NET_2_0
-					if (labelAttributes != null)
-						labelAttributes.AddAttributes (w);
+			AddAttributesToRender (w);
+			if (inputAttributes != null)
+				inputAttributes.AddAttributes (w);
 #endif
-					w.AddAttribute (HtmlTextWriterAttribute.For, ClientID);
-					w.RenderBeginTag (HtmlTextWriterTag.Label);
-					w.Write (text);
-					w.RenderEndTag ();
-				}
-			} else {
-				string text = Text;
-				if (text != "") {
-#if NET_2_0
-					if (labelAttributes != null)
-						labelAttributes.AddAttributes (w);
-#endif
-					w.AddAttribute (HtmlTextWriterAttribute.For, ClientID);
-					w.RenderBeginTag (HtmlTextWriterTag.Label);
-					w.Write (text);
-					w.RenderEndTag ();
-				}
+			if (Checked)
+				w.AddAttribute (HtmlTextWriterAttribute.Checked, "checked");
 
-				w.AddAttribute (HtmlTextWriterAttribute.Id, ClientID);
-				w.AddAttribute (HtmlTextWriterAttribute.Type, render_type);
-				w.AddAttribute (HtmlTextWriterAttribute.Name, NameAttribute);
-				InternalAddAttributesToRender (w);
-				if (Checked)
-					w.AddAttribute (HtmlTextWriterAttribute.Checked, "checked");
-
-				if (AutoPostBack){
+			if (AutoPostBack) {
 #if NET_2_0
-					w.AddAttribute (HtmlTextWriterAttribute.Onclick, Page.ClientScript.GetPostBackEventReference (GetPostBackOptions (), true));
+				w.AddAttribute (HtmlTextWriterAttribute.Onclick, Page.ClientScript.GetPostBackEventReference (GetPostBackOptions (), true));
 #else
 					w.AddAttribute (HtmlTextWriterAttribute.Onclick,
 							Page.ClientScript.GetPostBackEventReference (this, String.Empty));
 #endif
-					w.AddAttribute ("language", "javascript");
-				}
+				w.AddAttribute ("language", "javascript");
+			}
 
-				if (AccessKey.Length > 0)
-					w.AddAttribute (HtmlTextWriterAttribute.Accesskey, AccessKey);
+			if (AccessKey.Length > 0)
+				w.AddAttribute (HtmlTextWriterAttribute.Accesskey, AccessKey);
 
-				if (TabIndex != 0)
-					w.AddAttribute (HtmlTextWriterAttribute.Tabindex,
-							     TabIndex.ToString (NumberFormatInfo.InvariantInfo));
+			if (TabIndex != 0)
+				w.AddAttribute (HtmlTextWriterAttribute.Tabindex,
+							 TabIndex.ToString (NumberFormatInfo.InvariantInfo));
 
-				if (common_attrs != null)
-					common_attrs.AddAttributes (w);
-				w.RenderBeginTag (HtmlTextWriterTag.Input);
-				w.RenderEndTag ();
-			}
+			if (common_attrs != null)
+				common_attrs.AddAttributes (w);
+			w.RenderBeginTag (HtmlTextWriterTag.Input);
+			w.RenderEndTag ();
+		}
 
-			if (need_span)
+		private void RenderLabel (HtmlTextWriter w) {
+			string text = Text;
+			if (text.Length > 0) {
+#if NET_2_0
+				if (labelAttributes != null)
+					labelAttributes.AddAttributes (w);
+#endif
+				w.AddAttribute (HtmlTextWriterAttribute.For, ClientID);
+				w.RenderBeginTag (HtmlTextWriterTag.Label);
+				w.Write (text);
 				w.RenderEndTag ();
+			}
 		}
 
 #if NET_2_0
@@ -536,7 +514,6 @@
 
 		protected override void AddAttributesToRender (HtmlTextWriter writer)
 		{
-			base.AddAttributesToRender (writer);
 		}
 #endif
 
Index: Test/System.Web.UI.WebControls/CheckBoxTest.cs
===================================================================
--- Test/System.Web.UI.WebControls/CheckBoxTest.cs	(revision 68198)
+++ Test/System.Web.UI.WebControls/CheckBoxTest.cs	(working copy)
@@ -37,6 +37,7 @@
 using System.Collections.Specialized;
 
 using NUnit.Framework;
+using MonoTests.stand_alone.WebHarness;
 
 namespace MonoTests.System.Web.UI.WebControls {
 
@@ -132,56 +133,52 @@
 		}
 #if NET_2_0
 		[Test]
-		[Category ("NotWorking")]
 		public void InputAttributesTest ()
 		{
 			TestCheckBox c = new TestCheckBox ();
 			c.InputAttributes.Add ("Atribute", "Test");
 		 	string html = c.Render ();
-			Assert.AreEqual ("<input type=\"checkbox\" Atribute=\"Test\" />", html, "Input Attribute fail");
+			HtmlDiff.AssertAreEqual ("<input type=\"checkbox\" Atribute=\"Test\" />", html, "Input Attribute fail");
 		}
 
 
 		[Test]
-		[Category ("NotWorking")]
 		public void LabelAttributesTest_1 ()
 		{
 			TestCheckBox c = new TestCheckBox ();
+			c.ID = "Check";
 			c.Text = "CheckBoxText";
 			c.LabelAttributes.Add ("Atribute", "Test");
 			string html = c.Render ();
-			Assert.AreEqual ("<input type=\"checkbox\" /><label for Atribute=\"Test\">CheckBoxText</label>", html, "Label Attributes fail#1");
+			HtmlDiff.AssertAreEqual ("<input id=\"Check\" type=\"checkbox\" name=\"Check\" /><label for=\"Check\" Atribute=\"Test\">CheckBoxText</label>", html, "Label Attributes fail#1");
 		}
 
 		[Test]
-		[Category ("NotWorking")]
 		public void LabelAttributesTest_2 ()
 		{
 			TestCheckBox c = new TestCheckBox ();
 			c.LabelAttributes.Add ("Atribute", "Test");
 			string html = c.Render ();
-			Assert.AreEqual ("<input type=\"checkbox\" />", html, "Label Attributes fail#2");
+			HtmlDiff.AssertAreEqual ("<input type=\"checkbox\" />", html, "Label Attributes fail#2");
 		}
 
 		[Test]
-		[Category ("NotWorking")]
 		public void AddAttributesToRenderTest_1 ()
 		{
 			PokerCheckBox c = new PokerCheckBox ();
 			c.Text = "CheckBoxText";
 			string html = c.Render ();
 			Assert.AreEqual (true, c.Checker, "AddAttributesToRender dosn't called fail");
-			Assert.AreEqual ("<input Attribute=\"AttributeValue\" type=\"checkbox\" style=\"StyleAttribute:StyleAttValue;\" /><label for>CheckBoxText</label>", html, "Add Attributes To Render fail#1");
+			HtmlDiff.AssertAreEqual ("<input Attribute=\"AttributeValue\" type=\"checkbox\" style=\"StyleAttribute:StyleAttValue;\" /><label for>CheckBoxText</label>", html, "Add Attributes To Render fail#1");
 		}
 
 		[Test]
-		[Category ("NotWorking")]
 		public void AddAttributesToRenderTest_2 ()
 		{
 			PokerCheckBox c = new PokerCheckBox ();
 			string html = c.Render ();
 			Assert.AreEqual (true, c.Checker, "AddAttributesToRender dosn't called fail");
-			Assert.AreEqual ("<input Attribute=\"AttributeValue\" type=\"checkbox\" style=\"StyleAttribute:StyleAttValue;\" />", html, "Add Attributes To Render fail#2");
+			HtmlDiff.AssertAreEqual ("<input Attribute=\"AttributeValue\" type=\"checkbox\" style=\"StyleAttribute:StyleAttValue;\" />", html, "Add Attributes To Render fail#2");
 		}
 #endif
 
