From 91a7fc7a502d4a61b5666aa425de8e6b99e7d641 Mon Sep 17 00:00:00 2001
From: Cedric Vivier <cedricv@neonux.com>
Date: Wed, 12 Nov 2008 21:44:07 +0800
Subject: [PATCH] WIP on branch 'SIMD'.

2008-11-12  Cedric Vivier  <cedricv@neonux.com>

	* Vector16*.cs: Add indexer to get/set individual element value.
---
 class/Mono.Simd/Mono.Simd/Vector16b.cs  |   19 +++++++++++++++++++
 class/Mono.Simd/Mono.Simd/Vector16sb.cs |   19 +++++++++++++++++++
 2 files changed, 38 insertions(+), 0 deletions(-)

diff --git a/class/Mono.Simd/Mono.Simd/Vector16b.cs b/class/Mono.Simd/Mono.Simd/Vector16b.cs
index e0b315c..c243c97 100644
--- a/class/Mono.Simd/Mono.Simd/Vector16b.cs
+++ b/class/Mono.Simd/Mono.Simd/Vector16b.cs
@@ -69,6 +69,25 @@ namespace Mono.Simd
 		public byte V14 { get { return v14; } set { v14 = value; } }
 		public byte V15 { get { return v15; } set { v15 = value; } }
 
+		[System.Runtime.CompilerServices.IndexerName("Element")]
+		public unsafe byte this [int index]
+		{
+			get {
+				if ((index | 0xF) != 0xF) //index < 0 || index > 15
+					throw new ArgumentOutOfRangeException("index");
+				fixed (byte *v = &v0) {
+					return *(v + index);
+				}
+			}
+			set {
+				if ( (index | 0xF) != 0xF) //index < 0 || index > 15
+					throw new ArgumentOutOfRangeException("index");
+				fixed (byte *v = &v0) {
+					*(v + index) = value;
+				}
+			}
+		}
+
 		[Acceleration (AccelMode.SSE2)]
 		public static unsafe Vector16b operator + (Vector16b va, Vector16b vb)
 		{
diff --git a/class/Mono.Simd/Mono.Simd/Vector16sb.cs b/class/Mono.Simd/Mono.Simd/Vector16sb.cs
index 1b2a89f..116eff4 100644
--- a/class/Mono.Simd/Mono.Simd/Vector16sb.cs
+++ b/class/Mono.Simd/Mono.Simd/Vector16sb.cs
@@ -70,6 +70,25 @@ namespace Mono.Simd
 		public sbyte V14 { get { return v14; } set { v14 = value; } }
 		public sbyte V15 { get { return v15; } set { v15 = value; } }
 
+		[System.Runtime.CompilerServices.IndexerName("Element")]
+		public unsafe sbyte this [int index]
+		{
+			get {
+				if ((index | 0xF) != 0xF) //index < 0 || index > 15
+					throw new ArgumentOutOfRangeException("index");
+				fixed (sbyte *v = &v0) {
+					return *(v + index);
+				}
+			}
+			set {
+				if ( (index | 0xF) != 0xF) //index < 0 || index > 15
+					throw new ArgumentOutOfRangeException("index");
+				fixed (sbyte *v = &v0) {
+					*(v + index) = value;
+				}
+			}
+		}
+
 		[Acceleration (AccelMode.SSE2)]
 		public static unsafe Vector16sb operator + (Vector16sb va, Vector16sb vb)
 		{
-- 
1.6.0.3
