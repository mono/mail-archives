Index: mono/metadata/class.c
===================================================================
RCS file: /mono/mono/mono/metadata/class.c,v
retrieving revision 1.165
diff -u -r1.165 class.c
--- mono/metadata/class.c	15 Apr 2003 09:24:43 -0000	1.165
+++ mono/metadata/class.c	2 May 2003 15:23:56 -0000
@@ -108,7 +108,7 @@
 MonoMarshalType *
 mono_marshal_load_type_info (MonoClass* klass)
 {
-	int i, j, count = 0;
+	int i, j, count = 0, native_size = 0;
 	MonoMarshalType *info;
 	guint32 layout;
 
@@ -131,8 +131,17 @@
 	klass->marshal_info = info = g_malloc0 (sizeof (MonoMarshalType) + sizeof (MonoMarshalField) * count);
 	info->num_fields = count;
 	
-	if (klass->parent)
-		info->native_size = mono_class_native_size (klass->parent, NULL);
+	/* Try to find a size for this type in metadata
+	 */
+	mono_metadata_packing_from_typedef (klass->image, klass->type_token, NULL, &native_size);
+
+	if (klass->parent) {
+		int parent_size = mono_class_native_size (klass->parent, NULL);
+
+		/* Add parent size to real size */
+		native_size += parent_size;
+		info->native_size = parent_size;
+	}
 
 	for (j = i = 0; i < klass->field.count; ++i) {
 		int size, align;
@@ -146,11 +155,12 @@
 
 		info->fields [j].field = &klass->fields [i];
 
+		size = mono_marshal_type_size (klass->fields [i].type, info->fields [j].mspec, 
+			&align, TRUE, klass->unicode);
+
 		switch (layout) {
 		case TYPE_ATTRIBUTE_AUTO_LAYOUT:
 		case TYPE_ATTRIBUTE_SEQUENTIAL_LAYOUT:
-			size = mono_marshal_type_size (klass->fields [i].type, info->fields [j].mspec, 
-						       &align, TRUE, klass->unicode);
 			align = klass->packing_size ? MIN (klass->packing_size, align): align;	
 			info->fields [j].offset = info->native_size;
 			info->fields [j].offset += align - 1;
@@ -166,6 +176,10 @@
 		j++;
 	}
 
+	if(layout != TYPE_ATTRIBUTE_AUTO_LAYOUT) {
+		info->native_size = MAX(native_size, info->native_size);
+	}
+
 	if (info->native_size & (klass->min_align - 1)) {
 		info->native_size += klass->min_align - 1;
 		info->native_size &= ~(klass->min_align - 1);
@@ -191,7 +205,7 @@
 	const int top = class->field.count;
 	guint32 layout = class->flags & TYPE_ATTRIBUTE_LAYOUT_MASK;
 	MonoTableInfo *t = &m->tables [MONO_TABLE_FIELD];
-	int i, blittable = TRUE;
+	int i, blittable = TRUE, real_size = 0;
 	guint32 rva;
 	guint32 packing_size = 0;
 
@@ -203,14 +217,16 @@
 			class_compute_field_layout (class->parent);
 		class->instance_size += class->parent->instance_size;
 		class->min_align = class->parent->min_align;
+		blittable = class->blittable;
 	} else {
 		class->instance_size = sizeof (MonoObject);
 		class->min_align = 1;
 	}
 
-	if (mono_metadata_packing_from_typedef (class->image, class->type_token, &packing_size, &class->instance_size)) {
-		class->instance_size += sizeof (MonoObject);
-	}
+	/*
+	 *	Get the real size
+	 */
+	mono_metadata_packing_from_typedef (class->image, class->type_token, &packing_size, &real_size);
 
 	g_assert ((packing_size & 0xfffffff0) == 0);
 	class->packing_size = packing_size;
@@ -280,7 +296,15 @@
 		if (!((strcmp (class->name, "Enum") == 0) && (strcmp (class->name_space, "System") == 0)))
 			G_BREAKPOINT ();
 	}
+
 	mono_class_layout_fields (class);
+
+	if(real_size) {
+		if(class->parent)
+			real_size += class->parent->instance_size;
+
+		class->instance_size = MAX(real_size, class->instance_size);
+	}
 }
 
 void
