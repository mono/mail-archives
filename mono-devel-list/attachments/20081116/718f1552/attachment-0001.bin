using Mono.Simd;

namespace System.Security.Cryptography
{

   internal class SHA1Internal
   {
       static void Main()
       {
           uint[] b = new uint[80];
           for (int i = 0; i < b.Length; i++)
               b[i] = (uint)(i*i*i);

           while (true)
           {
               long start = Environment.TickCount;
               for (int i = 0; i < 1000000; i++)
                   FillBuffUnsafe (b);
               Console.WriteLine("Unsafe:  {0}ms", Environment.TickCount - start);

               start = Environment.TickCount;
               for (int i = 0; i < 1000000; i++)
                   FillBuffUnsafe2 (b);
               Console.WriteLine("Unsafe2: {0}ms", Environment.TickCount - start);

               start = Environment.TickCount;
               for (int i = 0; i < 1000000; i++)
                   FillBuffUnsafe2 (b);
               Console.WriteLine("Safe:    {0}ms", Environment.TickCount - start);

               start = Environment.TickCount;
               for (int i = 0; i < 1000000; i++)
                   FillBuffOriginal (b);
               Console.WriteLine("Orig:    {0}ms", Environment.TickCount - start);
           }
       }

        private static void FillBuffOriginal(uint[] buff)
        {
               uint val;
               for (int i = 16; i < 80; i += 8)
               {
                   val = buff[i - 3] ^ buff[i - 8] ^ buff[i - 14] ^ buff[i - 16];
                   buff[i] = (val << 1) | (val >> 31);

                   val = buff[i - 2] ^ buff[i - 7] ^ buff[i - 13] ^ buff[i - 15];
                   buff[i + 1] = (val << 1) | (val >> 31);

                   val = buff[i - 1] ^ buff[i - 6] ^ buff[i - 12] ^ buff[i - 14];
                   buff[i + 2] = (val << 1) | (val >> 31);

                   val = buff[i + 0] ^ buff[i - 5] ^ buff[i - 11] ^ buff[i - 13];
                   buff[i + 3] = (val << 1) | (val >> 31);

                   val = buff[i + 1] ^ buff[i - 4] ^ buff[i - 10] ^ buff[i - 12];
                   buff[i + 4] = (val << 1) | (val >> 31);

                   val = buff[i + 2] ^ buff[i - 3] ^ buff[i - 9] ^ buff[i - 11];
                   buff[i + 5] = (val << 1) | (val >> 31);

                   val = buff[i + 3] ^ buff[i - 2] ^ buff[i - 8] ^ buff[i - 10];
                   buff[i + 6] = (val << 1) | (val >> 31);

                   val = buff[i + 4] ^ buff[i - 1] ^ buff[i - 7] ^ buff[i - 9];
                   buff[i + 7] = (val << 1) | (val >> 31);
               }
        }

       public static void FillBuffSafe(uint[] buff)
       {
           for (int t = 16; t < buff.Length; t += 4)
           {
               Vector4ui e = new Vector4ui (buff [t-16],buff [t-15],buff[t-14],buff [t-13]) ^
                             new Vector4ui (buff [t-14],buff [t-13],buff[t-12],buff [t-11]) ^
                             new Vector4ui (buff [t-8],  buff [t-7],  buff[t-6],  buff [t-5]) ^
                             new Vector4ui (buff [t-3],  buff [t-2],  buff[t-1],  buff [t-0]);

               e.W ^= buff[t];
               buff[t + 0] = (e.X << 1) | (e.X >> 31);
               buff[t + 1] = (e.Y << 1) | (e.Y >> 31);
               buff[t + 2] = (e.Z << 1) | (e.Z >> 31);
               buff[t + 3] = ((e.W << 1) | (e.W >> 31)) ^ ((e.X << 2) | (e.X >> 30));
           }
       }

       public unsafe static void FillBuffUnsafe(uint[] buff)
       {
           fixed (uint* ptr = buff)
           {
               for (int t = 16; t < 80; t += 4)
               {
                   Vector4ui e = *((Vector4ui*)&ptr[t - 16]) ^
                                 *((Vector4ui*)&ptr[t - 14]) ^
                                 *((Vector4ui*)&ptr[t - 8]) ^
                                 *((Vector4ui*)&ptr[t - 3]);
                   e.W ^= buff[t];
                   buff[t] = (e.X << 1) | (e.X >> 31);
                   buff[t + 1] = (e.Y << 1) | (e.Y >> 31);
                   buff[t + 2] = (e.Z << 1) | (e.Z >> 31);
                   buff[t + 3] = (e.W << 1) | (e.W >> 31);
                   buff[t + 3] ^= ((e.X << 2) | (e.X >> 30));
               }
           }
       }

       public unsafe static void FillBuffUnsafe2(uint[] buffb)
       {
           fixed (uint* buff = buffb)
           {
               for (int t = 16; t < buffb.Length; t += 4)
               {
                   uint temp = buff[t];
                   Vector4ui e = *((Vector4ui*)&buff[t - 16]) ^
                                 *((Vector4ui*)&buff[t - 14]) ^
                                 *((Vector4ui*)&buff[t -  8]) ^
                                 *((Vector4ui*)&buff[t -  3]);

                   Vector4ui.StoreAligned((Vector4ui*)&buff[t], e);

                   buff[t] = (buff[t] << 1) | (buff[t] >> 31);
                   buff[t + 1] = (buff[t + 1] << 1) | (buff[t + 1] >> 31);
                   buff[t + 2] = (buff[t + 2] << 1) | (buff[t + 2] >> 31);
                   buff[t + 3] ^= temp;
                   buff[t + 3] = ((buff[t + 3] << 1) | (buff[t + 3] >> 31)) ^ ((buff[t] << 1) | (buff[t] >> 31));
               }
           }
       }
   }
}