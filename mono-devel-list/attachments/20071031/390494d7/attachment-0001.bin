Index: mono/utils/ChangeLog
===================================================================
--- mono/utils/ChangeLog	(revision 88551)
+++ mono/utils/ChangeLog	(working copy)
@@ -1,3 +1,10 @@
+2007-10-31  Jonathan Chambers <joncham@gmail.com>
+
+	* strtod.c: Use G_LOCK_DEFINE_STATIC instead of GStaticMutex
+	to fix eglib compile.
+	
+	Code is contributed under MIT/X11 license.
+
 2007-10-11  Zoltan Varga  <vargaz@freemail.hu>
 
 	* mono-mmap.c (mono_vfree): Fix call to VirtualFree (). Fixes #332165.
Index: mono/utils/strtod.c
===================================================================
--- mono/utils/strtod.c	(revision 88551)
+++ mono/utils/strtod.c	(working copy)
@@ -21,10 +21,11 @@
 #define freedtoa __freedtoa
 #define dtoa __dtoa
 
-static GStaticMutex str_mutex [2] = {G_STATIC_MUTEX_INIT, G_STATIC_MUTEX_INIT};
+G_LOCK_DEFINE_STATIC(str_mutex0);
+G_LOCK_DEFINE_STATIC(str_mutex1);
 #define MULTIPLE_THREADS 1
-#define ACQUIRE_DTOA_LOCK(n)	g_static_mutex_lock (&str_mutex [(n)])
-#define FREE_DTOA_LOCK(n)	g_static_mutex_unlock (&str_mutex [(n)])
+#define ACQUIRE_DTOA_LOCK(n)	G_LOCK (str_mutex##n)
+#define FREE_DTOA_LOCK(n)	G_UNLOCK (str_mutex##n)
 
 /* Please send bug reports to David M. Gay (dmg at acm dot org,
  * with " at " changed at "@" and " dot " changed to ".").	*/
Index: eglib/src/ghashtable.c
===================================================================
--- eglib/src/ghashtable.c	(revision 88551)
+++ eglib/src/ghashtable.c	(working copy)
@@ -358,6 +358,45 @@
 	return count;
 }
 
+guint
+g_hash_table_foreach_steal (GHashTable *hash, GHRFunc func, gpointer user_data)
+{
+	int i;
+	int count = 0;
+	
+	g_return_val_if_fail (hash != NULL, 0);
+	g_return_val_if_fail (func != NULL, 0);
+
+	for (i = 0; i < hash->table_size; i++){
+		Slot *s, *last;
+
+		last = NULL;
+		for (s = hash->table [i]; s != NULL; ){
+			if ((*func)(s->key, s->value, user_data)){
+				Slot *n;
+
+				if (last == NULL){
+					hash->table [i] = s->next;
+					n = s->next;
+				} else  {
+					last->next = s->next;
+					n = last->next;
+				}
+				g_free (s);
+				hash->in_use--;
+				count++;
+				s = n;
+			} else {
+				last = s;
+				s = s->next;
+			}
+		}
+	}
+	if (count > 0)
+		rehash (hash);
+	return count;
+}
+
 void
 g_hash_table_destroy (GHashTable *hash)
 {
Index: eglib/src/garray.c
===================================================================
--- eglib/src/garray.c	(revision 88551)
+++ eglib/src/garray.c	(working copy)
@@ -181,3 +181,26 @@
 	return array;
 }
 
+GArray*
+g_array_remove_index_fast (GArray *array,
+		      guint index_)
+{
+	GArrayPriv *priv = (GArrayPriv*)array;
+
+	g_return_val_if_fail (array != NULL, NULL);
+
+	memmove (element_offset (priv, index_),
+		 element_offset (priv, array->len - 1),
+		 element_length (priv, array->len - index_));
+
+	array->len --;
+
+	if (priv->zero_terminated) {
+		memset (element_offset (priv, priv->array.len),
+			0,
+			priv->element_size);
+	}
+
+	return array;
+}
+
Index: eglib/src/gpath.c
===================================================================
--- eglib/src/gpath.c	(revision 88551)
+++ eglib/src/gpath.c	(working copy)
@@ -146,7 +146,15 @@
 g_path_is_absolute (const char *filename)
 {
 	g_return_val_if_fail (filename != NULL, FALSE);
+#ifdef G_OS_WIN32
+	if (filename[0] != '\0' && filename[1] != '\0' && filename[1] == ':' && 
+		filename[2] != '\0' && filename[2] == '\\')
+		return TRUE;
+	else
+		return FALSE;
+#else
 	return (*filename == '/');
+#endif
 }
 
 gchar *
Index: eglib/src/glib.h
===================================================================
--- eglib/src/glib.h	(revision 88551)
+++ eglib/src/glib.h	(working copy)
@@ -168,6 +168,7 @@
 gpointer        g_hash_table_find            (GHashTable *hash, GHRFunc predicate, gpointer user_data);
 gboolean        g_hash_table_remove          (GHashTable *hash, gconstpointer key);
 guint           g_hash_table_foreach_remove  (GHashTable *hash, GHRFunc func, gpointer user_data);
+guint           g_hash_table_foreach_steal   (GHashTable *hash, GHRFunc func, gpointer user_data);
 void            g_hash_table_destroy         (GHashTable *hash);
 
 guint           g_spaced_primes_closest      (guint x);
@@ -397,6 +398,7 @@
 GArray *g_array_append_vals       (GArray *array, gconstpointer data, guint len);
 GArray* g_array_insert_vals       (GArray *array, guint index_, gconstpointer data, guint len);
 GArray* g_array_remove_index      (GArray *array, guint index_);
+GArray* g_array_remove_index_fast (GArray *array, guint index_);
 
 #define g_array_append_val(a,v)   (g_array_append_vals((a),&(v),1))
 #define g_array_insert_val(a,i,v) (g_array_insert_vals((a),(i),&(v),1))
Index: eglib/ChangeLog
===================================================================
--- eglib/ChangeLog	(revision 88551)
+++ eglib/ChangeLog	(working copy)
@@ -1,3 +1,12 @@
+2007-10-31  Jonathan Chambers <joncham@gmail.com>
+	
+	* src/ghashtable.c: Add g_hash_table_foreach_steal.
+	* src/garray.c: Add g_array_remove_index_fast.
+	* src/gpath.c (g_path_is_absolute): Handle windows paths.
+	* src/glib.h: Add g_hash_table_foreach_steal and g_array_remove_index_fast
+	
+	Contribution is licensed as MIT/X11.
+
 2007-06-13  Jonathan Chambers <joncham@gmail.com>
 	
 	* src/gunicode.c: Add g_unichar_isxdigit and g_unichar_xdigit_value.