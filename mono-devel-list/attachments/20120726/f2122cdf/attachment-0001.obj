diff --git a/mcs/class/System/System.Text.RegularExpressions/interpreter.cs b/mcs/class/System/System.Text.RegularExpressions/interpreter.cs
index 2fe01c6..e193c94 100644
--- a/mcs/class/System/System.Text.RegularExpressions/interpreter.cs
+++ b/mcs/class/System/System.Text.RegularExpressions/interpreter.cs
@@ -114,6 +114,26 @@ namespace System.Text.RegularExpressions {
 					OutOfOptions = true;
 					return false;
 				} else {
+					for (int j = 0;j < TriedCombos.Count; j++) {
+						if (TriedCombos.Count==JumpTestList.Count) {
+							bool Found=false;
+							for (int i=0;i<JumpTestList.Count;i++) {
+								if ((JumpTestList[i].ptr==TriedCombos[j][i].ptr) &&
+								    (JumpTestList[i].pc==TriedCombos[j][i].pc)){
+									Found=true;
+								} else {
+									Found =false;
+									break;
+								}
+		
+							}
+							if (Found) {
+								//Dup, we're running in circles
+								OutOfOptions = true;
+								return false;
+							}
+						}
+					}
 					TriedCombos.Add(JumpTestList);
 					JumpTestList = new 
 						List<JumpTestEntry> ();
@@ -894,7 +914,8 @@ namespace System.Text.RegularExpressions {
 				for (int i = 0;i < TriedCombos.Count;i++)
 				{
 					if ((TriedCombos[i] != null) && 
-					    (TriedCombos[i].Count > 0))
+					    (TriedCombos[i].Count > 0) &&
+					    (TriedCombos[i].Count==(JumpTestList.Count+1)))
 					{
 						int j = TriedCombos[i].Count - 1;
 						if ((TriedCombos[i][j].pc == pc) && (TriedCombos[i][j].ptr == ptr)) 
