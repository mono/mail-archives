Index: String.cs
===================================================================
RCS file: /mono/mcs/class/corlib/System/String.cs,v
retrieving revision 1.113
diff -u -r1.113 String.cs
--- String.cs	25 May 2004 17:10:39 -0000	1.113
+++ String.cs	31 May 2004 18:58:17 -0000
@@ -682,7 +682,14 @@
 		/* This method is culture insensitive */
 		public String Replace (char oldChar, char newChar)
 		{
-			return InternalReplace (oldChar, newChar);
+			// Change Replace(char, char) to managed code, because ICU doesn't deal with replacing \0
+			char[] stringArray = this.ToCharArray();
+			for(int i = 0; i < stringArray.Length; i++)
+			{
+				if(stringArray[i] == oldChar)
+					stringArray[i] = newChar;
+			}
+			return new String(stringArray);
 		}
 
 		/* This method is culture sensitive */
@@ -697,14 +704,32 @@
 			if (this == String.Empty)
 				return this;
 
-			if (oldValue.Length == 0 || oldValue[0] == '\0') {
+			if (oldValue.Length == 0)
 				return(this);
-			}
 			
 			if (newValue == null)
 				newValue = String.Empty;
+			
+			if (this.IndexOf(oldValue) == -1)
+				return(this);
+
+			StringBuilder newString = new StringBuilder();
 
-			return InternalReplace (oldValue, newValue, CultureInfo.CurrentCulture.CompareInfo);
+			int index = 0;
+			while( index <= this.Length )
+			{
+				int pos = this.IndexOf(oldValue, index);
+				if(pos == -1)
+				{
+					newString.Append(this.Substring(index));
+					break;
+				} else {
+					newString.Append(this.Substring(index, pos-index));
+					newString.Append(newValue);
+					index = pos+oldValue.Length;
+				}
+			}
+			return newString.ToString();
 		}
 
 		public String Remove (int startIndex, int count)
