Index: ChangeLog
===================================================================
--- ChangeLog	(revision 130915)
+++ ChangeLog	(working copy)
@@ -1,3 +1,46 @@
+2009-04-03  Jonathan Chambers  <joncham@gmail.com>
+
+	* frontend/Style.cs: Add braces to work around bug 478101.
+
+	* languages/mono/MonoLanguageBackend.cs: Add braces to work around bug 478101.
+
+2009-04-03  Jonathan Chambers  <joncham@gmail.com>
+
+	* backend/server/breakpoints.c: Add HAVE_UNISTD_H #ifdef.
+
+	* backend/server/library.c: Add HAVE_UNISTD_H check and add Windows InferiorVTable.
+	(mono_debugger_server_create_inferior): Access through vtable.
+	(mono_debugger_server_get_current_pid): Access through vtable.
+	(mono_debugger_server_get_current_thread): Access through vtable.
+	(mono_debugger_server_static_init): Access through vtable.
+	(mono_debugger_server_get_pending_sigint): Access through vtable.
+	(mono_debugger_server_sem_init): Access through vtable.
+	(mono_debugger_server_sem_wait): Access through vtable.
+	(mono_debugger_server_sem_post): Access through vtable.
+	(mono_debugger_server_sem_get_value): Access through vtable.
+
+	* backend/server/monodebuggerserver.def: Add.
+
+	* backend/server/mutex.c: Add mono_debugger_cond_timed_wait.
+
+	* backend/server/server.h: Add declarations for vtable changes above.
+
+	* backend/server/x86-ptrace.c: Implement vtable functions formerly in library.c.
+
+	* backend/server/x86-windows.c: Added.
+
+	* build/debugger.sln: Added.
+
+	* build/mdb.csproj: Added.
+
+	* build/Mono.Debugger.csproj: Added.
+
+	* build/Mono.Debugger.Frontend.csproj: Added.
+
+	* build/Mono.Debugger.SymbolWriter.csproj: Added.
+
+	* build/monodebuggerserver.vcproj: Added.
+
 2009-03-31  Martin Baulig  <martin@ximian.com>
 
 	* backend/MonoThreadManager.cs
Index: frontend/Style.cs
===================================================================
--- frontend/Style.cs	(revision 130915)
+++ frontend/Style.cs	(working copy)
@@ -190,7 +190,7 @@
 			}
 
 			case TargetEventType.Exception:
-			case TargetEventType.UnhandledException:
+			case TargetEventType.UnhandledException: {
 				interpreter.Print ("{0} caught {2}exception at {1}.", target.Name, frame,
 						   args.Type == TargetEventType.Exception ?
 						   "" : "unhandled ");
@@ -210,6 +210,7 @@
 
 				break;
 			}
+			}
 		}
 
 		public override string FormatObject (Thread target, object obj,
Index: languages/mono/MonoLanguageBackend.cs
===================================================================
--- languages/mono/MonoLanguageBackend.cs	(revision 130915)
+++ languages/mono/MonoLanguageBackend.cs	(working copy)
@@ -1393,7 +1393,7 @@
 				break;
 			}
 
-			case NotificationType.UnloadModule:
+			case NotificationType.UnloadModule: {
 				Report.Debug (DebugFlags.JitSymtab,
 					      "Module unload: {0} {1}", data, arg);
 
@@ -1404,6 +1404,7 @@
 				engine.Process.Debugger.OnModuleUnLoaded (symfile.Module);
 				close_symfile (symfile);
 				break;
+			}
 
 			case NotificationType.JitBreakpoint:
 				JitBreakpoint (inferior, (int) arg, data);