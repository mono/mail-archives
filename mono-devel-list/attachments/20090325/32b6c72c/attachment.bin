Index: security-core-clr.c
===================================================================
--- security-core-clr.c	(revision 130206)
+++ security-core-clr.c	(working copy)
@@ -173,6 +173,42 @@
 }
 
 /*
+ * mono_security_core_clr_ensure_delegate_creation:
+ *
+ *	Return TRUE if a delegate can be created on the specified method. 
+ *	CoreCLR also affect the binding, so throwOnBindFailure must be 
+ * 	FALSE to let this function return (FALSE) normally, otherwise (if
+ *	throwOnBindFailure is TRUE) itwill throw an ArgumentException.
+ *
+ *	A MethodAccessException is thrown if the specified method is not
+ *	visible from the caller point of view.
+ */
+gboolean
+mono_security_core_clr_ensure_delegate_creation (MonoMethod *method, gboolean throwOnBindFailure)
+{
+	/* note: mscorlib creates delegates to avoid reflection (optimization), we ignore those cases */
+	MonoMethod *caller = get_reflection_caller ();
+	/* if the "real" caller is not Transparent then it do can anything */
+	if (mono_security_core_clr_method_level (caller, TRUE) != MONO_SECURITY_CORE_CLR_TRANSPARENT)
+		return TRUE;
+
+	/* otherwise it (as a Transparent caller) cannot create a delegate on a Critical method... */
+	if (mono_security_core_clr_method_level (method, TRUE) == MONO_SECURITY_CORE_CLR_CRITICAL) {
+		/* but this throws only if 'throwOnBindFailure' is TRUE */
+		if (!throwOnBindFailure)
+			return FALSE;
+
+		mono_raise_exception (mono_get_exception_argument ("method", "Transparent code cannot call Critical code"));
+	}
+	
+	/* also it cannot create the delegate on a method that is not visible from it's (caller) point of view */
+	if (!check_method_access (caller, method))
+		mono_raise_exception (mono_get_exception_method_access ());
+
+	return TRUE;
+}
+
+/*
  * mono_security_core_clr_ensure_dynamic_method_resolved_object:
  *
  *	Called from mono_reflection_create_dynamic_method (reflection.c) to add some extra checks required for CoreCLR.
Index: security-core-clr.h
===================================================================
--- security-core-clr.h	(revision 130206)
+++ security-core-clr.h	(working copy)
@@ -24,6 +24,7 @@
 
 extern void mono_security_core_clr_ensure_reflection_access_field (MonoClassField *field) MONO_INTERNAL;
 extern void mono_security_core_clr_ensure_reflection_access_method (MonoMethod *method) MONO_INTERNAL;
+extern gboolean mono_security_core_clr_ensure_delegate_creation (MonoMethod *method, gboolean throwOnBindFailure) MONO_INTERNAL;
 extern MonoException* mono_security_core_clr_ensure_dynamic_method_resolved_object (gpointer ref, MonoClass *handle_class) MONO_INTERNAL;
 
 extern MonoSecurityCoreCLRLevel mono_security_core_clr_class_level (MonoClass *class) MONO_INTERNAL;
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 130206)
+++ ChangeLog	(working copy)
@@ -1,3 +1,13 @@
+2009-03-25  Sebastien Pouliot  <sebastien@ximian.com>
+
+	* appdomain.c: Bump MONO_CORLIB_VERSION to 73
+	* icall.c (ves_icall_System_Delegate_CreateDelegate_internal): Add
+	an extra 'throwOnBindFailure' parameter to the icall. Remove FIXME
+	and add a call to mono_security_core_clr_ensure_delegate_creation
+	to do the extra checks required by CoreCLR.
+	* security-core-clr.c|h: Add function to check delegate creation,
+	both in the binding and accessibility, under CoreCLR.
+
 2009-03-25  Sebastien Pouliot  <sebastien@ximian.com> 
 
 	* reflection.c (mono_reflection_create_dynamic_method): when 
Index: appdomain.c
===================================================================
--- appdomain.c	(revision 130205)
+++ appdomain.c	(working copy)
@@ -68,7 +68,7 @@
  * Changes which are already detected at runtime, like the addition
  * of icalls, do not require an increment.
  */
-#define MONO_CORLIB_VERSION 72
+#define MONO_CORLIB_VERSION 73
 
 typedef struct
 {
Index: icall.c
===================================================================
--- icall.c	(revision 130205)
+++ icall.c	(working copy)
@@ -5980,7 +5980,7 @@
 
 static MonoObject *
 ves_icall_System_Delegate_CreateDelegate_internal (MonoReflectionType *type, MonoObject *target,
-						   MonoReflectionMethod *info)
+						   MonoReflectionMethod *info, MonoBoolean throwOnBindFailure)
 {
 	MonoClass *delegate_class = mono_class_from_mono_type (type->type);
 	MonoObject *delegate;
@@ -5991,9 +5991,10 @@
 
 	mono_assert (delegate_class->parent == mono_defaults.multicastdelegate_class);
 
-	/* FIME: We must check if target is visible to the caller under coreclr.
-	 * The check should be disabled otherwise as it shouldn't raise expection under fulltrust.
-	 */
+	if (mono_security_get_mode () == MONO_SECURITY_MODE_CORE_CLR) {
+		if (!mono_security_core_clr_ensure_delegate_creation (method, throwOnBindFailure))
+			return NULL;
+	}
 
 	delegate = mono_object_new (mono_object_domain (type), delegate_class);
 
