diff --git a/mono/mini/mini-amd64.c b/mono/mini/mini-amd64.c
index 83687bc..9dbb69e 100644
--- a/mono/mini/mini-amd64.c
+++ b/mono/mini/mini-amd64.c
@@ -4325,6 +4325,7 @@ mono_arch_output_basic_block (MonoCompile *cfg, MonoBasicBlock *bb)
 			amd64_alu_reg_imm (code, X86_SUB, AMD64_RSP, 8);
 			mono_add_patch_info (cfg, code - cfg->native_code, MONO_PATCH_INFO_BB, ins->inst_target_bb);
 			amd64_call_imm (code, 0);
+			mono_cfg_add_try_hole (cfg, ins->inst_eh_block, code, bb);
 			/* Restore stack alignment */
 			amd64_alu_reg_imm (code, X86_ADD, AMD64_RSP, 8);
 			break;
diff --git a/mono/mini/mini-arm.c b/mono/mini/mini-arm.c
index d6d1121..0a72637 100644
--- a/mono/mini/mini-arm.c
+++ b/mono/mini/mini-arm.c
@@ -3817,6 +3817,7 @@ mono_arch_output_basic_block (MonoCompile *cfg, MonoBasicBlock *bb)
 		case OP_CALL_HANDLER: 
 			mono_add_patch_info (cfg, code - cfg->native_code, MONO_PATCH_INFO_BB, ins->inst_target_bb);
 			ARM_BL (code, 0);
+			mono_cfg_add_try_hole (cfg, ins->inst_eh_block, code, bb);
 			break;
 		case OP_LABEL:
 			ins->inst_c0 = code - cfg->native_code;
diff --git a/mono/mini/mini-ia64.c b/mono/mini/mini-ia64.c
index 1f38929..89f263c 100644
--- a/mono/mini/mini-ia64.c
+++ b/mono/mini/mini-ia64.c
@@ -3007,6 +3007,7 @@ mono_arch_output_basic_block (MonoCompile *cfg, MonoBasicBlock *bb)
 			ia64_movl (code, GP_SCRATCH_REG2, 0);
 			ia64_mov_to_br (code, IA64_B6, GP_SCRATCH_REG2);
 			ia64_br_cond_reg (code, IA64_B6);
+			mono_cfg_add_try_hole (cfg, ins->inst_eh_block, code, bb);
 			ia64_codegen_set_one_ins_per_bundle (code, FALSE);
 			break;
 		case OP_START_HANDLER: {
diff --git a/mono/mini/mini-mips.c b/mono/mini/mini-mips.c
index 8d6f8f1..de827e3 100644
--- a/mono/mini/mini-mips.c
+++ b/mono/mini/mini-mips.c
@@ -3813,6 +3813,8 @@ mono_arch_output_basic_block (MonoCompile *cfg, MonoBasicBlock *bb)
 			mips_addiu (code, mips_t9, mips_t9, 0);
 			mips_jalr (code, mips_t9, mips_ra);
 			mips_nop (code);
+			/*FIXME should it be before the NOP or not? Does MIPS has a delay slot like sparc?*/
+			mono_cfg_add_try_hole (cfg, ins->inst_eh_block, code, bb);
 			break;
 		case OP_LABEL:
 			ins->inst_c0 = code - cfg->native_code;
diff --git a/mono/mini/mini-ppc.c b/mono/mini/mini-ppc.c
index 4223529..b11c6f2 100755
--- a/mono/mini/mini-ppc.c
+++ b/mono/mini/mini-ppc.c
@@ -4148,6 +4148,7 @@ mono_arch_output_basic_block (MonoCompile *cfg, MonoBasicBlock *bb)
 		case OP_CALL_HANDLER: 
 			mono_add_patch_info (cfg, code - cfg->native_code, MONO_PATCH_INFO_BB, ins->inst_target_bb);
 			ppc_bl (code, 0);
+			mono_cfg_add_try_hole (cfg, ins->inst_eh_block, code, bb);
 			break;
 		case OP_LABEL:
 			ins->inst_c0 = code - cfg->native_code;
diff --git a/mono/mini/mini-s390.c b/mono/mini/mini-s390.c
index a35c4f5..c6b1eb9 100644
--- a/mono/mini/mini-s390.c
+++ b/mono/mini/mini-s390.c
@@ -3778,6 +3778,7 @@ mono_arch_output_basic_block (MonoCompile *cfg, MonoBasicBlock *bb)
 			mono_add_patch_info (cfg, code-cfg->native_code, 
 					     MONO_PATCH_INFO_BB, ins->inst_target_bb);
 			s390_brasl (code, s390_r14, 0);
+			mono_cfg_add_try_hole (cfg, ins->inst_eh_block, code, bb);
 		}
 			break;
 		case OP_LABEL: {
diff --git a/mono/mini/mini-s390x.c b/mono/mini/mini-s390x.c
index bfdfdef..4336365 100644
--- a/mono/mini/mini-s390x.c
+++ b/mono/mini/mini-s390x.c
@@ -3984,6 +3984,7 @@ mono_arch_output_basic_block (MonoCompile *cfg, MonoBasicBlock *bb)
 			mono_add_patch_info (cfg, code-cfg->native_code, 
 					     MONO_PATCH_INFO_BB, ins->inst_target_bb);
 			s390_brasl (code, s390_r14, 0);
+			mono_cfg_add_try_hole (cfg, ins->inst_eh_block, code, bb);
 		}
 			break;
 		case OP_LABEL: {
diff --git a/mono/mini/mini-sparc.c b/mono/mini/mini-sparc.c
index 985ce56..eb94c7c 100644
--- a/mono/mini/mini-sparc.c
+++ b/mono/mini/mini-sparc.c
@@ -3214,6 +3214,7 @@ mono_arch_output_basic_block (MonoCompile *cfg, MonoBasicBlock *bb)
 			/* This is a jump inside the method, so call_simple works even on V9 */
 			sparc_call_simple (code, 0);
 			sparc_nop (code);
+			mono_cfg_add_try_hole (cfg, ins->inst_eh_block, code, bb);
 			break;
 		case OP_LABEL:
 			ins->inst_c0 = (guint8*)code - cfg->native_code;