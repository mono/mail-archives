At 09:08 PM 04/05/2003 +0200, you wrote:

>Could anyone confirm this with current CVS (I cannot get it to run)?

>

>The following code (under mono-0.23):

>

>#v+

>class A {

>  static A() { System.Console.WriteLine("A"); }

>  public static void f() {}

>}

>class B {

>  static B() { System.Console.WriteLine("B"); A.f(); }

>  public static void f() {}

>}

>class M {

>  public static void Main() { B.f(); }

>}

>#v-

>

>produces:

>A

>B

>

>where it should produce (and it does under pnet):

>B

>A

>

>(as per my spec reading 17.11 paragraph 6).

>

>The bug only occurs when class is referenced from static constructor 
of

>some other class.

<bold>

My C# specification (the 'C# Language Specification.doc' file distributed
with VS.NET) does not have a section 17.11. The entire section 17 is
about attributes.


I should point out that, as far as I understand it, this is no bug. The
specification does not state precisely when static construction occurs,
only that it must occur prior to any use of the class.


My specification states these things:

- A static constructor for a type is run at most once per application
domain.

- Static variables come into existence at some undetermined time prior to
the execution of the static constructor.

- The static field variable initializers of a class correspond to a
sequence of assignments that are executed at an implementation-dependent
time prior to the static constructor of the class (if any) and prior to
the first use of a static field of that class.


..and most importantly:


The exact timing of static constructor execution is
implementation-dependent, but is subject to the following rules:

- The static constructor for a class executes before any instance of the
class is created.

- The static constructor for a class executes before any of the static
members for the class are referenced.

- The static constructor for a class executes after the static field
initializers (if any) for the class.

- The static constructor for a class executes at most one time during a
single program instantiation.


Jonathan</bold>

