Index: monodocer.cs
===================================================================
--- monodocer.cs	(revision 90275)
+++ monodocer.cs	(working copy)
@@ -96,7 +96,7 @@
 		[Option("The {name} of the project this documentation is for.")]
 		public string name;
 
-		[Option("An XML documemntation {file} made by the /doc option of mcs/csc the contents of which will be imported.")]
+		[Option("An XML documentation {file} made by the /doc option of mcs/csc the contents of which will be imported.")]
 		public string importslashdoc;
 		
 		[Option("An ECMA or monodoc-generated XML documemntation {file} to import.")]
@@ -1213,7 +1213,7 @@
 		
 		XmlElement ass = WriteElement(root, "AssemblyInfo");
 		WriteElementText(ass, "AssemblyName", type.Assembly.GetName().Name);
-		WriteElementText(ass, "AssemblyVersion", type.Assembly.GetName().Version.ToString());
+		UpdateAssemblyVersions(ass, type, true);
 		if (type.Assembly.GetName().CultureInfo.Name != "")
 			WriteElementText(ass, "AssemblyCulture", type.Assembly.GetName().CultureInfo.Name);
 		else
@@ -1376,6 +1376,7 @@
 
 		WriteElementText(me, "MemberType", GetMemberType(mi));
 		
+		UpdateAssemblyVersions(me, mi, true);
 		MakeAttributes(me, mi, false);
 		MakeReturnValue(me, mi);
 		MakeParameters(me, mi);
@@ -1747,6 +1748,35 @@
 				n.ParentNode.RemoveChild(n);
 	}
 	
+	private static void UpdateAssemblyVersions(XmlElement root, MemberInfo member, bool add)
+	{
+		XmlElement e = (XmlElement) root.SelectSingleNode ("AssemblyVersions");
+		if (e == null) {
+			e = root.OwnerDocument.CreateElement("AssemblyVersions");
+			root.AppendChild(e);
+		}
+		Type type = member as Type;
+		if (type == null)
+			type = member.DeclaringType;
+		string assemblyVersion = type.Assembly.GetName().Version.ToString();
+		XmlElement c = null;
+		foreach (XmlElement version in e.SelectNodes("AssemblyVersion")) {
+			if (version.InnerText == assemblyVersion) {
+				c = version;
+			}
+		}
+		// c != null && add: ignore -- already present
+		if (c != null && !add) {
+			e.RemoveChild(c);
+		}
+		else if (c == null && add) {
+			c = root.OwnerDocument.CreateElement("AssemblyVersion");
+			c.InnerText = assemblyVersion;
+			e.AppendChild(c);
+		}
+		// c == null && !add: ignore -- already not present
+	}
+
 	private static void MakeAttributes(XmlElement root, object attributes, bool assemblyAttributes) {
 		int len;
 #if NET_1_0
Index: stylesheet.xsl
===================================================================
--- stylesheet.xsl	(revision 90275)
+++ stylesheet.xsl	(working copy)
@@ -463,6 +463,19 @@
 
 				<xsl:call-template name="DisplayDocsInformation"/>
 
+				<xsl:if test="count(AssemblyVersions/AssemblyVersion) &gt; 0">
+					<h4 class="Subsection">Requires Assembly Versions:</h4>
+					<ul>
+					<xsl:for-each select="AssemblyVersions/AssemblyVersion">
+						<li>
+							<xsl:value-of select="/Type/AssemblyInfo/AssemblyName"/> 
+							<xsl:value-of select="' '"/>
+							<xsl:value-of select="."/>
+						</li>
+					</xsl:for-each>
+					</ul>
+				</xsl:if>
+
 				<hr size="1"/>
 					
 				</div>
