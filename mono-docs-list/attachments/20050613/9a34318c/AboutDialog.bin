namespace Monodoc {

    using System;
    using Gtk;
    using Glade;
    using System.Reflection;
    
    public class AboutDialog : Gtk.Window {  
    	
        [Glade.Widget] Window about;
		[Glade.Widget] Image logo_image;
        [Glade.Widget] TreeView AuthorsTreeView;
        [Glade.Widget] TreeView VersionTreeView;
        [Glade.Widget] TreeView PluginsTreeView;
        [Glade.Widget] Gtk.Label AboutLabel;

        string[] authors = {"Miguel de Icaza (miguel@ximian.com)","Duncan Mak (duncan@ximian.com)","Joshua Tauberer (tauberer@for.net)","Lee Malabone","Philip Van Hoof","Johannes Roith (johannes@jroith.de)","Alp Toker (alp@atoker.com)","Piers Haken","John Luke (jluke@cfl.rr.com)","Ben Maurer","Mario Sopena novales",
        "Rafael Ferreira (raf@ophion.org)"};
        
        string about_str = "The mono documentation viewer\n <b>version {0}</b>";
    
        public AboutDialog() : base("AboutWindow") { 
                    
            Glade.XML gxml = new Glade.XML (null, "browser.glade", "about", null);
			gxml.Autoconnect (this);
            //about.TransientFor = parent.window1;

            // populating tabs
            PopulateAuthors();
            PopulateVersion();

           
            // About tab:
            //putting logo in
            logo_image.Pixbuf = new Gdk.Pixbuf (null, "monodoc.png");
            
            AboutLabel.Markup = String.Format(about_str,Assembly.GetExecutingAssembly().GetName().Version.ToString());
        }
        
        void PopulateVersion() {
            
            VersionTreeView.AppendColumn("Assembly",new CellRendererText(),"text",0);
            VersionTreeView.AppendColumn("Version",new CellRendererText(),"text",1);

            TreeStore store = new TreeStore(typeof(string),typeof(string));
            VersionTreeView.Model = store;

            TreeIter iter = new TreeIter();

            foreach (Assembly asm in AppDomain.CurrentDomain.GetAssemblies ()) {
                iter = store.AppendValues (asm.GetName().Name, asm.GetName().Version.ToString());
            }

            VersionTreeView.RulesHint = true;
            
            
        }
        
        void PopulateAuthors() {
            
            AuthorsTreeView.AppendColumn("Author",new CellRendererText(),"text",0);
           
            TreeStore store = new TreeStore(typeof(string));
            AuthorsTreeView.Model = store;

            //disabling headers
            //AuthorsTreeView.HeadersVisible = false;

            TreeIter iter = new TreeIter();

            foreach (string a in authors)
                iter = store.AppendValues(a);
            
            AuthorsTreeView.RulesHint = true;
        }

        public void OnOkClicked (object sender, EventArgs a)
		{      
            about.Hide();
		}
    
        public void OnDelete (object sender, EventArgs a)
		{
            about.Destroy();
		}

    }
}
