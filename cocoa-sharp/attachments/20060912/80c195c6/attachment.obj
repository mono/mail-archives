Index: src/Cocoa/URLRequest.cs
===================================================================
--- src/Cocoa/URLRequest.cs	(revision 65303)
+++ src/Cocoa/URLRequest.cs	(working copy)
@@ -13,5 +13,10 @@
 				return (URL) Object.FromIntPtr ((IntPtr) ObjCMessaging.objc_msgSend (NativeObject, "URL", typeof (IntPtr)));
 			}
 		}
+		
+		public static URLRequest RequestWithURL(URL url){
+			IntPtr urq = (IntPtr) ObjCMessaging.objc_msgSend (ObjCClass.FromType (typeof (URLRequest)).ToIntPtr (), "requestWithURL:", typeof (IntPtr), typeof (IntPtr), url.NativeObject);
+			return new URLRequest(urq);
+		}
 	}
 }
Index: src/Cocoa/Interop/ObjCClass.cs
===================================================================
--- src/Cocoa/Interop/ObjCClass.cs	(revision 65303)
+++ src/Cocoa/Interop/ObjCClass.cs	(working copy)
@@ -55,33 +55,37 @@
 		}
 
 		public static Type TypeForClassname (string class_name) {
-			if (class_name.StartsWith ("NS") || class_name.StartsWith ("CS"))
-				class_name = class_name.Substring (2);
+				if (class_name.StartsWith ("NS") || class_name.StartsWith ("CS"))
+					class_name = class_name.Substring (2);
 
-			if (native_classes.ContainsKey (class_name))
-				return (Type) native_classes [class_name];
+				if (native_classes.ContainsKey (class_name))
+					return (Type) native_classes [class_name];
 
-			foreach (Assembly assembly in AppDomain.CurrentDomain.GetAssemblies ()) {
-				if (assembly is System.Reflection.Emit.AssemblyBuilder)
+				foreach (Assembly assembly in AppDomain.CurrentDomain.GetAssemblies ()) {
+					if (assembly is System.Reflection.Emit.AssemblyBuilder)
 					continue;
 
-				foreach (Type type in assembly.GetTypes ()) {
-					if (type == typeof (Object) || type.IsSubclassOf (typeof (Object))) {
-						RegisterAttribute attr = (RegisterAttribute) Attribute.GetCustomAttribute (type, typeof (RegisterAttribute));
-						if (attr == null) {
-							native_classes [type.Name] = type;
-						} else {
-							ObjCClass.FromType (type);
-							native_classes [attr.Name] = type;
+					foreach (Type type in assembly.GetTypes ()) {
+						if (type == typeof (Object) || type.IsSubclassOf (typeof (Object))) {
+							RegisterAttribute attr = (RegisterAttribute) Attribute.GetCustomAttribute (type, typeof (RegisterAttribute));
+							if (attr == null) {
+								native_classes [type.Name] = type;
+							} else {
+								ObjCClass.FromType (type);
+								native_classes [attr.Name] = type;
+							}
 						}
 					}
 				}
-			}
 
-			if (native_classes.Contains (class_name))
-				return (Type) native_classes [class_name];
-			
-			return null;
+				if (native_classes.ContainsKey (class_name))
+					return (Type) native_classes [class_name];
+				else {
+					// CZ: this line is useful for determining which framework classes need to be 
+					// implemented. 
+					Console.WriteLine ("[{0:yyyy-mm-dd hh:MM:ss}] Class "+class_name+" not located in installed classes.", DateTime.Now);
+					return null;
+				}
 		}
 
 		public static ObjCClass FromObject (Object toconvert) {
Index: src/Cocoa/URL.cs
===================================================================
--- src/Cocoa/URL.cs	(revision 65303)
+++ src/Cocoa/URL.cs	(working copy)
@@ -13,5 +13,11 @@
 				return Object.FromIntPtr ((IntPtr) ObjCMessaging.objc_msgSend (NativeObject, "absoluteString", typeof (IntPtr))).ToString ();
 			}
 		}
+		
+		public static URL URLWithString(Cocoa.String cs){
+			IntPtr urq = (IntPtr) ObjCMessaging.objc_msgSend (ObjCClass.FromType (typeof (URL)).ToIntPtr (), "URLWithString:", typeof (IntPtr), typeof (IntPtr), cs.NativeObject);
+			return new URL(urq);
+		}
+		
 	}
 }
Index: src/Cocoa/Makefile.am
===================================================================
--- src/Cocoa/Makefile.am	(revision 65303)
+++ src/Cocoa/Makefile.am	(working copy)
@@ -90,7 +90,11 @@
 	./URLResponse.cs \
 	./View.cs \
 	./Window.cs \
-	./WindowStyle.cs
+	./WindowStyle.cs \
+	./Enumerator.cs \
+	./ConcreteMutableData.cs \
+	./IdEnumerator.cs \
+	./PathStore2.cs
 
 EXTRA_DIST=$(sources) cocoa-sharp.pc.in
 
Index: src/WebKit/Makefile.am
===================================================================
--- src/WebKit/Makefile.am	(revision 65303)
+++ src/WebKit/Makefile.am	(working copy)
@@ -13,6 +13,7 @@
 	./WebDataSource.cs \
 	./WebFrame.cs \
 	./WebHistoryItem.cs \
+	./WebScriptObject.cs \
 	./WebView.cs
 
 EXTRA_DIST=$(sources) webkit-sharp.pc.in
Index: src/WebKit/WebFrame.cs
===================================================================
--- src/WebKit/WebFrame.cs	(revision 65303)
+++ src/WebKit/WebFrame.cs	(working copy)
@@ -13,5 +13,9 @@
 			Cocoa.String native_content = new Cocoa.String (content);
 			ObjCMessaging.objc_msgSend (NativeObject, "loadHTMLString:baseURL:", typeof (void), typeof (IntPtr), native_content.NativeObject, typeof (IntPtr), IntPtr.Zero);
 		}
+		
+		public void LoadRequest(Cocoa.URLRequest req){
+			ObjCMessaging.objc_msgSend(NativeObject, "loadRequest:", typeof(void), typeof(IntPtr), req.NativeObject);
+		}
 	}
 }
Index: src/WebKit/WebView.cs
===================================================================
--- src/WebKit/WebView.cs	(revision 65303)
+++ src/WebKit/WebView.cs	(working copy)
@@ -26,7 +26,13 @@
 				return (WebFrame) Cocoa.Object.FromIntPtr ((IntPtr)ObjCMessaging.objc_msgSend (NativeObject, "mainFrame", typeof (IntPtr)));
 			}
 		}
-
+		
+		public WebScriptObject WindowScriptObject {
+			get {
+				return (WebScriptObject) Cocoa.Object.FromIntPtr ((IntPtr)ObjCMessaging.objc_msgSend(NativeObject,"windowScriptObject",typeof(IntPtr)));
+			}
+		}
+		
 		public void Render (string content) {
 			MainFrame.Render (content);
 		}