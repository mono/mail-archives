Index: doc/en/Cocoa/Control.xml
===================================================================
--- doc/en/Cocoa/Control.xml	(revision 56805)
+++ doc/en/Cocoa/Control.xml	(working copy)
@@ -51,7 +51,8 @@
       <Docs>
         <param name="frame">The display rectangle.</param>
         <summary>Creates a new instance with the specified rectangle.</summary>
-        <remarks></remarks>
+        <remarks>
+        </remarks>
       </Docs>
     </Member>
     <Member MemberName="Enabled">
Index: doc/en/Cocoa/Application.xml
===================================================================
--- doc/en/Cocoa/Application.xml	(revision 56805)
+++ doc/en/Cocoa/Application.xml	(working copy)
@@ -232,6 +232,33 @@
         <remarks>When using a macpack generated bundle, this will return the 'generic' application icon not the icon specified in the bundle's info.plist.</remarks>
       </Docs>
     </Member>
+    <Member MemberName="SetAppleMenu">
+      <MemberSignature Language="C#" Value="public void SetAppleMenu (Cocoa.Menu menu);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="menu" Type="Cocoa.Menu" />
+      </Parameters>
+      <Docs>
+        <param name="menu">The menu to set as the "Apple Menu"</param>
+        <summary>Sets the "Apple Menu" for the application</summary>
+        <remarks>The "Apple Menu" is the first menu item in the Application's Main Menu (after the apple icon).  It is always overridden to show the name of the currently executing application, and usually contains options such as "About Application", "Preferences...", "Services", Hide/Show options, and of course, the all-important "Quit Application".  It should be noted that simply calling SetAppleMenu() is not enough to override the "Apple Menu" for your application; the menu that is chosen as the "Apple Menu" must also be the submenu for the first item in the Application's main menu (for details, see remarks on the MainMenu property).</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="MainMenu">
+      <MemberSignature Language="C#" Value="public Cocoa.Menu MainMenu { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.Menu</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Gets/Sets the Main Menu for the Application.</summary>
+        <value>The Main Menu for the application.</value>
+        <remarks>The Main Menu is the menu that is displayed at the top of the screen while the Application is active.  The first item/submenu in this menu is known as the "Apple Menu", and its title is always overridden to show the name of the Application.  In order for the "Apple Menu" to display properly, you must call SetAppleMenu() on the submenu for the first item of the Main Menu.</remarks>
+      </Docs>
+    </Member>
   </Members>
   <Docs>
     <summary>Application is a managed representation of the NSApplication class.</summary>
Index: doc/en/Cocoa/MenuItem.xml
===================================================================
--- doc/en/Cocoa/MenuItem.xml	(revision 56805)
+++ doc/en/Cocoa/MenuItem.xml	(working copy)
@@ -16,7 +16,7 @@
         <Parameter Name="native_object" Type="System.IntPtr" />
       </Parameters>
       <Docs>
-        <param name="native_object">To be added.</param>
+        <param name="native_object">A pointer to the Objective C object.</param>
         <summary>To be added.</summary>
         <remarks>To be added.</remarks>
       </Docs>
@@ -28,8 +28,8 @@
         <ReturnType>Cocoa.ActionHandler</ReturnType>
       </ReturnValue>
       <Docs>
-        <summary>To be added.</summary>
-        <remarks>To be added.</remarks>
+        <summary>The event handler for the MenuItem's click event.</summary>
+        <remarks>Event handlers for MenuItem's click event can either be specified using C#'s delegate/event model or by using the SetAction() function and Target property.  The former looks more natural in C#, while the latter provides a more accurate view of the underlying model.</remarks>
       </Docs>
     </Member>
     <Member MemberName="Target">
@@ -39,9 +39,9 @@
         <ReturnType>Cocoa.Object</ReturnType>
       </ReturnValue>
       <Docs>
-        <summary>To be added.</summary>
-        <value>To be added.</value>
-        <remarks>To be added.</remarks>
+        <summary>Gets/Sets the Target of the MenuItem.</summary>
+        <value>The Target of the MenuItem.</value>
+        <remarks>When the MenuItem's Click event is fired, a message is sent to the Target requesting the Action specified by SetAction() or the Click event.</remarks>
       </Docs>
     </Member>
     <Member MemberName="State">
@@ -56,9 +56,64 @@
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public MenuItem (string title, Cocoa.ActionHandler action, string keyEquivalent);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="title" Type="System.String" />
+        <Parameter Name="action" Type="Cocoa.ActionHandler" />
+        <Parameter Name="keyEquivalent" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <param name="title">The title of the new MenuItem.</param>
+        <param name="action">The ActionHandler that will respond to the MenuItem's Click event.</param>
+        <param name="keyEquivalent">The accelerator key for the MenuItem.  Lower-case letters will be associated with Apple+letter, while upper-case letters will be associated with Shift+Apple+letter.</param>
+        <summary>Creates a new MenuItem with the specified title, event handler, and accelerator.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SetAction">
+      <MemberSignature Language="C#" Value="public void SetAction (string selector);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="selector" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <param name="selector">The name of the selector that will respond to the MenuItem's Click event.</param>
+        <summary>Sets the MenuItem's Action to the specified selector.</summary>
+        <remarks>The specified selector will be sent to the Target object whenever the MenuItem is clicked.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SubMenu">
+      <MemberSignature Language="C#" Value="public Cocoa.Menu SubMenu { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.Menu</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Gets/Sets the submenu for the MenuItem.</summary>
+        <value>The submenu attached to the MenuItem.</value>
+        <remarks>If a submenu is specified, selecting the MenuItem will cause the attached submenu to be displayed.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Enabled">
+      <MemberSignature Language="C#" Value="public bool Enabled { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Gets/Sets a value indicating whether or not the MenuItem is enabled.</summary>
+        <value>true if the MenuItem is enabled; otherwise, false.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
   </Members>
   <Docs>
-    <summary>To be added.</summary>
+    <summary>MenuItem is a managed representation of the NSMenuItem class.</summary>
     <remarks>To be added.</remarks>
   </Docs>
 </Type>
Index: doc/en/Cocoa/Object.xml
===================================================================
--- doc/en/Cocoa/Object.xml	(revision 56805)
+++ doc/en/Cocoa/Object.xml	(working copy)
@@ -14,7 +14,7 @@
       <MemberType>Constructor</MemberType>
       <Parameters />
       <Docs>
-        <summary>To be added.</summary>
+        <summary>Creates a new Object and allocates an underlying NSObject.</summary>
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
@@ -25,8 +25,8 @@
         <Parameter Name="native_object" Type="System.IntPtr" />
       </Parameters>
       <Docs>
-        <param name="native_object">To be added.</param>
-        <summary>To be added.</summary>
+        <param name="native_object">An NSObject in need of a managed wrapper</param>
+        <summary>Creates a new Cocoa.Object as a wrapper around the specified NSObject.</summary>
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
@@ -82,7 +82,7 @@
       </ReturnValue>
       <Parameters />
       <Docs>
-        <summary>To be added.</summary>
+        <summary>Initializes an allocated NSObject without arguments.</summary>
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
@@ -122,9 +122,143 @@
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
+    <Member MemberName="SendMessage">
+      <MemberSignature Language="C#" Value="public object SendMessage (string selector, Type rettype);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Object</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="selector" Type="System.String" />
+        <Parameter Name="rettype" Type="System.Type" />
+      </Parameters>
+      <Docs>
+        <param name="selector">The message that should be sent to the underlying NSObject.</param>
+        <param name="rettype">The expected return type for the message.</param>
+        <summary>Sends a parameter-less message to the underlying NSObject.</summary>
+        <returns>The NSObject's response to the message.</returns>
+        <remarks>object.SendMessage(selector, rettype) is simply a convenient shorthand for ObjCMessaging.objc_msgSend(object, selector, rettype).  It doesn't do anything special, but can make code much more readable.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SendMessage">
+      <MemberSignature Language="C#" Value="public object SendMessage (string selector, Type rettype, object[] args);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Object</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="selector" Type="System.String" />
+        <Parameter Name="rettype" Type="System.Type" />
+        <Parameter Name="args" Type="System.Object[]">
+          <Attributes>
+            <Attribute>
+              <AttributeName>System.ParamArray</AttributeName>
+            </Attribute>
+          </Attributes>
+        </Parameter>
+      </Parameters>
+      <Docs>
+        <param name="selector">The message that should be sent to the underlying NSObject.</param>
+        <param name="rettype">The expected return type for the message.</param>
+        <param name="args">A list of parameter types and parameters that should be sent to the NSObject.  Parameter types are at even indices, while the actual parameters follow each parameter type.</param>
+        <summary>Sends a message with parameters to the underlying NSObject.</summary>
+        <returns>The NSObject's response to the message.</returns>
+        <remarks>This is simply a convenient shorthand for a function in ObjCMessaging (see the other SendMessage() for details).</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SendMessageToSuper">
+      <MemberSignature Language="C#" Value="public object SendMessageToSuper (string selector, Type rettype, object[] args);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Object</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="selector" Type="System.String" />
+        <Parameter Name="rettype" Type="System.Type" />
+        <Parameter Name="args" Type="System.Object[]">
+          <Attributes>
+            <Attribute>
+              <AttributeName>System.ParamArray</AttributeName>
+            </Attribute>
+          </Attributes>
+        </Parameter>
+      </Parameters>
+      <Docs>
+        <param name="selector">The message that should be sent to the super-type of the underlying NSObject.</param>
+        <param name="rettype">The expected return type for the message.</param>
+        <param name="args">A list of parameter types and parameters that should be sent to the NSObject.  Parameter types are at even indices, while the actual parameters follow each parameter type.</param>
+        <summary>Sends a message to the super-type of the underlying NSObject.</summary>
+        <returns>The super-type's response to the message.</returns>
+        <remarks>This function is similar in nature to SendMessage()</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Allocate">
+      <MemberSignature Language="C#" Value="public static IntPtr Allocate (Type type);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.IntPtr</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="type" Type="System.Type" />
+      </Parameters>
+      <Docs>
+        <param name="type">Allocates space for an object of the specified type, but does not initialize the object.</param>
+        <summary>To be added.</summary>
+        <returns>A pointer to the space that was allocated.</returns>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SendMessageToClass">
+      <MemberSignature Language="C#" Value="public static object SendMessageToClass (Type type, string selector, Type rettype);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Object</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="type" Type="System.Type" />
+        <Parameter Name="selector" Type="System.String" />
+        <Parameter Name="rettype" Type="System.Type" />
+      </Parameters>
+      <Docs>
+        <param name="type">The type that will be the receiver of the message.</param>
+        <param name="selector">The message that should be sent to the class.</param>
+        <param name="rettype">The expected return type for the message.</param>
+        <summary>Sends a message to the specified class.</summary>
+        <returns>The class' response to the message.</returns>
+        <remarks>SendMessageToClass(type) is simply a convenient shorthand for ObjCMessaging.objc_msgSend((IntPtr)NativeClasses[type]).  It is included in order to enhance code clarity.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SendMessageToClass">
+      <MemberSignature Language="C#" Value="public static object SendMessageToClass (Type type, string selector, Type rettype, object[] args);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Object</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="type" Type="System.Type" />
+        <Parameter Name="selector" Type="System.String" />
+        <Parameter Name="rettype" Type="System.Type" />
+        <Parameter Name="args" Type="System.Object[]">
+          <Attributes>
+            <Attribute>
+              <AttributeName>System.ParamArray</AttributeName>
+            </Attribute>
+          </Attributes>
+        </Parameter>
+      </Parameters>
+      <Docs>
+        <param name="type">The type that will be the receiver of the message.</param>
+        <param name="selector">The message that should be sent to the class.</param>
+        <param name="rettype">The expected return type for the message.</param>
+        <param name="args">Additional arguments that should be sent with the message.</param>
+        <summary>Sends a message to the specified class.</summary>
+        <returns>The class' response to the message.</returns>
+        <remarks>See SendMessageToClass(type, selector, rettype) for details.</remarks>
+      </Docs>
+    </Member>
   </Members>
   <Docs>
-    <summary>To be added.</summary>
+    <summary>Object is a managed representation of the NSObject class.</summary>
     <remarks>To be added.</remarks>
   </Docs>
 </Type>
Index: doc/en/index.xml
===================================================================
--- doc/en/index.xml	(revision 56805)
+++ doc/en/index.xml	(working copy)
@@ -90,6 +90,7 @@
       <Type Name="OpenPanelHandler" />
       <Type Name="SavePanelHandler" />
       <Type Name="SheetHandler" />
+      <Type Name="Menu" />
     </Namespace>
     <Namespace Name="WebKit">
       <Type Name="WebBackForwardList" />
Index: src/Cocoa/Object.cs
===================================================================
--- src/Cocoa/Object.cs	(revision 56805)
+++ src/Cocoa/Object.cs	(working copy)
@@ -12,6 +12,8 @@
 
 		private static string ObjectiveCName = "NSObject";
 
+		private static string AllocationSelector = "alloc";
+
 		private IntPtr objc_object;
 		protected bool autorelease = false;
 
@@ -28,7 +30,7 @@
 			if (NativeClasses [this.GetType ()] == null)
 				NativeClasses [this.GetType ()] = Native.RegisterClass (this.GetType ());
 
-			NativeObject = (IntPtr)ObjCMessaging.objc_msgSend ((IntPtr) NativeClasses [this.GetType ()], "alloc", typeof (IntPtr));
+			NativeObject = Allocate(this.GetType());
 			autorelease = true;
 		}
 
@@ -103,8 +105,37 @@
 		public void Retain () {
 			ObjCMessaging.objc_msgSend (NativeObject, "retain", typeof (void));
 		}
+
+		public object SendMessage(string selector, Type rettype) {
+			return ObjCMessaging.objc_msgSend(NativeObject, selector, rettype);
+		}
+
+		public object SendMessage(string selector, Type rettype, params object[] args) {
+			return ObjCMessaging.objc_msgSend(NativeObject, selector, rettype, args);
+		}
+
+		public object SendMessageToSuper(string selector, Type rettype, params object[] args) {
+			return ObjCMessaging.objc_msgSendSuper(NativeObject, selector, rettype, args);
+		}
+
 		#endregion
 
+		#region Static Methods
+
+		public static IntPtr Allocate(Type type) {
+			return (IntPtr)SendMessageToClass(type, AllocationSelector, typeof(IntPtr));
+		}
+
+		public static object SendMessageToClass(Type type, string selector, Type rettype) {
+			return ObjCMessaging.objc_msgSend((IntPtr) NativeClasses [type], selector, rettype);
+		}
+
+		public static object SendMessageToClass(Type type, string selector, Type rettype, params object[] args) {
+			return ObjCMessaging.objc_msgSend((IntPtr) NativeClasses [type], selector, rettype, args);
+		}
+
+		#endregion
+
 		#region PInvokes
 		[DllImport ("/System/Library/Frameworks/Foundation.framework/Foundation")]
 		private static extern int strlen (string str);
Index: src/Cocoa/Application.cs
===================================================================
--- src/Cocoa/Application.cs	(revision 56805)
+++ src/Cocoa/Application.cs	(working copy)
@@ -102,6 +102,20 @@
 				throw new ArgumentNullException ("sheet");
 			ObjCMessaging.objc_msgSend (NativeObject, "endSheet:returnCode:", typeof (void), typeof (System.IntPtr), sheet.NativeObject, typeof (int), returnCode);
 		}
+
+		public void SetAppleMenu(Menu menu) {
+			SendMessage("setAppleMenu:", typeof(void), typeof(IntPtr), menu.NativeObject);
+		}
+
+		public Menu MainMenu {
+			get {
+				IntPtr ptrMenu = (IntPtr)SendMessage("mainMenu", typeof(IntPtr));
+				return new Menu(ptrMenu);
+			}
+			set {
+				SendMessage("setMainMenu:", typeof(void), typeof(IntPtr), value.NativeObject);
+			}
+		}
 		
 		[DllImport ("/System/Library/Frameworks/AppKit.framework/AppKit")]
 		private static extern int strlen (string str);
Index: src/Cocoa/MenuItem.cs
===================================================================
--- src/Cocoa/MenuItem.cs	(revision 56805)
+++ src/Cocoa/MenuItem.cs	(working copy)
@@ -5,48 +5,94 @@
 
 namespace Cocoa {
 	public class MenuItem : Cocoa.Object {
-		private static string ObjectiveCName = "NSMenuItem";                                                                                      
+		private static string ObjectiveCName = "NSMenuItem";
 
+		private const string InitWithTitleSelector = "initWithTitle:action:keyEquivalent:";
+		private const string GetTargetSelector = "target";
+		private const string SetTargetSelector = "setTarget:";
+		private const string SetActionSelector = "setAction:";
+		private const string GetStateSelector = "state";
+		private const string SetStateSelector = "setState:";
+		private const string GetSubmenuSelector = "submenu";
+		private const string SetSubmenuSelector = "setSubmenu:";
+		private const string GetEnabledSelector = "isEnabled";
+		private const string SetEnabledSelector = "setEnabled";
+
 		static MenuItem () {
 			NativeClasses [typeof (MenuItem)] = Native.RegisterClass (typeof (MenuItem)); 
 		}
 
 		public MenuItem (IntPtr native_object) : base (native_object) {}
 
+		public MenuItem (string title, ActionHandler action, string keyEquivalent) {
+			NativeObject = (IntPtr)SendMessage(InitWithTitleSelector, typeof(IntPtr), 
+				typeof(IntPtr), new Cocoa.String(title).NativeObject, 
+				typeof(IntPtr), IntPtr.Zero,
+				typeof(IntPtr), new Cocoa.String(keyEquivalent).NativeObject);
+			if (action != null)
+				Click += action;
+		}
+
 		public Cocoa.Object Target {
 			get {
-				return (Cocoa.Object)ObjCMessaging.objc_msgSend (NativeObject, "target", typeof (void));
+				return (Cocoa.Object)SendMessage(GetTargetSelector, typeof (void));
 			}
 			set {
-				ObjCMessaging.objc_msgSend (NativeObject, "setTarget:", typeof (void), typeof (System.IntPtr), ((Cocoa.Object)value).NativeObject);
+				SendMessage(SetTargetSelector, typeof (void), typeof (IntPtr), value.NativeObject);
 			}
-		} 
+		}
 
+		public void SetAction(string selector) {
+			SendMessage(SetActionSelector, typeof(void), typeof(IntPtr), sel_getUid(selector));
+		}
+
 		public event ActionHandler Click {
 			add {
-				Cocoa.Object target = (Cocoa.Object)((ActionHandler)value).Target;
-				MethodInfo method = ((ActionHandler)value).Method;
+				Cocoa.Object target = (Cocoa.Object)value.Target;
+				MethodInfo method = value.Method;
 				string selector = method.Name;
 				foreach (ExportAttribute export_attribute in Attribute.GetCustomAttributes (method, typeof (ExportAttribute))) {
 					if (export_attribute.Selector != null)
 						selector = export_attribute.Selector;
 				}
 				Target = target;
-				ObjCMessaging.objc_msgSend (NativeObject, "setAction:", typeof (void), typeof (IntPtr), new Cocoa.String (selector).NativeObject);
+				SetAction(selector);
 			}
 			remove {
 				// TODO: Remove the handler
-				ObjCMessaging.objc_msgSend (NativeObject, "setAction:", typeof (void), typeof (IntPtr), IntPtr.Zero);
+				SendMessage(SetActionSelector, typeof(void), typeof(IntPtr), IntPtr.Zero);
 			}
 		}
 			
 		public Cocoa.CellStateValue State {
 			get {
-				return(Cocoa.CellStateValue) ObjCMessaging.objc_msgSend(NativeObject, "state", typeof(System.Int32));
+				return (Cocoa.CellStateValue)SendMessage(GetStateSelector, typeof(System.Int32));
 			}
 			set {
-				ObjCMessaging.objc_msgSend(NativeObject, "setState:", typeof(void), typeof(System.Int32), value);
+				SendMessage(SetStateSelector, typeof(void), typeof(System.Int32), value);
 			}
 		}
+
+		public Menu SubMenu {
+			get {
+				IntPtr ptrMenu = (IntPtr)SendMessage(GetSubmenuSelector, typeof(IntPtr));
+				return new Menu(ptrMenu);
+			}
+			set {
+				SendMessage(SetSubmenuSelector, typeof(void), typeof(IntPtr), value.NativeObject);
+			}
+		}
+
+		public bool Enabled {
+			get {
+				return (bool)SendMessage(GetEnabledSelector, typeof(bool));
+			}
+			set {
+				SendMessage(SetEnabledSelector, typeof(void), typeof(bool), value);
+			}
+		}
+
+		[DllImport ("libobjc.dylib")]
+		private static extern IntPtr sel_getUid (string name);
 	}
-}
+}
