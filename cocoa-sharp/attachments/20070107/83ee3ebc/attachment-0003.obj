Index: doc/en/Cocoa/ProgressIndicator.xml
===================================================================
--- doc/en/Cocoa/ProgressIndicator.xml	(revision 70564)
+++ doc/en/Cocoa/ProgressIndicator.xml	(working copy)
@@ -57,6 +57,176 @@
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
+    <Member MemberName="Animate">
+      <MemberSignature Language="C#" Value="public void Animate ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Advances the progress animation by one step</summary>
+        <remarks>Use this to control animation directly.  The more frequently this is called, the more quickly the animation progresses.  This is only used for indeterminate progress indicators.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="AnimationDelay">
+      <MemberSignature Language="C#" Value="public System.Double AnimationDelay { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Double</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Gets or sets the delay, in seconds, between animation steps for an indeterminate progress indicator.</summary>
+        <remarks>Default is 1/12th of a second.  This is only used for indeterminate progress indicators.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="UsesThreadedAnimation">
+      <MemberSignature Language="C#" Value="public System.Boolean UsesThreadedAnimation { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Gets or sets whether the animation of an indeterminate progress indicator is implemented in a separate thread.</summary>
+        <remarks>This is only used for indeterminate progress indicators.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="IncrementBy">
+      <MemberSignature Language="C#" Value="public System.Void IncrementBy (double delta);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="delta" Type="System.Double" />
+      </Parameters>
+      <Docs>
+        <summary>Increments the value of a determinate progress indicator by a given amount.</summary>
+        <remarks>This is only used for determinate progress indicators.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="DoubleValue">
+      <MemberSignature Language="C#" Value="public System.Double DoubleValue { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Double</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Gets or sets the value of a determinate progress indicator.</summary>
+        <remarks>This is only used for determinate progress indicators.</remarks>
+      </Docs>
+    </Member>    
+    <Member MemberName="Indeterminate">
+      <MemberSignature Language="C#" Value="public System.Boolean Indeterminate { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Gets or sets whether a progress indicator is indeterminate or not.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="MinValue">
+      <MemberSignature Language="C#" Value="public System.Double MinValue { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Double</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Gets or sets the minimum value for a determinate progress indicator.</summary>
+        <remarks>This is only used for determinate progress indicators.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="MaxValue">
+      <MemberSignature Language="C#" Value="public System.Double MaxValue { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Double</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Gets or sets the maximum value for a determinate progress indicator.</summary>
+        <remarks>This is only used for determinate progress indicators.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Style">
+      <MemberSignature Language="C#" Value="public Cocoa.ProgressIndicatorStyle Style { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.ProgressIndicatorStyle</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Gets or sets the style for a progress indicator.</summary>
+        <remarks>Available styles are bar or spinning.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SizeToFit">
+      <MemberSignature Language="C#" Value="public System.Void SizeToFit ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Resizes the progress indicator to an appropriate size, depending on the current value of Style.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="DisplayedWhenStopped">
+      <MemberSignature Language="C#" Value="public System.Boolean DisplayedWhenStopped ();" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Gets or sets whether the progress indicator hides itself when it is not animating.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="ControlSize">
+      <MemberSignature Language="C#" Value="public Cocoa.ProgressIndicatorControlSize ControlSize { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.ProgressIndicatorControlSize</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Gets or sets the size of the progress indicator.</summary>
+        <remarks>Available sizes are regular or small.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="ControlTint">
+      <MemberSignature Language="C#" Value="public Cocoa.ProgressIndicatorControlTint ControlTint { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.ProgressIndicatorControlTint</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Gets or sets the tint of the progress indicator.</summary>
+        <remarks>Available tints are default or clear.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Bezeled">
+      <MemberSignature Language="C#" Value="public System.Boolean Bezeled { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Gets or sets whether the frame surrounding the progress indicator has a three-dimensional bezel.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
   </Members>
   <Docs>
     <summary>To be added.</summary>