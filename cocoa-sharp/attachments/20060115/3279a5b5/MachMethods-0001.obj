using System;
using System.Runtime.InteropServices;

namespace Cocoa.Interop {
	internal class MachMethods {
		private MachMethods ()
		{
		}

		[DllImport ("libSystem.dylib")]
		internal static extern int mach_port_allocate (IntPtr task, uint right, ref IntPtr name);

		[DllImport ("libSystem.dylib")]
		internal static extern int mach_port_insert_right (IntPtr task, IntPtr name, IntPtr right, uint rightType);

		[DllImport ("libSystem.dylib")]
		internal static extern int task_for_pid (IntPtr port, int pid, ref IntPtr task);

		[DllImport ("libSystem.dylib")]
		internal static extern int task_set_exception_ports (IntPtr task, uint exception_mask, IntPtr new_port, uint behavior, uint new_flavor);

		[DllImport ("libSystem.dylib")]
		internal static extern int mach_msg (IntPtr msg, uint option, uint send_size, uint rcv_size, IntPtr rcv_name, uint timeout, IntPtr notify);


		[DllImport ("libSystem.dylib")]
		internal static extern IntPtr mach_task_self ();

		[DllImport ("libSystem.dylib")]
		internal static extern int getpid ();
	}

	#region port.h

	internal enum MachPortRight : uint {
		Send = 0,
		Receive,
		SendOnce,
		PortSet,
		DeadName
	}

	[Flags ()]
	internal enum MachPortType : uint {
		None     = 0,
		Send     = 1 << (int)(16 + MachPortRight.Send),
		Receive  = 1 << (int)(16 + MachPortRight.Receive),
		SendOnce = 1 << (int)(16 + MachPortRight.SendOnce),
		PortSet  = 1 << (int)(16 + MachPortRight.PortSet),
		DeadName = 1 << (int)(16 + MachPortRight.DeadName)
	}

	#endregion

	#region message.h

	internal enum MachMessageType : uint {
		MoveReceive = 16,
		MoveSend,
		MoveSendOnce,
		CopySend,
		MakeSend,
		MakeSendOnce,
		CopyReceive
	}

	[StructLayout (LayoutKind.Sequential)]
	internal struct mach_msg_header {
		internal uint bits;
		internal uint size;
		internal IntPtr remote_port;
		internal IntPtr local_port;
		internal uint seqno_reserved;
		internal int id;
	}

	[Flags ()]
	internal enum MachMessageOption : uint {
		None             = 0x00000,
		Send             = 0x00001,
		Receive          = 0x00002,
		SendTimeout      = 0x00010,
		SendCancel       = 0x00080,
		SendTrailer      = 0x20000,
		ReceiveTimeout   = 0x00100,
		ReceiveNotify    = 0x00200,
		ReceiveOverwrite = 0x01000
	}

	internal enum MachMessageResultCode : uint {
		Success = 0x0,
		SendInvalidData = 0x10000002,
		SendInvalidDest,
		SendTimedOut,
		SendInterrupted = 0x10000007,
		SendMessageTooSmall,
		SendInvalidReply,
		SendInvalidRight,
		SendInvalidNotify,
		SendInvalidMemory,
		SendNoBuffer,
		SendTooLarge,
		SendInvalidType,
		SendInvalidHeader,
		SendInvalidTrailer,
		ReceiveInvalidName = 0x10004001,
		ReceiveTimedOut,
		ReceiveTooLarge,
		ReceiveInterrupted,
		//ReceivePortChanged,
		ReceiveInvalidNotify = 0x10004007,
		ReceiveInvalidData,
		ReceivePortDied,
		//ReceiveInSet,
		ReceiveHeaderError = 0x1000400b,
		ReceiveBodyError,
		ReceiveInvalidType,
		ReceiveScatterSmall,
		ReceiveInvalidTrailer
	}

	#endregion

	#region exceptions.h

	internal enum MachException : uint {
		BadAccess = 1,
		BadInstruction,
		Arithmetic,
		Emulation,
		Software,
		Breakpoint,
		Syscall,
		MachSyscall,
		RpcAlert
	}

	[Flags ()]
	internal enum MachExceptionMask : uint {
		BadAccess      = 1 << (int)MachException.BadAccess,
		BadInstruction = 1 << (int)MachException.BadInstruction,
		Arithmetic     = 1 << (int)MachException.Arithmetic,
		Emulation      = 1 << (int)MachException.Emulation,
		Software       = 1 << (int)MachException.Software,
		Breakpoint     = 1 << (int)MachException.Breakpoint,
		Syscall        = 1 << (int)MachException.Syscall,
		MachSyscall    = 1 << (int)MachException.MachSyscall,
		RpcAlert       = 1 << (int)MachException.RpcAlert,
		Machine        = 0,
		All = BadAccess|BadInstruction|Arithmetic|Emulation|Software|Breakpoint|Syscall|MachSyscall|RpcAlert|Machine
	}
	
	internal enum MachExceptionBehavior : uint {
		Default = 1,
		State,
		StateIdentity
	}

	internal enum MachThreadStateFlavor : uint {
		None = 7 // same for i386 and ppc
	}
	
	#endregion

	#region kern_result.h
	internal enum MachResultCode : int {
		Success = 0,
		InvalidAddress,
		ProtectionFailure,
		NoSpace,
		InvalidArgument,
		Failure = 5,
		ResourceShortage,
		NotReceiver,
		NoAccess,
		MemoryFailure,
		MemoryError = 10,
		AlreadyInSet,
		NotInSet,
		NameExists,
		Aborted,
		InvalidName,
		InvalidTask,
		InvalidRight,
		InvalidValue,
		UrefsOverflow,
		InvalidCapability = 20,
		RightExists,
		InvalidHost,
		MemoryPresent,
		MemoryDataMoved,
		MemoryRestartCopy,
		InvalidProcessorSet,
		PolicyLimit,
		InvalidPolicy,
		InvalidObject,
		AlreadyWaiting = 30,
		DefaultSet,
		ExceptionProtected,
		InvalidLedger,
		InvalidMemoryControl,
		InvalidSecurity,
		NotDepressed,
		Terminated,
		LockSetDestroyed,
		LockUnstable,
		LockOwned = 40,
		LockOwnedSelf,
		SemaphoreDestroyed,
		RpcServerTerminated,
		RpcTerminateOrphan,
		RpcContinueOrphan,
		NotSupported,
		NodeDown,
		NotWaiting,
		OperationTimedOut = 49
	}
	#endregion
}
