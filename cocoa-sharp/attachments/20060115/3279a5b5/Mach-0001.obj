using System;
using System.Runtime.InteropServices;
using System.Threading;

namespace Cocoa.Interop {
	public class Mach {
		private Mach ()
		{
		}

		private static IntPtr port;
		public static void Test ()
		{
			IntPtr machTask = Mach.Task;
			port = Mach.AllocatePort (machTask, MachPortRight.Receive);
			Mach.InsertPortRight (machTask, port, port, MachMessageType.MakeSend);
			IntPtr task = GetTask (machTask);
			Mach.SetTaskExceptionPorts (task, MachExceptionMask.All & ~(MachExceptionMask.Syscall|MachExceptionMask.MachSyscall|MachExceptionMask.RpcAlert), port, MachExceptionBehavior.Default, MachThreadStateFlavor.None);
			Thread t = new Thread (new ThreadStart (MachExceptionHandler));
			t.Start ();
		}
		private static void MachExceptionHandler () {
			IntPtr pMsg = IntPtr.Zero;
			IntPtr pReply = IntPtr.Zero;
			try {
				pMsg = Marshal.AllocHGlobal (512);
				pReply = Marshal.AllocHGlobal (36);
				while (true) {
					Mach.ReceiveMessage (pMsg, 512, port);
					mach_msg_header msg = (mach_msg_header)Marshal.PtrToStructure(pMsg, typeof (mach_msg_header));
					Console.WriteLine ("Caught a Mach exception.");
					mach_msg_header reply = new mach_msg_header ();
					reply.bits = 0x12;//(uint)MachMessageType.MoveSendOnce;
					reply.size = 0x24;//36;
					reply.remote_port = msg.remote_port;
					reply.local_port = IntPtr.Zero;
					reply.seqno_reserved = 0;
					reply.id = msg.id + 0x64;//100;
					Marshal.StructureToPtr (reply, pReply, false);
					Marshal.WriteInt64 ((IntPtr)((long)pReply + Marshal.SizeOf (typeof (mach_msg_header))), 0);
					Marshal.WriteInt32 ((IntPtr)((long)pReply + Marshal.SizeOf (typeof (mach_msg_header)) + (2 * Marshal.SizeOf (typeof (int)))), 0x5);
					Mach.SendMessage(pReply, reply.size, msg.local_port);
				}
			} finally {
				if (pMsg != IntPtr.Zero) Marshal.FreeHGlobal(pMsg);
				if (pReply != IntPtr.Zero) Marshal.FreeHGlobal(pReply);
			}
		}

		internal static IntPtr Task {
			get {
				return MachMethods.mach_task_self ();
			}
		}

		internal static IntPtr AllocatePort (IntPtr task, MachPortRight rights)
		{
			IntPtr name = IntPtr.Zero;
			MachResultCode rc = (MachResultCode)MachMethods.mach_port_allocate(task, (uint)rights, ref name);
			if (rc != MachResultCode.Success)
				throw new Exception("mach_port_allocate: " + rc);
			return name;
		}

		internal static void InsertPortRight (IntPtr task, IntPtr name, IntPtr right, MachMessageType rightType)
		{
			MachResultCode rc = (MachResultCode)MachMethods.mach_port_insert_right(task, name, right, (uint)rightType);
			if (rc != MachResultCode.Success)
				throw new Exception("mach_port_insert_right: " + rc);
		}

		internal static IntPtr GetTask (IntPtr port)
		{
			IntPtr task = IntPtr.Zero;
			MachResultCode rc = (MachResultCode)MachMethods.task_for_pid(port, MachMethods.getpid(), ref task);
			if (rc != MachResultCode.Success)
				throw new Exception("task_for_pid: " + rc);
			return task;
		}

		internal static void SetTaskExceptionPorts (IntPtr task, MachExceptionMask exceptionMask, IntPtr newPort, MachExceptionBehavior behavior, MachThreadStateFlavor newFlavor)
		{
			MachResultCode rc = (MachResultCode)MachMethods.task_set_exception_ports(task, (uint)exceptionMask, newPort, (uint)behavior, (uint)newFlavor);
			if (rc != MachResultCode.Success)
				throw new Exception("task_set_exception_ports: " + rc);
		}

		internal static void ReceiveMessage(IntPtr msg, int size, IntPtr port)
		{
			MachMessageResultCode rc = (MachMessageResultCode)MachMethods.mach_msg (msg, (uint)MachMessageOption.Receive, 0, (uint)size, port, 0, IntPtr.Zero);
			if (rc != MachMessageResultCode.Success)
				throw new Exception("mach_msg receive: " + rc);
		}

		internal static void SendMessage(IntPtr msg, uint size, IntPtr port)
		{
			MachMessageResultCode rc = (MachMessageResultCode)MachMethods.mach_msg (msg, (uint)MachMessageOption.Send, (uint)size, 0, port, 0, IntPtr.Zero);
			if (rc != MachMessageResultCode.Success)
				throw new Exception("mach_msg send: " + rc);
		}
	}
}
