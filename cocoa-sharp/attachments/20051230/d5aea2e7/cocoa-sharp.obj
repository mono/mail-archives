Index: doc/en/Cocoa/Native.xml
===================================================================
--- doc/en/Cocoa/Native.xml	(revision 54932)
+++ doc/en/Cocoa/Native.xml	(working copy)
@@ -367,6 +367,22 @@
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
+    <Member MemberName="ManagedToNativeArray">
+      <MemberSignature Language="C#" Value="public static Cocoa.Array ManagedToNativeArray (object[] objectArray);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.Array</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="objectArray" Type="System.Object[]" />
+      </Parameters>
+      <Docs>
+        <param name="objectArray">An array of managed objects to convert.</param>
+        <summary>Converts a managed array to a native cocoa array.</summary>
+        <returns>A <see cref="T:Cocoa.MutableArray" />.</returns>
+        <remarks>This currently only works with string arrays and arrays of objects that inherit from <see cref="T:Cocoa.Object" />.</remarks>
+      </Docs>
+    </Member>
   </Members>
   <Docs>
     <summary>To be added.</summary>
Index: doc/en/Cocoa/SheetHandler.xml
===================================================================
--- doc/en/Cocoa/SheetHandler.xml	(revision 0)
+++ doc/en/Cocoa/SheetHandler.xml	(revision 0)
@@ -0,0 +1,25 @@
+<Type Name="SheetHandler" FullName="Cocoa.SheetHandler">
+  <TypeSignature Language="C#" Value="public delegate void SheetHandler(Cocoa.Window sheet, int returnCode, IntPtr contextInfo);" />
+  <AssemblyInfo>
+    <AssemblyName>cocoa-sharp</AssemblyName>
+    <AssemblyVersion>1.9.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Delegate</BaseTypeName>
+  </Base>
+  <Parameters>
+    <Parameter Name="sheet" Type="Cocoa.Window" />
+    <Parameter Name="returnCode" Type="System.Int32" />
+    <Parameter Name="contextInfo" Type="System.IntPtr" />
+  </Parameters>
+  <ReturnValue>
+    <ReturnType>System.Void</ReturnType>
+  </ReturnValue>
+  <Docs>
+    <param name="sheet">The <see cref="T:Cocoa.Window" /> object that raised the event.</param>
+    <param name="returnCode">The return code passed from the <see cref="M:Cocoa.Application.EndSheet" /> method.</param>
+    <param name="contextInfo">The contextInfo object that was specified.</param>
+    <summary>Defines the shape of methods that are called in response to a sheetDidEnd event.</summary>
+    <remarks>The return code is only relevant when the <see cref="M:Cocoa.Application.EndSheet" /> overloaded method that takes a return code is called.</remarks>
+  </Docs>
+</Type>
Index: doc/en/Cocoa/OpenPanelHandler.xml
===================================================================
--- doc/en/Cocoa/OpenPanelHandler.xml	(revision 0)
+++ doc/en/Cocoa/OpenPanelHandler.xml	(revision 0)
@@ -0,0 +1,25 @@
+<Type Name="OpenPanelHandler" FullName="Cocoa.OpenPanelHandler">
+  <TypeSignature Language="C#" Value="public delegate void OpenPanelHandler(Cocoa.OpenPanel sheet, int returnCode, IntPtr contextInfo);" />
+  <AssemblyInfo>
+    <AssemblyName>cocoa-sharp</AssemblyName>
+    <AssemblyVersion>1.9.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Delegate</BaseTypeName>
+  </Base>
+  <Parameters>
+    <Parameter Name="sheet" Type="Cocoa.OpenPanel" />
+    <Parameter Name="returnCode" Type="System.Int32" />
+    <Parameter Name="contextInfo" Type="System.IntPtr" />
+  </Parameters>
+  <ReturnValue>
+    <ReturnType>System.Void</ReturnType>
+  </ReturnValue>
+  <Docs>
+    <param name="sheet">The OpenPanel object that raised the event.</param>
+    <param name="returnCode">The return code indicating which button was clicked.</param>
+    <param name="contextInfo">The contextInfo object that was specified.</param>
+    <summary>Defines the shape of methods that are called in response to an openPanelDidEnd event.</summary>
+    <remarks>The return code will be <see cref="M:Cocoa.Panel.OKButton" /> if the OK buton was selected. It will be <see cref="M:Cocoa.Panel.CancelButton" /> if the Cancel button was clicked.</remarks>
+  </Docs>
+</Type>
Index: doc/en/Cocoa/AlertStyle.xml
===================================================================
--- doc/en/Cocoa/AlertStyle.xml	(revision 54932)
+++ doc/en/Cocoa/AlertStyle.xml	(working copy)
@@ -41,6 +41,6 @@
   </Members>
   <Docs>
     <summary>Alert styles defined by Alert.</summary>
-    <remarks>To be added.</remarks>
+    <remarks>The icon shown for each of these alert styles will by default be a 'Generic' applciation icon with the exception of the Critical style which will show a caution icon with a 'Generic' application icon inside of it. To show the real application icon instead of the 'Generic' one, you should set it explicitly using the <see cref="P:Cocoa.Alert.Icon" /> property.</remarks>
   </Docs>
 </Type>
Index: doc/en/Cocoa/Panel.xml
===================================================================
--- doc/en/Cocoa/Panel.xml	(revision 0)
+++ doc/en/Cocoa/Panel.xml	(revision 0)
@@ -0,0 +1,98 @@
+<Type Name="Panel" FullName="Cocoa.Panel">
+  <TypeSignature Language="C#" Value="public class Panel : Cocoa.Window" />
+  <AssemblyInfo>
+    <AssemblyName>cocoa-sharp</AssemblyName>
+    <AssemblyVersion>1.9.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>Cocoa.Window</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public Panel ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>Allocates a new instance of a Panel class.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public Panel (IntPtr native_object);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="native_object" Type="System.IntPtr" />
+      </Parameters>
+      <Docs>
+        <param name="native_object">A pointer to a NSPanel.</param>
+        <summary>Instantiates a managed representation of a NSPanel.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="OKButton">
+      <MemberSignature Language="C#" Value="public const int OKButton = 1;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <MemberValue>1</MemberValue>
+      <Docs>
+        <summary>Constant for indicating that the OK button was clicked.</summary>
+        <remarks>Used by classes derived from panel like <see cref="T:Cocoa.SavePanel" /> and <see cref="T:Cocoa.OpenPanel" />.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="CancelButton">
+      <MemberSignature Language="C#" Value="public const int CancelButton = 0;" />
+      <MemberType>Field</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <MemberValue>0</MemberValue>
+      <Docs>
+        <summary>Constant for indicating that the Cancel button was clicked.</summary>
+        <remarks>Used by classes derived from panel like <see cref="T:Cocoa.SavePanel" /> and <see cref="T:Cocoa.OpenPanel" />.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="FloatingPanel">
+      <MemberSignature Language="C#" Value="public bool FloatingPanel { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Gets or sets whether the panel is a floating panel.</summary>
+        <value>True if the panel is a floating panel, otherwise false.</value>
+        <remarks>The default value is false. Making this true will cause the panel to always appear on top of all other windows in the application.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="BecomesKeyOnlyIfNeeded">
+      <MemberSignature Language="C#" Value="public bool BecomesKeyOnlyIfNeeded { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Gets or sets whether the panel becomes the key panel only when needed.</summary>
+        <value>True if the panel only becomes the key panel when needed, otherwise false.</value>
+        <remarks>If set to true, the panel only will accept keyboard input when necessary. The default value is false.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="WorksWhenModal">
+      <MemberSignature Language="C#" Value="public bool WorksWhenModal { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Gets or sets whether the panel works when another window is being run modally.</summary>
+        <value>True if the panel works when another window is being run modally, otherwise false.</value>
+        <remarks>This property controls the behavior of a panel in cases where another window in the application is being run modally. If set to true, the panel will respond to keyboard and mouse input. If set to false, it won't. The default is false.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>A window that is commonly used to perform secondary functions in an application.</summary>
+    <remarks>Although a panel can be used directly, it is usually accessed through it's derived classes such as <see cref="Cocoa.SavePanel" /> or <see cref="Cocoa.OpenPanel" />.</remarks>
+  </Docs>
+</Type>
Index: doc/en/Cocoa/Application.xml
===================================================================
--- doc/en/Cocoa/Application.xml	(revision 54932)
+++ doc/en/Cocoa/Application.xml	(working copy)
@@ -158,6 +158,76 @@
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
+    <Member MemberName="BeginSheet">
+      <MemberSignature Language="C#" Value="public void BeginSheet (Cocoa.Window sheet, Cocoa.Window docWindow, Cocoa.SheetHandler modalDelegate, IntPtr contextInfo);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="sheet" Type="Cocoa.Window" />
+        <Parameter Name="docWindow" Type="Cocoa.Window" />
+        <Parameter Name="modalDelegate" Type="Cocoa.SheetHandler" />
+        <Parameter Name="contextInfo" Type="System.IntPtr" />
+      </Parameters>
+      <Docs>
+        <param name="sheet">The <see cref="T:Cocoa.Panel" /> or <see cref="T:Cocoa.Window" /> object to be displayed as the sheet.</param>
+        <param name="docWindow">The <see cref="T:Cocoa.Window" /> object that the resulting sheet will be attached to.</param>
+        <param name="modalDelegate">A <see cref="T:Cocoa.SheetHandler" /> instance that points to the callback method for the sheet ending event.</param>
+        <param name="contextInfo">Contextual information that will be passed to the <see cref="T:Cocoa.SheetHandler" /> callback method.</param>
+        <summary>Displays a <see cref="T:Cocoa.Panel" /> or <see cref="T:Cocoa.Window" /> object as a modal sheet attached to the specified window.</summary>
+        <remarks>
+          <para>The callback method should have the signature:</para>
+          <c><para>MethodName (Window sheet, int returnCode, System.IntPtr contextInfo)</para></c>
+          <para>The method should be decorated with an Export attribute in the following format:</para>
+          <c><para>[Export ("methodName:returnCode:contextInfo:")]</para></c>
+        </remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="EndSheet">
+      <MemberSignature Language="C#" Value="public void EndSheet (Cocoa.Window sheet);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="sheet" Type="Cocoa.Window" />
+      </Parameters>
+      <Docs>
+        <param name="sheet">The <see cref="T:Cocoa.Window" /> or <see cref="T:Cocoa.Panel" /> that should no longer be displayed as a sheet.</param>
+        <summary>Ends the display of a sheet.</summary>
+        <remarks>Consider using the overloaded method that takes a return code parameter if you need to pass information back to the <see cref="T:Cocoa.SheetHandler" /> callback method.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="EndSheet">
+      <MemberSignature Language="C#" Value="public void EndSheet (Cocoa.Window sheet, int returnCode);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="sheet" Type="Cocoa.Window" />
+        <Parameter Name="returnCode" Type="System.Int32" />
+      </Parameters>
+      <Docs>
+        <param name="sheet">The <see cref="T:Cocoa.Window" /> or <see cref="T:Cocoa.Panel" /> that should no longer be displayed as a sheet.</param>
+        <param name="returnCode">The integer return code to pass to the sheeDidEnd <see cref="T:Cocoa.SheetHandler" /> delegate method for the ending sheet.</param>
+        <summary>Ends the display of a sheet.</summary>
+        <remarks>Consider using the overloaded method that doesn't take a return code parameter if you don't need to pass information back to the <see cref="T:Cocoa.SheetHandler" /> callback method.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="ApplicationIconImage">
+      <MemberSignature Language="C#" Value="public Cocoa.Image ApplicationIconImage { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.Image</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>The image that will be displayed in the dock and the finder.</summary>
+        <value>An image.</value>
+        <remarks>By default, this will return a generic application icon not the icon specified in the bundle's info.plist.</remarks>
+      </Docs>
+    </Member>
   </Members>
   <Docs>
     <summary>Application is a managed representation of the NSApplication class.</summary>
Index: doc/en/Cocoa/AlertHandler.xml
===================================================================
--- doc/en/Cocoa/AlertHandler.xml	(revision 0)
+++ doc/en/Cocoa/AlertHandler.xml	(revision 0)
@@ -0,0 +1,28 @@
+<Type Name="AlertHandler" FullName="Cocoa.AlertHandler">
+  <TypeSignature Language="C#" Value="public delegate void AlertHandler(Cocoa.Alert alert, int returnCode, IntPtr contextInfo);" />
+  <AssemblyInfo>
+    <AssemblyName>cocoa-sharp</AssemblyName>
+    <AssemblyVersion>1.9.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Delegate</BaseTypeName>
+  </Base>
+  <Parameters>
+    <Parameter Name="alert" Type="Cocoa.Alert" />
+    <Parameter Name="returnCode" Type="System.Int32" />
+    <Parameter Name="contextInfo" Type="System.IntPtr" />
+  </Parameters>
+  <ReturnValue>
+    <ReturnType>System.Void</ReturnType>
+  </ReturnValue>
+  <Docs>
+    <param name="alert">The alert object that raised the event.</param>
+    <param name="returnCode">The return code indicating which button was clicked.</param>
+    <param name="contextInfo">The contextInfo object that was specified.</param>
+    <summary>Defines the shape of methods that are called in response to an alertDidEnd event.</summary>
+    <remarks>
+      <para>The method will be called as the result of clicking on a dialog button on an <see cref="T:Cocoa.Alert" /> sheet.</para>
+      <para>The returnCode will be 1 (Default Button), 0 (Alternate Button), or -1 (Other Button) if you use the static <see cref="M:Cocoa.Alert.AlertWithMessage" /> method for instantiating the Alert. If you use the <see cref="M:Cocoa.Alert.AddButtonWithTitle" /> the returnCode value will start with 1000 for the first button added and increment by one for each new button.</para>
+    </remarks>
+  </Docs>
+</Type>
Index: doc/en/Cocoa/Alert.xml
===================================================================
--- doc/en/Cocoa/Alert.xml	(revision 54932)
+++ doc/en/Cocoa/Alert.xml	(working copy)
@@ -22,7 +22,7 @@
       </Docs>
     </Member>
     <Member MemberName="AlertWithMessage">
-      <MemberSignature Language="C#" Value="public static Cocoa.Alert AlertWithMessage (string messageTitle, string defaultButtonTitle, string alternateButtonTitle, string otherButtonTitle, string format);" />
+      <MemberSignature Language="C#" Value="public static Cocoa.Alert AlertWithMessage (string messageTitle, string defaultButtonTitle, string alternateButtonTitle, string otherButtonTitle, string informativeText);" />
       <MemberType>Method</MemberType>
       <ReturnValue>
         <ReturnType>Cocoa.Alert</ReturnType>
@@ -32,14 +32,14 @@
         <Parameter Name="defaultButtonTitle" Type="System.String" />
         <Parameter Name="alternateButtonTitle" Type="System.String" />
         <Parameter Name="otherButtonTitle" Type="System.String" />
-        <Parameter Name="format" Type="System.String" />
+        <Parameter Name="informativeText" Type="System.String" />
       </Parameters>
       <Docs>
         <param name="messageTitle">The message title.</param>
         <param name="defaultButtonTitle">The title of the default button.</param>
         <param name="alternateButtonTitle">The title of the alternate button.</param>
         <param name="otherButtonTitle">The title of the other button.</param>
-        <param name="format">Informational text.</param>
+        <param name="informativeText">The informational text displayed below the message title.</param>
         <summary>Creates and returns an instance of a Alert class with the specified message title, button titles, and informational text.</summary>
         <returns>An instance of a Alert class.</returns>
         <remarks>Passing an empty string as a button title parameter will cause the button to be omitted from the control.</remarks>
@@ -52,9 +52,9 @@
         <ReturnType>Cocoa.AlertStyle</ReturnType>
       </ReturnValue>
       <Docs>
-        <summary>Gets or sets the AlertStyle value indicating what type of alert is to be displayed.</summary>
-        <value>An AlertStyle value.</value>
-        <remarks>To be added.</remarks>
+        <summary>Gets or sets the <see cref="T:Cocoa.AlertStyle" /> value indicating what type of alert is to be displayed.</summary>
+        <value>An <see cref="T:Cocoa.AlertStyle" /> value.</value>
+        <remarks>See the <see cref="T:Cocoa.AlertStyle" /> documentation for more information.</remarks>
       </Docs>
     </Member>
     <Member MemberName="Icon">
@@ -65,8 +65,8 @@
       </ReturnValue>
       <Docs>
         <summary>Gets or sets the icon displayed in the alert dialog.</summary>
-        <value>An instance of an Image class.</value>
-        <remarks>To be added.</remarks>
+        <value>An instance of an <see cref="T:Cocoa.Image" /> class.</value>
+        <remarks>By default the icon will be a 'generic' application icon, so you might want to set this manually.</remarks>
       </Docs>
     </Member>
     <Member MemberName="RunModal">
@@ -79,12 +79,170 @@
       <Docs>
         <summary>Runs the Alert as a modal dialog.</summary>
         <returns>Returns the value of the button that was clicked.</returns>
-        <remarks>To be added.</remarks>
+        <remarks>The value returned will be 1 (Default Button), 0 (Alternate Button), or -1 (Other Button) if you use the static <see cref="M:Cocoa.Alert.AlertWithMessage" /> method for instantiating the Alert. If you use the <see cref="M:Cocoa.Alert.AddButtonWithTitle" /> method the return values will start with 1000 for the first button added and increment by one for each new button.</remarks>
+        <example>
+          <para>The following example illustrates how to display an alert as a modal dialog with seven buttons.</para>
+          <code lang="c#">private string DisplayAlertDialog () {
+        Alert alertDialog = new Alert ();
+        for (int counter = 1; counter &lt;= 7; counter++) {
+                alertDialog.AddButtonWithTitle ("Button " + counter.ToString());
+        }
+        alertDialog.AlertStyle = AlertStyle.Informational;
+        alertDialog.Icon = new Image ("/path/to/icon");
+        alertDialog.MessageTitle = "Choose a button.";
+        alertDialog.InformativeText = "Please press one of the buttons below.";
+        int alertResult = alertDialog.RunModal ();
+        string buttonChoosen = "unknown";
+        switch (alertResult) {
+        case 1000:
+                buttonChoosen = "Button 1";
+                break;
+        case 1001:
+                buttonChoosen = "Button 2";
+                break;
+        case 1002:
+                buttonChoosen = "Button 3";
+                break;
+        case 1003:
+                buttonChoosen = "Button 4";
+                break;
+        case 1004:
+                buttonChoosen = "Button 5";
+                break;
+        case 1005:
+                buttonChoosen = "Button 6";
+                break;
+        case 1006:
+                buttonChoosen = "Button 7";
+                break;
+        }
+        return buttonChoosen;
+}
+</code>
+        </example>
       </Docs>
     </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public Alert ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>Allocates and initializes a new Alert.</summary>
+        <remarks>Use this constructor if you need to manually add buttons and set properties of your Alert, otherwise you should use the <see cref="M:Cocoa.Alert.AlertWithMessage" /> static method instantiate your Alert</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="AddButtonWithTitle">
+      <MemberSignature Language="C#" Value="public Cocoa.Button AddButtonWithTitle (string buttonTitle);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.Button</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="buttonTitle" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <param name="buttonTitle">The text that appears on the added button.</param>
+        <summary>Adds a new button to the alert dialog.</summary>
+        <returns>The button that was added.</returns>
+        <remarks>You can use this method to manually add buttons to the Alert dialog.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="BeginSheet">
+      <MemberSignature Language="C#" Value="public void BeginSheet (Cocoa.Window theWindow, Cocoa.AlertHandler modalDelegate, IntPtr contextInfo);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="theWindow" Type="Cocoa.Window" />
+        <Parameter Name="modalDelegate" Type="Cocoa.AlertHandler" />
+        <Parameter Name="contextInfo" Type="System.IntPtr" />
+      </Parameters>
+      <Docs>
+        <param name="theWindow">The <see cref="Cocoa.Window" /> object that the alert sheet will be attached to.</param>
+        <param name="modalDelegate">An <see cref="T:Cocoa.AlertHandler" /> object that points to a callback method for the alertDidEnd event.</param>
+        <param name="contextInfo">Contextual information passed to the alertDidEnd event handler.</param>
+        <summary>Runs the Alert as a modal sheet.</summary>
+        <remarks>
+          <para>This is an alternate way of displaying your alert to <see cref="M:Cocoa.Alert.RunModal" />.</para>
+          <para>The AlertHandler's callback method should have the signature:</para>
+          <c>
+            <para>MethodName (Alert alert, int returnCode, System.IntPtr contextInfo)</para>
+          </c>
+          <para>See the <see cref="T:Cocoa.AlertHandler" /> documentation for more info.</para>
+          <para>You should decorate your handler with an "Export" attribute in the following format:</para>
+          <c>
+            <para>[Export ("methodName:returnCode:contextInfo:")]</para>
+          </c>
+        </remarks>
+        <example>
+          <para>The following example illustrates how to display an alert as a sheet.</para>
+          <code lang="c#">private void DisplayAlertSheet () {
+        Alert alertSheet = new Alert ();
+        alertSheet.AlertStyle = AlertStyle.Informational;
+        alertSheet.Icon = new Image ("/path/to/icon");
+        alertSheet.MessageTitle = "This is the title of my alert.";
+        alertSheet.InformativeText = "This is informative text.";
+        AlertHandler alertSheetHandler = new AlertHandler (alertDidEnd);
+        alertSheet.BeginSheet (mainWindow, alertSheetHandler, IntPtr.Zero);
+}
+
+[Export ("alertDidEnd:returnCode:contextInfo:")]
+public void alertDidEnd (Alert alert, int returnCode, System.IntPtr contextInfo) {
+        // Handle the end of the alert sheet.
+}
+</code>
+        </example>
+      </Docs>
+    </Member>
+    <Member MemberName="MessageTitle">
+      <MemberSignature Language="C#" Value="public string MessageTitle { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>The title of your Alert message.</summary>
+        <value>The message title.</value>
+        <remarks>This text will be displayed in a large bold font at the top of your Alert dialog or sheet.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="InformativeText">
+      <MemberSignature Language="C#" Value="public string InformativeText { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>The actual descriptive text of the Alert.</summary>
+        <value>Informational text.</value>
+        <remarks>This text will be displayed below the <see cref="P:Cocoa.Alert.MessageTitle" /> in a smaller non-bold font.</remarks>
+      </Docs>
+    </Member>
   </Members>
   <Docs>
-    <summary>A managed representation of a NSAlert.</summary>
-    <remarks>To be added.</remarks>
+    <summary>An Alert window that can be displayed as a modal dialog or sheet.</summary>
+    <remarks>
+      <para>An Alert is a window with an icon, text, and buttons. It can be displayed as a modal dialog or sheet.</para>
+      <para>You can create an alert instance by using the default constructor or by using the <see cref="M:Cocoa.Alert.AlertWithMessage" /> helper method. To display the alert you need to call either the <see cref="M:Cocoa.Alert.RunModal" /> method or the <see cref="M:Cocoa.Alert.BeginSheet" /> method.</para>
+    </remarks>
+    <example>
+      <para>The following example illustrates how to create a simple modal alert dialog with OK and Cancel buttons.</para>
+      <code lang="c#">private string DisplayAlertDialog () {
+        Alert alertDialog = AlertWithMessage ("This is my message title.", "OK", 
+                "Cancel", "", "This is my message text.");
+        alertDialog.AlertStyle = AlertStyle.Informational;
+        alertDialog.Icon = new Image ("/path/to/icon");
+        int alertResult = alertDialog.RunModal ();
+        string buttonChoosen = "unknown";
+        switch (alertResult) {
+        case 1:
+                buttonChoosen = "OK";
+        case 0:
+                buttonChoosen = "Cancel";
+        }
+        return buttonChoosen;
+}</code>
+    </example>
   </Docs>
 </Type>
Index: doc/en/Cocoa/Window.xml
===================================================================
--- doc/en/Cocoa/Window.xml	(revision 54932)
+++ doc/en/Cocoa/Window.xml	(working copy)
@@ -123,6 +123,15 @@
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public Window ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>Allocates and initializes a Window object.</summary>
+        <remarks>This constructor is also called by Panel, SavePanel, and OpenPanel.</remarks>
+      </Docs>
+    </Member>
   </Members>
   <Docs>
     <summary>To be added.</summary>
Index: doc/en/Cocoa/SavePanel.xml
===================================================================
--- doc/en/Cocoa/SavePanel.xml	(revision 0)
+++ doc/en/Cocoa/SavePanel.xml	(revision 0)
@@ -0,0 +1,327 @@
+<Type Name="SavePanel" FullName="Cocoa.SavePanel">
+  <TypeSignature Language="C#" Value="public class SavePanel : Cocoa.Panel" />
+  <AssemblyInfo>
+    <AssemblyName>cocoa-sharp</AssemblyName>
+    <AssemblyVersion>1.9.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>Cocoa.Panel</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public SavePanel ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>Allocates an initializes a new SavePanel instance.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public SavePanel (IntPtr native_object);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="native_object" Type="System.IntPtr" />
+      </Parameters>
+      <Docs>
+        <param name="native_object">A pointer to a NSSavePanel.</param>
+        <summary>Instantiates a managed representation of a NSSavePanel.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="RunModal">
+      <MemberSignature Language="C#" Value="public int RunModal ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>Runs the SavePanel as a modal dialog.</summary>
+        <returns>
+          <see cref="F:Cocoa.Panel.OKButton" /> or <see cref="F:Cocoa.Panel.CancelButton" />.</returns>
+        <remarks>The save panel browser will begin in the current working directory, or the last directory selected.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="RunModal">
+      <MemberSignature Language="C#" Value="public int RunModal (string directory, string filename);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="directory" Type="System.String" />
+        <Parameter Name="filename" Type="System.String" />
+      </Parameters>
+      <Docs>
+        <param name="directory">The directory to start the SavePanel in.</param>
+        <param name="filename">The file that is initially selected by the SavePanel.</param>
+        <summary>Runs the SavePanel as a modal dialog.</summary>
+        <returns>
+          <see cref="F:Cocoa.Panel.OKButton" /> or <see cref="F:Cocoa.Panel.CancelButton" />.</returns>
+        <remarks>If you pass an empty string for the directory parameter, the save panel browser will begin in the current working directory, or the last directory selected.</remarks>
+        <example>
+          <para>The following example illustrates the creation and display of a Save Panel dialog that has a specific file initially chosen. The file named "test.pdf" will be chosen in the file name text box.</para>
+          <code lang="c#">public string GetUserFileSelection () {
+        SavePanel savePanel = new SavePanel ();
+        string[] fileTypes = new string[] {"txt", "pdf"};
+        savePanel.AllowedFileTypes = fileTypes;
+        if (savePanel.RunModal ("~/", "test.pdf") == Panel.OKButton)
+                return savePanel.Filename;
+        else
+                return "";
+}</code>
+        </example>
+      </Docs>
+    </Member>
+    <Member MemberName="BeginSheet">
+      <MemberSignature Language="C#" Value="public void BeginSheet (string directory, string filename, Cocoa.Window docWindow, Cocoa.SavePanelHandler modalDelegate, IntPtr contextInfo);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="directory" Type="System.String" />
+        <Parameter Name="filename" Type="System.String" />
+        <Parameter Name="docWindow" Type="Cocoa.Window" />
+        <Parameter Name="modalDelegate" Type="Cocoa.SavePanelHandler" />
+        <Parameter Name="contextInfo" Type="System.IntPtr" />
+      </Parameters>
+      <Docs>
+        <param name="directory">The directory to start the SavePanel in.</param>
+        <param name="filename">The file that is initially selected by the SavePanel.</param>
+        <param name="docWindow">The <see cref="T:Cocoa.Window" /> object that the SavePanel sheet will be attached to.</param>
+        <param name="modalDelegate">An <see cref="T:Cocoa.SavePanelHandler" /> object that points to a callback method for the savePanelDidEnd event.</param>
+        <param name="contextInfo">Contextual information to be passed to the savePanelDidEnd event handler.</param>
+        <summary>Runs the SavePanel as a modal sheet.</summary>
+        <remarks>
+          <para>This is an alternate way of displaying your SavePanel to <see cref="M:Cocoa.SavePanel.RunModal" />.</para>
+          <para>The SavePanelHandler's callback method should have the signature:</para>
+          <c>
+            <para>MethodName (SavePanel savePanel, int returnCode, System.IntPtr contextInfo)</para>
+          </c>
+          <para>See the <see cref="T:Cocoa.SavePanelHandler" /> documentation for more info.</para>
+          <para>You should decorate your handler with an "Export" attribute in the following format:</para>
+          <c>
+            <para>[Export ("methodName:returnCode:contextInfo:")]</para>
+          </c>
+        </remarks>
+        <example>
+          <para>The following example illustrates the creation and display of a SavePanel sheet.</para>
+          <code lang="c#">public void GetUserFileSelection () {
+        SavePanel savePanel = new SavePanel ();
+        SavePanelHandler savePanelHandler = new SavePanelHandler (savePanelDidEnd);
+        savePanel.BeginSheet ("", "", mainWindow, savePanelHandler, IntPtr.Zero);
+}
+
+[Export("savePanelDidEnd:returnCode:contextInfo:")]
+public void savePanelDidEnd(SavePanel sheet, int returnCode, System.IntPtr contextInfo)
+{
+        if (returnCode == Panel.OKButton) {
+                string selectedFile = sheet.Filename;
+                // Do something with the selected file...
+        }
+}</code>
+        </example>
+      </Docs>
+    </Member>
+    <Member MemberName="AccessoryView">
+      <MemberSignature Language="C#" Value="public Cocoa.View AccessoryView { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.View</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Custom interface elements to display along with the SavePanel.</summary>
+        <value>A <see cref="T:Cocoa.View" /> object.</value>
+        <remarks>The AccessoryView allows you to add custom controls to your SavePanel so you may extend it's functionality.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Prompt">
+      <MemberSignature Language="C#" Value="public string Prompt { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>The default button label.</summary>
+        <value>Text label of the default OpenPanel button.</value>
+        <remarks>This is normally "Save" for a SavePanel or "Open" for an OpenPanel.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="NameFieldLabel">
+      <MemberSignature Language="C#" Value="public string NameFieldLabel { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Label for the file name field.</summary>
+        <value>Textual label for the file name field.</value>
+        <remarks>This property controls the text that appears to the left the file name text field. If you set this to more characters than the default "Save as:", the text may be truncated on the screen.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Message">
+      <MemberSignature Language="C#" Value="public string Message { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>A message displayed on the SavePanel.</summary>
+        <value>The textual message displayed on the SavePanel.</value>
+        <remarks>This property controls the display of the textual message displayed at the top of the SavePanel in small text. By default the message is blank.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="CanSelectHiddenExtension">
+      <MemberSignature Language="C#" Value="public bool CanSelectHiddenExtension { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Controls the display of the "Hide Extension" checkbox.</summary>
+        <value>True if the "Hide Extension" checkbox is shown to the user. Otherwise, false.</value>
+        <remarks>This property controls whether or not the "Hide Extension" checkbox is shown to the user. Setting this to true allows the user to set the value of the <see cref="P:Cocoa.SavePanel.ExtensionHidden" /> property.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="ExtensionHidden">
+      <MemberSignature Language="C#" Value="public bool ExtensionHidden { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Controls the display of the file extension in the filename text field.</summary>
+        <value>True if the the required file extension is hidden. Otherwise, false.</value>
+        <remarks>This setting only has effect if the <see cref="P:Cocoa.SavePanel.RequiredFileType" /> or <see cref="P:Cocoa.SavePanel.AllowedFileTypes" /> property has been set.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Directory">
+      <MemberSignature Language="C#" Value="public string Directory { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>The path of the directory shown in the SavePanel browser.</summary>
+        <value>A string representation of the selected directory.</value>
+        <remarks>This will return the full filesystem path of whatever directory is currently selected in the SavePanel file browser window.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="RequiredFileType">
+      <MemberSignature Language="C#" Value="public string RequiredFileType { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>The extension of the required file type.</summary>
+        <value>A string representation of the required file type.</value>
+        <remarks>This should be the file extension of whatever type the user is required to save the file as. Do not prefix this with a period. If the user has not selected a file of this type, they will be prompted to append this extension.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="AllowedFileTypes">
+      <MemberSignature Language="C#" Value="public string[] AllowedFileTypes { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String[]</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>The allowed file types.</summary>
+        <value>A string array of allowed file types.</value>
+        <remarks>Do not prefix any of these extensions with a period.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="AllowsOtherFileTypes">
+      <MemberSignature Language="C#" Value="public bool AllowsOtherFileTypes { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Controls whether or not the user can save files with extensions that aren't in <see cref="P:Cocoa.SavePanel.AllowedFileTypes" />.</summary>
+        <value>True if the user is allowed to save files with extensions that aren't in <see cref="P:Cocoa.SavePanel.AllowedFileTypes" />. Otherwise false.</value>
+        <remarks>If a file is selected that doesn't have an extension matching one specified in <see cref="P:Cocoa.SavePanel.AllowedFileTypes" /> they will be prompted to change it. The default value is false.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="TreatsFilePackagesAsDirectories">
+      <MemberSignature Language="C#" Value="public bool TreatsFilePackagesAsDirectories { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Controls whether or not the file browser will allow the selection of files within bundles.</summary>
+        <value>True if the file browser allows the selection of files within bundles. Otherwise false.</value>
+        <remarks>The default value is false.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="CanCreateDirectories">
+      <MemberSignature Language="C#" Value="public bool CanCreateDirectories { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Controls whether or not the user is allowed to create directories.</summary>
+        <value>True if the user is allowed to create directories. Otherwise false.</value>
+        <remarks>The default value is false.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Filename">
+      <MemberSignature Language="C#" Value="public string Filename { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>The path of the selected file.</summary>
+        <value>A string representation of the selected file.</value>
+        <remarks>This property holds the absolute path of the currently selected file in the SavePanel file browser.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="URL">
+      <MemberSignature Language="C#" Value="public Cocoa.URL URL { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.URL</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>The path of the selected file.</summary>
+        <value>A URL representation of the selected file.</value>
+        <remarks>This property holds the absolute path of the currently selected file in the SavePanel file browser.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Expanded">
+      <MemberSignature Language="C#" Value="public bool Expanded { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Gets a value indicating if the SavePanel is in an expanded state.</summary>
+        <value>True if the SavePanel is in an expanded state. Otherwise false.</value>
+        <remarks>When in it's expanded state, a SavePanel will show a detailed file selection browser. In it's contracted state, it just shows the filename textbox and a drowdown for choosing common directories.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>A window for saving files.</summary>
+    <remarks>
+      <para>A SavePanel is a window for saving files. It can be displayed as a modal dialog or sheet.</para>
+      <para>You create a SavePanel instance using the default constructor. To display the SavePanel, you need to call one of the <see cref="M:Cocoa.SavePanel.BeginSheet" /> or <see cref="M:Cocoa.SavePanel.RunModal" /> methods.</para>
+    </remarks>
+    <example>
+      <para>The following example illustrates how to create a modal SavePanel dialog and return the user's chosen file.</para>
+      <code lang="c#">public string GetUserFileSelection () {
+        SavePanel savePanel = new SavePanel ();
+        if (savePanel.RunModal () == Panel.OKButton)
+                return savePanel.Filename;
+        else
+                return "";
+}</code>
+    </example>
+  </Docs>
+</Type>
Index: doc/en/Cocoa/OpenPanel.xml
===================================================================
--- doc/en/Cocoa/OpenPanel.xml	(revision 0)
+++ doc/en/Cocoa/OpenPanel.xml	(revision 0)
@@ -0,0 +1,245 @@
+<Type Name="OpenPanel" FullName="Cocoa.OpenPanel">
+  <TypeSignature Language="C#" Value="public class OpenPanel : Cocoa.SavePanel" />
+  <AssemblyInfo>
+    <AssemblyName>cocoa-sharp</AssemblyName>
+    <AssemblyVersion>1.9.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>Cocoa.SavePanel</BaseTypeName>
+  </Base>
+  <Interfaces />
+  <Members>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public OpenPanel ();" />
+      <MemberType>Constructor</MemberType>
+      <Parameters />
+      <Docs>
+        <summary>Allocates and initializes a new OpenPanel instance.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public OpenPanel (IntPtr native_object);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="native_object" Type="System.IntPtr" />
+      </Parameters>
+      <Docs>
+        <param name="native_object">A pointer to a NSOpenPanel.</param>
+        <summary>Instantiates a managed representation of a NSOpenPanel.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="RunModal">
+      <MemberSignature Language="C#" Value="public int RunModal (string[] fileTypes);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="fileTypes" Type="System.String[]" />
+      </Parameters>
+      <Docs>
+        <param name="fileTypes">Allowed file types.</param>
+        <summary>Runs the OpenPanel as a modal dialog.</summary>
+        <returns>
+          <see cref="F:Cocoa.Panel.OKButton" /> or <see cref="F:Cocoa.Panel.CancelButton" />.</returns>
+        <remarks>The fileTypes parameter is a string array specifying the extensions that will be allowed in the file browser.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="RunModal">
+      <MemberSignature Language="C#" Value="public int RunModal (string directory, string filename, string[] fileTypes);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="directory" Type="System.String" />
+        <Parameter Name="filename" Type="System.String" />
+        <Parameter Name="fileTypes" Type="System.String[]" />
+      </Parameters>
+      <Docs>
+        <param name="directory">The directory to start the OpenPanel in.</param>
+        <param name="filename">The file that is initially selected by the OpenPanel.</param>
+        <param name="fileTypes">Allowed file types.</param>
+        <summary>Runs the OpenPanel as a modal dialog.</summary>
+        <returns>
+          <see cref="F:Cocoa.Panel.OKButton" /> or <see cref="F:Cocoa.Panel.CancelButton" />.</returns>
+        <remarks>The fileTypes parameter is a string array specifying the extensions that will be allowed in the file browser.</remarks>
+        <example>
+          <para>The following example illustrates the creation and display of an Open Panel dialog that has a specific file initially highlighted. The file named "test.pdf" will be highlighted assuming that it exists in the user's home directory.</para>
+          <code lang="c#">public string GetUserFileSelection () {
+        OpenPanel openPanel = new OpenPanel ();
+        string[] fileTypes = new string[] {"txt", "pdf"};
+        if (openPanel.RunModal ("~/", "test.pdf", fileTypes) == Panel.OKButton)
+                return openPanel.Filenames[0];
+        else
+                return "";
+}</code>
+        </example>
+      </Docs>
+    </Member>
+    <Member MemberName="BeginSheet">
+      <MemberSignature Language="C#" Value="public void BeginSheet (Cocoa.Window docWindow, Cocoa.OpenPanelHandler modalDelegate, IntPtr contextInfo);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="docWindow" Type="Cocoa.Window" />
+        <Parameter Name="modalDelegate" Type="Cocoa.OpenPanelHandler" />
+        <Parameter Name="contextInfo" Type="System.IntPtr" />
+      </Parameters>
+      <Docs>
+        <param name="docWindow">The <see cref="T:Cocoa.Window" /> object that the OpenPanel sheet will be attached to.</param>
+        <param name="modalDelegate">An <see cref="T:Cocoa.OpenPanelHandler" /> object that points to a callback method for the openPanelDidEnd event.</param>
+        <param name="contextInfo">Contextual information to be passed to the openPanelDidEnd event handler.</param>
+        <summary>Runs the OpenPanel as a modal sheet.</summary>
+        <remarks>
+          <para>This is an alternate way of displaying your OpenPanel to <see cref="M:Cocoa.OpenPanel.RunModal" />.</para>
+          <para>The OpenPanelHandler's callback method should have the signature:</para>
+          <c>
+            <para>MethodName (OpenPanel openPanel, int returnCode, System.IntPtr contextInfo)</para>
+          </c>
+          <para>See the <see cref="T:Cocoa.OpenPanelHandler" /> documentation for more info.</para>
+          <para>You should decorate your handler with an "Export" attribute in the following format:</para>
+          <c>
+            <para>[Export ("methodName:returnCode:contextInfo:")]</para>
+          </c>
+        </remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="BeginSheet">
+      <MemberSignature Language="C#" Value="public void BeginSheet (string directory, string filename, string[] fileTypes, Cocoa.Window docWindow, Cocoa.OpenPanelHandler modalDelegate, IntPtr contextInfo);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="directory" Type="System.String" />
+        <Parameter Name="filename" Type="System.String" />
+        <Parameter Name="fileTypes" Type="System.String[]" />
+        <Parameter Name="docWindow" Type="Cocoa.Window" />
+        <Parameter Name="modalDelegate" Type="Cocoa.OpenPanelHandler" />
+        <Parameter Name="contextInfo" Type="System.IntPtr" />
+      </Parameters>
+      <Docs>
+        <param name="directory">The directory to start the OpenPanel in.</param>
+        <param name="filename">The file that is initially selected by the OpenPanel.</param>
+        <param name="fileTypes">Allowed file types.</param>
+        <param name="docWindow">The <see cref="T:Cocoa.Window" /> object that the OpenPanel sheet will be attached to.</param>
+        <param name="modalDelegate">An <see cref="T:Cocoa.OpenPanelHandler" /> object that points to a callback method for the openPanelDidEnd event.</param>
+        <param name="contextInfo">Contextual information to be passed to the openPanelDidEnd event handler.</param>
+        <summary>Runs the OpenPanel as a modal sheet.</summary>
+        <remarks>
+          <para>This is an alternate way of displaying your OpenPanel to <see cref="M:Cocoa.OpenPanel.RunModal" />.</para>
+          <para>The OpenPanelHandler's callback method should have the signature:</para>
+          <c>
+            <para>MethodName (OpenPanel openPanel, int returnCode, System.IntPtr contextInfo)</para>
+          </c>
+          <para>See the <see cref="T:Cocoa.OpenPanelHandler" /> documentation for more info.</para>
+          <para>You should decorate your handler with an "Export" attribute in the following format:</para>
+          <c>
+            <para>[Export ("methodName:returnCode:contextInfo:")]</para>
+          </c>
+          <para>The fileTypes parameter is a string array specifying the extensions that will be allowed in the file browser.</para>
+        </remarks>
+        <example>
+          <para>The following example illustrates the creation and display of an OpenPanel sheet.</para>
+          <code lang="c#">public void GetUserFileSelection () {
+        OpenPanel openPanel = new OpenPanel ();
+        string[] fileTypes = new string[] {"txt", "pdf"};
+        OpenPanelHandler openPanelHandler = new OpenPanelHandler (openPanelDidEnd);
+        openPanel.BeginSheet ("", "", fileTypes, mainWindow, openPanelHandler, IntPtr.Zero);
+}
+
+[Export ("openPanelDidEnd:returnCode:contextInfo:")]
+public void openPanelDidEnd (OpenPanel sheet, int returnCode, System.IntPtr contextInfo) {
+        if (returnCode == Panel.OKButton) {
+                string selectedFile = sheet.Filenames[0];
+                // Do something with the selected file...
+        }
+}</code>
+        </example>
+      </Docs>
+    </Member>
+    <Member MemberName="AllowsMultipleSelection">
+      <MemberSignature Language="C#" Value="public bool AllowsMultipleSelection { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Gets or sets whether the OpenPanel allows multiple selections.</summary>
+        <value>True if multiple selections are allowed, otherwise false.</value>
+        <remarks>This property controls the behavior of the OpenPanel's file browser with regards to allowing the selection of multiple files.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="CanChooseDirectories">
+      <MemberSignature Language="C#" Value="public bool CanChooseDirectories { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Gets or sets whether the OpenPanel allows choosing directories.</summary>
+        <value>True if the selection of directories is allowed, otherwise false.</value>
+        <remarks>This property controls the behavior of the OpenPanel's file browser with regards to allowing the selection of entire directories.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="CanChooseFiles">
+      <MemberSignature Language="C#" Value="public bool CanChooseFiles { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Gets or sets whether the OpenPanel allows choosing files.</summary>
+        <value>True if file selection is allowed, otherwise false.</value>
+        <remarks>This property controls the behavior of the OpenPanel's file browser with regards to allowing the selection of individual files.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="URLs">
+      <MemberSignature Language="C#" Value="public Cocoa.URL[] URLs { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.URL[]</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Gets the URLs selected.</summary>
+        <value>The selected URLs.</value>
+        <remarks>This property returns an array of URLs currently selected in the OpenPanel's file browser. The URLs are the absolute paths to the selected files and/or directories.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Filenames">
+      <MemberSignature Language="C#" Value="public string[] Filenames { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.String[]</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Gets the selected files.</summary>
+        <value>The selected files.</value>
+        <remarks>This property returns an array of the absolute path of all files and/or directories selected in the OpenPanel's file browser.</remarks>
+      </Docs>
+    </Member>
+  </Members>
+  <Docs>
+    <summary>A window for choosing files or directories.</summary>
+    <remarks>
+      <para>An OpenPanel is a Window for choosing files or directories. It can be displayed as a modal dialog or sheet.</para>
+      <para>You create an OpenPanel instance using the default constructor. To display the OpenPanel, you need to call one of the <see cref="M:Cocoa.OpenPanel.BeginSheet" /> or <see cref="M:Cocoa.OpenPanel.RunModal" /> methods.</para>
+    </remarks>
+    <example>
+      <para>The following example illustrates how to create a modal OpenPanel dialog and return the user's chosen file.</para>
+      <code lang="c#">public string GetUserFileSelection () {
+        OpenPanel openPanel = new OpenPanel ();
+        string[] fileTypes = new string[] {"txt", "pdf"};
+        if (openPanel.RunModal (fileTypes) == Panel.OKButton)
+                return openPanel.Filenames[0];
+        else
+                return "";
+}</code>
+    </example>
+  </Docs>
+</Type>
Index: doc/en/Cocoa/SavePanelHandler.xml
===================================================================
--- doc/en/Cocoa/SavePanelHandler.xml	(revision 0)
+++ doc/en/Cocoa/SavePanelHandler.xml	(revision 0)
@@ -0,0 +1,25 @@
+<Type Name="SavePanelHandler" FullName="Cocoa.SavePanelHandler">
+  <TypeSignature Language="C#" Value="public delegate void SavePanelHandler(Cocoa.SavePanel sheet, int returnCode, IntPtr contextInfo);" />
+  <AssemblyInfo>
+    <AssemblyName>cocoa-sharp</AssemblyName>
+    <AssemblyVersion>1.9.0.0</AssemblyVersion>
+  </AssemblyInfo>
+  <Base>
+    <BaseTypeName>System.Delegate</BaseTypeName>
+  </Base>
+  <Parameters>
+    <Parameter Name="sheet" Type="Cocoa.SavePanel" />
+    <Parameter Name="returnCode" Type="System.Int32" />
+    <Parameter Name="contextInfo" Type="System.IntPtr" />
+  </Parameters>
+  <ReturnValue>
+    <ReturnType>System.Void</ReturnType>
+  </ReturnValue>
+  <Docs>
+    <param name="sheet">The SavePanel object that raised the event.</param>
+    <param name="returnCode">The return code indicating which button was clicked.</param>
+    <param name="contextInfo">The contextInfo object that was specified.</param>
+    <summary>Defines the shape of methods that are called in response to a savePanelDidEnd event.</summary>
+    <remarks>The return code will be <see cref="M:Cocoa.Panel.OKButton" /> if the OK buton was selected. It will be <see cref="M:Cocoa.Panel.CancelButton" /> if the Cancel button was clicked.</remarks>
+  </Docs>
+</Type>
Index: doc/en/index.xml
===================================================================
--- doc/en/index.xml	(revision 54932)
+++ doc/en/index.xml	(working copy)
@@ -72,6 +72,20 @@
       <Type Name="CFString" />
       <Type Name="MutableString" />
       <Type Name="DragDestination" />
+      <Type Name="Alert" />
+      <Type Name="Button" />
+      <Type Name="OpenPanel" />
+      <Type Name="SavePanel" />
+      <Type Name="Panel" />
+      <Type Name="PopUpButton" />
+      <Type Name="Text" />
+      <Type Name="TextView" />
+      <Type Name="AlertHandler" />
+      <Type Name="OpenPanelHandler" />
+      <Type Name="SavePanelHandler" />
+      <Type Name="SheetHandler" />
+      <Type Name="AlertStyle" />
+      <Type Name="CellStateValue" />
     </Namespace>
     <Namespace Name="WebKit">
       <Type Name="WebBackForwardList" />
Index: doc/ChangeLog
===================================================================
--- doc/ChangeLog	(revision 54932)
+++ doc/ChangeLog	(working copy)
@@ -1,3 +1,6 @@
+2005-12-30  Aaron Flynt  <aaron@aaronflynt.com>
+	* cocoa-sharp.source: Changed basefile attribute to cocoa-sharp.
+
 2005-12-18  Geoff Norton  <gnorton@customerdna.com>
 
 	* Makefile.am: Fix the commit from yesterday to include
Index: doc/cocoa-sharp.source
===================================================================
--- doc/cocoa-sharp.source	(revision 54932)
+++ doc/cocoa-sharp.source	(working copy)
@@ -1,4 +1,4 @@
 <?xml version="1.0"?>
 <monodoc>
-  <source provider="ecma" basefile="cocoa-sharp-docs" path="classlib-cocoa"/>
+  <source provider="ecma" basefile="cocoa-sharp" path="classlib-cocoa"/>
 </monodoc>
Index: src/Cocoa/SavePanel.cs
===================================================================
--- src/Cocoa/SavePanel.cs	(revision 0)
+++ src/Cocoa/SavePanel.cs	(revision 0)
@@ -0,0 +1,229 @@
+using System;
+using System.Reflection;
+using System.Runtime.InteropServices;
+using Cocoa;
+
+namespace Cocoa {
+	public class SavePanel : Panel {
+		private static string ObjectiveCName = "NSSavePanel";
+		
+
+		static SavePanel () {
+			NativeClasses [typeof (SavePanel)] = Native.RegisterClass (typeof (SavePanel)); 
+		}
+
+		public SavePanel () : base () {}
+		
+		public SavePanel (IntPtr native_object) : base (native_object) {}
+
+		public Cocoa.View AccessoryView {
+			get {
+				return (Cocoa.View) Native.NativeToManaged (
+					(IntPtr) ObjCMessaging.objc_msgSend (
+						NativeObject, "accessoryView", typeof (System.IntPtr)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setAccessoryView:", typeof (void), 
+					typeof (System.IntPtr), value.NativeObject);
+			}
+		}
+		
+		public string Prompt {
+			get {
+				return (string) Native.NativeToManaged (
+					(IntPtr) ObjCMessaging.objc_msgSend (
+						NativeObject, "prompt", typeof (System.IntPtr)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setPrompt:", typeof (void), 
+					typeof (System.IntPtr), new Cocoa.String (value).NativeObject);
+			}
+		}
+
+		public string NameFieldLabel {
+			get {
+				return (string) Native.NativeToManaged (
+					(IntPtr) ObjCMessaging.objc_msgSend (
+						NativeObject, "nameFieldLabel", typeof (System.IntPtr)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setNameFieldLabel:", typeof (void), 
+					typeof (System.IntPtr), new Cocoa.String (value).NativeObject);
+			}
+		}
+
+		public string Message {
+			get {
+				return (string) Native.NativeToManaged (
+					(IntPtr) ObjCMessaging.objc_msgSend (
+						NativeObject, "message", typeof (System.IntPtr)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setMessage:", typeof (void), 
+					typeof (System.IntPtr), new Cocoa.String (value).NativeObject);
+			}
+		}
+
+		public bool CanSelectHiddenExtension {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (
+					NativeObject, "canSelectHiddenExtension", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setCanSelectHiddenExtension:", typeof (void), 
+					typeof (bool), value);
+			}
+		}
+
+		public bool ExtensionHidden {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (
+					NativeObject, "isExtensionHidden", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setExtensionHidden:", typeof (void), 
+					typeof (bool), value);
+			}
+		}
+
+		public string Directory {
+			get {
+				return (string) Native.NativeToManaged (
+					(IntPtr) ObjCMessaging.objc_msgSend (
+						NativeObject, "directory", typeof (System.IntPtr)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setDirectory:", typeof (void), 
+					typeof (System.IntPtr), new Cocoa.String (value).NativeObject);
+			}
+		}
+
+		public string RequiredFileType {
+			get {
+				return (string) Native.NativeToManaged (
+					(IntPtr) ObjCMessaging.objc_msgSend (
+						NativeObject, "requiredFileType", typeof (System.IntPtr)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setRequiredFileType:", typeof (void), 
+					typeof (System.IntPtr), new Cocoa.String (value).NativeObject);
+			}
+		}
+
+		public string[] AllowedFileTypes {
+			get {
+				return (string[]) Native.NativeToManaged (
+					(IntPtr) ObjCMessaging.objc_msgSend (
+						NativeObject, "allowedFileTypes", typeof (System.IntPtr)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setAllowedFileTypes:", typeof (void), 
+					typeof (System.IntPtr), (Native.ManagedToNativeArray (value)).NativeObject);
+			}
+		}
+
+		public bool AllowsOtherFileTypes {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (
+					NativeObject, "allowsOtherFileTypes", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setAllowsOtherFileTypes:", typeof (void), 
+					typeof (bool), value);
+			}
+		}
+
+		public bool TreatsFilePackagesAsDirectories {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (
+					NativeObject, "treatsFilePackagesAsDirectories", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setTreatsFilePackagesAsDirectories:", typeof (void), 
+					typeof (bool), value);
+			}
+		}
+
+		public bool CanCreateDirectories {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (
+					NativeObject, "canCreateDirectories", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setCanCreateDirectories:", typeof (void), 
+					typeof (bool), value);
+			}
+		}
+
+		public string Filename {
+			get {
+				return (string) Native.NativeToManaged (
+					(IntPtr) ObjCMessaging.objc_msgSend (
+						NativeObject, "filename", typeof (System.IntPtr)));
+			}
+		}
+
+		public Cocoa.URL URL {
+			get {
+				return (Cocoa.URL) Native.NativeToManaged (
+					(IntPtr) ObjCMessaging.objc_msgSend (
+						NativeObject, "URL", typeof (System.IntPtr)));
+			}
+		}
+
+		public bool Expanded {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (
+					NativeObject, "isExpanded", typeof (bool));
+			}
+		}
+
+		public int RunModal () {
+			return (int)ObjCMessaging.objc_msgSend (
+				NativeObject, "runModal", typeof (System.Int32));
+		}
+
+		public int RunModal (string directory, string filename) {
+			return (int)ObjCMessaging.objc_msgSend (
+				NativeObject, "runModalForDirectory:file:", typeof (System.Int32), 
+				typeof (System.IntPtr), new Cocoa.String(directory).NativeObject, 
+				typeof (System.IntPtr), new Cocoa.String(filename).NativeObject);
+		}
+
+		public void BeginSheet (string directory, string filename, Cocoa.Window docWindow, SavePanelHandler modalDelegate, System.IntPtr contextInfo) {
+			Cocoa.Object target = (Cocoa.Object) modalDelegate.Target;
+			MethodInfo method = modalDelegate.Method;
+			string selector = method.Name;
+			foreach (ExportAttribute export_attribute in Attribute.GetCustomAttributes (method, typeof (ExportAttribute))) {
+				if (export_attribute.Selector != null)
+					selector = export_attribute.Selector;
+			}
+			
+			ObjCMessaging.objc_msgSend (
+				NativeObject, 
+				"beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:", 
+				typeof (void), 
+				typeof (System.IntPtr), new Cocoa.String(directory).NativeObject, 
+				typeof (System.IntPtr), new Cocoa.String(filename).NativeObject, 
+				typeof (System.IntPtr), docWindow.NativeObject, 
+				typeof (System.IntPtr), target.NativeObject, 
+				typeof (System.IntPtr), sel_getUid (selector), 
+				typeof (System.IntPtr), contextInfo);
+		}
+		
+		[DllImport ("libobjc.dylib")]
+		internal static extern IntPtr sel_getUid (string name);
+	}
+}
Index: src/Cocoa/AlertHandler.cs
===================================================================
--- src/Cocoa/AlertHandler.cs	(revision 0)
+++ src/Cocoa/AlertHandler.cs	(revision 0)
@@ -0,0 +1,5 @@
+using Cocoa;
+
+namespace Cocoa {
+	public delegate void AlertHandler (Alert alert, int returnCode, System.IntPtr contextInfo);
+}
Index: src/Cocoa/OpenPanelHandler.cs
===================================================================
--- src/Cocoa/OpenPanelHandler.cs	(revision 0)
+++ src/Cocoa/OpenPanelHandler.cs	(revision 0)
@@ -0,0 +1,5 @@
+using Cocoa;
+
+namespace Cocoa {
+	public delegate void OpenPanelHandler (OpenPanel sheet, int returnCode, System.IntPtr contextInfo);
+}
Index: src/Cocoa/OpenPanel.cs
===================================================================
--- src/Cocoa/OpenPanel.cs	(revision 0)
+++ src/Cocoa/OpenPanel.cs	(revision 0)
@@ -0,0 +1,129 @@
+using System;
+using System.Reflection;
+using System.Runtime.InteropServices;
+using Cocoa;
+
+namespace Cocoa {
+	public class OpenPanel : SavePanel {
+		private static string ObjectiveCName = "NSOpenPanel";
+		
+
+		static OpenPanel () {
+			NativeClasses [typeof (OpenPanel)] = Native.RegisterClass (typeof (OpenPanel)); 
+		}
+
+		public OpenPanel () : base () {}
+		
+		public OpenPanel (IntPtr native_object) : base (native_object) {}
+
+		public bool AllowsMultipleSelection {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (
+					NativeObject, "allowsMultipleSelection", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setAllowsMultipleSelection:", typeof (void), 
+					typeof (bool), value);
+			}
+		}
+
+		public bool CanChooseDirectories {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (
+					NativeObject, "canChooseDirectories", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setCanChooseDirectories:", typeof (void), 
+					typeof (bool), value);
+			}
+		}
+
+		public bool CanChooseFiles {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (
+					NativeObject, "canChooseFiles", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setCanChooseFiles:", typeof (void), 
+					typeof (bool), value);
+			}
+		}
+
+		public Cocoa.URL[] URLs {
+			get {
+				return (Cocoa.URL[]) Native.NativeToManaged (
+					(IntPtr) ObjCMessaging.objc_msgSend ( 
+						NativeObject, "URLs",typeof (System.IntPtr)));
+			}
+		}
+
+		public string[] Filenames {
+			get {
+				return (string[]) Native.NativeToManaged (
+					(IntPtr) ObjCMessaging.objc_msgSend (
+						NativeObject, "filenames", typeof (System.IntPtr)));
+			}
+		}
+
+		public int RunModal (string[] fileTypes) {
+			return (int)ObjCMessaging.objc_msgSend (
+				NativeObject, "runModalForTypes:", typeof (System.Int32), 
+				typeof (System.IntPtr), (Native.ManagedToNativeArray (fileTypes)).NativeObject);
+		}
+
+		public int RunModal (string directory, string filename, string[] fileTypes) {
+			return (int)ObjCMessaging.objc_msgSend (
+				NativeObject, "runModalForDirectory:file:types:", typeof (System.Int32), 
+				typeof (System.IntPtr), new Cocoa.String(directory).NativeObject, 
+				typeof (System.IntPtr), new Cocoa.String(filename).NativeObject, 
+				typeof (System.IntPtr), (Native.ManagedToNativeArray (fileTypes)).NativeObject);
+		}
+
+		public void BeginSheet (Cocoa.Window docWindow, OpenPanelHandler modalDelegate, System.IntPtr contextInfo) {
+			Cocoa.Object target = (Cocoa.Object) modalDelegate.Target;
+			MethodInfo method = modalDelegate.Method;
+			string selector = method.Name;
+			foreach (ExportAttribute export_attribute in Attribute.GetCustomAttributes (method, typeof (ExportAttribute))) {
+				if (export_attribute.Selector != null)
+					selector = export_attribute.Selector;
+			}
+			
+			ObjCMessaging.objc_msgSend (
+				NativeObject, 
+				"beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:", 
+				typeof (void), 
+				typeof (System.IntPtr), IntPtr.Zero, 
+				typeof (System.IntPtr), IntPtr.Zero, 
+				typeof (System.IntPtr), IntPtr.Zero, 
+				typeof (System.IntPtr), docWindow.NativeObject, 
+				typeof (System.IntPtr), target.NativeObject, 
+				typeof (System.IntPtr), sel_getUid (selector), 
+				typeof (System.IntPtr), contextInfo);
+		}
+		
+		public void BeginSheet (string directory, string filename, string[] fileTypes, Cocoa.Window docWindow, OpenPanelHandler modalDelegate, System.IntPtr contextInfo) {
+			Cocoa.Object target = (Cocoa.Object) modalDelegate.Target;
+			MethodInfo method = modalDelegate.Method;
+			string selector = method.Name;
+			foreach (ExportAttribute export_attribute in Attribute.GetCustomAttributes (method, typeof (ExportAttribute))) {
+				if (export_attribute.Selector != null)
+					selector = export_attribute.Selector;
+			}
+			
+			ObjCMessaging.objc_msgSend (
+				NativeObject, 
+				"beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:", 
+				typeof (void), 
+				typeof (System.IntPtr), new Cocoa.String(directory).NativeObject, 
+				typeof (System.IntPtr), new Cocoa.String(filename).NativeObject, 
+				typeof (System.IntPtr), (Native.ManagedToNativeArray (fileTypes)).NativeObject, 
+				typeof (System.IntPtr), docWindow.NativeObject, 
+				typeof (System.IntPtr), target.NativeObject, 
+				typeof (System.IntPtr), sel_getUid (selector), 
+				typeof (System.IntPtr), contextInfo);
+		}
+	}
+}
Index: src/Cocoa/ChangeLog
===================================================================
--- src/Cocoa/ChangeLog	(revision 54932)
+++ src/Cocoa/ChangeLog	(working copy)
@@ -1,5 +1,26 @@
-2005-12-5  Aaron Flynt  <aaron@aaronflynt.com>
+2005-12-30  Aaron Flynt  <aaron@aaronflynt.com>
+	* Alert.cs:
+	(BeginSheet): Added method.
+	(AddButtonWithTitle): Added method.
+	(InformativeText): Added property.
+	(MessageTitle): Added property.
+	(.ctor): Added default calling Cocoa.Object for alloc. Added init.
+	* AlertHandler.cs: Added
+	* Application.cs:
+	(ApplicationIconImage): Added property.
+	(BeginSheet): Added method.
+	(EndSheet): Added method.
+	* Native.cs: Added method ManagedToNativeArray.
+	* OpenPanel.cs: Added.
+	* OpenPanelHandler.cs: Added.
+	* Panel.cs: Added.
+	* SavePanel.cs: Added.
+	* SavePanelHandler.cs: Added.
+	* SheetHandler.cs: Added.
+	* Window.cs: Addeded default .ctor for alloc and init of itself and derived classes.
 
+2005-12-05  Aaron Flynt  <aaron@aaronflynt.com>
+
 	* Alert.cs: Added
 	* AlertStyle.cs: Added
 	* Button.cs: Added
Index: src/Cocoa/Native.cs
===================================================================
--- src/Cocoa/Native.cs	(revision 54932)
+++ src/Cocoa/Native.cs	(working copy)
@@ -732,6 +732,19 @@
 			return constructor;
 		}
 
+		public static Cocoa.Array ManagedToNativeArray (object[] objectArray) {
+			Cocoa.MutableArray cocoaArray = new Cocoa.MutableArray ();
+			for (int counter = 0; counter < objectArray.Length; counter++) {
+				if (objectArray[counter] is System.String) {
+					cocoaArray.Add (new Cocoa.String ((string) objectArray[counter]));
+				}
+				else if (objectArray[counter] is Cocoa.Object) {
+					cocoaArray.Add ((Cocoa.Object) objectArray[counter]);
+				}
+			}
+			return (Cocoa.Array) cocoaArray;
+		}
+
 		[DllImport("libobjc.dylib")]
 		public static extern void objc_setClassHandler(ClassHandlerDelegate class_handler);
 
Index: src/Cocoa/SheetHandler.cs
===================================================================
--- src/Cocoa/SheetHandler.cs	(revision 0)
+++ src/Cocoa/SheetHandler.cs	(revision 0)
@@ -0,0 +1,6 @@
+using Cocoa;
+
+namespace Cocoa {
+	public delegate void SheetHandler (Window sheet, int returnCode, System.IntPtr contextInfo);
+}
+
Index: src/Cocoa/Panel.cs
===================================================================
--- src/Cocoa/Panel.cs	(revision 0)
+++ src/Cocoa/Panel.cs	(revision 0)
@@ -0,0 +1,58 @@
+using System;
+using System.Runtime.InteropServices;
+using Cocoa;
+
+namespace Cocoa {
+	public class Panel : Window {
+		private static string ObjectiveCName = "NSPanel";
+
+		
+		public const int OKButton = 1;
+		public const int CancelButton = 0;
+
+		static Panel () {
+			NativeClasses [typeof (Panel)] = Native.RegisterClass (typeof (Panel)); 
+		}
+		
+		public Panel () : base () {}
+		
+		public Panel (IntPtr native_object) : base (native_object) {}
+
+		public bool FloatingPanel {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (
+					NativeObject, "isFloatingPanel", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setFloatingPanel:", typeof (void), 
+					typeof (bool), value);
+			}
+		}
+
+		public bool BecomesKeyOnlyIfNeeded {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (
+					NativeObject, "becomesKeyOnlyIfNeeded", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setBecomesKeyOnlyIfNeeded:", typeof (void), 
+					typeof (bool), value);
+			}
+		}
+
+		public bool WorksWhenModal {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (
+					NativeObject, "worksWhenModal", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setWorksWhenModal:", typeof (void), 
+					typeof (bool), value);
+			}
+		}
+
+	}
+}
Index: src/Cocoa/Application.cs
===================================================================
--- src/Cocoa/Application.cs	(revision 54932)
+++ src/Cocoa/Application.cs	(working copy)
@@ -1,4 +1,5 @@
 using System;
+using System.Reflection;
 using System.Runtime.InteropServices;
 using Cocoa;
 
@@ -32,6 +33,19 @@
 			}
 		}
 
+		public Cocoa.Image ApplicationIconImage {
+			get {
+				return(Cocoa.Image) Native.NativeToManaged (
+					(System.IntPtr) ObjCMessaging.objc_msgSend (
+						NativeObject, "applicationIconImage", typeof(System.IntPtr)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setApplicationIconImage:", typeof(void), 
+					typeof(System.IntPtr), ((Cocoa.Image) value).NativeObject);
+			}
+		}
+
 		public static void LoadNib (string nibname) {
 			Dictionary dict = new Dictionary ("NSOwner", Application.SharedApplication);
 
@@ -61,7 +75,43 @@
 		public void RunApplication () {
 			ObjCMessaging.objc_msgSend (NativeObject, "run", typeof (void));
 		}
+
+		public void BeginSheet (Cocoa.Window sheet, Cocoa.Window docWindow, SheetHandler modalDelegate, System.IntPtr contextInfo) {
+			Cocoa.Object target = (Cocoa.Object) modalDelegate.Target;
+			MethodInfo method = modalDelegate.Method;
+			string selector = method.Name;
+			foreach (ExportAttribute export_attribute in Attribute.GetCustomAttributes (method, typeof (ExportAttribute))) {
+				if (export_attribute.Selector != null)
+					selector = export_attribute.Selector;
+			}
+			
+			ObjCMessaging.objc_msgSend (
+				NativeObject, 
+				"beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:", 
+				typeof(void), 
+				typeof(System.IntPtr), sheet.NativeObject, 
+				typeof(System.IntPtr), docWindow.NativeObject, 
+				typeof(System.IntPtr), target.NativeObject, 
+				typeof(System.IntPtr), sel_getUid (selector), 
+				typeof(System.IntPtr), contextInfo);
+		}
+
+		public void EndSheet (Cocoa.Window sheet) {
+			ObjCMessaging.objc_msgSend (
+				NativeObject, "endSheet:", typeof (void), 
+				typeof (System.IntPtr), sheet.NativeObject);
+		}
+
+		public void EndSheet (Cocoa.Window sheet, int returnCode) {
+			ObjCMessaging.objc_msgSend (
+				NativeObject, "endSheet:returnCode:", typeof (void), 
+				typeof (System.IntPtr), sheet.NativeObject, 
+				typeof (int), returnCode);
+		}
 		
+		[DllImport ("libobjc.dylib")]
+		internal static extern IntPtr sel_getUid (string name);
+		
 		[DllImport ("/System/Library/Frameworks/AppKit.framework/AppKit")]
 		private static extern int strlen (string str);
 	}
Index: src/Cocoa/Window.cs
===================================================================
--- src/Cocoa/Window.cs	(revision 54932)
+++ src/Cocoa/Window.cs	(working copy)
@@ -10,6 +10,10 @@
 			NativeClasses [typeof (Window)] = Native.RegisterClass (typeof (Window)); 
 		}
 
+		public Window () : base () {
+			Initialize ();
+		}
+		
 		public Window (IntPtr native_object) : base (native_object) {}
 
 		public Window (Rect size, int stylemask, BackingStoreType backingstore, bool defer) {
@@ -57,6 +61,5 @@
 		public void Close () {
 			ObjCMessaging.objc_msgSend (NativeObject, "close", typeof (void));
 		}
-	
 	}
 }
Index: src/Cocoa/Alert.cs
===================================================================
--- src/Cocoa/Alert.cs	(revision 54932)
+++ src/Cocoa/Alert.cs	(working copy)
@@ -1,4 +1,5 @@
 using System;
+using System.Reflection;
 using System.Runtime.InteropServices;
 using Cocoa;
 
@@ -11,49 +12,107 @@
 			NativeClasses [typeof (Alert)] = Native.RegisterClass (typeof (Alert)); 
 		}
 
+		public Alert () : base () {
+			Initialize ();
+		}
+
 		public Alert (IntPtr native_object) : base (native_object) {}
 
+		public string MessageTitle {
+			get {
+				return (string) Native.NativeToManaged (
+					(System.IntPtr) ObjCMessaging.objc_msgSend (
+						NativeObject, "messageText", typeof (System.IntPtr)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setMessageText:", typeof (void), 
+					typeof (System.IntPtr), new Cocoa.String (value).NativeObject);
+			}
+		}
+
+		public string InformativeText {
+			get {
+				return (string) Native.NativeToManaged (
+					(System.IntPtr) ObjCMessaging.objc_msgSend (
+						NativeObject, "informativeText", typeof (System.IntPtr)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setInformativeText:", typeof (void), 
+					typeof (System.IntPtr), new Cocoa.String (value).NativeObject);
+			}
+		}
+
 		public Cocoa.AlertStyle AlertStyle {
 			get { 
-				return(Cocoa.AlertStyle)ObjCMessaging.objc_msgSend(NativeObject, "alertStyle", typeof(System.Int32));
+				return(Cocoa.AlertStyle)ObjCMessaging.objc_msgSend (
+					NativeObject, "alertStyle", typeof (System.Int32));
 			}
 			set { 
-				ObjCMessaging.objc_msgSend(NativeObject, "setAlertStyle:", typeof(void), typeof(System.Int32), value);
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setAlertStyle:", typeof (void), 
+					typeof (System.Int32), value);
 			}
 		}
 
 		public Image Icon {
 			get {
-				return(Image) Native.NativeToManaged((IntPtr)ObjCMessaging.objc_msgSend(NativeObject, "icon", typeof(System.IntPtr)));
+				return(Image) Native.NativeToManaged (
+					(IntPtr)ObjCMessaging.objc_msgSend (
+						NativeObject, "icon", typeof (System.IntPtr)));
 			}
 			set {
-				ObjCMessaging.objc_msgSend(NativeObject, "setIcon:", typeof(void), typeof(System.IntPtr), ((Image) value).NativeObject);
+				ObjCMessaging.objc_msgSend (
+					NativeObject, "setIcon:", typeof (void), 
+					typeof (System.IntPtr), ((Image) value).NativeObject);
 			}
 		}
 
-		public static Alert AlertWithMessage (string messageTitle, string defaultButtonTitle, string alternateButtonTitle, string otherButtonTitle, string format) {
+		public Cocoa.Button AddButtonWithTitle (string buttonTitle) {
+			return (Cocoa.Button) Native.NativeToManaged (
+				(IntPtr) ObjCMessaging.objc_msgSend (
+					NativeObject, "addButtonWithTitle:", typeof (System.IntPtr), 
+					typeof (System.IntPtr), new Cocoa.String (buttonTitle).NativeObject));
+		}
+
+		public static Alert AlertWithMessage (string messageTitle, string defaultButtonTitle, string alternateButtonTitle, string otherButtonTitle, string informativeText) {
 			return(Alert) Native.NativeToManaged (
 				(IntPtr) ObjCMessaging.objc_msgSend (
 					(IntPtr) NativeClasses [typeof (Alert)],
 					"alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:",
-					typeof(System.IntPtr),
-					typeof(System.IntPtr),
-					new Cocoa.String (messageTitle).NativeObject,
-					typeof(System.IntPtr),
-					new Cocoa.String (defaultButtonTitle).NativeObject,
-					typeof(System.IntPtr),
-					new Cocoa.String (alternateButtonTitle).NativeObject,
-					typeof(System.IntPtr), 
-					new Cocoa.String (otherButtonTitle).NativeObject, 
-					typeof(System.IntPtr), 
-					new Cocoa.String (format).NativeObject
-				)
-			);
+					typeof (System.IntPtr), 
+					typeof (System.IntPtr), new Cocoa.String (messageTitle).NativeObject,
+					typeof (System.IntPtr), new Cocoa.String (defaultButtonTitle).NativeObject, 
+					typeof (System.IntPtr), new Cocoa.String (alternateButtonTitle).NativeObject, 
+					typeof (System.IntPtr), new Cocoa.String (otherButtonTitle).NativeObject, 
+					typeof (System.IntPtr), new Cocoa.String (informativeText).NativeObject));
 		}
 
 		public int RunModal() {
-			return(int) ObjCMessaging.objc_msgSend(NativeObject, "runModal", typeof(System.Int32));
+			return(int) ObjCMessaging.objc_msgSend(NativeObject, "runModal", typeof (System.Int32));
 		}
 
+		public void BeginSheet (Cocoa.Window theWindow, AlertHandler modalDelegate, System.IntPtr contextInfo) {
+			Cocoa.Object target = (Cocoa.Object) modalDelegate.Target;
+			MethodInfo method = modalDelegate.Method;
+			string selector = method.Name;
+			foreach (ExportAttribute export_attribute in Attribute.GetCustomAttributes (method, typeof (ExportAttribute))) {
+				if (export_attribute.Selector != null)
+					selector = export_attribute.Selector;
+			}
+			
+			ObjCMessaging.objc_msgSend (
+				NativeObject, 
+				"beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:", 
+				typeof (void), 
+				typeof (System.IntPtr), theWindow.NativeObject, 
+				typeof (System.IntPtr), target.NativeObject, 
+				typeof (System.IntPtr), sel_getUid (selector), 
+				typeof (System.IntPtr), contextInfo);
+		}
+		
+		[DllImport ("libobjc.dylib")]
+		internal static extern IntPtr sel_getUid (string name);    
 	}
 }
Index: src/Cocoa/SavePanelHandler.cs
===================================================================
--- src/Cocoa/SavePanelHandler.cs	(revision 0)
+++ src/Cocoa/SavePanelHandler.cs	(revision 0)
@@ -0,0 +1,6 @@
+using Cocoa;
+
+namespace Cocoa {
+	public delegate void SavePanelHandler (SavePanel sheet, int returnCode, System.IntPtr contextInfo);
+}
+
Index: src/Cocoa/Makefile.am
===================================================================
--- src/Cocoa/Makefile.am	(revision 54932)
+++ src/Cocoa/Makefile.am	(working copy)
@@ -11,6 +11,7 @@
 	./ActionHandler.cs \
 	./Application.cs \
 	./Alert.cs \
+	./AlertHandler.cs \
 	./AlertStyle.cs \
 	./Array.cs \
 	./AssemblyInfo.cs \
@@ -52,7 +53,10 @@
 	./ObjCMessaging.cs \
 	./Object.cs \
 	./OpenGLView.cs \
+	./OpenPanel.cs \
+	./OpenPanelHandler.cs \
 	./OutlineView.cs \
+	./Panel.cs \
 	./Pasteboard.cs \
 	./Point.cs \
 	./PopUpButton.cs \
@@ -61,8 +65,11 @@
 	./RegisterAttribute.cs \
 	./Responder.cs \
 	./RunLoop.cs \
+	./SavePanel.cs \
+	./SavePanelHandler.cs \
 	./Screen.cs \
 	./SearchField.cs \
+	./SheetHandler.cs \
 	./Size.cs \
 	./StackPadding.cs \
 	./TableColumn.cs \
