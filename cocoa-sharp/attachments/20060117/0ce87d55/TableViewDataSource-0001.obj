//******************************************************************************
//* Filename: TableViewDataSource.cs										   *
//* Author:   Binary.God@gmail.com											   *
//* Date:     1/17/06														   *
//* Purpose:  Make it easier on users to use a DataSource with a tableview.	   *
//******************************************************************************
using System;
using System.Collections;

namespace Cocoa {

	public class TableViewDataSource : Object {
	
		//Holds Table Column Identifier (Strings)
		private SortedList tableColumns;
	
		protected TableViewDataSource(IntPtr native_object) : base(native_object){}

		public TableViewDataSource( TableView aTableView ) : base() 
		{ 
			Initialize();
			tableColumns = new SortedList();
			
			TableColumn[] columnList = (TableColumn[])aTableView.TableColumns;
			
			foreach( TableColumn aTableColumn in columnList )
			{
				tableColumns.Add( aTableColumn.Identifier , new ItemCollection() );
			}
			
		}
		
		[Export("numberOfRowsInTableView:")]
		public int numberOfRowsInTableView( TableView aTableView )
		{
	
			return ((ItemCollection)tableColumns.GetByIndex( 0 )).Count;
	
		}
	
		[Export("tableView:objectValueForTableColumn:row:")]
		public object objectValueForTableColumn( TableView aTableView, TableColumn aTableColumn, int rowIndex )
		{
	
			return ((ItemCollection)tableColumns[ aTableColumn.Identifier ])[ rowIndex ];
	
		}
		
		//Use when Table has more than one column
		public void AddTableData( string[] columnIdentifiers, string[] rowData )
		{
			
			int arrayCount = 0;
			
			foreach( string columnIdentifier in columnIdentifiers )
			{
				((ItemCollection)tableColumns[ columnIdentifier ]).Add( rowData[ arrayCount ] );
				arrayCount += 1;
			}
			
		}
		
		//Use when Table has only one column
		public void AddTableData( string rowData )
		{
			
			((ItemCollection)tableColumns.GetByIndex( 0 )).Add( rowData );
			
		}
	
	}
	
	public class ItemCollection : CollectionBase
	{
	
		public void Add( string item )
		{
			base.List.Add( item );
		}
		
		public void Remove( int index )
		{
			base.List.Remove( index );
		}
		
		public Cocoa.String this[ int index ]
		{
			get{
	
				Cocoa.String returnString = new Cocoa.String( (string)base.List[index] );
				return returnString;
			}
		}
	
	}

}