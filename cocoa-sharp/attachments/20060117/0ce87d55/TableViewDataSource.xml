<Type Name="TableViewDataSource" FullName="Cocoa.TableViewDataSource">
  <TypeSignature Language="C#" Value="public class TableViewDataSource : Cocoa.Object" />
  <AssemblyInfo>
    <AssemblyName>cocoa-sharp</AssemblyName>
    <AssemblyVersion>1.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Cocoa.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TableViewDataSource (IntPtr native_object);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="native_object" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="native_object">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TableViewDataSource (Cocoa.TableView aTableView);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="aTableView" Type="Cocoa.TableView" />
      </Parameters>
      <Docs>
        <param name="aTableView">The TableView that this DataSource will be suppling with data.</param>
        <summary>The default constructor.</summary>
        <remarks>Be sure to initialize the DataSource object ONLY after all table columns have been added to the TableView.  Upon initialization all internal storage for data will be built in accordance with information contained in the passed TableView (column identifiers).</remarks>
      </Docs>
    </Member>
    <Member MemberName="numberOfRowsInTableView">
      <MemberSignature Language="C#" Value="public int numberOfRowsInTableView (Cocoa.TableView aTableView);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aTableView" Type="Cocoa.TableView" />
      </Parameters>
      <Docs>
        <param name="aTableView">Defines which TableView is requesting information.</param>
        <summary>Required DataSource Method.</summary>
        <returns>Integer representing the number of rows that are in the table.</returns>
        <remarks>This will return the current count of rows within the table.</remarks>
      </Docs>
    </Member>
    <Member MemberName="objectValueForTableColumn">
      <MemberSignature Language="C#" Value="public object objectValueForTableColumn (Cocoa.TableView aTableView, Cocoa.TableColumn aTableColumn, int rowIndex);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aTableView" Type="Cocoa.TableView" />
        <Parameter Name="aTableColumn" Type="Cocoa.TableColumn" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="aTableView">Defines which TableView is requesting information.</param>
        <param name="aTableColumn">Defines which TableColumn is requesting information..</param>
        <param name="rowIndex">Defines which row data is needed.</param>
        <summary>Required DataSource Method.</summary>
        <returns>Cocoa.String object which is the data in that cell.</returns>
        <remarks>The TableView calls this method to display the data in the TableView, it requests which TableView, which TableColumn and then what index.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTableData">
      <MemberSignature Language="C#" Value="public void AddTableData (string[] columnIdentifiers, string[] rowData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIdentifiers" Type="System.String[]" />
        <Parameter Name="rowData" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="columnIdentifiers">An Array of strings that are the TableColumn identifiers to which you want to add this data to.</param>
        <param name="rowData">An Array of strings that represent the data you want to add.</param>
        <summary>Add data to multi-column TableView.</summary>
        <remarks>This method adds data to a multi-column TableView, the items in the data array need to be in the same order as the column identifier array in order for your data to appear in the correct cells.</remarks>
        <example>
          <para>The following example illustrates how to add data to a multi-column TableView.</para>
          <code lang="c#">myDataSource.AddTableData( new string[] { "columnOne", "columnTwo" }, new string[] { "dataOne", "dataTwo" } );	
		  </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="AddTableData">
      <MemberSignature Language="C#" Value="public void AddTableData (string rowData);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowData" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rowData">The Data to be added to the TableView</param>
        <summary>Add data to single column TableView.</summary>
        <remarks>Adds data to a single column TableView, just pass the data.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
</Type>
