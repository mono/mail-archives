using System;
using System.Runtime.InteropServices;
using Cocoa;

namespace Cocoa {
	public class ProgressIndicator : View {
		private static string ObjectiveCName = "NSProgressIndicator";                                                                                      
		public ProgressIndicator (Rect rect) {
			NativeObject = (IntPtr) ObjCMessaging.objc_msgSend (NativeObject, "initWithFrame:", typeof (IntPtr), typeof (Rect), rect);
		}

		public ProgressIndicator (IntPtr native_object) : base (native_object) {}
		
		public void StartAnimation () {
			ObjCMessaging.objc_msgSend (NativeObject, "startAnimation:", typeof (void), typeof (IntPtr), IntPtr.Zero);
		}
		
		public void StopAnimation () {
			ObjCMessaging.objc_msgSend (NativeObject, "stopAnimation:", typeof (void), typeof (IntPtr), IntPtr.Zero);
		}
        
                public void Animate () {
			ObjCMessaging.objc_msgSend (NativeObject, "animate:", typeof (void), typeof (IntPtr), IntPtr.Zero);
                }
        
                public double AnimationDelay {
			get {
				return (double) ObjCMessaging.objc_msgSend (NativeObject, "animationDelay", typeof (System.Double));
			}
			set {
				ObjCMessaging.objc_msgSend (NativeObject, "setAnimationDelay:", typeof (void), typeof (System.Double), value);
			}
                }
        
                public bool UsesThreadedAnimation {
                        get {
                                return (bool) ObjCMessaging.objc_msgSend (NativeObject, "usesThreadedAnimation", typeof (System.Boolean));
                        }
                        set {
                                ObjCMessaging.objc_msgSend (NativeObject, "setUsesThreadedAnimation:", typeof (void), typeof (System.Boolean), value);
                        }
                }
        
                public void IncrementBy(double delta) {
                        ObjCMessaging.objc_msgSend (NativeObject, "incrementBy:", typeof (void), typeof (System.Double), delta);
                }
        
                public bool Indeterminate {
                        get {
                                return (bool) ObjCMessaging.objc_msgSend (NativeObject, "isIndeterminate", typeof (System.Boolean));
                        }
                        set {
                                ObjCMessaging.objc_msgSend (NativeObject, "setIndeterminate:", typeof (void), typeof (System.Boolean), value);
                        }
                }
        
                public double DoubleValue {
                        get {
                                return (double) ObjCMessaging.objc_msgSend (NativeObject, "doubleValue", typeof (double));
                        }
			set {
				ObjCMessaging.objc_msgSend (NativeObject, "setDoubleValue:", typeof (void), typeof (System.Double), value);
			}
                }

                public double MinValue {
                        get {
                                return (double) ObjCMessaging.objc_msgSend (NativeObject, "minValue", typeof (double));
                        }
                        set {
                                ObjCMessaging.objc_msgSend (NativeObject, "setMinValue:", typeof (void), typeof (System.Double), value);
                        }
                }
        
                public double MaxValue {
                        get {
                                return (double) ObjCMessaging.objc_msgSend (NativeObject, "maxValue", typeof (double));
                        }
                        set {
                                ObjCMessaging.objc_msgSend (NativeObject, "setMaxValue:", typeof (void), typeof (System.Double), value);
                        }
                }
        
                public ProgressIndicatorStyle Style {
                        get {
                                int style = (int) ObjCMessaging.objc_msgSend (NativeObject, "style", typeof (System.Int32));
                                return (ProgressIndicatorStyle) Enum.Parse (typeof (ProgressIndicatorStyle), style.ToString ());
                        }
                        set {
                                ObjCMessaging.objc_msgSend (NativeObject, "setStyle:", typeof (void), typeof (System.Int32), Convert.ToInt32 (value));
                        }
                }
        
                public void SizeToFit() {
                        ObjCMessaging.objc_msgSend (NativeObject, "sizeToFit", typeof (void));
                }
        
                public bool DisplayedWhenStopped {
                        get {
                                return (bool) ObjCMessaging.objc_msgSend (NativeObject, "isDisplayedWhenStopped", typeof (System.Boolean));
                        }
                        set {
                                ObjCMessaging.objc_msgSend (NativeObject, "setDisplayedWhenStopped:", typeof (void), typeof (System.Boolean), value);
                        }
                }
        
                public ProgressIndicatorControlSize ControlSize {
                        get {
                                int size = (int) ObjCMessaging.objc_msgSend (NativeObject, "controlSize", typeof (System.Int32));
                                return (ProgressIndicatorControlSize) Enum.Parse (typeof (ProgressIndicatorControlSize), size.ToString ());
                        }
                        set {
                                ObjCMessaging.objc_msgSend (NativeObject, "setControlSize:", typeof (void), typeof (System.Int32), Convert.ToInt32 (value));
                        }
                }
        
                public ProgressIndicatorControlTint ControlTint {
                        get {
                                int tint = (int) ObjCMessaging.objc_msgSend (NativeObject, "controlTint", typeof (System.Int32));
                                return (ProgressIndicatorControlTint) Enum.Parse (typeof (ProgressIndicatorControlTint), tint.ToString ());
			}
			set {
				ObjCMessaging.objc_msgSend (NativeObject, "setControlTint:", typeof (void), typeof (System.Int32), Convert.ToInt32 (value));
                        }
                }
                
                public bool Bezeled {
                        get {
				return (bool) ObjCMessaging.objc_msgSend (NativeObject, "isBezeled", typeof (System.Boolean));
                        }
                        set {
				ObjCMessaging.objc_msgSend (NativeObject, "setBezeled:", typeof (void), typeof (System.Boolean), value);
                        }
                }
        }
    
        public enum ProgressIndicatorStyle {
                Bar = 0,
                Spinning = 1,
        }
        
        public enum ProgressIndicatorControlSize {
                Regular = 0,
                Small = 1,
        }
        
        public enum ProgressIndicatorControlTint {
                Default = 0,
                Clear = 7,
        }
}
