Index: doc/en/Cocoa/Cell.xml
===================================================================
--- doc/en/Cocoa/Cell.xml	(revision 55197)
+++ doc/en/Cocoa/Cell.xml	(working copy)
@@ -33,6 +33,279 @@
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public Cell (Cocoa.Image image);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="image" Type="Cocoa.Image" />
+      </Parameters>
+      <Docs>
+        <param name="image">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName=".ctor">
+      <MemberSignature Language="C#" Value="public Cell (Cocoa.String aString);" />
+      <MemberType>Constructor</MemberType>
+      <Parameters>
+        <Parameter Name="aString" Type="Cocoa.String" />
+      </Parameters>
+      <Docs>
+        <param name="aString">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="EntryType">
+      <MemberSignature Language="C#" Value="public Cocoa.EntryTypeValue EntryType { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.EntryTypeValue</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Type">
+      <MemberSignature Language="C#" Value="public Cocoa.CellTypeValue Type { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.CellTypeValue</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="ControlTint">
+      <MemberSignature Language="C#" Value="public Cocoa.ControlTintValue ControlTint { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.ControlTintValue</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="ControlSize">
+      <MemberSignature Language="C#" Value="public Cocoa.ControlSizeValue ControlSize { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.ControlSizeValue</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="ObjectValue">
+      <MemberSignature Language="C#" Value="public Cocoa.Object ObjectValue { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.Object</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="HasValidObjectValue">
+      <MemberSignature Language="C#" Value="public bool HasValidObjectValue { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="IntValue">
+      <MemberSignature Language="C#" Value="public int IntValue { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="GetCellAttribute">
+      <MemberSignature Language="C#" Value="public int GetCellAttribute (Cocoa.CellAttributeValue parameter);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="parameter" Type="Cocoa.CellAttributeValue" />
+      </Parameters>
+      <Docs>
+        <param name="parameter">To be added.</param>
+        <summary>To be added.</summary>
+        <returns>To be added.</returns>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SetCellAttribute">
+      <MemberSignature Language="C#" Value="public void SetCellAttribute (Cocoa.CellAttributeValue parameter, int value);" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters>
+        <Parameter Name="parameter" Type="Cocoa.CellAttributeValue" />
+        <Parameter Name="value" Type="System.Int32" />
+      </Parameters>
+      <Docs>
+        <param name="parameter">To be added.</param>
+        <param name="value">To be added.</param>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SetNextState">
+      <MemberSignature Language="C#" Value="public void SetNextState ();" />
+      <MemberType>Method</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Void</ReturnType>
+      </ReturnValue>
+      <Parameters />
+      <Docs>
+        <summary>To be added.</summary>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="DoubleValue">
+      <MemberSignature Language="C#" Value="public double DoubleValue { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Double</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="FloatValue">
+      <MemberSignature Language="C#" Value="public float FloatValue { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Single</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Enabled">
+      <MemberSignature Language="C#" Value="public bool Enabled { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Bezeled">
+      <MemberSignature Language="C#" Value="public bool Bezeled { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Bordered">
+      <MemberSignature Language="C#" Value="public bool Bordered { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="Opaque">
+      <MemberSignature Language="C#" Value="public bool Opaque { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="AllowsUndo">
+      <MemberSignature Language="C#" Value="public bool AllowsUndo { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="AllowsMixedState">
+      <MemberSignature Language="C#" Value="public bool AllowsMixedState { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Boolean</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="NextState">
+      <MemberSignature Language="C#" Value="public int NextState { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="State">
+      <MemberSignature Language="C#" Value="public int State { set; get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>To be added.</summary>
+        <value>To be added.</value>
+        <remarks>To be added.</remarks>
+      </Docs>
+    </Member>
   </Members>
   <Docs>
     <summary>A managed representation of a NSCell.</summary>
Index: doc/en/Cocoa/Control.xml
===================================================================
--- doc/en/Cocoa/Control.xml	(revision 55197)
+++ doc/en/Cocoa/Control.xml	(working copy)
@@ -51,7 +51,8 @@
       <Docs>
         <param name="frame">The display rectangle.</param>
         <summary>Creates a new instance with the specified rectangle.</summary>
-        <remarks></remarks>
+        <remarks>
+        </remarks>
       </Docs>
     </Member>
     <Member MemberName="Enabled">
Index: doc/en/Cocoa/TableColumn.xml
===================================================================
--- doc/en/Cocoa/TableColumn.xml	(revision 55197)
+++ doc/en/Cocoa/TableColumn.xml	(working copy)
@@ -22,10 +22,10 @@
       </Docs>
     </Member>
     <Member MemberName="Identifier">
-      <MemberSignature Language="C#" Value="public Cocoa.Object Identifier { get; };" />
+      <MemberSignature Language="C#" Value="public string Identifier { get; };" />
       <MemberType>Property</MemberType>
       <ReturnValue>
-        <ReturnType>Cocoa.Object</ReturnType>
+        <ReturnType>System.String</ReturnType>
       </ReturnValue>
       <Docs>
         <summary>Gets the identifier.</summary>
Index: doc/en/Cocoa/TableView.xml
===================================================================
--- doc/en/Cocoa/TableView.xml	(revision 55197)
+++ doc/en/Cocoa/TableView.xml	(working copy)
@@ -72,6 +72,30 @@
         <remarks>To be added.</remarks>
       </Docs>
     </Member>
+    <Member MemberName="TableColumns">
+      <MemberSignature Language="C#" Value="public Cocoa.TableColumn[] TableColumns { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>Cocoa.TableColumn[]</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Get all TableColumns.</summary>
+        <value>Array of all TableColumns</value>
+        <remarks>This gives you an Array containing all TableColumns in the TableView.</remarks>
+      </Docs>
+    </Member>
+    <Member MemberName="SelectedRow">
+      <MemberSignature Language="C#" Value="public int SelectedRow { get; };" />
+      <MemberType>Property</MemberType>
+      <ReturnValue>
+        <ReturnType>System.Int32</ReturnType>
+      </ReturnValue>
+      <Docs>
+        <summary>Get selected row.</summary>
+        <value>Index of currently selected row.</value>
+        <remarks>This gives you the index of the currently selected row in the TableView.</remarks>
+      </Docs>
+    </Member>
   </Members>
   <Docs>
     <summary>A managed representation for a NSTableView.</summary>
Index: doc/en/index.xml
===================================================================
--- doc/en/index.xml	(revision 55197)
+++ doc/en/index.xml	(working copy)
@@ -90,6 +90,14 @@
       <Type Name="OpenPanelHandler" />
       <Type Name="SavePanelHandler" />
       <Type Name="SheetHandler" />
+      <Type Name="TableViewDataSource" />
+      <Type Name="ItemCollection" />
+      <Type Name="CellAttributeValue" />
+      <Type Name="CellTypeValue" />
+      <Type Name="ControlSizeValue" />
+      <Type Name="ControlTintValue" />
+      <Type Name="EntryTypeValue" />
+      <Type Name="ImagePositionValue" />
     </Namespace>
     <Namespace Name="WebKit">
       <Type Name="WebBackForwardList" />
Index: src/Cocoa/TableView.cs
===================================================================
--- src/Cocoa/TableView.cs	(revision 55197)
+++ src/Cocoa/TableView.cs	(working copy)
@@ -14,7 +14,7 @@
 
 		public TableView (IntPtr native_object) : base (native_object) {}
 
-		public Cocoa.Object DataSource {
+		public Cocoa.Object DataSource{
 			get {
 				return(Cocoa.Object) Native.NativeToManaged ((IntPtr)ObjCMessaging.objc_msgSend (NativeObject, "dataSource", typeof(System.IntPtr)));
 			}
@@ -22,6 +22,14 @@
 				ObjCMessaging.objc_msgSend (NativeObject, "setDataSource:", typeof (void), typeof (System.IntPtr), value.NativeObject);
 			}
 		}
+		
+		public Cocoa.TableColumn [] TableColumns{
+			get {
+			
+				return( Cocoa.TableColumn [] ) Native.NativeToManaged ((IntPtr) ObjCMessaging.objc_msgSend (NativeObject, "tableColumns", typeof(System.IntPtr)));
+			
+			}
+		}
 
 		public void AddTableColumn (TableColumn column) {
 			ObjCMessaging.objc_msgSend (NativeObject, "addTableColumn:", typeof (void), typeof (IntPtr), column.NativeObject);
@@ -30,6 +38,14 @@
 		public void ReloadData () {
 			ObjCMessaging.objc_msgSend (NativeObject, "reloadData", typeof (void));
 		}
+		
+		public int SelectedRow{
+			get {
+			
+				return(int) ObjCMessaging.objc_msgSend(NativeObject, "selectedRow", typeof(System.Int32));			
+			
+			}
+		}
 
 	}
 }
Index: src/Cocoa/TableColumn.cs
===================================================================
--- src/Cocoa/TableColumn.cs	(revision 55197)
+++ src/Cocoa/TableColumn.cs	(working copy)
@@ -16,9 +16,9 @@
 
 		public TableColumn (IntPtr native_object) : base (native_object) {}
 
-		public Cocoa.Object Identifier {
+		public string Identifier {
 			get {
-				return (Cocoa.Object) Native.NativeToManaged ((IntPtr) ObjCMessaging.objc_msgSend (NativeObject, "identifier", typeof (IntPtr)));
+				return (string) Native.NativeToManaged ((IntPtr) ObjCMessaging.objc_msgSend (NativeObject, "identifier", typeof (IntPtr)));
 			}
 		}
 
Index: src/Cocoa/Cell.cs
===================================================================
--- src/Cocoa/Cell.cs	(revision 55197)
+++ src/Cocoa/Cell.cs	(working copy)
@@ -6,12 +6,28 @@
 	public class Cell : Cocoa.Object {
 		private static string ObjectiveCName = "NSCell";                                                                                      
 
+		/*
+		 * Constructors
+		 */
+
 		static Cell () {
 			NativeClasses [typeof (Cell)] = Native.RegisterClass (typeof (Cell)); 
 		}
 		
 		public Cell (IntPtr native_object) : base (native_object) {}
 		
+		public Cell (Cocoa.Image image) {
+			NativeObject = (IntPtr)ObjCMessaging.objc_msgSend( NativeObject, "initImageCell:", typeof (IntPtr), typeof (IntPtr), image.NativeObject);
+		}
+		
+		public Cell (Cocoa.String aString) {
+			NativeObject = (IntPtr)ObjCMessaging.objc_msgSend (NativeObject, "initTextCell:", typeof (IntPtr), typeof (IntPtr), aString.NativeObject);
+		}
+		
+		/*
+		 * Properties
+		 */
+		
 		public string Value {
 			get {
 				return (string)Native.NativeToManaged ((IntPtr)ObjCMessaging.objc_msgSend (NativeObject, "stringValue:", typeof (void)));
@@ -20,5 +36,168 @@
 				ObjCMessaging.objc_msgSend (NativeObject, "setStringValue:", typeof (void), typeof (System.IntPtr), new Cocoa.String (value).NativeObject);
 			}
 		}
+		
+		public EntryTypeValue EntryType {
+		
+			get {
+				return (Cocoa.EntryTypeValue)Native.NativeToManaged ((IntPtr)ObjCMessaging.objc_msgSend (NativeObject, "entryType", typeof (System.Int32)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (NativeObject, "setEntryType:", typeof (void), typeof (System.Int32), value);
+			}
+		
+		}
+		
+		public CellTypeValue Type {
+			get {
+				return (Cocoa.CellTypeValue)Native.NativeToManaged ((IntPtr)ObjCMessaging.objc_msgSend (NativeObject, "type", typeof (System.Int32)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (NativeObject, "setType:", typeof (void), typeof (System.Int32), value);
+			}
+		}
+		
+		public ControlTintValue ControlTint {
+			get {
+				return (Cocoa.ControlTintValue)Native.NativeToManaged ((IntPtr)ObjCMessaging.objc_msgSend (NativeObject, "controlTint", typeof (System.Int32)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (NativeObject, "setControlTint:", typeof (void), typeof (System.Int32), value);
+			}
+		}
+		
+		public ControlSizeValue ControlSize {
+			get {
+				return (Cocoa.ControlSizeValue)Native.NativeToManaged ((IntPtr)ObjCMessaging.objc_msgSend (NativeObject, "controlSize", typeof (System.Int32)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (NativeObject, "setControlSize:", typeof (void), typeof (System.Int32), value);
+			}
+		}
+		
+		public Cocoa.Object ObjectValue {
+			get {
+				return (Cocoa.Object)Native.NativeToManaged ((IntPtr)ObjCMessaging.objc_msgSend (NativeObject, "objectValue", typeof (System.IntPtr)));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (NativeObject, "setObjectValue:", typeof (void), typeof (System.IntPtr), value);
+			}
+		}
+		
+		public bool HasValidObjectValue {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (NativeObject, "hasValidObjectValue", typeof (bool));
+			}
+		}
+		
+		public int IntValue {
+			get {
+				return (int) ObjCMessaging.objc_msgSend (NativeObject, "intValue", typeof (System.Int32));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (NativeObject, "setIntValue:", typeof (void), typeof (System.Int32), value);
+			}
+		}
+		
+		public double DoubleValue {
+			get {
+				return (double) ObjCMessaging.objc_msgSend (NativeObject, "doubleValue", typeof (double));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (NativeObject, "setDoubleValue:", typeof (void), typeof (bool), value);
+			}
+		}
+		
+		public float FloatValue {
+			get {
+				return (float) ObjCMessaging.objc_msgSend (NativeObject, "floatValue", typeof (float));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (NativeObject, "setFloatValue:", typeof (void), typeof (float), value);
+			}
+		}
+		
+		public bool Enabled {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (NativeObject, "isEnabled", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (NativeObject, "setEnabled:", typeof (void), typeof (bool), value);
+			}
+		}
+		
+		public bool Bezeled {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (NativeObject, "isBezeled", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (NativeObject, "setBezeled:", typeof (void), typeof (bool), value);
+			}
+		}
+		
+		public bool Bordered {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (NativeObject, "isBordered", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (NativeObject, "setBordered:", typeof (void), typeof (bool), value);
+			}
+		}
+		
+		public bool Opaque {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (NativeObject, "isOpaque", typeof (bool));
+			}
+		}
+		
+		public bool AllowsUndo {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (NativeObject, "allowsUndo", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (NativeObject, "setAllowUndo:", typeof (void), typeof (bool), value);
+			}
+		}
+		
+		public bool AllowsMixedState {
+			get {
+				return (bool) ObjCMessaging.objc_msgSend (NativeObject, "allowsMixedState", typeof (bool));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (NativeObject, "setAllowsMixedState:", typeof (void), typeof (bool), value);
+			}
+		}
+		
+		public int NextState {
+			get {
+				return (int) ObjCMessaging.objc_msgSend (NativeObject, "nextState", typeof (System.Int32));
+			}
+		}
+		
+		public int State {
+			get {
+				return (int) ObjCMessaging.objc_msgSend (NativeObject, "state", typeof (System.Int32));
+			}
+			set {
+				ObjCMessaging.objc_msgSend (NativeObject, "setState:", typeof (void), typeof (System.Int32), value);
+			}
+		}
+		
+		/*
+		 * Methods
+		 */
+		
+		public int GetCellAttribute (CellAttributeValue parameter) {
+			return (int) ObjCMessaging.objc_msgSend (NativeObject, "cellAttribute:", typeof (System.Int32), typeof (System.Int32), parameter);
+		}
+		
+		public void SetCellAttribute (CellAttributeValue parameter, int value) {
+			ObjCMessaging.objc_msgSend (NativeObject, "setCellAttribute:to:", typeof (void), typeof (System.Int32), parameter, typeof (int), value);
+		}
+		
+		public void SetNextState () {
+			ObjCMessaging.objc_msgSend (NativeObject, "setNextState:", typeof (void));
+		}
+			
 	}
 }
