Hi Tim,


<excerpt>I'm currently working on this -> <fixed><x-tad-bigger>-
(id)initImageCell:(</x-tad-bigger><color><param>0505,0000,FFFF</param><x-tad-bigger>NSImage</x-tad-bigger></color><x-tad-bigger>
*)</x-tad-bigger></fixed><italic>anImage</italic>


From what I've been able to learn from internet sources, the return
type of (id) means that it's a dynamic object pointer, meaning that
the object doesn't have to be of a particular class...is that right?

</excerpt>

Theoretically yes, but it depends on the method.


<excerpt>I just want to also ask about what the
different ObjCMessaging.objc_msgSend are for:


The first one:

<fontfamily><param>Courier</param><x-tad-bigger>public static
</x-tad-bigger><color><param>0505,0000,EFEF</param><x-tad-bigger>object</x-tad-bigger></color><x-tad-bigger>
</x-tad-bigger><bold><x-tad-bigger>objc_msgSend</x-tad-bigger></bold><x-tad-bigger>
(</x-tad-bigger><color><param>0505,0000,EFEF</param><x-tad-bigger>IntPtr</x-tad-bigger></color><x-tad-bigger>
receiver,
</x-tad-bigger><color><param>0505,0000,EFEF</param><x-tad-bigger>string</x-tad-bigger></color><x-tad-bigger>
selector,
</x-tad-bigger><color><param>0505,0000,EFEF</param><x-tad-bigger>Type</x-tad-bigger></color><x-tad-bigger>
rettype)</x-tad-bigger></fontfamily>


So from what I gather the first one is for items that return something
but have no parameters.  The first passed arg is the NativeObject, the
second one is the property/method/etc, and the third one is the return
type.  Is this correct?


The second one:

<fontfamily><param>Courier</param><x-tad-bigger>public static
</x-tad-bigger><color><param>0505,0000,EFEF</param><x-tad-bigger>object</x-tad-bigger></color><x-tad-bigger>
</x-tad-bigger><bold><x-tad-bigger>objc_msgSend</x-tad-bigger></bold><x-tad-bigger>
(</x-tad-bigger><color><param>0505,0000,EFEF</param><x-tad-bigger>IntPtr</x-tad-bigger></color><x-tad-bigger>
receiver,
</x-tad-bigger><color><param>0505,0000,EFEF</param><x-tad-bigger>string</x-tad-bigger></color><x-tad-bigger>
selector,
</x-tad-bigger><color><param>0505,0000,EFEF</param><x-tad-bigger>Type</x-tad-bigger></color><x-tad-bigger>
rettype,
</x-tad-bigger><bold><x-tad-bigger>params</x-tad-bigger></bold><x-tad-bigger> </x-tad-bigger><color><param>0505,0000,EFEF</param><x-tad-bigger>object</x-tad-bigger></color><x-tad-bigger>[]
args)</x-tad-bigger></fontfamily>


 This one is for items that have parameters, which must be the last
item....I have to look up the params keyword.  I don't think I've ever
seen that before.


So in converting the ObjC statement I supplied earlier would you tell
me if this is correct?


public Cocoa.Cell InitImageCell( Cocoa.Image anImage ) {

    return (Cocoa.Cell)Native.NativeToManaged
((IntPtr)ObjCMessaging.objc_msgSend( NativeObject, "initImageCell",
typeof (IntPtr), typeof (Cocoa.Image), anImage )));

}

</excerpt>

Same as above: The call to objc_msgSend has the right syntax, "params"
catches all arguments beyond the initial ones. However, "initXXX:"
(note that when arguments follow it ends with a colon) is a
second-phase constructor in Objective-C and thus should be a
constructor in C#. ;-) That means:

public Cell (Cocoa.Image image) {

	NativeObject = (IntPtr) ObjC...

}

No native2managed conversion because "you" are already the managed
wrapper.


<excerpt>I noticed that Native.NativeToManaged is ALWAYS used, is that
always the case or is that just coincidence for now?  Now the "typeof
(IntPtr)" that is right before the typeof (Cocoa.Image), should that
be the IntPtr because it's returning a pointer to a dynamic object?

</excerpt>

objc_msgSend and companions virtually always return an id in C, so
that we get an IntPtr (the exception are the _stret C functions). If
you want the wrapper object instead of an IntPtr it needs to be
converted - Native.NativeToManaged in the current implementation,
ObjectiveCObject.FromId in my suggestion. A way to avoid this would be
to support the relevant objects in the ObjectiveC.SendMessage method,
I'll look into that once I'm done with the basics.


Andreas