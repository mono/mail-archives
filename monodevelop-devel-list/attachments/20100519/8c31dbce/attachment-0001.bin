Index: ChangeLog
===================================================================
--- ChangeLog	(revision 157394)
+++ ChangeLog	(working copy)
@@ -1,3 +1,9 @@
+2010-05-19  Jason Siefken <siefkenj@gmail.com>
+
+	* PyBinding.Gui/PythonEditorIndentation.cs: Fixed
+	hardcoded use of "    " for indentation.  Now reads
+	indentation method from StylePolicy.
+
 2010-05-11  Michael Hutchinson  <mhutchinson@novell.com>
 
 	* PyBinding.Gui/PythonEditorOutline.cs:
Index: PyBinding.Gui/PythonEditorIndentation.cs
===================================================================
--- PyBinding.Gui/PythonEditorIndentation.cs	(revision 157394)
+++ PyBinding.Gui/PythonEditorIndentation.cs	(working copy)
@@ -36,39 +36,35 @@
 {
 	public class PythonEditorIndentation : TextEditorExtension
 	{
+			
 		public override bool KeyPress (Gdk.Key key, char keyChar, Gdk.ModifierType modifier)
 		{
 			if (key == Gdk.Key.Return)
 			{
+				//this is the wrong place to grab the current policy. . .It doesn't need to be gabbed so often
+				//get the current indent policy
+				string MimeType = "text/x-python";
+				IEnumerable<string> types = MonoDevelop.Ide.DesktopService.GetMimeTypeInheritanceChain (MimeType);
+				//if nonempty, grab the TextStylePolicy of the current document, or else grab the default policy for Python files.
+				TextStylePolicy currentPolicy = (Document.Dom != null && Document.Dom.Project != null) ? Document.Dom.Project.Policies.Get<TextStylePolicy> (types) : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<TextStylePolicy> (types);
+				//indentString is either a tab or the appropriate number of spaces as specified by the Policy
+				string indentString = (currentPolicy.TabsToSpaces == true) ? new string (' ', currentPolicy.TabWidth) : "\t";
+				
 				string lastLine = Editor.GetLineText (Editor.CursorLine);
 				string trimmed = lastLine.Trim ();
 				bool indent = false;
 				
+				//if the user presses ctrl+enter, unindent one level
 				if ((modifier & Gdk.ModifierType.ControlMask) != 0)
 				{
+
 					Editor.InsertText (Editor.CursorPosition, "\n");
+					
+					int leadingWhitespace = lastLine.Length - lastLine.TrimStart ().Length;
+					//copy the whitespace from the previous line, minus one indentation character
+					Editor.InsertText (Editor.CursorPosition, lastLine.Substring (0, Math.Max (leadingWhitespace - indentString.Length,0)));
 
-					string endTrim = lastLine.TrimEnd ();
-					if (!String.IsNullOrEmpty (endTrim))
-					{
-						int i = 0;
-						while (Char.IsWhiteSpace (endTrim[i]))
-							i++;
-
-						if (i > 4)
-							i -= 4;
-
-						for (int j = 0; j < i; j++)
-							Editor.InsertText (Editor.CursorPosition, " ");
-						
-						return false;
-					}
-					else if (lastLine.Length > 4)
-					{
-						// get the last line, remove 4 chars from it if we can
-						Editor.InsertText (Editor.CursorPosition, lastLine.Substring (0, lastLine.Length - 4));
-						return false;
-					}
+					return false;
 				}
 
 				if (trimmed.EndsWith (":"))
@@ -88,7 +84,7 @@
 				if (indent)
 				{
 					base.KeyPress (key, keyChar, modifier);
-					Editor.InsertText (Editor.CursorPosition, "    ");
+					Editor.InsertText (Editor.CursorPosition, indentString);
 					return false;
 				}
 			}
