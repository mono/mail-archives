Index: ChangeLog
===================================================================
--- ChangeLog	(revisi贸n: 127666)
+++ ChangeLog	(copia de trabajo)
@@ -1,3 +1,17 @@
+2009/02/22 Luciano N. Callero <lnc19@hotmail.com>
+ * MonoDevelop.Database.Sql/Schema/ProcedureSchema.cs: 
+ Added IsFunction Property to know if a Procedure is a function or a 
+ normal SP.
+ * MonoDevelop.Database.Designer/Dialogs/ProcedureEditorDialog.cs: 
+ Fix ArgumentNullException. It was checking a parameter to null which is 
+ supplied after the constructor.
+ * MonoDevelop.Database.Sql.MySql/MySqlSchemaProvider.cs: 
+ Check if it is a function or SP. 
+ Fix MySqlException When is shown Stored procedures on a table which 
+ have functions. 
+ Uncomment GetProcedureAlterStatement Implementation and check if it is 
+ a function or a SP.   
+
 2009/02/06  Lluis Sanchez Gual  <lluis@novell.com>
 
  * MonoDevelop.Database.sln: Flush.
Index: MonoDevelop.Database.Sql/Schema/ProcedureSchema.cs
===================================================================
--- MonoDevelop.Database.Sql/Schema/ProcedureSchema.cs	(revisi贸n: 127666)
+++ MonoDevelop.Database.Sql/Schema/ProcedureSchema.cs	(copia de trabajo)
@@ -36,6 +36,7 @@
 		protected ParameterSchemaCollection parameters;
 		protected string language;
 		protected bool isSystemProcedure = false;
+		protected bool isFunction = false;
 		
 		public ProcedureSchema (ISchemaProvider schemaProvider)
 			: base (schemaProvider)
@@ -90,6 +91,18 @@
 				}
 			}
 		}
+		
+		public bool IsFunction {
+			get {
+				return isFunction;
+			} 
+			set {
+				if (isFunction != value) {
+					isFunction = value;
+					OnChanged ();
+				}
+			}
+		}
 		
 		public override object Clone ()
 		{
Index: MonoDevelop.Database.Designer/Dialogs/ProcedureEditorDialog.cs
===================================================================
--- MonoDevelop.Database.Designer/Dialogs/ProcedureEditorDialog.cs	(revisi贸n: 127666)
+++ MonoDevelop.Database.Designer/Dialogs/ProcedureEditorDialog.cs	(copia de trabajo)
@@ -51,9 +51,7 @@
 		{
 			if (schemaProvider == null)
 				throw new ArgumentNullException ("schemaProvider");
-			if (procedure == null)
-				throw new ArgumentNullException ("procedure");
-			
+
 			this.schemaProvider = schemaProvider;
 			this.procedure = procedure;
 			this.action = create ? SchemaActions.Create : SchemaActions.Alter;
@@ -83,9 +81,12 @@
 		
 		public void Initialize (ProcedureSchema procedure)
 		{
+			if (procedure == null)
+				throw new ArgumentNullException ("procedure");
+			
 			entryName.Text = procedure.Name;
 
-			if (action == SchemaActions.Create) {
+			if (action == SchemaActions.Create || action == SchemaActions.Alter) {
 				sqlEditor.Text = schemaProvider.GetProcedureAlterStatement (procedure);
 				if (commentEditor != null)
 					commentEditor.Comment = procedure.Comment;
Index: MonoDevelop.Database.Sql.MySql/MySqlSchemaProvider.cs
===================================================================
--- MonoDevelop.Database.Sql.MySql/MySqlSchemaProvider.cs	(revisi贸n: 127666)
+++ MonoDevelop.Database.Sql.MySql/MySqlSchemaProvider.cs	(copia de trabajo)
@@ -275,15 +275,20 @@
 				using (command) {
 					if (GetMainVersion (command) >= 5) {
 					    	using (IDataReader r = command.ExecuteReader()) {
-					    		while (r.Read ()) {
+								while (r.Read ()) {
 					    			ProcedureSchema procedure = new ProcedureSchema (this);
 					    			
 					    			procedure.Name = r.GetString (0);
 					    			procedure.OwnerName = r.GetString (1);
-					    			procedure.IsSystemProcedure = r.GetString (2).ToLower ().Contains ("system");
-								
-								IPooledDbConnection conn2 = connectionPool.Request ();
-								IDbCommand command2 = conn2.CreateCommand ("SHOW CREATE PROCEDURE `" + procedure.Name + "`;");
+									procedure.IsSystemProcedure = r.GetString (2).ToLower ().Contains ("system");
+									procedure.IsFunction = r.GetString (2).ToLower ().Contains ("function");
+									
+								IPooledDbConnection conn2 = connectionPool.Request ();
+								IDbCommand command2;
+								if (!procedure.IsFunction)
+									command2 = conn2.CreateCommand ("SHOW CREATE PROCEDURE `" + procedure.Name + "`;");
+								else
+									command2 = conn2.CreateCommand ("SHOW CREATE FUNCTION `" + procedure.Name + "`;");
 								using (IDataReader r2 = command2.ExecuteReader()) {
 									r2.Read ();
 									procedure.Definition = r2.GetString (2);
@@ -931,10 +936,13 @@
 //			return String.Concat ("DROP VIEW IF EXISTS ", view.Name, "; ", Environment.NewLine, view.Definition); 
 //		}
 //		
-//		public override string GetProcedureAlterStatement (ProcedureAlterSchema procedure)
-//		{
-//			return String.Concat ("DROP PROCEDURE IF EXISTS ", procedure.Name, "; ", Environment.NewLine, procedure.Definition);
-//		}
+		public override string GetProcedureAlterStatement (ProcedureSchema procedure)
+		{
+			if (!procedure.IsFunction)
+				return String.Concat ("DROP PROCEDURE IF EXISTS ", procedure.Name, "; ", Environment.NewLine, procedure.Definition);
+			else
+				return String.Concat ("DROP FUNCTION IF EXISTS ", procedure.Name, "; ", Environment.NewLine, procedure.Definition);
+		}
 		
 //TODO: remove this and use the Version provided by the connection pool
 		private int GetMainVersion (IDbCommand command)
