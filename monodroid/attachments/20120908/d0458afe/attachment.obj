using System;

using Android.App;
using Android.Content;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using Android.OS;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Xml.Serialization;
using System.IO;

namespace AndroidXmlSerializer
{
    [Activity(Label = "AndroidXmlSerializer", MainLauncher = true, Icon = "@drawable/icon")]
    public class Activity1 : Activity
    {
        int count = 1;
        string Repro()
        {
            CallHistoryModel.Instance.AddItem(new CallHistoryItem
            {
                Number =
                    "1234",
                Type = CallHistoryItemType.OutgoingAnswered
            });
            CallHistoryModel.Instance.AddItem(new CallHistoryItem
            {
                Number =
                    "2345",
                Type = CallHistoryItemType.OutgoingAnswered
            });

            XmlSerializer x = new XmlSerializer(CallHistoryModel.Instance.GetType());
            StringWriter o = new StringWriter(System.Globalization.CultureInfo.InvariantCulture);
            x.Serialize(o, CallHistoryModel.Instance);
            string serializedData = o.GetStringBuilder().ToString();

            x = new XmlSerializer(CallHistoryModel.Instance.GetType());
            StringReader sr = new StringReader(serializedData);
            CallHistoryModel ch = (CallHistoryModel)x.Deserialize(sr);
            return ch.History.Count.ToString();
            //if (ch.History.Count == 0)
            //    Console.WriteLine("FAIL");
        }

        protected override void OnCreate(Bundle bundle)
        {
            base.OnCreate(bundle);

            // Set our view from the "main" layout resource
            SetContentView(Resource.Layout.Main);

            // Get our button from the layout resource,
            // and attach an event to it
            Button button = FindViewById<Button>(Resource.Id.MyButton);

            button.Click += delegate { button.Text = string.Format("{0} clicks!" + Repro(), count++); };
        }
    }

    [Serializable]
    public class CallHistoryModel
    {
        private static CallHistoryModel me;
        private static object myLock = new object();

        public static CallHistoryModel Instance
        {
            get
            {
                if (me == null)
                {
                    lock (myLock)
                    {
                        if (me == null)
                            me = new CallHistoryModel();
                    }
                }
                return me;
            }
        }

        private List<CallHistoryItem> history;
        public List<CallHistoryItem> History
        {
            get { return history; }
            set { history = value; }
        }

        public ObservableCollection<CallHistoryItem> Items
        {
            get
            {
                lock (myLock)
                {
                    return new
ObservableCollection<CallHistoryItem>(history);
                }
            }
        }

        public void AddItem(CallHistoryItem item)
        {
            if (history.Count >= 100)
                history.RemoveRange(100, history.Count - 100);
            history.Add(item);
        }

        public void RemoveItem(CallHistoryItem item)
        {
            history.Remove(item);
        }

        public CallHistoryModel()
        {
            history = new List<CallHistoryItem>();
        }


    }

    [Serializable]
    public class CallHistoryItem
    {
        public string Number { get; set; }
        public string Name { get; set; }
        public DateTime Date { get; set; }
        public CallHistoryItemType Type { get; set; }
        public byte Count { get; set; }

        public CallHistoryItem(string number)
        {
            Number = number;
            Date = DateTime.Now;
        }

        public CallHistoryItem()
        {
        }
    }


    public enum CallHistoryItemType
    {
        OutgoingUnanswered, OutgoingAnswered,
        IncomingUnanswered, IncomingAnswered
    }
}

