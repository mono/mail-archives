Solo in Npgsql2.0.11.src/src/Npgsql: AssemblyInfo.cs
diff -c PgDroid/PgDroid/Npgsql/NpgsqlCommand.cs Npgsql2.0.11.src/src/Npgsql/NpgsqlCommand.cs
*** PgDroid/PgDroid/Npgsql/NpgsqlCommand.cs	2010-12-20 10:48:26.986921000 +0100
--- Npgsql2.0.11.src/src/Npgsql/NpgsqlCommand.cs	2010-12-20 10:49:25.290921000 +0100
***************
*** 57,66 ****
          // Logging related values
          private static readonly String CLASSNAME = MethodBase.GetCurrentMethod().DeclaringType.Name;
          private static readonly ResourceManager resman = new ResourceManager(MethodBase.GetCurrentMethod().DeclaringType);
!         //private static readonly Regex parameterReplace = new Regex(@"([:@][\w\.]*)", RegexOptions.Singleline|RegexOptions.Compiled);
!         private static readonly Regex parameterReplace = new Regex(@"([:@][\w\.]*)", RegexOptions.Singleline);
!         //private static readonly Regex POSTGRES_TEXT_ARRAY = new Regex(@"^array\[+'", RegexOptions.Compiled | RegexOptions.CultureInvariant);
!         private static readonly Regex POSTGRES_TEXT_ARRAY = new Regex(@"^array\[+'", RegexOptions.CultureInvariant);
  
          private NpgsqlConnection connection;
          private NpgsqlConnector m_Connector; //renamed to account for hiding it in a local function
--- 57,64 ----
          // Logging related values
          private static readonly String CLASSNAME = MethodBase.GetCurrentMethod().DeclaringType.Name;
          private static readonly ResourceManager resman = new ResourceManager(MethodBase.GetCurrentMethod().DeclaringType);
!         private static readonly Regex parameterReplace = new Regex(@"([:@][\w\.]*)", RegexOptions.Singleline|RegexOptions.Compiled);
!         private static readonly Regex POSTGRES_TEXT_ARRAY = new Regex(@"^array\[+'", RegexOptions.Compiled | RegexOptions.CultureInvariant);
  
          private NpgsqlConnection connection;
          private NpgsqlConnector m_Connector; //renamed to account for hiding it in a local function
diff -c PgDroid/PgDroid/Npgsql/NpgsqlConnector.cs Npgsql2.0.11.src/src/Npgsql/NpgsqlConnector.cs
*** PgDroid/PgDroid/Npgsql/NpgsqlConnector.cs	2010-12-20 10:48:28.726921000 +0100
--- Npgsql2.0.11.src/src/Npgsql/NpgsqlConnector.cs	2010-12-20 10:49:26.078921000 +0100
***************
*** 727,766 ****
                  // This is using string concatenation because set search_path doesn't allow type casting. ::text    
                  NpgsqlCommand commandSearchPath = new NpgsqlCommand("SET SEARCH_PATH=" + settings.SearchPath, this);
                  commandSearchPath.ExecuteBlind();
!             }
! 
! 
! 
              /*
               * Try to set SSL negotiation to 0. As of 2010-03-29, recent problems in SSL library implementations made
               * postgresql to add a parameter to set a value when to do this renegotiation or 0 to disable it.
               * Currently, Npgsql has a problem with renegotiation so, we are trying to disable it here.
               * This only works on postgresql servers where the ssl renegotiation settings is supported of course.
               * See http://lists.pgfoundry.org/pipermail/npgsql-devel/2010-February/001065.html for more information.
!              */
! 
! 
! 
!             try
! 
!             {
! 
!                 NpgsqlCommand commandSslrenegotiation = new NpgsqlCommand("SET ssl_renegotiation_limit=0", this);
! 
!                 commandSslrenegotiation.ExecuteBlind();
! 
! 
! 
!             }
! 
!             catch {}
! 
! 
! 
! 
! 
! 
! 
              // Make a shallow copy of the type mapping that the connector will own.
              // It is possible that the connector may add types to its private
              // mapping that will not be valid to another connector, even
--- 727,752 ----
                  // This is using string concatenation because set search_path doesn't allow type casting. ::text    
                  NpgsqlCommand commandSearchPath = new NpgsqlCommand("SET SEARCH_PATH=" + settings.SearchPath, this);
                  commandSearchPath.ExecuteBlind();
!             }
! 
              /*
               * Try to set SSL negotiation to 0. As of 2010-03-29, recent problems in SSL library implementations made
               * postgresql to add a parameter to set a value when to do this renegotiation or 0 to disable it.
               * Currently, Npgsql has a problem with renegotiation so, we are trying to disable it here.
               * This only works on postgresql servers where the ssl renegotiation settings is supported of course.
               * See http://lists.pgfoundry.org/pipermail/npgsql-devel/2010-February/001065.html for more information.
!              */
! 
!             try
!             {
!                 NpgsqlCommand commandSslrenegotiation = new NpgsqlCommand("SET ssl_renegotiation_limit=0", this);
!                 commandSslrenegotiation.ExecuteBlind();
! 
!             }
!             catch {}
! 
! 
! 
              // Make a shallow copy of the type mapping that the connector will own.
              // It is possible that the connector may add types to its private
              // mapping that will not be valid to another connector, even
diff -c PgDroid/PgDroid/Npgsql/NpgsqlParameterCollection.cs Npgsql2.0.11.src/src/Npgsql/NpgsqlParameterCollection.cs
*** PgDroid/PgDroid/Npgsql/NpgsqlParameterCollection.cs	2010-12-20 10:48:31.742921000 +0100
--- Npgsql2.0.11.src/src/Npgsql/NpgsqlParameterCollection.cs	2010-12-20 10:49:27.162921000 +0100
***************
*** 447,454 ****
  		{
  			NpgsqlEventLog.LogMethodEnter(LogLevel.Debug, CLASSNAME, "CopyTo", array, index);
  			(InternalList as ICollection).CopyTo(array, index);
!             // TOQU: Uncomment followind rows
! 			//IRaiseItemChangedEvents x = InternalList as IRaiseItemChangedEvents;
  		}
  
  		public override object SyncRoot
--- 447,453 ----
  		{
  			NpgsqlEventLog.LogMethodEnter(LogLevel.Debug, CLASSNAME, "CopyTo", array, index);
  			(InternalList as ICollection).CopyTo(array, index);
! 			IRaiseItemChangedEvents x = InternalList as IRaiseItemChangedEvents;
  		}
  
  		public override object SyncRoot
diff -c PgDroid/PgDroid/Npgsql/PGUtil.cs Npgsql2.0.11.src/src/Npgsql/PGUtil.cs
*** PgDroid/PgDroid/Npgsql/PGUtil.cs	2010-12-20 10:48:32.726921000 +0100
--- Npgsql2.0.11.src/src/Npgsql/PGUtil.cs	2010-12-20 10:49:28.322921000 +0100
***************
*** 76,89 ****
  		//done to actually use the data. This is not the case here - we are pre-assigning a buffer for
  		//this case purely because we don't care what gets put into it.
  		private static readonly byte[] THRASH_CAN = new byte[THRASH_CAN_SIZE];
! 		private static readonly Encoding ENCODING_UTF8 = Encoding.UTF8;
! 
! 
! 
! 
! 
! 
! 
  		///<summary>
  		/// This method takes a ProtocolVersion and returns an integer
  		/// version number that the Postgres backend will recognize in a
--- 76,85 ----
  		//done to actually use the data. This is not the case here - we are pre-assigning a buffer for
  		//this case purely because we don't care what gets put into it.
  		private static readonly byte[] THRASH_CAN = new byte[THRASH_CAN_SIZE];
! 		private static readonly Encoding ENCODING_UTF8 = Encoding.UTF8;
! 
! 
! 
  		///<summary>
  		/// This method takes a ProtocolVersion and returns an integer
  		/// version number that the Postgres backend will recognize in a
***************
*** 208,214 ****
  					return ENCODING_UTF8.GetChars(buffer)[0];
  				}
  			}
! 			throw new Exception();
  		}
  
  		public static int ReadChars(Stream stream, char[] output, int maxChars, ref int maxRead, int outputIdx)
--- 204,210 ----
  					return ENCODING_UTF8.GetChars(buffer)[0];
  				}
  			}
! 			throw new InvalidDataException();
  		}
  
  		public static int ReadChars(Stream stream, char[] output, int maxChars, ref int maxRead, int outputIdx)
***************
*** 532,551 ****
  		    while(sb.Length != 0 && char.IsWhiteSpace(sb[sb.Length - 1]))
  		        sb.Remove(sb.Length - 1, 1);
  		    return sb;
! 		}
! 
! 
! 
!         internal static void LogStringWritten(string theString)
! 
!         {
! 
!             NpgsqlEventLog.LogMsg(resman, "Log_StringWritten", LogLevel.Debug, theString);
! 
!             
! 
!         }
! 
      }
  
  	/// <summary>
--- 528,540 ----
  		    while(sb.Length != 0 && char.IsWhiteSpace(sb[sb.Length - 1]))
  		        sb.Remove(sb.Length - 1, 1);
  		    return sb;
! 		}
! 
!         internal static void LogStringWritten(string theString)
!         {
!             NpgsqlEventLog.LogMsg(resman, "Log_StringWritten", LogLevel.Debug, theString);
!             
!         }
      }
  
  	/// <summary>
Sottodirectory in comune: PgDroid/PgDroid/Npgsql/SqlGenerators e Npgsql2.0.11.src/src/Npgsql/SqlGenerators
Solo in Npgsql2.0.11.src/src/Npgsql: Web