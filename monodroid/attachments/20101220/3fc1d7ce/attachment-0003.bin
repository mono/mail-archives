diff -c PgDroid/PgDroid/NpgsqlTypes/NpgsqlTypeConverters.cs Npgsql2.0.11.src/src/NpgsqlTypes/NpgsqlTypeConverters.cs
*** PgDroid/PgDroid/NpgsqlTypes/NpgsqlTypeConverters.cs	2010-12-20 10:48:26.490921000 +0100
--- Npgsql2.0.11.src/src/NpgsqlTypes/NpgsqlTypeConverters.cs	2010-12-20 10:49:09.246921000 +0100
***************
*** 44,51 ****
  	internal abstract class BasicBackendToNativeTypeConverter
  	{
  		private static readonly String[] DateFormats = new String[] { "yyyy-MM-dd", };
! //		private static readonly Regex EXCLUDE_DIGITS = new Regex("[^0-9\\-]", RegexOptions.Compiled | RegexOptions.CultureInvariant);
!         private static readonly Regex EXCLUDE_DIGITS = new Regex("[^0-9\\-]", (RegexOptions)(0x008 | 0x200));
  
  		private static readonly String[] TimeFormats =
  			new String[]
--- 44,50 ----
  	internal abstract class BasicBackendToNativeTypeConverter
  	{
  		private static readonly String[] DateFormats = new String[] { "yyyy-MM-dd", };
! 		private static readonly Regex EXCLUDE_DIGITS = new Regex("[^0-9\\-]", RegexOptions.Compiled | RegexOptions.CultureInvariant);
  
  		private static readonly String[] TimeFormats =
  			new String[]
***************
*** 250,257 ****
  
  		/// <summary>
  		/// Convert to a postgresql boolean.
! 		/// </summary>
! 
          internal static String ToBoolean(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			return ((bool)NativeData) ? "TRUE" : "FALSE";
--- 249,255 ----
  
  		/// <summary>
  		/// Convert to a postgresql boolean.
! 		/// </summary>
          internal static String ToBoolean(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			return ((bool)NativeData) ? "TRUE" : "FALSE";
***************
*** 259,266 ****
  
  		/// <summary>
  		/// Convert to a postgresql bit.
! 		/// </summary>
! 
          internal static String ToBit(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  		    if(NativeData is bool)
--- 257,263 ----
  
  		/// <summary>
  		/// Convert to a postgresql bit.
! 		/// </summary>
          internal static String ToBit(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  		    if(NativeData is bool)
***************
*** 286,293 ****
  
  		/// <summary>
  		/// Convert to a postgresql timestamp.
! 		/// </summary>
! 
          internal static String ToDateTime(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			if (!(NativeData is DateTime))
--- 283,289 ----
  
  		/// <summary>
  		/// Convert to a postgresql timestamp.
! 		/// </summary>
          internal static String ToDateTime(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			if (!(NativeData is DateTime))
***************
*** 307,314 ****
  
  		/// <summary>
  		/// Convert to a postgresql date.
! 		/// </summary>
! 
          internal static String ToDate(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			if (!(NativeData is DateTime))
--- 303,309 ----
  
  		/// <summary>
  		/// Convert to a postgresql date.
! 		/// </summary>
          internal static String ToDate(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			if (!(NativeData is DateTime))
***************
*** 320,327 ****
  
  		/// <summary>
  		/// Convert to a postgresql time.
! 		/// </summary>
! 
          internal static String ToTime(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			if (!(NativeData is DateTime))
--- 315,321 ----
  
  		/// <summary>
  		/// Convert to a postgresql time.
! 		/// </summary>
          internal static String ToTime(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			if (!(NativeData is DateTime))
***************
*** 336,355 ****
  
  		/// <summary>
  		/// Convert to a postgres money.
! 		/// </summary>
! 
          internal static String ToMoney(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  		    //Formats accepted vary according to locale, but it always accepts a plain number (no currency or
  		    //grouping symbols) passed as a string (with the appropriate cast appended, as UseCast will cause
  		    //to happen.
  			return ((IFormattable)NativeData).ToString(null, CultureInfo.InvariantCulture.NumberFormat);
! 		}
! 
! 
! 
! 
! 
          internal static string ToBasicType<T>(NpgsqlNativeTypeInfo TypeInfo, object NativeData, Boolean ForExtendedQuery)
          {
              // This double cast is needed in order to get the enum type handled correctly (IConvertible)
--- 330,345 ----
  
  		/// <summary>
  		/// Convert to a postgres money.
! 		/// </summary>
          internal static String ToMoney(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  		    //Formats accepted vary according to locale, but it always accepts a plain number (no currency or
  		    //grouping symbols) passed as a string (with the appropriate cast appended, as UseCast will cause
  		    //to happen.
  			return ((IFormattable)NativeData).ToString(null, CultureInfo.InvariantCulture.NumberFormat);
! 		}
! 
! 
          internal static string ToBasicType<T>(NpgsqlNativeTypeInfo TypeInfo, object NativeData, Boolean ForExtendedQuery)
          {
              // This double cast is needed in order to get the enum type handled correctly (IConvertible)
***************
*** 564,571 ****
  	{
  		/// <summary>
  		/// Point.
! 		/// </summary>
! 
          internal static String ToPoint(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			if (NativeData is NpgsqlPoint)
--- 554,560 ----
  	{
  		/// <summary>
  		/// Point.
! 		/// </summary>
          internal static String ToPoint(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			if (NativeData is NpgsqlPoint)
***************
*** 581,588 ****
  
  		/// <summary>
  		/// Box.
! 		/// </summary>
! 
          internal static String ToBox(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			/*if (NativeData.GetType() == typeof(Rectangle)) {
--- 570,576 ----
  
  		/// <summary>
  		/// Box.
! 		/// </summary>
          internal static String ToBox(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			/*if (NativeData.GetType() == typeof(Rectangle)) {
***************
*** 607,614 ****
  
  		/// <summary>
  		/// LSeg.
! 		/// </summary>
! 
          internal static String ToLSeg(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			NpgsqlLSeg S = (NpgsqlLSeg)NativeData;
--- 595,601 ----
  
  		/// <summary>
  		/// LSeg.
! 		/// </summary>
          internal static String ToLSeg(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			NpgsqlLSeg S = (NpgsqlLSeg)NativeData;
***************
*** 617,624 ****
  
  		/// <summary>
  		/// Open path.
! 		/// </summary>
! 
          internal static String ToPath(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			StringBuilder B = null;
--- 604,610 ----
  
  		/// <summary>
  		/// Open path.
! 		/// </summary>
          internal static String ToPath(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			StringBuilder B = null;
***************
*** 643,650 ****
  
  		/// <summary>
  		/// Polygon.
! 		/// </summary>
! 
          internal static String ToPolygon(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			StringBuilder B = new StringBuilder();
--- 629,635 ----
  
  		/// <summary>
  		/// Polygon.
! 		/// </summary>
          internal static String ToPolygon(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			StringBuilder B = new StringBuilder();
***************
*** 659,666 ****
  
  		/// <summary>
  		/// Circle.
! 		/// </summary>
! 
          internal static String ToCircle(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			NpgsqlCircle C = (NpgsqlCircle)NativeData;
--- 644,650 ----
  
  		/// <summary>
  		/// Circle.
! 		/// </summary>
          internal static String ToCircle(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			NpgsqlCircle C = (NpgsqlCircle)NativeData;
***************
*** 669,676 ****
  
  		/// <summary>
  		/// Convert to a postgres inet.
! 		/// </summary>
! 
          internal static String ToIPAddress(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			if (NativeData is NpgsqlInet)
--- 653,659 ----
  
  		/// <summary>
  		/// Convert to a postgres inet.
! 		/// </summary>
          internal static String ToIPAddress(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			if (NativeData is NpgsqlInet)
***************
*** 683,700 ****
  
  		/// <summary>
  		/// Convert to a postgres interval
! 		/// </summary>
! 
          internal static String ToInterval(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			return
  				((NativeData is TimeSpan)
  					? ((NpgsqlInterval)(TimeSpan)NativeData).ToString()
  					: ((NpgsqlInterval)NativeData).ToString());
! 		}
! 
! 
! 
          internal static string ToTime(NpgsqlNativeTypeInfo typeInfo, object nativeData, Boolean ForExtendedQuery)
  		{
  			if (nativeData is DateTime)
--- 666,680 ----
  
  		/// <summary>
  		/// Convert to a postgres interval
! 		/// </summary>
          internal static String ToInterval(NpgsqlNativeTypeInfo TypeInfo, Object NativeData, Boolean ForExtendedQuery)
  		{
  			return
  				((NativeData is TimeSpan)
  					? ((NpgsqlInterval)(TimeSpan)NativeData).ToString()
  					: ((NpgsqlInterval)NativeData).ToString());
! 		}
! 
          internal static string ToTime(NpgsqlNativeTypeInfo typeInfo, object nativeData, Boolean ForExtendedQuery)
  		{
  			if (nativeData is DateTime)
***************
*** 711,720 ****
  				time = (NpgsqlTime)nativeData;
  			}
  			return time.ToString();
! 		}
! 
! 
! 
          internal static string ToTimeTZ(NpgsqlNativeTypeInfo typeInfo, object nativeData, Boolean ForExtendedQuery)
  		{
  			if (nativeData is DateTime)
--- 691,698 ----
  				time = (NpgsqlTime)nativeData;
  			}
  			return time.ToString();
! 		}
! 
          internal static string ToTimeTZ(NpgsqlNativeTypeInfo typeInfo, object nativeData, Boolean ForExtendedQuery)
  		{
  			if (nativeData is DateTime)
***************
*** 731,740 ****
  				time = (NpgsqlTimeTZ)nativeData;
  			}
  			return time.ToString();
! 		}
! 
! 
! 
          internal static string ToDate(NpgsqlNativeTypeInfo typeInfo, object nativeData, Boolean ForExtendedQuery)
  		{
  			if (nativeData is DateTime)
--- 709,716 ----
  				time = (NpgsqlTimeTZ)nativeData;
  			}
  			return time.ToString();
! 		}
! 
          internal static string ToDate(NpgsqlNativeTypeInfo typeInfo, object nativeData, Boolean ForExtendedQuery)
  		{
  			if (nativeData is DateTime)
***************
*** 745,754 ****
  			{
  				return nativeData.ToString();
  			}
! 		}
! 
! 
! 
          internal static string ToTimeStamp(NpgsqlNativeTypeInfo typeInfo, object nativeData, Boolean ForExtendedQuery)
  		{
  			if (nativeData is DateTime)
--- 721,728 ----
  			{
  				return nativeData.ToString();
  			}
! 		}
! 
          internal static string ToTimeStamp(NpgsqlNativeTypeInfo typeInfo, object nativeData, Boolean ForExtendedQuery)
  		{
  			if (nativeData is DateTime)