using System;
using System.Collections.Generic;
//using System.Web.Script.Serialization;
#if NEWTONSOFT
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#else
using Jayrock.Json;
using Jayrock.Json.Conversion ;
#endif

namespace SignalR
{
    public class JsonSerializerAdapter : IJsonSerializer
    {
        private int _maxJsonLength = 30 * 1024 * 1024;
        //private readonly JavaScriptSerializer _serializer = new JavaScriptSerializer
        //{
        //    MaxJsonLength = 30 * 1024 * 1024
        //};

        public JsonSerializerAdapter()
        {
            //_serializer = new JavaScriptSerializer
            //{
            //    MaxJsonLength = _maxJsonLength
            //};
        }

        public JsonSerializerAdapter(int maxJsonLength )
        {
            _maxJsonLength = maxJsonLength;
            //_serializer = new JavaScriptSerializer
            //{
            //    MaxJsonLength = maxJsonLength
            //};
        }

        public string Stringify(object obj)
        {
            //return _serializer.Serialize(obj);
#if NEWTONSOFT
            string jsonString = JsonConvert.SerializeObject(obj);
#else
            string jsonString = JsonConvert.ExportToString(obj);            
#endif
            return jsonString;
        }

        public object Parse(string json)
        {
            //return _serializer.DeserializeObject(json);
#if NEWTONSOFT
            object jsonObject= JsonConvert.DeserializeObject(json);
#else
            object jsonObject = JsonConvert.Import(json);
#endif
            return jsonObject;
        }

        public object Parse(string json, Type targetType)
        {
            //return _serializer.Deserialize(json, targetType);
#if NEWTONSOFT
            object obj = JsonConvert.DeserializeObject(json);
#else
            object obj = JsonConvert.Import(json);
#endif
            return obj;
        }

        public T Parse<T>(string json)
        {
            //return _serializer.Deserialize<T>(json);
#if NEWTONSOFT
            T obj = JsonConvert.DeserializeObject<T>(json);
#else
            T obj = JsonConvert.Import<T>(json);
#endif
            return obj;
        }


#if NEWTONSOFT
        public JToken ParseValue(string json)
        {
            return JValue.Parse(json);
        }
#else
        public JsonObject ParseValue(string json)
        {
            return JsonConvert.Import(json) as JsonObject;
        }
#endif

    }
}